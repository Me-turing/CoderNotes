const e=JSON.parse('{"key":"v-0d606e6b","path":"/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/06_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01_%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/03_%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html","title":"04_建造者模式","lang":"zh-CN","frontmatter":{"title":"04_建造者模式","icon":"file","order":1,"author":"十七","date":"2023-08-11 周五","category":["初级开发工程师"],"tag":["P5"],"sticky":true,"index":true,"description":"概述 建造者模式 (builder pattern), 也被称为生成器模式 , 是一种创建型设计模式. 定义 : 将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。 建造者模式要解决的问题 : 建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细...","head":[["meta",{"property":"og:url","content":"https://me-turing.github.io/CoderNotes/CoderNotes/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/06_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01_%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/03_%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:title","content":"04_建造者模式"}],["meta",{"property":"og:description","content":"概述 建造者模式 (builder pattern), 也被称为生成器模式 , 是一种创建型设计模式. 定义 : 将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。 建造者模式要解决的问题 : 建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-10T02:49:38.000Z"}],["meta",{"property":"article:author","content":"十七"}],["meta",{"property":"article:tag","content":"P5"}],["meta",{"property":"article:published_time","content":"2023-08-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-10T02:49:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04_建造者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-10T02:49:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"十七\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[{"level":3,"title":"实现方式一  :  标准的实现","slug":"实现方式一-标准的实现","link":"#实现方式一-标准的实现","children":[]},{"level":3,"title":"实现方式二 : 常用的实现","slug":"实现方式二-常用的实现","link":"#实现方式二-常用的实现","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"建造者模式与工厂模式区别","slug":"建造者模式与工厂模式区别","link":"#建造者模式与工厂模式区别","children":[]},{"level":3,"title":"建造者模式的优缺点","slug":"建造者模式的优缺点","link":"#建造者模式的优缺点","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}]}],"git":{"createdTime":1692070300000,"updatedTime":1696906178000,"contributors":[{"name":"SEVENTEEN","email":"2339989978@qq.com","commits":2}]},"readingTime":{"minutes":11.07,"words":3322},"filePathRelative":"doc/02_初级开发工程师/01_第一阶段/06_设计模式/02_二十三种设计模式/01_创建型模式/03_建造者模式.md","localizedDate":"2023年8月11日","autoDesc":true,"excerpt":""}');export{e as data};
