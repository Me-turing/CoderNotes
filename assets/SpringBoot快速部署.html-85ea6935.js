import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as t,c as s,d as r,e,b as o,w as l,f as d}from"./app-71f45f98.js";const c="/CoderNotes/assets/image-20230703151930514-e2dc1269.png",p="/CoderNotes/assets/image-20230703152249768-ee5a3af3.png",g="/CoderNotes/assets/image-20230703153640070-3d4eee68.png",u="/CoderNotes/assets/image-20230703172009848-13eacb53.png",m="/CoderNotes/assets/image-20230703171949109-8dca8c2d.png",v="/CoderNotes/assets/image-20230703172112636-d608a69b.png",b="/CoderNotes/assets/image-20230703172351116-bf332d8c.png",h="/CoderNotes/assets/image-20230703172858922-95eba5ab.png",f="/CoderNotes/assets/image-20230703172937505-5ed0701c.png",_="/CoderNotes/assets/image-20230703172953639-b1ba4d12.png",E="/CoderNotes/assets/image-20230703173202530-2bfdd116.png",B="/CoderNotes/assets/image-20230703173210498-d5a0bc8e.png",S="/CoderNotes/assets/image-20230703173248960-4e327736.png",y="/CoderNotes/assets/image-20230703173612964-1dc1f26d.png",k="/CoderNotes/assets/image-20230703174131939-5d16249f.png",A="/CoderNotes/assets/image-20230704091325104-b9bc0602.png",C="/CoderNotes/assets/image-20230704091701086-97abf719.png",x="/CoderNotes/assets/image-20230704091856261-33db6b60.png",I="/CoderNotes/assets/image-20230704092006528-0693db3c.png",N="/CoderNotes/assets/image-20230704092031812-cb02476d.png",z={},M=d('<h2 id="部署方式" tabindex="-1"><a class="header-anchor" href="#部署方式" aria-hidden="true">#</a> 部署方式</h2><h3 id="手动部署" tabindex="-1"><a class="header-anchor" href="#手动部署" aria-hidden="true">#</a> 手动部署</h3><p>创建Maven项目<br><img src="'+c+`" alt="" loading="lazy"></p><h4 id="方式一-继承方式" tabindex="-1"><a class="header-anchor" href="#方式一-继承方式" aria-hidden="true">#</a> 方式一 : 继承方式</h4><p>修改POM文件</p><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>    &lt;!--继承父项目方式--&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;
    &lt;/parent&gt;
	    
    &lt;groupId&gt;com.meturing&lt;/groupId&gt;
    &lt;artifactId&gt;SpringBoot01&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
	    
	&lt;!--导入SpringBoot-web启动器--&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
            &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖引用情况<br><img src="`+p+`" alt="" loading="lazy"></p><h4 id="方式二-依赖方式" tabindex="-1"><a class="header-anchor" href="#方式二-依赖方式" aria-hidden="true">#</a> 方式二 : 依赖方式</h4><p>在公司中可能会出现必须继承某个项目，如果Sprin Boot用了继承就不能继承别的项目了。所以Spring Boot还提供了依赖的方式。</p><p>修改POM文件</p><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>    &lt;groupId&gt;com.meturing&lt;/groupId&gt;
    &lt;artifactId&gt;SpringBoot01&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;!--继承父项目方式--&gt;
    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
                &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;
    &lt;!--导入SpringBoot-web启动器--&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
            &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖引用情况<br><img src="`+g+'" alt="" loading="lazy"></p><h3 id="自动部署" tabindex="-1"><a class="header-anchor" href="#自动部署" aria-hidden="true">#</a> 自动部署</h3><p>切换Spring Initializr国内源 : <code>https://start.springboot.io</code><br><img src="'+u+'" alt="" loading="lazy"></p><p>填写SpringBoot工程信息<br><img src="'+m+'" alt="" loading="lazy"><br> 注意: 此时打包类型就可以随意选择了,因为我们是SpringBoot项目,内置了运行环境</p><p>选择需要初始化的SpringBoot的版本,勾选SpringWeb项目<br><img src="'+v+'" alt="" loading="lazy"></p><p>由于新版IDEA中没有低版本的初始化,新版本的Spring不在对于低版本的JDK支持会出现报错的情况,如果我们需要使用低版本的如1.8,需要更改pom.xml中的版本为<code>2.3.0.RELEASE</code><br><img src="'+b+'" alt="" loading="lazy"><br><img src="'+h+'" alt="" loading="lazy"></p><p>检查模块的文件映射<br><img src="'+f+'" alt="" loading="lazy"></p><blockquote><p>注意此处有坑 : 如果在一个空的目录下创建模块工程,需要检查顶级目录文件夹中是否自动映射了模块的路径,如果有的话请删除映射,否则会出现被占用的情况</p></blockquote><p>检查项目的工程语言<br><img src="'+_+'" alt="" loading="lazy"></p><p>编译pom文件和工程<br><img src="'+E+'" alt="" loading="lazy"><br><img src="'+B+'" alt="" loading="lazy"></p><p>此时我们看到项目工程已经成功初始化了<br><img src="'+S+'" alt="" loading="lazy"></p><blockquote><p>自动化部署时,IDEA会帮我们创建很多其他的文件,这些文件可以删除也可以保留.在后面的学习中我们将慢慢了解这些文件的作用</p></blockquote><h2 id="启动类和启动器" tabindex="-1"><a class="header-anchor" href="#启动类和启动器" aria-hidden="true">#</a> 启动类和启动器</h2><h3 id="启动类" tabindex="-1"><a class="header-anchor" href="#启动类" aria-hidden="true">#</a> 启动类</h3><p>我们发现在Spring Initializr自动化部署时,为我们创建了<code>SpringBoot02Application.java</code>文件,该文件为SpringBoot的<strong>启动类</strong><br><img src="'+y+'" alt="" loading="lazy"></p><p>Spring Boot的启动类的作用是启动Spring Boot项目，是基于Main方法来运行的。</p><blockquote><p>注意：启动类在启动时会做注解扫描(@Controller、@Service、@Repository......)，扫描位置为同包或者子包下的注解，所以启动类的位置应放于包的根下。</p></blockquote><h3 id="启动器" tabindex="-1"><a class="header-anchor" href="#启动器" aria-hidden="true">#</a> 启动器</h3><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starter(启动器),只需要在项目里面引入这些starter相关场景的的所有依赖都会导入进来. 要用什么功能就导入什么场景在jar包的管理上非常方便，最终实现一站式开发</p><h3 id="二者区别" tabindex="-1"><a class="header-anchor" href="#二者区别" aria-hidden="true">#</a> 二者区别</h3><p>启动类表示项目的启动入口,启动器表示jar的坐标</p><h2 id="快速使用springboot" tabindex="-1"><a class="header-anchor" href="#快速使用springboot" aria-hidden="true">#</a> 快速使用SpringBoot</h2><p>接下来我们根据刚刚的搭建快速创建一个可以访问的接口</p><h3 id="步骤一-创建启动类" tabindex="-1"><a class="header-anchor" href="#步骤一-创建启动类" aria-hidden="true">#</a> 步骤一 : 创建启动类</h3><blockquote><p>自动部署会自动创建启动类,跳过此步骤</p></blockquote><p>SpringBoot01Application.java</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>@SpringBootApplication
public class SpringBoot01Application {
    public static void main(String[] args) {
        SpringApplication.run(SpringBoot01Application.class,args);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项 :</p><ol><li>启动类在执行时,会自动扫描同包或同包下的子包,所以注意启动类的位置.通常为二级包内</li><li>启动类的命名规则通常为 <code>项目名+Application</code></li><li>启动类中使用@SpringBootApplication注解</li><li>Main方法中使用<code>SpringApplication.run(启动类字节码文件,参数)</code></li></ol><figure><img src="`+A+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="步骤二-创建controller" tabindex="-1"><a class="header-anchor" href="#步骤二-创建controller" aria-hidden="true">#</a> 步骤二 : 创建Controller</h3><p>创建com.meturing.controller.MyController.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/geMyFirstController&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">geMyFirstController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;geMyFirstController&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="步骤三-启动访问" tabindex="-1"><a class="header-anchor" href="#步骤三-启动访问" aria-hidden="true">#</a> 步骤三 : 启动访问</h3><p>直接启动运行启动类</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于由于我们没有配置项目参数,所以默认路径为 : <code>localhost:8080</code></p><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>访问: <code>localhost:8080/geMyFirstController</code></p><figure><img src="'+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h2>',54);function w(q,L){const n=a("RouterLink");return t(),s("div",null,[M,r("p",null,[e("可以参考"),o(n,{to:"/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/05_%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/05_SpringBoot/04_SpringBoot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%BB%93%E6%9E%84/SpringBoot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%BB%93%E6%9E%84.html#SpringBoot%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84"},{default:l(()=>[e("SpringBoot项目结构")]),_:1})])])}const D=i(z,[["render",w],["__file","SpringBoot快速部署.html.vue"]]);export{D as default};
