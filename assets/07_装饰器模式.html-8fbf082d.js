const e=JSON.parse('{"key":"v-15699d6e","path":"/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/06_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/07_%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"07_装饰器模式","lang":"zh-CN","frontmatter":{"title":"07_装饰器模式","icon":"file","order":1,"author":"十七","date":"2023-10-09 周一","category":["初级开发工程师"],"tag":["P5"],"sticky":true,"index":true,"description":"简介 装饰模式(decorator pattern) 的原始定义是：动态的给一个对象添加一些额外的职责. 就扩展功能而言,装饰器模式提供了一种比使用子类更加灵活的替代方案. 假设现在有有一块蛋糕,如果只有涂上奶油那这个蛋糕就是普通的奶油蛋糕, 这时如果我们添加上一些蓝莓,那这个蛋糕就是蓝莓蛋糕.如果我们再拿一块黑巧克力 然后写上姓名、插上代表年龄的蜡烛...","head":[["meta",{"property":"og:url","content":"https://me-turing.github.io/CoderNotes/CoderNotes/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/06_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/07_%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:title","content":"07_装饰器模式"}],["meta",{"property":"og:description","content":"简介 装饰模式(decorator pattern) 的原始定义是：动态的给一个对象添加一些额外的职责. 就扩展功能而言,装饰器模式提供了一种比使用子类更加灵活的替代方案. 假设现在有有一块蛋糕,如果只有涂上奶油那这个蛋糕就是普通的奶油蛋糕, 这时如果我们添加上一些蓝莓,那这个蛋糕就是蓝莓蛋糕.如果我们再拿一块黑巧克力 然后写上姓名、插上代表年龄的蜡烛..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-10T02:49:38.000Z"}],["meta",{"property":"article:author","content":"十七"}],["meta",{"property":"article:tag","content":"P5"}],["meta",{"property":"article:published_time","content":"2023-10-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-10T02:49:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07_装饰器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-10T02:49:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"十七\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[{"level":3,"title":"基本角色","slug":"基本角色","link":"#基本角色","children":[]},{"level":3,"title":"相关代码","slug":"相关代码","link":"#相关代码","children":[]}]},{"level":2,"title":"应用实例","slug":"应用实例","link":"#应用实例","children":[{"level":3,"title":"UML类图设计","slug":"uml类图设计","link":"#uml类图设计","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":3,"title":"场景","slug":"场景","link":"#场景","children":[]}]}],"git":{"createdTime":1696832131000,"updatedTime":1696906178000,"contributors":[{"name":"SEVENTEEN","email":"2339989978@qq.com","commits":2}]},"readingTime":{"minutes":5.84,"words":1751},"filePathRelative":"doc/02_初级开发工程师/01_第一阶段/06_设计模式/02_二十三种设计模式/02_结构型模式/07_装饰器模式.md","localizedDate":"2023年10月9日","autoDesc":true,"excerpt":""}');export{e as data};
