const e=JSON.parse('{"key":"v-9c2836f0","path":"/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/06_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01_%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/01_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","title":"01_单例模式","lang":"zh-CN","frontmatter":{"title":"01_单例模式","icon":"file","order":1,"author":"十七","date":"2023-08-10 周四","category":["初级开发工程师"],"tag":["P5"],"sticky":true,"index":true,"description":"概述 定义 : 单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一，此模式保证某个类在运行期间，只有一个实例对外提供服务，而这个类被称为单例类。 使用单例模式要做的两件事: 1. 保证一个类只有一个实例 2. 为该实例提供一个全局访问节点 单例模式的结构: 实现单例模型的方式 饿汉式 在类加载期间初始化静态实例 ,保证 ...","head":[["meta",{"property":"og:url","content":"https://me-turing.github.io/CoderNotes/CoderNotes/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/06_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02_%E4%BA%8C%E5%8D%81%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01_%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/01_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:title","content":"01_单例模式"}],["meta",{"property":"og:description","content":"概述 定义 : 单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一，此模式保证某个类在运行期间，只有一个实例对外提供服务，而这个类被称为单例类。 使用单例模式要做的两件事: 1. 保证一个类只有一个实例 2. 为该实例提供一个全局访问节点 单例模式的结构: 实现单例模型的方式 饿汉式 在类加载期间初始化静态实例 ,保证 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-10T02:49:38.000Z"}],["meta",{"property":"article:author","content":"十七"}],["meta",{"property":"article:tag","content":"P5"}],["meta",{"property":"article:published_time","content":"2023-08-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-10T02:49:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01_单例模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-10T02:49:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"十七\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"实现单例模型的方式","slug":"实现单例模型的方式","link":"#实现单例模型的方式","children":[{"level":3,"title":"饿汉式","slug":"饿汉式","link":"#饿汉式","children":[]},{"level":3,"title":"懒汉式","slug":"懒汉式","link":"#懒汉式","children":[]},{"level":3,"title":"静态内部类","slug":"静态内部类","link":"#静态内部类","children":[]},{"level":3,"title":"枚举","slug":"枚举","link":"#枚举","children":[]}]},{"level":2,"title":"反射和序列化的影响","slug":"反射和序列化的影响","link":"#反射和序列化的影响","children":[]},{"level":2,"title":"单例模式总结","slug":"单例模式总结","link":"#单例模式总结","children":[]},{"level":2,"title":"小知识","slug":"小知识","link":"#小知识","children":[{"level":3,"title":"初始化对象的步骤","slug":"初始化对象的步骤","link":"#初始化对象的步骤","children":[]}]}],"git":{"createdTime":1691638935000,"updatedTime":1696906178000,"contributors":[{"name":"SEVENTEEN","email":"2339989978@qq.com","commits":3}]},"readingTime":{"minutes":12.58,"words":3773},"filePathRelative":"doc/02_初级开发工程师/01_第一阶段/06_设计模式/02_二十三种设计模式/01_创建型模式/01_单例模式.md","localizedDate":"2023年8月10日","autoDesc":true,"excerpt":""}');export{e as data};
