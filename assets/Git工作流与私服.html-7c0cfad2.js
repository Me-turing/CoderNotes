import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as l,c as d,d as e,e as a,b as t,f as r}from"./app-71f45f98.js";const o="/CoderNotes/assets/image_57_1N5o9H1A7J-5cb0d5c0.png",h="/CoderNotes/assets/image_58__I7SOTEDej-2f34db96.png",c="/CoderNotes/assets/image_56_MuWznQr4eD-0473b22d.jpeg",p={},u=r('<h2 id="git工作流" tabindex="-1"><a class="header-anchor" href="#git工作流" aria-hidden="true">#</a> Git工作流</h2><p>简单来说就是，一个项目的成员们在工作中统一使用Git的工作方式。</p><p>Gitflow工作流通过为功能开发、发布准备和维护设立了独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。</p><h3 id="分支案例" tabindex="-1"><a class="header-anchor" href="#分支案例" aria-hidden="true">#</a> 分支案例</h3><h4 id="简单的分支" tabindex="-1"><a class="header-anchor" href="#简单的分支" aria-hidden="true">#</a> 简单的分支</h4><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="复杂分支" tabindex="-1"><a class="header-anchor" href="#复杂分支" aria-hidden="true">#</a> 复杂分支</h4><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="分支种类" tabindex="-1"><a class="header-anchor" href="#分支种类" aria-hidden="true">#</a> 分支种类</h3><h4 id="主干分支-master" tabindex="-1"><a class="header-anchor" href="#主干分支-master" aria-hidden="true">#</a> 主干分支 master</h4><p>主要负责管理正在运行的生产环境代码。永远保持与正在运行的生产环境完全一致。</p><h4 id="开发分支-develop" tabindex="-1"><a class="header-anchor" href="#开发分支-develop" aria-hidden="true">#</a> 开发分支 develop</h4><p>主要负责管理正在开发过程中的代码。一般情况下应该是最新的代码。</p><h4 id="bug修理分支-hotfix" tabindex="-1"><a class="header-anchor" href="#bug修理分支-hotfix" aria-hidden="true">#</a> bug修理分支 hotfix</h4><p>要负责管理生产环境下出现的紧急修复的代码。 从主干分支分出，修理完毕并测试上线后，并回主干分支。并回后，视情况可以删除该分支。</p><h4 id="发布版本分支-release" tabindex="-1"><a class="header-anchor" href="#发布版本分支-release" aria-hidden="true">#</a> 发布版本分支 release</h4><p>较大的版本上线前，会从开发分支中分出发布版本分支，进行最后阶段的集成测试。该版本上线后，会合并到主干分支。生产环境运行一段阶段较稳定后可以视情况删除。</p><h4 id="功能分支-feature" tabindex="-1"><a class="header-anchor" href="#功能分支-feature" aria-hidden="true">#</a> 功能分支 feature</h4><p>为了不影响较短周期的开发工作，一般把中长期开发模块，会从开发分支中独立出来。 开发完成后会合并到开发分支。</p><h2 id="gitlab私服" tabindex="-1"><a class="header-anchor" href="#gitlab私服" aria-hidden="true">#</a> Gitlab私服</h2><p>注意：要使用CentOS7版本安装，CentOS6版本不行。</p><h3 id="官网地址" tabindex="-1"><a class="header-anchor" href="#官网地址" aria-hidden="true">#</a> 官网地址</h3>',22),b={href:"https://about.gitlab.com/",target:"_blank",rel:"noopener noreferrer"},g=e("br",null,null,-1),_={href:"https://about.gitlab.com/installation/",target:"_blank",rel:"noopener noreferrer"},m=e("h3",{id:"提前下载所需rpm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#提前下载所需rpm","aria-hidden":"true"},"#"),a(" 提前下载所需rpm")],-1),f=e("p",null,"yum安装gitlab-ee(或ce)时，需要联网下载几百M的安装文件，非常耗时，所以应提前把所需RPM包下载并安装好。[ee企业版 ce社区版本]",-1),x={href:"https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm",target:"_blank",rel:"noopener noreferrer"},v=r(`<p>下载好后上传到Linux系统，习惯上还是放在/opt目录下</p><h3 id="安装步骤" tabindex="-1"><a class="header-anchor" href="#安装步骤" aria-hidden="true">#</a> 安装步骤</h3><div class="language-Shell line-numbers-mode" data-ext="Shell"><pre class="language-Shell"><code>sudo rpm -ivh /opt/gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm
sudo yum install -y curl policycoreutils-python openssh-server cronie
sudo yum install lokkit
sudo lokkit -s http -s ssh
sudo yum install postfix
sudo service postfix start
sudo chkconfig postfix on //设置开机启动
curl &quot;https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh&quot;) | sudo bash
sudo EXTERNAL_URL=&quot;http://127.0.0.1&quot; yum -y install gitlab-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前步骤完成后重启。</p><blockquote><p>在安装lokkit -s http -s ss 报错如下，需要关闭防火墙。</p></blockquote><h3 id="gitlab服务操作" tabindex="-1"><a class="header-anchor" href="#gitlab服务操作" aria-hidden="true">#</a> Gitlab服务操作</h3><ul><li>初始化配置 : <code>gitlab-ctl reconfigure</code></li><li>启动Gitlab服务 : <code>gitlab-ctl start</code></li><li>停止Gitlab服务 : <code>gitlab-ctl stop</code></li></ul><h3 id="浏览器访问" tabindex="-1"><a class="header-anchor" href="#浏览器访问" aria-hidden="true">#</a> 浏览器访问</h3><p>访问Linux服务器IP地址即可，如果想访问EXTERNAL_URL指定的域名还需要配置域名服务器或本地hosts文件。<br> 初次登录时需要为gitlab的root用户设置密码。<br><img src="`+c+'" alt="" loading="lazy"></p>',9);function k(y,N){const i=n("ExternalLinkIcon");return l(),d("div",null,[u,e("p",null,[a("首页："),e("a",b,[a("https://about.gitlab.com/"),t(i)]),g,a(" 安装说明："),e("a",_,[a("https://about.gitlab.com/installation/"),t(i)])]),m,f,e("p",null,[a("下载地址是："),e("a",x,[a("https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm"),t(i)])]),v])}const L=s(p,[["render",k],["__file","Git工作流与私服.html.vue"]]);export{L as default};
