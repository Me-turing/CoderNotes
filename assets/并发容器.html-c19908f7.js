import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-71f45f98.js";const t="/CoderNotes/assets/Pasted_image_20230326114359-c5c65ec5.png",p={},c=e(`<p>JDK5.0之后提供了多种并发类容器可以替代同步类容器，提升性能、吞吐量<br><code>ConcurrentHashMap</code>替代 <code>HashMap</code>、<code>HashTable</code><br><code>ConcurrentSkipListMap</code>替代<code>TreeMap</code><br> 简单来讲：ConcurrentHashMap使用了粒度更小的锁</p><h2 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//测试ConcurrentHashMap</span>
        <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> concurrentHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        //创建10个线程</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        concurrentHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token operator">+</span>j<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;耗时：&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">//测试普通容器转换成同步容器</span>
<span class="token comment">//        HashMap&lt;String, Integer&gt; stringIntegerHashMap = new HashMap&lt;&gt;();</span>
<span class="token comment">//        Map&lt;String, Integer&gt; stringIntegerMap = Collections.synchronizedMap(stringIntegerHashMap);</span>
<span class="token comment">//        for (int i = 0; i &lt; 10; i++) {</span>
<span class="token comment">//            new Thread(new Runnable() {</span>
<span class="token comment">//                @Override</span>
<span class="token comment">//                public void run() {</span>
<span class="token comment">//                    long startTime = System.currentTimeMillis();</span>
<span class="token comment">//                    for (int j = 0; j &lt; 1000000; j++) {</span>
<span class="token comment">//                        stringIntegerMap.put(&quot;A&quot;+j,j);</span>
<span class="token comment">//                    }</span>
<span class="token comment">//                    long endTime = System.currentTimeMillis();</span>
<span class="token comment">//                    System.out.println(&quot;耗时：&quot;+(endTime-startTime));</span>
<span class="token comment">//                }</span>
<span class="token comment">//            }).start();</span>
<span class="token comment">//        }</span>
        <span class="token comment">//测试安全性集合</span>
<span class="token comment">//        Hashtable&lt;String, Integer&gt; stringIntegerHashtable = new Hashtable&lt;&gt;();</span>
<span class="token comment">//        for (int i = 0; i &lt; 10; i++) {</span>
<span class="token comment">//            new Thread(new Runnable() {</span>
<span class="token comment">//                @Override</span>
<span class="token comment">//                public void run() {</span>
<span class="token comment">//                    long startTime = System.currentTimeMillis();</span>
<span class="token comment">//                    for (int j = 0; j &lt; 1000000; j++) {</span>
<span class="token comment">//                        stringIntegerHashtable.put(&quot;A&quot;+j,j);</span>
<span class="token comment">//                    }</span>
<span class="token comment">//                    long endTime = System.currentTimeMillis();</span>
<span class="token comment">//                    System.out.println(&quot;耗时：&quot;+(endTime-startTime));</span>
<span class="token comment">//                }</span>
<span class="token comment">//            }).start();</span>
<span class="token comment">//        }</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="底层逻辑" tabindex="-1"><a class="header-anchor" href="#底层逻辑" aria-hidden="true">#</a> 底层逻辑</h2><p>TODO</p><h2 id="经典面试题" tabindex="-1"><a class="header-anchor" href="#经典面试题" aria-hidden="true">#</a> 经典面试题</h2><ul><li>为什么HashTable慢? 它的并发度是什么? 那么ConcurrentHashMap并发度是什么?</li><li>ConcurrentHashMap在JDK1.7和JDK1.8中实现有什么差别? JDK1.8解決了JDK1.7中什么问题</li><li>ConcurrentHashMap JDK1.7实现的原理是什么? 分段锁机制</li><li>ConcurrentHashMap JDK1.8实现的原理是什么? 数组+链表+红黑树，CAS</li><li>ConcurrentHashMap JDK1.7中Segment数(concurrencyLevel)默认值是多少? 为何一旦初始化就不可再扩容?</li><li>ConcurrentHashMap JDK1.7说说其put的机制?</li><li>ConcurrentHashMap JDK1.7是如何扩容的? rehash(注：segment 数组不能扩容，扩容是 segment 数组某个位置内部的数组 HashEntry&lt;K,V&gt;[] 进行扩容)</li><li>ConcurrentHashMap JDK1.8是如何扩容的? tryPresize</li><li>ConcurrentHashMap JDK1.8链表转红黑树的时机是什么? 临界值为什么是8?</li><li>ConcurrentHashMap JDK1.8是如何进行数据迁移的? transferConcurrentHashMap不能保证并发下数据读写顺序的准确性，但是可以保证内部的数据不被破坏。</li></ul>',8),o=[c];function i(l,u){return s(),a("div",null,o)}const m=n(p,[["render",i],["__file","并发容器.html.vue"]]);export{m as default};
