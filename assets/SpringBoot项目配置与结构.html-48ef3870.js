import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c as p,d as a,e,b as r,f as n}from"./app-71f45f98.js";const c="/CoderNotes/assets/image-20230704141012629-a84a1565.png",l="/CoderNotes/assets/image-20230704160226041-2554275a.png",d="/CoderNotes/assets/image-20230704163857074-d0543ea0.png",u="/CoderNotes/assets/image-20230704163917940-1bd0c4b6.png",m="/CoderNotes/assets/image-20230704164044923-319aa2e2.png",g="/CoderNotes/assets/image-20230704164726832-62343350.png",b="/CoderNotes/assets/image-20230704165523850-fb85e4b5.png",h="/CoderNotes/assets/image-20230705103045364-86da0525.png",v="/CoderNotes/assets/image-20230705103156211-9e8e80ff.png",k="/CoderNotes/assets/image-20230705103259737-446aa62b.png",y="/CoderNotes/assets/image-20230705103236575-38cee23c.png",f="/CoderNotes/assets/image-20230705105338147-7cf65e81.png",_="/CoderNotes/assets/image-20230705105442065-f947e446.png",x="/CoderNotes/assets/image-20230705111501768-0dd7b7cf.png",N="/CoderNotes/assets/image-20230707111336548-b94e1d15.png",C={},S=n('<p>在前面的学习中,我们知道<code>spring-boot-starter-parent</code>依赖中对于SpringBoot工程的一些配置文件进行了初始化的设定:</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们看到SpringBoot会默认读取项目下名字为 <code>application开头</code> 的  <code>yml</code> / <code>yaml</code> / <code>properties</code> 配置文件</p><p>所以我们可以通过这些配置文件对SpringBoot默认初始化的一些参数进行自定义的设定,如 <code>端口号</code>/ <code>项目路径</code> / <code>数据源</code> 等</p><h2 id="springboot可配置参数" tabindex="-1"><a class="header-anchor" href="#springboot可配置参数" aria-hidden="true">#</a> SpringBoot可配置参数</h2>',5),z={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties",target:"_blank",rel:"noopener noreferrer"},B=n('<figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="application配置文件" tabindex="-1"><a class="header-anchor" href="#application配置文件" aria-hidden="true">#</a> application配置文件</h2><p>例如,在Spring官方配置中提供了对接口以及项目上下文的配置参考如下:</p><p><img src="'+d+'" alt="" loading="lazy"><br><img src="'+u+'" alt="" loading="lazy"></p><p>我们接下来将通过不同的配置文件类型来演示该选项的配置</p><h3 id="两种类型的配置文件" tabindex="-1"><a class="header-anchor" href="#两种类型的配置文件" aria-hidden="true">#</a> 两种类型的配置文件</h3><h4 id="properties配置文件" tabindex="-1"><a class="header-anchor" href="#properties配置文件" aria-hidden="true">#</a> properties配置文件</h4><p>创建 application.properties 文件</p><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>.properties文件</code>为<code>key=value</code>的形式,Spring官方列举的参数均为properties文件的key,我们直接配置他的value值即可</p><p>代码如下:</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span>
<span class="token key attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token value attr-value">/springboot02</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意: 在配置上下文路径时,我们需要以<code>/</code>开头但是不能以<code>/</code>结尾</p></blockquote><h4 id="yml配置文件" tabindex="-1"><a class="header-anchor" href="#yml配置文件" aria-hidden="true">#</a> yml配置文件</h4><p>创建application.yml文件</p><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要注意的是,<code>.yml</code>文件的语法与<code>.properties</code>文件有所不同:</p><ol><li>在<code>.properties</code>文件中,一个<code>.</code>表示层级,而在<code>.yml</code>中层级结束需要用<code>:</code>,且下一个层级需要与上一个层级多两个空格</li><li>在<code>.properties</code>文件中我们是直接<code>key=value</code>的形式,在<code>.yml</code>中需要是<code>最低级: value</code>的形式(注意冒号后应该有空格)</li><li><code>.yml</code>对大小写敏感 且 相同的部分只出现一次</li></ol><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>语法如下:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>
  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>
    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /springboot02
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="存储自定义数据" tabindex="-1"><a class="header-anchor" href="#存储自定义数据" aria-hidden="true">#</a> 存储自定义数据</h5><p>普通数据类型</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置对象类型数据</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">person</span><span class="token punctuation">:</span>  
  <span class="token key atrule">name</span><span class="token punctuation">:</span> zs  
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>  
  <span class="token key atrule">sex</span><span class="token punctuation">:</span> 男

<span class="token comment">#或者写成json格式</span>
<span class="token key atrule">person2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> ls<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span><span class="token key atrule">sex</span><span class="token punctuation">:</span> 男<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置数组类型</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">number1</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token number">1</span>
  <span class="token punctuation">-</span> <span class="token number">2</span>
  <span class="token punctuation">-</span> <span class="token number">3</span>
  <span class="token punctuation">-</span> <span class="token number">4</span>

<span class="token comment">#或者</span>
<span class="token key atrule">number2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="application配置文件的优先级" tabindex="-1"><a class="header-anchor" href="#application配置文件的优先级" aria-hidden="true">#</a> application配置文件的优先级</h3><h4 id="同级目录下" tabindex="-1"><a class="header-anchor" href="#同级目录下" aria-hidden="true">#</a> 同级目录下</h4><ol><li>如果在同级目录下同时存在<code>.yml</code>文件与<code>.properties</code>文件,则优先读取<code>.properties</code>文件,然后再读取<code>.yml</code>文件</li><li>如果同一个属性两个文件都存在,则默认以优先级最高的为准,优先级低的属性不会对前面的属性进行覆盖</li></ol><h4 id="不同目录下" tabindex="-1"><a class="header-anchor" href="#不同目录下" aria-hidden="true">#</a> 不同目录下</h4><h5 id="允许存放的位置" tabindex="-1"><a class="header-anchor" href="#允许存放的位置" aria-hidden="true">#</a> 允许存放的位置</h5><p>配置文件允许存放在以下位置:</p><p>1 当前项目根目录中:<br><img src="`+h+'" alt="" loading="lazy"></p><p>2 当前项目根目录中的<code>/config</code>目录下<br><img src="'+v+'" alt="" loading="lazy"></p><p>3 当前项目的resources目录下<br><img src="'+k+'" alt="" loading="lazy"></p><p>4 当前项目的<code>resources/config</code>目录下<br><img src="'+y+`" alt="" loading="lazy"></p><h5 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h5><p><code>项目根目录/config</code> &gt; <code>项目根目录</code> &gt; <code>resources/config</code> &gt; <code>resources</code></p><p>即 : SpringBoot在启动时会优先按照上述的路径优先级进行配置文件的扫描,优先级高的配置优先加载,且相同的参数配置无法被优先级低的配置顶替</p><h5 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h5><blockquote><p>application 配置文件主要用于 Spring Boot 项目的自动化配置。</p></blockquote><h2 id="bootstrap配置文件" tabindex="-1"><a class="header-anchor" href="#bootstrap配置文件" aria-hidden="true">#</a> bootstrap配置文件</h2><p>bootstrap 是应用程序的父上下文，也就是说 <strong>bootstrap 加载优先于 applicaton</strong>。<br> bootstrap 主要用于从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。</p><p>bootstrap与application这两个上下文共用一个环境，它是任何Spring应用程序的外部属性的来源。bootstrap 里面的属性会优先加载，它们默认也不能被本地相同配置覆盖。</p><h3 id="bootstrap配置文件特征" tabindex="-1"><a class="header-anchor" href="#bootstrap配置文件特征" aria-hidden="true">#</a> bootstrap配置文件特征</h3><ol><li>boostrap 由父 ApplicationContext 加载，比 applicaton 优先加载。</li><li>boostrap 里面的属性不能被覆盖。</li></ol><h3 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1" aria-hidden="true">#</a> 应用场景</h3><ol><li>使用 SpringCloudConfig 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息。</li><li>一些固定的不能被覆盖的属性。</li><li>一些加密/解密的场景。</li></ol><h2 id="springboot项目结构" tabindex="-1"><a class="header-anchor" href="#springboot项目结构" aria-hidden="true">#</a> SpringBoot项目结构</h2><p>基本上SpringBoot的目录结构如下:</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>- 项目名
  |- src
     |- main
        |- java
        |  |- [Java代码]
        |- resources
        |  |- public (公共资源，对外公开的内容)
        |  |- static (静态资源，图片、js、css)
        |  |     |- js
        |  |     |  |- jquery.js (访问地址: http://ip:port/js/jquery.js)
        |  |- templates (FreeMarker和Thymeleaf页面所在目录)
        |- webapp (仅在使用JSP时存在)
           |- WEB-INF
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中需要注意的是:</p><p>public目录与static目录,在访问时,无需再次说明目录名(可以省略)<br><img src="`+f+'" alt="" loading="lazy"><br><img src="'+_+'" alt="" loading="lazy"></p><p>webapp目录默认情况下在新版的SpringBoot初始化时时没有的,只有在使用JSP文件时需要创建使用可以参考如下配置:</p><p>在项目设置中,设置当前模块的web资源目录为webapp目录就行<br><img src="'+x+'" alt="" loading="lazy"></p><p>设置成功后,webapp目录上将又小蓝点标记<br><img src="'+N+'" alt="" loading="lazy"></p>',58);function j(q,w){const s=o("ExternalLinkIcon");return t(),p("div",null,[S,a("p",null,[e("spring官方为我们提供了可配置参数的API文档 : "),a("a",z,[e("Spring官方配置文档"),r(s)])]),B])}const V=i(C,[["render",j],["__file","SpringBoot项目配置与结构.html.vue"]]);export{V as default};
