import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as r,c as s,d as e,e as o,b as d,w as g,f as i}from"./app-71f45f98.js";const c="/CoderNotes/assets/image-20230704112803664-827eabfb.png",p="/CoderNotes/assets/image-20230704112847792-10068b48.png",l="/CoderNotes/assets/image-20230704113029677-a6df0b09.png",u="/CoderNotes/assets/image-20230704113432188-7ee69ee5.png",f="/CoderNotes/assets/image-20230704113706389-a2fe0c59.png",m="/CoderNotes/assets/image-20230704114243662-2c6d114a.png",b="/CoderNotes/assets/image-20230704114455315-bceb6b86.png",h="/CoderNotes/assets/image-20230704114641292-e6bff023.png",_="/CoderNotes/assets/image-20230704114652068-7f9d9232.png",v="/CoderNotes/assets/image-20230704133243984-ff37f1e9.png",E="/CoderNotes/assets/image-20230704133321880-bedfc572.png",C="/CoderNotes/assets/image-20230704133522235-ae4da4e9.png",B="/CoderNotes/assets/image-20230704134506578-ce820971.png",A="/CoderNotes/assets/image-20230704134517191-f54d2c64.png",S="/CoderNotes/assets/image-20230704134610193-2280f0be.png",x="/CoderNotes/assets/image-20230704134659062-d58cf980.png",N="/CoderNotes/assets/image-20230704135103873-f068e53f.png",y="/CoderNotes/assets/image-20230704135356493-5316bfb3.png",z={},I=i(`<h2 id="依赖导入原理" tabindex="-1"><a class="header-anchor" href="#依赖导入原理" aria-hidden="true">#</a> 依赖导入原理</h2><h3 id="springboot依赖的继承" tabindex="-1"><a class="header-anchor" href="#springboot依赖的继承" aria-hidden="true">#</a> SpringBoot依赖的继承</h3><p>在我们初始化SpingBoot项目时,默认继承了<code>spring-boot-starter-parent</code>的Maven工程</p><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>&lt;parent&gt;
	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
	&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
	&lt;version&gt;2.3.0.RELEASE&lt;/version&gt;
	&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
&lt;/parent&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>spring-boot-starter-parent</code>工程中又继承了<code>spring-boot-dependencies</code>工程</p><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>&lt;parent&gt;
	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
	&lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
	&lt;version&gt;2.3.0.RELEASE&lt;/version&gt;
&lt;/parent&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="spring-boot-starter-parent" tabindex="-1"><a class="header-anchor" href="#spring-boot-starter-parent" aria-hidden="true">#</a> spring-boot-starter-parent</h4><p>该工程中主要针对于一些主要的配置文件进行了初始化定义,如下:</p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="spring-boot-dependencies" tabindex="-1"><a class="header-anchor" href="#spring-boot-dependencies" aria-hidden="true">#</a> spring-boot-dependencies</h4><p>该Pom文件中导入了大量我们可能使用到的核心Spring依赖,以及对所有依赖默认版本控制</p><ul><li><p>依赖的初始化默认版本<br><img src="'+l+'" alt="" loading="lazy"></p></li><li><p>依赖引用<br><img src="'+u+`" alt="" loading="lazy"></p></li></ul><h3 id="springboot启动器依赖" tabindex="-1"><a class="header-anchor" href="#springboot启动器依赖" aria-hidden="true">#</a> SpringBoot启动器依赖</h3><p>我们在快速构建工程时也导入了启动器依赖: <code>spring-boot-starter-web</code></p><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该依赖中我们可以看到传递了SpringMVC所需的核心依赖</p><figure><img src="`+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="包扫描原理" tabindex="-1"><a class="header-anchor" href="#包扫描原理" aria-hidden="true">#</a> 包扫描原理</h2><p>我们看到在SpringBoot的启动类上使用了<code>@SpringBootApplication</code>注解</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>进入该注解我们发现两个比较重要的注解: <code>@SpringBootConfiguration</code> 和 <code>@EnableAutoConfiguration</code><br><img src="'+b+'" alt="" loading="lazy"></p><h3 id="springbootconfiguration" tabindex="-1"><a class="header-anchor" href="#springbootconfiguration" aria-hidden="true">#</a> @SpringBootConfiguration</h3><p>该注解表示当前类是SpringBoot的配置类,我们进入可发现</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当前类可以作为容器被扫描</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="enableautoconfiguration" tabindex="-1"><a class="header-anchor" href="#enableautoconfiguration" aria-hidden="true">#</a> @EnableAutoConfiguration</h3><p>打开之后我们看到一个<code>@AutoConfigurationPackage</code>注解<br><img src="'+v+'" alt="" loading="lazy"></p><p>继续跟进<code>AutoConfigurationPackages.Registrar.class</code><br><img src="'+E+'" alt="" loading="lazy"></p><p>我们发现这个内部类中存在<strong>registerBeanDefinitions方法,在Springboot初始化时获取了启动类所在的包</strong><br><img src="'+C+'" alt="" loading="lazy"></p><blockquote><p>所以启动类会将所在包及下面所有子包里的所有组件扫描到spring容器</p></blockquote><h2 id="自动配置原理" tabindex="-1"><a class="header-anchor" href="#自动配置原理" aria-hidden="true">#</a> 自动配置原理</h2><p>在启动类的<code>@SpringBootApplication</code>注解中存在<code>@EnableAutoConfiguration</code>注解</p><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在<code>@EnableAutoConfiguration</code>注解中存在<code>@Import({AutoConfigurationImportSelector.class})</code><br><img src="'+A+'" alt="" loading="lazy"></p><p>AutoConfigurationImportSelector类中存在<code>getCandidateConfigurations方法</code><br><img src="'+S+'" alt="" loading="lazy"></p><p><code>getCandidateConfigurations方法</code>主要是对于<code>org.springframework.boot.autoconfigure</code>包下的spring.factories文件进行读取,根据该文件中的配置扫描<br><img src="'+x+'" alt="" loading="lazy"></p>',38),L=e("br",null,null,-1),M=e("img",{src:N,alt:"",loading:"lazy"},null,-1),k=i('<p>同时<code>spring-configuration-metadata.json</code>文件对于常用的一些参数进行了默认配置<br><img src="'+y+'" alt="" loading="lazy"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>SpringBoot的基本特性:</p><p>依赖的自动导入</p><ol><li>在SpringBoot中,我们可以使用<code>spring-boot-starter-parent</code>依赖快速导入Spring框架中核心依赖文件,并对依赖进行默认的版本限制.</li><li>通过启动器依赖<code>spring-boot-starter-web</code>快速对所需的环境依赖如SpringMVC等进行导入</li></ol><p>包扫描:</p><ol><li>在启动类中使用的<code>@SpringBootApplication</code>注解,将当前启动类标识为一个配置类</li><li>其中内置<code>@EnableAutoConfiguration</code>注解会在Spring工程启动时,获取到当前启动类所在的包,并对当前包及其子包进行扫描加载</li></ol><p>自动装配:</p><ol><li><code>@EnableAutoConfiguration</code>注解中存在<code>@Import({AutoConfigurationImportSelector.class})</code>,该类会加载<code>org.springframework.boot.autoconfigure</code>包下的<code>spring.factories</code>文件进行读取,根据该文件中的配置扫描</li><li><code>spring.factories</code>文件记录了当前Spring中可能需要的核心配置类文件</li><li><code>spring-configuration-metadata.json</code>文件记录了一些初始化的参数配置</li></ol>',9);function X(w,D){const t=n("RouterLink");return r(),s("div",null,[I,e("p",null,[o("我们随意打开一个配置类,发现基本上与之前在Spring中使用配置类配置事务的写法差不多.详见 : "),d(t,{to:"/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/05_%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/03_Spring%E5%9F%BA%E7%A1%80/11_%E9%9B%B6XML%E9%85%8D%E7%BD%AE%E4%BA%8B%E5%8A%A1/%E9%9B%B6XML%E9%85%8D%E7%BD%AE%E4%BA%8B%E5%8A%A1.html"},{default:g(()=>[o("零XML配置事务")]),_:1}),L,M]),k])}const P=a(z,[["render",X],["__file","SpringBoot启动器原理分析.html.vue"]]);export{P as default};
