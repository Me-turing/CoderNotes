export const data = JSON.parse("{\"key\":\"v-39af74fc\",\"path\":\"/CoderNotes/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/04_JavaEE%E6%8A%80%E6%9C%AF/06_Ajax/04_Jsonp%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/Jsonp%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86.html\",\"title\":\"Jsonp跨域处理\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Jsonp跨域处理\",\"icon\":\"file\",\"order\":1,\"author\":\"十七\",\"date\":\"2023-06-15 周四\",\"category\":[\"初级开发工程师\"],\"tag\":[\"P5\"],\"sticky\":true,\"index\":true,\"description\":\"什么是跨域 出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://me-turing.github.io/CoderNotes/CoderNotes/CoderNotes/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/04_JavaEE%E6%8A%80%E6%9C%AF/06_Ajax/04_Jsonp%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/Jsonp%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86.html\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Jsonp跨域处理\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"什么是跨域 出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://me-turing.github.io/CoderNotes/CoderNotes/\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-06-16T06:43:34.000Z\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"Jsonp跨域处理\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"十七\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"P5\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-06-14T16:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-06-16T06:43:34.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Jsonp跨域处理\\\",\\\"image\\\":[\\\"https://me-turing.github.io/CoderNotes/CoderNotes/\\\"],\\\"datePublished\\\":\\\"2023-06-14T16:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-06-16T06:43:34.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"十七\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"什么是跨域\",\"slug\":\"什么是跨域\",\"link\":\"#什么是跨域\",\"children\":[]},{\"level\":2,\"title\":\"测试跨域限制\",\"slug\":\"测试跨域限制\",\"link\":\"#测试跨域限制\",\"children\":[]},{\"level\":2,\"title\":\"jsonp实现跨域请求\",\"slug\":\"jsonp实现跨域请求\",\"link\":\"#jsonp实现跨域请求\",\"children\":[]},{\"level\":2,\"title\":\"通过getJson方实现跨域请求\",\"slug\":\"通过getjson方实现跨域请求\",\"link\":\"#通过getjson方实现跨域请求\",\"children\":[]},{\"level\":2,\"title\":\"通过过滤器跨域\",\"slug\":\"通过过滤器跨域\",\"link\":\"#通过过滤器跨域\",\"children\":[]}],\"git\":{\"createdTime\":1686897814000,\"updatedTime\":1686897814000,\"contributors\":[{\"name\":\"Meturing\",\"email\":\"2339989978@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":4.53,\"words\":1358},\"filePathRelative\":\"CoderNotes/02_初级开发工程师/01_第一阶段/04_JavaEE技术/06_Ajax/04_Jsonp跨域处理/Jsonp跨域处理.md\",\"localizedDate\":\"2023年6月15日\",\"autoDesc\":true,\"excerpt\":\"\"}")
