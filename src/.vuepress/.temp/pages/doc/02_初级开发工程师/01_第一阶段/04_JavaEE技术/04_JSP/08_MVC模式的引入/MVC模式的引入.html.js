export const data = JSON.parse("{\"key\":\"v-58d6299a\",\"path\":\"/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/04_JavaEE%E6%8A%80%E6%9C%AF/04_JSP/08_MVC%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%95%E5%85%A5/MVC%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%95%E5%85%A5.html\",\"title\":\"MVC模式的引入\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"MVC模式的引入\",\"icon\":\"file\",\"order\":1,\"author\":\"十七\",\"date\":\"2023-06-15 周四\",\"category\":[\"初级开发工程师\"],\"tag\":[\"P5\"],\"sticky\":true,\"index\":true,\"description\":\"MVC模式介绍 什么是MVC模式 MVC是一种项目架构型模式，它本身并不引入新的功能，只是用来指导我们改善应用程序的架构，使得应用的模型和视图相分离，从而得到更好的开发和维护效率。 在MVC模式中，应用程序被划分成了模型（Model）、 视图（View） 和 控制器（Controller） 三个部分。其中，模型部分包含了应用程序的业务逻辑和业务数据；视...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://meturing.gitee.io/coder-notes/coder-notes/doc/02_%E5%88%9D%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/01_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/04_JavaEE%E6%8A%80%E6%9C%AF/04_JSP/08_MVC%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%95%E5%85%A5/MVC%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%95%E5%85%A5.html\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"MVC模式的引入\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"MVC模式介绍 什么是MVC模式 MVC是一种项目架构型模式，它本身并不引入新的功能，只是用来指导我们改善应用程序的架构，使得应用的模型和视图相分离，从而得到更好的开发和维护效率。 在MVC模式中，应用程序被划分成了模型（Model）、 视图（View） 和 控制器（Controller） 三个部分。其中，模型部分包含了应用程序的业务逻辑和业务数据；视...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://meturing.gitee.io/coder-notes/coder-notes/\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-06-15T14:28:44.000Z\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"MVC模式的引入\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"十七\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"P5\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-06-14T16:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-06-15T14:28:44.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"MVC模式的引入\\\",\\\"image\\\":[\\\"https://meturing.gitee.io/coder-notes/coder-notes/\\\"],\\\"datePublished\\\":\\\"2023-06-14T16:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-06-15T14:28:44.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"十七\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"MVC模式介绍\",\"slug\":\"mvc模式介绍\",\"link\":\"#mvc模式介绍\",\"children\":[{\"level\":3,\"title\":\"什么是MVC模式\",\"slug\":\"什么是mvc模式\",\"link\":\"#什么是mvc模式\",\"children\":[]}]},{\"level\":2,\"title\":\"MVC的优势\",\"slug\":\"mvc的优势\",\"link\":\"#mvc的优势\",\"children\":[{\"level\":3,\"title\":\"耦合性低\",\"slug\":\"耦合性低\",\"link\":\"#耦合性低\",\"children\":[]},{\"level\":3,\"title\":\"重用性高\",\"slug\":\"重用性高\",\"link\":\"#重用性高\",\"children\":[]},{\"level\":3,\"title\":\"开发效率提高,人员职责明确\",\"slug\":\"开发效率提高-人员职责明确\",\"link\":\"#开发效率提高-人员职责明确\",\"children\":[]},{\"level\":3,\"title\":\"耦合度低,可维护性高\",\"slug\":\"耦合度低-可维护性高\",\"link\":\"#耦合度低-可维护性高\",\"children\":[]},{\"level\":3,\"title\":\"有利软件工程化管理\",\"slug\":\"有利软件工程化管理\",\"link\":\"#有利软件工程化管理\",\"children\":[]}]},{\"level\":2,\"title\":\"MVC分层及责任划分\",\"slug\":\"mvc分层及责任划分\",\"link\":\"#mvc分层及责任划分\",\"children\":[{\"level\":3,\"title\":\"项目分层结构设计\",\"slug\":\"项目分层结构设计\",\"link\":\"#项目分层结构设计\",\"children\":[]},{\"level\":3,\"title\":\"层次之间的特点\",\"slug\":\"层次之间的特点\",\"link\":\"#层次之间的特点\",\"children\":[]}]}],\"git\":{\"createdTime\":1686839324000,\"updatedTime\":1686839324000,\"contributors\":[{\"name\":\"Turing\",\"email\":\"2339989978@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":3.17,\"words\":951},\"filePathRelative\":\"doc/02_初级开发工程师/01_第一阶段/04_JavaEE技术/04_JSP/08_MVC模式的引入/MVC模式的引入.md\",\"localizedDate\":\"2023年6月15日\",\"autoDesc\":true,\"excerpt\":\"\"}")
