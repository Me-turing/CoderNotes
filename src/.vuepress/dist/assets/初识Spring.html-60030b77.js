import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as r,c as s,d as e,e as i,b as d,f as l}from"./app-c47b8d81.js";const o="/CoderNotes/assets/image-20230422160144901-23a77d12.png",c="/CoderNotes/assets/image-20230422160743719-0a6c0b14.png",g="/CoderNotes/assets/image-20230422161746438-14b7cebd.png",p="/CoderNotes/assets/image-20230422163632928-3ebcf0fd.png",h="/CoderNotes/assets/image-20230422163654609-70dd1c09.png",u="/CoderNotes/assets/image-20230422162423947-6fa19364.png",v="/CoderNotes/assets/image-20230422162744287-d99526be.png",m={},b=e("h2",{id:"spring的概念介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#spring的概念介绍","aria-hidden":"true"},"#"),i(" Spring的概念介绍")],-1),x=e("h3",{id:"简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),i(" 简介")],-1),f=e("p",null,"Spring 框架是由于软件开发的复杂性而创建的. Spring 使用的是基本的 JavaBean 来完成以前只可能由 EJB 完成的事情 。 然而 ， Spring 的用途不仅仅限于服务器端的开发 。 从简单性 、 可测试性和松耦合性角度而言 ， 绝大部分 Java 应用都可以从 Spring 中.",-1),S=e("p",null,"Spring 是一个轻量级控制反转(IOC)和面向切面(AOP)的容器框架,是分层的全栈式的轻量级开发框架.基本上任何其他 Spring 项目都是以 Spring Framework 为基础的。",-1),_={href:"https://spring.io",target:"_blank",rel:"noopener noreferrer"},C=l('<h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h3><h4 id="方便解耦-简化开发" tabindex="-1"><a class="header-anchor" href="#方便解耦-简化开发" aria-hidden="true">#</a> 方便解耦,简化开发</h4><p>Spring通过容器,将对象的创建从代码中剥离出来,交给Spring控制,避免直接编码造成模块之间的耦合度高,用户也不必自己编码处理对象的单例和多例控制,主要关注接口功能即可,不用关注具体使用哪个实现类和实现细节问题</p><h4 id="aop切面编程" tabindex="-1"><a class="header-anchor" href="#aop切面编程" aria-hidden="true">#</a> AOP切面编程</h4><p>AOP切面编程是程序设计的一种概念,Spring对该概念实现的比较好,通过切面编程我们可以在不修改原有代码的情况下实现功能的增加,通常用于 事务控制,日志记录,性能检测,权限控制等等</p><h4 id="声明式事务" tabindex="-1"><a class="header-anchor" href="#声明式事务" aria-hidden="true">#</a> 声明式事务</h4><p>事务的控制可以托管给Spring,我们通过注解或者配置文件声明事务的处理方式即可,不用我们自己去编码处理</p><h4 id="整合junit-方便测试" tabindex="-1"><a class="header-anchor" href="#整合junit-方便测试" aria-hidden="true">#</a> 整合JUNIT,方便测试</h4><p>spring整合JUNIT单元测试,对于项目的功能都可以进行轻松快速的测试,便于我们调试程序</p><h4 id="方便整合各种优秀的框架" tabindex="-1"><a class="header-anchor" href="#方便整合各种优秀的框架" aria-hidden="true">#</a> 方便整合各种优秀的框架</h4><p>SSM&gt; Spring+SpringMVC +MyBatis<br> SSH&gt; Spring+Hibernate +Strust<br> 等...</p><h4 id="丰富的功能封装" tabindex="-1"><a class="header-anchor" href="#丰富的功能封装" aria-hidden="true">#</a> 丰富的功能封装</h4><p>spring对JAVAEE(JDBC ,JAVAMail,)都进行了一系列的封装,简化我们对于API的使用,提高程序的开发效率</p><h4 id="规范的源码学习样本" tabindex="-1"><a class="header-anchor" href="#规范的源码学习样本" aria-hidden="true">#</a> 规范的源码学习样本</h4><p>spring的源码设计巧妙,结构清晰,大量使用了设计模式,是java代码规范编写的典范,也是高级程序员面试中经常会问到的源码.</p><h3 id="体系结构" tabindex="-1"><a class="header-anchor" href="#体系结构" aria-hidden="true">#</a> 体系结构</h3><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="data-access-integration-数据访问-集成" tabindex="-1"><a class="header-anchor" href="#data-access-integration-数据访问-集成" aria-hidden="true">#</a> Data Access/Integration（数据访问／集成）</h4><p>数据访问/集成层包括 JDBC、ORM、OXM、JMS 和 Transactions 模块，具体介绍如下:</p><ul><li><strong>JDBC 模块</strong>：提供了一个 JDBC 的抽象层，大幅度减少了在开发过程中对数据库操作的编码。</li><li><strong>ORM 模块</strong>：对流行的对象关系映射 API，包括 JPA、JDO、Hibernate 和 iBatis 提供了的集成层。</li><li><strong>OXM 模块</strong>：提供了一个支持对象/XML 映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream。</li><li><strong>JMS 模块</strong>：指 Java 消息服务，包含的功能为生产和消费的信息。</li><li><strong>Transactions 事务模块</strong>：支持编程和声明式事务管理实现特殊接口类，并为所有的 POJO。</li></ul><h4 id="web-模块" tabindex="-1"><a class="header-anchor" href="#web-模块" aria-hidden="true">#</a> Web 模块</h4><p>Spring 的 Web 层包括 Web、Servlet、Struts 和 Portlet 组件，具体介绍如下:</p><ul><li><strong>Web 模块</strong>：提供了基本的 Web 开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IoC 容器初始化以及 Web 应用上下文。</li><li><strong>Servlet模块</strong>：包括 Spring 模型—视图—控制器（MVC）实现 Web 应用程序。</li><li><strong>Struts 模块</strong>：包含支持类内的 Spring 应用程序，集成了经典的 Struts Web 层。</li><li><strong>Portlet 模块</strong>：提供了在 Portlet 环境中使用 MV C实现，类似 Web-Servlet 模块的功能。</li></ul><h4 id="core-container-核心容器" tabindex="-1"><a class="header-anchor" href="#core-container-核心容器" aria-hidden="true">#</a> Core Container（核心容器）</h4><p>Spring 的核心容器是其他模块建立的基础，由 Beans 模块、Core 核心模块、Context 上下文模块和 Expression Language 表达式语言模块组成，具体介绍如下:</p><ul><li><strong>Beans 模块</strong>：提供了 BeanFactory，是工厂模式的经典实现，Spring 将管理对象称为 Bean。</li><li><strong>Core 核心模块</strong>：提供了 Spring 框架的基本组成部分，包括 IoC 和 DI 功能。</li><li><strong>Context 上下文模块</strong>：建立在核心和 Beans 模块的基础之上，它是访问定义和配置任何对象的媒介。ApplicationContext 接口是上下文模块的焦点。</li><li><strong>Expression Language 模块</strong>：是运行时查询和操作对象图的强大的表达式语言。</li></ul><h4 id="其他模块" tabindex="-1"><a class="header-anchor" href="#其他模块" aria-hidden="true">#</a> 其他模块</h4><p>Spring的其他模块还有 AOP、Aspects、Instrumentation 以及 Test 模块，具体介绍如下:</p><ul><li><strong>AOP 模块</strong>：提供了面向切面编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。</li><li><strong>Aspects 模块</strong>：提供与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架。</li><li><strong>Instrumentation 模块</strong>：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</li><li><strong>Test 模块</strong>：支持 Spring 组件，使用 JUnit 或 TestNG 框架的测试。</li></ul><h2 id="快速体验spring的ioc" tabindex="-1"><a class="header-anchor" href="#快速体验spring的ioc" aria-hidden="true">#</a> 快速体验Spring的IOC</h2><h3 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备" aria-hidden="true">#</a> 环境准备</h3><h4 id="创建空白项目" tabindex="-1"><a class="header-anchor" href="#创建空白项目" aria-hidden="true">#</a> 创建空白项目</h4><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="创建maven测试模块" tabindex="-1"><a class="header-anchor" href="#创建maven测试模块" aria-hidden="true">#</a> 创建Maven测试模块</h4><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="导入pom-xml依赖" tabindex="-1"><a class="header-anchor" href="#导入pom-xml依赖" aria-hidden="true">#</a> 导入Pom.xml依赖</h4><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>&lt;dependencies&gt;  
	&lt;dependency&gt;  
		&lt;groupId&gt;org.springframework&lt;/groupId&gt;  
		&lt;artifactId&gt;spring-context&lt;/artifactId&gt;  
		&lt;version&gt;5.2.12.RELEASE&lt;/version&gt;  
	&lt;/dependency&gt;  
	&lt;dependency&gt;  
		&lt;groupId&gt;junit&lt;/groupId&gt;  
		&lt;artifactId&gt;junit&lt;/artifactId&gt;  
		&lt;version&gt;4.13.1&lt;/version&gt;  
		&lt;scope&gt;test&lt;/scope&gt;  
	&lt;/dependency&gt;  
&lt;/dependencies&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于依赖:<br> Spring原本需要引入四个依赖:</p><ol><li>spring-context 上下文,容器</li><li>spring-beans 创建对象</li><li>spring-core 核心jar</li><li>spring-expression 表达式jar</li></ol><p>但是事实上,我们导入<strong>spring-context的时候,会自动导入其他依赖的jar</strong>,自动进行了依赖传递<br><img src="`+p+'" alt="" loading="lazy"></p><p>依赖关系图如下:</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="创建所需资源类" tabindex="-1"><a class="header-anchor" href="#创建所需资源类" aria-hidden="true">#</a> 创建所需资源类</h4><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建接口</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public interface DeptDao {  
	void sayHello();  
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建接口实现类</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public class DeptDaoImpl implements DeptDao {  
	public void sayHello() {  
		System.out.println(&quot;Hello Spring&quot;);  
	}  
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="传统方式调用方法" tabindex="-1"><a class="header-anchor" href="#传统方式调用方法" aria-hidden="true">#</a> 传统方式调用方法</h3><p>我们在之前的Java使用过程中,都是直接New一个实现类的对象,然后传递给他的接口引用声明.<br> 通过接口的引用对象来实现方法</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>@Test
public void test01(){
	DeptDao deptDao = new DeptDaoImpl();
	deptDao.sayHello();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用spring中ioc的方式" tabindex="-1"><a class="header-anchor" href="#使用spring中ioc的方式" aria-hidden="true">#</a> 使用Spring中IOC的方式</h3><h4 id="创建spring-xml配置文件" tabindex="-1"><a class="header-anchor" href="#创建spring-xml配置文件" aria-hidden="true">#</a> 创建Spring.xml配置文件</h4><p>创建Spring.xml,用来配置Bean的注册</p><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
    &lt;!-- 将DeptDaoImpl注册到Spring容器中 --&gt;
    &lt;bean id=&quot;deptDao&quot; class=&quot;com.meturing.dao.impl.DeptDaoImpl&quot;&gt;&lt;/bean&gt;
 &lt;/beans&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h4><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>    @Test
    public void test02(){
        //通过ClassPathXmlApplicationContext获取Spring.xml注册文件中的内容(底层Spring会自动根据我们的标签,为我们创建指定的对象)
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);
        //通过ApplicationContext对象获取容器中已经注册的Bean对象,并指定他的类型
        DeptDao deptDao = applicationContext.getBean(&quot;deptDao&quot;, DeptDao.class);
        //调用获取到的对象中的方法
        deptDao.sayHello();
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58);function J(D,I){const a=t("ExternalLinkIcon");return r(),s("div",null,[b,x,f,S,e("p",null,[i("官网是 "),e("a",_,[i("https://spring.io"),d(a)])]),C])}const B=n(m,[["render",J],["__file","初识Spring.html.vue"]]);export{B as default};
