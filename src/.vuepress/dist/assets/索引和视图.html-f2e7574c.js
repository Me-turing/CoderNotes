import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as s,f as n}from"./app-a48529f7.js";const d={},i=n(`<h2 id="索引-index" tabindex="-1"><a class="header-anchor" href="#索引-index" aria-hidden="true">#</a> 索引 INDEX</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>索引是一种<strong>排好序的快速查找的数据结构</strong>，它<strong>帮助数据库高效的进行数据的检索</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构（额外的存储空间），这些数据结构以某种方式指向数据，这样就可以在这些数据结构上实现高效的查找算法。这种数据结构就叫做索引。</p><p>一般来说索引本身也很大，不可能全部存储在内存中，因此往往<strong>以索引文件的形式存放在磁盘</strong>中。目前<strong>大多数索引都采用BTree树方式构建</strong>。</p><h3 id="优势与劣势" tabindex="-1"><a class="header-anchor" href="#优势与劣势" aria-hidden="true">#</a> 优势与劣势</h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ol><li>索引是数据库优化， 加快了数据的查询速度(select)</li><li>表的主键会默认自动创建索引</li><li>每个字段都可以被索引</li><li>大量降低数据库的IO磁盘读写成本，极大提高了检索速度</li><li>索引事先对数据进行了排序，大大提高了查询效率</li><li></li></ol><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><ol><li>索引本身也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也要占用空间</li><li>索引表中的内容，在业务表中都有，数据是重复的，空间是“浪费的”</li><li>虽然索引大大提高了查询的速度，但对数据的增、删、改的操作需要更新索引表信息，如果数据量非常巨大， 更新效率就很慢， 因为<strong>更新表时， MySQL不仅要保存数据， 也要保存一下索引文件</strong></li><li>随着业务的不断变化，之前建立的索引可能不能满足查询需求，<strong>需要消耗我们的时间去更新索引</strong></li></ol><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><ol><li><strong>单值索引</strong> : 一个索引只包括一个列，一个表可以有多个列</li><li><strong>唯一索引</strong> : 索引列的值必须唯一，但允许有空值；主键会自动创建唯一索引</li><li><strong>复合索引</strong> : 一个索引同时包括多列</li></ol><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><h4 id="查看索引" tabindex="-1"><a class="header-anchor" href="#查看索引" aria-hidden="true">#</a> 查看索引</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> 表名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引" aria-hidden="true">#</a> 创建索引</h4><h5 id="创建单值索引" tabindex="-1"><a class="header-anchor" href="#创建单值索引" aria-hidden="true">#</a> 创建单值索引</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> 索引名 <span class="token keyword">ON</span> 表名 <span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="创建唯一索引" tabindex="-1"><a class="header-anchor" href="#创建唯一索引" aria-hidden="true">#</a> 创建唯一索引</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> 索引名 <span class="token keyword">ON</span> 表名<span class="token punctuation">(</span>字段名<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="创建复合索引" tabindex="-1"><a class="header-anchor" href="#创建复合索引" aria-hidden="true">#</a> 创建复合索引</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> 索引名 <span class="token keyword">ON</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不遵循最左原则，可能会出现复合索引失效</p><blockquote><p><strong>最左原则</strong> :<br> 当我们创建一个联合索引（复合索引）的时候。如(k1,k2,k3)，相当于创建了（k1）、(k1,k2)和(k1,k2,k3)三个索引，这就是最左匹配原则，也称为最左特性。</p></blockquote><h4 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引" aria-hidden="true">#</a> 删除索引</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名称 <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> 索引名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>面试题：如何判断一条sql执行的性能是否高效（是否使用索引）？</p><blockquote><p>使用EXPLAIN关键字与SQL语句一起执行查看</p></blockquote></blockquote><h2 id="视图-view" tabindex="-1"><a class="header-anchor" href="#视图-view" aria-hidden="true">#</a> 视图 VIEW</h2><p>视图是一张特殊的表，里面存放的是上次查询的结果</p><h3 id="视图的使用" tabindex="-1"><a class="header-anchor" href="#视图的使用" aria-hidden="true">#</a> 视图的使用</h3><h4 id="创建视图" tabindex="-1"><a class="header-anchor" href="#创建视图" aria-hidden="true">#</a> 创建视图</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名 <span class="token keyword">as</span> <span class="token keyword">SELECT</span>语句
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用视图" tabindex="-1"><a class="header-anchor" href="#使用视图" aria-hidden="true">#</a> 使用视图</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 视图名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="删除视图" tabindex="-1"><a class="header-anchor" href="#删除视图" aria-hidden="true">#</a> 删除视图</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> 视图名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="视图的优点" tabindex="-1"><a class="header-anchor" href="#视图的优点" aria-hidden="true">#</a> 视图的优点</h3><ol><li>提高了SQL的复用性</li><li>屏蔽了业务表的复杂性</li><li>数据共享</li></ol><h3 id="视图的缺点" tabindex="-1"><a class="header-anchor" href="#视图的缺点" aria-hidden="true">#</a> 视图的缺点</h3><ol><li>是一张单独的表存了业务表的数据，造成了数据重复</li><li>视图无法优化</li></ol>`,39),r=[i];function l(o,t){return e(),s("div",null,r)}const p=a(d,[["render",l],["__file","索引和视图.html.vue"]]);export{p as default};
