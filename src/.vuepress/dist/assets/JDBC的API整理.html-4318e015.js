import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,f as d}from"./app-a48529f7.js";const a="/CoderNotes/assets/image_KqmIsIwrwo-23fc8581.png",n={},i=d('<h2 id="connection接口" tabindex="-1"><a class="header-anchor" href="#connection接口" aria-hidden="true">#</a> Connection接口</h2><p>代表数据库连接</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void close ()</td><td>立即释放此 Connection 对象的数据库和 JDBC 资源，而不是等待它们被自动释放</td></tr><tr><td>void commit ()</td><td>使所有上一次提交/回滚后进行的更改成为持久更改，并释放此 Connection 对象当前持有的所有数据库锁。</td></tr><tr><td>Statement createStatement ()</td><td>创建一个 Statement 对象来将 SQL 语句发送到数据库。</td></tr><tr><td>CallableStatement prepareCall (String sql)</td><td>创建一个 CallableStatement 对象来调用数据库存储过程。</td></tr><tr><td>PreparedStatement prepareStatement (String sql)</td><td>创建一个 PreparedStatement 对象来将参数化的 SQL 语句发送到数据库。</td></tr><tr><td>PreparedStatement prepareStatement (String sql, int autoGeneratedKeys)</td><td>创建一个默认 PreparedStatement 对象，该对象能获取自动生成的键</td></tr><tr><td>void rollback ()</td><td>取消在当前事务中进行的所有更改，并释放此 Connection 对象当前持有的所有数据库锁。</td></tr><tr><td>void setAutoCommit (boolean autoCommit)</td><td>将此连接的自动提交模式设置为给定状态。</td></tr></tbody></table><h2 id="drivermanager类" tabindex="-1"><a class="header-anchor" href="#drivermanager类" aria-hidden="true">#</a> DriverManager类</h2><p>管理一组 JDBC 驱动程序的基本服务</p><p>应用程序不再需要使用 Class.forName() 显式地加载 JDBC 驱动程序。在调用 getConnection 方法时，DriverManager 会试着从初始化时加载的那些驱动程序以及使用与当前 applet 或应用程序相同的类加载器显式加载的那些驱动程序中查找合适的驱动程序。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>static Connection getConnection (String url)</td><td>试图建立到给定数据库 URL 的连接。</td></tr><tr><td>static Connection getConnection (String url, Properties info)</td><td>试图建立到给定数据库 URL 的连接。</td></tr><tr><td>static Connection getConnection (String url, String user, String password)</td><td>试图建立到给定数据库 URL 的连接。</td></tr></tbody></table><h2 id="statement接口" tabindex="-1"><a class="header-anchor" href="#statement接口" aria-hidden="true">#</a> Statement接口</h2><p>用于将 SQL 语句发送到数据库中，或理解为执行sql语句</p><p>有三种 Statement对象：</p><ol><li>Statement：用于执行不带参数的简单SQL语句；</li><li>PreparedStatement（从 Statement 继承）：用于执行带或不带参数的预编译SQL语句；</li><li>CallableStatement（从PreparedStatement 继承）：用于执行数据库存储过程的调用。</li></ol><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>ResultSet executeQuery(String sql)</td><td>执行SQL查询并获取到ResultSet对象</td></tr><tr><td>int executeUpdate(String sql)</td><td>可以执行插入、删除、更新等操作，返回值是执行该操作所影响的行数</td></tr></tbody></table><h2 id="preparedstatement接口" tabindex="-1"><a class="header-anchor" href="#preparedstatement接口" aria-hidden="true">#</a> PreparedStatement接口</h2><p>关系：public interface PreparedStatement extends Statement</p><p>区别：</p><ol><li>PreparedStatment安全性高，可以避免SQL注入</li><li>PreparedStatment简单不繁琐，不用进行字符串拼接</li><li>PreparedStatment性能高，用在执行多个相同数据库DML操作时</li></ol><h2 id="resultset接口" tabindex="-1"><a class="header-anchor" href="#resultset接口" aria-hidden="true">#</a> ResultSet接口</h2><p>ResultSet对象是executeQuery()方法的返回值，它被称为结果集，它代表符合SQL语句条件的所有行，并且它通过一套getXXX方法（这些get方法可以访问当前行中的不同列）提供了对这些行中数据的访问。</p><p>ResultSet里的数据一行一行排列，每行有多个字段，且有一个记录指针，指针所指的数据行叫做当前数据行，我们只能来操作当前的数据行。我们如果想要取得某一条记录，就要使用ResultSet的next()方法 ,如果我们想要得到ResultSet里的所有记录，就应该使用while循环。</p><p>ResultSet对象自动维护指向当前数据行的游标。每调用一次next()方法，游标向下移动一行。</p><p>初始状态下记录指针指向第一条记录的前面，通过next()方法指向第一条记录。循环完毕后指向最后一条记录的后面。</p><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean next()</td><td>将光标从当前位置向下移动一行</td></tr><tr><td>boolean previous()</td><td>游标从当前位置向上移动一行</td></tr><tr><td>void close()</td><td>关闭ResultSet 对象</td></tr><tr><td>int getInt(int colIndex)</td><td>以int形式获取结果集当前行指定列号值</td></tr><tr><td>int getInt(String colLabel)</td><td>以int形式获取结果集当前行指定列名值</td></tr><tr><td>float getFloat(int colIndex)</td><td>以float形式获取结果集当前行指定列号值</td></tr><tr><td>Float getFloat(String colLabel)</td><td>以float形式获取结果集当前行指定列名值</td></tr><tr><td>String getString(int colIndex)</td><td>以String 形式获取结果集当前行指定列号值</td></tr><tr><td>StringgetString(String colLabel)</td><td>以String形式获取结果集当前行指定列名值</td></tr></tbody></table>',23),o=[i];function l(s,c){return e(),r("div",null,o)}const p=t(n,[["render",l],["__file","JDBC的API整理.html.vue"]]);export{p as default};
