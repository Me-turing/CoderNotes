import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as l,c,d as n,e as s,b as t,f as p}from"./app-a48529f7.js";const u={},i=p('<h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>在Java中对文件或目录的操作，通常是将他转换为File对象，该对象内置了很多处理的方法，以便我们使用。</p><p>例如：<strong>File file1 = new File(&quot;D:/新建文件.txt&quot;);</strong> 但是这种写法并不好，因为路径中很容易出现\\t之类的转义符</p><p>所以推荐使用：<strong>File file2 = new File(&quot;D:&quot;+File.separatorChar+&quot;newTest.txt&quot;);</strong> 其中<code>File.separatorChar</code>在此自动替换了路径中的特殊符号</p><p>盘符上的文件 → 封装为对象 → 对象属于File类的对象 → 有了这个对象，我们程序就可以直接操纵这个对象，通过这个对象获取文件的各种信息，还可以对文件进行创建 ，删除。</p><h3 id="文件的操作" tabindex="-1"><a class="header-anchor" href="#文件的操作" aria-hidden="true">#</a> 文件的操作</h3><p><strong>File file2 = new File(&quot;D:&quot;+File.separatorChar+&quot;newTest.txt&quot;);</strong> //将指定文件封装为File对象</p><h4 id="常见api" tabindex="-1"><a class="header-anchor" href="#常见api" aria-hidden="true">#</a> 常见API</h4>',8),k=n("thead",null,[n("tr",null,[n("th",null,"API"),n("th",null,"说明"),n("th",null,"举例")])],-1),r=n("tr",null,[n("td",null,"boolean canRead()"),n("td",null,"是否可读"),n("td",null,'System.out.println("是否可读："+file2.canRead());')],-1),d=n("tr",null,[n("td",null,"boolean canWrite()"),n("td",null,"是否可写"),n("td",null,'System.out.println("是否可写："+file2.canWrite())')],-1),m=n("tr",null,[n("td",null,"String getName()"),n("td",null,"文件名字"),n("td",null,'System.out.println("文件名字："+file2.getName());')],-1),v=n("tr",null,[n("td",null,"String getParent()"),n("td",null,"上级目录"),n("td",null,'System.out.println("上级目录："+file2.getParent());')],-1),f=n("tr",null,[n("td",null,"boolean isDirectory()"),n("td",null,"是否是一个目录"),n("td",null,'System.out.println("是否是一个目录："+file2.isDirectory());')],-1),b=n("tr",null,[n("td",null,"boolean isFile()"),n("td",null,"是否是一个文件"),n("td",null,'System.out.println("是否是一个文件："+file2.isFile());')],-1),h=n("tr",null,[n("td",null,"boolean isHidden()"),n("td",null,"是否隐藏"),n("td",null,'System.out.println("是否隐藏："+file2.isHidden());')],-1),g=n("tr",null,[n("td",null,"long length()"),n("td",null,"文件大小"),n("td",null,'System.out.println("文件大小："+file2.length());')],-1),_=n("tr",null,[n("td",null,"boolean exists()"),n("td",null,"文件是否存在"),n("td",null,'System.out.println("文件是否存在："+file2.exists());')],-1),q=n("tr",null,[n("td",null,"boolean delete()"),n("td",null,"删除文件"),n("td",null,"file2.delete();")],-1),S=n("tr",null,[n("td",null,"file1==file2"),n("td",null,"比较两个对象的地址"),n("td",null,"System.out.println(file1==file2);")],-1),y=n("tr",null,[n("td",null,"file1.equals(file2)"),n("td",null,"比较两个文件的路径（即是否是同一个文件）"),n("td",null,"System.out.println(file1.equals(file2));")],-1),F=n("tr",null,[n("td",null,"String getAbsolutePath()"),n("td",null,"绝对路径：文件真实的、精准的、完整的路径"),n("td",null,'System.out.println("绝对路径："+file.getAbsolutePath());//E:\\AllPerject\\IDEAProject\\MCA_Demo\\JavaSE_Demo\\demo.txt')],-1),x=n("td",null,"String getPath()",-1),w=n("td",null,"相对路径：在Main方法中是以当前项目为参照物，在JUNIT中是以当前模块为参照物的相对路径位置",-1),P={href:"//demo.txt",target:"_blank",rel:"noopener noreferrer"},D=n("td",null,"String toString()",-1),A=n("td",null,"toString，通常就是相对路径",-1),E={href:"//demo.txt",target:"_blank",rel:"noopener noreferrer"},j=n("tr",null,[n("td",null,"boolean createNewFile() throws IOException"),n("td",null,"创建文件"),n("td",null,"file2.createNewFile();")],-1),N=p(`<h4 id="代码案例" tabindex="-1"><a class="header-anchor" href="#代码案例" aria-hidden="true">#</a> 代码案例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFile01</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 文件相关的操作
             */</span>
    <span class="token comment">//        File file = new File(&quot;D:\\\\新建文件夹.txt&quot;);</span>
            <span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:/新建文件.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:&quot;</span><span class="token operator">+</span><span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar<span class="token operator">+</span><span class="token string">&quot;newTest.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//推荐这种写法</span>
            
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否可读：&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否可写：&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件名字：&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;上级目录：&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否是一个目录：&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否是一个文件：&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否隐藏：&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件大小：&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件是否存在：&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">//如果文件存在则删除</span>
    <span class="token comment">//        if (file2.exists()){</span>
    <span class="token comment">//            file2.delete();</span>
    <span class="token comment">//        }else {</span>
    <span class="token comment">//            //不存在则创建</span>
    <span class="token comment">//            file2.createNewFile();</span>
    <span class="token comment">//        }</span>
            <span class="token doc-comment comment">/**
             * 地址相关的操作
             */</span>
            <span class="token comment">//比较两个对象的地址</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token operator">==</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//比较两个文件的路径（即是否是同一个文件）</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;绝对路径：&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//D:\\newTest.txt</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;相对路径：&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//D:\\newTest.txt</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;toString:&quot;</span><span class="token operator">+</span>file2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//D:\\newTest.txt</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;demo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">////绝对路径指的就是：真实的一个精准的，完整的路径</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;绝对路径：&quot;</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//E:\\AllPerject\\IDEAProject\\MCA_Demo\\JavaSE_Demo\\demo.txt</span>
            <span class="token comment">//相对路径：有一个参照物，相对这个参照物的路径。</span>
            <span class="token comment">//在main方法中，相对位置指的就是：E:\\AllPerject\\IDEAProject\\MCA_Demo\\JavaSE_Demo</span>
            <span class="token comment">//在junit的测试方法中，相对路径指的就是模块位置</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;相对路径：&quot;</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//demo.txt</span>
            <span class="token comment">//toString的效果永远是  相对路径</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;toString:&quot;</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//demo.txt</span>
            
            <span class="token class-name">File</span> file3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;a/b/c/demo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>file3<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> file3<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;绝对路径：&quot;</span><span class="token operator">+</span>file3<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//E:\\AllPerject\\IDEAProject\\MCA_Demo\\JavaSE_Demo\\a\\b\\c\\demo.txt</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;相对路径：&quot;</span><span class="token operator">+</span>file3<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a\\b\\c\\demo.txt</span>
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="目录的操作" tabindex="-1"><a class="header-anchor" href="#目录的操作" aria-hidden="true">#</a> 目录的操作</h3><p><code>File file2 = new File(&quot;D:&quot;+File.separatorChar+&quot;IDEA_workspace&quot;);</code> //将指定目录封装为File对象</p><h4 id="常见api-1" tabindex="-1"><a class="header-anchor" href="#常见api-1" aria-hidden="true">#</a> 常见API</h4>`,5),I=n("thead",null,[n("tr",null,[n("th",null,"API"),n("th",null,"说明"),n("th",null,"举例")])],-1),C=n("tr",null,[n("td",null,"boolean canRead()"),n("td",null,"是否可读"),n("td",null,'System.out.println("是否可读："+file2.canRead());')],-1),T=n("tr",null,[n("td",null,"boolean canWrite()"),n("td",null,"是否可写"),n("td",null,'System.out.println("是否可写："+file2.canWrite())')],-1),J=n("tr",null,[n("td",null,"String getName()"),n("td",null,"文件名字"),n("td",null,'System.out.println("文件名字："+file2.getName());')],-1),M=n("tr",null,[n("td",null,"String getParent()"),n("td",null,"上级目录"),n("td",null,'System.out.println("上级目录："+file2.getParent());')],-1),H=n("tr",null,[n("td",null,"boolean isDirectory()"),n("td",null,"是否是一个目录"),n("td",null,'System.out.println("是否是一个目录："+file2.isDirectory());')],-1),R=n("tr",null,[n("td",null,"boolean isFile()"),n("td",null,"是否是一个文件"),n("td",null,'System.out.println("是否是一个文件："+file2.isFile());')],-1),W=n("tr",null,[n("td",null,"boolean isHidden()"),n("td",null,"是否隐藏"),n("td",null,'System.out.println("是否隐藏："+file2.isHidden());')],-1),V=n("tr",null,[n("td",null,"long length()"),n("td",null,"文件大小"),n("td",null,'System.out.println("文件大小："+file2.length());')],-1),B=n("tr",null,[n("td",null,"boolean exists()"),n("td",null,"文件是否存在"),n("td",null,'System.out.println("文件是否存在："+file2.exists());')],-1),L=n("tr",null,[n("td",null,"file1==file2"),n("td",null,"比较两个对象的地址"),n("td",null,"System.out.println(file1==file2);")],-1),O=n("tr",null,[n("td",null,"file1.equals(file2)"),n("td",null,"比较两个文件的路径（即是否是同一个文件）"),n("td",null,"System.out.println(file1.equals(file2));")],-1),U=n("tr",null,[n("td",null,"String getAbsolutePath()"),n("td",null,"绝对路径：文件真实的、精准的、完整的路径"),n("td",null,'System.out.println("绝对路径："+file2.getAbsolutePath());//E:\\AllPerject\\IDEAProject\\MCA_Demo\\JavaSE_Demo\\demo.txt')],-1),z=n("td",null,"String getPath()",-1),G=n("td",null,"相对路径：在Main方法中是以当前项目为参照物，在JUNIT中是以当前模块为参照物的相对路径位置",-1),K={href:"//demo.txt",target:"_blank",rel:"noopener noreferrer"},Q=n("td",null,"String toString()",-1),X=n("td",null,"toString，通常就是相对路径",-1),Y={href:"//demo.txt",target:"_blank",rel:"noopener noreferrer"},Z=n("tr",null,[n("td",null,"boolean mkdir()"),n("td",null,"创建单层目录"),n("td",null,"file2.mkdir();")],-1),$=n("tr",null,[n("td",null,"boolean mkdirs()"),n("td",null,"创建多层目录"),n("td",null,"file2.mkdirs();")],-1),nn=n("tr",null,[n("td",null,"boolean delete()"),n("td",null,"删除目录： 只会删除一层目录，并且必须为空目录"),n("td",null,"file2.delete();")],-1),sn=n("tr",null,[n("td",null,"String[] list()"),n("td",null,"获取指定目录内存在的所有目录或者文件的名字的数组"),n("td",null,"String[] list = file2.list();")],-1),an=n("tr",null,[n("td",null,"File[] listFiles()"),n("td",null,"获取指定目录内存在的所有目录或者文件的File对象数组"),n("td",null,"File[] files = file2.listFiles();")],-1),tn=p(`<h4 id="代码案例-1" tabindex="-1"><a class="header-anchor" href="#代码案例-1" aria-hidden="true">#</a> 代码案例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meturing<span class="token punctuation">.</span>file</span><span class="token punctuation">;</span>
    
    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * 对目录开始操作
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFile02</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//将目录封装为File类的对象：</span>
            <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\IDEA_workspace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件是否可读：&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件是否可写：&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件的名字：&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;上级目录：&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否是一个目录：&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否是一个文件：&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否隐藏：&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件的大小：&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否存在：&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;绝对路径：&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;相对路径：&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;toString:&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">//目录特有的属性</span>
            <span class="token class-name">File</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:&quot;</span><span class="token operator">+</span><span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar<span class="token operator">+</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            a<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建单层目录</span>
            <span class="token class-name">File</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:&quot;</span><span class="token operator">+</span><span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar<span class="token operator">+</span><span class="token string">&quot;a&quot;</span><span class="token operator">+</span><span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar<span class="token operator">+</span><span class="token string">&quot;b&quot;</span><span class="token operator">+</span><span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar<span class="token operator">+</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建多层目录</span>
            
            b<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除  如果删除目录的话，只会删除一层目录，并且必须为空目录</span>
            
            <span class="token comment">//获取指定目录内存在的所有目录或者文件的名字的数组</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token comment">//获取指定目录内存在的所有目录或者文件的File对象数组</span>
            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前的名字：&quot;</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\t当前的绝对路径&quot;</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function pn(on,en){const a=e("ExternalLinkIcon");return l(),c("div",null,[i,n("table",null,[k,n("tbody",null,[r,d,m,v,f,b,h,g,_,q,S,y,F,n("tr",null,[x,w,n("td",null,[s('System.out.println("相对路径："+file.getPath());'),n("a",P,[s("//demo.txt"),t(a)])])]),n("tr",null,[D,A,n("td",null,[s('System.out.println("toString:"+file.toString());'),n("a",E,[s("//demo.txt"),t(a)])])]),j])]),N,n("table",null,[I,n("tbody",null,[C,T,J,M,H,R,W,V,B,L,O,U,n("tr",null,[z,G,n("td",null,[s('System.out.println("相对路径："+file2.getPath());'),n("a",K,[s("//demo.txt"),t(a)])])]),n("tr",null,[Q,X,n("td",null,[s('System.out.println("toString:"+file2.toString());'),n("a",Y,[s("//demo.txt"),t(a)])])]),Z,$,nn,sn,an])]),tn])}const un=o(u,[["render",pn],["__file","File类.html.vue"]]);export{un as default};
