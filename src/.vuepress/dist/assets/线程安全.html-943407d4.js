import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as t}from"./app-a48529f7.js";const e="/CoderNotes/assets/image_oImT5VO39O-1fc183f8.png",o={},c=t(`<p>由于多线程的特性，由于多个线程互相抢占资源，可能会出现资源不可控的现象：</p><p>比如：抢票软件出现了 重票，错票。主要就是：多个线程，在争抢资源的过程中，导致共享的资源出现问题。一个线程还没执行完，另一个线程就参与进来了，开始争抢。</p><p>为此，我们需要对线程进行同步操作，也就是加锁。</p><h2 id="同步代码块" tabindex="-1"><a class="header-anchor" href="#同步代码块" aria-hidden="true">#</a> 同步代码块</h2><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p><code>synchronized (同步监视器){}</code></p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuyTicketThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ticketNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//此处有1000行代码</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//把具有安全隐患的代码锁住即可，如果锁多了就会效率低 --》this就是这个锁</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ticketNum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我在&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;买到了北京到哈尔滨的第&quot;</span> <span class="token operator">+</span> ticketNum<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">&quot;张车票&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//此处有1000行代码</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于同步监视器" tabindex="-1"><a class="header-anchor" href="#关于同步监视器" aria-hidden="true">#</a> 关于同步监视器</h3><ol><li>必须是引用数据类型，不能是基本数据类型</li><li>也可以创建一个专门的同步监视器，没有任何业务含义</li><li>一般使用共享资源做同步监视器即可</li><li>在同步代码块中不能改变同步监视器对象的引用</li><li>尽量不要String和包装类Integer做同步监视器</li><li>建议使用final修饰同步监视器</li><li>也可以利用反射的原理，使用 <code>类名.class </code>字节码作为同步监视器</li></ol><figure><img src="`+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="执行过程" tabindex="-1"><a class="header-anchor" href="#执行过程" aria-hidden="true">#</a> 执行过程</h4><ol><li>第一个线程来到同步代码块，发现同步监视器open状态，需要close,然后执行其中的代码</li><li>第一个线程执行过程中，发生了线程切换（阻塞 就绪），第一个线程失去了cpu，但是没有开锁open</li><li>第二个线程获取了cpu，来到了同步代码块，发现同步监视器close状态，无法执行其中的代码，第二个线程也进入阻塞状态</li><li>第一个线程再次获取CPU,接着执行后续的代码；同步代码块执行完毕，释放锁open</li><li>第二个线程也再次获取cpu，来到了同步代码块，发现同步监视器open状态，拿到锁并且上锁，由阻塞状态进入就绪状态，再进入运行状态，重复第一个线程的处理过程（加锁）</li><li>建议使用final修饰同步监视器</li></ol><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h4><ol><li>同步代码块中能发生CPU的切换吗？能！！！ 但是后续的被执行的线程也无法执行同步代码块（因为锁仍旧close）</li><li>多个代码块使用了同一个同步监视器（锁），锁住一个代码块的同时，也锁住所有使用该锁的所有代码块，其他线程无法访问其中的任何一个代码块</li><li>多个代码块使用了同一个同步监视器（锁），锁住一个代码块的同时，也锁住所有使用该锁的所有代码块， 但是没有锁住使用其他同步监视器的代码块，其他线程有机会访问其他同步监视器的代码块</li></ol><h3 id="同步方法" tabindex="-1"><a class="header-anchor" href="#同步方法" aria-hidden="true">#</a> 同步方法</h3><h4 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h4><p><code>public static\`\` \`\`synchronized\`\` \`\`void buyTicket(){}</code></p><h4 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1" aria-hidden="true">#</a> 代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuyTicketThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">BuyTicketThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//一共10张票：</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> ticketNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//多个对象共享10张票</span>
    <span class="token comment">//每个窗口都是一个线程对象：每个对象执行的代码放入run方法中</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//每个窗口后面有100个人在抢票：</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">buyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">buyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//锁住的  同步监视器： BuyTicketThread.class</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ticketNum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//对票数进行判断，票数大于零我们才抢票</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我在&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;买到了从北京到哈尔滨的第&quot;</span> <span class="token operator">+</span> ticketNum<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">&quot;张车票&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1" aria-hidden="true">#</a> 注意</h4><ol><li>不要将<code>run()</code>定义为同步方法</li><li>非静态同步方法的同步监视器是this，静态同步方法的同步监视器是 <code>类名.class</code> 字节码信息对象</li><li>同步代码块的效率要高于同步方法，因为：同步方法是将线程挡在了方法的外部，而同步代码块锁将线程挡在了代码块的外部，但是却是方法的内部</li><li>同步方法的锁是this，一旦锁住一个方法，就锁住了所有的同步方法；同步代码块只是锁住使用该同步监视器的代码块，而没有锁住使用其他监视器的代码块</li></ol><h3 id="lock锁" tabindex="-1"><a class="header-anchor" href="#lock锁" aria-hidden="true">#</a> Lock锁</h3><p>JDK1.5后新增新一代的线程同步方式 : <strong>Lock锁，与采用synchronized相比，lock可提供多种锁方案，更灵活</strong></p><p><code>synchronized</code>是Java中的关键字，这个关键字的识别是靠JVM来识别完成的，<strong>是虚拟机级别</strong>的。但是<strong>Lock锁是API级别</strong>的，提供了相应的接口和对应的实现类，这个方式更灵活，表现出来的性能优于之前的方式</p><h4 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念" aria-hidden="true">#</a> 相关概念</h4><h5 id="condition等待池" tabindex="-1"><a class="header-anchor" href="#condition等待池" aria-hidden="true">#</a> Condition等待池</h5><p>Condition是在Java 1.5中才出现的，它用来替代传统的Object的<code>wait()</code>、<code>notify()</code> 实现线程间的协作，相比使用Object的<code>wait()</code>、<code>notify()</code>，使用Condition的<code>await()</code>、<code>signal()</code>这种方式实现线程间协作更加安全和高效。</p><p>它能够更加精细的控制多线程的休眠与唤醒。对于同一个锁，我们可以创建多个Condition，在不同的情况下使用不同的Condition</p><p>一个<code>Condition</code>包含一个等待队列。一个<code>Lock</code>可以产生多个<code>Condition</code>，所以可以有多个等待队列。</p><p>在<code>Object</code>的监视器模型上，一个对象拥有一个同步队列和等待队列，而<code>Lock</code>（同步器）拥有一个同步队列和多个等待队列。​</p><p>Object中的<code>wait()</code>,<code>notify()</code>,<code>notifyAll()</code>方法是和&quot;同步锁&quot;(<code>synchronized关键字</code>)捆绑使用的；而<code>Condition</code>是需要与&quot;<code>互斥锁</code>&quot; / &quot;<code>共享锁</code>&quot; 捆绑使用的。</p><p>调用Condition的<code>await()</code>、<code>signal()</code>、<code>signalAll()</code>方法，都必须在lock保护之内，就是说必须在<code>lock.lock()</code>和<code>lock.unlock</code>之间才可以使用</p><ul><li>Conditon中的await()对应Object的wait()；</li><li>Condition中的signal()对应Object的notify()；</li><li>Condition中的signalAll()对应Object的notifyAll()。</li></ul><blockquote><p>注意 :<br><code>await()</code>的线程在接到信号或被中断之前一直处于等待状态：<br> 与此 Condition 相关的锁以原子方式释放，并且出于线程调度的目的，将禁用当前线程，且在发生以下四种情况之一 以前，当前线程将一直处于休眠状态：</p><ol><li>其他某个线程调用此 Condition 的 <code>signal() 方法</code>，并且碰巧将当前线程选为被唤醒的线程；</li><li>其他某个线程调用此 Condition 的 <code>signalAll() 方法</code>；</li><li>其他某个线程<code>中断当前线程</code>，且支持<code>中断线程</code>的挂起；</li><li>发生“<code>虚假唤醒</code>”</li></ol></blockquote><h4 id="语法-2" tabindex="-1"><a class="header-anchor" href="#语法-2" aria-hidden="true">#</a> 语法</h4><p><code>Lock lock = new ReentrantLock();</code></p><h4 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h4><h5 id="lock锁的api" tabindex="-1"><a class="header-anchor" href="#lock锁的api" aria-hidden="true">#</a> Lock锁的API</h5><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td><code>ReentrantLock()</code></td><td>构造方法，默认不开启公平策略</td></tr><tr><td><code>ReentrantLock(boolean fair)</code></td><td>构造方法，是否开启公平策略，true 开始 false 不开启</td></tr><tr><td><code>void lock()</code></td><td>获得锁</td></tr><tr><td><code>void unlock()</code></td><td>释放此锁</td></tr><tr><td><code>Condition newCondition()</code></td><td>创建等待池</td></tr><tr><td><code>final int getQueueLength()</code></td><td>返回等待获取此锁的线程数的估计值</td></tr><tr><td><code>boolean hasWaiters(Condition condition)</code></td><td>查询是否有线程正在等待与此锁</td></tr><tr><td><code>int getWaitQueueLength(Condition condition)</code></td><td>返回在与此锁相关的给定条件上等待的线程数的估计值</td></tr></tbody></table><h5 id="condition-等待池的api" tabindex="-1"><a class="header-anchor" href="#condition-等待池的api" aria-hidden="true">#</a> Condition 等待池的API</h5><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td><code>void await()</code></td><td>当前线程放入等待池，直到收到信号或被中断</td></tr><tr><td><code>boolean await(long time, TimeUnit unit)</code></td><td>导致当前线程等待，直到发出信号或中断，或指定的等待时间结束。 Time→等待的最大时间单位 unit → 参数的时间单位</td></tr><tr><td><code>boolean awaitUntil(Date deadline)</code></td><td>导致当前线程等待，直到收到信号或中断，或超过指定的截止日期。 deadline → 等待的绝对时间</td></tr><tr><td><code>void signal()</code></td><td>唤醒一个等待的线程</td></tr><tr><td><code>void signalAll()</code></td><td>唤醒所有等待的线程</td></tr></tbody></table><h4 id="代码-2" tabindex="-1"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuyTicketThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ticketNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">//拿来一把锁：</span>
    <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多态  接口=实现类  可以使用不同的实现类</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//此处有1000行代码</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//打开锁：</span>
            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ticketNum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我在&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;买到了北京到哈尔滨的第&quot;</span> <span class="token operator">+</span> ticketNum<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">&quot;张车票&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>
                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">//关闭锁：---&gt;即使有异常，这个锁也可以得到释放</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//此处有1000行代码</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lock和synchronized的区别" tabindex="-1"><a class="header-anchor" href="#lock和synchronized的区别" aria-hidden="true">#</a> Lock和synchronized的区别</h4><ol><li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁</li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li></ol><h3 id="线程同步的优缺点" tabindex="-1"><a class="header-anchor" href="#线程同步的优缺点" aria-hidden="true">#</a> 线程同步的优缺点</h3><p>优先使用：Lock----同步代码块（已经进入了方法体，分配了相应资源）----同步方法（在方法体之外）</p><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ol><li>线程安全，效率低</li></ol><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><ol><li>线程不安全，效率高</li><li>可能造成死锁 <ol><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</li></ol></li></ol><blockquote><p>避免死锁：<br> 减少同步资源的定义，避免嵌套同步</p></blockquote>`,53),p=[c];function i(l,d){return a(),s("div",null,p)}const k=n(o,[["render",i],["__file","线程安全.html.vue"]]);export{k as default};
