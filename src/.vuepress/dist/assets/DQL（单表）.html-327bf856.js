import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,f as e}from"./app-c47b8d81.js";const t={},l=e(`<h2 id="dql" tabindex="-1"><a class="header-anchor" href="#dql" aria-hidden="true">#</a> DQL</h2><h3 id="查询所有行和列的数据" tabindex="-1"><a class="header-anchor" href="#查询所有行和列的数据" aria-hidden="true">#</a> 查询所有行和列的数据</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询指定列的数据" tabindex="-1"><a class="header-anchor" href="#查询指定列的数据" aria-hidden="true">#</a> 查询指定列的数据</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段名 <span class="token keyword">from</span> 表名
<span class="token keyword">select</span> 字段名<span class="token punctuation">,</span>字段名<span class="token punctuation">,</span>字段名<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="去重查询" tabindex="-1"><a class="header-anchor" href="#去重查询" aria-hidden="true">#</a> 去重查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">distinct</span> 字段名 <span class="token keyword">from</span> 表名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意点: 去重针对某列, distinct前面不能先出现列名</strong></p><h3 id="别名查询" tabindex="-1"><a class="header-anchor" href="#别名查询" aria-hidden="true">#</a> 别名查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 列名 <span class="token keyword">as</span> 别名  <span class="token keyword">from</span> 表
<span class="token keyword">select</span> 列名 别名 <span class="token keyword">from</span> 表
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运算查询" tabindex="-1"><a class="header-anchor" href="#运算查询" aria-hidden="true">#</a> 运算查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//运算查询(+,-,*,/,%等)</span>
<span class="token keyword">select</span> 列名<span class="token operator">+</span><span class="token number">10</span> <span class="token keyword">as</span> 别名 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>运算查询字段,字段之间是可以的<br> 字符串等类型可以做运算查询，但结果没有意义</p></blockquote><h3 id="条件查询" tabindex="-1"><a class="header-anchor" href="#条件查询" aria-hidden="true">#</a> 条件查询</h3><blockquote><p>语法：select ... from 表 where 条件 </p></blockquote><h4 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h4><p>大于：&gt;<br> 小于：&lt;<br> 大于等于：&gt;=<br> 小于等于：&lt;=<br> 等于：= 不能用于null判断<br> 不等于：!= 或 &lt;&gt;<br> 安全等于: &lt;=&gt; 可以用于null值判断\`</p><h4 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h4><p>逻辑与：&amp;&amp; 或 and<br> 逻辑或：|| 或 or<br> 逻辑非：! 或 not<br> 逻辑异或：^ 或 xor\`</p><h4 id="范围" tabindex="-1"><a class="header-anchor" href="#范围" aria-hidden="true">#</a> 范围</h4><h5 id="between-and" tabindex="-1"><a class="header-anchor" href="#between-and" aria-hidden="true">#</a> between and</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//返回条件符合value1到value2之间的数据</span>
<span class="token keyword">select</span> 列名 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 列名 <span class="token operator">between</span> value1 <span class="token operator">and</span> value2

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> in</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//返回条件符合value结果任意之一的值</span>
<span class="token keyword">select</span> 列名 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 列名 <span class="token operator">in</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token comment">//返回条件不符合value结果任意之一的值</span>
<span class="token keyword">select</span> 列名 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 列名 <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="like模糊查询" tabindex="-1"><a class="header-anchor" href="#like模糊查询" aria-hidden="true">#</a> like模糊查询</h4><p>like &#39;xxx&#39; 模糊查询是处理字符串的时候进行部分匹配</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//如果想要表示0~n个字符，用%    a%  =&gt;  anbcjbjbdj</span>
<span class="token comment">//如果想要表示确定的1个字符，用_  a_  =&gt;   ab</span>
<span class="token keyword">select</span> 列名 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 列名 <span class="token operator">like</span> <span class="token string">&#39;value1&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="正则查询" tabindex="-1"><a class="header-anchor" href="#正则查询" aria-hidden="true">#</a> 正则查询</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//value可以写正则语法</span>
<span class="token keyword">select</span> 列名 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 列名 <span class="token operator">regexp</span> <span class="token string">&#39;value1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="空值处理" tabindex="-1"><a class="header-anchor" href="#空值处理" aria-hidden="true">#</a> 空值处理</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//条件为空</span>
<span class="token keyword">select</span> 列名 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 列名 <span class="token operator">is</span> <span class="token boolean">null</span>
<span class="token comment">//条件不为空</span>
<span class="token keyword">select</span> 列名 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 列名 <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="排序查询order-by" tabindex="-1"><a class="header-anchor" href="#排序查询order-by" aria-hidden="true">#</a> 排序查询ORDER BY</h3><h4 id="单列排序" tabindex="-1"><a class="header-anchor" href="#单列排序" aria-hidden="true">#</a> 单列排序</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 字段名 <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//ASC: 升序，默认值; DESC: 降序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="多列排序" tabindex="-1"><a class="header-anchor" href="#多列排序" aria-hidden="true">#</a> 多列排序</h4><p><strong>同时对多个字段进行排序，如果第1个字段相等，则按第2个字段排序，依次类推</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 字段<span class="token operator">=</span>值 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 字段名<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 聚合函数<span class="token punctuation">(</span>列名<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>说明</th><th>函数</th></tr></thead><tbody><tr><td>最大</td><td>MAX(列名)</td></tr><tr><td>最小</td><td>MIN(列名)</td></tr><tr><td>平均</td><td>AVG(列名)</td></tr><tr><td>求和</td><td>SUM(列名)</td></tr><tr><td>计数</td><td>COUNT(列名)</td></tr></tbody></table><blockquote><p>注意:<br><strong>聚合函数会忽略空值NULL</strong><br><strong>IFNULL(列名，默认值)函数可以处理值为NULL</strong><br><strong>如果列的值为NULL则返回默认值</strong></p></blockquote><h3 id="分组-group-by-与-having" tabindex="-1"><a class="header-anchor" href="#分组-group-by-与-having" aria-hidden="true">#</a> 分组 GROUP BY 与 HAVING</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//一般分组会跟聚合函数一起使用</span>
<span class="token comment">//HAVING 可以对分组结果进行过滤</span>
<span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名  <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 列 <span class="token punctuation">[</span><span class="token keyword">HAVING</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HAVING与WHERE的区别</p><ol><li>WHERE <ol><li>对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据，即先过滤再分组。</li><li>where后面不可以使用聚合函数</li></ol></li><li>HAVING <ol><li>having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，即先分组再过滤。</li><li>having后面可以使用聚合函数</li></ol></li></ol><h2 id="分页" tabindex="-1"><a class="header-anchor" href="#分页" aria-hidden="true">#</a> 分页</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//a 表示的是跳过的数据条数</span>
<span class="token comment">//b 表示的是要查询的数据条数</span>
<span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">limit</span> a <span class="token punctuation">,</span>b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47),o=[l];function d(p,r){return s(),n("div",null,o)}const u=a(t,[["render",d],["__file","DQL（单表）.html.vue"]]);export{u as default};
