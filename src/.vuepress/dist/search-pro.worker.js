const nt="ENTRIES",T="KEYS",V="VALUES",F="";class D{constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case V:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const a=o[h-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let l=0;l<c.length;++l,++a){const p=c[l],f=i*a,g=f-i;let d=o[f];const m=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<d&&(d=L)}if(d>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=M(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=O(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=O(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,V)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},O=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return O(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=M(e);n.set(o+t,s),n.delete(o)},M=e=>e[e.length-1],it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",P="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},q=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,lt=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),q(n.terms,u)}}return e},[P]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);q(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},dt=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},ft={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},H={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:ft},mt={combineWith:P,prefix:(e,t,s)=>t===s.length-1},pt={batchSize:1e3,batchWait:10},J={minDirtFactor:.1,minDirtCount:20},Ft={...pt,...J};class _t{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?Ft:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...H,...t.searchOptions||{}},autoSuggestOptions:{...mt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=J,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const yt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},U=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},At=(e,t,s,n)=>{if(!e._index.has(n)){U(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?U(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(ht[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const a=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const d of p.keys()){if(!e._documentIds.has(d)){At(e,l,d,s),f-=1;continue}const m=i?i(e._documentIds.get(d),s,e._storedFields.get(d)):1;if(!m)continue;const y=p.get(d),_=e._fieldLength.get(d)[l],b=at(y,f,e._documentCount,_,g,r),z=n*a*m*b,A=h.get(d);if(A){A.score+=z,ct(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(d,{score:z,terms:[t],match:{[s]:[c]}})}}return h},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((d,m)=>({...d,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:a}={...H.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,m=d<1?Math.min(r,Math.round(t.term.length*d)):d;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[d,m]of f){const y=d.length-t.term.length;if(!y)continue;g==null||g.delete(d);const _=a*d.length/(d.length+.3*y);B(e,t.term,d,_,m,o,u,h,p)}if(g)for(const d of g.keys()){const[m,y]=g.get(d);if(!y)continue;const _=c*d.length/(d.length+y);B(e,t.term,d,_,m,o,u,h,p)}return p},K=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},l=t.queries.map(p=>K(e,p,a));return Y(l,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(a=>h(a)).filter(a=>!!a).map(dt(i)).map(a=>Ct(e,a,i));return Y(c,i.combineWith)},X=(e,t,s={})=>{const n=K(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of X(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o},zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new _t(a);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const d of Object.keys(f)){let m=f[d];c===1&&(m=m.ds),g.set(parseInt(d,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:a?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return X(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[a,l]=u.split(/[#@]/),{contents:p}=n[a]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:a,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:a,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const d=i.map(m=>j(g,m)).filter(m=>m!==null);d.length&&p.push([{type:"text",key:a,...c&&{anchor:l},display:d},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=yt(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Et(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":3187,\"nextId\":3187,\"documentIds\":{\"0\":\"v-2e3eac9e\",\"1\":\"v-6dcb0a06\",\"2\":\"v-207ce53b\",\"3\":\"v-129c5c8e\",\"4\":\"v-65c80cbe\",\"5\":\"v-5f855218\",\"6\":\"v-06e3ca1a\",\"7\":\"v-ea347634\",\"8\":\"v-6a9ac505\",\"9\":\"v-fc7fc63a\",\"10\":\"v-481ab6fc\",\"11\":\"v-fb6e1cfe\",\"12\":\"v-54ce2100\",\"13\":\"v-eae2eb42\",\"14\":\"v-313e97e7\",\"15\":\"v-313e97e7#前言\",\"16\":\"v-313e97e7#为什么需要异常处理\",\"17\":\"v-313e97e7#解决异常处理\",\"18\":\"v-313e97e7#try-catch\",\"19\":\"v-313e97e7#代码案例\",\"20\":\"v-313e97e7#执行逻辑\",\"21\":\"v-313e97e7#catch中处理异常\",\"22\":\"v-313e97e7#try-catch-finally\",\"23\":\"v-313e97e7#前言-1\",\"24\":\"v-313e97e7#代码案例-1\",\"25\":\"v-313e97e7#执行逻辑-1\",\"26\":\"v-313e97e7#常用操作\",\"27\":\"v-313e97e7#多重catch\",\"28\":\"v-313e97e7#异常的分类\",\"29\":\"v-313e97e7#结构层次\",\"30\":\"v-313e97e7#代码案例-2\",\"31\":\"v-313e97e7#throw与throws\",\"32\":\"v-313e97e7#代码案例-3\",\"33\":\"v-313e97e7#区别\",\"34\":\"v-313e97e7#重写与重载异常\",\"35\":\"v-313e97e7#自定义异常\",\"36\":\"v-313e97e7#代码声明\",\"37\":\"v-58e251c5\",\"38\":\"v-2175e310\",\"39\":\"v-d8efe638\",\"40\":\"v-44b65011\",\"41\":\"v-23407ac2\",\"42\":\"v-a6084d96\",\"43\":\"v-01cad6c0\",\"44\":\"v-519ce8b4\",\"45\":\"v-159eaa9b\",\"46\":\"v-4c7f916c\",\"47\":\"v-f18f19e0\",\"48\":\"v-f18f19e0#配置虚拟机软件\",\"49\":\"v-f18f19e0#配置虚拟机系统\",\"50\":\"v-f18f19e0#实现效果\",\"51\":\"v-8081bb7e\",\"52\":\"v-4a363ac3\",\"53\":\"v-562e52d1\",\"54\":\"v-df6db8f0\",\"55\":\"v-563302b7\",\"56\":\"v-734ca396\",\"57\":\"v-5cb6686e\",\"58\":\"v-898de898\",\"59\":\"v-3be854d5\",\"60\":\"v-3be854d5#概述\",\"61\":\"v-3be854d5#什么是echarts动态图表\",\"62\":\"v-3be854d5#echcarts的组件\",\"63\":\"v-3be854d5#快速上手\",\"64\":\"v-3be854d5#引入js\",\"65\":\"v-3be854d5#案例\",\"66\":\"v-7920ee58\",\"67\":\"v-abfd509e\",\"68\":\"v-abfd509e#es6-入门\",\"69\":\"v-abfd509e#es6简介\",\"70\":\"v-abfd509e#es6与javascript的关系\",\"71\":\"v-abfd509e#es6与es5的关系\",\"72\":\"v-abfd509e#基本语法\",\"73\":\"v-abfd509e#let声明变量\",\"74\":\"v-abfd509e#const声明常量\",\"75\":\"v-abfd509e#解构赋值\",\"76\":\"v-abfd509e#模板字符串\",\"77\":\"v-abfd509e#声明对象简写\",\"78\":\"v-abfd509e#定义方法简写\",\"79\":\"v-abfd509e#对象拓展运算符\",\"80\":\"v-abfd509e#箭头函数\",\"81\":\"v-abfd509e#node-入门\",\"82\":\"v-abfd509e#简介\",\"83\":\"v-abfd509e#什么是node-js\",\"84\":\"v-abfd509e#node-js的作用\",\"85\":\"v-abfd509e#部署node-js\",\"86\":\"v-abfd509e#node-js快速入门\",\"87\":\"v-abfd509e#控制台程序\",\"88\":\"v-abfd509e#服务端程序\",\"89\":\"v-abfd509e#npm\",\"90\":\"v-abfd509e#什么是npm\",\"91\":\"v-abfd509e#使用npm管理项目\",\"92\":\"v-abfd509e#项目初始化\",\"93\":\"v-abfd509e#修改npm镜像\",\"94\":\"v-abfd509e#npm-install命令的使用\",\"95\":\"v-abfd509e#其他命令\",\"96\":\"v-abfd509e#babel\",\"97\":\"v-abfd509e#安装\",\"98\":\"v-abfd509e#使用\",\"99\":\"v-abfd509e#模块化\",\"100\":\"v-abfd509e#简介-1\",\"101\":\"v-abfd509e#commonjs模块规范\",\"102\":\"v-abfd509e#导出模块\",\"103\":\"v-abfd509e#导入模块\",\"104\":\"v-abfd509e#运行程序\",\"105\":\"v-abfd509e#es6模块规范\",\"106\":\"v-abfd509e#导出模块-1\",\"107\":\"v-abfd509e#导入模块-1\",\"108\":\"v-abfd509e#es6模块规范另一种写法\",\"109\":\"v-abfd509e#导出模块-2\",\"110\":\"v-abfd509e#导入模块-2\",\"111\":\"v-abfd509e#webpack\",\"112\":\"v-abfd509e#安装-1\",\"113\":\"v-abfd509e#demo演示\",\"114\":\"v-abfd509e#打包js\",\"115\":\"v-abfd509e#打包css\",\"116\":\"v-08a38862\",\"117\":\"v-3df31fd7\",\"118\":\"v-3df31fd7#mvc\",\"119\":\"v-3df31fd7#为什么要使用mvc\",\"120\":\"v-3df31fd7#mvc和三层架构的关系\",\"121\":\"v-3df31fd7#thymeleaf概念\",\"122\":\"v-3df31fd7#概念\",\"123\":\"v-3df31fd7#优势\",\"124\":\"v-3df31fd7#开发步骤\",\"125\":\"v-3df31fd7#thymeleaf的基本语法\",\"126\":\"v-3df31fd7#th名称空间\",\"127\":\"v-3df31fd7#表达式语法\",\"128\":\"v-3df31fd7#修改文本\",\"129\":\"v-3df31fd7#修改属性\",\"130\":\"v-3df31fd7#解析url\",\"131\":\"v-3df31fd7#域对象的使用\",\"132\":\"v-3df31fd7#全局域-servletcontext\",\"133\":\"v-3df31fd7#请求域-request-setattribute\",\"134\":\"v-3df31fd7#会话-session\",\"135\":\"v-3df31fd7#请求参数的使用\",\"136\":\"v-3df31fd7#获取一个请求参数\",\"137\":\"v-3df31fd7#获取多个请求参数\",\"138\":\"v-3df31fd7#访问servlet并附带请求参数\",\"139\":\"v-3df31fd7#thymeleaf的内置对象\",\"140\":\"v-3df31fd7#基本内置对象\",\"141\":\"v-3df31fd7#公共内置对象\",\"142\":\"v-3df31fd7#ognl语法\",\"143\":\"v-3df31fd7#分支与迭代\",\"144\":\"v-3df31fd7#分支\",\"145\":\"v-3df31fd7#if和unles\",\"146\":\"v-3df31fd7#switch\",\"147\":\"v-3df31fd7#迭代\",\"148\":\"v-3df31fd7#包含其他页面模板\",\"149\":\"v-3df31fd7#创建模板\",\"150\":\"v-3df31fd7#使用模板\",\"151\":\"v-3401109d\",\"152\":\"v-564802c8\",\"153\":\"v-564802c8#了解http协议\",\"154\":\"v-564802c8#什么是http协议\",\"155\":\"v-564802c8#http协议特点\",\"156\":\"v-564802c8#支持客户-服务器模式\",\"157\":\"v-564802c8#简单快速\",\"158\":\"v-564802c8#灵活\",\"159\":\"v-564802c8#无连接\",\"160\":\"v-564802c8#单向性\",\"161\":\"v-564802c8#无状态\",\"162\":\"v-564802c8#http协议发展和版本\",\"163\":\"v-564802c8#http1-0\",\"164\":\"v-564802c8#http1-1\",\"165\":\"v-564802c8#http2-0\",\"166\":\"v-564802c8#长连接\",\"167\":\"v-564802c8#多路复用-multiplexing\",\"168\":\"v-564802c8#首部压缩-header-compression\",\"169\":\"v-564802c8#服务端推送-server-push\",\"170\":\"v-564802c8#更安全\",\"171\":\"v-564802c8#http请求\",\"172\":\"v-564802c8#了解http请求\",\"173\":\"v-564802c8#打开网页的基本流程\",\"174\":\"v-564802c8#request-消息结构\",\"175\":\"v-564802c8#请求的主要组成部分\",\"176\":\"v-564802c8#请求行-request-line\",\"177\":\"v-564802c8#请求头-request-headers\",\"178\":\"v-564802c8#请求体-request-body\",\"179\":\"v-564802c8#http请求方式\",\"180\":\"v-564802c8#get\",\"181\":\"v-564802c8#post\",\"182\":\"v-564802c8#head\",\"183\":\"v-564802c8#put\",\"184\":\"v-564802c8#delete\",\"185\":\"v-564802c8#trace\",\"186\":\"v-564802c8#options\",\"187\":\"v-564802c8#connect\",\"188\":\"v-564802c8#get和post的区别-面试常问\",\"189\":\"v-564802c8#http响应\",\"190\":\"v-564802c8#响应行\",\"191\":\"v-564802c8#http状态码分类\",\"192\":\"v-564802c8#常见状态码及含义\",\"193\":\"v-564802c8#状态码明细\",\"194\":\"v-564802c8#_1xx\",\"195\":\"v-564802c8#_2xx\",\"196\":\"v-564802c8#_3xx\",\"197\":\"v-564802c8#_4xx\",\"198\":\"v-564802c8#_5xx\",\"199\":\"v-564802c8#响应头\",\"200\":\"v-564802c8#date\",\"201\":\"v-564802c8#server\",\"202\":\"v-564802c8#vary\",\"203\":\"v-564802c8#content-encoding\",\"204\":\"v-564802c8#content-length\",\"205\":\"v-564802c8#content-type\",\"206\":\"v-564802c8#什么是mime\",\"207\":\"v-564802c8#mime作用\",\"208\":\"v-564802c8#mime类型\",\"209\":\"v-564802c8#响应体\",\"210\":\"v-27d8c8cf\",\"211\":\"v-8715002c\",\"212\":\"v-57642456\",\"213\":\"v-aa580190\",\"214\":\"v-6351e903\",\"215\":\"v-00fbe6e8\",\"216\":\"v-65d2b7de\",\"217\":\"v-7d3d7dfe\",\"218\":\"v-19457e23\",\"219\":\"v-19457e23#常用方法\",\"220\":\"v-19457e23#集合遍历\",\"221\":\"v-f85ae938\",\"222\":\"v-f85ae938#什么是算法和数据结构\",\"223\":\"v-f85ae938#算法\",\"224\":\"v-f85ae938#数据结构\",\"225\":\"v-f85ae938#分类\",\"226\":\"v-f85ae938#紧密结构-顺序结构-与-跳转结构-链式结构\",\"227\":\"v-f85ae938#逻辑结构和物理结构\",\"228\":\"v-f85ae938#集合的引入\",\"229\":\"v-f85ae938#集合结构图\",\"230\":\"v-f85ae938#应用场景\",\"231\":\"v-35f7e5a2\",\"232\":\"v-35f7e5a2#前言\",\"233\":\"v-35f7e5a2#什么是泛型\",\"234\":\"v-35f7e5a2#为什么用泛型\",\"235\":\"v-35f7e5a2#使用泛型的好处\",\"236\":\"v-35f7e5a2#语法\",\"237\":\"v-35f7e5a2#泛型类、泛型接口\",\"238\":\"v-35f7e5a2#格式\",\"239\":\"v-35f7e5a2#继承情况\",\"240\":\"v-35f7e5a2#细节\",\"241\":\"v-35f7e5a2#泛型方法\",\"242\":\"v-35f7e5a2#泛型参数的继承关系\",\"243\":\"v-35f7e5a2#通配符\",\"244\":\"v-35f7e5a2#格式-1\",\"245\":\"v-35f7e5a2#细节-1\",\"246\":\"v-35f7e5a2#泛型受限\",\"247\":\"v-35f7e5a2#上限-extends-classs\",\"248\":\"v-35f7e5a2#下限-super-classs\",\"249\":\"v-75cb6ca1\",\"250\":\"v-75cb6ca1#arraylist实现类\",\"251\":\"v-75cb6ca1#常用方法\",\"252\":\"v-75cb6ca1#内存结构原理\",\"253\":\"v-75cb6ca1#jdk-1-7\",\"254\":\"v-75cb6ca1#jdk-1-8\",\"255\":\"v-75cb6ca1#jdk1-7与jdk1-8的区别\",\"256\":\"v-75cb6ca1#vector实现类\",\"257\":\"v-75cb6ca1#底层代码逻辑\",\"258\":\"v-75cb6ca1#与arraylist的区别\",\"259\":\"v-75cb6ca1#linedlist-实现类\",\"260\":\"v-75cb6ca1#常用方法-1\",\"261\":\"v-75cb6ca1#底层原理\",\"262\":\"v-75cb6ca1#模拟linedlist代码\",\"263\":\"v-75cb6ca1#linedlist底层代码\",\"264\":\"v-75cb6ca1#iterator-与listiterator-迭代器\",\"265\":\"v-75cb6ca1#iterator-迭代器\",\"266\":\"v-75cb6ca1#listiterator-迭代器\",\"267\":\"v-75cb6ca1#iterator-与iterator以及iterable的关系\",\"268\":\"v-75cb6ca1#关系图\",\"269\":\"v-75cb6ca1#hasnext-next-的具体实现\",\"270\":\"v-75cb6ca1#增强for循环-底层也是通过迭代器实现的\",\"271\":\"v-76384c24\",\"272\":\"v-76384c24#基本类型的比较\",\"273\":\"v-76384c24#自定义引用类型的比较【核心】\",\"274\":\"v-76384c24#内部比较器\",\"275\":\"v-76384c24#外部比较器【推荐】\",\"276\":\"v-6ebd213e\",\"277\":\"v-6ebd213e#hashset\",\"278\":\"v-6ebd213e#常用方法\",\"279\":\"v-6ebd213e#底层原理\",\"280\":\"v-6ebd213e#扩容及树化机制\",\"281\":\"v-6ebd213e#重写equals-与-hashcode\",\"282\":\"v-6ebd213e#linkedhashset\",\"283\":\"v-6ebd213e#常用方法-1\",\"284\":\"v-6ebd213e#threeset\",\"285\":\"v-6ebd213e#代码实践\",\"286\":\"v-6ebd213e#包装类\",\"287\":\"v-6ebd213e#自定义引用类型\",\"288\":\"v-6ebd213e#底层源码\",\"289\":\"v-d035cee8\",\"290\":\"v-d035cee8#hashmap\",\"291\":\"v-d035cee8#遍历方法\",\"292\":\"v-d035cee8#常用方法\",\"293\":\"v-d035cee8#底层原理\",\"294\":\"v-d035cee8#jdk1-7\",\"295\":\"v-d035cee8#jdk1-8\",\"296\":\"v-d035cee8#有意思的面试题\",\"297\":\"v-d035cee8#linkedhashmap\",\"298\":\"v-d035cee8#hashtable\",\"299\":\"v-d035cee8#treemap\",\"300\":\"v-312d77c6\",\"301\":\"v-26bac0dc\",\"302\":\"v-26bac0dc#前言\",\"303\":\"v-26bac0dc#stack\",\"304\":\"v-42ba8948\",\"305\":\"v-42ba8948#测试线程的不安全性\",\"306\":\"v-42ba8948#修改为线程安全的\",\"307\":\"v-42ba8948#底层源码\",\"308\":\"v-255ccae5\",\"309\":\"v-255ccae5#测试代码\",\"310\":\"v-255ccae5#底层逻辑\",\"311\":\"v-255ccae5#经典面试题\",\"312\":\"v-5d69c584\",\"313\":\"v-5d69c584#概念\",\"314\":\"v-5d69c584#copyonwritearraylist\",\"315\":\"v-5d69c584#使用案例\",\"316\":\"v-5d69c584#相关源码\",\"317\":\"v-5d69c584#copyonwritearrayset\",\"318\":\"v-5d69c584#使用案例-1\",\"319\":\"v-5d69c584#相关源码-1\",\"320\":\"v-ffc770fa\",\"321\":\"v-ffc770fa#引入\",\"322\":\"v-ffc770fa#阻塞队列-blockingqueue\",\"323\":\"v-ffc770fa#阻塞的概念\",\"324\":\"v-ffc770fa#常用的api\",\"325\":\"v-ffc770fa#子类-arrayblockingqueue\",\"326\":\"v-ffc770fa#概念\",\"327\":\"v-ffc770fa#代码\",\"328\":\"v-ffc770fa#源码\",\"329\":\"v-ffc770fa#基本原理\",\"330\":\"v-ffc770fa#核心元素\",\"331\":\"v-ffc770fa#初始化\",\"332\":\"v-ffc770fa#存元素\",\"333\":\"v-ffc770fa#取元素\",\"334\":\"v-ffc770fa#相关概念\",\"335\":\"v-ffc770fa#子类-linkedblockingqueue\",\"336\":\"v-ffc770fa#概念-1\",\"337\":\"v-ffc770fa#代码-1\",\"338\":\"v-ffc770fa#源码-1\",\"339\":\"v-ffc770fa#基本原理-1\",\"340\":\"v-ffc770fa#初始化-1\",\"341\":\"v-ffc770fa#放元素的基本原理\",\"342\":\"v-ffc770fa#取元素的基本原理\",\"343\":\"v-ffc770fa#相关概念-1\",\"344\":\"v-ffc770fa#阻塞原理实现\",\"345\":\"v-ffc770fa#子类-synchronousqueue\",\"346\":\"v-ffc770fa#概念-2\",\"347\":\"v-ffc770fa#代码-2\",\"348\":\"v-ffc770fa#非阻塞\",\"349\":\"v-ffc770fa#阻塞\",\"350\":\"v-ffc770fa#子类-priorityblockingqueue\",\"351\":\"v-ffc770fa#概念-3\",\"352\":\"v-ffc770fa#代码-3\",\"353\":\"v-ffc770fa#子类-delayqueue\",\"354\":\"v-ffc770fa#简介\",\"355\":\"v-ffc770fa#应用场景\",\"356\":\"v-ffc770fa#测试案例\",\"357\":\"v-ffc770fa#双端队列deque\",\"358\":\"v-4b926666\",\"359\":\"v-4b926666#什么是包装类\",\"360\":\"v-4b926666#有哪些包装类\",\"361\":\"v-4b926666#装箱与拆箱\",\"362\":\"v-4b926666#代码演示\",\"363\":\"v-4b926666#底层原理\",\"364\":\"v-4b926666#详解integer\",\"365\":\"v-6338d6ba\",\"366\":\"v-6338d6ba#特性\",\"367\":\"v-6338d6ba#常用方法\",\"368\":\"v-6338d6ba#静态导入\",\"369\":\"v-8ddaf6d0\",\"370\":\"v-8ddaf6d0#java-util-date-与-java-sql-date\",\"371\":\"v-8ddaf6d0#java-util-dat-相关api\",\"372\":\"v-8ddaf6d0#java-sql-date-相关api\",\"373\":\"v-8ddaf6d0#类型互转\",\"374\":\"v-8ddaf6d0#simpledateformat\",\"375\":\"v-8ddaf6d0#calendar\",\"376\":\"v-8ddaf6d0#小练习\",\"377\":\"v-8ddaf6d0#jdk1-8中的日期api\",\"378\":\"v-8ddaf6d0#为什么会有第三代日期api\",\"379\":\"v-8ddaf6d0#localdate-localtime-localdatetime\",\"380\":\"v-8ddaf6d0#datetimeformatter\",\"381\":\"v-3b97fa10\",\"382\":\"v-3b97fa10#常用方法\",\"383\":\"v-3f120742\",\"384\":\"v-3f120742#概念\",\"385\":\"v-3f120742#文件的操作\",\"386\":\"v-3f120742#常见api\",\"387\":\"v-3f120742#代码案例\",\"388\":\"v-3f120742#目录的操作\",\"389\":\"v-3f120742#常见api-1\",\"390\":\"v-3f120742#代码案例-1\",\"391\":\"v-0b574a14\",\"392\":\"v-0b574a14#stringbuilder的底层\",\"393\":\"v-0b574a14#理解什么是可变与不可变\",\"394\":\"v-0b574a14#常用方法\",\"395\":\"v-0b574a14#stringbuilder常用方法\",\"396\":\"v-0b574a14#stringbuffer常用方法\",\"397\":\"v-0b574a14#stringbuilder与stringbuffer的区别\",\"398\":\"v-14c6e32c\",\"399\":\"v-14c6e32c#概览\",\"400\":\"v-14c6e32c#概念\",\"401\":\"v-14c6e32c#io流的体系结构\",\"402\":\"v-14c6e32c#字符流\",\"403\":\"v-14c6e32c#filereader\",\"404\":\"v-14c6e32c#api\",\"405\":\"v-14c6e32c#代码\",\"406\":\"v-14c6e32c#filewriter\",\"407\":\"v-14c6e32c#api-1\",\"408\":\"v-14c6e32c#代码-1\",\"409\":\"v-14c6e32c#复制文件\",\"410\":\"v-14c6e32c#字节流\",\"411\":\"v-14c6e32c#fileinputstream\",\"412\":\"v-14c6e32c#fileoutputstream\",\"413\":\"v-14c6e32c#字符缓冲流\",\"414\":\"v-14c6e32c#bufferedreader\",\"415\":\"v-14c6e32c#bufferedwriter\",\"416\":\"v-14c6e32c#字节缓冲流\",\"417\":\"v-14c6e32c#bufferedinputstream\",\"418\":\"v-14c6e32c#bufferedoutputstream\",\"419\":\"v-14c6e32c#字符转换流\",\"420\":\"v-14c6e32c#inputstreamreader\",\"421\":\"v-14c6e32c#outputstreamwriter\",\"422\":\"v-14c6e32c#scanner扫描器\",\"423\":\"v-14c6e32c#字节对象流\",\"424\":\"v-14c6e32c#objectinputstream\",\"425\":\"v-14c6e32c#objectoutputstream\",\"426\":\"v-0b3f9545\",\"427\":\"v-0b3f9545#说明\",\"428\":\"v-0b3f9545#案例\",\"429\":\"v-dbd30d9a\",\"430\":\"v-dbd30d9a#特性\",\"431\":\"v-dbd30d9a#常用方法\",\"432\":\"v-dbd30d9a#内存分析\",\"433\":\"v-dbd30d9a#原理\",\"434\":\"v-dbd30d9a#区别\",\"435\":\"v-676d4832\",\"436\":\"v-676d4832#继承thread类\",\"437\":\"v-676d4832#步骤\",\"438\":\"v-676d4832#一个简单的demo\",\"439\":\"v-676d4832#给线程设置名字\",\"440\":\"v-676d4832#通过对象属性设置\",\"441\":\"v-676d4832#通过构造函数设置\",\"442\":\"v-676d4832#模拟卖票\",\"443\":\"v-676d4832#实现runnable接口\",\"444\":\"v-676d4832#步骤-1\",\"445\":\"v-676d4832#一个简单的demo-1\",\"446\":\"v-676d4832#模拟卖票-1\",\"447\":\"v-676d4832#实现callable接口\",\"448\":\"v-676d4832#优点\",\"449\":\"v-676d4832#步骤-2\",\"450\":\"v-676d4832#一个简单的demo-2\",\"451\":\"v-08771c48\",\"452\":\"v-08771c48#程序、进程、线程\",\"453\":\"v-08771c48#java上的多线程\",\"454\":\"v-4b2046b8\",\"455\":\"v-4de5a7d6\",\"456\":\"v-4de5a7d6#api\",\"457\":\"v-4de5a7d6#优先级\",\"458\":\"v-4de5a7d6#join\",\"459\":\"v-4de5a7d6#sleep\",\"460\":\"v-4de5a7d6#setdaemon\",\"461\":\"v-4de5a7d6#stop\",\"462\":\"v-ea917d98\",\"463\":\"v-ea917d98#同步代码块\",\"464\":\"v-ea917d98#语法\",\"465\":\"v-ea917d98#代码\",\"466\":\"v-ea917d98#关于同步监视器\",\"467\":\"v-ea917d98#执行过程\",\"468\":\"v-ea917d98#注意\",\"469\":\"v-ea917d98#同步方法\",\"470\":\"v-ea917d98#语法-1\",\"471\":\"v-ea917d98#代码-1\",\"472\":\"v-ea917d98#注意-1\",\"473\":\"v-ea917d98#lock锁\",\"474\":\"v-ea917d98#相关概念\",\"475\":\"v-ea917d98#condition等待池\",\"476\":\"v-ea917d98#语法-2\",\"477\":\"v-ea917d98#api\",\"478\":\"v-ea917d98#lock锁的api\",\"479\":\"v-ea917d98#condition-等待池的api\",\"480\":\"v-ea917d98#代码-2\",\"481\":\"v-ea917d98#lock和synchronized的区别\",\"482\":\"v-ea917d98#线程同步的优缺点\",\"483\":\"v-ea917d98#优点\",\"484\":\"v-ea917d98#缺点\",\"485\":\"v-b6e1b25a\",\"486\":\"v-b6e1b25a#需求\",\"487\":\"v-b6e1b25a#注意点\",\"488\":\"v-b6e1b25a#案例\",\"489\":\"v-b6e1b25a#使用synchronized的解决方案\",\"490\":\"v-b6e1b25a#使用lock的解决方案\",\"491\":\"v-5557357c\",\"492\":\"v-5557357c#基本概念\",\"493\":\"v-5557357c#ip\",\"494\":\"v-5557357c#port\",\"495\":\"v-5557357c#通讯协议\",\"496\":\"v-5557357c#tcp\",\"497\":\"v-5557357c#建立连接-三次握手\",\"498\":\"v-5557357c#断开链接-四次挥手\",\"499\":\"v-5557357c#udp\",\"500\":\"v-5557357c#地址api\",\"501\":\"v-5557357c#inetaddress\",\"502\":\"v-5557357c#api\",\"503\":\"v-5557357c#代码\",\"504\":\"v-5557357c#inetsocketaddress\",\"505\":\"v-5557357c#api-1\",\"506\":\"v-5557357c#代码-1\",\"507\":\"v-ca09da4a\",\"508\":\"v-ca09da4a#tcp-通讯\",\"509\":\"v-ca09da4a#单向通讯\",\"510\":\"v-ca09da4a#双向通讯\",\"511\":\"v-ca09da4a#对象传输通讯\",\"512\":\"v-ca09da4a#异常处理\",\"513\":\"v-ca09da4a#多线程\",\"514\":\"v-ca09da4a#udp-通讯\",\"515\":\"v-ca09da4a#单向通讯-1\",\"516\":\"v-ca09da4a#双向通讯-1\",\"517\":\"v-ca09da4a#异常处理-1\",\"518\":\"v-ca09da4a#持久通讯\",\"519\":\"v-6d3c3f49\",\"520\":\"v-6d3c3f49#概念\",\"521\":\"v-6d3c3f49#使用junit单元测试\",\"522\":\"v-6d3c3f49#开发步骤\",\"523\":\"v-6d3c3f49#完整代码\",\"524\":\"v-6d3c3f49#before-after\",\"525\":\"v-6d3c3f49#相关代码\",\"526\":\"v-3965f8c2\",\"527\":\"v-3965f8c2#概念\",\"528\":\"v-3965f8c2#测试分类\",\"529\":\"v-3965f8c2#黑盒测试\",\"530\":\"v-3965f8c2#白盒测试\",\"531\":\"v-3f9424e6\",\"532\":\"v-3f9424e6#概念\",\"533\":\"v-3f9424e6#什么是注解\",\"534\":\"v-3f9424e6#注解的重要性\",\"535\":\"v-3f9424e6#junit-注解\",\"536\":\"v-3f9424e6#文档注解\",\"537\":\"v-3f9424e6#常见的文档注解\",\"538\":\"v-3f9424e6#代码案例\",\"539\":\"v-3f9424e6#idea的javadoc工具的使用\",\"540\":\"v-3f9424e6#jdk内置注解\",\"541\":\"v-3f9424e6#override\",\"542\":\"v-3f9424e6#deprecated\",\"543\":\"v-3f9424e6#suppresswarnings\",\"544\":\"v-3f9424e6#简化配置文件\",\"545\":\"v-3f9424e6#在servlet3-0之前的配置\",\"546\":\"v-3f9424e6#servlet3-0之后使用注解\",\"547\":\"v-3f9424e6#自定义注解\",\"548\":\"v-3f9424e6#创建自定义注解\",\"549\":\"v-3f9424e6#可以省略的元素\",\"550\":\"v-3f9424e6#省略value\",\"551\":\"v-3f9424e6#设略赋值\",\"552\":\"v-3f9424e6#元注解\",\"553\":\"v-3f9424e6#retention\",\"554\":\"v-3f9424e6#target\",\"555\":\"v-3f9424e6#documented-很少用\",\"556\":\"v-3f9424e6#inherited-极少用\",\"557\":\"v-6c4b5fa5\",\"558\":\"v-6c4b5fa5#概念\",\"559\":\"v-6c4b5fa5#枚举的使用\",\"560\":\"v-6c4b5fa5#jdk1-5之前\",\"561\":\"v-6c4b5fa5#jdk1-5之后\",\"562\":\"v-6c4b5fa5#常用方法\",\"563\":\"v-6c4b5fa5#枚举类实现接口\",\"564\":\"v-6c4b5fa5#实际应用\",\"565\":\"v-1ca4bbc2\",\"566\":\"v-1ca4bbc2#为什么用反射\",\"567\":\"v-1ca4bbc2#优缺点\",\"568\":\"v-1ca4bbc2#案例\",\"569\":\"v-1ca4bbc2#反射的概念\",\"570\":\"v-1ca4bbc2#概念\",\"571\":\"v-1ca4bbc2#动态语音与静态语音\",\"572\":\"v-1ca4bbc2#动态语言\",\"573\":\"v-1ca4bbc2#静态语言\",\"574\":\"v-1ca4bbc2#获取字节码对象\",\"575\":\"v-1ca4bbc2#api\",\"576\":\"v-1ca4bbc2#准备素材类\",\"577\":\"v-1ca4bbc2#方式一-通过对象获取\",\"578\":\"v-1ca4bbc2#方式二-通过内置-class属性获取\",\"579\":\"v-1ca4bbc2#方式三-通过字节码包名获取-推荐\",\"580\":\"v-1ca4bbc2#方式三-通过类加载器获取\",\"581\":\"v-1ca4bbc2#class类的应用\",\"582\":\"v-3f7acde4\",\"583\":\"v-3f7acde4#构造器\",\"584\":\"v-3f7acde4#api\",\"585\":\"v-3f7acde4#案例\",\"586\":\"v-3f7acde4#属性\",\"587\":\"v-3f7acde4#api-1\",\"588\":\"v-3f7acde4#案例-1\",\"589\":\"v-3f7acde4#方法\",\"590\":\"v-3f7acde4#api-2\",\"591\":\"v-3f7acde4#案例-2\",\"592\":\"v-3f7acde4#接口\",\"593\":\"v-3f7acde4#api-3\",\"594\":\"v-3f7acde4#案例-3\",\"595\":\"v-6dd40e66\",\"596\":\"v-6dd40e66#问题1-创建person的对象-以后用new-person-创建-还是用反射创建\",\"597\":\"v-6dd40e66#问题2-反射是否破坏了面向对象的封装性\",\"598\":\"v-00a3bd4a\",\"599\":\"v-00a3bd4a#运行与调试\",\"600\":\"v-00a3bd4a#项目视图\",\"601\":\"v-00a3bd4a#运行项目\",\"602\":\"v-00a3bd4a#调试项目\",\"603\":\"v-00a3bd4a#快速提醒\",\"604\":\"v-00a3bd4a#警告预览与意图\",\"605\":\"v-00a3bd4a#全局导航\",\"606\":\"v-6677891a\",\"607\":\"v-6677891a#意图操作\",\"608\":\"v-6677891a#搜索操作\",\"609\":\"v-6677891a#随处搜索\",\"610\":\"v-6677891a#基本补全\",\"611\":\"v-18e6915d\",\"612\":\"v-18e6915d#扩展和收缩代码选区\",\"613\":\"v-18e6915d#注释行和代码块\",\"614\":\"v-18e6915d#复制和删除行\",\"615\":\"v-18e6915d#移动代码\",\"616\":\"v-18e6915d#收起-展开\",\"617\":\"v-18e6915d#包围和解包围\",\"618\":\"v-18e6915d#多选\",\"619\":\"v-128e30f8\",\"620\":\"v-128e30f8#基本补全\",\"621\":\"v-128e30f8#类型匹配补全\",\"622\":\"v-128e30f8#后缀补全\",\"623\":\"v-128e30f8#语句补全\",\"624\":\"v-128e30f8#使用tab补全\",\"625\":\"v-72263752\",\"626\":\"v-72263752#重命名\",\"627\":\"v-72263752#提取变量\",\"628\":\"v-72263752#提取方法\",\"629\":\"v-72263752#重构菜单\",\"630\":\"v-72263752#引入形参\",\"631\":\"v-72263752#内联变量\",\"632\":\"v-72263752#引入常量\",\"633\":\"v-4c31cd54\",\"634\":\"v-4c31cd54#还原移除的代码\",\"635\":\"v-4c31cd54#代码格式\",\"636\":\"v-4c31cd54#形参信息\",\"637\":\"v-4c31cd54#快速弹出窗口\",\"638\":\"v-4c31cd54#编辑器编码辅助\",\"639\":\"v-60431a75\",\"640\":\"v-60431a75#随处搜索\",\"641\":\"v-60431a75#查找和替换\",\"642\":\"v-60431a75#文件结构\",\"643\":\"v-60431a75#声明和用法\",\"644\":\"v-60431a75#继承层次结构\",\"645\":\"v-60431a75#最近的文件和位置\",\"646\":\"v-60431a75#上一个-下一个匹配\",\"647\":\"v-65aa47e5\",\"648\":\"v-65aa47e5#第一章-为什么要使用maven\",\"649\":\"v-65aa47e5#第三方jar包添加\",\"650\":\"v-65aa47e5#第三方jar包获取\",\"651\":\"v-65aa47e5#jar包之间的依赖关系\",\"652\":\"v-65aa47e5#jar包之间的冲突\",\"653\":\"v-65aa47e5#将项目拆分成多个工程模块\",\"654\":\"v-65aa47e5#实现项目的分布式部署\",\"655\":\"v-65aa47e5#第二章-maven是什么\",\"656\":\"v-65aa47e5#自动化构建\",\"657\":\"v-65aa47e5#构建的概念\",\"658\":\"v-65aa47e5#_1-纯java代码\",\"659\":\"v-65aa47e5#_2-web工程\",\"660\":\"v-65aa47e5#_3-实际项目\",\"661\":\"v-65aa47e5#构建的环节\",\"662\":\"v-65aa47e5#_1-清理\",\"663\":\"v-65aa47e5#_2-编译\",\"664\":\"v-65aa47e5#_3-测试\",\"665\":\"v-65aa47e5#_4-报告\",\"666\":\"v-65aa47e5#_5-打包\",\"667\":\"v-65aa47e5#_6-安装\",\"668\":\"v-65aa47e5#_7-部署\",\"669\":\"v-137aa76c\",\"670\":\"v-137aa76c#运行\",\"671\":\"v-137aa76c#调试\",\"672\":\"v-4cd2454c\",\"673\":\"v-4cd2454c#第三章-maven的使用\",\"674\":\"v-4cd2454c#_3-1-安装maven核心程序\",\"675\":\"v-4cd2454c#_3-2-maven的本地仓库配置\",\"676\":\"v-4cd2454c#_3-3-在idea中配置maven\",\"677\":\"v-4cd2454c#_3-4-创建maven程序\",\"678\":\"v-4cd2454c#_3-4-1-创建项目\",\"679\":\"v-4cd2454c#_3-4-2-项目结构\",\"680\":\"v-4cd2454c#_3-4-3-配置maven的核心配置文件pom-xml\",\"681\":\"v-4cd2454c#_3-4-4-maven的命令\",\"682\":\"v-20a51f19\",\"683\":\"v-20a51f19#_4-1-pom\",\"684\":\"v-20a51f19#_4-2-约定目录结构\",\"685\":\"v-20a51f19#_4-3-坐标\",\"686\":\"v-20a51f19#_4-4-依赖管理\",\"687\":\"v-20a51f19#_4-4-1-概念\",\"688\":\"v-20a51f19#_4-4-2-依赖范围\",\"689\":\"v-20a51f19#_4-4-2-1-compile-默认\",\"690\":\"v-20a51f19#_4-4-2-2-test\",\"691\":\"v-20a51f19#_4-4-2-3-provided\",\"692\":\"v-20a51f19#_4-4-2-4-其他runtime、import、system等\",\"693\":\"v-20a51f19#_4-4-3-依赖的传递性\",\"694\":\"v-20a51f19#_4-4-5-jar包冲突\",\"695\":\"v-20a51f19#路径最短则优先\",\"696\":\"v-20a51f19#路径相同时先声明的优先\",\"697\":\"v-20a51f19#_4-4-6-依赖的排除\",\"698\":\"v-20a51f19#_4-5-版本统一管理\",\"699\":\"v-20a51f19#_4-5-1-在pom-xml中创建自定义标签\",\"700\":\"v-20a51f19#_4-5-2-在指定位置使用标签\",\"701\":\"v-20a51f19#_4-6-maven的安全性保障机制\",\"702\":\"v-20a51f19#_4-6-1-sha1算法\",\"703\":\"v-20a51f19#_4-6-2-哈希碰撞\",\"704\":\"v-20a51f19#_4-6-仓库\",\"705\":\"v-20a51f19#_4-6-1-仓库分类\",\"706\":\"v-20a51f19#_4-6-2-仓库中的文件\",\"707\":\"v-20a51f19#_4-7-生命周期\",\"708\":\"v-20a51f19#_4-7-1-clean-lifecycle\",\"709\":\"v-20a51f19#_4-7-2-default-lifecycle\",\"710\":\"v-20a51f19#_4-7-3-site-lifecycle\",\"711\":\"v-20a51f19#_4-8-插件和目标\",\"712\":\"v-2b72964a\",\"713\":\"v-2b72964a#第五章-继承\",\"714\":\"v-2b72964a#方式一-dependencymanagement-标签\",\"715\":\"v-2b72964a#方式二-父类不使用-dependencymanagement-标签\",\"716\":\"v-2b72964a#方式三-在idea中的父module中创建子module\",\"717\":\"v-2b72964a#第六章-聚合\",\"718\":\"v-2b72964a#如何配置聚合\",\"719\":\"v-5a60211f\",\"720\":\"v-5a60211f#概述\",\"721\":\"v-5a60211f#介绍\",\"722\":\"v-5a60211f#git工作机制\",\"723\":\"v-5a60211f#版本控制工具\",\"724\":\"v-5a60211f#安装、环境搭建\",\"725\":\"v-5a60211f#安装\",\"726\":\"v-5a60211f#设置全局用户签名\",\"727\":\"v-5a60211f#相关概念\",\"728\":\"v-5a60211f#理解工作区、版本库、暂存区概念\",\"729\":\"v-5a60211f#提交git版本库分两步执行\",\"730\":\"v-c8dba5bc\",\"731\":\"v-c8dba5bc#常用命令预览\",\"732\":\"v-c8dba5bc#初始化版本库\",\"733\":\"v-c8dba5bc#新建提交状态\",\"734\":\"v-c8dba5bc#状态\",\"735\":\"v-c8dba5bc#暂存区\",\"736\":\"v-c8dba5bc#添加到暂存区\",\"737\":\"v-c8dba5bc#撤销暂存区文件\",\"738\":\"v-c8dba5bc#本地库\",\"739\":\"v-c8dba5bc#查看日志\",\"740\":\"v-c8dba5bc#回退-穿梭-撤销\",\"741\":\"v-c8dba5bc#回退\",\"742\":\"v-c8dba5bc#穿梭\",\"743\":\"v-c8dba5bc#撤销\",\"744\":\"v-c8dba5bc#分支\",\"745\":\"v-c8dba5bc#实际开发流程\",\"746\":\"v-c8dba5bc#分支概念\",\"747\":\"v-c8dba5bc#分支的好处\",\"748\":\"v-c8dba5bc#分支操作\",\"749\":\"v-c8dba5bc#实战-版本冲突\",\"750\":\"v-c8dba5bc#冲突产生的表现\",\"751\":\"v-c8dba5bc#冲突产生的原因\",\"752\":\"v-c8dba5bc#冲突的解决\",\"753\":\"v-c8dba5bc#避免冲突\",\"754\":\"v-143399b9\",\"755\":\"v-143399b9#团队协作的常用流程\",\"756\":\"v-143399b9#fork-跨团队协作\",\"757\":\"v-143399b9#概念\",\"758\":\"v-143399b9#演示fork\",\"759\":\"v-143399b9#背景\",\"760\":\"v-143399b9#步骤\",\"761\":\"v-143399b9#解决重复输入密码问题\",\"762\":\"v-143399b9#两种模式-https-vs-ssh\",\"763\":\"v-143399b9#如何配置ssh-key\",\"764\":\"v-143399b9#注意问题\",\"765\":\"v-143399b9#配置git忽略文件\",\"766\":\"v-143399b9#哪些文件要忽略\",\"767\":\"v-143399b9#eclipse特定文件\",\"768\":\"v-143399b9#idea特定文件\",\"769\":\"v-143399b9#maven工程的target目录\",\"770\":\"v-143399b9#为什么要忽略它们\",\"771\":\"v-143399b9#怎么忽略\",\"772\":\"v-143399b9#创建忽略规则文件-git-ignore\",\"773\":\"v-143399b9#在-gitconfig文件中引用忽略规则文件\",\"774\":\"v-cac80074\",\"775\":\"v-cac80074#idea集成git\",\"776\":\"v-cac80074#配置git程序\",\"777\":\"v-cac80074#初始化本地库\",\"778\":\"v-cac80074#添加到暂存区\",\"779\":\"v-cac80074#提交到本地库\",\"780\":\"v-cac80074#创建分支\",\"781\":\"v-cac80074#切换分支\",\"782\":\"v-cac80074#合并分支\",\"783\":\"v-cac80074#解决冲突\",\"784\":\"v-cac80074#冲突的产生\",\"785\":\"v-cac80074#合并分支-1\",\"786\":\"v-cac80074#看到冲突提示\",\"787\":\"v-cac80074#冲突的表现\",\"788\":\"v-cac80074#点击resolve\",\"789\":\"v-cac80074#点击merge\",\"790\":\"v-cac80074#在idea中连接github\",\"791\":\"v-cac80074#保存github账号\",\"792\":\"v-cac80074#分享工程到github\",\"793\":\"v-cac80074#clone\",\"794\":\"v-cac80074#push\",\"795\":\"v-cac80074#pull\",\"796\":\"v-65caf0e2\",\"797\":\"v-65caf0e2#git工作流\",\"798\":\"v-65caf0e2#分支案例\",\"799\":\"v-65caf0e2#简单的分支\",\"800\":\"v-65caf0e2#复杂分支\",\"801\":\"v-65caf0e2#分支种类\",\"802\":\"v-65caf0e2#主干分支-master\",\"803\":\"v-65caf0e2#开发分支-develop\",\"804\":\"v-65caf0e2#bug修理分支-hotfix\",\"805\":\"v-65caf0e2#发布版本分支-release\",\"806\":\"v-65caf0e2#功能分支-feature\",\"807\":\"v-65caf0e2#gitlab私服\",\"808\":\"v-65caf0e2#官网地址\",\"809\":\"v-65caf0e2#提前下载所需rpm\",\"810\":\"v-65caf0e2#安装步骤\",\"811\":\"v-65caf0e2#gitlab服务操作\",\"812\":\"v-65caf0e2#浏览器访问\",\"813\":\"v-1f2cda0e\",\"814\":\"v-1f2cda0e#jdk1-8的增强\",\"815\":\"v-1f2cda0e#默认方法\",\"816\":\"v-1f2cda0e#为什么要增加默认方法\",\"817\":\"v-1f2cda0e#语法格式\",\"818\":\"v-1f2cda0e#使用\",\"819\":\"v-1f2cda0e#静态方法\",\"820\":\"v-1f2cda0e#语法格式-1\",\"821\":\"v-1f2cda0e#使用-1\",\"822\":\"v-1f2cda0e#两者区别\",\"823\":\"v-f8f8bcd2\",\"824\":\"v-f8f8bcd2#为什么要用方法引用\",\"825\":\"v-f8f8bcd2#lambda表达式的冗余\",\"826\":\"v-f8f8bcd2#解决方案\",\"827\":\"v-f8f8bcd2#语法格式\",\"828\":\"v-f8f8bcd2#对象-方法名\",\"829\":\"v-f8f8bcd2#类名-静态方法\",\"830\":\"v-f8f8bcd2#类名-实例普通方法\",\"831\":\"v-f8f8bcd2#类名-构造器\",\"832\":\"v-f8f8bcd2#数组-构造器\",\"833\":\"v-f8f8bcd2#小结\",\"834\":\"v-0c5c465a\",\"835\":\"v-0c5c465a#函数式接口的由来\",\"836\":\"v-0c5c465a#supplier接口\",\"837\":\"v-0c5c465a#get\",\"838\":\"v-0c5c465a#consumer接口\",\"839\":\"v-0c5c465a#accept方法\",\"840\":\"v-0c5c465a#andthen方法\",\"841\":\"v-0c5c465a#function接口\",\"842\":\"v-0c5c465a#apply方法\",\"843\":\"v-0c5c465a#andthen方法-1\",\"844\":\"v-0c5c465a#compose方法\",\"845\":\"v-0c5c465a#identity方法\",\"846\":\"v-0c5c465a#predicate接口\",\"847\":\"v-0c5c465a#test\",\"848\":\"v-0c5c465a#and-or-negate\",\"849\":\"v-4441707a\",\"850\":\"v-4441707a#之前对于null的处理\",\"851\":\"v-4441707a#optional类\",\"852\":\"v-4441707a#optional类的使用\",\"853\":\"v-4441707a#optional类的常用方法\",\"854\":\"v-4441707a#optional类的高级应用\",\"855\":\"v-0a974680\",\"856\":\"v-0a974680#集合处理数据的弊端\",\"857\":\"v-0a974680#stream流式编程思想\",\"858\":\"v-0a974680#stream流的获取方式\",\"859\":\"v-0a974680#根据collection获取\",\"860\":\"v-0a974680#根据stream的of方法获取\",\"861\":\"v-0a974680#stream流中的常用方法\",\"862\":\"v-0a974680#foreach\",\"863\":\"v-0a974680#count\",\"864\":\"v-0a974680#filter\",\"865\":\"v-0a974680#limit\",\"866\":\"v-0a974680#skip\",\"867\":\"v-0a974680#map\",\"868\":\"v-0a974680#sorted\",\"869\":\"v-0a974680#distinct\",\"870\":\"v-0a974680#match\",\"871\":\"v-0a974680#find\",\"872\":\"v-0a974680#max和min\",\"873\":\"v-0a974680#reduce\",\"874\":\"v-0a974680#maptoint-maptodouble-maptolong\",\"875\":\"v-0a974680#concat\",\"876\":\"v-0a974680#综合案例\",\"877\":\"v-0a974680#stream结果收集\",\"878\":\"v-0a974680#结果收集到集合\",\"879\":\"v-0a974680#结果收集到数组\",\"880\":\"v-0a974680#流中的数据进行聚合计算\",\"881\":\"v-0a974680#流中的数据进行分组操作\",\"882\":\"v-0a974680#流中的数据进行分区操作\",\"883\":\"v-0a974680#流中的数据进行拼接操作\",\"884\":\"v-0a974680#并行的stream流\",\"885\":\"v-0a974680#串行的stream流\",\"886\":\"v-0a974680#获取并行的stream流\",\"887\":\"v-0a974680#并行流的操作\",\"888\":\"v-0a974680#并行流和串行流的对比\",\"889\":\"v-0a974680#并行流的线程安全问题\",\"890\":\"v-2dc15cd8\",\"891\":\"v-2dc15cd8#旧版日期时间的问题\",\"892\":\"v-2dc15cd8#新日期时间api\",\"893\":\"v-2dc15cd8#日期时间的常见操作\",\"894\":\"v-2dc15cd8#日期时间的修改和比较\",\"895\":\"v-2dc15cd8#修改\",\"896\":\"v-2dc15cd8#比较\",\"897\":\"v-2dc15cd8#格式化和解析操作\",\"898\":\"v-2dc15cd8#instant类\",\"899\":\"v-2dc15cd8#计算日期时间的差\",\"900\":\"v-2dc15cd8#时间校正器\",\"901\":\"v-2dc15cd8#日期时间的时区\",\"902\":\"v-2dc15cd8#jdk新的日期和时间api的优势\",\"903\":\"v-53ca487f\",\"904\":\"v-53ca487f#重复注解\",\"905\":\"v-53ca487f#类型注解\",\"906\":\"v-6e0dc614\",\"907\":\"v-6e0dc614#数据库基本概念\",\"908\":\"v-6e0dc614#数据\",\"909\":\"v-6e0dc614#数据库\",\"910\":\"v-6e0dc614#数据库管理系统\",\"911\":\"v-6e0dc614#数据库应用程序\",\"912\":\"v-6e0dc614#数据库管理员\",\"913\":\"v-6e0dc614#最终用户\",\"914\":\"v-6e0dc614#数据库系统\",\"915\":\"v-6e0dc614#数据库类型\",\"916\":\"v-6e0dc614#常见的数据库类型\",\"917\":\"v-6e0dc614#关系型数据库\",\"918\":\"v-6e0dc614#非关系型数据库nosql\",\"919\":\"v-6e0dc614#关系型数据库和非关系数据库\",\"920\":\"v-6e0dc614#mysql介绍\",\"921\":\"v-6e0dc614#mysql安装\",\"922\":\"v-6e0dc614#安装步骤\",\"923\":\"v-6e0dc614#检测安装是否成功\",\"924\":\"v-6e0dc614#mysql访问\",\"925\":\"v-6e0dc614#登录\",\"926\":\"v-6e0dc614#访问数据库\",\"927\":\"v-6e0dc614#退出数据库\",\"928\":\"v-6e0dc614#mysql卸载\",\"929\":\"v-63eb21c9\",\"930\":\"v-63eb21c9#概述\",\"931\":\"v-63eb21c9#sql语言分类\",\"932\":\"v-63eb21c9#数据查询语言-data-query-language-dql\",\"933\":\"v-63eb21c9#数据操作语言-data-manipulation-language-dml\",\"934\":\"v-63eb21c9#数据定义语言-data-definition-language-ddl\",\"935\":\"v-63eb21c9#数据控制语言-data-control-language-dcl\",\"936\":\"v-63eb21c9#事务控制语言-transaction-control-language-tcl\",\"937\":\"v-63eb21c9#初始化表案例\",\"938\":\"v-63eb21c9#数据库表列类型\",\"939\":\"v-63eb21c9#整数类型\",\"940\":\"v-63eb21c9#浮点数类型\",\"941\":\"v-63eb21c9#字符串类型\",\"942\":\"v-63eb21c9#日期和时间类型\",\"943\":\"v-50a0f7e8\",\"944\":\"v-50a0f7e8#ddl-数据库定义语言\",\"945\":\"v-50a0f7e8#操作数据库\",\"946\":\"v-50a0f7e8#创建数据库\",\"947\":\"v-50a0f7e8#查询所有数据库\",\"948\":\"v-50a0f7e8#查询某个数据库的结构\",\"949\":\"v-50a0f7e8#查询当前正在使用哪个数据库\",\"950\":\"v-50a0f7e8#修改数据库的字符集\",\"951\":\"v-50a0f7e8#选中某个数据库\",\"952\":\"v-50a0f7e8#删除数据库\",\"953\":\"v-50a0f7e8#表的操作\",\"954\":\"v-50a0f7e8#创建表\",\"955\":\"v-50a0f7e8#一般创建\",\"956\":\"v-50a0f7e8#快速创建\",\"957\":\"v-50a0f7e8#修改表\",\"958\":\"v-50a0f7e8#添加一个字段\",\"959\":\"v-50a0f7e8#修改表的字段类型和约束\",\"960\":\"v-50a0f7e8#修改列的名字\",\"961\":\"v-50a0f7e8#删除字段\",\"962\":\"v-50a0f7e8#修改表名\",\"963\":\"v-50a0f7e8#查询所有表\",\"964\":\"v-50a0f7e8#查询某张表的结构\",\"965\":\"v-50a0f7e8#查看建表语句\",\"966\":\"v-50a0f7e8#删除表\",\"967\":\"v-50a0f7e8#清空表\",\"968\":\"v-50a0f7e8#dml\",\"969\":\"v-50a0f7e8#插入数据\",\"970\":\"v-50a0f7e8#指定插入的列\",\"971\":\"v-50a0f7e8#不指定插入的列\",\"972\":\"v-50a0f7e8#例子\",\"973\":\"v-50a0f7e8#修改数据\",\"974\":\"v-50a0f7e8#删除数据-delect-truncate\",\"975\":\"v-50a0f7e8#delect\",\"976\":\"v-50a0f7e8#truncate\",\"977\":\"v-50a0f7e8#物理删除和逻辑和删除的区别\",\"978\":\"v-50a0f7e8#物理删除\",\"979\":\"v-50a0f7e8#逻辑删除\",\"980\":\"v-4ecca60e\",\"981\":\"v-4ecca60e#概述\",\"982\":\"v-4ecca60e#查看约束\",\"983\":\"v-4ecca60e#约束的命名规则\",\"984\":\"v-4ecca60e#主键约束-primary-key\",\"985\":\"v-4ecca60e#概念\",\"986\":\"v-4ecca60e#特点\",\"987\":\"v-4ecca60e#创建表时创建\",\"988\":\"v-4ecca60e#创建表后\",\"989\":\"v-4ecca60e#删除\",\"990\":\"v-4ecca60e#唯一约束-unique-key\",\"991\":\"v-4ecca60e#概念-1\",\"992\":\"v-4ecca60e#特点-1\",\"993\":\"v-4ecca60e#创建表时创建-1\",\"994\":\"v-4ecca60e#创建表后-1\",\"995\":\"v-4ecca60e#删除-1\",\"996\":\"v-4ecca60e#外键约束-foreign-key\",\"997\":\"v-4ecca60e#概念-2\",\"998\":\"v-4ecca60e#特点-2\",\"999\":\"v-4ecca60e#创建表时创建-2\",\"1000\":\"v-4ecca60e#在建表后\",\"1001\":\"v-4ecca60e#删除-2\",\"1002\":\"v-4ecca60e#外键约束的要求\",\"1003\":\"v-4ecca60e#外键约束等级\",\"1004\":\"v-4ecca60e#非空约束-not-null\",\"1005\":\"v-4ecca60e#概念-3\",\"1006\":\"v-4ecca60e#创建表时创建-3\",\"1007\":\"v-4ecca60e#创建表后-2\",\"1008\":\"v-4ecca60e#删除-3\",\"1009\":\"v-4ecca60e#自增-auto-increment\",\"1010\":\"v-4ecca60e#概念-4\",\"1011\":\"v-4ecca60e#创建表时创建-4\",\"1012\":\"v-4ecca60e#创建表后-3\",\"1013\":\"v-4ecca60e#删除-4\",\"1014\":\"v-4ecca60e#检查约束-check\",\"1015\":\"v-4ecca60e#概念-5\",\"1016\":\"v-4ecca60e#创建表时创建-5\",\"1017\":\"v-4ecca60e#删除-5\",\"1018\":\"v-4ecca60e#默认约束-default\",\"1019\":\"v-4ecca60e#概念-6\",\"1020\":\"v-4ecca60e#创建表时创建-6\",\"1021\":\"v-4ecca60e#删除-6\",\"1022\":\"v-7d11cbac\",\"1023\":\"v-7d11cbac#dql\",\"1024\":\"v-7d11cbac#查询所有行和列的数据\",\"1025\":\"v-7d11cbac#查询指定列的数据\",\"1026\":\"v-7d11cbac#去重查询\",\"1027\":\"v-7d11cbac#别名查询\",\"1028\":\"v-7d11cbac#运算查询\",\"1029\":\"v-7d11cbac#条件查询\",\"1030\":\"v-7d11cbac#比较运算符\",\"1031\":\"v-7d11cbac#逻辑运算符\",\"1032\":\"v-7d11cbac#范围\",\"1033\":\"v-7d11cbac#between-and\",\"1034\":\"v-7d11cbac#in\",\"1035\":\"v-7d11cbac#like模糊查询\",\"1036\":\"v-7d11cbac#正则查询\",\"1037\":\"v-7d11cbac#空值处理\",\"1038\":\"v-7d11cbac#排序查询order-by\",\"1039\":\"v-7d11cbac#单列排序\",\"1040\":\"v-7d11cbac#多列排序\",\"1041\":\"v-7d11cbac#聚合函数\",\"1042\":\"v-7d11cbac#分组-group-by-与-having\",\"1043\":\"v-7d11cbac#分页\",\"1044\":\"v-69c5973f\",\"1045\":\"v-69c5973f#三范式\",\"1046\":\"v-69c5973f#第一范式-确保每列保持原子性\",\"1047\":\"v-69c5973f#第二范式-确保表中的每列都和主键相关\",\"1048\":\"v-69c5973f#第三范式-确保每列都和主键列直接相关-而不是间接相关\",\"1049\":\"v-69c5973f#多表关系\",\"1050\":\"v-69c5973f#一对多\",\"1051\":\"v-69c5973f#多对多\",\"1052\":\"v-69c5973f#一对一\",\"1053\":\"v-69c5973f#多表关联查询\",\"1054\":\"v-69c5973f#交叉查询\",\"1055\":\"v-69c5973f#内连接查询\",\"1056\":\"v-69c5973f#隐式内连\",\"1057\":\"v-69c5973f#显式内连\",\"1058\":\"v-69c5973f#外连接查询\",\"1059\":\"v-69c5973f#左外连接\",\"1060\":\"v-69c5973f#a\",\"1061\":\"v-69c5973f#a-a∩b\",\"1062\":\"v-69c5973f#右外连接\",\"1063\":\"v-69c5973f#b\",\"1064\":\"v-69c5973f#b-a∩b\",\"1065\":\"v-69c5973f#union联合查询\",\"1066\":\"v-69c5973f#a∪b\",\"1067\":\"v-69c5973f#a∪b-a∩b\",\"1068\":\"v-69c5973f#自连接查询\",\"1069\":\"v-69c5973f#子查询\",\"1070\":\"v-69c5973f#子查询的分类\",\"1071\":\"v-69c5973f#where型\",\"1072\":\"v-69c5973f#from型\",\"1073\":\"v-69c5973f#exists型\",\"1074\":\"v-69c5973f#子查询的复制操作\",\"1075\":\"v-69c5973f#复制表\",\"1076\":\"v-69c5973f#拷贝表结构\",\"1077\":\"v-69c5973f#拷贝表结构和数据-但约束与索引除外\",\"1078\":\"v-69c5973f#拷贝表结构-数据\",\"1079\":\"v-69c5973f#跨数据库拷贝表\",\"1080\":\"v-69c5973f#拷贝一个表中其中的一些字段-指定新名-其中一些数据\",\"1081\":\"v-69c5973f#在创建表的同时定义表中的字段信息。\",\"1082\":\"v-69c5973f#复制数据\",\"1083\":\"v-6749cb14\",\"1084\":\"v-6749cb14#mysql的常用函数\",\"1085\":\"v-6749cb14#字符串函数\",\"1086\":\"v-6749cb14#连接\",\"1087\":\"v-6749cb14#长度\",\"1088\":\"v-6749cb14#替换\",\"1089\":\"v-6749cb14#大小写处理\",\"1090\":\"v-6749cb14#空格处理\",\"1091\":\"v-6749cb14#其他处理\",\"1092\":\"v-6749cb14#数值函数\",\"1093\":\"v-6749cb14#日期函数\",\"1094\":\"v-6749cb14#流程函数\",\"1095\":\"v-6749cb14#其他函数\",\"1096\":\"v-6c44f766\",\"1097\":\"v-6c44f766#事务tcl\",\"1098\":\"v-6c44f766#事务的概述\",\"1099\":\"v-6c44f766#概念\",\"1100\":\"v-6c44f766#事务的原理\",\"1101\":\"v-6c44f766#应用场景\",\"1102\":\"v-6c44f766#事务的四大特性-acid\",\"1103\":\"v-6c44f766#mysql进行事务管理\",\"1104\":\"v-6c44f766#自动事务\",\"1105\":\"v-6c44f766#手动事务\",\"1106\":\"v-6c44f766#开启事务\",\"1107\":\"v-6c44f766#提交和回滚事务\",\"1108\":\"v-6c44f766#提交事务\",\"1109\":\"v-6c44f766#回滚事务\",\"1110\":\"v-6c44f766#事务的隔离级别\",\"1111\":\"v-6c44f766#不考虑事务的隔离性会引发的问题\",\"1112\":\"v-6c44f766#事务的四个隔离级别\",\"1113\":\"v-6c44f766#设置隔离级别\",\"1114\":\"v-6c44f766#dcl\",\"1115\":\"v-6c44f766#创建用户\",\"1116\":\"v-6c44f766#授权用户\",\"1117\":\"v-6c44f766#撤销授权\",\"1118\":\"v-6c44f766#查看权限\",\"1119\":\"v-6c44f766#删除用户\",\"1120\":\"v-6c44f766#修改用户密码\",\"1121\":\"v-6c44f766#修改管理员密码\",\"1122\":\"v-6c44f766#修改普通用户密码\",\"1123\":\"v-de87580c\",\"1124\":\"v-de87580c#索引-index\",\"1125\":\"v-de87580c#概念\",\"1126\":\"v-de87580c#优势与劣势\",\"1127\":\"v-de87580c#优点\",\"1128\":\"v-de87580c#缺点\",\"1129\":\"v-de87580c#分类\",\"1130\":\"v-de87580c#使用\",\"1131\":\"v-de87580c#查看索引\",\"1132\":\"v-de87580c#创建索引\",\"1133\":\"v-de87580c#创建单值索引\",\"1134\":\"v-de87580c#创建唯一索引\",\"1135\":\"v-de87580c#创建复合索引\",\"1136\":\"v-de87580c#删除索引\",\"1137\":\"v-de87580c#视图-view\",\"1138\":\"v-de87580c#视图的使用\",\"1139\":\"v-de87580c#创建视图\",\"1140\":\"v-de87580c#使用视图\",\"1141\":\"v-de87580c#删除视图\",\"1142\":\"v-de87580c#视图的优点\",\"1143\":\"v-de87580c#视图的缺点\",\"1144\":\"v-75e4921e\",\"1145\":\"v-75e4921e#什么是存储过程-stored-procedure\",\"1146\":\"v-75e4921e#存储过程的优点\",\"1147\":\"v-75e4921e#案例\",\"1148\":\"v-f862f096\",\"1149\":\"v-bda94848\",\"1150\":\"v-bda94848#经典问题\",\"1151\":\"v-bda94848#导入和导出数据\",\"1152\":\"v-bda94848#导出数据\",\"1153\":\"v-bda94848#导入数据\",\"1154\":\"v-bda94848#编码问题\",\"1155\":\"v-bda94848#忘记root密码\",\"1156\":\"v-bda94848#查看字符集和校验规则\",\"1157\":\"v-ef3d4f0a\",\"1158\":\"v-ef3d4f0a#关于资料库\",\"1159\":\"v-ef3d4f0a#常用快捷键\",\"1160\":\"v-2695f419\",\"1161\":\"v-2695f419#引入链接\",\"1162\":\"v-2695f419#嵌入块\",\"1163\":\"v-adcb1418\",\"1164\":\"v-adcb1418#配置\",\"1165\":\"v-adcb1418#简单模板的创建\",\"1166\":\"v-f038ba5c\",\"1167\":\"v-f038ba5c#_1-认识markdown\",\"1168\":\"v-f038ba5c#_2-使用markdown\",\"1169\":\"v-f038ba5c#标题\",\"1170\":\"v-f038ba5c#加粗-斜体-删除\",\"1171\":\"v-f038ba5c#列表\",\"1172\":\"v-f038ba5c#引用\",\"1173\":\"v-f038ba5c#分割线\",\"1174\":\"v-f038ba5c#链接\",\"1175\":\"v-f038ba5c#内联超链接\",\"1176\":\"v-f038ba5c#自动超链接\",\"1177\":\"v-f038ba5c#图片\",\"1178\":\"v-f038ba5c#代码\",\"1179\":\"v-f038ba5c#代码块\",\"1180\":\"v-f038ba5c#行内代码块\",\"1181\":\"v-f038ba5c#代办\",\"1182\":\"v-f038ba5c#表格\",\"1183\":\"v-f038ba5c#脚注\",\"1184\":\"v-f038ba5c#输出公式\",\"1185\":\"v-f038ba5c#输出流程图\",\"1186\":\"v-f038ba5c#html样式\",\"1187\":\"v-f038ba5c#文字样式\",\"1188\":\"v-f038ba5c#style样式\",\"1189\":\"v-f038ba5c#超链接\",\"1190\":\"v-c5968e32\",\"1191\":\"v-c5968e32#安装插件\",\"1192\":\"v-86979f54\",\"1193\":\"v-86979f54#快捷键\",\"1194\":\"v-86979f54#搜索面板\",\"1195\":\"v-86979f54#搜索的技巧\",\"1196\":\"v-86979f54#定义\",\"1197\":\"v-86979f54#场景\",\"1198\":\"v-86979f54#yaml\",\"1199\":\"v-86979f54#dataview语法\",\"1200\":\"v-86979f54#简单的查询语法\",\"1201\":\"v-86979f54#带条件的查询\",\"1202\":\"v-86979f54#进阶查询\",\"1203\":\"v-86979f54#使用建议\",\"1204\":\"v-4294c992\",\"1205\":\"v-4294c992#什么是jdbc\",\"1206\":\"v-4294c992#sun公司、数据库厂商、程序员三方关系\",\"1207\":\"v-4294c992#jdbd历史版本及特征\",\"1208\":\"v-4294c992#jdbc-1-0\",\"1209\":\"v-4294c992#jdbc-2-0\",\"1210\":\"v-4294c992#jdbc访问数据库编码步骤\",\"1211\":\"v-4294c992#数据准备\",\"1212\":\"v-3fd008de\",\"1213\":\"v-3fd008de#简单使用\",\"1214\":\"v-3fd008de#创建项目并引入jdbc-jar包\",\"1215\":\"v-3fd008de#简单使用jdbc\",\"1216\":\"v-3fd008de#常见问题解决\",\"1217\":\"v-3fd008de#优化驱动注册\",\"1218\":\"v-3fd008de#我的第一个crud\",\"1219\":\"v-3fd008de#新增\",\"1220\":\"v-3fd008de#删除\",\"1221\":\"v-3fd008de#修改\",\"1222\":\"v-3fd008de#查询\",\"1223\":\"v-3fd008de#关于-resultset\",\"1224\":\"v-3fd008de#封装成对象\",\"1225\":\"v-3fd008de#为什么将结果封装成对象或者对象集合\",\"1226\":\"v-3fd008de#怎么封装\",\"1227\":\"v-3fd008de#封装后的使用\",\"1228\":\"v-0b47c2a2\",\"1229\":\"v-0b47c2a2#批处理\",\"1230\":\"v-0b47c2a2#什么是批处理\",\"1231\":\"v-0b47c2a2#使用批处理\",\"1232\":\"v-0b47c2a2#事务\",\"1233\":\"v-0b47c2a2#什么是事务\",\"1234\":\"v-0b47c2a2#使用事务\",\"1235\":\"v-0b47c2a2#使用回滚点回滚\",\"1236\":\"v-24610968\",\"1237\":\"v-24610968#什么是sql注入\",\"1238\":\"v-24610968#模拟sql注入\",\"1239\":\"v-24610968#创建表\",\"1240\":\"v-24610968#编写登录程序\",\"1241\":\"v-24610968#封装实体类对象\",\"1242\":\"v-24610968#jdbc主程序\",\"1243\":\"v-24610968#测试程序\",\"1244\":\"v-24610968#正常登录\",\"1245\":\"v-24610968#sql注入\",\"1246\":\"v-24610968#注入原理\",\"1247\":\"v-24610968#preparestatment-预编译\",\"1248\":\"v-24610968#statement和preparedstatment的关系和区别\",\"1249\":\"v-24610968#原理\",\"1250\":\"v-24610968#流程\",\"1251\":\"v-24610968#开启\",\"1252\":\"v-24610968#使用\",\"1253\":\"v-24610968#重构crud\",\"1254\":\"v-6974358e\",\"1255\":\"v-6974358e#connection接口\",\"1256\":\"v-6974358e#drivermanager类\",\"1257\":\"v-6974358e#statement接口\",\"1258\":\"v-6974358e#preparedstatement接口\",\"1259\":\"v-6974358e#resultset接口\",\"1260\":\"v-498d9cf2\",\"1261\":\"v-498d9cf2#dao模式\",\"1262\":\"v-498d9cf2#简介\",\"1263\":\"v-498d9cf2#dao模式的结构\",\"1264\":\"v-498d9cf2#创建一个dao模式的项目\",\"1265\":\"v-498d9cf2#提取basedao\",\"1266\":\"v-498d9cf2#抽取basedao\",\"1267\":\"v-498d9cf2#重写实现类\",\"1268\":\"v-33874b2c\",\"1269\":\"v-33874b2c#为什么要使用连接池\",\"1270\":\"v-33874b2c#建立数据库连接的两种方式\",\"1271\":\"v-33874b2c#传统连接方式\",\"1272\":\"v-33874b2c#连接池连接方式\",\"1273\":\"v-33874b2c#具体实现\",\"1274\":\"v-33874b2c#创建连接池文件\",\"1275\":\"v-33874b2c#修改basedao\",\"1276\":\"v-33874b2c#效果\",\"1277\":\"v-33874b2c#继续优化\",\"1278\":\"v-33874b2c#创建配置文件\",\"1279\":\"v-33874b2c#创建propertiesutil\",\"1280\":\"v-33874b2c#修改连接池\",\"1281\":\"v-b57f608a\",\"1282\":\"v-b57f608a#什么是日志log\",\"1283\":\"v-b57f608a#如何记录日志\",\"1284\":\"v-b57f608a#log4j日志的级别\",\"1285\":\"v-b57f608a#使用log4j记录日志\",\"1286\":\"v-b57f608a#代码中记录日志\",\"1287\":\"v-b57f608a#理解日志格式化字符的含义\",\"1288\":\"v-b57f608a#加入到连接池中\",\"1289\":\"v-75468950\",\"1290\":\"v-75468950#html标签\",\"1291\":\"v-75468950#head-标签\",\"1292\":\"v-75468950#说明\",\"1293\":\"v-75468950#标签中可用标签\",\"1294\":\"v-75468950#body-标签中可用标签\",\"1295\":\"v-75468950#说明-1\",\"1296\":\"v-75468950#标签中可用标签-1\",\"1297\":\"v-75468950#文本标签\",\"1298\":\"v-75468950#普通文本\",\"1299\":\"v-75468950#标题标签\",\"1300\":\"v-75468950#横线标签\",\"1301\":\"v-75468950#段落标签\",\"1302\":\"v-75468950#加粗-倾斜-下划线\",\"1303\":\"v-75468950#删除线\",\"1304\":\"v-75468950#预编译标签\",\"1305\":\"v-75468950#换行\",\"1306\":\"v-75468950#字体标签\",\"1307\":\"v-75468950#特殊字符\",\"1308\":\"v-75468950#多媒体标签\",\"1309\":\"v-75468950#图片\",\"1310\":\"v-75468950#音频视频\",\"1311\":\"v-75468950#超链接标签\",\"1312\":\"v-75468950#超链接标签-1\",\"1313\":\"v-75468950#设置锚点\",\"1314\":\"v-75468950#当前页面锚点跳转\",\"1315\":\"v-75468950#其他页面锚点跳转\",\"1316\":\"v-75468950#列表标签\",\"1317\":\"v-75468950#无序列表\",\"1318\":\"v-75468950#有序列表\",\"1319\":\"v-75468950#表格标签\",\"1320\":\"v-75468950#框架\",\"1321\":\"v-75468950#内嵌框架\",\"1322\":\"v-75468950#框架集合\",\"1323\":\"v-51b56a1e\",\"1324\":\"v-51b56a1e#网络传输的三大基石\",\"1325\":\"v-51b56a1e#什么是html\",\"1326\":\"v-51b56a1e#html的标准结构\",\"1327\":\"v-51b56a1e#安装开发工具-hbuilder\",\"1328\":\"v-2b8523a2\",\"1329\":\"v-2b8523a2#概述\",\"1330\":\"v-2b8523a2#语法\",\"1331\":\"v-2b8523a2#模仿百度搜索\",\"1332\":\"v-2b8523a2#表单元素\",\"1333\":\"v-2b8523a2#文本框-text\",\"1334\":\"v-2b8523a2#密码框-password\",\"1335\":\"v-2b8523a2#单选框-radio\",\"1336\":\"v-2b8523a2#多选框-checkbox\",\"1337\":\"v-2b8523a2#文件-file\",\"1338\":\"v-2b8523a2#隐藏域-hidden\",\"1339\":\"v-2b8523a2#按钮组-button\",\"1340\":\"v-2b8523a2#下拉框-select\",\"1341\":\"v-2b8523a2#多行文本框-textarea\",\"1342\":\"v-2b8523a2#标签-label\",\"1343\":\"v-2b8523a2#提交按钮-submit\",\"1344\":\"v-629ea2ce\",\"1345\":\"v-629ea2ce#类型校验\",\"1346\":\"v-629ea2ce#颜色选择\",\"1347\":\"v-629ea2ce#数值选择\",\"1348\":\"v-629ea2ce#滑动选择\",\"1349\":\"v-629ea2ce#日期选择\",\"1350\":\"v-629ea2ce#新增属性\",\"1351\":\"v-001e43d0\",\"1352\":\"v-001e43d0#变量的声明\",\"1353\":\"v-001e43d0#数据类型\",\"1354\":\"v-001e43d0#数值型\",\"1355\":\"v-001e43d0#字符串型\",\"1356\":\"v-001e43d0#逻辑-布尔-型\",\"1357\":\"v-001e43d0#空-null-值\",\"1358\":\"v-001e43d0#未定义-undefined-值\",\"1359\":\"v-001e43d0#复合数据类型object\",\"1360\":\"v-001e43d0#运算符\",\"1361\":\"v-001e43d0#关于-和\",\"1362\":\"v-001e43d0#关于\",\"1363\":\"v-001e43d0#关于-1\",\"1364\":\"v-001e43d0#关于-2\",\"1365\":\"v-001e43d0#流程控制\",\"1366\":\"v-001e43d0#分支结构-if-switch\",\"1367\":\"v-001e43d0#循环结构-while-do-while-for\",\"1368\":\"v-001e43d0#函数的使用\",\"1369\":\"v-001e43d0#函数定义的三种方式\",\"1370\":\"v-001e43d0#函数参数和返回值\",\"1371\":\"v-5cb30a71\",\"1372\":\"v-5cb30a71#什么是javascrip\",\"1373\":\"v-5cb30a71#javascript-的特点\",\"1374\":\"v-5cb30a71#优点\",\"1375\":\"v-5cb30a71#缺点\",\"1376\":\"v-5cb30a71#javascript-与-java的区别\",\"1377\":\"v-5cb30a71#javascript-与-css的关系\",\"1378\":\"v-5cb30a71#javascript-的引入方式\",\"1379\":\"v-5cb30a71#内嵌式\",\"1380\":\"v-5cb30a71#链接式\",\"1381\":\"v-a5ea781a\",\"1382\":\"v-a5ea781a#创建数组方式\",\"1383\":\"v-a5ea781a#直接创建空数组\",\"1384\":\"v-a5ea781a#直接创建指定长度\",\"1385\":\"v-a5ea781a#直接创建指定元素\",\"1386\":\"v-a5ea781a#数组元素和长度\",\"1387\":\"v-a5ea781a#数组遍历\",\"1388\":\"v-a5ea781a#普通for循环\",\"1389\":\"v-a5ea781a#增强for循环\",\"1390\":\"v-a5ea781a#数组的常用方法\",\"1391\":\"v-a5ea781a#查询指定索引元素-indexof\",\"1392\":\"v-a5ea781a#合并数组元素-concat\",\"1393\":\"v-a5ea781a#合并字符串-concat\",\"1394\":\"v-a5ea781a#移除最后一个元素-pop\",\"1395\":\"v-a5ea781a#结尾添加元素-push\",\"1396\":\"v-a5ea781a#结尾添加元素-reverse\",\"1397\":\"v-a5ea781a#删除第一个元素-shift\",\"1398\":\"v-a5ea781a#向第一个位置添加元素-unshift\",\"1399\":\"v-a5ea781a#截取数组-slice\",\"1400\":\"v-a5ea781a#删除数组中的元素-splice\",\"1401\":\"v-a5ea781a#数组排序-sort\",\"1402\":\"v-61e0b026\",\"1403\":\"v-61e0b026#常用对象\",\"1404\":\"v-61e0b026#string对象\",\"1405\":\"v-61e0b026#常用api\",\"1406\":\"v-61e0b026#案例\",\"1407\":\"v-61e0b026#number对象\",\"1408\":\"v-61e0b026#常用api-1\",\"1409\":\"v-61e0b026#案例-1\",\"1410\":\"v-61e0b026#match对象\",\"1411\":\"v-61e0b026#常用api-2\",\"1412\":\"v-61e0b026#案例-2\",\"1413\":\"v-61e0b026#date对象\",\"1414\":\"v-61e0b026#创建date对象\",\"1415\":\"v-61e0b026#常用api-3\",\"1416\":\"v-61e0b026#案例-3\",\"1417\":\"v-61e0b026#日期对象格式化处理\",\"1418\":\"v-61e0b026#自定义对象\",\"1419\":\"v-61e0b026#第一种语法-调用系统的构造函数创建对象-object\",\"1420\":\"v-61e0b026#第二种语法-自定义构造函数创建对象-function\",\"1421\":\"v-61e0b026#第三种语法-字面量的方式创建对象-json\",\"1422\":\"v-61e0b026#原型\",\"1423\":\"v-61e0b026#获取原型对象\",\"1424\":\"v-61e0b026#当前类对象和原型的关系\",\"1425\":\"v-61e0b026#原型链\",\"1426\":\"v-5e68cbe6\",\"1427\":\"v-5e68cbe6#概念\",\"1428\":\"v-5e68cbe6#什么是事件\",\"1429\":\"v-5e68cbe6#事件的绑定和触发\",\"1430\":\"v-5e68cbe6#常见的事件\",\"1431\":\"v-5e68cbe6#鼠标事件\",\"1432\":\"v-5e68cbe6#常用api\",\"1433\":\"v-5e68cbe6#案例\",\"1434\":\"v-5e68cbe6#键盘事件\",\"1435\":\"v-5e68cbe6#常用api-1\",\"1436\":\"v-5e68cbe6#案例-1\",\"1437\":\"v-5e68cbe6#表单事件\",\"1438\":\"v-5e68cbe6#常用api-2\",\"1439\":\"v-5e68cbe6#案例-2\",\"1440\":\"v-5e68cbe6#页面加载事件\",\"1441\":\"v-5e68cbe6#常用api-3\",\"1442\":\"v-5e68cbe6#案例-3\",\"1443\":\"v-57a4251c\",\"1444\":\"v-57a4251c#概述\",\"1445\":\"v-57a4251c#认识bom和dom\",\"1446\":\"v-57a4251c#什么是bom\",\"1447\":\"v-57a4251c#什么是dom\",\"1448\":\"v-57a4251c#bom与dom的关系\",\"1449\":\"v-57a4251c#window对象及常用方法\",\"1450\":\"v-57a4251c#什么是window对象\",\"1451\":\"v-57a4251c#window对象属性\",\"1452\":\"v-57a4251c#window对象方法\",\"1453\":\"v-57a4251c#window弹窗\",\"1454\":\"v-57a4251c#普通弹窗\",\"1455\":\"v-57a4251c#确认弹窗\",\"1456\":\"v-57a4251c#消息输入弹窗\",\"1457\":\"v-57a4251c#定时器\",\"1458\":\"v-57a4251c#循环执行任务\",\"1459\":\"v-57a4251c#执行一次任务\",\"1460\":\"v-57a4251c#open与close方法\",\"1461\":\"v-57a4251c#bom中其他对象\",\"1462\":\"v-57a4251c#location对象\",\"1463\":\"v-57a4251c#history对象\",\"1464\":\"v-57a4251c#screen对象和navigator对象\",\"1465\":\"v-5c1f584a\",\"1466\":\"v-5c1f584a#引入\",\"1467\":\"v-5c1f584a#为什么要学css\",\"1468\":\"v-5c1f584a#html和css的关系\",\"1469\":\"v-5c1f584a#css的语法格式\",\"1470\":\"v-5c1f584a#内联样式\",\"1471\":\"v-5c1f584a#内部样式\",\"1472\":\"v-5c1f584a#外部样式\",\"1473\":\"v-5c1f584a#优先级\",\"1474\":\"v-7ed49592\",\"1475\":\"v-7ed49592#概述\",\"1476\":\"v-7ed49592#什么是dom编程\",\"1477\":\"v-7ed49592#什么是document\",\"1478\":\"v-7ed49592#document对象如何获取\",\"1479\":\"v-7ed49592#dom节点分类node\",\"1480\":\"v-7ed49592#dom操作的内容\",\"1481\":\"v-7ed49592#页面元素分析\",\"1482\":\"v-7ed49592#页面代码\",\"1483\":\"v-7ed49592#树状图分析\",\"1484\":\"v-7ed49592#node节点常用属性和方法\",\"1485\":\"v-7ed49592#属性\",\"1486\":\"v-7ed49592#方法\",\"1487\":\"v-7ed49592#直接获取节点\",\"1488\":\"v-7ed49592#根据id获取-getelementbyid\",\"1489\":\"v-7ed49592#根据class获取-getelementsbyclassname\",\"1490\":\"v-7ed49592#根据标签获取-getelementsbytagname\",\"1491\":\"v-7ed49592#根据name获取-getelementsbyname\",\"1492\":\"v-7ed49592#操作节点的属性\",\"1493\":\"v-7ed49592#方式一-直接操作\",\"1494\":\"v-7ed49592#方式二-getattribute-setattribute\",\"1495\":\"v-7ed49592#操作节点的样式\",\"1496\":\"v-7ed49592#方式一-节点-style-样式名-样式值\",\"1497\":\"v-7ed49592#方式二-修改class属性-影响div的样式\",\"1498\":\"v-7ed49592#操作标签文本\",\"1499\":\"v-7ed49592#innerhtml-操作标签中的所有代码\",\"1500\":\"v-7ed49592#innertext-操作标签中的text\",\"1501\":\"v-7ed49592#value-操作表单的值\",\"1502\":\"v-7ed49592#增加删除节点\",\"1503\":\"v-7ed49592#创建元素-createelement\",\"1504\":\"v-7ed49592#增加元素-appendchild\",\"1505\":\"v-7ed49592#删除元素-removechild\",\"1506\":\"v-3e4881f9\",\"1507\":\"v-3e4881f9#基本选择器\",\"1508\":\"v-3e4881f9#元素选择器\",\"1509\":\"v-3e4881f9#类选择器\",\"1510\":\"v-3e4881f9#id选择器\",\"1511\":\"v-3e4881f9#关系选择器\",\"1512\":\"v-3e4881f9#行元素与块元素\",\"1513\":\"v-3e4881f9#关系选择器-1\",\"1514\":\"v-3e4881f9#属性选择器\",\"1515\":\"v-3e4881f9#伪类选择器\",\"1516\":\"v-f009c724\",\"1517\":\"v-f009c724#什么是浮动\",\"1518\":\"v-f009c724#浮动演示\",\"1519\":\"v-f009c724#浮动原理\",\"1520\":\"v-f009c724#浮动语法\",\"1521\":\"v-f009c724#感受浮动\",\"1522\":\"v-f009c724#清除浮动\",\"1523\":\"v-f009c724#方式一-overflow-hidden\",\"1524\":\"v-f009c724#方式二-改变父节点高度\",\"1525\":\"v-f009c724#方式三-clear-both\",\"1526\":\"v-098862a8\",\"1527\":\"v-098862a8#概述\",\"1528\":\"v-098862a8#简单的盒子模型\",\"1529\":\"v-098862a8#demo\",\"1530\":\"v-dd9b3726\",\"1531\":\"v-dd9b3726#概述\",\"1532\":\"v-dd9b3726#静态定位-static\",\"1533\":\"v-dd9b3726#相对定位-relative\",\"1534\":\"v-dd9b3726#堆叠顺序-z-index\",\"1535\":\"v-dd9b3726#绝对定位-absolute\",\"1536\":\"v-dd9b3726#固定定位-fixed\",\"1537\":\"v-930281be\",\"1538\":\"v-930281be#为什么要使用jquery\",\"1539\":\"v-930281be#使用原生javascript编码存在问题\",\"1540\":\"v-930281be#jquery的优点\",\"1541\":\"v-930281be#什么是jquery\",\"1542\":\"v-930281be#jquery的版本\",\"1543\":\"v-930281be#jquery的尝试\",\"1544\":\"v-930281be#原生javascript方式实现\",\"1545\":\"v-930281be#使用jquery方式实现\",\"1546\":\"v-930281be#总结\",\"1547\":\"v-3972a474\",\"1548\":\"v-3972a474#基本选择器\",\"1549\":\"v-3972a474#属性选择器\",\"1550\":\"v-3972a474#位置选择器\",\"1551\":\"v-3972a474#针对整个页面而言\",\"1552\":\"v-3972a474#针对上级标签而言\",\"1553\":\"v-3972a474#表单选择器\",\"1554\":\"v-3972a474#关于表单项选择\",\"1555\":\"v-3972a474#关于表单状态选择\",\"1556\":\"v-35673403\",\"1557\":\"v-35673403#bootstrap简介\",\"1558\":\"v-35673403#版本\",\"1559\":\"v-35673403#优点\",\"1560\":\"v-35673403#搭建bootstrap\",\"1561\":\"v-35673403#下载bootstrap文件\",\"1562\":\"v-35673403#引入工程目录\",\"1563\":\"v-35673403#创建html文件\",\"1564\":\"v-35673403#参考文档快速开发\",\"1565\":\"v-c59e494a\",\"1566\":\"v-c59e494a#操作属性和样式\",\"1567\":\"v-c59e494a#操作属性\",\"1568\":\"v-c59e494a#操作样式\",\"1569\":\"v-c59e494a#操作文本和增删元素\",\"1570\":\"v-c59e494a#操作文本\",\"1571\":\"v-c59e494a#增删元素\",\"1572\":\"v-c59e494a#操作事件\",\"1573\":\"v-c59e494a#dom对象和jquery对象转换\",\"1574\":\"v-c59e494a#迭代遍历方式\",\"1575\":\"v-f287fd86\",\"1576\":\"v-f287fd86#一个简单的登录demo\",\"1577\":\"v-f287fd86#实现效果\",\"1578\":\"v-f287fd86#验证要求\",\"1579\":\"v-f287fd86#实现代码\",\"1580\":\"v-f287fd86#注意事项\",\"1581\":\"v-f287fd86#正则表达式\",\"1582\":\"v-f287fd86#什么是正则表达式\",\"1583\":\"v-f287fd86#为什么使用正则表达式\",\"1584\":\"v-f287fd86#正则表达式举例\",\"1585\":\"v-f287fd86#正则表达式的使用\",\"1586\":\"v-f287fd86#使用正则优化表单\",\"1587\":\"v-0f6d4db2\",\"1588\":\"v-0f6d4db2#显示与隐藏\",\"1589\":\"v-0f6d4db2#上下滑动\",\"1590\":\"v-0f6d4db2#淡入淡出\",\"1591\":\"v-0f6d4db2#自定义动画\",\"1592\":\"v-5c337704\",\"1593\":\"v-5c337704#容器\",\"1594\":\"v-5c337704#什么是容器\",\"1595\":\"v-5c337704#容器类\",\"1596\":\"v-5c337704#案例\",\"1597\":\"v-5c337704#二者区别\",\"1598\":\"v-5c337704#固定容器的阈值\",\"1599\":\"v-5c337704#栅格系统\",\"1600\":\"v-5c337704#网格分类\",\"1601\":\"v-5c337704#网格系统规则\",\"1602\":\"v-5c337704#案例-1\",\"1603\":\"v-6762d78f\",\"1604\":\"v-6762d78f#导航栏\",\"1605\":\"v-6762d78f#效果图\",\"1606\":\"v-6762d78f#相关代码\",\"1607\":\"v-6762d78f#轮播图\",\"1608\":\"v-6762d78f#效果图-1\",\"1609\":\"v-6762d78f#相关代码-1\",\"1610\":\"v-07c2374d\",\"1611\":\"v-07c2374d#了解vue\",\"1612\":\"v-07c2374d#vue的好处\",\"1613\":\"v-07c2374d#传统方式操作元素\",\"1614\":\"v-07c2374d#使用vue操作元素\",\"1615\":\"v-07c2374d#vue的使用\",\"1616\":\"v-07c2374d#引入vue\",\"1617\":\"v-07c2374d#插值语法\",\"1618\":\"v-ff6f50e0\",\"1619\":\"v-ff6f50e0#v-if\",\"1620\":\"v-ff6f50e0#基本使用\",\"1621\":\"v-ff6f50e0#使用表达式\",\"1622\":\"v-ff6f50e0#使用v-else-if-和-v-else\",\"1623\":\"v-ff6f50e0#v-show\",\"1624\":\"v-ff6f50e0#基本使用-1\",\"1625\":\"v-ff6f50e0#v-show和v-if的使用场景区分\",\"1626\":\"v-ff6f50e0#v-for\",\"1627\":\"v-ff6f50e0#基本使用-2\",\"1628\":\"v-ff6f50e0#index和key属性\",\"1629\":\"v-ff6f50e0#遍历对象\",\"1630\":\"v-ff6f50e0#遍历json\",\"1631\":\"v-ff6f50e0#多层嵌套\",\"1632\":\"v-ff6f50e0#注意事项\",\"1633\":\"v-ff6f50e0#v-html和v-text\",\"1634\":\"v-ff6f50e0#v-text\",\"1635\":\"v-ff6f50e0#v-html\",\"1636\":\"v-ff6f50e0#v-cloak\",\"1637\":\"v-ff6f50e0#为什么使用v-cloak\",\"1638\":\"v-ff6f50e0#基本使用-3\",\"1639\":\"v-ff6f50e0#v-once\",\"1640\":\"v-ff6f50e0#基本使用-4\",\"1641\":\"v-ff6f50e0#使用场景\",\"1642\":\"v-ff6f50e0#v-pre\",\"1643\":\"v-ff6f50e0#基本使用-5\",\"1644\":\"v-ff6f50e0#使用场景-1\",\"1645\":\"v-ff6f50e0#v-on\",\"1646\":\"v-ff6f50e0#基本使用-6\",\"1647\":\"v-ff6f50e0#注意事项-1\",\"1648\":\"v-ff6f50e0#v-bind\",\"1649\":\"v-ff6f50e0#基本使用-7\",\"1650\":\"v-ff6f50e0#动态class\",\"1651\":\"v-ff6f50e0#动态style\",\"1652\":\"v-ff6f50e0#v-model\",\"1653\":\"v-ff6f50e0#基本使用-8\",\"1654\":\"v-9fe18b84\",\"1655\":\"v-9fe18b84#事件修饰符\",\"1656\":\"v-9fe18b84#为什么使用事件修饰符\",\"1657\":\"v-9fe18b84#常用的事件修饰符\",\"1658\":\"v-9fe18b84#stop修饰符\",\"1659\":\"v-9fe18b84#self修饰符\",\"1660\":\"v-9fe18b84#prevent修饰符\",\"1661\":\"v-9fe18b84#capture修饰符\",\"1662\":\"v-9fe18b84#once修饰符\",\"1663\":\"v-9fe18b84#按键修饰符\",\"1664\":\"v-9fe18b84#基本用法\",\"1665\":\"v-9fe18b84#常用keycode\",\"1666\":\"v-9fe18b84#系统修饰符\",\"1667\":\"v-9fe18b84#基本用法-1\",\"1668\":\"v-9fe18b84#常见系统修饰符\",\"1669\":\"v-9fe18b84#exact修饰符\",\"1670\":\"v-9fe18b84#基本用法-2\",\"1671\":\"v-9fe18b84#鼠标按键修饰符\",\"1672\":\"v-9fe18b84#基本用法-3\",\"1673\":\"v-9fe18b84#注意事项\",\"1674\":\"v-9fe18b84#表单修饰符\",\"1675\":\"v-9fe18b84#lazy-修饰符\",\"1676\":\"v-9fe18b84#number-修饰符\",\"1677\":\"v-9fe18b84#trim-修饰符\",\"1678\":\"v-3e7ea72d\",\"1679\":\"v-3e7ea72d#准备工作\",\"1680\":\"v-3e7ea72d#安装nodejs并验证\",\"1681\":\"v-3e7ea72d#配置npm\",\"1682\":\"v-3e7ea72d#脚手架安装\",\"1683\":\"v-3e7ea72d#创建vue项目\",\"1684\":\"v-3e7ea72d#启动项目-停止项目\",\"1685\":\"v-3e7ea72d#vue-cli-脚手架的使用\",\"1686\":\"v-3e7ea72d#cli目录结构\",\"1687\":\"v-3e7ea72d#cli文件的编译过程\",\"1688\":\"v-3e7ea72d#vue-cli的起步文件\",\"1689\":\"v-3e7ea72d#main-js-文件\",\"1690\":\"v-3e7ea72d#public-index-html-根文件\",\"1691\":\"v-3e7ea72d#app-vue-文件\",\"1692\":\"v-7b0e94ba\",\"1693\":\"v-7b0e94ba#选项卡\",\"1694\":\"v-7b0e94ba#效果\",\"1695\":\"v-7b0e94ba#代码\",\"1696\":\"v-7b0e94ba#调色板\",\"1697\":\"v-7b0e94ba#效果-1\",\"1698\":\"v-7b0e94ba#代码-1\",\"1699\":\"v-7b0e94ba#消息框\",\"1700\":\"v-7b0e94ba#效果-2\",\"1701\":\"v-7b0e94ba#代码-2\",\"1702\":\"v-57426418\",\"1703\":\"v-57426418#组件的概述\",\"1704\":\"v-57426418#什么是组件\",\"1705\":\"v-57426418#为什么组件中data是函数\",\"1706\":\"v-57426418#自定义组件\",\"1707\":\"v-57426418#创建组件-vue文件\",\"1708\":\"v-57426418#引入组件-注册组件\",\"1709\":\"v-57426418#父子组件传值\",\"1710\":\"v-57426418#父组件传值给子组件\",\"1711\":\"v-57426418#基本语法-单个参数\",\"1712\":\"v-57426418#基本语法-多个参数\",\"1713\":\"v-57426418#基本语法-对象\",\"1714\":\"v-57426418#子组件修改父组件参数\",\"1715\":\"v-57426418#基本语法\",\"1716\":\"v-40b52e13\",\"1717\":\"v-40b52e13#路由的概念\",\"1718\":\"v-40b52e13#路由的使用\",\"1719\":\"v-3012fd4f\",\"1720\":\"v-3012fd4f#axios的概念\",\"1721\":\"v-3012fd4f#使用\",\"1722\":\"v-3012fd4f#演示\",\"1723\":\"v-3012fd4f#参数的拼接\",\"1724\":\"v-3012fd4f#普通参数\",\"1725\":\"v-3012fd4f#使用params\",\"1726\":\"v-3012fd4f#发送json\",\"1727\":\"v-48a0a91c\",\"1728\":\"v-48a0a91c#概念\",\"1729\":\"v-48a0a91c#vue对象的生命周期\",\"1730\":\"v-48a0a91c#生命周期钩子函数\",\"1731\":\"v-2d162610\",\"1732\":\"v-2d162610#什么是javaee\",\"1733\":\"v-2d162610#javaee的技术分布\",\"1734\":\"v-2d162610#javaee的版本变化\",\"1735\":\"v-2d162610#javaee应用服务器-javaee-application-server\",\"1736\":\"v-2d162610#web容器-web-server\",\"1737\":\"v-293b680f\",\"1738\":\"v-293b680f#tomcat的安装\",\"1739\":\"v-293b680f#下载\",\"1740\":\"v-293b680f#安装\",\"1741\":\"v-293b680f#启动\",\"1742\":\"v-293b680f#关闭\",\"1743\":\"v-293b680f#访问\",\"1744\":\"v-293b680f#tomcat目录结构\",\"1745\":\"v-842a4624\",\"1746\":\"v-842a4624#方式一-在webapps目录中\",\"1747\":\"v-842a4624#方式二-在其他目录中\",\"1748\":\"v-37a77bcd\",\"1749\":\"v-37a77bcd#tomcat的配置文件\",\"1750\":\"v-37a77bcd#context-xml\",\"1751\":\"v-37a77bcd#web-xml\",\"1752\":\"v-37a77bcd#server-xml\",\"1753\":\"v-37a77bcd#tomcat-users-xml\",\"1754\":\"v-37a77bcd#tomcat的配置\",\"1755\":\"v-37a77bcd#解决控制台乱码\",\"1756\":\"v-37a77bcd#修改tomcat监听端口\",\"1757\":\"v-37a77bcd#配置tomcat并发数\",\"1758\":\"v-37a77bcd#配置tomcat-manager\",\"1759\":\"v-37a77bcd#配置访问用户\",\"1760\":\"v-37a77bcd#tomcat的组件\",\"1761\":\"v-37a77bcd#tomcat体系结构图\",\"1762\":\"v-37a77bcd#核心组件\",\"1763\":\"v-37a77bcd#server组件\",\"1764\":\"v-37a77bcd#service组件\",\"1765\":\"v-37a77bcd#connector组件\",\"1766\":\"v-37a77bcd#engine组件\",\"1767\":\"v-37a77bcd#host组件\",\"1768\":\"v-37a77bcd#context组件\",\"1769\":\"v-37a77bcd#tomcat处理请求过程\",\"1770\":\"v-1ac06b30\",\"1771\":\"v-1ac06b30#初识javaweb目录结构\",\"1772\":\"v-1ac06b30#基本结构\",\"1773\":\"v-1ac06b30#层级关系\",\"1774\":\"v-1ac06b30#使用idea开发javaweb\",\"1775\":\"v-1ac06b30#创建工程\",\"1776\":\"v-1ac06b30#目录结构\",\"1777\":\"v-1ac06b30#使用idea运行项目\",\"1778\":\"v-1ac06b30#使用idea部署项目\",\"1779\":\"v-1ac06b30#第一种-默认\",\"1780\":\"v-1ac06b30#第二种\",\"1781\":\"v-f5df14fa\",\"1782\":\"v-f5df14fa#servlet简介\",\"1783\":\"v-f5df14fa#servlet技术特点\",\"1784\":\"v-f5df14fa#servlet在应用程序中的位置\",\"1785\":\"v-f5df14fa#静态资源和动态资源区分\",\"1786\":\"v-f5df14fa#servlet在程序中地位\",\"1787\":\"v-f5df14fa#快速开发\",\"1788\":\"v-f5df14fa#开发步骤\",\"1789\":\"v-f5df14fa#继承httpservlet-类-重写service方法\",\"1790\":\"v-f5df14fa#编写功能性代码\",\"1791\":\"v-f5df14fa#在web-xml中配置servlet的映射路径\",\"1792\":\"v-f5df14fa#一个简单的登录demo\",\"1793\":\"v-f5df14fa#创建登录页面\",\"1794\":\"v-f5df14fa#创建servlet\",\"1795\":\"v-f5df14fa#配置web-xml\",\"1796\":\"v-867a7f6a\",\"1797\":\"v-867a7f6a#httpservletrequest\",\"1798\":\"v-867a7f6a#了解请求结构\",\"1799\":\"v-867a7f6a#获取请求行\",\"1800\":\"v-867a7f6a#获取请求头信息\",\"1801\":\"v-867a7f6a#获取请求体信息\",\"1802\":\"v-867a7f6a#httpservletresponse\",\"1803\":\"v-867a7f6a#了解响应\",\"1804\":\"v-867a7f6a#响应状态\",\"1805\":\"v-867a7f6a#响应类型设置\",\"1806\":\"v-867a7f6a#设置字符型响应\",\"1807\":\"v-867a7f6a#设置文件下载\",\"1808\":\"v-867a7f6a#demo\",\"1809\":\"v-43d2dd7d\",\"1810\":\"v-43d2dd7d#控制台乱码\",\"1811\":\"v-43d2dd7d#post请求乱码\",\"1812\":\"v-43d2dd7d#get请求乱码\",\"1813\":\"v-43d2dd7d#响应乱码\",\"1814\":\"v-43d2dd7d#下载文件名乱码\",\"1815\":\"v-529cf904\",\"1816\":\"v-529cf904#servlet的继承结构\",\"1817\":\"v-529cf904#servlet接口\",\"1818\":\"v-529cf904#servletconfig接口\",\"1819\":\"v-529cf904#genericservlet抽象类\",\"1820\":\"v-529cf904#httpservlet\",\"1821\":\"v-529cf904#servlet的生命周期\",\"1822\":\"v-529cf904#容器管理阶段\",\"1823\":\"v-529cf904#执行流程\",\"1824\":\"v-529cf904#线程的安全性问题\",\"1825\":\"v-529cf904#简单的应用实例\",\"1826\":\"v-529cf904#servlet处理请求的过程\",\"1827\":\"v-59da8829\",\"1828\":\"v-59da8829#servletcontext对象\",\"1829\":\"v-59da8829#作用与api\",\"1830\":\"v-59da8829#生命周期\",\"1831\":\"v-59da8829#使用案例\",\"1832\":\"v-59da8829#servletconfig对象\",\"1833\":\"v-59da8829#作用与api-1\",\"1834\":\"v-59da8829#使用案例-1\",\"1835\":\"v-26a3eff0\",\"1836\":\"v-26a3eff0#url-pattern\",\"1837\":\"v-26a3eff0#匹配类型\",\"1838\":\"v-26a3eff0#精确匹配\",\"1839\":\"v-26a3eff0#拓展名匹配\",\"1840\":\"v-26a3eff0#路径匹配\",\"1841\":\"v-26a3eff0#任意匹配\",\"1842\":\"v-26a3eff0#匹配所有\",\"1843\":\"v-26a3eff0#匹配优先顺序\",\"1844\":\"v-26a3eff0#案例\",\"1845\":\"v-26a3eff0#url映射方式\",\"1846\":\"v-26a3eff0#方式一\",\"1847\":\"v-26a3eff0#方式二\",\"1848\":\"v-26a3eff0#注解模式\",\"1849\":\"v-26a3eff0#webservlet注解中属性\",\"1850\":\"v-26a3eff0#使用案例\",\"1851\":\"v-ed2f84b2\",\"1852\":\"v-ed2f84b2#请求转发\",\"1853\":\"v-ed2f84b2#forword转发\",\"1854\":\"v-ed2f84b2#处理流程\",\"1855\":\"v-ed2f84b2#处理特点\",\"1856\":\"v-ed2f84b2#测试代码\",\"1857\":\"v-ed2f84b2#include转发\",\"1858\":\"v-ed2f84b2#处理流程-1\",\"1859\":\"v-ed2f84b2#处理特点-1\",\"1860\":\"v-ed2f84b2#测试代码-1\",\"1861\":\"v-ed2f84b2#注意事项\",\"1862\":\"v-ed2f84b2#响应重定向\",\"1863\":\"v-ed2f84b2#处理流程-2\",\"1864\":\"v-ed2f84b2#测试代码-2\",\"1865\":\"v-ed2f84b2#注意事项-1\",\"1866\":\"v-f5666c74\",\"1867\":\"v-f5666c74#前端路径问题\",\"1868\":\"v-f5666c74#相对路径与绝对路径\",\"1869\":\"v-f5666c74#base基准路径\",\"1870\":\"v-f5666c74#演示案例\",\"1871\":\"v-f5666c74#请求转发路径\",\"1872\":\"v-f5666c74#相对路径与绝对路径-1\",\"1873\":\"v-f5666c74#注意事项\",\"1874\":\"v-f5666c74#演示代码\",\"1875\":\"v-f5666c74#响应重定向路径\",\"1876\":\"v-f5666c74#相对路径与绝对路径-2\",\"1877\":\"v-f5666c74#注意事项-1\",\"1878\":\"v-f5666c74#演示代码-1\",\"1879\":\"v-f5666c74#路径的使用和记忆建议\",\"1880\":\"v-6d11e076\",\"1881\":\"v-6d11e076#初识cookie和session\",\"1882\":\"v-6d11e076#相关概念\",\"1883\":\"v-6d11e076#执行流程\",\"1884\":\"v-6d11e076#cookie的使用\",\"1885\":\"v-6d11e076#cookie对象的特点\",\"1886\":\"v-6d11e076#cookie对象的api\",\"1887\":\"v-6d11e076#cookie对象的创建\",\"1888\":\"v-6d11e076#cookie对象的获取\",\"1889\":\"v-6d11e076#cookie不支持中文的解决方案\",\"1890\":\"v-6d11e076#cookie持久化和状态cookie\",\"1891\":\"v-6d11e076#cookie跨越\",\"1892\":\"v-6d11e076#综合demo\",\"1893\":\"v-6d11e076#cookie案例\",\"1894\":\"v-6d11e076#session的使用\",\"1895\":\"v-6d11e076#session特点\",\"1896\":\"v-6d11e076#httpsession对象\",\"1897\":\"v-6d11e076#对象的创建\",\"1898\":\"v-6d11e076#数据的获取\",\"1899\":\"v-6d11e076#销毁方式\",\"1900\":\"v-6d11e076#生命周期\",\"1901\":\"v-6d11e076#session和cookie的总结\",\"1902\":\"v-6d11e076#区别\",\"1903\":\"v-6d11e076#建议\",\"1904\":\"v-6d11e076#session和cookie的综合案例\",\"1905\":\"v-6d11e076#目录结构\",\"1906\":\"v-6d11e076#组件\",\"1907\":\"v-6d11e076#login-html\",\"1908\":\"v-6d11e076#main-html\",\"1909\":\"v-6d11e076#loginservlet-java\",\"1910\":\"v-6d11e076#mainservlet-java\",\"1911\":\"v-6d11e076#user-java\",\"1912\":\"v-23f5ccbf\",\"1913\":\"v-23f5ccbf#概念\",\"1914\":\"v-23f5ccbf#request域\",\"1915\":\"v-23f5ccbf#有效范围\",\"1916\":\"v-23f5ccbf#生命周期\",\"1917\":\"v-23f5ccbf#演示代码\",\"1918\":\"v-23f5ccbf#session域\",\"1919\":\"v-23f5ccbf#有效范围-1\",\"1920\":\"v-23f5ccbf#生命周期-1\",\"1921\":\"v-23f5ccbf#演示代码-1\",\"1922\":\"v-23f5ccbf#application域\",\"1923\":\"v-23f5ccbf#有效范围-2\",\"1924\":\"v-23f5ccbf#生命周期-2\",\"1925\":\"v-23f5ccbf#演示代码-2\",\"1926\":\"v-dbf5b2d8\",\"1927\":\"v-dbf5b2d8#jsp-简介\",\"1928\":\"v-dbf5b2d8#jsp做动态显示demo\",\"1929\":\"v-dbf5b2d8#jsp运行原理\",\"1930\":\"v-dbf5b2d8#jsp执行过程\",\"1931\":\"v-dbf5b2d8#具体过程\",\"1932\":\"v-dbf5b2d8#继承结构\",\"1933\":\"v-dbf5b2d8#httpjspbase\",\"1934\":\"v-dbf5b2d8#jsp加载引擎\",\"1935\":\"v-dbf5b2d8#作用\",\"1936\":\"v-dbf5b2d8#jsp的性能问题\",\"1937\":\"v-446453cf\",\"1938\":\"v-446453cf#交互形式\",\"1939\":\"v-446453cf#代码组织形式\",\"1940\":\"v-446453cf#半分离\",\"1941\":\"v-446453cf#分离\",\"1942\":\"v-446453cf#数据接口规范流程\",\"1943\":\"v-446453cf#前后端分离常用框架\",\"1944\":\"v-446453cf#前后端分离的好处\",\"1945\":\"v-446453cf#前后端明确的工作职责\",\"1946\":\"v-446453cf#提升开发效率\",\"1947\":\"v-446453cf#完美应对复杂多变的前端需求\",\"1948\":\"v-446453cf#增强代码可维护性\",\"1949\":\"v-111a8dc4\",\"1950\":\"v-111a8dc4#jsp得性能问题\",\"1951\":\"v-111a8dc4#jsp中的变量问题\",\"1952\":\"v-111a8dc4#jsp中的注释问题\",\"1953\":\"v-111a8dc4#jsp的使用建议\",\"1954\":\"v-e8179bbe\",\"1955\":\"v-e8179bbe#page指令标签\",\"1956\":\"v-e8179bbe#什么是指令标签\",\"1957\":\"v-e8179bbe#指令标签的语法\",\"1958\":\"v-e8179bbe#jsp中的三种指令标签\",\"1959\":\"v-e8179bbe#page指令标签-1\",\"1960\":\"v-e8179bbe#page指令的使用\",\"1961\":\"v-e8179bbe#include指令标签\",\"1962\":\"v-e8179bbe#静态引入和动态引入\",\"1963\":\"v-e8179bbe#taglib指令标签\",\"1964\":\"v-e8179bbe#taglib指令的语法\",\"1965\":\"v-5a9e764c\",\"1966\":\"v-5a9e764c#什么是内置对象\",\"1967\":\"v-5a9e764c#jsp的九大内置对象\",\"1968\":\"v-5a9e764c#四个域对象\",\"1969\":\"v-5a9e764c#响应对象\",\"1970\":\"v-5a9e764c#输出流对象\",\"1971\":\"v-5a9e764c#其他三个对象\",\"1972\":\"v-5a9e764c#九大内置对象的使用\",\"1973\":\"v-5a9e764c#综合案例开发\",\"1974\":\"v-5a9e764c#构建项目结构\",\"1975\":\"v-5a9e764c#匹配规则\",\"1976\":\"v-5a9e764c#相关代码\",\"1977\":\"v-4b88ba6a\",\"1978\":\"v-4b88ba6a#什么是el表达式\",\"1979\":\"v-4b88ba6a#el表达式取出域中的数据\",\"1980\":\"v-4b88ba6a#指定域中取出数据\",\"1981\":\"v-4b88ba6a#省略域取数据\",\"1982\":\"v-4b88ba6a#取请求中的参数\",\"1983\":\"v-4b88ba6a#总结\",\"1984\":\"v-4b88ba6a#el表达式对运算符的支持\",\"1985\":\"v-4b88ba6a#运算符的分类\",\"1986\":\"v-4b88ba6a#el表达式运算符的使用\",\"1987\":\"v-4b88ba6a#算数运算符\",\"1988\":\"v-4b88ba6a#关系运算符-比较运算符\",\"1989\":\"v-4b88ba6a#逻辑运算符\",\"1990\":\"v-4b88ba6a#条件运算符-三目运算符\",\"1991\":\"v-4b88ba6a#判断空运算符\",\"1992\":\"v-556d813f\",\"1993\":\"v-556d813f#引入过滤器\",\"1994\":\"v-556d813f#什么是过滤器\",\"1995\":\"v-556d813f#过滤器如何实现功能\",\"1996\":\"v-556d813f#过滤器的定义与配置\",\"1997\":\"v-556d813f#开发servlet\",\"1998\":\"v-556d813f#开发filter\",\"1999\":\"v-556d813f#配置filter\",\"2000\":\"v-556d813f#过滤器的生命周期\",\"2001\":\"v-556d813f#过滤器的结构\",\"2002\":\"v-556d813f#构造方法\",\"2003\":\"v-556d813f#初始化方法\",\"2004\":\"v-556d813f#拦截请求方法\",\"2005\":\"v-556d813f#销毁方法\",\"2006\":\"v-556d813f#生命周期\",\"2007\":\"v-6fbaa36c\",\"2008\":\"v-6fbaa36c#jstl核心标签库\",\"2009\":\"v-6fbaa36c#认识jstl\",\"2010\":\"v-6fbaa36c#为什么要学习jstl\",\"2011\":\"v-6fbaa36c#什么是jstl\",\"2012\":\"v-6fbaa36c#使用jstl的好处\",\"2013\":\"v-6fbaa36c#jstl标签库的组成部分\",\"2014\":\"v-6fbaa36c#jstl的使用前提\",\"2015\":\"v-6fbaa36c#jstl的使用\",\"2016\":\"v-6fbaa36c#导入核心标签库\",\"2017\":\"v-6fbaa36c#操作域对象的标签\",\"2018\":\"v-6fbaa36c#向域对象放入值\",\"2019\":\"v-6fbaa36c#移除对象中的值\",\"2020\":\"v-6fbaa36c#获取域对象中的值\",\"2021\":\"v-6fbaa36c#多条件分支标签\",\"2022\":\"v-6fbaa36c#c-if-标签\",\"2023\":\"v-6fbaa36c#c-choose标签\",\"2024\":\"v-6fbaa36c#迭代标签\",\"2025\":\"v-6fbaa36c#c-foreach标签\",\"2026\":\"v-6fbaa36c#jstl格式化标签\",\"2027\":\"v-6fbaa36c#格式化标签库\",\"2028\":\"v-6fbaa36c#导入语句\",\"2029\":\"v-6fbaa36c#fmt标签属性\",\"2030\":\"v-6fbaa36c#日期格式化\",\"2031\":\"v-6fbaa36c#格式化标签案例开发\",\"2032\":\"v-13a7a709\",\"2033\":\"v-13a7a709#mvc模式介绍\",\"2034\":\"v-13a7a709#什么是mvc模式\",\"2035\":\"v-13a7a709#mvc的优势\",\"2036\":\"v-13a7a709#耦合性低\",\"2037\":\"v-13a7a709#重用性高\",\"2038\":\"v-13a7a709#开发效率提高-人员职责明确\",\"2039\":\"v-13a7a709#耦合度低-可维护性高\",\"2040\":\"v-13a7a709#有利软件工程化管理\",\"2041\":\"v-13a7a709#mvc分层及责任划分\",\"2042\":\"v-13a7a709#项目分层结构设计\",\"2043\":\"v-13a7a709#层次之间的特点\",\"2044\":\"v-321fc66a\",\"2045\":\"v-321fc66a#过滤器链的使用\",\"2046\":\"v-321fc66a#什么是过滤链\",\"2047\":\"v-321fc66a#代码案例\",\"2048\":\"v-321fc66a#过滤器初始化参数\",\"2049\":\"v-321fc66a#使用案例\",\"2050\":\"v-321fc66a#过滤器注解的应用\",\"2051\":\"v-321fc66a#注解的属性\",\"2052\":\"v-321fc66a#注解的使用\",\"2053\":\"v-71ed0549\",\"2054\":\"v-71ed0549#post乱码处理\",\"2055\":\"v-71ed0549#前端资源-login-jsp\",\"2056\":\"v-71ed0549#准备servlet-logincontroller\",\"2057\":\"v-71ed0549#准备过滤器\",\"2058\":\"v-71ed0549#配置过滤器\",\"2059\":\"v-71ed0549#登录验证\",\"2060\":\"v-71ed0549#准备静态资源\",\"2061\":\"v-71ed0549#准备实体类\",\"2062\":\"v-71ed0549#准备servlet\",\"2063\":\"v-71ed0549#准备过滤器-1\",\"2064\":\"v-6fcb2e38\",\"2065\":\"v-6fcb2e38#了解监听器\",\"2066\":\"v-6fcb2e38#什么是监听器\",\"2067\":\"v-6fcb2e38#监听器的分类\",\"2068\":\"v-6fcb2e38#按监听的对象划分\",\"2069\":\"v-6fcb2e38#按监听的事件划分\",\"2070\":\"v-6fcb2e38#监听器有哪些\",\"2071\":\"v-6fcb2e38#reqest域监听器\",\"2072\":\"v-6fcb2e38#session域监听器\",\"2073\":\"v-6fcb2e38#application-域监听器\",\"2074\":\"v-6fcb2e38#监听器的使用\",\"2075\":\"v-6fcb2e38#requet域监听器\",\"2076\":\"v-6fcb2e38#servletrequestlistener\",\"2077\":\"v-6fcb2e38#servlerequestattributelistener\",\"2078\":\"v-6fcb2e38#session域监听器-1\",\"2079\":\"v-6fcb2e38#httpsessionlistener\",\"2080\":\"v-6fcb2e38#httpsessionattributelistener\",\"2081\":\"v-6fcb2e38#httpsessionbindinglistener\",\"2082\":\"v-6fcb2e38#httpsessionactivationlistener\",\"2083\":\"v-6fcb2e38#application域监听器\",\"2084\":\"v-6fcb2e38#servletcontextlistener\",\"2085\":\"v-6fcb2e38#servletcontextattributelistener\",\"2086\":\"v-28bb7a11\",\"2087\":\"v-28bb7a11#记录请求日志\",\"2088\":\"v-28bb7a11#统计实时在线人数\",\"2089\":\"v-28bb7a11#项目重启免登录\",\"2090\":\"v-28bb7a11#相关概念\",\"2091\":\"v-28bb7a11#实现步骤\",\"2092\":\"v-28bb7a11#准备工作\",\"2093\":\"v-28bb7a11#准备实体类\",\"2094\":\"v-28bb7a11#登陆页面\",\"2095\":\"v-28bb7a11#验证登录信息\",\"2096\":\"v-28bb7a11#校验登录信息\",\"2097\":\"v-28bb7a11#监听钝化和活化\",\"2098\":\"v-28bb7a11#测试\",\"2099\":\"v-eeac58f2\",\"2100\":\"v-eeac58f2#同步交互与异步交互\",\"2101\":\"v-eeac58f2#什么是同步交互\",\"2102\":\"v-eeac58f2#优点\",\"2103\":\"v-eeac58f2#缺点\",\"2104\":\"v-eeac58f2#什么是异步交互\",\"2105\":\"v-eeac58f2#优点-1\",\"2106\":\"v-eeac58f2#缺点-1\",\"2107\":\"v-eeac58f2#ajax\",\"2108\":\"v-eeac58f2#什么是ajax\",\"2109\":\"v-eeac58f2#ajax关键技术\",\"2110\":\"v-eeac58f2#ajax的特点\",\"2111\":\"v-eeac58f2#体验原生异步\",\"2112\":\"v-eeac58f2#实现步骤\",\"2113\":\"v-eeac58f2#相关代码\",\"2114\":\"v-eeac58f2#页面代码\",\"2115\":\"v-eeac58f2#servlet代码\",\"2116\":\"v-eeac58f2#存在问题\",\"2117\":\"v-c0b6e1f4\",\"2118\":\"v-c0b6e1f4#ajax数据格式处理\",\"2119\":\"v-c0b6e1f4#响应普通文本数据\",\"2120\":\"v-c0b6e1f4#前端代码\",\"2121\":\"v-c0b6e1f4#后台代码\",\"2122\":\"v-c0b6e1f4#总结\",\"2123\":\"v-c0b6e1f4#json的介绍和应用\",\"2124\":\"v-c0b6e1f4#优点\",\"2125\":\"v-c0b6e1f4#json-与-js-对象的关系\",\"2126\":\"v-c0b6e1f4#json和js对象互转\",\"2127\":\"v-c0b6e1f4#gson工具类的使用\",\"2128\":\"v-c0b6e1f4#使用案例\",\"2129\":\"v-239998da\",\"2130\":\"v-239998da#jquery-ajax-的简单使用\",\"2131\":\"v-239998da#经典使用方法\",\"2132\":\"v-239998da#获取json格式\",\"2133\":\"v-239998da#jquery-ajax-属性说明\",\"2134\":\"v-239998da#说明\",\"2135\":\"v-239998da#url\",\"2136\":\"v-239998da#type\",\"2137\":\"v-239998da#timeout\",\"2138\":\"v-239998da#async\",\"2139\":\"v-239998da#cache\",\"2140\":\"v-239998da#data\",\"2141\":\"v-239998da#datatype\",\"2142\":\"v-239998da#beforesend\",\"2143\":\"v-239998da#complete\",\"2144\":\"v-239998da#success\",\"2145\":\"v-239998da#error\",\"2146\":\"v-239998da#contenttype\",\"2147\":\"v-239998da#datafilter\",\"2148\":\"v-239998da#global\",\"2149\":\"v-239998da#ifmodified\",\"2150\":\"v-239998da#jsonp\",\"2151\":\"v-239998da#username\",\"2152\":\"v-239998da#password\",\"2153\":\"v-239998da#processdata\",\"2154\":\"v-239998da#scriptcharset\",\"2155\":\"v-239998da#具体代码说明\",\"2156\":\"v-239998da#jquery实现ajax的其他写法\",\"2157\":\"v-239998da#load\",\"2158\":\"v-239998da#语法\",\"2159\":\"v-239998da#测试代码\",\"2160\":\"v-239998da#get\",\"2161\":\"v-239998da#语法-1\",\"2162\":\"v-239998da#getjson\",\"2163\":\"v-239998da#语法-2\",\"2164\":\"v-239998da#post\",\"2165\":\"v-239998da#语法-3\",\"2166\":\"v-239998da#测试代码-1\",\"2167\":\"v-39af74fc\",\"2168\":\"v-39af74fc#什么是跨域\",\"2169\":\"v-39af74fc#测试跨域限制\",\"2170\":\"v-39af74fc#jsonp实现跨域请求\",\"2171\":\"v-39af74fc#通过getjson方实现跨域请求\",\"2172\":\"v-39af74fc#通过过滤器跨域\",\"2173\":\"v-e17639ba\",\"2174\":\"v-e17639ba#数据准备\",\"2175\":\"v-e17639ba#项目搭建\",\"2176\":\"v-e17639ba#项目代码\",\"2177\":\"v-0cbbbf66\",\"2178\":\"v-0cbbbf66#了解mybatisplus\",\"2179\":\"v-0cbbbf66#特点\",\"2180\":\"v-0cbbbf66#入门案例\",\"2181\":\"v-0cbbbf66#准备数据\",\"2182\":\"v-0cbbbf66#表结构\",\"2183\":\"v-0cbbbf66#初始化数据\",\"2184\":\"v-0cbbbf66#创建项目环境\",\"2185\":\"v-0cbbbf66#创建springboot项目\",\"2186\":\"v-0cbbbf66#调整pom-xml依赖\",\"2187\":\"v-0cbbbf66#修改链接文件\",\"2188\":\"v-0cbbbf66#修改包扫面路径\",\"2189\":\"v-0cbbbf66#创建案例所需文件\",\"2190\":\"v-0cbbbf66#添加user实体类\",\"2191\":\"v-0cbbbf66#创建mapper接口\",\"2192\":\"v-0cbbbf66#创建测试类\",\"2193\":\"v-0cbbbf66#指定日志输出\",\"2194\":\"v-1c03d384\",\"2195\":\"v-1c03d384#为什么要使用mybatis\",\"2196\":\"v-1c03d384#了解mybatis\",\"2197\":\"v-1c03d384#什么是框架\",\"2198\":\"v-1c03d384#什么是orm\",\"2199\":\"v-1c03d384#什么是持久层\",\"2200\":\"v-d2e902b8\",\"2201\":\"v-d2e902b8#basemapper简单的crud\",\"2202\":\"v-d2e902b8#查询用户\",\"2203\":\"v-d2e902b8#查询所有-selectlist\",\"2204\":\"v-d2e902b8#根据id查询-selectbyid\",\"2205\":\"v-d2e902b8#根据map查询-selectbymap\",\"2206\":\"v-d2e902b8#新增用户-insert\",\"2207\":\"v-d2e902b8#删除用户\",\"2208\":\"v-d2e902b8#根据id单一删除-deletebyid\",\"2209\":\"v-d2e902b8#根据id批量删除-deletebatchids\",\"2210\":\"v-d2e902b8#根据map删除-deletebymap\",\"2211\":\"v-d2e902b8#修改用户-updatebyid\",\"2212\":\"v-d2e902b8#iservice接口\",\"2213\":\"v-d2e902b8#了解iservice接口\",\"2214\":\"v-d2e902b8#为什么要使用iservice接口\",\"2215\":\"v-d2e902b8#构建iservice接口环境\",\"2216\":\"v-d2e902b8#创建userservice接口-继承-iservice\",\"2217\":\"v-d2e902b8#创建接口实现类-继承-serviceimpl-实现userservice接口\",\"2218\":\"v-d2e902b8#iservice接口实现的crud\",\"2219\":\"v-d2e902b8#查询操作\",\"2220\":\"v-d2e902b8#批量插入\",\"2221\":\"v-060fde0f\",\"2222\":\"v-060fde0f#常用注解\",\"2223\":\"v-060fde0f#指定表名-tablename\",\"2224\":\"v-060fde0f#直接配置\",\"2225\":\"v-060fde0f#全局配置\",\"2226\":\"v-060fde0f#指定主键-tableid\",\"2227\":\"v-060fde0f#主键策略\",\"2228\":\"v-060fde0f#直接配置-1\",\"2229\":\"v-060fde0f#全局配置-1\",\"2230\":\"v-060fde0f#指定字段-tablefield\",\"2231\":\"v-060fde0f#逻辑删除-tablelogic\",\"2232\":\"v-060fde0f#直接配置-2\",\"2233\":\"v-060fde0f#创建逻辑删除字段\",\"2234\":\"v-060fde0f#修改实体类\",\"2235\":\"v-060fde0f#全局配置-2\",\"2236\":\"v-060fde0f#条件构造器\",\"2237\":\"v-060fde0f#wrapper接口\",\"2238\":\"v-060fde0f#wrapper的常用api\",\"2239\":\"v-060fde0f#ge、gt、le、lt、isnull、isnotnull\",\"2240\":\"v-060fde0f#eq、ne\",\"2241\":\"v-060fde0f#between、notbetween\",\"2242\":\"v-060fde0f#alleq\",\"2243\":\"v-060fde0f#like、notlike、likeleft、likeright\",\"2244\":\"v-060fde0f#in、notin、insql、notinsql、exists、notexists\",\"2245\":\"v-060fde0f#or、and\",\"2246\":\"v-060fde0f#嵌套or、嵌套and\",\"2247\":\"v-060fde0f#orderby、orderbydesc、orderbyasc\",\"2248\":\"v-060fde0f#last\",\"2249\":\"v-060fde0f#select\",\"2250\":\"v-060fde0f#set、setsql\",\"2251\":\"v-060fde0f#接口的使用\",\"2252\":\"v-060fde0f#querywrapper\",\"2253\":\"v-060fde0f#查询条件\",\"2254\":\"v-060fde0f#排序查询\",\"2255\":\"v-060fde0f#删除条件\",\"2256\":\"v-060fde0f#组合条件\",\"2257\":\"v-060fde0f#查询特定的字段\",\"2258\":\"v-060fde0f#实现子查询\",\"2259\":\"v-060fde0f#updatewrapper\",\"2260\":\"v-060fde0f#动态sql\",\"2261\":\"v-75eca2a5\",\"2262\":\"v-75eca2a5#创建maven项目\",\"2263\":\"v-75eca2a5#创建项目\",\"2264\":\"v-75eca2a5#配置项目环境\",\"2265\":\"v-75eca2a5#配置maven包\",\"2266\":\"v-75eca2a5#修改使用的maven\",\"2267\":\"v-75eca2a5#修改maven的pom-xml\",\"2268\":\"v-75eca2a5#配置编译环境\",\"2269\":\"v-75eca2a5#修改项目编译版本\",\"2270\":\"v-75eca2a5#安装插件\",\"2271\":\"v-75eca2a5#安装lombok\",\"2272\":\"v-75eca2a5#安装mybatisx\",\"2273\":\"v-75eca2a5#准备项目结构与数据\",\"2274\":\"v-75eca2a5#导入数据库\",\"2275\":\"v-75eca2a5#创建项目结构\",\"2276\":\"v-75eca2a5#创建实体类\",\"2277\":\"v-75eca2a5#准备mybatis的配置\",\"2278\":\"v-75eca2a5#sqlmapconfig-xml-配置文件\",\"2279\":\"v-75eca2a5#deptmapper-xml映射文件\",\"2280\":\"v-75eca2a5#测试代码\",\"2281\":\"v-75eca2a5#基础写法思路\",\"2282\":\"v-75eca2a5#相关测试代码\",\"2283\":\"v-2fa6bb0e\",\"2284\":\"v-2fa6bb0e#分页插件\",\"2285\":\"v-2fa6bb0e#创建插件配置类\",\"2286\":\"v-2fa6bb0e#使用插件\",\"2287\":\"v-2fa6bb0e#乐观锁\",\"2288\":\"v-2fa6bb0e#配置插件\",\"2289\":\"v-2fa6bb0e#在实体类的字段上加上-version注解\",\"2290\":\"v-2fa6bb0e#案例\",\"2291\":\"v-2fa6bb0e#代码生成器\",\"2292\":\"v-2fa6bb0e#添加依赖\",\"2293\":\"v-2fa6bb0e#运行代码\",\"2294\":\"v-2fa6bb0e#性能分析\",\"2295\":\"v-2fa6bb0e#配置插件-1\",\"2296\":\"v-2fa6bb0e#引入依赖\",\"2297\":\"v-2fa6bb0e#配置文件修改\",\"2298\":\"v-2fa6bb0e#spy-properties\",\"2299\":\"v-2fa6bb0e#自定义格式化\",\"2300\":\"v-2fa6bb0e#p6spy有3中日志输出方式\",\"2301\":\"v-2fa6bb0e#spy-properties详细说明\",\"2302\":\"v-251ca602\",\"2303\":\"v-251ca602#导入log4j日志框架\",\"2304\":\"v-251ca602#回顾之前在jdbc中的使用\",\"2305\":\"v-251ca602#在maven中使用log4j\",\"2306\":\"v-251ca602#导入log4j1\",\"2307\":\"v-251ca602#配置pom文件\",\"2308\":\"v-251ca602#配置loj4g-properties文件\",\"2309\":\"v-251ca602#效果\",\"2310\":\"v-251ca602#导入log4j2\",\"2311\":\"v-251ca602#配置pom文件-1\",\"2312\":\"v-251ca602#配置log4j2-xml文件\",\"2313\":\"v-251ca602#效果-1\",\"2314\":\"v-251ca602#配置mybatis使用的日志\",\"2315\":\"v-251ca602#修改sqlmapconfig-xml文件\",\"2316\":\"v-251ca602#事务配置\",\"2317\":\"v-251ca602#jdbc\",\"2318\":\"v-251ca602#managed\",\"2319\":\"v-251ca602#映射文件的加载方式\",\"2320\":\"v-251ca602#使用类路径的资源引用\",\"2321\":\"v-251ca602#使用接口的全限定名导入\",\"2322\":\"v-251ca602#使用完全限定资源定位符-url\",\"2323\":\"v-251ca602#将包内的映射器接口全部注册为映射器\",\"2324\":\"v-251ca602#实体类别名处理\",\"2325\":\"v-251ca602#手动指定-typealias\",\"2326\":\"v-251ca602#配置文件代码\",\"2327\":\"v-251ca602#使用\",\"2328\":\"v-251ca602#包扫描-package\",\"2329\":\"v-251ca602#配置文件代码-1\",\"2330\":\"v-251ca602#使用-1\",\"2331\":\"v-251ca602#外部属性配置文件存储数据库链接信息\",\"2332\":\"v-251ca602#创建外部properties文件\",\"2333\":\"v-251ca602#优先级\",\"2334\":\"v-251ca602#设置默认值\",\"2335\":\"v-251ca602#补充\",\"2336\":\"v-f5efca6a\",\"2337\":\"v-f5efca6a#构建环境\",\"2338\":\"v-f5efca6a#新增emp实体类\",\"2339\":\"v-f5efca6a#新增empmapper-xml\",\"2340\":\"v-f5efca6a#新增xml文件映射\",\"2341\":\"v-f5efca6a#新增测试类\",\"2342\":\"v-f5efca6a#sqlsession-查询的三种方式\",\"2343\":\"v-f5efca6a#返回单个对象\",\"2344\":\"v-f5efca6a#mapper层\",\"2345\":\"v-f5efca6a#测试代码\",\"2346\":\"v-f5efca6a#返回对象的list集合\",\"2347\":\"v-f5efca6a#mapper层-1\",\"2348\":\"v-f5efca6a#测试代码-1\",\"2349\":\"v-f5efca6a#返回对象的map集合\",\"2350\":\"v-f5efca6a#mapper层-2\",\"2351\":\"v-f5efca6a#测试代码-2\",\"2352\":\"v-f5efca6a#sqlsession的参数传递\",\"2353\":\"v-f5efca6a#单一参数传递\",\"2354\":\"v-f5efca6a#mapper层-3\",\"2355\":\"v-f5efca6a#测试代码-3\",\"2356\":\"v-f5efca6a#多参数map传递\",\"2357\":\"v-f5efca6a#测试代码-4\",\"2358\":\"v-f5efca6a#多参数实体类对象传递\",\"2359\":\"v-f5efca6a#测试代码-5\",\"2360\":\"v-f5efca6a#sqlsession实现dml全部操作\",\"2361\":\"v-f5efca6a#增加\",\"2362\":\"v-f5efca6a#mapper层-4\",\"2363\":\"v-f5efca6a#测试代码-6\",\"2364\":\"v-f5efca6a#修改\",\"2365\":\"v-f5efca6a#mapper层-5\",\"2366\":\"v-f5efca6a#测试代码-7\",\"2367\":\"v-f5efca6a#删除\",\"2368\":\"v-f5efca6a#mapper层-6\",\"2369\":\"v-f5efca6a#测试代码-8\",\"2370\":\"v-2d7f010a\",\"2371\":\"v-2d7f010a#为什么要基于代理模式开发\",\"2372\":\"v-2d7f010a#构建项目结构\",\"2373\":\"v-2d7f010a#项目环境\",\"2374\":\"v-2d7f010a#构建步骤\",\"2375\":\"v-2d7f010a#注意事项\",\"2376\":\"v-2d7f010a#简单的demo\",\"2377\":\"v-2d7f010a#创建接口中的抽象方法\",\"2378\":\"v-2d7f010a#创建mapper-xml中的查询语句\",\"2379\":\"v-2d7f010a#使用测试类测试\",\"2380\":\"v-2d7f010a#代理模式浅析\",\"2381\":\"v-2d7f010a#代理模式基本开发\",\"2382\":\"v-2d7f010a#参数传递问题\",\"2383\":\"v-2d7f010a#单一参数\",\"2384\":\"v-2d7f010a#empmapper接口\",\"2385\":\"v-2d7f010a#empmapper-xml\",\"2386\":\"v-2d7f010a#测试类\",\"2387\":\"v-2d7f010a#多参数\",\"2388\":\"v-2d7f010a#方式一-arg\",\"2389\":\"v-2d7f010a#方式二-param\",\"2390\":\"v-2d7f010a#方式三-param别名\",\"2391\":\"v-2d7f010a#测试类-1\",\"2392\":\"v-2d7f010a#集合\",\"2393\":\"v-2d7f010a#empmapper接口-1\",\"2394\":\"v-2d7f010a#empmapper-xml-1\",\"2395\":\"v-2d7f010a#测试类-2\",\"2396\":\"v-2d7f010a#单个引用对象\",\"2397\":\"v-2d7f010a#empmapper接口-2\",\"2398\":\"v-2d7f010a#empmapper-xml-2\",\"2399\":\"v-2d7f010a#测试类-3\",\"2400\":\"v-2d7f010a#多个引用对象\",\"2401\":\"v-2d7f010a#方式一-arg-1\",\"2402\":\"v-2d7f010a#方式二-param-1\",\"2403\":\"v-2d7f010a#方式三-param别名-1\",\"2404\":\"v-2d7f010a#测试类-4\",\"2405\":\"v-2d7f010a#模糊查询\",\"2406\":\"v-2d7f010a#方式一-直接在参数中处理\",\"2407\":\"v-2d7f010a#方式二-使用concat-函数拼接-推荐\",\"2408\":\"v-2d7f010a#自增主键回填\",\"2409\":\"v-2d7f010a#方式一-usegeneratedkeys-推荐\",\"2410\":\"v-2d7f010a#方式二-selectkey标签\",\"2411\":\"v-2d7f010a#实现dml操作\",\"2412\":\"v-2d7f010a#新增\",\"2413\":\"v-2d7f010a#查询\",\"2414\":\"v-2d7f010a#修改\",\"2415\":\"v-2d7f010a#删除\",\"2416\":\"v-0b046d68\",\"2417\":\"v-0b046d68#数据准备\",\"2418\":\"v-0b046d68#resultmap标签\",\"2419\":\"v-0b046d68#resulttype和resultmap\",\"2420\":\"v-0b046d68#resultmap标签解析\",\"2421\":\"v-0b046d68#关联查询\",\"2422\":\"v-0b046d68#手动映射\",\"2423\":\"v-0b046d68#一对一查询-association子属性\",\"2424\":\"v-0b046d68#分析\",\"2425\":\"v-0b046d68#代码\",\"2426\":\"v-0b046d68#一对多查询-collection子属性\",\"2427\":\"v-0b046d68#分析-1\",\"2428\":\"v-0b046d68#代码-1\",\"2429\":\"v-0b046d68#多对多查询-组合使用\",\"2430\":\"v-0b046d68#分析-2\",\"2431\":\"v-0b046d68#代码-2\",\"2432\":\"v-0b046d68#级联查询\",\"2433\":\"v-0b046d68#语法\",\"2434\":\"v-0b046d68#积极加载与懒加载\",\"2435\":\"v-0b046d68#案例\",\"2436\":\"v-0b046d68#总结\",\"2437\":\"v-0b046d68#resultmap中的常见属性\",\"2438\":\"v-0b046d68#级联查询和多表查询的比较及其选择\",\"2439\":\"v-0b046d68#resulttype和resultmap使用场景\",\"2440\":\"v-0b046d68#多表之间的实现步骤\",\"2441\":\"v-fa5cce6e\",\"2442\":\"v-fa5cce6e#if标签\",\"2443\":\"v-fa5cce6e#语法\",\"2444\":\"v-fa5cce6e#案例\",\"2445\":\"v-fa5cce6e#where标签\",\"2446\":\"v-fa5cce6e#语法-1\",\"2447\":\"v-fa5cce6e#案例-1\",\"2448\":\"v-fa5cce6e#choose标签\",\"2449\":\"v-fa5cce6e#语法-2\",\"2450\":\"v-fa5cce6e#案例-2\",\"2451\":\"v-fa5cce6e#set标签\",\"2452\":\"v-fa5cce6e#语法-3\",\"2453\":\"v-fa5cce6e#案例-3\",\"2454\":\"v-fa5cce6e#trim标签\",\"2455\":\"v-fa5cce6e#语法-4\",\"2456\":\"v-fa5cce6e#案例-4\",\"2457\":\"v-fa5cce6e#bind标签\",\"2458\":\"v-fa5cce6e#语法-5\",\"2459\":\"v-fa5cce6e#案例-5\",\"2460\":\"v-fa5cce6e#sql标签与include标签\",\"2461\":\"v-fa5cce6e#语法-6\",\"2462\":\"v-fa5cce6e#案例-6\",\"2463\":\"v-fa5cce6e#foreach标签\",\"2464\":\"v-fa5cce6e#语法-7\",\"2465\":\"v-fa5cce6e#案例-7\",\"2466\":\"v-fa5cce6e#测试数组\",\"2467\":\"v-fa5cce6e#测试集合\",\"2468\":\"v-270e713d\",\"2469\":\"v-270e713d#了解缓存\",\"2470\":\"v-270e713d#什么时缓存\",\"2471\":\"v-270e713d#缓存的使用顺序\",\"2472\":\"v-270e713d#缓存的效力范围\",\"2473\":\"v-270e713d#一级缓存\",\"2474\":\"v-270e713d#开启缓存\",\"2475\":\"v-270e713d#案例\",\"2476\":\"v-270e713d#注意事项\",\"2477\":\"v-270e713d#二级缓存\",\"2478\":\"v-270e713d#开启缓存-1\",\"2479\":\"v-270e713d#案例-1\",\"2480\":\"v-270e713d#注意事项-1\",\"2481\":\"v-270e713d#缓存中的其他参数\",\"2482\":\"v-270e713d#三方缓存-ehcache\",\"2483\":\"v-270e713d#配置ehcache的环境\",\"2484\":\"v-270e713d#导入pom-xml依赖\",\"2485\":\"v-270e713d#创建ehcache配置文件\",\"2486\":\"v-270e713d#指定缓存管理器的具体类型\",\"2487\":\"v-270e713d#加入logback日志\",\"2488\":\"v-270e713d#测试\",\"2489\":\"v-270e713d#缓存的基本原理\",\"2490\":\"v-270e713d#cache接口\",\"2491\":\"v-270e713d#cache接口的方法\",\"2492\":\"v-270e713d#perpetualcache-实现类\",\"2493\":\"v-270e713d#一级缓存机制\",\"2494\":\"v-270e713d#二级缓存机制\",\"2495\":\"v-44423726\",\"2496\":\"v-44423726#逆向工程\",\"2497\":\"v-44423726#概念\",\"2498\":\"v-44423726#基本原理\",\"2499\":\"v-44423726#配置环境\",\"2500\":\"v-44423726#导入pom-xml依赖\",\"2501\":\"v-44423726#配置mbg\",\"2502\":\"v-44423726#执行mbg插件\",\"2503\":\"v-44423726#qbc查询\",\"2504\":\"v-44423726#mybatis其他配置\",\"2505\":\"v-44423726#main目录下xml文件编译问题\",\"2506\":\"v-44423726#类型处理器\",\"2507\":\"v-44423726#mybatis内置类型处理器\",\"2508\":\"v-44423726#日期处理\",\"2509\":\"v-44423726#自定义类型处理\",\"2510\":\"v-44423726#插件机制\",\"2511\":\"v-44423726#mybatis四大对象\",\"2512\":\"v-44423726#executor\",\"2513\":\"v-44423726#parameterhandler\",\"2514\":\"v-44423726#resultsethandler\",\"2515\":\"v-44423726#statementhandler\",\"2516\":\"v-44423726#mybatis插件机制\",\"2517\":\"v-44423726#mybatis底层的jdbc封装\",\"2518\":\"v-75489472\",\"2519\":\"v-75489472#spring的概念介绍\",\"2520\":\"v-75489472#简介\",\"2521\":\"v-75489472#优势\",\"2522\":\"v-75489472#方便解耦-简化开发\",\"2523\":\"v-75489472#aop切面编程\",\"2524\":\"v-75489472#声明式事务\",\"2525\":\"v-75489472#整合junit-方便测试\",\"2526\":\"v-75489472#方便整合各种优秀的框架\",\"2527\":\"v-75489472#丰富的功能封装\",\"2528\":\"v-75489472#规范的源码学习样本\",\"2529\":\"v-75489472#体系结构\",\"2530\":\"v-75489472#data-access-integration-数据访问-集成\",\"2531\":\"v-75489472#web-模块\",\"2532\":\"v-75489472#core-container-核心容器\",\"2533\":\"v-75489472#其他模块\",\"2534\":\"v-75489472#快速体验spring的ioc\",\"2535\":\"v-75489472#环境准备\",\"2536\":\"v-75489472#创建空白项目\",\"2537\":\"v-75489472#创建maven测试模块\",\"2538\":\"v-75489472#导入pom-xml依赖\",\"2539\":\"v-75489472#创建所需资源类\",\"2540\":\"v-75489472#传统方式调用方法\",\"2541\":\"v-75489472#使用spring中ioc的方式\",\"2542\":\"v-75489472#创建spring-xml配置文件\",\"2543\":\"v-75489472#测试代码\",\"2544\":\"v-184bdd81\",\"2545\":\"v-184bdd81#ioc-控制反转\",\"2546\":\"v-184bdd81#代码\",\"2547\":\"v-184bdd81#ioc底层原理浅析\",\"2548\":\"v-184bdd81#_1-解析xml配置文件\",\"2549\":\"v-184bdd81#_2-反射技术实例化对象-放到容器中\",\"2550\":\"v-184bdd81#_3-工厂模式返回bean对象-getbean方法\",\"2551\":\"v-184bdd81#di-依赖注入\",\"2552\":\"v-184bdd81#获取bean对象\",\"2553\":\"v-184bdd81#常规使用\",\"2554\":\"v-184bdd81#单例与多例模式\",\"2555\":\"v-184bdd81#懒加载\",\"2556\":\"v-184bdd81#给bean对象赋值\",\"2557\":\"v-184bdd81#property-通过set赋值\",\"2558\":\"v-184bdd81#constructor-arg-通过全参构造赋值\",\"2559\":\"v-184bdd81#p标签-与-c标签\",\"2560\":\"v-184bdd81#特殊符号的处理\",\"2561\":\"v-184bdd81#bean对象的引用\",\"2562\":\"v-184bdd81#引入外部的bean\",\"2563\":\"v-184bdd81#引入内部的bean\",\"2564\":\"v-184bdd81#级联的bean\",\"2565\":\"v-184bdd81#集合的赋值\",\"2566\":\"v-184bdd81#常规对list的操作\",\"2567\":\"v-184bdd81#引入util声明集合\",\"2568\":\"v-0eba45c2\",\"2569\":\"v-0eba45c2#一般情况下的生命周期\",\"2570\":\"v-0eba45c2#生命周期阶段\",\"2571\":\"v-0eba45c2#相关代码\",\"2572\":\"v-0eba45c2#bean后置处理器引入\",\"2573\":\"v-0eba45c2#生命周期阶段-1\",\"2574\":\"v-0eba45c2#相关代码-1\",\"2575\":\"v-ec6a80ba\",\"2576\":\"v-ec6a80ba#前言\",\"2577\":\"v-ec6a80ba#bean的自动注入\",\"2578\":\"v-ec6a80ba#相关属性\",\"2579\":\"v-ec6a80ba#相关代码\",\"2580\":\"v-26cb5a4e\",\"2581\":\"v-26cb5a4e#相关案例\",\"2582\":\"v-26cb5a4e#引入依赖\",\"2583\":\"v-26cb5a4e#准备数据源配置文件\",\"2584\":\"v-26cb5a4e#将配置文件引入到applicationcontext-xml中\",\"2585\":\"v-644cc026\",\"2586\":\"v-644cc026#基于注解的ioc\",\"2587\":\"v-644cc026#相关注解\",\"2588\":\"v-644cc026#包扫描\",\"2589\":\"v-644cc026#相关代码\",\"2590\":\"v-644cc026#测试基本注册\",\"2591\":\"v-644cc026#测试指定名称\",\"2592\":\"v-644cc026#测试指定注解\",\"2593\":\"v-644cc026#基于注解的di\",\"2594\":\"v-644cc026#环境准备\",\"2595\":\"v-644cc026#autowired的使用\",\"2596\":\"v-644cc026#qualifier的使用\",\"2597\":\"v-644cc026#resources的使用\",\"2598\":\"v-644cc026#value的使用\",\"2599\":\"v-644cc026#引入外部资源注入\",\"2600\":\"v-644cc026#完全使用注解-使用配置类\",\"2601\":\"v-644cc026#创建config类\",\"2602\":\"v-644cc026#使用配置类获取容器中的bean\",\"2603\":\"v-6fb9867e\",\"2604\":\"v-6fb9867e#静态代理\",\"2605\":\"v-6fb9867e#代码demo\",\"2606\":\"v-6fb9867e#总结\",\"2607\":\"v-6fb9867e#动态代理\",\"2608\":\"v-6fb9867e#proxy动态代理\",\"2609\":\"v-6fb9867e#代码demo-1\",\"2610\":\"v-6fb9867e#总结-1\",\"2611\":\"v-6fb9867e#cglib动态代理\",\"2612\":\"v-6fb9867e#底层原理\",\"2613\":\"v-6fb9867e#使用cglib动态代理\",\"2614\":\"v-6fb9867e#环境准备\",\"2615\":\"v-6fb9867e#代码\",\"2616\":\"v-6fb9867e#总结-2\",\"2617\":\"v-dcee14da\",\"2618\":\"v-dcee14da#概念\",\"2619\":\"v-dcee14da#什么是aop切面编程\",\"2620\":\"v-dcee14da#aop切面编程的相关术语\",\"2621\":\"v-dcee14da#连接点-joint-point\",\"2622\":\"v-dcee14da#切入点-pointcut\",\"2623\":\"v-dcee14da#通知-advice\",\"2624\":\"v-dcee14da#目标对象-target\",\"2625\":\"v-dcee14da#切面-aspect\",\"2626\":\"v-dcee14da#织入-weaving\",\"2627\":\"v-dcee14da#aspectj\",\"2628\":\"v-dcee14da#环境准备\",\"2629\":\"v-dcee14da#所需依赖\",\"2630\":\"v-dcee14da#spring配置文件\",\"2631\":\"v-dcee14da#接口环境\",\"2632\":\"v-dcee14da#切入点表达式\",\"2633\":\"v-dcee14da#语法\",\"2634\":\"v-dcee14da#使用案例\",\"2635\":\"v-dcee14da#重用切入点表达式\",\"2636\":\"v-dcee14da#joinpoint对象和proceedingjoinpoint对象\",\"2637\":\"v-dcee14da#joinpoint对象\",\"2638\":\"v-dcee14da#proceedingjoinpoint对象\",\"2639\":\"v-dcee14da#通知\",\"2640\":\"v-dcee14da#before-前置通知\",\"2641\":\"v-dcee14da#afterreturning-返回通知\",\"2642\":\"v-dcee14da#afterthrowing-异常通知\",\"2643\":\"v-dcee14da#after-后置通知\",\"2644\":\"v-dcee14da#around-环绕通知\",\"2645\":\"v-dcee14da#通知优先级\",\"2646\":\"v-dcee14da#order-注解\",\"2647\":\"v-dcee14da#实际意义\",\"2648\":\"v-dcee14da#aop的完全xml开发\",\"2649\":\"v-dcee14da#aop的完全注解开发\",\"2650\":\"v-dcee14da#aop的通知获取细节\",\"2651\":\"v-dcee14da#joinpoint接口\",\"2652\":\"v-dcee14da#方法返回值\",\"2653\":\"v-dcee14da#抛出的异常捕捉\",\"2654\":\"v-dcee14da#aop对获取bean的影响\",\"2655\":\"v-dcee14da#情景一-只有一个bean类\",\"2656\":\"v-dcee14da#情景二-一个接口和一个实现类bean\",\"2657\":\"v-dcee14da#情景三-一个接口和多个实现类bean\",\"2658\":\"v-dcee14da#情景四-一个接口和一个实现类bean-并对接口切面【重要】\",\"2659\":\"v-dcee14da#情景五-一个bean类-并对其切面【重要】\",\"2660\":\"v-dcee14da#总结\",\"2661\":\"v-35b8008a\",\"2662\":\"v-35b8008a#环境准备\",\"2663\":\"v-35b8008a#数据库准备\",\"2664\":\"v-35b8008a#项目工程初始化\",\"2665\":\"v-35b8008a#导入maven依赖\",\"2666\":\"v-35b8008a#配置spring工程\",\"2667\":\"v-35b8008a#创建工程文件层级\",\"2668\":\"v-35b8008a#jdbctemplate的使用\",\"2669\":\"v-35b8008a#概述\",\"2670\":\"v-35b8008a#简单的使用\",\"2671\":\"v-35b8008a#查询\",\"2672\":\"v-35b8008a#单一结果\",\"2673\":\"v-35b8008a#多结果返回\",\"2674\":\"v-35b8008a#增-删-改\",\"2675\":\"v-35b8008a#jdbctemplate的批处理\",\"2676\":\"v-35b8008a#新增工程文件\",\"2677\":\"v-35b8008a#简单实用\",\"2678\":\"v-35b8008a#批量新增\",\"2679\":\"v-35b8008a#批量更新\",\"2680\":\"v-35b8008a#批量删除\",\"2681\":\"v-953196d0\",\"2682\":\"v-953196d0#事务的回顾\",\"2683\":\"v-953196d0#事务的概念\",\"2684\":\"v-953196d0#事务的特性\",\"2685\":\"v-953196d0#原子性-atomicity\",\"2686\":\"v-953196d0#一致性-consistency\",\"2687\":\"v-953196d0#隔离性-isolation\",\"2688\":\"v-953196d0#持久性-durability\",\"2689\":\"v-953196d0#事务的并发问题\",\"2690\":\"v-953196d0#脏读-dirty-read\",\"2691\":\"v-953196d0#不可重复读-unrepeatableread\",\"2692\":\"v-953196d0#幻读-phantom-read\",\"2693\":\"v-953196d0#事务的隔离级别\",\"2694\":\"v-953196d0#简单的转账案例\",\"2695\":\"v-953196d0#数据源准备\",\"2696\":\"v-953196d0#spring工程配置\",\"2697\":\"v-953196d0#实现转账功能\",\"2698\":\"v-953196d0#未开启事务的危害\",\"2699\":\"v-953196d0#spring中对事物的管理\",\"2700\":\"v-953196d0#编程式事务管理-了解\",\"2701\":\"v-953196d0#修改applicationcontext-xml\",\"2702\":\"v-953196d0#修改service层代码\",\"2703\":\"v-953196d0#测试事务\",\"2704\":\"v-953196d0#声明式事务管理-熟悉\",\"2705\":\"v-953196d0#transactional注解管理事务\",\"2706\":\"v-953196d0#修改applicationcontext-xml-1\",\"2707\":\"v-953196d0#修改service层代码-1\",\"2708\":\"v-953196d0#测试事务-1\",\"2709\":\"v-953196d0#xml方式管理事务\",\"2710\":\"v-953196d0#修改applicationcontext-xml-2\",\"2711\":\"v-953196d0#修改service层代码-2\",\"2712\":\"v-953196d0#测试事务-2\",\"2713\":\"v-953196d0#事务中的属性\",\"2714\":\"v-953196d0#只读-readonly\",\"2715\":\"v-953196d0#超时-timeout\",\"2716\":\"v-953196d0#回滚-rollbackfor\",\"2717\":\"v-953196d0#不会滚的异常-norollbackfor\",\"2718\":\"v-953196d0#隔离级别-isolation\",\"2719\":\"v-953196d0#default-默认\",\"2720\":\"v-953196d0#read-uncommitted-读未提交\",\"2721\":\"v-953196d0#read-committed-读已提交\",\"2722\":\"v-953196d0#repeatable-read-可重复读\",\"2723\":\"v-953196d0#serializable-串行化\",\"2724\":\"v-953196d0#传播行为-propagation\",\"2725\":\"v-953196d0#常用属性\",\"2726\":\"v-953196d0#重点属性讲解\",\"2727\":\"v-953196d0#propagation-required-默认\",\"2728\":\"v-953196d0#propagation-supports\",\"2729\":\"v-953196d0#propagation-mandatory\",\"2730\":\"v-953196d0#propagation-requires-new\",\"2731\":\"v-953196d0#propagation-not-supported\",\"2732\":\"v-953196d0#propagation-never\",\"2733\":\"v-953196d0#propagation-nested\",\"2734\":\"v-953196d0#总结\",\"2735\":\"v-953196d0#死活不要事务的\",\"2736\":\"v-953196d0#可有可无的\",\"2737\":\"v-953196d0#必须有事务的\",\"2738\":\"v-25dc48aa\",\"2739\":\"v-25dc48aa#前言\",\"2740\":\"v-25dc48aa#mvc的概念\",\"2741\":\"v-25dc48aa#优点\",\"2742\":\"v-25dc48aa#环境准备\",\"2743\":\"v-25dc48aa#检查项目配置\",\"2744\":\"v-25dc48aa#创建mavenweb模块\",\"2745\":\"v-25dc48aa#检查目录标记\",\"2746\":\"v-25dc48aa#修改web-xml\",\"2747\":\"v-25dc48aa#测试demo\",\"2748\":\"v-25dc48aa#调整pom依赖\",\"2749\":\"v-25dc48aa#创建servlet\",\"2750\":\"v-25dc48aa#创建jsp\",\"2751\":\"v-25dc48aa#检查并运行项目\",\"2752\":\"v-25dc48aa#检查项目\",\"2753\":\"v-25dc48aa#运行项目\",\"2754\":\"v-1f2cdab8\",\"2755\":\"v-1f2cdab8#搭建框架\",\"2756\":\"v-1f2cdab8#导入依赖\",\"2757\":\"v-1f2cdab8#创建log4j配置文件\",\"2758\":\"v-1f2cdab8#创建springmvc配置文件\",\"2759\":\"v-1f2cdab8#在web-xml中配置前端控制器\",\"2760\":\"v-1f2cdab8#编写controller\",\"2761\":\"v-1f2cdab8#总结\",\"2762\":\"v-1f2cdab8#注意事项\",\"2763\":\"v-1f2cdab8#init-param初始化可以省略\",\"2764\":\"v-1f2cdab8#controller层路径问题\",\"2765\":\"v-1f2cdab8#视图解析器\",\"2766\":\"v-93f1112e\",\"2767\":\"v-93f1112e#执行时序图\",\"2768\":\"v-93f1112e#springmvc的执行流程\",\"2769\":\"v-93f1112e#springmvc的组件\",\"2770\":\"v-93f1112e#dispatcherservlet-前端控制器\",\"2771\":\"v-93f1112e#handlermapping-处理器映射器\",\"2772\":\"v-93f1112e#handladapter-处理器适配器\",\"2773\":\"v-93f1112e#handler-处理器\",\"2774\":\"v-93f1112e#view-resolver-视图解析器\",\"2775\":\"v-93f1112e#view-视图\",\"2776\":\"v-93f1112e#handlermapping与handladapter\",\"2777\":\"v-93f1112e#为什么建议配置\",\"2778\":\"v-93f1112e#配置方式\",\"2779\":\"v-93f1112e#手动配置\",\"2780\":\"v-93f1112e#自动配置\",\"2781\":\"v-93f1112e#作用\",\"2782\":\"v-06803dc4\",\"2783\":\"v-06803dc4#为什么需要放行静态文件\",\"2784\":\"v-06803dc4#修改demo\",\"2785\":\"v-06803dc4#创建静态资源\",\"2786\":\"v-06803dc4#修改index-jsp\",\"2787\":\"v-06803dc4#测试结果\",\"2788\":\"v-06803dc4#问题原因\",\"2789\":\"v-06803dc4#放行静态文件\",\"2790\":\"v-06803dc4#优化项目结构\",\"2791\":\"v-58dede36\",\"2792\":\"v-58dede36#获取参数的方式\",\"2793\":\"v-58dede36#紧耦合方式-了解\",\"2794\":\"v-58dede36#解耦合方式【熟练】\",\"2795\":\"v-58dede36#参数的处理\",\"2796\":\"v-58dede36#pojo接收参数\",\"2797\":\"v-58dede36#日期类型的特殊处理\",\"2798\":\"v-58dede36#注解方式\",\"2799\":\"v-58dede36#自定义转换器\",\"2800\":\"v-58dede36#list集合接收参数\",\"2801\":\"v-58dede36#map集合接收参数\",\"2802\":\"v-58dede36#编码问题\",\"2803\":\"v-58dede36#get乱码\",\"2804\":\"v-58dede36#post乱码\",\"2805\":\"v-58dede36#设置请求编码方式\",\"2806\":\"v-58dede36#设置过滤器\",\"2807\":\"v-58dede36#使用springmvc过滤器\",\"2808\":\"v-27df9b4f\",\"2809\":\"v-27df9b4f#requestmapping注解的使用\",\"2810\":\"v-27df9b4f#value-url路径\",\"2811\":\"v-27df9b4f#代码\",\"2812\":\"v-27df9b4f#测试\",\"2813\":\"v-27df9b4f#method控制请求方式\",\"2814\":\"v-27df9b4f#代码-1\",\"2815\":\"v-27df9b4f#测试-1\",\"2816\":\"v-27df9b4f#params-控制请求参数\",\"2817\":\"v-27df9b4f#代码-2\",\"2818\":\"v-27df9b4f#测试-2\",\"2819\":\"v-27df9b4f#headers-控制请求头\",\"2820\":\"v-27df9b4f#代码-3\",\"2821\":\"v-27df9b4f#测试-3\",\"2822\":\"v-27df9b4f#pathvariable注解和restful风格\",\"2823\":\"v-27df9b4f#什么是restful风格\",\"2824\":\"v-27df9b4f#restful与普通url\",\"2825\":\"v-27df9b4f#简单实现restful\",\"2826\":\"v-27df9b4f#多参数的问题\",\"2827\":\"v-27df9b4f#综合案例\",\"2828\":\"v-27df9b4f#回顾请求方式\",\"2829\":\"v-27df9b4f#实现思路\",\"2830\":\"v-27df9b4f#相关代码\",\"2831\":\"v-b40f5526\",\"2832\":\"v-b40f5526#requestmapping\",\"2833\":\"v-b40f5526#作用\",\"2834\":\"v-b40f5526#出现位置\",\"2835\":\"v-b40f5526#属性\",\"2836\":\"v-b40f5526#使用案例\",\"2837\":\"v-b40f5526#requestparam\",\"2838\":\"v-b40f5526#作用-1\",\"2839\":\"v-b40f5526#出现位置-1\",\"2840\":\"v-b40f5526#属性-1\",\"2841\":\"v-b40f5526#使用案例-1\",\"2842\":\"v-b40f5526#pathvariable\",\"2843\":\"v-b40f5526#作用-2\",\"2844\":\"v-b40f5526#出现位置-2\",\"2845\":\"v-b40f5526#属性-2\",\"2846\":\"v-b40f5526#使用案例-2\",\"2847\":\"v-b40f5526#requestheader-了解\",\"2848\":\"v-b40f5526#作用-3\",\"2849\":\"v-b40f5526#出现位置-3\",\"2850\":\"v-b40f5526#属性-3\",\"2851\":\"v-b40f5526#使用案例-3\",\"2852\":\"v-b40f5526#cookievalue-了解\",\"2853\":\"v-b40f5526#作用-4\",\"2854\":\"v-b40f5526#出现位置-4\",\"2855\":\"v-b40f5526#属性-4\",\"2856\":\"v-b40f5526#使用案例-4\",\"2857\":\"v-b40f5526#综合案例\",\"2858\":\"v-26d03fcc\",\"2859\":\"v-26d03fcc#返回viod\",\"2860\":\"v-26d03fcc#转发和重定向\",\"2861\":\"v-26d03fcc#环境准备\",\"2862\":\"v-26d03fcc#servletapi实现\",\"2863\":\"v-26d03fcc#请求转发\",\"2864\":\"v-26d03fcc#重定向\",\"2865\":\"v-26d03fcc#使用关键字\",\"2866\":\"v-26d03fcc#请求转发-forward关键字\",\"2867\":\"v-26d03fcc#请求转发-redirect关键字\",\"2868\":\"v-26d03fcc#使用view视图\",\"2869\":\"v-26d03fcc#请求转发-1\",\"2870\":\"v-26d03fcc#重定向-1\",\"2871\":\"v-26d03fcc#使用modelandview\",\"2872\":\"v-26d03fcc#请求转发-2\",\"2873\":\"v-26d03fcc#重定向-2\",\"2874\":\"v-26d03fcc#响应json数据\",\"2875\":\"v-26d03fcc#导入包\",\"2876\":\"v-26d03fcc#使用-responsebody返回json\",\"2877\":\"v-26d03fcc#前端使用ajax请求\",\"2878\":\"v-26d03fcc#restcontroller注解\",\"2879\":\"v-ff8d4a1a\",\"2880\":\"v-ff8d4a1a#环境准备\",\"2881\":\"v-ff8d4a1a#数据源\",\"2882\":\"v-ff8d4a1a#环境准备-1\",\"2883\":\"v-ff8d4a1a#检查项目配置\",\"2884\":\"v-ff8d4a1a#创建maven-web-模块\",\"2885\":\"v-ff8d4a1a#删除多余的依赖配置\",\"2886\":\"v-ff8d4a1a#检查目录标记\",\"2887\":\"v-ff8d4a1a#修改web-xml\",\"2888\":\"v-ff8d4a1a#导入依赖\",\"2889\":\"v-ff8d4a1a#spring相关依赖\",\"2890\":\"v-ff8d4a1a#数据库相关依赖\",\"2891\":\"v-ff8d4a1a#日志-工具-测试\",\"2892\":\"v-ff8d4a1a#springmvc\",\"2893\":\"v-ff8d4a1a#servlet和jsp\",\"2894\":\"v-ff8d4a1a#mybatis\",\"2895\":\"v-ff8d4a1a#添加配置文件\",\"2896\":\"v-ff8d4a1a#创建log4j配置文件\",\"2897\":\"v-ff8d4a1a#创建数据源配置文件\",\"2898\":\"v-ff8d4a1a#创建springmvc配置文件\",\"2899\":\"v-ff8d4a1a#新增声明空间\",\"2900\":\"v-ff8d4a1a#扫描controller\",\"2901\":\"v-ff8d4a1a#配置三大组件\",\"2902\":\"v-ff8d4a1a#静态资源放行\",\"2903\":\"v-ff8d4a1a#创建spring配置文件\",\"2904\":\"v-ff8d4a1a#新增声明空间-1\",\"2905\":\"v-ff8d4a1a#扫描service层\",\"2906\":\"v-ff8d4a1a#加载外部配置文件配置数据源\",\"2907\":\"v-ff8d4a1a#整合mybatis\",\"2908\":\"v-ff8d4a1a#配置spring事务\",\"2909\":\"v-ff8d4a1a#配置web-xml文件\",\"2910\":\"v-ff8d4a1a#整合springmvc\",\"2911\":\"v-ff8d4a1a#整合spring\",\"2912\":\"v-ff8d4a1a#配置编码过滤器\",\"2913\":\"v-ff8d4a1a#实现业务代码\",\"2914\":\"v-ff8d4a1a#创建前端页面\",\"2915\":\"v-ff8d4a1a#创建pojo层\",\"2916\":\"v-ff8d4a1a#创建conteoller层\",\"2917\":\"v-ff8d4a1a#创建service层\",\"2918\":\"v-ff8d4a1a#创建mapper层\",\"2919\":\"v-098c13d9\",\"2920\":\"v-098c13d9#回顾作用域\",\"2921\":\"v-098c13d9#pagecontext对象\",\"2922\":\"v-098c13d9#request对象\",\"2923\":\"v-098c13d9#session对象\",\"2924\":\"v-098c13d9#application-servletcontext-对象\",\"2925\":\"v-098c13d9#环境准备\",\"2926\":\"v-098c13d9#传统方式传递参数\",\"2927\":\"v-098c13d9#使用model传递参数\",\"2928\":\"v-098c13d9#请求转发\",\"2929\":\"v-098c13d9#重定向的特殊问题\",\"2930\":\"v-098c13d9#使用modelandview传递参数\",\"2931\":\"v-098c13d9#请求转发-1\",\"2932\":\"v-098c13d9#重定向问题的特殊问题\",\"2933\":\"v-16eb655a\",\"2934\":\"v-5278a68a\",\"2935\":\"v-5c8f7e4a\",\"2936\":\"v-2fbe4d80\",\"2937\":\"v-8a6fcee0\",\"2938\":\"v-057658a7\",\"2939\":\"v-119b2c28\",\"2940\":\"v-0df2b261\",\"2941\":\"v-539073c6\",\"2942\":\"v-80e038b4\",\"2943\":\"v-99d25f00\",\"2944\":\"v-4dc4d6dc\",\"2945\":\"v-96c3e67a\",\"2946\":\"v-1c03fd09\",\"2947\":\"v-3dc2fff6\",\"2948\":\"v-4749cf99\",\"2949\":\"v-fe89453e\",\"2950\":\"v-4b6dba18\",\"2951\":\"v-254b7297\",\"2952\":\"v-f4748e2c\",\"2953\":\"v-37553242\",\"2954\":\"v-02950611\",\"2955\":\"v-94405dea\",\"2956\":\"v-6d218370\",\"2957\":\"v-29c1881f\",\"2958\":\"v-763a5d5e\",\"2959\":\"v-654e3967\",\"2960\":\"v-143fe46a\",\"2961\":\"v-26679884\",\"2962\":\"v-2d73a281\",\"2963\":\"v-67a080a2\",\"2964\":\"v-ec46b620\",\"2965\":\"v-19cbb868\",\"2966\":\"v-03ee69e1\",\"2967\":\"v-f793e82e\",\"2968\":\"v-29cbbb4e\",\"2969\":\"v-ffe086e6\",\"2970\":\"v-388b83f6\",\"2971\":\"v-e64c6842\",\"2972\":\"v-51605de2\",\"2973\":\"v-388d2459\",\"2974\":\"v-14ea800c\",\"2975\":\"v-6dac2ce6\",\"2976\":\"v-bea9a814\",\"2977\":\"v-0f96e034\",\"2978\":\"v-513e7f37\",\"2979\":\"v-525aa037\",\"2980\":\"v-4ea40f98\",\"2981\":\"v-1f56dae7\",\"2982\":\"v-4d67737a\",\"2983\":\"v-3eb25529\",\"2984\":\"v-34005a63\",\"2985\":\"v-58ea482f\",\"2986\":\"v-2fd2e779\",\"2987\":\"v-00c8ad01\",\"2988\":\"v-21743658\",\"2989\":\"v-f518ff98\",\"2990\":\"v-f342790a\",\"2991\":\"v-56d4b6d8\",\"2992\":\"v-55af229d\",\"2993\":\"v-25caf6fe\",\"2994\":\"v-218a8852\",\"2995\":\"v-3caf160c\",\"2996\":\"v-3cbf9196\",\"2997\":\"v-5cb69196\",\"2998\":\"v-50e63e5e\",\"2999\":\"v-3df2e3dc\",\"3000\":\"v-21ec407f\",\"3001\":\"v-2496d97c\",\"3002\":\"v-59e970bc\",\"3003\":\"v-d70c62dc\",\"3004\":\"v-f0c3aa84\",\"3005\":\"v-02fc601d\",\"3006\":\"v-0da71e74\",\"3007\":\"v-05bf1f2a\",\"3008\":\"v-99f1797c\",\"3009\":\"v-3aa22f28\",\"3010\":\"v-2c17207d\",\"3011\":\"v-2a4d23e3\",\"3012\":\"v-06cf6cda\",\"3013\":\"v-c27bcb6c\",\"3014\":\"v-4d3b7280\",\"3015\":\"v-748bc42c\",\"3016\":\"v-6ce81456\",\"3017\":\"v-7e58bd44\",\"3018\":\"v-56faf432\",\"3019\":\"v-4b15a6b1\",\"3020\":\"v-5bf2c227\",\"3021\":\"v-0df27de4\",\"3022\":\"v-7abdd131\",\"3023\":\"v-69e38907\",\"3024\":\"v-26ac5c56\",\"3025\":\"v-13d4deba\",\"3026\":\"v-3b05b1ff\",\"3027\":\"v-52c2ebfa\",\"3028\":\"v-07792861\",\"3029\":\"v-254a5bc1\",\"3030\":\"v-78cf51e4\",\"3031\":\"v-f929f324\",\"3032\":\"v-6279cfca\",\"3033\":\"v-002ce89b\",\"3034\":\"v-2662af65\",\"3035\":\"v-3f3fa339\",\"3036\":\"v-243cd687\",\"3037\":\"v-5eb5d82b\",\"3038\":\"v-5787a3e0\",\"3039\":\"v-51957a84\",\"3040\":\"v-ec71a8be\",\"3041\":\"v-8d71d45a\",\"3042\":\"v-38604ebc\",\"3043\":\"v-05e278d6\",\"3044\":\"v-b71be3c6\",\"3045\":\"v-43a26cf4\",\"3046\":\"v-0c21cc45\",\"3047\":\"v-3ebe6822\",\"3048\":\"v-05de7608\",\"3049\":\"v-c2c03ef2\",\"3050\":\"v-609cf227\",\"3051\":\"v-1138b728\",\"3052\":\"v-52f5175a\",\"3053\":\"v-3143adee\",\"3054\":\"v-59bab146\",\"3055\":\"v-69bfca7e\",\"3056\":\"v-13a6c60e\",\"3057\":\"v-449b858f\",\"3058\":\"v-a7133c9c\",\"3059\":\"v-707c1cfe\",\"3060\":\"v-902ae040\",\"3061\":\"v-2f07aee2\",\"3062\":\"v-3943816e\",\"3063\":\"v-78eff698\",\"3064\":\"v-afa84c12\",\"3065\":\"v-31f0f597\",\"3066\":\"v-637d0b37\",\"3067\":\"v-7f6cbe91\",\"3068\":\"v-847433da\",\"3069\":\"v-3e4792b7\",\"3070\":\"v-5925827d\",\"3071\":\"v-e5afcffa\",\"3072\":\"v-1fc4c85f\",\"3073\":\"v-751285ca\",\"3074\":\"v-6dd21e8e\",\"3075\":\"v-0ed8f2b4\",\"3076\":\"v-f9a2c488\",\"3077\":\"v-5df0b4f0\",\"3078\":\"v-e0932a76\",\"3079\":\"v-721ef164\",\"3080\":\"v-c188dd4a\",\"3081\":\"v-29abace7\",\"3082\":\"v-2fe50864\",\"3083\":\"v-1dd879bc\",\"3084\":\"v-d4f975e2\",\"3085\":\"v-4a8b00e0\",\"3086\":\"v-35bae4de\",\"3087\":\"v-3a2d2cd9\",\"3088\":\"v-36a49f4d\",\"3089\":\"v-4a9f966c\",\"3090\":\"v-36b4eb9a\",\"3091\":\"v-0caf2427\",\"3092\":\"v-08fbc47b\",\"3093\":\"v-254acfaa\",\"3094\":\"v-480cbd77\",\"3095\":\"v-742a8d20\",\"3096\":\"v-b4acc6ba\",\"3097\":\"v-4856c9ba\",\"3098\":\"v-5a78d3e3\",\"3099\":\"v-5163cdd7\",\"3100\":\"v-1e96c76a\",\"3101\":\"v-3fdcbf0f\",\"3102\":\"v-a4a47272\",\"3103\":\"v-4ff30072\",\"3104\":\"v-e17ec0ee\",\"3105\":\"v-d639714e\",\"3106\":\"v-744e2807\",\"3107\":\"v-b372dd5a\",\"3108\":\"v-5b6be300\",\"3109\":\"v-cf342be4\",\"3110\":\"v-51759720\",\"3111\":\"v-d12e8168\",\"3112\":\"v-274a6fee\",\"3113\":\"v-a5685c8c\",\"3114\":\"v-111c3da0\",\"3115\":\"v-0f23a577\",\"3116\":\"v-e1f87fda\",\"3117\":\"v-841de5a0\",\"3118\":\"v-4b823823\",\"3119\":\"v-3db8bca6\",\"3120\":\"v-23a54ba8\",\"3121\":\"v-cb019518\",\"3122\":\"v-419a2ebc\",\"3123\":\"v-80e18136\",\"3124\":\"v-7de47e84\",\"3125\":\"v-3d799d70\",\"3126\":\"v-b1864144\",\"3127\":\"v-bb5b4fb6\",\"3128\":\"v-6660d9fa\",\"3129\":\"v-f90b1aac\",\"3130\":\"v-26ee528f\",\"3131\":\"v-d435db64\",\"3132\":\"v-63706580\",\"3133\":\"v-6235d8b6\",\"3134\":\"v-41ca48e3\",\"3135\":\"v-55dbc026\",\"3136\":\"v-560d4ac8\",\"3137\":\"v-25145916\",\"3138\":\"v-5a2dd33f\",\"3139\":\"v-2de37386\",\"3140\":\"v-0a4ff5b2\",\"3141\":\"v-0c8922e8\",\"3142\":\"v-7b0e89eb\",\"3143\":\"v-fcfc9d24\",\"3144\":\"v-5470df14\",\"3145\":\"v-434ec31d\",\"3146\":\"v-43f8c444\",\"3147\":\"v-1efc52ac\",\"3148\":\"v-01a83a52\",\"3149\":\"v-9c34417e\",\"3150\":\"v-7d08bada\",\"3151\":\"v-7903183c\",\"3152\":\"v-445613c6\",\"3153\":\"v-40deafd4\",\"3154\":\"v-13587475\",\"3155\":\"v-12ce45af\",\"3156\":\"v-348b84f0\",\"3157\":\"v-0c0b038a\",\"3158\":\"v-a6eecfa2\",\"3159\":\"v-e60ba634\",\"3160\":\"v-23846a8d\",\"3161\":\"v-67064b85\",\"3162\":\"v-6cf18622\",\"3163\":\"v-836917c4\",\"3164\":\"v-c94c912e\",\"3165\":\"v-66037538\",\"3166\":\"v-96fcff1c\",\"3167\":\"v-1b8f5409\",\"3168\":\"v-57703b0f\",\"3169\":\"v-179f04c2\",\"3170\":\"v-6c1abfff\",\"3171\":\"v-5ea5ee18\",\"3172\":\"v-37a789f7\",\"3173\":\"v-77cbd98a\",\"3174\":\"v-283f0a75\",\"3175\":\"v-9751c7cc\",\"3176\":\"v-36529903\",\"3177\":\"v-5c120915\",\"3178\":\"v-5e1257cb\",\"3179\":\"v-8e9ff2da\",\"3180\":\"v-cd556b60\",\"3181\":\"v-2ada57e8\",\"3182\":\"v-b27a2e56\",\"3183\":\"v-2b474f2e\",\"3184\":\"v-df7cb47a\",\"3185\":\"v-345e2696\",\"3186\":\"v-eec25686\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,12],\"2\":[1,1],\"3\":[1,4],\"4\":[1,5],\"5\":[1,4],\"6\":[1,10],\"7\":[1,5],\"8\":[1,3],\"9\":[1,5],\"10\":[1,3],\"11\":[1,10],\"12\":[1,6],\"13\":[1,7],\"14\":[1],\"15\":[1],\"16\":[1,42],\"17\":[1,51],\"18\":[2],\"19\":[1,52],\"20\":[1,21],\"21\":[1,60],\"22\":[3],\"23\":[1,20],\"24\":[1,39],\"25\":[1],\"26\":[1,12],\"27\":[1,61],\"28\":[1],\"29\":[1,17],\"30\":[1,41],\"31\":[1],\"32\":[1,48],\"33\":[1,22],\"34\":[1,21],\"35\":[1],\"36\":[1,22],\"37\":[1,14],\"38\":[1,6],\"39\":[1,3],\"40\":[1,6],\"41\":[1,2],\"42\":[3,4],\"43\":[1,3],\"44\":[1,8],\"45\":[1,4],\"46\":[1,5],\"47\":[1],\"48\":[1,19],\"49\":[1,10],\"50\":[1,1],\"51\":[1,7],\"52\":[1,13],\"53\":[1,19],\"54\":[1,8],\"55\":[1,4],\"56\":[1,7],\"57\":[1,5],\"58\":[1,5],\"59\":[1],\"60\":[1],\"61\":[1,75],\"62\":[1,24],\"63\":[1],\"64\":[1],\"65\":[1,132],\"66\":[1,3],\"67\":[1],\"68\":[2,22],\"69\":[1],\"70\":[1,36],\"71\":[1,53],\"72\":[1,11],\"73\":[1,40],\"74\":[1,15],\"75\":[1,40],\"76\":[1,53],\"77\":[1,14],\"78\":[1,29],\"79\":[1,31],\"80\":[1,30],\"81\":[2],\"82\":[1],\"83\":[2,11],\"84\":[2,18],\"85\":[2,18],\"86\":[2,2],\"87\":[1,28],\"88\":[1,51],\"89\":[1],\"90\":[1,28],\"91\":[1],\"92\":[1,30],\"93\":[1,28],\"94\":[2,48],\"95\":[1,11],\"96\":[1,9],\"97\":[1,8],\"98\":[1,35],\"99\":[1],\"100\":[1,22],\"101\":[1,13],\"102\":[1,20],\"103\":[1,17],\"104\":[1,6],\"105\":[1,12],\"106\":[1,12],\"107\":[1,10],\"108\":[1,11],\"109\":[1,12],\"110\":[1,11],\"111\":[1,13],\"112\":[1,8],\"113\":[1],\"114\":[1,73],\"115\":[1,54],\"116\":[1,9],\"117\":[1,6],\"118\":[1,6],\"119\":[1,8],\"120\":[1,13],\"121\":[1],\"122\":[1,9],\"123\":[1,5],\"124\":[1,7],\"125\":[1],\"126\":[1],\"127\":[1,11],\"128\":[1,7],\"129\":[1,11],\"130\":[1,24],\"131\":[1],\"132\":[2,20],\"133\":[3,17],\"134\":[2,20],\"135\":[1,10],\"136\":[1,12],\"137\":[1,13],\"138\":[1,16],\"139\":[1,1],\"140\":[1,23],\"141\":[1,15],\"142\":[1,54],\"143\":[1],\"144\":[1],\"145\":[1,20],\"146\":[1,21],\"147\":[1,65],\"148\":[1],\"149\":[1,10],\"150\":[1,32],\"151\":[1,5],\"152\":[1],\"153\":[1],\"154\":[1,26],\"155\":[1],\"156\":[2,2],\"157\":[1,8],\"158\":[1,7],\"159\":[1,14],\"160\":[1,1],\"161\":[1,12],\"162\":[1,9],\"163\":[2,10],\"164\":[2,30],\"165\":[2],\"166\":[1,10],\"167\":[3,33],\"168\":[4,6],\"169\":[4,11],\"170\":[1,6],\"171\":[1],\"172\":[1],\"173\":[1,14],\"174\":[2,10],\"175\":[1],\"176\":[3,15],\"177\":[3,83],\"178\":[3,5],\"179\":[1],\"180\":[1,6],\"181\":[1,8],\"182\":[1,4],\"183\":[1,1],\"184\":[1,2],\"185\":[1,2],\"186\":[1,5],\"187\":[1,6],\"188\":[2,21],\"189\":[1],\"190\":[1,11],\"191\":[1],\"192\":[1,24],\"193\":[1],\"194\":[1],\"195\":[1],\"196\":[1],\"197\":[1],\"198\":[1],\"199\":[1,4],\"200\":[1,2],\"201\":[1,1],\"202\":[1,4],\"203\":[2,4],\"204\":[2,2],\"205\":[2,1],\"206\":[2,12],\"207\":[1,4],\"208\":[1,88],\"209\":[1,7],\"210\":[1,11],\"211\":[1,8],\"212\":[1,5],\"213\":[1,5],\"214\":[1,4],\"215\":[1,9],\"216\":[1,10],\"217\":[1,10],\"218\":[1],\"219\":[1,92],\"220\":[1,44],\"221\":[1],\"222\":[1],\"223\":[1,9],\"224\":[1,7],\"225\":[1,16],\"226\":[6,48],\"227\":[1,16],\"228\":[1,38],\"229\":[1],\"230\":[1],\"231\":[1],\"232\":[1],\"233\":[1,20],\"234\":[1,49],\"235\":[1,26],\"236\":[1],\"237\":[2],\"238\":[1,50],\"239\":[1,36],\"240\":[1,58],\"241\":[1,48],\"242\":[1,28],\"243\":[3],\"244\":[1,47],\"245\":[1,48],\"246\":[1],\"247\":[4,30],\"248\":[4,31],\"249\":[1,14],\"250\":[1],\"251\":[1,81],\"252\":[1,5],\"253\":[3,5],\"254\":[3,6],\"255\":[3,10],\"256\":[1,3],\"257\":[1,6],\"258\":[1,13],\"259\":[2,6],\"260\":[1,116],\"261\":[1,27],\"262\":[1,83],\"263\":[1,84],\"264\":[3],\"265\":[2,38],\"266\":[2,43],\"267\":[2],\"268\":[1,4],\"269\":[3,2],\"270\":[2],\"271\":[1,7],\"272\":[1,29],\"273\":[3],\"274\":[1,56],\"275\":[3,61],\"276\":[1,16],\"277\":[1,12],\"278\":[1,52],\"279\":[1,201],\"280\":[1,33],\"281\":[3,57],\"282\":[1,15],\"283\":[1,32],\"284\":[1,11],\"285\":[1],\"286\":[1,22],\"287\":[1,85],\"288\":[1,94],\"289\":[1,5],\"290\":[1,22],\"291\":[1,16],\"292\":[1,122],\"293\":[1,5],\"294\":[2,310],\"295\":[2,33],\"296\":[1,30],\"297\":[1,7],\"298\":[1,11],\"299\":[1,10],\"300\":[1,54],\"301\":[2],\"302\":[1,57],\"303\":[1,41],\"304\":[1,17],\"305\":[1,58],\"306\":[1,57],\"307\":[1,3],\"308\":[1,8],\"309\":[1,57],\"310\":[1,1],\"311\":[1,38],\"312\":[1],\"313\":[1,51],\"314\":[1],\"315\":[1,37],\"316\":[1,79],\"317\":[1],\"318\":[1,27],\"319\":[1,23],\"320\":[1],\"321\":[1,28],\"322\":[2,7],\"323\":[1,6],\"324\":[1,33],\"325\":[2],\"326\":[1,7],\"327\":[1,78],\"328\":[1,86],\"329\":[1],\"330\":[1,19],\"331\":[1,2],\"332\":[1,11],\"333\":[1,14],\"334\":[1,24],\"335\":[2],\"336\":[1,12],\"337\":[1,67],\"338\":[1,78],\"339\":[1],\"340\":[1,4],\"341\":[1,3],\"342\":[1,5],\"343\":[1],\"344\":[1,22],\"345\":[2],\"346\":[1,14],\"347\":[1],\"348\":[1,44],\"349\":[1,50],\"350\":[2],\"351\":[1,8],\"352\":[1,55],\"353\":[2],\"354\":[1,20],\"355\":[1,16],\"356\":[1,100],\"357\":[1,49],\"358\":[1],\"359\":[1,13],\"360\":[1,22],\"361\":[1,6],\"362\":[1,16],\"363\":[1,57],\"364\":[1,200],\"365\":[1],\"366\":[1,12],\"367\":[1,40],\"368\":[1,47],\"369\":[1],\"370\":[5,18],\"371\":[4,86],\"372\":[4,52],\"373\":[1,37],\"374\":[1,126],\"375\":[1,71],\"376\":[1,72],\"377\":[2],\"378\":[1,18],\"379\":[3,72],\"380\":[1,80],\"381\":[1],\"382\":[1,44],\"383\":[1],\"384\":[1,32],\"385\":[1,10],\"386\":[1,62],\"387\":[1,88],\"388\":[1,10],\"389\":[1,70],\"390\":[1,78],\"391\":[1,4],\"392\":[1,59],\"393\":[1,16],\"394\":[1],\"395\":[1,75],\"396\":[1,75],\"397\":[1,30],\"398\":[1],\"399\":[1],\"400\":[1,19],\"401\":[1,13],\"402\":[1],\"403\":[1],\"404\":[1,29],\"405\":[1,60],\"406\":[1],\"407\":[1,31],\"408\":[1,46],\"409\":[1,56],\"410\":[1],\"411\":[1],\"412\":[1,46],\"413\":[1],\"414\":[1],\"415\":[1,39],\"416\":[1],\"417\":[1],\"418\":[1,48],\"419\":[1],\"420\":[1],\"421\":[1,54],\"422\":[1,63],\"423\":[1],\"424\":[1],\"425\":[1,49],\"426\":[1],\"427\":[1,10],\"428\":[1,68],\"429\":[1],\"430\":[1,8],\"431\":[1,81],\"432\":[1],\"433\":[1,7],\"434\":[1,12],\"435\":[1],\"436\":[1],\"437\":[1,6],\"438\":[1,53],\"439\":[1,10],\"440\":[1,57],\"441\":[1,58],\"442\":[1,56],\"443\":[1],\"444\":[1,13],\"445\":[1,45],\"446\":[1,49],\"447\":[1,6],\"448\":[1,5],\"449\":[1,23],\"450\":[1,47],\"451\":[1],\"452\":[3,50],\"453\":[1,9],\"454\":[1],\"455\":[1],\"456\":[1,20],\"457\":[1,55],\"458\":[1,51],\"459\":[1,29],\"460\":[1,50],\"461\":[1,34],\"462\":[1,18],\"463\":[1],\"464\":[1,3],\"465\":[1,38],\"466\":[1,13],\"467\":[1,26],\"468\":[1,11],\"469\":[1],\"470\":[1,6],\"471\":[1,47],\"472\":[1,17],\"473\":[1,13],\"474\":[1],\"475\":[1,65],\"476\":[1,6],\"477\":[1],\"478\":[1,29],\"479\":[2,27],\"480\":[1,52],\"481\":[1,12],\"482\":[1,8],\"483\":[1,2],\"484\":[1,14],\"485\":[1],\"486\":[1,5],\"487\":[1,4],\"488\":[1],\"489\":[1,90],\"490\":[1,96],\"491\":[1],\"492\":[1,17],\"493\":[1,33],\"494\":[1,3],\"495\":[1,8],\"496\":[1,3],\"497\":[2,3],\"498\":[2,4],\"499\":[1,4],\"500\":[1],\"501\":[1],\"502\":[1,24],\"503\":[1,50],\"504\":[1],\"505\":[1,22],\"506\":[1,30],\"507\":[1],\"508\":[2],\"509\":[1,68],\"510\":[1,60],\"511\":[1,119],\"512\":[1,120],\"513\":[1,129],\"514\":[2],\"515\":[1,54],\"516\":[1,57],\"517\":[1,66],\"518\":[1,75],\"519\":[1],\"520\":[1,6],\"521\":[1],\"522\":[1,16],\"523\":[1,32],\"524\":[3,20],\"525\":[1,40],\"526\":[1],\"527\":[1,4],\"528\":[1],\"529\":[1,7],\"530\":[1,10],\"531\":[1],\"532\":[1,6],\"533\":[1,15],\"534\":[1,33],\"535\":[2,4],\"536\":[1,9],\"537\":[1,17],\"538\":[1,36],\"539\":[1],\"540\":[1],\"541\":[2,20],\"542\":[2,30],\"543\":[2,26],\"544\":[1],\"545\":[2,81],\"546\":[2,35],\"547\":[1],\"548\":[1,4],\"549\":[1],\"550\":[1,2],\"551\":[1,5],\"552\":[1,7],\"553\":[2,32],\"554\":[2,7],\"555\":[3,5],\"556\":[3,8],\"557\":[1],\"558\":[1,5],\"559\":[1],\"560\":[2,53],\"561\":[2,81],\"562\":[1,35],\"563\":[1,33],\"564\":[1,31],\"565\":[1],\"566\":[1],\"567\":[1,15],\"568\":[1,65],\"569\":[1],\"570\":[1,54],\"571\":[1],\"572\":[1,14],\"573\":[1,13],\"574\":[1],\"575\":[1,22],\"576\":[1,42],\"577\":[2,22],\"578\":[3,20],\"579\":[4,24],\"580\":[2,26],\"581\":[1,43],\"582\":[1],\"583\":[1],\"584\":[1,23],\"585\":[1,60],\"586\":[1],\"587\":[1,42],\"588\":[1,73],\"589\":[1],\"590\":[1,49],\"591\":[1,100],\"592\":[1],\"593\":[1,20],\"594\":[1,49],\"595\":[1],\"596\":[7,4],\"597\":[3,8],\"598\":[1],\"599\":[1],\"600\":[1,18],\"601\":[1,4],\"602\":[1,3],\"603\":[1,5],\"604\":[1,10],\"605\":[1,5],\"606\":[1],\"607\":[1,20],\"608\":[1,5],\"609\":[1,14],\"610\":[1,12],\"611\":[1],\"612\":[1,6],\"613\":[1,7],\"614\":[1,5],\"615\":[1,7],\"616\":[2,8],\"617\":[1,12],\"618\":[1,11],\"619\":[1],\"620\":[1,13],\"621\":[1,5],\"622\":[1,3],\"623\":[1,5],\"624\":[1,5],\"625\":[1],\"626\":[1,4],\"627\":[1,6],\"628\":[1,6],\"629\":[1],\"630\":[1,9],\"631\":[1,9],\"632\":[1,9],\"633\":[1],\"634\":[1,6],\"635\":[1,9],\"636\":[1,4],\"637\":[1,7],\"638\":[1,13],\"639\":[1],\"640\":[1,1],\"641\":[1,7],\"642\":[1,8],\"643\":[1,9],\"644\":[1,10],\"645\":[1,6],\"646\":[2,10],\"647\":[1],\"648\":[2],\"649\":[1,13],\"650\":[1,18],\"651\":[1,36],\"652\":[1,28],\"653\":[1,19],\"654\":[1,6],\"655\":[2,19],\"656\":[1,18],\"657\":[2,4],\"658\":[3,7],\"659\":[3,11],\"660\":[3,16],\"661\":[1],\"662\":[3,3],\"663\":[3,2],\"664\":[3,3],\"665\":[3,2],\"666\":[3,4],\"667\":[3,3],\"668\":[3,2],\"669\":[1],\"670\":[1,8],\"671\":[1,33],\"672\":[1],\"673\":[2],\"674\":[3,47],\"675\":[3,47],\"676\":[2,62],\"677\":[3],\"678\":[4],\"679\":[4,6],\"680\":[4,60],\"681\":[3],\"682\":[1],\"683\":[3,82],\"684\":[3,8],\"685\":[3,39],\"686\":[2],\"687\":[3,6],\"688\":[3,26],\"689\":[6,12],\"690\":[3,11],\"691\":[4,13],\"692\":[5],\"693\":[3,11],\"694\":[3],\"695\":[1],\"696\":[1,4],\"697\":[3,13],\"698\":[3],\"699\":[5,12],\"700\":[4,16],\"701\":[3,3],\"702\":[4,35],\"703\":[4,7],\"704\":[3],\"705\":[4,14],\"706\":[4,10],\"707\":[3],\"708\":[5,2],\"709\":[5,7],\"710\":[5,4],\"711\":[3,18],\"712\":[1],\"713\":[2,1],\"714\":[2,84],\"715\":[2,74],\"716\":[2],\"717\":[2,3],\"718\":[1,15],\"719\":[1],\"720\":[1],\"721\":[1,8],\"722\":[1],\"723\":[1,45],\"724\":[2],\"725\":[1,44],\"726\":[1,38],\"727\":[1],\"728\":[3,22],\"729\":[1,44],\"730\":[1],\"731\":[1,30],\"732\":[1,12],\"733\":[1],\"734\":[1,31],\"735\":[1],\"736\":[1,22],\"737\":[1,8],\"738\":[1,24],\"739\":[1,14],\"740\":[3],\"741\":[1,10],\"742\":[1,9],\"743\":[1,9],\"744\":[1,14],\"745\":[1],\"746\":[1,2],\"747\":[1,7],\"748\":[1,14],\"749\":[3],\"750\":[1,17],\"751\":[1,5],\"752\":[1,9],\"753\":[1,17],\"754\":[1],\"755\":[1],\"756\":[2],\"757\":[1,20],\"758\":[1],\"759\":[1,22],\"760\":[1,40],\"761\":[1],\"762\":[4,7],\"763\":[2,51],\"764\":[1,3],\"765\":[1],\"766\":[1],\"767\":[1],\"768\":[1],\"769\":[1],\"770\":[1,4],\"771\":[1],\"772\":[4,54],\"773\":[2,20],\"774\":[1],\"775\":[1],\"776\":[1],\"777\":[1],\"778\":[1],\"779\":[1],\"780\":[1],\"781\":[1,1],\"782\":[1],\"783\":[1,4],\"784\":[1,2],\"785\":[1],\"786\":[1,9],\"787\":[1],\"788\":[1],\"789\":[2,8],\"790\":[1],\"791\":[1],\"792\":[1],\"793\":[1],\"794\":[1],\"795\":[1],\"796\":[1],\"797\":[1,7],\"798\":[1],\"799\":[1],\"800\":[1],\"801\":[1],\"802\":[2,3],\"803\":[2,3],\"804\":[2,7],\"805\":[2,7],\"806\":[2,5],\"807\":[1,4],\"808\":[1,8],\"809\":[1,28],\"810\":[1,50],\"811\":[1,8],\"812\":[1,5],\"813\":[1],\"814\":[2,13],\"815\":[1],\"816\":[1,28],\"817\":[1,43],\"818\":[1,3],\"819\":[1,3],\"820\":[1,31],\"821\":[1,5],\"822\":[1,8],\"823\":[1],\"824\":[1],\"825\":[1,35],\"826\":[1,37],\"827\":[1,32],\"828\":[2,30],\"829\":[2,22],\"830\":[2,36],\"831\":[2,29],\"832\":[2,24],\"833\":[1,5],\"834\":[1],\"835\":[1,45],\"836\":[1,14],\"837\":[2,38],\"838\":[1,20],\"839\":[1,25],\"840\":[1,38],\"841\":[1,36],\"842\":[1,30],\"843\":[1,35],\"844\":[1,35],\"845\":[1,56],\"846\":[1,34],\"847\":[2,23],\"848\":[4,40],\"849\":[1],\"850\":[1,27],\"851\":[1,4],\"852\":[1,25],\"853\":[1,61],\"854\":[1,42],\"855\":[1],\"856\":[1,60],\"857\":[1,17],\"858\":[1],\"859\":[1,54],\"860\":[1,41],\"861\":[1,41],\"862\":[1,24],\"863\":[1,23],\"864\":[1,31],\"865\":[1,27],\"866\":[1,27],\"867\":[1,44],\"868\":[1,41],\"869\":[1,36],\"870\":[1,44],\"871\":[1,32],\"872\":[1,40],\"873\":[1,78],\"874\":[3,41],\"875\":[1,54],\"876\":[1,70],\"877\":[1],\"878\":[1,37],\"879\":[1,25],\"880\":[1,70],\"881\":[1,56],\"882\":[1,42],\"883\":[1,31],\"884\":[1],\"885\":[1,31],\"886\":[1,31],\"887\":[1,41],\"888\":[1,54],\"889\":[1,60],\"890\":[1],\"891\":[1,73],\"892\":[1,58],\"893\":[1,86],\"894\":[1],\"895\":[1,46],\"896\":[1,24],\"897\":[1,48],\"898\":[1,35],\"899\":[1,59],\"900\":[1,48],\"901\":[1,61],\"902\":[2,9],\"903\":[1],\"904\":[1,52],\"905\":[1,40],\"906\":[1],\"907\":[1],\"908\":[1,16],\"909\":[1,7],\"910\":[1,18],\"911\":[1,12],\"912\":[1,7],\"913\":[1,7],\"914\":[1,10],\"915\":[1],\"916\":[1,9],\"917\":[1,17],\"918\":[1,15],\"919\":[1,58],\"920\":[1,66],\"921\":[1,11],\"922\":[1,109],\"923\":[1,45],\"924\":[1],\"925\":[1,47],\"926\":[1,22],\"927\":[1,4],\"928\":[1,53],\"929\":[1],\"930\":[1,58],\"931\":[1],\"932\":[6,4],\"933\":[6,9],\"934\":[6,17],\"935\":[6,7],\"936\":[6,12],\"937\":[1,70],\"938\":[1],\"939\":[1,46],\"940\":[1,19],\"941\":[1,46],\"942\":[1,55],\"943\":[1],\"944\":[2],\"945\":[1],\"946\":[1,9],\"947\":[1,3],\"948\":[1,5],\"949\":[1,3],\"950\":[1,7],\"951\":[1,3],\"952\":[1,4],\"953\":[1],\"954\":[1,7],\"955\":[1,25],\"956\":[1,27],\"957\":[1],\"958\":[1,16],\"959\":[1,9],\"960\":[1,10],\"961\":[1,7],\"962\":[1,7],\"963\":[1,3],\"964\":[1,3],\"965\":[1,34],\"966\":[1,4],\"967\":[1,8],\"968\":[1],\"969\":[1],\"970\":[1,7],\"971\":[1,6],\"972\":[1,66],\"973\":[1,43],\"974\":[3],\"975\":[1,8],\"976\":[1,37],\"977\":[1],\"978\":[1,2],\"979\":[1,9],\"980\":[1],\"981\":[1,36],\"982\":[1,16],\"983\":[1,32],\"984\":[3],\"985\":[1,9],\"986\":[1,15],\"987\":[1,19],\"988\":[1,20],\"989\":[1,7],\"990\":[3],\"991\":[1,2],\"992\":[1,14],\"993\":[1,23],\"994\":[1,22],\"995\":[1,7],\"996\":[3,4],\"997\":[1,10],\"998\":[1,1],\"999\":[1,29],\"1000\":[1,17],\"1001\":[1,69],\"1002\":[1,7],\"1003\":[1,26],\"1004\":[3],\"1005\":[1,4],\"1006\":[1,29],\"1007\":[1,11],\"1008\":[1,7],\"1009\":[3],\"1010\":[1,2],\"1011\":[1,29],\"1012\":[1,11],\"1013\":[1,7],\"1014\":[2],\"1015\":[1,2],\"1016\":[1,29],\"1017\":[1,7],\"1018\":[2],\"1019\":[1,2],\"1020\":[1,29],\"1021\":[1,7],\"1022\":[3],\"1023\":[1],\"1024\":[1,4],\"1025\":[1,5],\"1026\":[1,8],\"1027\":[1,7],\"1028\":[1,14],\"1029\":[1,7],\"1030\":[1,17],\"1031\":[1,11],\"1032\":[1],\"1033\":[2,11],\"1034\":[1,12],\"1035\":[1,17],\"1036\":[1,9],\"1037\":[1,11],\"1038\":[2],\"1039\":[1,15],\"1040\":[1,16],\"1041\":[1,23],\"1042\":[5,26],\"1043\":[1,8],\"1044\":[3],\"1045\":[1,5],\"1046\":[2,20],\"1047\":[2,28],\"1048\":[3,13],\"1049\":[1],\"1050\":[1,4],\"1051\":[1,5],\"1052\":[1,2],\"1053\":[1],\"1054\":[1,16],\"1055\":[1,10],\"1056\":[1,13],\"1057\":[1,14],\"1058\":[1,4],\"1059\":[1],\"1060\":[1,14],\"1061\":[2,17],\"1062\":[1],\"1063\":[1,14],\"1064\":[2,17],\"1065\":[1,5],\"1066\":[1,1],\"1067\":[2,1],\"1068\":[1,31],\"1069\":[1,12],\"1070\":[1],\"1071\":[1,31],\"1072\":[1,46],\"1073\":[1,18],\"1074\":[1],\"1075\":[1],\"1076\":[1,6],\"1077\":[3,8],\"1078\":[1,10],\"1079\":[1,8],\"1080\":[3,15],\"1081\":[2,20],\"1082\":[1,30],\"1083\":[1],\"1084\":[1],\"1085\":[1],\"1086\":[1,12],\"1087\":[1,8],\"1088\":[1,9],\"1089\":[1,10],\"1090\":[1,9],\"1091\":[1,37],\"1092\":[1,23],\"1093\":[1,152],\"1094\":[1,35],\"1095\":[1,15],\"1096\":[1],\"1097\":[1],\"1098\":[1],\"1099\":[1,12],\"1100\":[1,7],\"1101\":[1,7],\"1102\":[3,18],\"1103\":[1],\"1104\":[1,2],\"1105\":[1],\"1106\":[1,23],\"1107\":[1],\"1108\":[1,6],\"1109\":[1,6],\"1110\":[1],\"1111\":[1,6],\"1112\":[1,31],\"1113\":[1,15],\"1114\":[1,9],\"1115\":[1,24],\"1116\":[1,36],\"1117\":[1,10],\"1118\":[1,6],\"1119\":[1,5],\"1120\":[1],\"1121\":[1,9],\"1122\":[1,10],\"1123\":[1],\"1124\":[2],\"1125\":[1,13],\"1126\":[1],\"1127\":[1,9],\"1128\":[1,21],\"1129\":[1,9],\"1130\":[1],\"1131\":[1,5],\"1132\":[1],\"1133\":[1,7],\"1134\":[1,8],\"1135\":[1,23],\"1136\":[1,10],\"1137\":[2,2],\"1138\":[1],\"1139\":[1,6],\"1140\":[1,4],\"1141\":[1,4],\"1142\":[1,3],\"1143\":[1,3],\"1144\":[1],\"1145\":[4,28],\"1146\":[1,19],\"1147\":[1,48],\"1148\":[1,52],\"1149\":[1],\"1150\":[1],\"1151\":[1],\"1152\":[1,15],\"1153\":[1,5],\"1154\":[1,25],\"1155\":[1,43],\"1156\":[1,80],\"1157\":[1],\"1158\":[1,6],\"1159\":[1,4],\"1160\":[1],\"1161\":[1,14],\"1162\":[1,8],\"1163\":[1],\"1164\":[1,2],\"1165\":[1,6],\"1166\":[2],\"1167\":[2,5],\"1168\":[2,1],\"1169\":[1,7],\"1170\":[3,5],\"1171\":[1,18],\"1172\":[1,12],\"1173\":[1,1],\"1174\":[1],\"1175\":[1,7],\"1176\":[1,9],\"1177\":[1,8],\"1178\":[1],\"1179\":[1,3],\"1180\":[1,11],\"1181\":[1,5],\"1182\":[1,21],\"1183\":[1,8],\"1184\":[1,10],\"1185\":[1,33],\"1186\":[1],\"1187\":[1,21],\"1188\":[1,11],\"1189\":[1,10],\"1190\":[1],\"1191\":[1,37],\"1192\":[1],\"1193\":[1,4],\"1194\":[1],\"1195\":[1,37],\"1196\":[1,8],\"1197\":[1,6],\"1198\":[1,123],\"1199\":[1,1],\"1200\":[1],\"1201\":[1],\"1202\":[1],\"1203\":[1,4],\"1204\":[1],\"1205\":[1,14],\"1206\":[3,13],\"1207\":[1],\"1208\":[3,8],\"1209\":[3,47],\"1210\":[1,9],\"1211\":[1,171],\"1212\":[1],\"1213\":[1],\"1214\":[2,6],\"1215\":[1,79],\"1216\":[1,82],\"1217\":[1,84],\"1218\":[1],\"1219\":[1,83],\"1220\":[1,74],\"1221\":[1,84],\"1222\":[1,80],\"1223\":[2,54],\"1224\":[1],\"1225\":[1,9],\"1226\":[1,49],\"1227\":[1,84],\"1228\":[1],\"1229\":[1],\"1230\":[1,32],\"1231\":[1,82],\"1232\":[1],\"1233\":[1,44],\"1234\":[1,85],\"1235\":[1,111],\"1236\":[1],\"1237\":[1,11],\"1238\":[1],\"1239\":[1,32],\"1240\":[1],\"1241\":[1,32],\"1242\":[1,95],\"1243\":[1],\"1244\":[1],\"1245\":[1],\"1246\":[1,19],\"1247\":[2,5],\"1248\":[1,14],\"1249\":[1,29],\"1250\":[1,57],\"1251\":[1,24],\"1252\":[1,99],\"1253\":[1,122],\"1254\":[1],\"1255\":[1,42],\"1256\":[1,29],\"1257\":[1,28],\"1258\":[1,13],\"1259\":[1,51],\"1260\":[1],\"1261\":[1],\"1262\":[1,29],\"1263\":[1,34],\"1264\":[1,128],\"1265\":[1],\"1266\":[1,106],\"1267\":[1,34],\"1268\":[1],\"1269\":[1],\"1270\":[1],\"1271\":[1,16],\"1272\":[1,22],\"1273\":[1],\"1274\":[1,115],\"1275\":[1,89],\"1276\":[1],\"1277\":[1,4],\"1278\":[1,25],\"1279\":[1,28],\"1280\":[1,100],\"1281\":[1],\"1282\":[1,9],\"1283\":[1,27],\"1284\":[1,10],\"1285\":[1,46],\"1286\":[1,21],\"1287\":[1,60],\"1288\":[1,106],\"1289\":[1],\"1290\":[1,8],\"1291\":[2],\"1292\":[1,32],\"1293\":[1,87],\"1294\":[2],\"1295\":[1,16],\"1296\":[1],\"1297\":[1],\"1298\":[1,27],\"1299\":[1,46],\"1300\":[1,33],\"1301\":[1,46],\"1302\":[3,29],\"1303\":[1,21],\"1304\":[1,32],\"1305\":[1,25],\"1306\":[1,28],\"1307\":[1],\"1308\":[1],\"1309\":[1,57],\"1310\":[1,60],\"1311\":[1],\"1312\":[1,54],\"1313\":[1],\"1314\":[1,41],\"1315\":[1,23],\"1316\":[1],\"1317\":[1,64],\"1318\":[1,43],\"1319\":[1,95],\"1320\":[1,3],\"1321\":[1,33],\"1322\":[1,47],\"1323\":[1],\"1324\":[1,24],\"1325\":[1,19],\"1326\":[1,13],\"1327\":[2,7],\"1328\":[1],\"1329\":[1,26],\"1330\":[1,108],\"1331\":[1,46],\"1332\":[1],\"1333\":[2,68],\"1334\":[2,28],\"1335\":[2,47],\"1336\":[2,50],\"1337\":[2,25],\"1338\":[2,30],\"1339\":[2,40],\"1340\":[2,48],\"1341\":[2,53],\"1342\":[2,39],\"1343\":[2,27],\"1344\":[1,13],\"1345\":[1,27],\"1346\":[1,24],\"1347\":[1,42],\"1348\":[1,32],\"1349\":[1,28],\"1350\":[1,17],\"1351\":[1],\"1352\":[1,28],\"1353\":[1],\"1354\":[1,9],\"1355\":[1,20],\"1356\":[3,7],\"1357\":[3,11],\"1358\":[3,7],\"1359\":[1,12],\"1360\":[1,19],\"1361\":[3,34],\"1362\":[2,28],\"1363\":[2,24],\"1364\":[2,25],\"1365\":[1,1],\"1366\":[3,58],\"1367\":[4,43],\"1368\":[1,12],\"1369\":[1,46],\"1370\":[1,54],\"1371\":[1],\"1372\":[1,85],\"1373\":[2],\"1374\":[1,52],\"1375\":[1,7],\"1376\":[3,34],\"1377\":[3,8],\"1378\":[2],\"1379\":[1,43],\"1380\":[1,59],\"1381\":[1],\"1382\":[1],\"1383\":[1,12],\"1384\":[1,15],\"1385\":[1,17],\"1386\":[1,26],\"1387\":[1],\"1388\":[1,22],\"1389\":[1,24],\"1390\":[1],\"1391\":[2,18],\"1392\":[2,25],\"1393\":[2,13],\"1394\":[2,13],\"1395\":[2,13],\"1396\":[2,12],\"1397\":[2,13],\"1398\":[2,12],\"1399\":[2,18],\"1400\":[2,23],\"1401\":[2,27],\"1402\":[1],\"1403\":[1,14],\"1404\":[1],\"1405\":[1,59],\"1406\":[1,58],\"1407\":[1],\"1408\":[1,43],\"1409\":[1,40],\"1410\":[1],\"1411\":[1,96],\"1412\":[1,40],\"1413\":[1],\"1414\":[1,14],\"1415\":[1,127],\"1416\":[1,57],\"1417\":[1,71],\"1418\":[1,5],\"1419\":[4,27],\"1420\":[4,24],\"1421\":[4,29],\"1422\":[1],\"1423\":[1,25],\"1424\":[1,49],\"1425\":[1,52],\"1426\":[1],\"1427\":[1],\"1428\":[1,5],\"1429\":[1,2],\"1430\":[1],\"1431\":[1],\"1432\":[1,24],\"1433\":[1,51],\"1434\":[1],\"1435\":[1,10],\"1436\":[1,33],\"1437\":[1],\"1438\":[1,33],\"1439\":[1,90],\"1440\":[1],\"1441\":[1,5],\"1442\":[1,37],\"1443\":[1],\"1444\":[1],\"1445\":[1],\"1446\":[1,10],\"1447\":[1,19],\"1448\":[1,17],\"1449\":[1],\"1450\":[1,39],\"1451\":[1,74],\"1452\":[1,76],\"1453\":[1],\"1454\":[1,32],\"1455\":[1,38],\"1456\":[1,39],\"1457\":[1],\"1458\":[1,68],\"1459\":[1,63],\"1460\":[3,35],\"1461\":[1],\"1462\":[1,48],\"1463\":[1,54],\"1464\":[1,37],\"1465\":[1],\"1466\":[1,9],\"1467\":[1,5],\"1468\":[1,3],\"1469\":[1],\"1470\":[1,32],\"1471\":[1,35],\"1472\":[1,34],\"1473\":[1,12],\"1474\":[1],\"1475\":[1],\"1476\":[1,4],\"1477\":[1,5],\"1478\":[1,7],\"1479\":[1,15],\"1480\":[1,11],\"1481\":[1],\"1482\":[1,41],\"1483\":[1],\"1484\":[1],\"1485\":[1,31],\"1486\":[1,19],\"1487\":[1],\"1488\":[2,48],\"1489\":[2,59],\"1490\":[2,50],\"1491\":[2,49],\"1492\":[1],\"1493\":[2,49],\"1494\":[3,45],\"1495\":[1],\"1496\":[4,60],\"1497\":[3,62],\"1498\":[1],\"1499\":[2,58],\"1500\":[2,58],\"1501\":[2,47],\"1502\":[1],\"1503\":[3],\"1504\":[3],\"1505\":[3,63],\"1506\":[1],\"1507\":[1,2],\"1508\":[1,49],\"1509\":[1,45],\"1510\":[1,48],\"1511\":[1],\"1512\":[1,43],\"1513\":[1,41],\"1514\":[1,40],\"1515\":[1,47],\"1516\":[1],\"1517\":[1,16],\"1518\":[1,32],\"1519\":[1,30],\"1520\":[1],\"1521\":[1,40],\"1522\":[1],\"1523\":[3,39],\"1524\":[2,39],\"1525\":[3,43],\"1526\":[1],\"1527\":[1,37],\"1528\":[1,36],\"1529\":[1,51],\"1530\":[1],\"1531\":[1,2],\"1532\":[3,30],\"1533\":[3,55],\"1534\":[4,64],\"1535\":[3,74],\"1536\":[3,47],\"1537\":[1],\"1538\":[1],\"1539\":[1,4],\"1540\":[1,9],\"1541\":[1,25],\"1542\":[1,24],\"1543\":[1,12],\"1544\":[1,94],\"1545\":[1,87],\"1546\":[1,39],\"1547\":[1,7],\"1548\":[1,156],\"1549\":[1,100],\"1550\":[1],\"1551\":[1,19],\"1552\":[1,120],\"1553\":[1],\"1554\":[1,18],\"1555\":[1,147],\"1556\":[1],\"1557\":[1,22],\"1558\":[1,41],\"1559\":[1,41],\"1560\":[1],\"1561\":[1,12],\"1562\":[1],\"1563\":[1,37],\"1564\":[1,61],\"1565\":[1],\"1566\":[1],\"1567\":[1,74],\"1568\":[1,96],\"1569\":[1],\"1570\":[1,78],\"1571\":[1,100],\"1572\":[1,106],\"1573\":[1,71],\"1574\":[1,63],\"1575\":[1],\"1576\":[1],\"1577\":[1],\"1578\":[1,11],\"1579\":[1,133],\"1580\":[1,42],\"1581\":[1],\"1582\":[1,28],\"1583\":[1,2],\"1584\":[1,32],\"1585\":[1,59],\"1586\":[1,130],\"1587\":[1],\"1588\":[1,65],\"1589\":[1,62],\"1590\":[1,67],\"1591\":[1,56],\"1592\":[1],\"1593\":[1],\"1594\":[1,12],\"1595\":[1,10],\"1596\":[1,58],\"1597\":[1,4],\"1598\":[1],\"1599\":[1,11],\"1600\":[1,17],\"1601\":[1,44],\"1602\":[1,58],\"1603\":[1],\"1604\":[1],\"1605\":[1],\"1606\":[1,139],\"1607\":[1],\"1608\":[1],\"1609\":[1,131],\"1610\":[1],\"1611\":[1,22],\"1612\":[1,6],\"1613\":[1,50],\"1614\":[1,51],\"1615\":[1],\"1616\":[1,47],\"1617\":[1,62],\"1618\":[1],\"1619\":[2,3],\"1620\":[1,30],\"1621\":[1,48],\"1622\":[5,58],\"1623\":[2],\"1624\":[1,28],\"1625\":[3,5],\"1626\":[2,6],\"1627\":[1,29],\"1628\":[1,40],\"1629\":[1,41],\"1630\":[1,62],\"1631\":[1,49],\"1632\":[1,8],\"1633\":[3,4],\"1634\":[2,35],\"1635\":[2,33],\"1636\":[2,2],\"1637\":[2,26],\"1638\":[1,39],\"1639\":[2,4],\"1640\":[1,36],\"1641\":[1,3],\"1642\":[2,4],\"1643\":[1,24],\"1644\":[1,1],\"1645\":[2,21],\"1646\":[1,27],\"1647\":[1,9],\"1648\":[2,3],\"1649\":[1,40],\"1650\":[1,53],\"1651\":[1,33],\"1652\":[2,5],\"1653\":[1,25],\"1654\":[1],\"1655\":[1],\"1656\":[1,34],\"1657\":[1],\"1658\":[1,31],\"1659\":[1,33],\"1660\":[1,33],\"1661\":[1,34],\"1662\":[1,32],\"1663\":[1,3],\"1664\":[1,33],\"1665\":[1,27],\"1666\":[1,1],\"1667\":[1,32],\"1668\":[1,19],\"1669\":[1,1],\"1670\":[1,32],\"1671\":[1,5],\"1672\":[1,32],\"1673\":[1,6],\"1674\":[1,9],\"1675\":[3,28],\"1676\":[3,33],\"1677\":[3,27],\"1678\":[1],\"1679\":[1],\"1680\":[1,14],\"1681\":[1,20],\"1682\":[1,23],\"1683\":[1,59],\"1684\":[2,11],\"1685\":[3],\"1686\":[1,52],\"1687\":[1,55],\"1688\":[2],\"1689\":[3,25],\"1690\":[3,69],\"1691\":[3,27],\"1692\":[1],\"1693\":[1],\"1694\":[1],\"1695\":[1,94],\"1696\":[1],\"1697\":[1],\"1698\":[1,65],\"1699\":[1],\"1700\":[1],\"1701\":[1,75],\"1702\":[1],\"1703\":[1,12],\"1704\":[1,28],\"1705\":[1,16],\"1706\":[1],\"1707\":[2,26],\"1708\":[2,27],\"1709\":[1,6],\"1710\":[1,5],\"1711\":[2,45],\"1712\":[2,51],\"1713\":[2,60],\"1714\":[1,4],\"1715\":[1,54],\"1716\":[1],\"1717\":[1,12],\"1718\":[1,63],\"1719\":[1],\"1720\":[1,21],\"1721\":[1,34],\"1722\":[1,4],\"1723\":[1],\"1724\":[1],\"1725\":[1],\"1726\":[1,1],\"1727\":[1],\"1728\":[1,13],\"1729\":[1],\"1730\":[1,50],\"1731\":[1],\"1732\":[1,25],\"1733\":[1],\"1734\":[1],\"1735\":[5,19],\"1736\":[4,13],\"1737\":[1],\"1738\":[1],\"1739\":[1,6],\"1740\":[1,8],\"1741\":[1,6],\"1742\":[1,2],\"1743\":[1,7],\"1744\":[1,28],\"1745\":[1],\"1746\":[2,5],\"1747\":[2,9],\"1748\":[1],\"1749\":[1,11],\"1750\":[2,10],\"1751\":[2,6],\"1752\":[2,9],\"1753\":[3,1],\"1754\":[1],\"1755\":[1,19],\"1756\":[1,15],\"1757\":[1,52],\"1758\":[2,10],\"1759\":[1,39],\"1760\":[1],\"1761\":[1],\"1762\":[1],\"1763\":[1,19],\"1764\":[1,13],\"1765\":[1,38],\"1766\":[1,26],\"1767\":[1,23],\"1768\":[1,23],\"1769\":[1,41],\"1770\":[1],\"1771\":[1],\"1772\":[1,10],\"1773\":[1,2],\"1774\":[1],\"1775\":[1,39],\"1776\":[1,18],\"1777\":[1,53],\"1778\":[1],\"1779\":[3,43],\"1780\":[1,6],\"1781\":[1],\"1782\":[1,8],\"1783\":[1,1],\"1784\":[1],\"1785\":[1,13],\"1786\":[1,10],\"1787\":[1,10],\"1788\":[1],\"1789\":[3,17],\"1790\":[1,37],\"1791\":[2,49],\"1792\":[1,7],\"1793\":[1,59],\"1794\":[1,34],\"1795\":[2,57],\"1796\":[1],\"1797\":[1,6],\"1798\":[1,1],\"1799\":[1,44],\"1800\":[1,41],\"1801\":[1,82],\"1802\":[1,6],\"1803\":[1,1],\"1804\":[1,8],\"1805\":[1,17],\"1806\":[1,19],\"1807\":[1,12],\"1808\":[1,56],\"1809\":[1],\"1810\":[1,6],\"1811\":[1,7],\"1812\":[1,19],\"1813\":[1,13],\"1814\":[1,16],\"1815\":[1],\"1816\":[1],\"1817\":[1,15],\"1818\":[1,14],\"1819\":[1,12],\"1820\":[1,36],\"1821\":[1],\"1822\":[1,19],\"1823\":[1,9],\"1824\":[1,12],\"1825\":[1,45],\"1826\":[1,25],\"1827\":[1],\"1828\":[1,5],\"1829\":[1,33],\"1830\":[1,5],\"1831\":[1,146],\"1832\":[1,6],\"1833\":[1,11],\"1834\":[1,102],\"1835\":[2],\"1836\":[2],\"1837\":[1],\"1838\":[1,22],\"1839\":[1,31],\"1840\":[1,25],\"1841\":[1,25],\"1842\":[1,25],\"1843\":[1,7],\"1844\":[1,27],\"1845\":[1,4],\"1846\":[1,12],\"1847\":[1,12],\"1848\":[1,8],\"1849\":[2,23],\"1850\":[1],\"1851\":[1],\"1852\":[1],\"1853\":[1],\"1854\":[1,7],\"1855\":[1,14],\"1856\":[1,78],\"1857\":[1],\"1858\":[1,8],\"1859\":[1,4],\"1860\":[1,77],\"1861\":[1,12],\"1862\":[1,6],\"1863\":[1,11],\"1864\":[1,45],\"1865\":[1,10],\"1866\":[1],\"1867\":[1],\"1868\":[1,12],\"1869\":[1,26],\"1870\":[1,54],\"1871\":[1],\"1872\":[1,7],\"1873\":[1,10],\"1874\":[1,35],\"1875\":[1,1],\"1876\":[1,7],\"1877\":[1,10],\"1878\":[1,39],\"1879\":[1,11],\"1880\":[1],\"1881\":[1],\"1882\":[1,9],\"1883\":[1,8],\"1884\":[1,7],\"1885\":[1,17],\"1886\":[1],\"1887\":[1,11],\"1888\":[1,8],\"1889\":[1,25],\"1890\":[1,14],\"1891\":[1,11],\"1892\":[1,58],\"1893\":[1,69],\"1894\":[1,11],\"1895\":[1,5],\"1896\":[1],\"1897\":[1,57],\"1898\":[1,63],\"1899\":[1,34],\"1900\":[1,13],\"1901\":[1],\"1902\":[1,8],\"1903\":[1,7],\"1904\":[1,11],\"1905\":[1],\"1906\":[1],\"1907\":[2,35],\"1908\":[2,22],\"1909\":[2,55],\"1910\":[2,51],\"1911\":[2,11],\"1912\":[1],\"1913\":[1,2],\"1914\":[1],\"1915\":[1,3],\"1916\":[1,8],\"1917\":[1,60],\"1918\":[1],\"1919\":[1,2],\"1920\":[1,13],\"1921\":[1,60],\"1922\":[1],\"1923\":[1,3],\"1924\":[1,6],\"1925\":[1,52],\"1926\":[1],\"1927\":[2,128],\"1928\":[1,97],\"1929\":[1,12],\"1930\":[1,15],\"1931\":[1,12],\"1932\":[1,7],\"1933\":[1,32],\"1934\":[1,10],\"1935\":[1,11],\"1936\":[1,23],\"1937\":[1,18],\"1938\":[1,7],\"1939\":[1,8],\"1940\":[1,7],\"1941\":[1,11],\"1942\":[1,7],\"1943\":[1,29],\"1944\":[1],\"1945\":[1,6],\"1946\":[1,12],\"1947\":[1,7],\"1948\":[1,4],\"1949\":[1],\"1950\":[1,37],\"1951\":[1,36],\"1952\":[1,62],\"1953\":[1,13],\"1954\":[1],\"1955\":[1],\"1956\":[1,6],\"1957\":[1,6],\"1958\":[1,13],\"1959\":[1,28],\"1960\":[1,55],\"1961\":[1,10],\"1962\":[1,27],\"1963\":[1,7],\"1964\":[1,8],\"1965\":[1],\"1966\":[1,8],\"1967\":[1],\"1968\":[1,15],\"1969\":[1,4],\"1970\":[1,4],\"1971\":[1,13],\"1972\":[1,129],\"1973\":[1,2],\"1974\":[1],\"1975\":[1,20],\"1976\":[1,216],\"1977\":[1],\"1978\":[1,16],\"1979\":[1],\"1980\":[1,57],\"1981\":[1,62],\"1982\":[1,32],\"1983\":[1,9],\"1984\":[1,2],\"1985\":[1,23],\"1986\":[1],\"1987\":[1,50],\"1988\":[2,36],\"1989\":[1,32],\"1990\":[2,33],\"1991\":[1,51],\"1992\":[1],\"1993\":[1],\"1994\":[1,21],\"1995\":[1,21],\"1996\":[1,11],\"1997\":[1,35],\"1998\":[1,38],\"1999\":[1,58],\"2000\":[1,4],\"2001\":[1,42],\"2002\":[1,1],\"2003\":[1,21],\"2004\":[1,8],\"2005\":[1,12],\"2006\":[1,8],\"2007\":[1],\"2008\":[1],\"2009\":[1],\"2010\":[1,7],\"2011\":[1,16],\"2012\":[1,8],\"2013\":[1,9],\"2014\":[1,20],\"2015\":[1],\"2016\":[1,14],\"2017\":[1,10],\"2018\":[1,54],\"2019\":[1,40],\"2020\":[1,49],\"2021\":[1],\"2022\":[3,92],\"2023\":[2,69],\"2024\":[1],\"2025\":[2,163],\"2026\":[1],\"2027\":[1,5],\"2028\":[1,13],\"2029\":[1,84],\"2030\":[1,104],\"2031\":[1,154],\"2032\":[1],\"2033\":[1],\"2034\":[1,26],\"2035\":[1],\"2036\":[1,7],\"2037\":[1,14],\"2038\":[2,8],\"2039\":[2,2],\"2040\":[1,11],\"2041\":[1],\"2042\":[1],\"2043\":[1,7],\"2044\":[1],\"2045\":[1],\"2046\":[1,22],\"2047\":[1,80],\"2048\":[1,22],\"2049\":[1,58],\"2050\":[1,2],\"2051\":[1],\"2052\":[1,58],\"2053\":[1],\"2054\":[1,3],\"2055\":[3,43],\"2056\":[2,30],\"2057\":[1,30],\"2058\":[1,56],\"2059\":[1,5],\"2060\":[1,58],\"2061\":[1,23],\"2062\":[1,43],\"2063\":[1,73],\"2064\":[1],\"2065\":[1],\"2066\":[1,14],\"2067\":[1],\"2068\":[1,3],\"2069\":[1,3],\"2070\":[1,3],\"2071\":[1,7],\"2072\":[1,11],\"2073\":[2,7],\"2074\":[1,5],\"2075\":[1,73],\"2076\":[1,30],\"2077\":[1,46],\"2078\":[1,3],\"2079\":[1,19],\"2080\":[1,23],\"2081\":[1,40],\"2082\":[1,18],\"2083\":[1,3],\"2084\":[1,18],\"2085\":[1,22],\"2086\":[1],\"2087\":[1,61],\"2088\":[1,86],\"2089\":[1,1],\"2090\":[1,12],\"2091\":[1],\"2092\":[1,26],\"2093\":[1,12],\"2094\":[1,41],\"2095\":[1,36],\"2096\":[1,48],\"2097\":[1,21],\"2098\":[1,8],\"2099\":[1],\"2100\":[1],\"2101\":[1,10],\"2102\":[1,8],\"2103\":[1,8],\"2104\":[1,17],\"2105\":[1,5],\"2106\":[1,9],\"2107\":[1],\"2108\":[1,17],\"2109\":[1,6],\"2110\":[1,2],\"2111\":[1,7],\"2112\":[1,17],\"2113\":[1],\"2114\":[1,95],\"2115\":[1,42],\"2116\":[1,3],\"2117\":[1],\"2118\":[1],\"2119\":[1,5],\"2120\":[1,48],\"2121\":[1,28],\"2122\":[1,3],\"2123\":[1,16],\"2124\":[1,59],\"2125\":[4,26],\"2126\":[1,22],\"2127\":[1,3],\"2128\":[1,134],\"2129\":[1,7],\"2130\":[3],\"2131\":[1,115],\"2132\":[1,63],\"2133\":[3],\"2134\":[1],\"2135\":[1,3],\"2136\":[1,8],\"2137\":[1,7],\"2138\":[1,9],\"2139\":[1,6],\"2140\":[1,23],\"2141\":[1,32],\"2142\":[1,10],\"2143\":[1,11],\"2144\":[1,16],\"2145\":[1,16],\"2146\":[1,10],\"2147\":[1,13],\"2148\":[1,6],\"2149\":[1,8],\"2150\":[1,14],\"2151\":[1,3],\"2152\":[1,2],\"2153\":[1,14],\"2154\":[1,9],\"2155\":[1,129],\"2156\":[1],\"2157\":[3,13],\"2158\":[1,11],\"2159\":[1,99],\"2160\":[3,9],\"2161\":[1,25],\"2162\":[3,15],\"2163\":[1,32],\"2164\":[3,9],\"2165\":[1,25],\"2166\":[1,115],\"2167\":[1],\"2168\":[1,38],\"2169\":[1,97],\"2170\":[1,152],\"2171\":[1,121],\"2172\":[1,25],\"2173\":[1],\"2174\":[1,2],\"2175\":[1],\"2176\":[1,138],\"2177\":[1],\"2178\":[1,14],\"2179\":[1,107],\"2180\":[1],\"2181\":[1],\"2182\":[1,28],\"2183\":[1,33],\"2184\":[1],\"2185\":[1,7],\"2186\":[2,89],\"2187\":[1,30],\"2188\":[1,1],\"2189\":[1],\"2190\":[1,16],\"2191\":[1,10],\"2192\":[1,28],\"2193\":[1,13],\"2194\":[1],\"2195\":[1,10],\"2196\":[1,41],\"2197\":[1,67],\"2198\":[1,22],\"2199\":[1,17],\"2200\":[1],\"2201\":[1],\"2202\":[1],\"2203\":[2,15],\"2204\":[2,14],\"2205\":[2,24],\"2206\":[2,22],\"2207\":[1],\"2208\":[2,22],\"2209\":[2,18],\"2210\":[2,23],\"2211\":[2,22],\"2212\":[1],\"2213\":[1,14],\"2214\":[1,43],\"2215\":[1],\"2216\":[3,8],\"2217\":[4,13],\"2218\":[1,3],\"2219\":[1,16],\"2220\":[1,31],\"2221\":[1],\"2222\":[1],\"2223\":[2,21],\"2224\":[1,21],\"2225\":[1,10],\"2226\":[2,23],\"2227\":[1,1],\"2228\":[1,31],\"2229\":[1,9],\"2230\":[2,37],\"2231\":[2,15],\"2232\":[1],\"2233\":[1,1],\"2234\":[1,45],\"2235\":[1,13],\"2236\":[1,3],\"2237\":[1,3],\"2238\":[1],\"2239\":[6,38],\"2240\":[2,36],\"2241\":[2,31],\"2242\":[1,43],\"2243\":[4,42],\"2244\":[6,55],\"2245\":[2,47],\"2246\":[2,49],\"2247\":[3,38],\"2248\":[1,42],\"2249\":[1,27],\"2250\":[2,46],\"2251\":[1],\"2252\":[1,3],\"2253\":[1,42],\"2254\":[1,37],\"2255\":[1,26],\"2256\":[1,53],\"2257\":[1,38],\"2258\":[1,41],\"2259\":[1,31],\"2260\":[1,39],\"2261\":[1],\"2262\":[1],\"2263\":[1,5],\"2264\":[1],\"2265\":[1],\"2266\":[1],\"2267\":[2,87],\"2268\":[1],\"2269\":[1,7],\"2270\":[1],\"2271\":[1,1],\"2272\":[1],\"2273\":[1],\"2274\":[1,5],\"2275\":[1,7],\"2276\":[1,29],\"2277\":[1],\"2278\":[3,73],\"2279\":[2,43],\"2280\":[1],\"2281\":[1,6],\"2282\":[1,78],\"2283\":[1],\"2284\":[1],\"2285\":[1,37],\"2286\":[1,25],\"2287\":[1,17],\"2288\":[1,12],\"2289\":[3,32],\"2290\":[1,22],\"2291\":[1],\"2292\":[1,20],\"2293\":[1,71],\"2294\":[1,9],\"2295\":[1],\"2296\":[1,12],\"2297\":[1,22],\"2298\":[2,56],\"2299\":[1,57],\"2300\":[1,15],\"2301\":[2,204],\"2302\":[1],\"2303\":[1],\"2304\":[1,5],\"2305\":[1,3],\"2306\":[1,9],\"2307\":[1,12],\"2308\":[2,37],\"2309\":[1],\"2310\":[1,2],\"2311\":[1,16],\"2312\":[2,65],\"2313\":[1,1],\"2314\":[1,10],\"2315\":[2,19],\"2316\":[1,7],\"2317\":[1,32],\"2318\":[1,29],\"2319\":[1,23],\"2320\":[1,17],\"2321\":[1,17],\"2322\":[3,18],\"2323\":[1,14],\"2324\":[1,9],\"2325\":[2],\"2326\":[1,13],\"2327\":[1,2],\"2328\":[2],\"2329\":[1,11],\"2330\":[1,15],\"2331\":[1],\"2332\":[1,64],\"2333\":[1,21],\"2334\":[1,62],\"2335\":[1,20],\"2336\":[1,13],\"2337\":[1,3],\"2338\":[1],\"2339\":[2],\"2340\":[1,3],\"2341\":[1],\"2342\":[2,8],\"2343\":[1],\"2344\":[1,19],\"2345\":[1,24],\"2346\":[1],\"2347\":[1,16],\"2348\":[1,20],\"2349\":[1],\"2350\":[1,18],\"2351\":[1,32],\"2352\":[1,14],\"2353\":[1],\"2354\":[1,20],\"2355\":[1,18],\"2356\":[1,32],\"2357\":[1,30],\"2358\":[1,28],\"2359\":[1,27],\"2360\":[1,25],\"2361\":[1,7],\"2362\":[1,20],\"2363\":[1,21],\"2364\":[1,7],\"2365\":[1,16],\"2366\":[1,16],\"2367\":[1,7],\"2368\":[1,15],\"2369\":[1,9],\"2370\":[1],\"2371\":[1,28],\"2372\":[1],\"2373\":[1],\"2374\":[1,274],\"2375\":[1,4],\"2376\":[1,5],\"2377\":[1,16],\"2378\":[2,11],\"2379\":[1,25],\"2380\":[1,18],\"2381\":[1],\"2382\":[1],\"2383\":[1],\"2384\":[1,5],\"2385\":[2,18],\"2386\":[1,18],\"2387\":[1],\"2388\":[3,28],\"2389\":[3,28],\"2390\":[2,29],\"2391\":[1,22],\"2392\":[1,2],\"2393\":[1,6],\"2394\":[2,21],\"2395\":[1,29],\"2396\":[1,2],\"2397\":[1,5],\"2398\":[2,20],\"2399\":[1,26],\"2400\":[1],\"2401\":[3,28],\"2402\":[3,28],\"2403\":[2,30],\"2404\":[1,27],\"2405\":[1],\"2406\":[2,37],\"2407\":[4,46],\"2408\":[1,24],\"2409\":[3,43],\"2410\":[2,59],\"2411\":[1],\"2412\":[1,4],\"2413\":[1,32],\"2414\":[1,37],\"2415\":[1,29],\"2416\":[1],\"2417\":[1,66],\"2418\":[1],\"2419\":[1,11],\"2420\":[1,20],\"2421\":[1],\"2422\":[1,56],\"2423\":[2,18],\"2424\":[1,2],\"2425\":[1,89],\"2426\":[2,17],\"2427\":[1,2],\"2428\":[1,89],\"2429\":[2,22],\"2430\":[1,6],\"2431\":[1,89],\"2432\":[1,7],\"2433\":[1,22],\"2434\":[1,43],\"2435\":[1,102],\"2436\":[1],\"2437\":[1,41],\"2438\":[1,20],\"2439\":[1,6],\"2440\":[1,27],\"2441\":[1,18],\"2442\":[1],\"2443\":[1,7],\"2444\":[1,53],\"2445\":[1],\"2446\":[1,7],\"2447\":[1,54],\"2448\":[1],\"2449\":[1,14],\"2450\":[1,61],\"2451\":[1],\"2452\":[1,9],\"2453\":[1,54],\"2454\":[1,14],\"2455\":[1,19],\"2456\":[1,57],\"2457\":[1,14],\"2458\":[1,10],\"2459\":[1,42],\"2460\":[1,2],\"2461\":[1,24],\"2462\":[1,48],\"2463\":[1,2],\"2464\":[1,26],\"2465\":[1],\"2466\":[1,50],\"2467\":[1,52],\"2468\":[1],\"2469\":[1],\"2470\":[1,21],\"2471\":[1,10],\"2472\":[1,9],\"2473\":[1,9],\"2474\":[1,2],\"2475\":[1,28],\"2476\":[1,6],\"2477\":[1,4],\"2478\":[1,19],\"2479\":[1,42],\"2480\":[1,29],\"2481\":[1,64],\"2482\":[2,21],\"2483\":[1],\"2484\":[2,25],\"2485\":[1,52],\"2486\":[1,9],\"2487\":[1,80],\"2488\":[1,26],\"2489\":[1,3],\"2490\":[1,6],\"2491\":[1],\"2492\":[2,17],\"2493\":[1,87],\"2494\":[1,5],\"2495\":[1],\"2496\":[1],\"2497\":[1,21],\"2498\":[1],\"2499\":[1],\"2500\":[2,54],\"2501\":[1,102],\"2502\":[1],\"2503\":[1,59],\"2504\":[1],\"2505\":[1,31],\"2506\":[1],\"2507\":[1,10],\"2508\":[1,27],\"2509\":[1,87],\"2510\":[1],\"2511\":[1],\"2512\":[1],\"2513\":[1],\"2514\":[1],\"2515\":[1],\"2516\":[1,19],\"2517\":[1,12],\"2518\":[1],\"2519\":[1],\"2520\":[1,29],\"2521\":[1],\"2522\":[2,7],\"2523\":[1,8],\"2524\":[1,3],\"2525\":[2,3],\"2526\":[1,8],\"2527\":[1,6],\"2528\":[1,6],\"2529\":[1],\"2530\":[6,39],\"2531\":[2,37],\"2532\":[4,32],\"2533\":[1,28],\"2534\":[1],\"2535\":[1],\"2536\":[1],\"2537\":[1],\"2538\":[2,42],\"2539\":[1,16],\"2540\":[1,15],\"2541\":[1],\"2542\":[2,43],\"2543\":[1,24],\"2544\":[1],\"2545\":[2],\"2546\":[1,61],\"2547\":[1,1],\"2548\":[2,16],\"2549\":[3,19],\"2550\":[3,37],\"2551\":[2,14],\"2552\":[1,51],\"2553\":[1,63],\"2554\":[1,68],\"2555\":[1,69],\"2556\":[1,14],\"2557\":[2,46],\"2558\":[3,66],\"2559\":[3,103],\"2560\":[1,68],\"2561\":[1],\"2562\":[1,54],\"2563\":[1,59],\"2564\":[1,59],\"2565\":[1,24],\"2566\":[1,117],\"2567\":[1,92],\"2568\":[1],\"2569\":[1],\"2570\":[1,15],\"2571\":[1,70],\"2572\":[1,16],\"2573\":[1,16],\"2574\":[1,84],\"2575\":[1],\"2576\":[1,7],\"2577\":[1],\"2578\":[1,8],\"2579\":[1,56],\"2580\":[1,3],\"2581\":[1,1],\"2582\":[1,25],\"2583\":[1,23],\"2584\":[2,67],\"2585\":[1],\"2586\":[1],\"2587\":[1,26],\"2588\":[1,81],\"2589\":[1],\"2590\":[1,63],\"2591\":[1,64],\"2592\":[1,80],\"2593\":[1,15],\"2594\":[1,71],\"2595\":[1,25],\"2596\":[1,20],\"2597\":[1,20],\"2598\":[1,29],\"2599\":[1,77],\"2600\":[3],\"2601\":[1,18],\"2602\":[1,16],\"2603\":[1],\"2604\":[1,2],\"2605\":[1,50],\"2606\":[1,10],\"2607\":[1,18],\"2608\":[1,18],\"2609\":[1,72],\"2610\":[1,14],\"2611\":[1,2],\"2612\":[1,37],\"2613\":[1],\"2614\":[1,24],\"2615\":[1,85],\"2616\":[1,3],\"2617\":[1],\"2618\":[1],\"2619\":[1,14],\"2620\":[1],\"2621\":[3,8],\"2622\":[2,12],\"2623\":[2,33],\"2624\":[2,5],\"2625\":[2,11],\"2626\":[2,8],\"2627\":[1,12],\"2628\":[1],\"2629\":[1,79],\"2630\":[1,49],\"2631\":[1,38],\"2632\":[1,1],\"2633\":[1,14],\"2634\":[1,13],\"2635\":[1,48],\"2636\":[1],\"2637\":[1,5],\"2638\":[1,11],\"2639\":[1,5],\"2640\":[3,23],\"2641\":[3,33],\"2642\":[3,30],\"2643\":[3,23],\"2644\":[3,43],\"2645\":[1,6],\"2646\":[3,7],\"2647\":[1,10],\"2648\":[1,101],\"2649\":[1,31],\"2650\":[1],\"2651\":[1,74],\"2652\":[1,37],\"2653\":[1,36],\"2654\":[1],\"2655\":[2,4],\"2656\":[2,3],\"2657\":[2,3],\"2658\":[5,14],\"2659\":[5,8],\"2660\":[1,2],\"2661\":[1],\"2662\":[1],\"2663\":[1,2],\"2664\":[1],\"2665\":[1,105],\"2666\":[1,101],\"2667\":[1,58],\"2668\":[1],\"2669\":[1,9],\"2670\":[1],\"2671\":[1],\"2672\":[1,54],\"2673\":[1,49],\"2674\":[3,71],\"2675\":[1],\"2676\":[1,32],\"2677\":[1,9],\"2678\":[1,51],\"2679\":[1,57],\"2680\":[1,56],\"2681\":[1],\"2682\":[1],\"2683\":[1,16],\"2684\":[1,16],\"2685\":[3,14],\"2686\":[3,11],\"2687\":[3,11],\"2688\":[3,10],\"2689\":[1],\"2690\":[4,24],\"2691\":[3,24],\"2692\":[4,52],\"2693\":[1,25],\"2694\":[1],\"2695\":[1,42],\"2696\":[1,2],\"2697\":[1,62],\"2698\":[1,16],\"2699\":[1,15],\"2700\":[2],\"2701\":[2,28],\"2702\":[1,67],\"2703\":[1],\"2704\":[2],\"2705\":[2],\"2706\":[2,32],\"2707\":[1,29],\"2708\":[1,1],\"2709\":[1],\"2710\":[2,78],\"2711\":[1,23],\"2712\":[1,1],\"2713\":[1,8],\"2714\":[2,20],\"2715\":[2,36],\"2716\":[2,17],\"2717\":[2,18],\"2718\":[2,13],\"2719\":[3,7],\"2720\":[4,5],\"2721\":[4,5],\"2722\":[4,6],\"2723\":[3,6],\"2724\":[2,2],\"2725\":[1,32],\"2726\":[1,8],\"2727\":[4,11],\"2728\":[2,39],\"2729\":[2,8],\"2730\":[3,10],\"2731\":[3,11],\"2732\":[2,14],\"2733\":[2,23],\"2734\":[1],\"2735\":[1,11],\"2736\":[1,5],\"2737\":[1,28],\"2738\":[1],\"2739\":[1],\"2740\":[1,40],\"2741\":[1,10],\"2742\":[1],\"2743\":[1,2],\"2744\":[1,6],\"2745\":[1,2],\"2746\":[2,34],\"2747\":[1],\"2748\":[1,61],\"2749\":[1,29],\"2750\":[1,25],\"2751\":[1],\"2752\":[1,5],\"2753\":[1,12],\"2754\":[1],\"2755\":[1],\"2756\":[1,96],\"2757\":[1,46],\"2758\":[1,49],\"2759\":[2,61],\"2760\":[1,26],\"2761\":[1,11],\"2762\":[1],\"2763\":[2,16],\"2764\":[1,39],\"2765\":[1,33],\"2766\":[1],\"2767\":[1],\"2768\":[1,11],\"2769\":[1],\"2770\":[2,10],\"2771\":[2,12],\"2772\":[2,7],\"2773\":[2,9],\"2774\":[3,10],\"2775\":[2,14],\"2776\":[1],\"2777\":[1,20],\"2778\":[1],\"2779\":[1,75],\"2780\":[1,109],\"2781\":[1,13],\"2782\":[1,8],\"2783\":[2],\"2784\":[1],\"2785\":[1,11],\"2786\":[2,49],\"2787\":[1,3],\"2788\":[1,16],\"2789\":[1,89],\"2790\":[1,23],\"2791\":[1],\"2792\":[1],\"2793\":[2,66],\"2794\":[3,64],\"2795\":[1],\"2796\":[1,78],\"2797\":[1],\"2798\":[1,51],\"2799\":[1,67],\"2800\":[1,65],\"2801\":[1,64],\"2802\":[1],\"2803\":[1,2],\"2804\":[1],\"2805\":[1,3],\"2806\":[1,1],\"2807\":[1,30],\"2808\":[1,6],\"2809\":[2,5],\"2810\":[2,3],\"2811\":[1,17],\"2812\":[1,4],\"2813\":[1,3],\"2814\":[1,39],\"2815\":[1,5],\"2816\":[2,15],\"2817\":[1,56],\"2818\":[1,3],\"2819\":[2],\"2820\":[1,54],\"2821\":[1,2],\"2822\":[2],\"2823\":[1,52],\"2824\":[1,12],\"2825\":[1,19],\"2826\":[1,7],\"2827\":[1,15],\"2828\":[1,1],\"2829\":[1,27],\"2830\":[1,79],\"2831\":[1],\"2832\":[2],\"2833\":[1,3],\"2834\":[1,10],\"2835\":[1,20],\"2836\":[1,3],\"2837\":[2],\"2838\":[1,2],\"2839\":[1,1],\"2840\":[1,9],\"2841\":[1,3],\"2842\":[2],\"2843\":[1,23],\"2844\":[1,1],\"2845\":[1,7],\"2846\":[1,2],\"2847\":[3],\"2848\":[1,2],\"2849\":[1,1],\"2850\":[1,3],\"2851\":[1,15],\"2852\":[3],\"2853\":[1,4],\"2854\":[1,1],\"2855\":[1,6],\"2856\":[1,15],\"2857\":[1,73],\"2858\":[1],\"2859\":[1,54],\"2860\":[1],\"2861\":[1,28],\"2862\":[1,8],\"2863\":[1,38],\"2864\":[1,42],\"2865\":[1],\"2866\":[2,42],\"2867\":[2,35],\"2868\":[1,6],\"2869\":[1,32],\"2870\":[1,36],\"2871\":[1,13],\"2872\":[1,36],\"2873\":[1,40],\"2874\":[1,18],\"2875\":[1,20],\"2876\":[2,25],\"2877\":[1,52],\"2878\":[2,32],\"2879\":[1,1],\"2880\":[1],\"2881\":[1,35],\"2882\":[1],\"2883\":[1,1],\"2884\":[3,1],\"2885\":[1,38],\"2886\":[1,1],\"2887\":[2,2],\"2888\":[1,2],\"2889\":[1,23],\"2890\":[1,36],\"2891\":[3,54],\"2892\":[1,17],\"2893\":[1,21],\"2894\":[1,21],\"2895\":[1],\"2896\":[1,47],\"2897\":[1,21],\"2898\":[1,74],\"2899\":[1,46],\"2900\":[1,19],\"2901\":[1,30],\"2902\":[1,14],\"2903\":[1,115],\"2904\":[1,46],\"2905\":[1,16],\"2906\":[1,38],\"2907\":[1,46],\"2908\":[1,30],\"2909\":[2],\"2910\":[1,36],\"2911\":[1,35],\"2912\":[1,30],\"2913\":[1],\"2914\":[1,39],\"2915\":[1,15],\"2916\":[1,24],\"2917\":[1,19],\"2918\":[1,50],\"2919\":[1],\"2920\":[1,4],\"2921\":[1,2],\"2922\":[1,4],\"2923\":[1,9],\"2924\":[3,9],\"2925\":[1,51],\"2926\":[1,60],\"2927\":[1],\"2928\":[1,37],\"2929\":[1,46],\"2930\":[1],\"2931\":[1,36],\"2932\":[1,2],\"2933\":[2],\"2934\":[2],\"2935\":[2],\"2936\":[4],\"2937\":[2],\"2938\":[2],\"2939\":[2],\"2940\":[2],\"2941\":[2],\"2942\":[2],\"2943\":[2],\"2944\":[3],\"2945\":[2],\"2946\":[2],\"2947\":[2],\"2948\":[2],\"2949\":[2],\"2950\":[2],\"2951\":[3],\"2952\":[2],\"2953\":[6],\"2954\":[2],\"2955\":[4],\"2956\":[2],\"2957\":[2],\"2958\":[2],\"2959\":[2],\"2960\":[2],\"2961\":[2],\"2962\":[2],\"2963\":[3],\"2964\":[2],\"2965\":[2],\"2966\":[5],\"2967\":[2],\"2968\":[5],\"2969\":[2],\"2970\":[2],\"2971\":[3],\"2972\":[4],\"2973\":[5],\"2974\":[5],\"2975\":[2],\"2976\":[5],\"2977\":[2],\"2978\":[5],\"2979\":[3],\"2980\":[3],\"2981\":[3],\"2982\":[2],\"2983\":[3],\"2984\":[4],\"2985\":[2],\"2986\":[2],\"2987\":[2],\"2988\":[2],\"2989\":[4],\"2990\":[2],\"2991\":[4],\"2992\":[2],\"2993\":[2],\"2994\":[4],\"2995\":[2],\"2996\":[2],\"2997\":[5],\"2998\":[3],\"2999\":[5],\"3000\":[5],\"3001\":[2],\"3002\":[2],\"3003\":[2],\"3004\":[2],\"3005\":[2],\"3006\":[2],\"3007\":[2],\"3008\":[2],\"3009\":[3],\"3010\":[2],\"3011\":[2],\"3012\":[4],\"3013\":[2],\"3014\":[2],\"3015\":[2],\"3016\":[2],\"3017\":[2],\"3018\":[2],\"3019\":[4],\"3020\":[3],\"3021\":[2],\"3022\":[2],\"3023\":[2],\"3024\":[2],\"3025\":[2],\"3026\":[2],\"3027\":[2],\"3028\":[2],\"3029\":[2],\"3030\":[2],\"3031\":[2],\"3032\":[2],\"3033\":[2],\"3034\":[2],\"3035\":[2],\"3036\":[5],\"3037\":[2],\"3038\":[2],\"3039\":[2],\"3040\":[2],\"3041\":[2],\"3042\":[2],\"3043\":[2],\"3044\":[2],\"3045\":[3],\"3046\":[2],\"3047\":[2],\"3048\":[2],\"3049\":[2],\"3050\":[3],\"3051\":[2],\"3052\":[3],\"3053\":[6],\"3054\":[2],\"3055\":[2],\"3056\":[2],\"3057\":[2],\"3058\":[2],\"3059\":[5],\"3060\":[5],\"3061\":[2],\"3062\":[2],\"3063\":[5],\"3064\":[5],\"3065\":[2],\"3066\":[6],\"3067\":[6],\"3068\":[2],\"3069\":[6],\"3070\":[2],\"3071\":[2],\"3072\":[4],\"3073\":[2],\"3074\":[3],\"3075\":[2],\"3076\":[2],\"3077\":[3],\"3078\":[2],\"3079\":[2],\"3080\":[5],\"3081\":[7],\"3082\":[2],\"3083\":[4],\"3084\":[8],\"3085\":[4],\"3086\":[2],\"3087\":[2],\"3088\":[5],\"3089\":[6],\"3090\":[2],\"3091\":[5],\"3092\":[2],\"3093\":[4],\"3094\":[2],\"3095\":[2],\"3096\":[2],\"3097\":[4],\"3098\":[4],\"3099\":[4],\"3100\":[2],\"3101\":[2],\"3102\":[2],\"3103\":[2],\"3104\":[4],\"3105\":[3],\"3106\":[4],\"3107\":[6],\"3108\":[2],\"3109\":[2],\"3110\":[3],\"3111\":[3],\"3112\":[3],\"3113\":[2],\"3114\":[2],\"3115\":[2],\"3116\":[3],\"3117\":[2],\"3118\":[2],\"3119\":[3],\"3120\":[2],\"3121\":[4],\"3122\":[2],\"3123\":[2],\"3124\":[2],\"3125\":[3],\"3126\":[3],\"3127\":[4],\"3128\":[2],\"3129\":[2],\"3130\":[5],\"3131\":[3],\"3132\":[2],\"3133\":[2],\"3134\":[4],\"3135\":[2],\"3136\":[4],\"3137\":[2],\"3138\":[4],\"3139\":[4],\"3140\":[4],\"3141\":[3],\"3142\":[2],\"3143\":[5],\"3144\":[4],\"3145\":[2],\"3146\":[2],\"3147\":[2],\"3148\":[2],\"3149\":[3],\"3150\":[2],\"3151\":[4],\"3152\":[2],\"3153\":[2],\"3154\":[4],\"3155\":[2],\"3156\":[5],\"3157\":[2],\"3158\":[3],\"3159\":[2],\"3160\":[2],\"3161\":[3],\"3162\":[2],\"3163\":[2],\"3164\":[5],\"3165\":[2],\"3166\":[2],\"3167\":[3],\"3168\":[6],\"3169\":[2],\"3170\":[2],\"3171\":[2],\"3172\":[3],\"3173\":[2],\"3174\":[4],\"3175\":[6],\"3176\":[2],\"3177\":[2],\"3178\":[2],\"3179\":[2],\"3180\":[2],\"3181\":[2],\"3182\":[6],\"3183\":[2],\"3184\":[2],\"3185\":[6],\"3186\":[2]},\"averageFieldLength\":[1.396925007844367,27.883240366518123],\"storedFields\":{\"0\":{\"h\":\"幻灯片页\"},\"1\":{\"h\":\"学习路线\",\"t\":[\"JavaSE阶段\",\"初级开发工程师\",\"计算机基础知识\",\"中级开发工程师\",\"高级开发工程师\",\"提高阶段\",\"项目实践\",\"故障分析\",\"手撕算法\",\"大数据进阶\",\"AI方向\",\"其他语言\"]},\"2\":{\"h\":\"初级开发工程师\",\"t\":[\"第一阶段\"]},\"3\":{\"h\":\"JavaSE阶段\",\"t\":[\"JavaSE基础\",\"JavaSE进阶\",\"开发必备工具\",\"JDK新特性\"]},\"4\":{\"h\":\"第一阶段\",\"t\":[\"阿里代码规范\",\"数据库和JDBC\",\"前端技术\",\"JavaEE技术\",\"基础框架\"]},\"5\":{\"h\":\"JavaSE基础\",\"t\":[\"Java概念\",\"Java基础知识\",\"Java基础语法上\",\"Java基础语法下\"]},\"6\":{\"h\":\"JavaSE进阶\",\"t\":[\"异常处理\",\"常用类\",\"集合\",\"IO\",\"多线程\",\"网络编程\",\"JUnit_注解_枚举\",\"反射\"]},\"7\":{\"h\":\"开发必备工具\",\"t\":[\"Obsidian\",\"IDEA\",\"Maven\",\"Git\",\"VMware网络设置\"]},\"8\":{\"h\":\"JDK新特性\",\"t\":[\"JDK8新特性\",\"JDK9-JDK17新特性\"]},\"9\":{\"h\":\"阿里代码规范\",\"t\":[\"详见附件: ![[./assets/阿里规约.pdf]]\"]},\"10\":{\"h\":\"数据库和JDBC\",\"t\":[\"MySQL\",\"JDBC\",\"Oracle\"]},\"11\":{\"h\":\"前端技术\",\"t\":[\"HTML\",\"CSS\",\"JavaScript\",\"JQuery\",\"Echarts动态图表\",\"BootStrap\",\"ES6与Node\",\"Vue\",\"Thymeleaf\",\"前端架构拓展\"]},\"12\":{\"h\":\"JavaEE技术\",\"t\":[\"Tomcat\",\"HTTP协议\",\"Servlet\",\"JSP\",\"过滤器和监听器\",\"Ajax\"]},\"13\":{\"h\":\"基础框架\",\"t\":[\"Mybatis基础\",\"MyBatisPlus\",\"Spring基础\",\"SpringMVC\",\"SpringBoot\",\"SpringJPA\",\"SLF4J日志框架\"]},\"14\":{\"h\":\"异常处理\"},\"15\":{\"h\":\"前言\"},\"16\":{\"h\":\"为什么需要异常处理\",\"t\":[\"我们首先简单来看一个代码：\",\"public class Test { //这是一个main方法，是程序的入口： public static void main(String[] args) { //实现一个功能：键盘录入两个数，求商： Scanner sc = new Scanner(System.in); System.out.println(\\\"请录入第一个数：\\\"); int num1 = sc.nextInt(); System.out.println(\\\"请录入第二个数：\\\"); int num2 = sc.nextInt(); System.out.println(\\\"商：\\\"+num1/num2); } } \",\"在上面的代码中，如果我们输入非int类型的数据时会出现：InputMismatchException\",\"如果输入除数为时会出现：ArithmeticException\",\"异常：Exception\",\"📌在程序的运行过程中，发生了不正常的现象，阻止了程序的运行，我们称之为发生异常。\"]},\"17\":{\"h\":\"解决异常处理\",\"t\":[\"我们试着使用前面的知识来解决这个异常：\",\"public class Test { //这是一个main方法，是程序的入口： public static void main(String[] args) { //实现一个功能：键盘录入两个数，求商： Scanner sc = new Scanner(System.in); System.out.println(\\\"请录入第一个数：\\\"); if(sc.hasNextInt()){ int num1 = sc.nextInt(); System.out.println(\\\"请录入第二个数：\\\"); if(sc.hasNextInt()){ int num2 = sc.nextInt(); if(num2 == 0){ System.out.println(\\\"对不起，除数不能为0\\\"); }else{ System.out.println(\\\"商：\\\"+num1/num2); } }else{ System.out.println(\\\"对不起，你录入的不是int类型的数据！\\\"); } }else{ System.out.println(\\\"对不起，你录入的不是int类型的数据！\\\"); } } } \",\"我们发现，问题是解决了，可是新的问题又来了：\",\"（1）代码臃肿，业务代码和处理异常的代码混在一起。\",\"（2）可读性差\",\"（3）程序员需要花费大量的经历来维护这个漏洞\",\"（4）程序员很难堵住所有的漏洞。\"]},\"18\":{\"h\":\"try-catch\"},\"19\":{\"h\":\"代码案例\",\"t\":[\"恰好，Java为我们准备了异常捕捉的相关方法：\",\"public class Test2 { public static void main(String[] args) { //实现一个功能：键盘录入两个数，求商： try{ Scanner sc = new Scanner(System.in); System.out.println(\\\"请录入第一个数：\\\"); int num1 = sc.nextInt(); System.out.println(\\\"请录入第二个数：\\\"); int num2 = sc.nextInt(); System.out.println(\\\"商：\\\"+num1/num2); }catch(Exception ex){ System.out.println(\\\"对不起，程序出现异常！\\\"); } System.out.println(\\\"----谢谢你使用计算器111\\\"); System.out.println(\\\"----谢谢你使用计算器222\\\"); System.out.println(\\\"----谢谢你使用计算器333\\\"); System.out.println(\\\"----谢谢你使用计算器444\\\"); System.out.println(\\\"----谢谢你使用计算器555\\\"); System.out.println(\\\"----谢谢你使用计算器666\\\"); } } \",\"我们将可能出现异常的代码放入try代码块中，然后将异常封装为对象，被catch后面的()中的那个异常对象接收，接收以后：执行catch后面的{}里面的代码，然后try-catch后面的代码，该怎么执行就怎么执行。\"]},\"20\":{\"h\":\"执行逻辑\",\"t\":[\"try中没有异常，catch中代码不执行。\",\"try中有异常，catch进行捕获： \",\"如果catch中异常类型和你出的异常类型匹配的话：走catch中的代码--》进行捕获\",\"如果catch中异常类型和你出的异常类型不匹配的话：不走catch中的代码--》没有捕获成功，程序相当于遇到异常了，中断了，后续代码不执行\",\"注意：\",\"try中如果出现异常，然后用catch捕获成功的话，那么try中后续的代码是不会执行的。\",\"如果catch捕获异常成功，那么try-catch后面的代码该执行还是执行没有影响。\"]},\"21\":{\"h\":\"catch中处理异常\",\"t\":[\"第一种处理：什么都不写，什么都不做\",\"第二种处理：输出自定义异常信息\",\"第三种处理：打印异常信息\",\"第四种处理：抛出异常\",\"public class Test3 { public static void main(String[] args) { //实现一个功能：键盘录入两个数，求商： try{ Scanner sc = new Scanner(System.in); System.out.println(\\\"请录入第一个数：\\\"); int num1 = sc.nextInt(); System.out.println(\\\"请录入第二个数：\\\"); int num2 = sc.nextInt(); System.out.println(\\\"商：\\\"+num1/num2); }catch(Exception ex){ //第一种处理：什么都不写，什么都不做 //第二种处理：输出自定义异常信息 //System.out.println(\\\"对不起，你的代码有问题！\\\"); //第三种处理：打印异常信息： /*(1)调用toString方法，显示异常的类名（全限定路径）*/ /*System.out.println(ex); System.out.println(ex.toString());*/ /*(2)显示异常描述信息对应的字符串，如果没有就显示null System.out.println(ex.getMessage());*/ /*(3)显示异常的堆栈信息：将异常信息捕获以后，在控制台将异常的效果给我们展示出来，方便我们查看异常*/ /* ex.printStackTrace();*/ //第四种处理：抛出异常： throw ex; } System.out.println(\\\"----谢谢你使用计算器111\\\"); } } \"]},\"22\":{\"h\":\"try-Catch-finally\"},\"23\":{\"h\":\"前言\",\"t\":[\"在之前的try-catch中，如果catch代码块中出现以下情况，将导致后续代码依旧不再执行，程序报错：\",\"（1）throw抛出异常的情况\",\"（2）catch中没有正常的进行异常捕获\",\"（3）在try中遇到return 那么，怎么来保证后续的代码依旧执行呢？ 我们可以在catch代码块后继续使用finally代码块 finally代码块中的代码，在程序中无论任何时候都会执行 但是，我们要知道，如果finally与return一起的时候：先执行finally再执行return\"]},\"24\":{\"h\":\"代码案例\",\"t\":[\"public class Test3 { public static void main(String[] args) { //实现一个功能：键盘录入两个数，求商： try{ Scanner sc = new Scanner(System.in); System.out.println(\\\"请录入第一个数：\\\"); int num1 = sc.nextInt(); System.out.println(\\\"请录入第二个数：\\\"); int num2 = sc.nextInt(); System.out.println(\\\"商：\\\"+num1/num2); System.exit(0);//终止当前的虚拟机执行 return; }catch(ArithmeticException ex){ //throw ex; }finally { System.out.println(\\\"----谢谢你使用计算器111\\\"); } } } \"]},\"25\":{\"h\":\"执行逻辑\"},\"26\":{\"h\":\"常用操作\",\"t\":[\"我们在finally代码块中一般执行以下操作： 关闭数据库资源，关闭IO流资源，关闭socket资源。\",\"📌当然，如果我们不想finally代码块执行，我们可以直接关闭JVM虚拟机：（System.exit(0);//终止当前的虚拟机执行）\"]},\"27\":{\"h\":\"多重catch\",\"t\":[\"public class Test4 { public static void main(String[] args) { Integer //实现一个功能：键盘录入两个数，求商： try{ Scanner sc = new Scanner(System.in); System.out.println(\\\"请录入第一个数：\\\"); int num1 = sc.nextInt(); System.out.println(\\\"请录入第二个数：\\\"); int num2 = sc.nextInt(); System.out.println(\\\"商：\\\"+num1/num2); }catch(ArithmeticException ex){ System.out.println(\\\"对不起，除数不可以为0\\\"); }catch(InputMismatchException ex){ System.out.println(\\\"对不起，你录入的数据不是int类型的数据\\\"); }catch(Exception ex){ System.out.println(\\\"对不起，你的程序出现异常\\\"); }finally { System.out.println(\\\"----谢谢你使用计算器111\\\"); } } } \",\"【1】try中出现异常以后，将异常类型跟catch后面的类型依次比较，按照代码的顺序进行比对，执行第一个与异常类型匹配的catch语句\",\"【2】一旦执行其中一条catch语句之后，后面的catch语句就会被忽略了！\",\"【3】在安排catch语句的顺序的时候，一般会将特殊异常放在前面（并列），一般化的异常放在后面。先写子类异常，再写父类异常。\",\"【4】在JDK1.7以后，异常新处理方式：可以并列用|符号连接：\"]},\"28\":{\"h\":\"异常的分类\"},\"29\":{\"h\":\"结构层次\",\"t\":[\"Error错误 \",\"通常是程序级的错误，由于JVM系统的内部问题，我们在代码层面是无法干预的\",\"Exception异常 \",\"检查异常CheckedException：通常是我们的编译器在执行编译前对语法规范进行检查\",\"运行时异常RuntimeException：通常是我们编写的代码出现问题，导致的异常\",\"注意： 在编写代码时，我们不用特意对异常进行处理，我们可以直接抛出Exception，由程序来自行处理 语法错误、逻辑错误不属于Error与Exception错误\"]},\"30\":{\"h\":\"代码案例\",\"t\":[\"运行时异常\",\"public class Test5 { //这是一个main方法，是程序的入口： public static void main(String[] args) { //运行时异常： int[] arr = {1,2,3}; System.out.println(arr.length); /*int[] arr2 = null; System.out.println(arr2.length);*/ System.out.println(arr[10]); } } \",\"检查异常\",\"public class Test6 { //这是一个main方法，是程序的入口： public static void main(String[] args) { //检查异常： try { try { Class.forName(\\\"com.meturing.test01.Test\\\").newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } catch (ClassNotFoundException e) { e.printStackTrace(); } } } \"]},\"31\":{\"h\":\"throw与throws\"},\"32\":{\"h\":\"代码案例\",\"t\":[\"public class Test7 { //这是一个main方法，是程序的入口： public static void main(String[] args) throws Exception { //实现一个功能：两个数相除，当除数为0的时候，程序出现异常。 /*try { devide(); } catch (Exception e) { e.printStackTrace(); }*/ devide(); } public static void devide() throws Exception { Scanner sc = new Scanner(System.in); System.out.println(\\\"请录入第一个数：\\\"); int num1 = sc.nextInt(); System.out.println(\\\"请录入第二个数：\\\"); int num2 = sc.nextInt(); if(num2 == 0 ){//除数为0 ，制造异常。 //制造运行时异常： /*throw new RuntimeException();*/ //制造检查异常： /*try { throw new Exception(); } catch (Exception e) { e.printStackTrace(); }*/ throw new Exception(); }else{ System.out.println(\\\"商：\\\"+num1/num2); } } } \"]},\"33\":{\"h\":\"区别\",\"t\":[\"位置不同\",\"throw：方法内部\",\"throws: 方法的签名处，方法的声明处\",\"内容不同\",\"throw+异常对象（检查异常，运行时异常）\",\"throws+异常的类型（可以多个类型，用，拼接）\",\"作用不同\",\"throw：异常出现的源头，制造异常\",\"throws:在方法的声明处，告诉方法的调用者，这个方法中可能会出现我声明的这些异常。然后调用者对这个异常进行处理：要么自己处理要么再继续向外抛出异常\"]},\"34\":{\"h\":\"重写与重载异常\",\"t\":[\"英文\",\"位置\",\"修饰符\",\"返回值\",\"方法名\",\"参数\",\"抛出异常\",\"方法体\",\"重载\",\"overload\",\"同一个类中\",\"无关\",\"无关\",\"必须相同\",\"必须不同\",\"无关\",\"不同\",\"重写\",\"override\",\"子类父类中\",\"父类的权限修饰符要低于子类\",\"父类的返回值类型必须大于子类\",\"必须相同\",\"必须相同\",\"小于等于\",\"不同\"]},\"35\":{\"h\":\"自定义异常\"},\"36\":{\"h\":\"代码声明\",\"t\":[\"继承运行时异常\",\"public class MyException extends RuntimeException { static final long serialVersionUID = -70348971907L; public MyException(){ } public MyException(String msg){ super(msg); } } \",\"继承检查异常\",\"public class MyException extends Exception { static final long serialVersionUID = -70348971907L; public MyException(){ } public MyException(String msg){ super(msg); } } \",\"如果继承的是运行时异常，那么在使用的时候无需额外处理\",\"如果继承的是检查异常，那么使用的时候需要try-catch捕获或者throws向上抛\"]},\"37\":{\"h\":\"集合\",\"t\":[\"前言\",\"Collection接口\",\"泛型\",\"List接口\",\"比较器\",\"Set接口\",\"Map接口\",\"Collections工具类\",\"数据结构-栈\",\"同步类容器\",\"并发容器\",\"COW容器\",\"队列\"]},\"38\":{\"h\":\"常用类\",\"t\":[\"包装类\",\"日期相关类\",\"Math类\",\"Random类\",\"String类\",\"StringBuilder与StringBuffer类\"]},\"39\":{\"h\":\"IO\",\"t\":[\"File类\",\"IO流\",\"序列化\"]},\"40\":{\"h\":\"多线程\",\"t\":[\"初识多线程\",\"创建线程的方式\",\"线程的生命周期\",\"线程常见方法\",\"线程安全\",\"线程通信\"]},\"41\":{\"h\":\"网络编程\",\"t\":[\"初识网络编程\",\"模拟通讯\"]},\"42\":{\"h\":\"JUnit_注解_枚举\",\"t\":[\"测试的概念\",\"Junit单元测试\",\"注解\",\"枚举\"]},\"43\":{\"h\":\"反射\",\"t\":[\"初识反射\",\"常用API\",\"面试题\"]},\"44\":{\"h\":\"IDEA\",\"t\":[\"入门体验\",\"基本操作\",\"编辑器基础知识\",\"代码补全\",\"重构\",\"代码辅助\",\"导航\",\"运行并调试\"]},\"45\":{\"h\":\"Maven\",\"t\":[\"初识Maven\",\"Maven的使用\",\"Maven的核心概念\",\"继承与聚合\"]},\"46\":{\"h\":\"Git\",\"t\":[\"初识Git\",\"Git本地库实战\",\"GitHub远程库常用操作\",\"IDEA集成Git\",\"Git工作流与私服\"]},\"47\":{\"h\":\"VMware网络设置\"},\"48\":{\"h\":\"配置虚拟机软件\",\"t\":[\"右键虚拟机 -> 设置\",\"检查开启NAT模式\",\"设置虚拟机网络\",\"管理员启动\",\"配置VMnet8链接中的参数,注意子网IP\",\"此处网关需要设置为与子网IP网段一致 如子网IP为 aaa.bbb.c.e 网段IP应为: aaa.bbb.c.f\",\"配置DHCP 此处起始IP应排除上述配置的子网IP与网关IP\",\"保存配置\"]},\"49\":{\"h\":\"配置虚拟机系统\",\"t\":[\"配置虚拟机使用固定IP,方便我们后续在宿主机管理\",\"此处IP地址需要填写上述DHCP池中区间IP 子网掩码与上述虚拟机软件配置一致 默认网关与上述虚拟机软件配置一致 DNS随意填写常用DNA,推荐:114.114.114.1148.8.8.8\"]},\"50\":{\"h\":\"实现效果\",\"t\":[\"宿主机直接链接到虚拟机中的环境配置\"]},\"51\":{\"h\":\"JDK8新特性\",\"t\":[\"接口增强\",\"函数式接口\",\"方法引用\",\"StreamAPI\",\"Optional类\",\"新时间日期API\",\"其他新特性\"]},\"52\":{\"h\":\"MySQL\",\"t\":[\"概念与安装\",\"MySQL入门\",\"DDL和DML\",\"约束策略\",\"DQL（单表）\",\"DQL（多表）\",\"函数\",\"TCL和DCL\",\"索引和视图\",\"存储过程\",\"SQL优化\",\"常见问题解决\"]},\"53\":{\"h\":\"Obsidian\",\"t\":[\"[[01_认识Obsidian/认识Obsidian|认识Obsidian]]\",\"[[02_MarkDown/02_Markdown语法|Markdown语法]]\",\"[[03_Obsidian双向链接/Obsidian双向链接|Obsidian双向链接]]\",\"[[04_Obsidian技巧与设置/Obsidian技巧与设置|Obsidian技巧与设置]]\",\"[[05_Obsidian的插件/Obsidian的插件|Obsidian的插件]]\",\"[[06_Obsidian的搜索与查询/Obsidian的搜索与查询|Obsidian的搜索与查询]]\"]},\"54\":{\"h\":\"JDBC\",\"t\":[\"JDBC初识\",\"简单的JDBCDemo\",\"SQL注入和预编译\",\"批处理与事务\",\"JDBC的API整理\",\"DAO\",\"连接池的使用\",\"Log4j日志框架\"]},\"55\":{\"h\":\"HTML\",\"t\":[\"初识HTML\",\"HTML标签\",\"from表单\",\"HTML5新特性\"]},\"56\":{\"h\":\"JavaScript\",\"t\":[\"初识JavaScript\",\"数据类型和运算符\",\"数组的使用\",\"对象和原型\",\"事件\",\"BOM编程\",\"DOM编程\"]},\"57\":{\"h\":\"CSS\",\"t\":[\"初识CSS\",\"选择器\",\"浮动\",\"定位\",\"盒子模型\"]},\"58\":{\"h\":\"JQuery\",\"t\":[\"初识JQuery\",\"JQuery选择器\",\"JQuery中的DOM编程\",\"动画效果的使用\",\"表单验证与正则表达式\"]},\"59\":{\"h\":\"Echarts动态图表\"},\"60\":{\"h\":\"概述\"},\"61\":{\"h\":\"什么是Echarts动态图表\",\"t\":[\"Apache ECharts 是一个正在由 Apache 孵化器赞助的 Apache 开源基金会孵化的项目。官方网址：https://echarts.apache.org/zh/index.html\",\"2018年3月份，全球著名开源社区 Apache 基金会宣布“百度开源的 ECharts 项目全票通过进入 Apache 孵化器”。这是百度第一个进入国际顶级开源社区的项目，也标志着百度开源正式进入开源发展的快车道。\",\"ECharts 成为Apache 孵化器项目之前，已经是国内可视化生态领域的领军者，近年内连续被开源中国评选为“年度最受欢迎的中国开源软件”，并广泛被各行业企业以及事业单位、科研院所应用。涉及行业包含金融、教育、医疗、物流、气候监测等众多领域，其中甚至包括阿里巴巴、腾讯、华为、联想、小米、国家电网、中国石化等。\",\"ECharts 负责人祖明介绍到：“ ECharts 作为拥有丰富的可视化图表类型和深度交互能力的开源可视化库，配置便捷容易上手，同时上千的配置项和不同层面的扩展机制带来了灵活的定制能力。ECharts 底层依托了开源渲染引擎 ZRender ，支持 Canvas 和 SVG 等多种方式的渲染，支持 PC 、移动端、数据大屏、服务端渲染等多种设备场景。\",\"ECharts（Enterprise Charts），一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖矢量图形库 ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。\"]},\"62\":{\"h\":\"Echcarts的组件\",\"t\":[\"Eecharts中各种内容，被抽象为“组件”。 例如，echarts 中至少有这些组件：\",\"series（系列，一组数值以及他们映射成的图）\",\"xAxis（直角坐标系 X 轴）\",\"yAxis（直角坐标系 Y 轴）\",\"tooltip（提示框组件）\",\"toolbox（工具栏组件）\",\"title（标题）\",\"legend（图例）\"]},\"63\":{\"h\":\"快速上手\"},\"64\":{\"h\":\"引入JS\"},\"65\":{\"h\":\"案例\",\"t\":[\"<!DOCTYPE html> <html style=\\\"height: 100%\\\"> <head> <meta charset=\\\"utf-8\\\"> <script type=\\\"text/javascript\\\" src=\\\"js/echarts.js\\\"></script> <script type=\\\"text/javascript\\\"> function showData() { var dom = document.getElementById(\\\"container\\\"); var myChart = echarts.init(dom); var app = {}; option = null; option = { legend: {}, tooltip: {}, dataset: { source: [ ['product', '第一季度', '第二季度', '第三季度', '第四季度'], ['茉莉', 43.3, 85.8, 93.7, 99.9], ['奶茶', 83.1, 73.4, 55.1, 66.6], ['绿茶', 86.4, 65.2, 82.5, 88.8], ['咖啡', 72.4, 53.9, 39.1, 77.1], ['红茶', 11.4, 22.9, 33.1, 44.1] ] }, xAxis: { type: 'category' }, yAxis: {}, // Declare several bar series, each will be mapped // to a column of dataset.source by default. series: [{ type: 'bar' }, { type: 'bar' }, { type: 'bar' }, { type: 'bar' } ] };; if (option && typeof option === \\\"object\\\") { myChart.setOption(option, true); } } </script> </head> <body style=\\\"height: 100%; margin: 0\\\"> <div id=\\\"container\\\" style=\\\"height: 300px;width: 800px;border: 1px solid red; margin: 0px auto;\\\"></div> <input type=\\\"button\\\" value=\\\"显示数据\\\" onclick=\\\"showData()\\\" /> </body> </html> \",\"更多教程看官网: https://echarts.apache.org/handbook/zh/get-started/\"]},\"66\":{\"h\":\"BootStrap\",\"t\":[\"初识BootStrap\",\"BootStrap容器与栅格系统\",\"BootStrap开发案例\"]},\"67\":{\"h\":\"ES6与Node\"},\"68\":{\"h\":\"ES6 入门\",\"t\":[\"自学参考：http://es6.ruanyifeng.com/\",\"ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。\"]},\"69\":{\"h\":\"ES6简介\"},\"70\":{\"h\":\"ES6与JavaScript的关系\",\"t\":[\"要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。\",\"因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）\"]},\"71\":{\"h\":\"ES6与ES5的关系\",\"t\":[\"2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。\",\"ES6 的第一个版本，在 2015 年 6 月发布，正式名称是《ECMAScript 2015 标准》（简称 ES2015）。\",\"2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。 \",\"因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而ES2015 则是正式名称，特指该年发布的正式版本的语言标准。 本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。\"]},\"72\":{\"h\":\"基本语法\",\"t\":[\"ES标准中不包含 DOM 和 BOM的定义，只涵盖基本数据类型、关键字、语句、运算符、内建对象、内建函数等通用语法。\"]},\"73\":{\"h\":\"let声明变量\",\"t\":[\"// var 声明的变量没有局部作用域 // let 声明的变量 有局部作用域 { var a = 0 let b = 1 } console.log(a) // 0 console.log(b) // ReferenceError: b is not defined \",\"// var 可以声明多次 // let 只能声明一次 var m = 1 var m = 2 let n = 3 let n = 4 console.log(m) // 2 console.log(n) // Identifier 'n' has already been declared \",\"📌 let 与 var的区别\",\"var声明的变量时全局成员变量，let声明的变量时局部变量\",\"var可以多次声明一个变量，let只能声明一次\",\"var在编译的过程中，会将声明语句提到最前面执行，let则不会提前，只是在使用位置声明\"]},\"74\":{\"h\":\"const声明常量\",\"t\":[\"<script> const PI = 3.14; // 常量在初始化完成赋值后不可以再次更改 //PI = 3; console.log(PI); </script> \",\"📌cons常量\",\"声明后不允许改变\",\"一旦声明必须初始化，否则报错\"]},\"75\":{\"h\":\"解构赋值\",\"t\":[\"解构赋值是对赋值运算符的扩展。 他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。 在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。\",\"//传统的赋值 var a=1,b=2,c=3 console.log(a,b,c) //解构数组赋值 let [x,y,z] = [1,2,3] console.log(x,y,z) \",\"var user = {name:'zhang3',age:33} //传统 var userName = user.name var userAge = user.age console.log(userName,userAge) //解构 注意let中的属性命名要和对象中的一致 let{name,age} =user console.log(name,age) \",\"📌解构赋值\",\"赋值与被赋值的类型一致\",\"使用对象赋值时，赋值的对象的属性和被赋值的属性一致\"]},\"76\":{\"h\":\"模板字符串\",\"t\":[\"模板字符串相当于加强版的字符串，用反引号 `,除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。\",\"let str = 'hello' let name = 'java201021' //拼接字符串 这种写法不好 console.log(str+' '+name+'!') //模板字符串的拼接方法 console.log(`${str} ${name} !`) \",\"//定义长字符串 let head = `<head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>Document</title> </head>` console.log(head) \",\"//调用函数 function getName(){ return 'aaaaaa' } console.log(`${name} ${getName()}`) \"]},\"77\":{\"h\":\"声明对象简写\",\"t\":[\"let name = 'zahngsan3' let age = 33 //原本的对象声明方式 let user = {name:name,age:age} console.log(user) //对象简写 （对象中的属性和属性名一致就可以简写） let user2 = {name,age} console.log(user2) \"]},\"78\":{\"h\":\"定义方法简写\",\"t\":[\"<script> //这些是定义函数 不是定义方法 function f1(){ return 'f1' } let f2 = function(){ return 'f2' } //定义方法 没有简写 let user1 = { name:'zhang3', age:33, gethello1:function(){ console.log(`hello ${this.name}`) } } user1.gethello1() //定义方法 简写 let user2 = { name:'zhang3', age:33, gethello2(){ console.log(`hello ${this.name}`) } } user2.gethello2() </script> \"]},\"79\":{\"h\":\"对象拓展运算符\",\"t\":[\"拓展运算符（...）用于取出参数对象所有可遍历属性然后拷贝到当前对象。\",\"//拷贝对象 let user = { name:'zhang3', age:33 } //这个和Java是一样的，只是将user1指向User的空间地址 let user1 = user console.log(user1) //使用对象拓展运算符 //这个是将原有的user空间复制一份，然后再让user2指向这个新空间 let user2 = {test:'aaaaa',...user} console.log(user2) \",\"//2 合并对象 let name = {name:'li4'} let age = {age:44} let user3 = {...name,...age} console.log(user3) //注意：合并对象时属性名不能一样，否则会出现后面的覆盖前面的内容 let user4 = {...user1,...user3} console.log(user4) \"]},\"80\":{\"h\":\"箭头函数\",\"t\":[\"箭头函数提供了一种更加简洁的函数书写方式。基本语法是：\",\"参数 => 函数体\",\"let f1 = function(a){ return a } console.log(f1(100)) //完整写法 let f2 = (a)=>{ return a } console.log(f2(200)) //如果只有一个参数 可以省略小括号，多个参数不可以省略 let f3 = a=>{ return a } console.log(f3(300)) //如果内部直接时返回值，且只有一行 可以省略大括号和return，多行不可以省略 let f4 = a => a console.log(f4(400)) \",\"箭头函数多用于匿名函数的定义\"]},\"81\":{\"h\":\"Node 入门\"},\"82\":{\"h\":\"简介\"},\"83\":{\"h\":\"什么是Node.js\",\"t\":[\"简单的说 Node.js 就是运行在服务端的 JavaScript。\",\"Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。\"]},\"84\":{\"h\":\"Node.js的作用\",\"t\":[\"如果你是一个前端程序员，你不懂得像PHP、Python或Ruby等动态编程语言，然后你想创建自己的服务，那么Node.js是一个非常好的选择。\",\"Node.js 是运行在服务端的 JavaScript，如果你熟悉Javascript，那么你将会很容易的学会Node.js。\",\"当然，如果你是后端程序员，想部署一些高性能的服务，那么学习Node.js也是一个非常好的选择。\"]},\"85\":{\"h\":\"部署Node.js\",\"t\":[\"下载 官网：https://nodejs.org/en/ 中文网：http://nodejs.cn/ LTS：长期支持版本 Current：最新版\",\"安装 : 不要安装到中文目录其他默认即可\",\"查看版本 : node -v\"]},\"86\":{\"h\":\"Node.js快速入门\",\"t\":[\"快速发开一个简单的Node.js小程序\"]},\"87\":{\"h\":\"控制台程序\",\"t\":[\"创建 01-控制台程序.js : console.log('Hello Node.js')\",\"打开命令行终端：Ctrl + Shift + y\",\"进入到程序所在的目录，输入 : node 01-控制台程序.js\",\"浏览器的内核包括两部分核心：\",\"DOM渲染引擎；\",\"js解析器（js引擎）\",\"js运行在浏览器中的内核中的js引擎内部\",\"Node.js是脱离浏览器环境运行的JavaScript程序，基于V8 引擎（Chrome 的 JavaScript的引擎）\"]},\"88\":{\"h\":\"服务端程序\",\"t\":[\"创建 02-server-app.js\",\"const http = require('http'); http.createServer(function (request, response) { // 发送 HTTP 头部 // HTTP 状态值: 200 : OK // 内容类型: text/plain response.writeHead(200, {'Content-Type': 'text/plain'}); // 发送响应数据 \\\"Hello World\\\" response.end('Hello Server'); }).listen(8888); // 终端打印如下信息 console.log('Server running at http://127.0.0.1:8888/'); \",\"运行服务器程序\",\"node 02-server-app.js \",\"服务器启动成功后，在浏览器中输入：http://localhost:8888/ 查看webserver成功运行，并输出html页面\",\"停止服务：ctrl + c\"]},\"89\":{\"h\":\"NPM\"},\"90\":{\"h\":\"什么是NPM\",\"t\":[\"NPM全称Node Package Manager，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是Node.js的包管理工具，相当于前端的Maven 。\",\"我们通过npm 可以很方便地下载js库，管理前端工程。\",\"Node.js默认安装的npm包和工具的位置：Node.js目录\\\\node_modules\",\"在这个目录下你可以看见 npm目录，npm本身就是被NPM包管理器管理的一个工具，说明 Node.js已经集成了npm工具\",\"#在命令提示符输入 npm -v 可查看当前npm版本 npm -v \"]},\"91\":{\"h\":\"使用NPM管理项目\"},\"92\":{\"h\":\"项目初始化\",\"t\":[\"#建立一个空文件夹，在命令提示符进入该文件夹 执行命令初始化 npm init #按照提示输入相关信息，如果是用默认值则直接回车即可。 #name: 项目名称 #version: 项目版本号 #description: 项目描述 #keywords: {Array}关键词，便于用户搜索到我们的项目 #最后会生成package.json文件，这个是包的配置文件，相当于maven的pom.xml #我们之后也可以根据需要进行修改。 \",\"#如果想直接生成 package.json 文件，那么可以使用命令 npm init -y \"]},\"93\":{\"h\":\"修改npm镜像\",\"t\":[\"NPM官方的管理的包都是从 http://npmjs.com下载的，但是这个网站在国内速度很慢。\",\"这里推荐使用淘宝 NPM 镜像 http://npm.taobao.org/ ，淘宝 NPM 镜像是一个完整 npmjs.com 镜像，同步频率目前为 10分钟一次，以保证尽量与官方服务同步。\",\"#经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载 npm config set registry https://registry.npm.taobao.org #查看npm配置信息 npm config list \"]},\"94\":{\"h\":\"npm install命令的使用\",\"t\":[\"#使用 npm install 安装依赖包的最新版， #模块安装的位置：项目目录\\\\node_modules #安装会自动在项目目录下添加 package-lock.json文件，这个文件帮助锁定安装包的版本 #同时package.json 文件中，依赖包会被添加到dependencies节点下，类似maven中的 <dependencies> npm install jquery #npm管理的项目在备份和传输的时候一般不携带node_modules文件夹 npm install #根据package.json中的配置下载依赖，初始化项目 #如果安装时想指定特定的版本 npm install jquery@2.1.x #devDependencies节点：开发时的依赖包，项目打包到生产环境的时候不包含的依赖 #使用 -D参数将依赖添加到devDependencies节点 npm install --save-dev eslint #或 npm install -D eslint #全局安装 #Node.js全局安装的npm包和工具的位置：用户目录\\\\AppData\\\\Roaming\\\\npm\\\\node_modules #一些命令行工具常使用全局安装的方式 npm install -g webpack \"]},\"95\":{\"h\":\"其他命令\",\"t\":[\"#更新包（更新到最新版本） npm update 包名 #全局更新 npm update -g 包名 #卸载包 npm uninstall 包名 #全局卸载 npm uninstall -g 包名 \"]},\"96\":{\"h\":\"Babel\",\"t\":[\"Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行执行。\",\"这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持。\"]},\"97\":{\"h\":\"安装\",\"t\":[\"npm install --global babel-cli #查看是否安装成功 babel --version \"]},\"98\":{\"h\":\"使用\",\"t\":[\"初始化项目\",\"npm init -y \",\"创建配置文件.babelrc\",\"{ \\\"presets\\\": [], \\\"plugins\\\": [] } \",\"安装转码器\",\"npm install --save-dev babel-preset-es2015 \",\"转码\",\"# 转码结果写入一个文件 mkdir dist1 # --out-file 或 -o 参数指定输出文件 babel src/example.js --out-file dist1/compiled.js # 或者 babel src/example.js -o dist1/compiled.js # 整个目录转码 mkdir dist2 # --out-dir 或 -d 参数指定输出目录 babel src --out-dir dist2 # 或者 babel src -d dist2 \"]},\"99\":{\"h\":\"模块化\"},\"100\":{\"h\":\"简介\",\"t\":[\"随着网站逐渐变成\\\"互联网应用程序\\\"，嵌入网页的Javascript代码越来越庞大，越来越复杂。\",\"Javascript模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。\",\"但是，Javascript不是一种模块化编程语言，它不支持\\\"类\\\"（class），包（package）等概念，更遑论\\\"模块\\\"（module）了。\"]},\"101\":{\"h\":\"CommonJS模块规范\",\"t\":[\"每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。\",\"CommonJS使用 exports 和require 来导出、导入模块。\"]},\"102\":{\"h\":\"导出模块\",\"t\":[\"定义文件 1.js\",\"// 定义成员： const sum = function(a,b){ return parseInt(a) + parseInt(b) } const subtract = function(a,b){ return parseInt(a) - parseInt(b) } const multiply = function(a,b){ return parseInt(a) * parseInt(b) } const divide = function(a,b){ return parseInt(a) / parseInt(b) } // 导出成员 module.exports = { sum, subtract, multiply, divide } \"]},\"103\":{\"h\":\"导入模块\",\"t\":[\"定义文件2.js\",\"//引入模块 注意当前路径必须写./ const m = require('./1.js') console.log(m); const result1 = m.sum(1,2) const result2 = m.subtract(1,2) console.log(result1,result2); \"]},\"104\":{\"h\":\"运行程序\",\"t\":[\"node common-js模块化/引入模块.js \"]},\"105\":{\"h\":\"ES6模块规范\",\"t\":[\"ES6使用 export 和 import 来导出、导入模块。\",\"注意：这时的程序无法运行的，因为ES6的模块化无法在Node.js中执行，需要用Babel编辑成ES5后再执行。\"]},\"106\":{\"h\":\"导出模块\",\"t\":[\"定义文件 1.js\",\"export function getList() { console.log('获取数据列表') } export function save() { console.log('保存数据') } \"]},\"107\":{\"h\":\"导入模块\",\"t\":[\"定义文件2.js\",\"//只取需要的方法即可，多个方法用逗号分隔 import { getList, save } from \\\"./1.js\\\" getList() save() \"]},\"108\":{\"h\":\"ES6模块规范另一种写法\",\"t\":[\"ES6使用 export 和 import 来导出、导入模块。\",\"注意：这时的程序无法运行的，因为ES6的模块化无法在Node.js中执行，需要用Babel编辑成ES5后再执行\"]},\"109\":{\"h\":\"导出模块\",\"t\":[\"定义文件 1.js\",\"export default { getList() { console.log('获取数据列表2') }, save() { console.log('保存数据2') } } \"]},\"110\":{\"h\":\"导入模块\",\"t\":[\"定义文件2.js\",\"//只取需要的方法即可，多个方法用逗号分隔 import user from \\\"./1.js\\\" user.getList() user.save() \"]},\"111\":{\"h\":\"webpack\",\"t\":[\"Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。\",\"从图中我们可以看出，Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。\"]},\"112\":{\"h\":\"安装\",\"t\":[\"全局安装 ： npm install -g webpack webpack-cli 安装后查看版本号 ： webpack -v\"]},\"113\":{\"h\":\"Demo演示\"},\"114\":{\"h\":\"打包JS\",\"t\":[\"创建一个文件夹webpack，并进入文件夹\",\"初始化项目 ： npm init -y\",\"在文件夹中创建src目录，并在src中创建以下文件 创建common.js\",\"exports.info = function (str) { document.write(str); } \",\"创建utils.js\",\"exports.add = function (a, b) { return a + b; } \",\"创建main.js\",\"const common = require('./common'); const utils = require('./utils'); common.info('Hello world!' + utils.add(100, 200)); \",\"在webpack目录下创建配置文件 webpack.config.js\",\"以下配置的意思是：读取当前项目目录下src文件夹中的main.js（入口文件）内容，分析资源依赖，把相关的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js\",\"const path = require(\\\"path\\\"); //Node.js内置模块 module.exports = { entry: './src/main.js', //配置入口文件 output: { path: path.resolve(__dirname, './dist'), //输出路径，__dirname：当前文件所在路径 filename: 'bundle.js' //输出文件 } } \",\"执行编译命令 以下配置的意思是：读取当前项目目录下src文件夹中的main.js（入口文件）内容，分析资源依赖，把相关的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js\",\"webpack #有黄色警告 webpack --mode=development #没有警告 #执行后查看bundle.js 里面包含了上面两个js文件的内容并惊醒了代码压缩 \",\"也可以配置项目的npm运行命令，修改package.json文件\",\"\\\"scripts\\\": { //..., \\\"dev\\\": \\\"webpack --mode=development\\\" } \",\"使用npm打包：npm run dev\"]},\"115\":{\"h\":\"打包CSS\",\"t\":[\"安装style-loader和 css-loader Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。 Loader 可以理解为是模块和资源的转换器。 首先我们需要安装相关Loader插件，css-loader 是将 css 装载到 javascript；style-loader 是让 javascript 认识css\",\"npm install --save-dev style-loader css-loader \",\"修改webpack.config.js 注意，这个demo是在上面的基础上继续完成的，需要在 output:{},下增加 module: 标签并配置其中的属性\",\"const path = require(\\\"path\\\"); //Node.js内置模块 module.exports = { //..., output:{}, module: { rules: [ { test: /\\\\.css$/, //打包规则应用到以css结尾的文件上 use: ['style-loader', 'css-loader'] } ] } } \",\"在src中配置style.css文件 注意，这个demo是在上面的基础上继续完成的，需要在 output:{},下增加 module: 标签并配置其中的属性\",\"body{ background:pink; } \",\"修改main.js 在第一行引入style.css\",\"require('./style.css'); \",\"重新执行打包程序\"]},\"116\":{\"h\":\"Vue\",\"t\":[\"初识Vue\",\"Vue指令\",\"VueDemo\",\"修饰符\",\"脚手架\",\"组件\",\"路由\",\"生命周期\",\"Vue中的Ajax\"]},\"117\":{\"h\":\"Thymeleaf\",\"t\":[\"相关资料Thymeleaf-3.0.11.pdfThymeleaf类库.zip\"]},\"118\":{\"h\":\"MVC\",\"t\":[\"M：Model模型\",\"V：View视图\",\"C：Controller控制器\"]},\"119\":{\"h\":\"为什么要使用MVC\",\"t\":[\"我们如果只使用HTML作为视图的话，它是无法展示动态数据的，所以我们对HTML的新的期待：既能够正常显示页面，又能在页面中包含动态数据部分。而动态数据单靠HTML本身是无法做到的，所以此时我们需要引入服务器端动态视图模板技术。\"]},\"120\":{\"h\":\"MVC和三层架构的关系\",\"t\":[\"MVC是在表述层开发中运用的一种设计理念。主张把封装数据的『模型』、显示用户界面的『视图』、协调调度的『控制器』分开。\",\"我们在原有的表述层中，将servlet中对HTML的操作抽离出来，将Servlet只作为Controller控制器负责页面和数据之间的调度，将HTML页面只作为View视图负责数据渲染和提交响应，数据封装到Bean中作为Model模型贯穿三层架构\"]},\"121\":{\"h\":\"Thymeleaf概念\"},\"122\":{\"h\":\"概念\",\"t\":[\"Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎。类似JSP，Velocity，FreeMaker等， 它也可以轻易的与Spring MVC等Web框架进行集成作为Web应用的模板引擎。它的主要作用是在静态页面上渲染显示动态数据\"]},\"123\":{\"h\":\"优势\",\"t\":[\"SpringBoot官方推荐使用的视图模板技术，和SpringBoot完美整合。\",\"不经过服务器运算仍然可以直接查看原始值，对前端工程师更友好。\"]},\"124\":{\"h\":\"开发步骤\",\"t\":[\"将视图层文件归并到web-inf下的view文件\",\"在web.xml文件中配置逻辑视图路径\",\"在Servlet中新建一个基类\",\"新的Servlet继承基类，通过processTemplate方法跳转视图\"]},\"125\":{\"h\":\"Thymeleaf的基本语法\"},\"126\":{\"h\":\"th名称空间\"},\"127\":{\"h\":\"表达式语法\",\"t\":[\"任何HTML标签原有的属性，前面加上『th:』就都可以通过Thymeleaf来设定新值。\",\"<标签 th:属性名=\\\"${参数key}\\\">文本</标签> \"]},\"128\":{\"h\":\"修改文本\",\"t\":[\"<p th:text=\\\"标签体新值\\\">标签体原始值</p> \"]},\"129\":{\"h\":\"修改属性\",\"t\":[\"<input type=\\\"text\\\" name=\\\"username\\\" th:value=\\\"文本框新值\\\" value=\\\"文本框旧值\\\" /> \"]},\"130\":{\"h\":\"解析URL\",\"t\":[\"<!-- 使用Thymeleaf解析url地址 @{}的作用是动态获取上下文路径（当前项目路径） --> <a th:href=\\\"@{/index.html}\\\">访问index.html</a> \",\"注意 : 不经过服务器解析，直接用浏览器打开HTML文件，看到的是『标签体原始值』, 经过服务器解析，Thymeleaf引擎根据th:text属性指定的『标签体新值』去替换『标签体原始值』\"]},\"131\":{\"h\":\"域对象的使用\"},\"132\":{\"h\":\"全局域 ServletContext\",\"t\":[\" //Servlet代码 全局域 服务器关闭才关闭 ServletContext servletContext = getServletContext(); servletContext.setAttribute(\\\"servletContextkey\\\",\\\"servletContextvalue\\\"); //HTML代码 <p th:text=\\\"${application.servletContextkey}\\\">源文本</p> //输出 servletContextvalue \"]},\"133\":{\"h\":\"请求域 request.setAttribute\",\"t\":[\" //请求域 仅限于当前请求 request.setAttribute(\\\"username\\\", \\\"奥巴马\\\");//request域 //HTML代码 <p th:text=\\\"${username}\\\">Original Value</p> //输出 奥巴马 \"]},\"134\":{\"h\":\"会话 session\",\"t\":[\"//session域 仅限于当前用户会话 HttpSession session = request.getSession();//session 会话域 session.setAttribute(\\\"sessionkey\\\",\\\"sessionvalue\\\"); //HTML代码 <p th:text=\\\"${session.sessionkey}\\\">源文本</p> //输出 sessionvalue \"]},\"135\":{\"h\":\"请求参数的使用\",\"t\":[\"http://localhost:8080/webday07/ServletDemo01?name=123&pwd=123&hobby=篮球&hobby=羽毛球 \"]},\"136\":{\"h\":\"获取一个请求参数\",\"t\":[\"<p>请求参数获取：根据参数名获取一个</p> <p th:text=\\\"${param.name}\\\">源文本</p> <p th:text=\\\"${param.pwd}\\\">源文本</p> \"]},\"137\":{\"h\":\"获取多个请求参数\",\"t\":[\"<p>请求参数获取：根据参数名获取多个</p> <p th:text=\\\"${param.hobby}\\\">源文本</p> <p th:text=\\\"${param.hobby[0]}\\\">源文本</p> <p th:text=\\\"${param.hobby[1]}\\\">源文本</p> \"]},\"138\":{\"h\":\"访问Servlet并附带请求参数\",\"t\":[\"<a th:href=\\\"@{user(method='toRegisterPage')}\\\" class=\\\"register\\\">注册</a> \",\"@{user(method='toRegisterPage') 表示访问：http://localhost:8080/webday09/user?method=toRegisterPage\"]},\"139\":{\"h\":\"Thymeleaf的内置对象\",\"t\":[\"所谓内置对象其实就是在Thymeleaf的表达式中可以直接使用的对象\"]},\"140\":{\"h\":\"基本内置对象\",\"t\":[\"<!--使用request对象--> <p th:text=\\\"${#request.getClass().getName()}\\\">使用request对象所属类的全限定名</p> <p th:text=\\\"${#request.getContextPath()}\\\">使用request对象项目部署名</p> <p th:text=\\\"${#request.getAttribute('username')}\\\">使用request域对象项目部署名</p> \",\"如果不清楚这个对象有哪些方法可以使用，那么就通过getClass().getName()获取全类名，再回到Java环境查看这个对象有哪些方法\",\"内置对象的方法可以直接调用\",\"调用方法时需要传参的也可以直接传入参数\"]},\"141\":{\"h\":\"公共内置对象\",\"t\":[\"<!--lists内置对象--> <p th:text=\\\"${#lists.isEmpty(aNotEmptyList)}\\\">判断aNotEmptyList这个key是否为空</p> <p th:text=\\\"${#lists.isEmpty(anEmptyList)}\\\">判断anEmptyList这个key是否为空</p> \",\"公共内置对象的源码位置\"]},\"142\":{\"h\":\"OGNL语法\",\"t\":[\"OGNL：Object-Graph Navigation Language对象-图 导航语言\",\"从根对象触发，通过特定的语法，逐层访问对象的各种属性。\",\"<p th:text=\\\"${student.studentName}\\\">获取student的名字</p> <p th:text=\\\"${student.subject.subjectName}\\\">获取student的学科名字</p> <p th:text=\\\"${student.schoolList[1].schoolName}\\\">获取student的第二个学校的名字</p> <p th:text=\\\"${student.teacherMap.tKey.teacherName}\\\">获取student的老师的名字</p> \",\"在Thymeleaf环境下，${}中的表达式可以从下列元素开始：\",\"访问属性域的起点 \",\"请求域属性名\",\"session\",\"application\",\"param\",\"内置对象 \",\"request\",\"session\",\"lists\",\"strings\",\"属性访问语法\",\"访问对象属性：使用getXxx()、setXxx()方法定义的属性 \",\"对象.属性名\",\"访问List集合或数组 \",\"集合或数组[下标]\",\"访问Map集合 \",\"Map集合.key\",\"Map集合['key']\"]},\"143\":{\"h\":\"分支与迭代\"},\"144\":{\"h\":\"分支\"},\"145\":{\"h\":\"if和unles\",\"t\":[\"<!-- th:if 如果它值为true 则显示标签 th:unless 如果它值为true 则不显示标签 --> <p th:if=\\\"${#lists.isEmpty(teacherList)}\\\">没有数据</p> <p th:if=\\\"${not #lists.isEmpty(teacherList)}\\\">有数据</p> <p th:unless=\\\"${#lists.isEmpty((teacherList))}\\\">有数据</p> \"]},\"146\":{\"h\":\"switch\",\"t\":[\"<!-- switch --> <div th:switch=\\\"${user.memberLevel}\\\"> <p th:case=\\\"level-1\\\">白银</p> <p th:case=\\\"level-2\\\">钻石</p> <p th:case=\\\"level-3\\\">王者</p> </div> \"]},\"147\":{\"h\":\"迭代\",\"t\":[\"类似于vue中的v-for对集合进行迭代遍历，每次遍历出来一条数据就添加一个标签 语法 : th:each=\\\"遍历出来的数据，数据的状态 ：要遍历的数据\\\"\",\"<!-- Servlet代码 --> //往请求域中存储一个teacher对象 request.setAttribute(\\\"teacherList\\\", Arrays.asList(new Teacher(\\\"老师1\\\"),new Teacher(\\\"老师2\\\"),new Teacher(\\\"老师3\\\"))); <!-- html代码 --> <!-- 迭代：th:each 用法： 1.th:each写在什么标签上？每次遍历出来一条数据就添加一个标签，那么th:each久写在这个标签上 2.th:each的语法 th:each=\\\"遍历出来的数据，数据的状态 ：要遍历的数据\\\" 3.status 表示遍历的状态 包含以下属性 index 遍历出来每一个元素的下标 count 遍历出来每一个元素的计数 size 遍历集合的长度 current 遍历出来的当前元素 even/odd 表示遍历出来的元素是否是奇数或者是否是偶数 first 表示遍历出来的元素是否是第一个 last 表示遍历出来的元素是否是最后一个 --> <table> <tr th:each=\\\"teacher,status : ${teacherList}\\\"> <td th:text=\\\"${status.id}\\\">这里显示编号</td> <td th:text=\\\"${teacher.teacherName}\\\">这里显示老师的名字</td> </tr> </table> \",\"每次遍历出来一条数据就添加一个标签\"]},\"148\":{\"h\":\"包含其他页面模板\"},\"149\":{\"h\":\"创建模板\",\"t\":[\"<div th:fragment=\\\"模板名称\\\"> <p>被抽取出来的头部内容</p> </div> \"]},\"150\":{\"h\":\"使用模板\",\"t\":[\"语法\",\"效果\",\"特点\",\"th:insert\",\"把目标的代码片段整个插入到当前标签内部\",\"它会保留页面自身的标签\",\"th:replace\",\"用目标的代码替换当前标签\",\"它不会保留页面自身的标签\",\"th:include\",\"把目标的代码片段去除最外层标签，然后再插入到当前标签内部\",\"它会去掉片段外层标记，同时保留页面自身标记\",\"<!-- 代码片段所在页面的逻辑视图 :: 代码片段的名称 --> <div id=\\\"badBoy\\\" th:insert=\\\"segment :: header\\\"> div标签的原始内容 </div> <div id=\\\"worseBoy\\\" th:replace=\\\"segment :: header\\\"> div标签的原始内容 </div> <div id=\\\"worstBoy\\\" th:include=\\\"segment :: header\\\"> div标签的原始内容 </div> \"]},\"151\":{\"h\":\"Tomcat\",\"t\":[\"JavaEE简介\",\"Tomcat的安装与结构\",\"Tomcat部署项目\",\"Tomcat的配置与组件\",\"JavaWeb项目的开发与部署\"]},\"152\":{\"h\":\"HTTP协议\"},\"153\":{\"h\":\"了解HTTP协议\"},\"154\":{\"h\":\"什么是HTTP协议\",\"t\":[\"**HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）**的缩写, HTTP是万维网（WWW:World Wide Web）的数据通信的基础。\",\"HTTP是一个简单的 请求 → 响应 协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。\",\"HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。\"]},\"155\":{\"h\":\"HTTP协议特点\"},\"156\":{\"h\":\"支持客户/服务器模式\",\"t\":[\"HTTP协议支持客户端服务端模式，需要使用浏览器作为客户端来访问服务端\"]},\"157\":{\"h\":\"简单快速\",\"t\":[\"客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、POST等。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快\"]},\"158\":{\"h\":\"灵活\",\"t\":[\"HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type（Content-Type是HTTP包中用来表示内容类型的标识）加以标记。\"]},\"159\":{\"h\":\"无连接\",\"t\":[\"每次请求一次，释放一次连接。所以无连接表示每次连接只能处理一个请求。优点就是节省传输时间，实现简单。我们有时称这种无连接为短连接。对应的就有了长链接，长连接专门解决效率问题。当建立好了一个连接之后，可以多次请求。但是缺点就是容易造成占用资源不释放的问题。当HTTP协议头部中字段Connection：keep-alive表示支持长链接\"]},\"160\":{\"h\":\"单向性\",\"t\":[\"服务端永远是被动的等待客户端的请求\"]},\"161\":{\"h\":\"无状态\",\"t\":[\"HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。为了解决HTTP协议无状态，于是，两种用于保持HTTP连接状态的技术就应运而生了，一个是Cookie，而另一个则是Session\"]},\"162\":{\"h\":\"HTTP协议发展和版本\",\"t\":[\"http协议在1991年发布第一个版本版本号为0.9。随后WWW联盟（WWW Consortium-W3C）于1994年成立，http协议被纳入到W3C组织中进行维护和管理。\"]},\"163\":{\"h\":\"http1.0\",\"t\":[\"最早在1996年在网页中使用，内容简单，所以浏览器的每次请求都需要与服务器建立一个TCP连接，服务器处理完成后立即断开TCP连接（无连接），服务器不跟踪每个客户端也不记录过去的请求（无状态）,请求只能由客户端发起（单向性）\"]},\"164\":{\"h\":\"http1.1\",\"t\":[\"到1999年广泛在各大浏览器网络请求中使用，HTTP/1.0中默认使用Connection: close。在HTTP/1.1中已经默认使用Connection: keep-alive（长连接），避免了连接建立和释放的开销，但服务器必须按照客户端请求的先后顺序依次回送相应的结果，以保证客户端能够区分出每次请求的响应内容。通过Content-Length字段来判断当前请求的数据是否已经全部接收。不允许同时存在两个并行的响应。\",\"1.1中最重要的一个特点是支持“长连接”，即“一次连接可以多次请求”。\",\"HTTP 1.1支持持久连接（HTTP/1.1的默认模式使用带流水线的持久连接），在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和应答仍然需要使用各自的连接。HTTP 1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间。\"]},\"165\":{\"h\":\"http2.0\"},\"166\":{\"h\":\"长连接\",\"t\":[\"在HTTP/2中，客户端向某个域名的服务器请求页面的过程中，只会创建一条TCP连接，即使这页面可能包含上百个资源。 单一的连接应该是HTTP2的主要优势，单一的连接能减少TCP握手带来的时延。HTTP2中用一条单一的长连接，避免了创建多个TCP连接带来的网络开销，提高了吞吐量\"]},\"167\":{\"h\":\"多路复用 (Multiplexing)\",\"t\":[\"HTTP2.0中所有加强性能的核心是二进制传输，在HTTP1.x中，我们是通过文本的方式传输数据。在HTTP2.0中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。\",\"多路复用，连接共享。不同的request可以使用同一个连接传输（最后根据每个request上的id号组合成正常的请求） HTTP2.0中，有两个概念非常重要：帧（frame）和流（stream）。 帧是最小的数据单位，每个帧会标识出该帧属于哪个流，流是多个帧组成的数据流。 所谓多路复用，即在一个TCP连接中存在多个流，即可以同时发送多个请求，对端可以通过帧中的表示知道该帧属于哪个请求。在客户端，这些帧乱序发送，到对端后再根据每个帧首部的流标识符重新组装。通过该技术，可以避免HTTP旧版本的队头阻塞问题，极大提高传输性能。\"]},\"168\":{\"h\":\"首部压缩（Header Compression）\",\"t\":[\"由于1.1中header带有大量的信息，并且得重复传输，2.0使用encoder来减少需要传输的hearder大小。\"]},\"169\":{\"h\":\"服务端推送（Server Push）\",\"t\":[\"在HTTP2.0中，服务端可以在客户端某个请求后，主动推送其他资源。 可以想象一下，某些资源客户端是一定会请求的，这时就可以采取服务端push的技术，提前给客户端推送必要的资源，就可以相对减少一点延迟时间。在浏览器兼容的情况下也可以使用prefetch。\"]},\"170\":{\"h\":\"更安全\",\"t\":[\"HTTP2.0使用了tls的拓展ALPN做为协议升级，除此之外，HTTP2.0对tls的安全性做了近一步加强，通过黑名单机制禁用了几百种不再安全的加密算法。\"]},\"171\":{\"h\":\"HTTP请求\"},\"172\":{\"h\":\"了解HTTP请求\"},\"173\":{\"h\":\"打开网页的基本流程\",\"t\":[\"当你在浏览器输入URL的时候，浏览器发送一个Request去获取html. 服务器把Response发送回给浏览器。\",\"浏览器分析Response中的 HTML，发现其中引用了很多其他文件，比如图片，CSS文件，JS文件。\",\"浏览器会自动再次发送Request去获取图片，CSS文件，或者JS文件。\",\"等所有的文件都下载成功后。 网页就被显示出来了。\"]},\"174\":{\"h\":\"Request 消息结构\",\"t\":[\"第一部分叫Request line 第二部分叫Request header 第三部分是Request body\",\"Request header和Request body之间有个空行。\"]},\"175\":{\"h\":\"请求的主要组成部分\"},\"176\":{\"h\":\"请求行 request Line\",\"t\":[\"GET /course/id/18.html?a=3&b=4 HTTP/1.1 POST /login HTTP/1.1 \",\"请求方式 默认 GET\",\"资源路径\",\"请求使用的协议\"]},\"177\":{\"h\":\"请求头 request headers\",\"t\":[\"请求头用于说明是谁或什么在发送请求、请求源于何处，或者客户端的喜好及能力。服务器可以根据请求头部给出的客户端信息，试着为客户端提供更好的响应。请求头中信息的格式为key：value。\",\"参数\",\"说明\",\"Host\",\"客户端指定自己想访问的WEB服务器的域名/IP 地址和端口号\",\"Connection\",\"连接方式。如果值是close则表示基于短连接方式，如果该值是keep-alive，网络连接就是持久的，在一定时间范围内是不会关闭，使得对同一个服务器的请求可以继续在该连接上完成\",\"Upgrade-Insecure-Requests\",\"服务端是否支持https加密协议\",\"Cache-Control\",\"指定请求和响应遵循的缓存机制\",\"User-Agent\",\"浏览器表明自己的身份（是哪种浏览器）。例如Chrome浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\",\"Accept\",\"告诉WEB服务器自己接受什么介质类型，表示任何类型，type/ 表示该类型下的所有子类型\",\"Accept-Encoding\",\"浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate）\",\"Accept-Language\",\"浏览器申明自己接收的语言。语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等\",\"Accept-Charset\",\"浏览器告诉服务器自己能接收的字符集\",\"Referer\",\"浏览器向WEB 服务器表明自己是从哪个网页URL获得点击当前请求中的网址/URL\",\"Refresh\",\"表示浏览器应该在多少时间之后刷新文档，以秒计时\",\"Cookie\",\"可向服务端传递数据一种模型\"]},\"178\":{\"h\":\"请求体 request body\",\"t\":[\"客户端传递给服务器的数据。比如：表单使用post方式提交的数据、上传的文件数据.等\"]},\"179\":{\"h\":\"HTTP请求方式\"},\"180\":{\"h\":\"GET\",\"t\":[\"向指定的资源发出“显示”请求。GET请求中会将请求中传递的数据包含在URL中并在浏览器的地址栏中显示。GET请求传递数据时要求数据必须是ASCII字符。GET请求可以被浏览器缓存\"]},\"181\":{\"h\":\"POST\",\"t\":[\"向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求传递数据时，数据可以试试ASCII字符也可以是字节型数据，默认为字符型。POST请求默认情况下不会被浏览器所缓存\"]},\"182\":{\"h\":\"HEAD\",\"t\":[\"向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头度中的元信息\"]},\"183\":{\"h\":\"PUT\",\"t\":[\"向指定资源位置上传其最新内容\"]},\"184\":{\"h\":\"DELETE\",\"t\":[\"请求服务器删除Request-URI所标识的资源\"]},\"185\":{\"h\":\"TRACE\",\"t\":[\"回显服务器收到的请求，主要用于测试或诊断\"]},\"186\":{\"h\":\"OPTIONS\",\"t\":[\"这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用' *'来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作\"]},\"187\":{\"h\":\"CONNECT\",\"t\":[\"HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）\"]},\"188\":{\"h\":\"GET和POST的区别-面试常问\",\"t\":[\"GET在浏览器回退时是无害的，而POST会再次提交请求\",\"GET产生的URL地址可以被Bookmark，而POST不可以\",\"GET请求会被浏览器主动cache，而POST不会，除非手动设置\",\"GET请求只能进行url编码，而POST支持多种编码方式\",\"GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留\",\"GET请求在URL中传送的参数是有长度限制的，而POST则没有。对参数的数据类型GET只接受ASCII字符，而POST即可是字符也可是字节\",\"GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息\",\"GET参数通过URL传递，POST放在Request body中\"]},\"189\":{\"h\":\"HTTP响应\"},\"190\":{\"h\":\"响应行\",\"t\":[\"响应行：HTTP/1.1 200\",\"和请求消息相比，响应消息多了一个“响应状态码”，它以“清晰明确”的语言告诉客户端本次请求的处理结果。\"]},\"191\":{\"h\":\"HTTP状态码分类\"},\"192\":{\"h\":\"常见状态码及含义\",\"t\":[\"状态码\",\"含义\",\"200\",\"请求成功，已经正常处理完毕\",\"301\",\"请求永久重定向，转移到其它URL\",\"302\",\"请求临时重定向\",\"304\",\"请求被重定向到客户端本地缓存\",\"400\",\"客户端请求存在语法错误\",\"401\",\"客户端请求没有经过授权\",\"403\",\"客户端的请求被服务器拒绝，一般为客户端没有访问权限\",\"404\",\"资源未找到，客户端请求的URL在服务端不存在\",\"500\",\"服务端出现异常\"]},\"193\":{\"h\":\"状态码明细\"},\"194\":{\"h\":\"1xx\"},\"195\":{\"h\":\"2xx\"},\"196\":{\"h\":\"3xx\"},\"197\":{\"h\":\"4xx\"},\"198\":{\"h\":\"5xx\"},\"199\":{\"h\":\"响应头\",\"t\":[\"响应头用于告知浏览器当前响应中的详细信息，浏览器通过获取响应头中的信息可以知道应该如何处理响应结果。响应头中信息的格式为key：value\"]},\"200\":{\"h\":\"Date\",\"t\":[\"响应的Date使用的是GMT时间格式，表示响应消息送达时间\"]},\"201\":{\"h\":\"Server\",\"t\":[\"服务器通过这个Server告诉浏览器服务器的类型\"]},\"202\":{\"h\":\"Vary\",\"t\":[\"客户端缓存机制或者是缓存服务器在做缓存操作的时候，会使用到Vary头，会读取响应头中的Vary的内容，进行一些缓存的判断\"]},\"203\":{\"h\":\"Content-Encoding\",\"t\":[\"文档的编码(Encode)方式。用gzip压缩文档能够显著地减少HTML文档的响应时间\"]},\"204\":{\"h\":\"Content-Length\",\"t\":[\"表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据\"]},\"205\":{\"h\":\"Content-Type\",\"t\":[\"表示响应的文档属于什么MIME类型\"]},\"206\":{\"h\":\"什么是MIME?\",\"t\":[\"MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\"]},\"207\":{\"h\":\"MIME作用\",\"t\":[\"HTTP协议所产生的响应中正文部分可以是任意格式的数据，那么如何保证接收方能看得懂发送方发送的正文数据呢？HTTP协议采用MIME协议来规范正文的数据格式。\"]},\"208\":{\"h\":\"MIME类型\",\"t\":[\"Type\",\"Meaning\",\"application/postscript\",\"PostScript file\",\"application/vnd.lotus-notes\",\"Lotus Notes file\",\"application/vnd.ms-excel\",\"Excel spreadsheet\",\"application/vnd.ms-powerpoint\",\"PowerPoint presentation\",\"application/x-gzip\",\"Gzip archive\",\"application/x-java-archive\",\"JAR file\",\"application/x-java-serialized-object\",\"Serialized Java object\",\"application/x-java-vm\",\"Java bytecode (class)file\",\"application/zip\",\"Zip archive\",\"audio/basic\",\"Sound file in au or snd format\",\"audio/midi\",\"MIDI sound file\",\"audio/x-aiff\",\"AIFF sound file\",\"audio/x-wav\",\"Microsoft Windows sound file\",\"image/gif\",\"GIF image\",\"image/jpeg\",\"JPEG image\",\"image/png\",\"PNG image\",\"image/tiff\",\"TIFF image\",\"image/x-xbitmap\",\"X Windows bitmap image\",\"text/css\",\"HTML cascading style sheet\",\"text/html\",\"HTML document\",\"text/plain\",\"Plain text\",\"text/xml\",\"XML\",\"video/mpeg\",\"MPEG video clip\",\"video/quicktime\",\"QuickTime video clip\",\"application/msword\",\"Microsoft Word document\",\"application/octet-stream\",\"Unrecognized or binary data\",\"application/pdf\",\"Acrobat (.pdf) file\"]},\"209\":{\"h\":\"响应体\",\"t\":[\"响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。\"]},\"210\":{\"h\":\"Servlet\",\"t\":[\"初识Servlet\",\"HttpServletRequest和HttpServletResponse\",\"乱码的处理\",\"继承结构与生命周期\",\"ServletContext和ServlectConfig\",\"url-pattern的匹配规则与注解模式\",\"请求转发和响应重定向\",\"路径问题\",\"会话管理Cookie和Session\",\"域对象\"]},\"211\":{\"h\":\"JSP\",\"t\":[\"JSP入门\",\"前后端分离\",\"JSP注意事项\",\"JSP指令标签\",\"JSP的内置对象\",\"EL表达式的使用\",\"JSTL\",\"MVC模式的引入\"]},\"212\":{\"h\":\"过滤器和监听器\",\"t\":[\"初识过滤器\",\"过滤器的使用\",\"过滤器的应用案例\",\"初识监听器\",\"监听器开发案例\"]},\"213\":{\"h\":\"Ajax\",\"t\":[\"初识Ajax\",\"数据格式\",\"JQuery与Ajax实现\",\"Jsonp跨域处理\",\"三级联动案例开发\"]},\"214\":{\"h\":\"MyBatisPlus\",\"t\":[\"MyBatisPlus快速上手\",\"BaseMapper与IService\",\"常用注解与条件构造器\",\"常用插件\"]},\"215\":{\"h\":\"Mybatis基础\",\"t\":[\"Mybatis初识\",\"搭建Mybatis项目环境\",\"Mybatis配置\",\"MyBatis普通模式的开发\",\"Mybatis代理模式的开发\",\"Mybatis动态SQL\",\"Mybatis多表查询\",\"Mybatis缓存\",\"Mybatis逆向工程与其他配置\"]},\"216\":{\"h\":\"Spring基础\",\"t\":[\"初识Spring\",\"基于XML管理Bean\",\"Bean的生命周期\",\"Bean的自动注入\",\"引入外部配置文件\",\"注解方式管理Bean\",\"静态代理与动态代理\",\"AOP面向切面编程\",\"JDBCTemplate\",\"Sping的事务管理\"]},\"217\":{\"h\":\"SpringMVC\",\"t\":[\"概念引入与环境准备\",\"框架搭建与注意事项\",\"执行流程与三大组件\",\"静态资源的放行管理\",\"路径映射与RESTful风格\",\"请求参数的处理\",\"常见注解\",\"响应处理\",\"整合SpringMVC\",\"作用域传参\"]},\"218\":{\"h\":\"Collection接口\"},\"219\":{\"h\":\"常用方法\",\"t\":[\"方法\",\"说明\",\"add(E e)\",\"增加元素\",\"addAll(Collection<? extends E> c)\",\"将另一个集合添加入\",\"clear()\",\"清空集合元素\",\"remove(Object o)\",\"移除某一个元素\",\"contains(Object o)\",\"判断指定元素是否存在\",\"equals(Object o)\",\"判断元素是否相同\",\"isEmpty()\",\"判断是否为空\",\"size()\",\"获取集合使用元素的大小\",\"public class Test01 { public static void main(String[] args) { /* Collection接口的常用方法： 增加：add(E e) addAll(Collection<? extends E> c) 删除：clear() remove(Object o) 修改： 查看：iterator() size() 判断：contains(Object o) equals(Object o) isEmpty() */ //创建对象：接口不能创建对象，利用实现类创建对象： Collection collection = new ArrayList(); //增加：add(E e) //调用方法： //集合有一个特点：只能存放引用数据类型的数据，不能是基本数据类型 //基本数据类型自动装箱，对应包装类。int--->Integer collection.add(18); collection.add(19); collection.add(20); System.out.println(collection);//[18, 19, 20] //addAll(Collection<? extends E> c) 将另一个集合添加入 List integers = Arrays.asList(new Integer[]{11, 12, 13, 15}); collection.addAll(integers); System.out.println(collection);//[18, 19, 20, 11, 12, 13, 15] // 移除某个元素 collection.remove(18); System.out.println(collection);//[19, 20, 11, 12, 13, 15] boolean remove = collection.remove(19); System.out.println(\\\"集合移除19是否成功：\\\"+remove);//集合移除19是否成功：true // 清空集合 collection.clear(); System.out.println(collection);//[] //查看 collection.add(22); System.out.println(\\\"集合存在的元素数量：\\\"+collection.size());//集合存在的元素数量：1 System.out.println(\\\"集合是否为空：\\\"+collection.isEmpty()); //集合是否为空：false System.out.println(\\\"集合是否包含22：\\\"+collection.contains(22));//集合是否包含22：true List arrayList = new ArrayList(); arrayList.add(22); System.out.println(\\\"集合内容是否相同：\\\"+arrayList.equals(collection));//集合内容是否相同：true System.out.println(\\\"集合地址是否相同：\\\"+(arrayList==collection));//集合地址是否相同：false } } \"]},\"220\":{\"h\":\"集合遍历\",\"t\":[\"循环可以使用：增强for循环、Lambda表达式、迭代器循环\",\"public class Test02 { public static void main(String[] args) { Collection arrayList = new ArrayList(); arrayList.add(12); arrayList.add(13); // 增强For循环 for (Object o : arrayList) { System.out.println(o); } System.out.println(\\\"===============\\\"); //Lambda 表达式输出 arrayList.forEach(System.out::println); System.out.println(\\\"===============\\\"); /** * 迭代器循环遍历 * 集合对象.iterator(); 创建迭代器对象 * 迭代器对象.hasNext() 是否存在下一个元素 * 迭代器对象.next() 获取当前元素，并下移指针 */ Iterator iterator = arrayList.iterator(); while (iterator.hasNext()) { System.out.println(iterator.next()); } } } \"]},\"221\":{\"h\":\"前言\"},\"222\":{\"h\":\"什么是算法和数据结构\"},\"223\":{\"h\":\"算法\",\"t\":[\"可以解决具体问题：解题流程 = 算法\",\"有设计解决的具体的流程：不同的解题思路\",\"有评价这个算法的具体指标：时间复杂度、空间复杂度\"]},\"224\":{\"h\":\"数据结构\",\"t\":[\"就是在计算机的缓存，内存，硬盘 如何组织管理数据的。重点在结构上，是按照什么结构来组织管理我们的数据。\"]},\"225\":{\"h\":\"分类\",\"t\":[\"逻辑结构：思想上的结构 线性表（数组，链表），图，树，栈，队列\",\"物理结构：真实结构 紧密结构（顺序结构），跳转结构（链式结构）\"]},\"226\":{\"h\":\"紧密结构（顺序结构）与 跳转结构（链式结构）\",\"t\":[\"以线性表为例：\",\"结构逻辑图\",\"结构特点 线性表是n个类型相同数据元素的有限序列，通常记作a0,a1,,,ai-1,ai,ai+1,,,,,an-1)。 \",\"相同数据类型 在线性表的定义中,我们看到从a0到an-1的n个数据元素是具有相同属件的亓素。 比如说可以都是数字,例如(12,23,45,56,45); 也可以是宇符,例如(A,B,....Z) 当然也可以是具有更复杂结构的数据元素,例如学生、商品、装备等。 相同数据类型意味着在内存中存储时,每个元素会占用相同的内存空间,便于后续的查询定位。\",\"有限 在线性表的定义中,我们看到从a0到an-1的n个数据元素是具有相同属件的亓素。 比如说可以都是数字,例如(12,23,45,56,45); 也可以是宇符,例如(A,B,....Z) 当然也可以是具有更复杂结构的数据元素,例如学生、商品、装备等。 相同数据类型意味着在内存中存储时,每个元素会占用相同的内存空间,便于后续的查询定位。\",\"序列（顺序性） 在线性表的相邻数据元素之间存在若序偶关系， 即ai-1是ai的直接前驱,则ai是ai-1的直接后续, 同时ai又是ai+1的直接前驱，ai+1是ai的直接后续。 唯一没有直接前驱的元素a0 一端称为表头,唯一没有后续的元素an-1一端称为表尾。 除了表头和表尾元素外,任何一个元素都有且仅有一个直接前驱和直接后继。\"]},\"227\":{\"h\":\"逻辑结构和物理结构\",\"t\":[\"线性表逻辑结构，对应的真实结构如果是紧密结构---》典型就是 数组\",\"数组 优点：查询元素效率高 缺点：删除元素，插入元素效率低 线性表逻辑结构，对应的真实结构如果是跳转结构---》典型就是 链表\",\"单向链表\",\"双向链表\",\"循环链表 优点：删除元素，插入元素效率高 缺点：查询元素效率低\"]},\"228\":{\"h\":\"集合的引入\",\"t\":[\"数组，集合都是对多个数据进行存储操作的，简称为容器。 PS:这里的存储指的是内存层面的存储，而不是持久化存储（.txt,.avi,.jpg,数据库）\",\"特点： （1）数组一旦指定了长度，那么长度就被确定了，不可以更改。 （2）数组一旦声明了类型以后，数组中只能存放这个类型的数据。数组中只能存放同一种类型的数据。\",\"缺点： （1）数组一旦指定了长度，那么长度就被确定了，不可以更改。 （2）删除，增加元素 效率低。 （3）数组中实际元素的数量是没有办法获取的，没有提供对应的方法或者属性来获取 （4）数组存储：有序，可重复 ，对于无序的，不可重复的数组不能满足要求。\",\"正因为上面的缺点，引入了一个新的存储数据的结构---》集合 不同集合底层数据结构不一样。集合不一样，特点也不一样\"]},\"229\":{\"h\":\"集合结构图\"},\"230\":{\"h\":\"应用场景\"},\"231\":{\"h\":\"泛型\"},\"232\":{\"h\":\"前言\"},\"233\":{\"h\":\"什么是泛型\",\"t\":[\"集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，\",\"JDK1.5之 后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。 例如：Collection<E>, List<E>， ArrayList<E> 这个<E>就是类型参数，即泛型。\"]},\"234\":{\"h\":\"为什么用泛型\",\"t\":[\"不使用泛型\",\"public class Test01 { //这是main方法，程序的入口 public static void main(String[] args) { //创建一个ArrayList集合，向这个集合中存入学生的成绩： ArrayList al = new ArrayList(); al.add(98); al.add(18); al.add(39); al.add(60); al.add(83); al.add(\\\"丽丽\\\"); //对集合遍历查看： for(Object obj:al){ System.out.println(obj); } } } \",\"一般我们在使用集合的时候基本上往集合中存入的都是相同类型的数据，便于管理。但是，由于集合底层是Object数组，所以现在什么引用数据类型都可以存入集合，不方便！\",\"使用泛型后\",\"public class Test01 { //这是main方法，程序的入口 public static void main(String[] args) { //创建一个ArrayList集合，向这个集合中存入学生的成绩： //加入泛型的优点：在编译时期就会对类型进行检查，不是泛型对应的类型就不可以添加入这个集合。 ArrayList<Integer> al = new ArrayList<Integer>(); al.add(98); al.add(18); al.add(39); al.add(60); al.add(83); // 此时对于不符合泛型限定类型的数据，都会报错 /*al.add(\\\"丽丽\\\"); al.add(9.8);*/ //对集合遍历查看： /*for(Object obj:al){ System.out.println(obj); }*/ for(Integer i:al){ System.out.println(i); } } \"]},\"235\":{\"h\":\"使用泛型的好处\",\"t\":[\"使用版本：JDK1.5以后\",\"泛型实际就是 一个<>引起来的 参数类型，这个参数类型 具体在使用的时候才会确定具体的类型\",\"使用了泛型以后，可以确定集合中存放数据的类型，在编译时期就可以检查出来。\",\"使用泛型你可能觉得麻烦，实际使用了泛型才会简单，后续的遍历等操作简单。\",\"泛型的类型：都是引用数据类型，不能是基本数据类型\",\"ArrayList<Integer> al = new ArrayList<Integer>(); 在JDK1.7以后可以写为：ArrayList<Integer> al = new ArrayList<>(); --<> ---钻石运算符\"]},\"236\":{\"h\":\"语法\"},\"237\":{\"h\":\"泛型类、泛型接口\"},\"238\":{\"h\":\"格式\",\"t\":[\"类名<E> 就是一个泛型类，<>里面就是一个参数类型，但是这个类型是什么呢？这个类型现在是不确定的，相当于一个占位。\",\"但是现在确定的是这个类型一定是一个引用数据类型，而不是基本数据类型\",\"public class GenericTest<E> { int age; String name; E sex; public void a(E n){ } public void b(E[] m){ } } class Test{ //这是main方法，程序的入口 public static void main(String[] args) { //GenericTest进行实例化： //(1)实例化的时候不指定泛型：如果实例化的时候不明确的指定类的泛型，那么认为此泛型为Object类型 GenericTest gt1 = new GenericTest(); gt1.a(\\\"abc\\\"); gt1.a(17); gt1.a(9.8); gt1.b(new String[]{\\\"a\\\",\\\"b\\\",\\\"c\\\"}); //（2）实例化的时候指定泛型：---》推荐方式 GenericTest<String> gt2 = new GenericTest<>(); gt2.sex = \\\"男\\\"; gt2.a(\\\"abc\\\"); gt2.b(new String[]{\\\"a\\\",\\\"b\\\",\\\"c\\\"}); } } \"]},\"239\":{\"h\":\"继承情况\",\"t\":[\"父类指定泛型\",\"class SubGenericTest extends GenericTest<Integer>{ } class Demo{ //这是main方法，程序的入口 public static void main(String[] args) { //指定父类泛型，那么子类就不需要再指定泛型了，可以直接使用 SubGenericTest sgt = new SubGenericTest(); sgt.a(19); } } \",\"父类不指定泛型 如果父类不指定泛型，那么子类也会变成一个泛型类，那这个E的类型可以在创建子类对象的时候确定：\",\"class SubGenericTest2<E> extends GenericTest<E>{ } class Demo2{ //这是main方法，程序的入口 public static void main(String[] args) { SubGenericTest2<String> s = new SubGenericTest2<>(); s.a(\\\"abc\\\"); s.sex = \\\"女\\\"; } } \"]},\"240\":{\"h\":\"细节\",\"t\":[\"泛型类可以定义多个参数类型\",\"public class TestGeneric<A,B,C>{ A age; B name; C sex; public void a(A m,B n,C x){ } } \",\"泛型类的构造器的写法 构造方法不能使用泛型\",\"public class TestGeneric<A,B,C>{ // public TestGeneric <A,B,C>(){ public TestGeneric(){ } } \",\"不同的泛型的引用类型不可以相互赋值\",\"class Demo2{ //这是main方法，程序的入口 public static void main(String[] args) { SubGenericTest2<String> s1 = null; SubGenericTest2<Integer> s2 = null; // s1 = s2 } } \",\"泛型如果不指定，那么就会被擦除，反应对应的类型为Object类型\",\"class SubGenericTest2<E> extends GenericTest<E>{ } class Demo2{ //这是main方法，程序的入口 public static void main(String[] args) { SubGenericTest2 s = new SubGenericTest2(); s.a(\\\"abc\\\"); s.sex = \\\"女\\\"; } } \",\"泛型类中的静态方法不能使用类的泛型 因为，静态方法属性优先于对象之前加载\",\"class SubGenericTest2<E> extends GenericTest<E>{ //public static int c(A a){ // return 10; //} } \",\"不能直接使用E[ ]的创建 可以先创建Object数组再转换成泛型类型\",\"public static void main(String[] args) { // A[] i = new A[10]; A[] i = (A[])new Object[10]; } \"]},\"241\":{\"h\":\"泛型方法\",\"t\":[\"不是带泛型的方法就是泛型方法，泛型方法有要求：这个方法的泛型的参数类型要和当前的类的泛型无关 泛型方法对应的那个泛型参数类型 和 当前所在的这个类 是否是泛型类，泛型是啥 无关\",\"泛型方法定义的时候，前面要加上<T> 原因：如果不加的话，会把T当做一种数据类型，然而代码中没有T类型那么就会报错\",\"T的类型是在调用方法的时候确定的\",\"泛型方法可否是静态方法？可以是静态方法\",\"public class TestGeneric<E> { //不是泛型方法 （不能是静态方法） public static void a(E e){ } //是泛型方法 public static <T> void b(T t){ } } class Demo{ //这是main方法，程序的入口 public static void main(String[] args) { TestGeneric<String> tg = new TestGeneric<>(); tg.a(\\\"abc\\\"); tg.b(\\\"abc\\\"); tg.b(19); tg.b(true); } } \"]},\"242\":{\"h\":\"泛型参数的继承关系\",\"t\":[\"泛型的参数继承关系，与原有的类的继承关系无关，我们再使用多态时，以原有类的继承关系为准\",\"public static void main(String[] args){ // 多态的应用 Object obj = new Object(); String s = new String(); obj = s; // 多态的应用 Object[] objArr = new Object[10]; String[] strArr = new String[10]; objArr = strArr; List<Object> list1 = new ArrayList<>(); List<String> list2 = new ArrayList<>(); // list1 = list2; // 报错 list1 与 list2 是并列关系 } \"]},\"243\":{\"h\":\"通配符 <?>\"},\"244\":{\"h\":\"格式\",\"t\":[\"在上面的开发中，我们在使用不不同的泛型时，当涉及到重写操作时，会出现错误的情况：\",\"public class Test { /*public void a(List<Object> list){ } public void a(List<String> list){ } public void a(List<Integer> list){ }*/ } \",\"此时我们可以使用通配符<?>\",\"public class Test { /*public void a(List<Object> list){ } public void a(List<String> list){ } public void a(List<Integer> list){ }*/ public void a(List<?> list){ //内部遍历的时候用Object即可，不用？ for(Object a:list){ System.out.println(a); } } } class T{ //这是main方法，程序的入口 public static void main(String[] args) { Test t = new Test(); t.a(new ArrayList<Integer>()); t.a(new ArrayList<String>()); t.a(new ArrayList<Object>()); } } \",\"<?> 通配符的泛型，可作为任何类型的泛型的父类，与之转换承接\",\"public class Demo { //这是main方法，程序的入口 public static void main(String[] args) { List<Object> list1 = new ArrayList<>(); List<String> list2 = new ArrayList<>(); List<Integer> list3 = new ArrayList<>(); List<?> list = null; list = list1; list = list2; list = list3; } } \"]},\"245\":{\"h\":\"细节\",\"t\":[\"注意事项\",\"使用增强For循环遍历时，需要使用Object对象进行操作\",\"不可以随便添加数据\",\"读取数据时，必须使用Object类型类承接\",\"相关代码\",\"public class Test { public void a(List<?> list){ //1.遍历： for(Object a:list){ System.out.println(a); } //2.数据的写入操作 ： //list.add(\\\"abc\\\");-->出错，不能随意的添加数据 list.add(null); //3.数据的读取操作： Object s = list.get(0); } } class T{ //这是main方法，程序的入口 public static void main(String[] args) { Test t = new Test(); t.a(new ArrayList<Integer>()); t.a(new ArrayList<String>()); t.a(new ArrayList<Object>()); } } \"]},\"246\":{\"h\":\"泛型受限\"},\"247\":{\"h\":\"上限 <? extends Classs>\",\"t\":[\"限定为指定类或指定类的子类\",\"public class Test02 { public static void main(String[] args) { List<Object> objects = new ArrayList<>(); List<Person> person = new ArrayList<>(); List<Student> students = new ArrayList<>(); /*测试：泛型上限*/ List<? extends Person> list = null; // list = objects; 报错，Object是Person的父类 list = person; list = students; } } class Person{} class Student extends Person{} \"]},\"248\":{\"h\":\"下限 <? super Classs>\",\"t\":[\"限定为指定类或指定类的父类\",\"public class Test02 { public static void main(String[] args) { List<Object> objects = new ArrayList<>(); List<Person> person = new ArrayList<>(); List<Student> students = new ArrayList<>(); /*测试：泛型下限*/ List<? super Person> list1 = null; list1 = objects; list1 = person; // list1 = students; 报错，Object是Person的子类 } } class Person{} class Student extends Person{} \"]},\"249\":{\"h\":\"List接口\",\"t\":[\"List接口实现Collection接口，所以他可以使用Collection接口的通用方法，也可以使用特有的方法。 List接口下存在：ArrayList实现类、Vector实现类、LinkedList实现类 List接口：不唯一、有序 遍历方式：普通For循环、迭代器、增强For循环\"]},\"250\":{\"h\":\"ArrayList实现类\"},\"251\":{\"h\":\"常用方法\",\"t\":[\"方法\",\"说明\",\"add(E e)\",\"增加元素\",\"add(int index, E element)\",\"指定位置新增（插入）\",\"set(int index, E element)\",\"修改指定下标的值\",\"remove(int index)\",\"移除指定的坐标元素\",\"remove(Object o)\",\"移除指定的元素\",\"get(int index)\",\"获取指定下标的元素\",\"public class Test01 { public static void main(String[] args) { /* List接口中常用方法： 增加：add(int index, E element) 删除：remove(int index) remove(Object o) 修改：set(int index, E element) 查看：get(int index) 判断： */ List list = new ArrayList(); //新增 list.add(13); list.add(17); list.add(6); list.add(-1); list.add(2); list.add(\\\"abc\\\"); System.out.println(list); // 指定位置新增（插入） list.add(3,66); System.out.println(list); // 修改 list.set(3,77); System.out.println(list); // 移除指定的坐标元素 list.remove(2); System.out.println(list); // 移除指定的元素 list.remove(\\\"abc\\\"); System.out.println(list); // 获取指定下标的元素 Object o = list.get(0); System.out.println(o); ArrayList arrayList = new ArrayList(); arrayList.add(123); //循环遍历 System.out.println(); System.out.println(\\\"使用for循环：\\\"); for (int i = 0; i < list.size(); i++) { System.out.print(list.get(i)+\\\"\\\\t\\\"); } System.out.println(); System.out.println(\\\"使用增强for循环：\\\"); for (Object object : list) { System.out.print(object+\\\"\\\\t\\\"); } System.out.println(); System.out.println(\\\"使用Lambda表达式：\\\"); list.stream().forEach(s-> System.out.print(s+\\\"\\\\t\\\")); System.out.println(); System.out.println(\\\"使用迭代器：\\\"); Iterator iterator = list.iterator(); while (iterator.hasNext()) { System.out.print(iterator.next()+\\\"\\\\t\\\"); } } } \"]},\"252\":{\"h\":\"内存结构原理\",\"t\":[\"在源码里ArrayList实现了List接口，又继承了AbreastList实现类。但是AbreastList实现类也是实现了List接口，所以此处有些许冗余。但在后续的代码中并没有修正\"]},\"253\":{\"h\":\"JDK 1.7\",\"t\":[\"总结：ArrayList初始长度为10，达到长度上限后，以1.5倍扩容\"]},\"254\":{\"h\":\"JDK 1.8\",\"t\":[\"总结：ArrayList初始为空的数据组，第一次使用时设置长度为10，达到长度上限后，以1.5倍扩容\"]},\"255\":{\"h\":\"JDK1.7与JDK1.8的区别\",\"t\":[\"JDK1.7在初始化时，就会创建一个长度为10的数组，用于存储。在JDK1.8时，我们在初始化时会创建一个空的数组，第一次使用时才会给数组赋值长度为10.\",\"其余两者扩容的长度都是1.5倍\"]},\"256\":{\"h\":\"Vector实现类\",\"t\":[\"Vector方法以及逐渐退出历史舞台了，但是我们还是需要去了解他。基本上整体代码结构与ArrayList一致\"]},\"257\":{\"h\":\"底层代码逻辑\",\"t\":[\"底层Object数组，int类型属性表示数组中有效长度：\",\"Vector v=new Vector();调用构造器\",\"add方法\"]},\"258\":{\"h\":\"与ArrayList的区别\",\"t\":[\"相同点： 底层都是Object数据组，初始化长度为10 核心元素都是数组和使用长度计数\",\"不同点： Vector底层扩容长度为原数组的2倍，使用同步锁，线程安全但效率低 ArrayList底层扩容长度为原数组的1.5倍，没使用锁，线程相对不安全，但效率高\"]},\"259\":{\"h\":\"LinedList 实现类\",\"t\":[\"LinkedList底层实现了双向链表和双端队列特点;\",\"可以添加任意元素(元素可以重复)，包括null;\",\"线程不安全，没有实现同步\"]},\"260\":{\"h\":\"常用方法\",\"t\":[\"方法\",\"说明\",\"add(E e)\",\"新增一个元素\",\"addFirst(E e)\",\"新增到头部\",\"addLast(E e)\",\"新增到尾部\",\"offer(E e)\",\"插入一个元素\",\"offerFirst(E e)\",\"插入到头部\",\"offerLast(E e)\",\"插入到尾部\",\"poll()\",\"删除头上的元素并且将元素返回\",\"pollFirst()\",\"删除第一个的元素并且将元素返回\",\"pollLast()\",\"删除最后一个的元素并且将元素返回\",\"removeFirst()\",\"移除第一个的元素并且将元素返回\",\"removeLast()\",\"移除最后一个的元素并且将元素返回\",\"element()\",\"获取头元素\",\"getFirst()\",\"获取第一个元素\",\"getLast()\",\"获取最后一个元素\",\"indexOf(Object o)\",\"获取指定元素下标\",\"lastIndexOf(Object o)\",\"获取指定元素最后一次下标\",\"peek()\",\"检索但不删除此列表的头部（第一个元素）\",\"peekFirst()\",\"检索但不删除此列表的第一个元素，如果此列表为空，则返回null\",\"peekLast()\",\"检索但不删除此列表的最后一个元素，如果此列表为空，则返回null\",\"public class Test04 { public static void main(String[] args) { /* LinkedList常用方法： 增加 addFirst(E e) addLast(E e) offer(E e) offerFirst(E e) offerLast(E e) 删除 poll() pollFirst() pollLast() ---》JDK1.6以后新出的方法，提高了代码的健壮性 removeFirst() removeLast() 修改 查看 element() getFirst() getLast() indexOf(Object o) lastIndexOf(Object o) peek() peekFirst() peekLast() 判断 */ LinkedList<String> list = new LinkedList<>(); /* * add（不带索引默认添加到链表的最后）与offer一样都是添加操作， * 唯一的区别就是offer没有带索引参数的方法，并且如果队列满了add会抛出异常，而offer不会。 * */ //新增 list.add(\\\"aaaaa\\\"); list.add(\\\"bbbbb\\\"); list.add(\\\"ccccc\\\"); list.add(\\\"ddddd\\\"); list.add(\\\"eeeee\\\"); list.add(\\\"bbbbb\\\"); list.add(\\\"fffff\\\"); //添加到头部 list.addFirst(\\\"begin\\\"); //添加到末尾 list.addLast(\\\"end\\\"); //添加元素在尾端 list.offer(\\\"offer\\\"); //添加到头部 list.offerFirst(\\\"offerFirst\\\"); //添加到末尾 list.offerLast(\\\"offerLast\\\"); System.out.println(list); // [offerFirst, begin, aaaaa, bbbbb, ccccc, ddddd, eeeee, bbbbb, fffff, end, offer, offerLast] //删除 System.out.println(list.poll());//删除头上的元素并且将元素输出 offerFirst System.out.println(list.pollFirst());//删除第一个的元素并且将元素输出 begin System.out.println(list.pollLast());//删除末尾的元素并且将元素输出 offerLast System.out.println(list); // [aaaaa, bbbbb, ccccc, ddddd, eeeee, bbbbb, fffff, end, offer] System.out.println(list.removeFirst()); //删除第一个的元素并且将元素输出 begin System.out.println(list.removeLast());//删除末尾的元素并且将元素输出 offer System.out.println(list); // [bbbbb, ccccc, ddddd, eeeee, bbbbb, fffff, end] //清空集合 /* list.clear(); System.out.println(list);// []*/ //集合的遍历： Iterator<String> iterator = list.iterator(); while (iterator.hasNext()) { System.out.print(iterator.next()+\\\"\\\\t\\\"); } System.out.println(); for (int i = 0; i < list.size(); i++) { System.out.print(list.get(i)+\\\"\\\\t\\\"); } System.out.println(); for (Object o : list) { System.out.print(o+\\\"\\\\t\\\"); } System.out.println(); //下面这种方式好，节省内存 for (Iterator<String> iterator1 = list.iterator();iterator1.hasNext();){ System.out.println(iterator1.next()); } } } \"]},\"261\":{\"h\":\"底层原理\",\"t\":[\"LinedList是链表，物理结构是：跳转结构，逻辑结构是：线性表-链表 ArrayList是数组，物理结构是：紧密结构，逻辑结构是：线性表-数组\",\"LinkedList底层维护了一个双向链表;\",\"LinkedList中维护了两个属性first和last分别指向首节点和尾节点;\",\"每个节点(Node对象) ，里面又维护了prev、next、 item三个属性，其中通过prev指向前一 个，通过next指向后个节点，而item就是真正存放数据的属性。最终实现双向链表;\",\"所以LinkedList的元素的添加和删除，不是通过数组完成的，相对来说效率较高，添加是添加在双向链表的尾部，remove()不指定索引默认删除的是第一个数据\"]},\"262\":{\"h\":\"模拟LinedList代码\",\"t\":[\"public class Test03 { public static void main(String[] args) { MyLinkedList myLinkedList = new MyLinkedList(); myLinkedList.add(111); myLinkedList.add(222); myLinkedList.add(333); System.out.println(myLinkedList.getSize()); Object o = myLinkedList.get(2); System.out.println(o); } } class Node{ //三个属性 //上一个元素的地址 private Node pre; //当前元素 private Object obj; //下一个元素的地址 private Node next; public Node getPre() { return pre; } public void setPre(Node pre) { this.pre = pre; } public Object getObj() { return obj; } public void setObj(Object obj) { this.obj = obj; } public Node getNext() { return next; } public void setNext(Node next) { this.next = next; } @Override public String toString() { return \\\"Node{\\\" + \\\"pre=\\\" + pre + \\\", obj=\\\" + obj + \\\", next=\\\" + next + '}'; } } class MyLinkedList{ //链中一定有一个首节点： Node first; //链中一定有一个尾节点： Node last; //计数器： int count = 0; //提供一个构造器： public MyLinkedList(){ } //添加元素方法： public void add(Object o){ if(first == null){//证明你添加的元素是第一个节点： //将添加的元素封装为一个Node对象： Node n = new Node(); n.setPre(null); n.setObj(o); n.setNext(null); //当前链中第一个节点变为n first = n; //当前链中最后一个节点变为n last = n; }else{//证明已经不是链中第一个节点了 //将添加的元素封装为一个Node对象： Node n = new Node(); n.setPre(last);//n的上一个节点一定是当前链中的最后一个节点last n.setObj(o); n.setNext(null); //当前链中的最后一个节点的下一个元素 要指向n last.setNext(n); //将最后一个节点变为n last = n; } //链中元素数量加1 count++; } //得到集合中元素的数量： public int getSize(){ return count; } //通过下标得到元素： public Object get(int index){ //获取链表的头元素： Node n = first; //一路next得到想要的元素 for(int i=0;i<index;i++){ n = n.getNext(); } return n.getObj(); } } \"]},\"263\":{\"h\":\"LinedList底层代码\",\"t\":[\"JDK1.7和JDK1.8的LinkedList的源码是一致的\",\"public class LinkedList<E>{//E是一个泛型，具体的类型要在实例化的时候才会最终确定 transient int size = 0;//集合中元素的数量 //Node的内部类 private static class Node<E> { E item;//当前元素 Node<E> next;//指向下一个元素地址 Node<E> prev;//上一个元素地址 Node(Node<E> prev, E element, Node<E> next) { this.item = element; this.next = next; this.prev = prev; } } transient Node<E> first;//链表的首节点 transient Node<E> last;//链表的尾节点 //空构造器： public LinkedList() { } //添加元素操作： public boolean add(E e) { linkLast(e); return true; } void linkLast(E e) {//添加的元素e final Node<E> l = last;//将链表中的last节点给l 如果是第一个元素的话 l为null //将元素封装为一个Node具体的对象： final Node<E> newNode = new Node<>(l, e, null); //将链表的last节点指向新的创建的对象： last = newNode; if (l == null)//如果添加的是第一个节点 first = newNode;//将链表的first节点指向为新节点 else//如果添加的不是第一个节点 l.next = newNode;//将l的下一个指向为新的节点 size++;//集合中元素数量加1操作 modCount++; } //获取集合中元素数量 public int size() { return size; } //通过索引得到元素： public E get(int index) { checkElementIndex(index);//健壮性考虑 return node(index).item; } Node<E> node(int index) { //如果index在链表的前半段，那么从前往后找 if (index < (size >> 1)) { Node<E> x = first; for (int i = 0; i < index; i++) x = x.next; return x; } else {//如果index在链表的后半段，那么从后往前找 Node<E> x = last; for (int i = size - 1; i > index; i--) x = x.prev; return x; } } } \"]},\"264\":{\"h\":\"Iterator()与ListIterator()迭代器\"},\"265\":{\"h\":\"Iterator()迭代器\",\"t\":[\"当我们想在指定位置后面添加字符串时，我们使用Iterator()迭代器进行如下处理：\",\"public class Test2 { //这是main方法，程序的入口 public static void main(String[] args) { ArrayList<String> list = new ArrayList<>(); list.add(\\\"aa\\\"); list.add(\\\"bb\\\"); list.add(\\\"cc\\\"); list.add(\\\"dd\\\"); list.add(\\\"ee\\\"); //在\\\"cc\\\"之后添加一个字符串\\\"kk\\\" Iterator<String> it = list.iterator(); while(it.hasNext()){ if(\\\"cc\\\".equals(it.next())){ list.add(\\\"kk\\\"); } } } } \",\"我们会发现触发异常： 主要由于：迭代器与集合进行同步操作导致的\"]},\"266\":{\"h\":\"ListIterator()迭代器\",\"t\":[\"为了解决上面的问题，我们引入了ListIterator()迭代器，让迭代与修改都通过它来执行：\",\"public class Test2 { //这是main方法，程序的入口 public static void main(String[] args) { ArrayList<String> list = new ArrayList<>(); list.add(\\\"aa\\\"); list.add(\\\"bb\\\"); list.add(\\\"cc\\\"); list.add(\\\"dd\\\"); list.add(\\\"ee\\\"); //在\\\"cc\\\"之后添加一个字符串\\\"kk\\\" ListIterator<String> it = list.listIterator(); while(it.hasNext()){ if(\\\"cc\\\".equals(it.next())){ it.add(\\\"kk\\\"); } } System.out.println(it.hasNext()); System.out.println(it.hasPrevious()); //逆向遍历： while(it.hasPrevious()){ System.out.println(it.previous()); } System.out.println(it.hasNext()); System.out.println(it.hasPrevious()); System.out.println(list); } } \"]},\"267\":{\"h\":\"iterator()与Iterator以及Iterable的关系\"},\"268\":{\"h\":\"关系图\",\"t\":[\"Collection接口继承Iterable接口，存在iterator()抽象方法，在ArrayList中事项抽象方法返回Iterator接口\"]},\"269\":{\"h\":\"hasNext(),next()的具体实现\",\"t\":[\"cursor用来模拟指针，输出指针指向的值并移动指针\"]},\"270\":{\"h\":\"增强for循环 底层也是通过迭代器实现的\"},\"271\":{\"h\":\"比较器\",\"t\":[\"内部比较器：实现Comparable接口，重写compareTo方法 外部比较器【推荐】：实现Comparator接口,并重写compare方法\"]},\"272\":{\"h\":\"基本类型的比较\",\"t\":[\"我们在常见的开发中，对于基本类型的比较\",\"int a = 10; int b = 20; System.out.println(a-b); // =0 >0 <0 \",\"String类型中有一个compareTo方法，在String中重新了这个方法。所以我们可以直接使用compareTo来比较Stirng\",\"String a = \\\"A\\\"; String b = \\\"B\\\"; System.out.println(a.compareTo(b)); \",\"当然，包装类型中都重写了这个方法：\",\"double a = 9.6; double b = 9.3; /* System.out.println((int)(a-b));*/ System.out.println(((Double) a).compareTo((Double) b)); \"]},\"273\":{\"h\":\"自定义引用类型的比较【核心】\"},\"274\":{\"h\":\"内部比较器\",\"t\":[\"我们直接在自定义的引用类型的实体类中实现Comparable接口，重写compareTo方法\",\"public class Student implements Comparable<Student>{ private int age; private double height; private String name; public int getAge() { return age; } public void setAge(int age) { this.age = age; } public double getHeight() { return height; } public void setHeight(double height) { this.height = height; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Student(int age, double height, String name) { this.age = age; this.height = height; this.name = name; } @Override public String toString() { return \\\"Student{\\\" + \\\"age=\\\" + age + \\\", height=\\\" + height + \\\", name='\\\" + name + '\\\\'' + '}'; } @Override public int compareTo(Student o) { //按照年龄进行比较： /*return this.getAge() - o.getAge();*/ //按照身高比较 /*return ((Double)(this.getHeight())).compareTo((Double)(o.getHeight()));*/ //按照名字比较： return this.getName().compareTo(o.getName()); } } \",\"public class Test02 { //这是main方法，程序的入口 public static void main(String[] args) { //比较两个学生： Student s1 = new Student(14,160.5,\\\"alili\\\"); Student s2 = new Student(14,170.5,\\\"bnana\\\"); System.out.println(s1.compareTo(s2)); } } \",\"​\"]},\"275\":{\"h\":\"外部比较器【推荐】\",\"t\":[\"定一个比较器类，实现Comparator,并重写compare方法\",\"public class Student{ private int age; private double height; private String name; public int getAge() { return age; } public void setAge(int age) { this.age = age; } public double getHeight() { return height; } public void setHeight(double height) { this.height = height; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Student(int age, double height, String name) { this.age = age; this.height = height; this.name = name; } @Override public String toString() { return \\\"Student{\\\" + \\\"age=\\\" + age + \\\", height=\\\" + height + \\\", name='\\\" + name + '\\\\'' + '}'; } } \",\"class BiJiao01 implements Comparator<Student> { @Override public int compare(Student o1, Student o2) { //比较年龄： return o1.getAge()-o2.getAge(); } } \",\"public class Test02 { //这是main方法，程序的入口 public static void main(String[] args) { //比较两个学生： Student s1 = new Student(9,160.5,\\\"alili\\\"); Student s2 = new Student(14,170.5,\\\"bnana\\\"); //获取外部比较器： Comparator bj1 = new BiJiao03(); System.out.println(bj1.compare(s1, s2)); } } \"]},\"276\":{\"h\":\"Set接口\",\"t\":[\"List接口实现Collection接口，所以他可以使用Collection接口的通用方法，也可以使用特有的方法。 Set里面有实现类：HashSet、LinkedHashSet、TreeSet Set接口：相对于List 唯一，无序(添加和取出的顺序不一致)、没有索引 遍历方式：迭代器、增强For循环\"]},\"277\":{\"h\":\"HashSet\",\"t\":[\"HashSet实际上是HashMap( jdk1.7:数组+链表 jdk1.8:数组+链表+红黑树 )可以存放null值，但是只能有一个null HashSet不保证元素是有序的,取决于hash后，再确定索引的结果 不能有重复元素\"]},\"278\":{\"h\":\"常用方法\",\"t\":[\"public class TestInteger { //这是main方法，程序的入口 public static void main(String[] args) { //创建一个HashSet集合： HashSet<Integer> hs = new HashSet<>(); System.out.println(hs.add(19));//true hs.add(5); hs.add(20); System.out.println(hs.add(19));//false 这个19没有放入到集合中 hs.add(41); hs.add(0); System.out.println(hs.size());//唯一，无序 System.out.println(hs); } } \",\"public class Test03 { public static void main(String[] args) { HashSet<Student> students = new HashSet<>(); students.add(new Student(\\\"张三\\\",19)); students.add(new Student(\\\"李四\\\",11)); students.add(new Student(\\\"王五\\\",18)); students.add(new Student(\\\"张三\\\",19)); System.out.println(students.size()); System.out.println(students);//引用类型可以重复放入 } } class Student{ String name; int age; public Student(String name,int age){ this.name = name; this.age = age; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + '}'; } } \"]},\"279\":{\"h\":\"底层原理\",\"t\":[\"HashSet 底层是HashMap\",\"添加一个元素时，先得到hash值 - 会转成->索引值;\",\"找到存储数据表table ,看这个索引位置是否已经存放的有元素; \",\"如果没有，直接加入;\",\"如果有,调用equals比较，如果相同，就放弃添加，如果不相同，则添加到最后;\",\"在Java8中，如果一条链表的元素个数到达TREEIFY THRESHOLD(默认是8)，并且table的大小>=MIN TREEIFY CAPACITY(默认64),就会进行树化(红黑树)\",\"源码解读\",\"public class Debug03 { public static void main(String[] args) { //添加实例 HashSet set = new HashSet(); set.add(\\\"java\\\"); set.add(\\\"php\\\"); set.add(\\\"java\\\"); System.out.println(set); /* 源码解读 1. 执行HashSet() public HashSet() { map = new HashMap<>(); } 2. 执行add() public boolean add(E e) { //e=\\\"java\\\" return map.put(e, PRESENT)==null; // (static) PRESENT = new Object(); } 3. 执行put()，该方法会执行hash(key)得到key对应的hash值 算法 (h = key.hashCode()) ^ (h >>> 16) 避免碰撞 public V put(K key, V value) { //key=\\\"java\\\" value=PRESENT 共享的 return putVal(hash(key), key, value, false, true); } 4. 执行putVal() final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node<K,V>[] tab; Node<K,V> p; int n, i; //定义了辅助变量 // table就是HashMap的一个数组，类型是Node[] // if 语句表示如果当前table 是null或者 大小 = 0，就是第一次扩容，到16 if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; //(1)根据key,得到hash 去计算该key应该存放到table表的哪个索引位置,并把这个位置的对象，赋给 p //(2)判断p 是否为null //(2.1)如果p 为null，表示还没有存放元素，就创建一个Node(key=\\\"java\\\",value=PRESENT) //(2.2)就放在该位置 tab[i] = newNode(hash, key, value, null) if ((p = tab[i = (n - 1) & hash]) == null) tab[i] = newNode(hash, key, value, null); else { // 一个开发技巧提示:在需要局部变量（辅助变量）时候,再创建 Node<K,V> e; K k; // 如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值一样 // 并且满足 下面两个条件之一： //(1)准备加入的key 和 p 指向的Node节点的key是同一个对象 //(2)p指向的node节点的key的equals() 和准备加入的key比较后相同 // 就不能加入 if (p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k)))) e = p; // 再判断 p 是不是一颗红黑树， // 如果是一颗红黑树，就调用 putTreeVal，来进行添加 else if (p instanceof TreeNode) e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value); // 如果table对应的索引位置，已经是一个链表，就使用for循环比较 //(1)依次和该链表的每一个元素比较后，都不相同，则加入到该链表的最后 // 注意在把元素添加到链表后，立即判断该链表是否已经达到8个结点 // 就调用treeifyBin() 对当前这个链表进行树化(转成红黑树) // 注意，在转成红黑树时，要进行判断，判断条件 // if (tab == null | (n = tab.Length) < MIN_ TREEIFY_ CAPACITY(64) ) // resize() ; // 如果上面条件成立，先table扩容。 // 只有上面条件不成立时，才进行转成红黑树 //(2)依次和该链表的每一个元素比较过程中，如果有相同情况，就直接break else { for (int binCount = 0; ; ++binCount) { //死循环 if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; } if (e.hash == hash && ((k = e.key) == key || (key != null && key.equals(k)))) break; p = e; } } if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; } } ++modCount; //size 就是我们加入一个节点Node(k,v,h,next),size++ if (++size > threshold) resize(); //扩容 afterNodeInsertion(evict); return null; } */ } } \"]},\"280\":{\"h\":\"扩容及树化机制\",\"t\":[\"HashSet底层是HashMap,第一次添加时，table 数组长度是16. **临界值(threshold) = 数组长度(16) * 加载因子loadFactor(0.75) = 12\",\"如果table *数组使用到了临界值12, 就会扩容到16 2 = 32 ,新的临界值就是 32 * 0.75 = 24, 依次类推正\",\"在Java8中，如果条链表的元素个数到达TREEIFY THRESHOLD(默认是8 ),并且 table的大小>=MIN TREEIFY CAPACITY(默认64) ,就会进行树化(红黑树)，否则仍然采用数组扩容机制\"]},\"281\":{\"h\":\"重写equals 与 hashCode\",\"t\":[\"由于对于自定义的引用类型类存储，HashMap的唯一性的特性会失效。所以，我们会重写它的equals 与 hashCode\",\"public class Test03 { public static void main(String[] args) { HashSet<Student> students = new HashSet<>(); students.add(new Student(\\\"张三\\\",19)); students.add(new Student(\\\"李四\\\",11)); students.add(new Student(\\\"王五\\\",18)); students.add(new Student(\\\"张三\\\",19)); System.out.println(students.size()); System.out.println(students);//引用类型可以重复放入 } } class Student{ String name; int age; public Student(String name,int age){ this.name = name; this.age = age; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Student student = (Student) o; return age == student.age && Objects.equals(name, student.name); } @Override public int hashCode() { return Objects.hash(name, age); } } \"]},\"282\":{\"h\":\"LinkedHashSet\",\"t\":[\"LinkedHashSet加入顺序和取出元素,数据的顺序一致\",\"LinkedHashSet 底层维护的是一个LinkedHashMap(是HashMap的子类)\",\"LinkedHashSet 底层结构( 数组table+双向链表)\",\"第一次添加元素时，直接将数组table扩容到16 ,存放的结点类型是LinkedHashMap$Entry 每一个节点有before、after分别指向前一个和后一个元素\",\"数组是HashMap$Node[]存放的元素 / 数据是​LinkedHashMap$Entry类型\"]},\"283\":{\"h\":\"常用方法\",\"t\":[\"public class TestInteger { //这是main方法，程序的入口 public static void main(String[] args) { //创建一个HashSet集合： LinkedHashSet<Integer> hs = new LinkedHashSet<>(); System.out.println(hs.add(19));//true hs.add(5); hs.add(20); System.out.println(hs.add(19));//false 这个19没有放入到集合中 hs.add(41); hs.add(0); System.out.println(hs.size());//唯一，无序 System.out.println(hs); } } \"]},\"284\":{\"h\":\"ThreeSet\",\"t\":[\"特性：是唯一的、有序的（按照规则排序输出） 排序：包装类【升序】、自定义引用类型【需要重写比较器】 [[比较器|查看比较器的使用]] 底层是个二叉树的结构来存储数据\"]},\"285\":{\"h\":\"代码实践\"},\"286\":{\"h\":\"包装类\",\"t\":[\"public class Test05 { public static void main(String[] args) { TreeSet<String> strings = new TreeSet<>(); strings.add(\\\"1\\\"); strings.add(\\\"3\\\"); strings.add(\\\"0\\\"); strings.add(\\\"1\\\"); System.out.println(strings.size()); // 3 System.out.println(strings); //[0, 1, 3] } } \"]},\"287\":{\"h\":\"自定义引用类型\",\"t\":[\"[[比较器|查看比较器的使用]]\",\"不重写比较器，会报错！！！\",\"public class Test05 { public static void main(String[] args) { TreeSet<Students> students = new TreeSet<>(); students.add(new Students(\\\"张三1\\\",16)); students.add(new Students(\\\"张三4\\\",18)); students.add(new Students(\\\"张三3\\\",15)); students.add(new Students(\\\"张三2\\\",10)); System.out.println(students); } } class Students { String name; int age; public Students(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } @Override public String toString() { return \\\"Students{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + '}'; } } \",\"会抛出异常：Exception in thread \\\"main\\\" java.lang.ClassCastException\",\"使用内部比较器 内部比较器：在自定类中继承Comparable接口，重写compareTo方法\",\"public class Test07 { public static void main(String[] args) { TreeSet<Student1> students = new TreeSet<>(); students.add(new Student1(\\\"张三1\\\",16)); students.add(new Student1(\\\"张三4\\\",18)); students.add(new Student1(\\\"张三3\\\",15)); students.add(new Student1(\\\"张三2\\\",10)); System.out.println(students); } } /** * 使用内部比较器 */ class Student1 implements Comparable<Student1>{ String name; int age; public Student1(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } @Override public String toString() { return \\\"Students{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + '}'; } @Override public int compareTo(Student1 o) { return this.age-o.age; } } \",\"使用外部比较器 外部比较器：创建比较器类继承Comparator接口，重写compare方法\",\"package com.meturing.Set; import java.util.Comparator; import java.util.TreeSet; public class Test08 { public static void main(String[] args) { //创建比较器对象 compareToStudent compareToStudent = new compareToStudent(); // 通过构造函数将比较器传送到TreeSet中 TreeSet<Student2> students = new TreeSet<>(compareToStudent); students.add(new Student2(\\\"张三1\\\",16)); students.add(new Student2(\\\"张三4\\\",18)); students.add(new Student2(\\\"张三3\\\",15)); students.add(new Student2(\\\"张三2\\\",10)); System.out.println(students); } } /** * 使用外部比较器 */ class Student2{ String name; int age; public Student2(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } @Override public String toString() { return \\\"Students{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + '}'; } } // 比较器类 class compareToStudent implements Comparator<Student2> { @Override public int compare(Student2 o1, Student2 o2) { return o1.age- o2.age; } } \"]},\"288\":{\"h\":\"底层源码\",\"t\":[\"TreeSet底层的二叉树的遍历是按照升序的结果出现的，这个升序是靠中序遍历得到的 关于二叉树的遍历：主要还是对于根节点的读取顺序\",\"中序遍历：左 → 根 → 右 先序遍历：根 → 左 → 右 后序遍历：左 → 右 → 根\",\"二叉树，默认都是左小右大！\",\"底层源码\",\"public class TreeSet_ { public static void main(String[] args) {//TreeSet treeSet = new TreeSet(); //4、简单看下源码 TreeSet treeSet = new TreeSet(new Comparator() { @Override public int compare(Object o1, Object o2) { // 下面 调用String的compareTo方法进行字符串 字典顺序 排序 // return ((String)o1).compareTo((String)o2); // 如果按照长度大小排序 小-->大 return ((String)o1).length()-((String)o2).length(); } }); treeSet.add(\\\"jack\\\"); treeSet.add(\\\"tom\\\"); treeSet.add(\\\"sp\\\"); treeSet.add(\\\"a\\\"); System.out.println(treeSet); /* 源码解读： 1.构造器把传入的比较器对象，赋给了TreeSet的底层的TreeMap的属性this。comparator public TreeMap(Comparator<? super K> comparator) { this.comparator = comparator; } 2、在 调用treeSet.add(\\\"tom\\\"),在底层会执行到 if (cpr != null) { //cpr 就是我们的匿名内部类（对象） do { parent = t; //动态的绑定到我们的匿名内部类（对象）compare cmp = cpr.compare(key, t.key); if (cmp < 0) t = t.left; else if (cmp > 0) t = t.right; else { //如果相等，即返回0，这个key就没有加入 V oldValue = t.value; if (replaceOld || oldValue == null) { t.value = value; } return oldValue; } } while (t != null); } */ } } \"]},\"289\":{\"h\":\"Map接口\",\"t\":[\"Map接口的常用实现类: HashMap、LinkedHashMap、 Hashtable和Properties。\"]},\"290\":{\"h\":\"HashMap\",\"t\":[\"版本：JDK1.2 特点：无序、唯一 HashMap是以key-val对的方式来存储数据key不能重复，但是是值可以重复。允许使用null键和null值，但有且只有一个。 如果添加相同的key ,则会覆盖原来的key-val ,等同于修改.(key不会替换，val会替换) 与HashSet一样，不保证映射的顺序，因为底层是以hash表的方式来存储的. HashMap没有实现同步，因此是线程不安全的\"]},\"291\":{\"h\":\"遍历方法\",\"t\":[\"通过 map.keySet();获取Key的Set集合，再通过map.get(key)获取Value\",\"通过map.values();获取value的Collection集合\",\"通过map.entrySet();获取Set<Map.Entry<String, Integer>>的K-V集合\"]},\"292\":{\"h\":\"常用方法\",\"t\":[\"package com.meturing.map; import java.util.*; public class Test01 { public static void main(String[] args) { /* 增加：put(K key, V value) 删除：clear() remove(Object key) 修改： 查看：entrySet() get(Object key) keySet() size() values() 判断：containsKey(Object key) containsValue(Object value) equals(Object o) isEmpty() */ HashMap<String, Integer> map = new HashMap<>(); System.out.println(map.put(\\\"lili\\\", 10101010)); //null 返回如果存在的话，在Map中的value map.put(\\\"nana\\\",12345234); map.put(\\\"feifei\\\",34563465); System.out.println(map.put(\\\"lili\\\", 34565677)); //对已存在的Key继续添加数据，会覆盖之前的值 10101010 =》 34565677 map.put(\\\"mingming\\\",12323); System.out.println(map); // {nana=12345234, lili=34565677, mingming=12323, feifei=34563465} // 移除指定的Key // map.remove(\\\"lili\\\"); // System.out.println(map);// {nana=12345234, mingming=12323, feifei=34563465} // 清空 // map.clear(); // System.out.println(map); // {} System.out.println(map.size()); //获取Map中使用的长度 // 判断 System.out.println(map.containsKey(\\\"lili\\\"));//判断指定的Key是否存在 true System.out.println(map.containsValue(123123132));//判断指定的Value是否存在 false HashMap<String, Integer> map1 = new HashMap<>(); map1.put(\\\"lili\\\",10101010); System.out.println(map == map1); //比较的是地址是否一致 false System.out.println(map.equals(map1));//map重写了equse方法，比较的是内容是否相等 false System.out.println(map.isEmpty());// 判断Map中是否为空 false // Map的遍历方式 6种 // 第一组：通过 map.keySet()获取包含Map的Key的Set集合,通过map.get(key)获取Value 遍历 =》 增强for或迭代器 Set<String> set = map.keySet(); for (String s : set) { System.out.print(map.get(s) +\\\"\\\\t\\\"); } System.out.println(); Iterator<String> iterator = set.iterator(); while (iterator.hasNext()) { System.out.print(map.get(iterator.next())+\\\"\\\\t\\\"); } System.out.println(); // 第二组：通过 map.values()获得一个包含Value的Collection集合 遍历 =》 增强for或迭代器 Collection<Integer> values = map.values(); for (Integer value : values) { System.out.print(value+\\\"\\\\t\\\"); } System.out.println(); Iterator<Integer> iterator1 = values.iterator(); while (iterator1.hasNext()) { System.out.print(iterator1.next()+\\\"\\\\t\\\"); } System.out.println(); //第三组：通过EntrySet 获取 k-v 遍历 =》 增强for或迭代器 Set<Map.Entry<String, Integer>> entries = map.entrySet(); for (Map.Entry<String, Integer> entry : entries) { System.out.print(entry.getKey() + \\\"----\\\" + entry.getValue() + \\\"\\\\t\\\"); } System.out.println(); Iterator<Map.Entry<String, Integer>> iterator2 = entries.iterator(); while (iterator2.hasNext()) { Map.Entry<String, Integer> next = iterator2.next(); System.out.print(next.getKey() + \\\"----\\\" + next.getValue() + \\\"\\\\t\\\"); } } } \"]},\"293\":{\"h\":\"底层原理\",\"t\":[\"在源码里HashMap实现了Map接口，又继承了AbreastMap实现类。但是AbreastMap实现类也是实现了Map接口，所以此处有些许冗余。但在后续的代码中并没有修正\"]},\"294\":{\"h\":\"JDK1.7\",\"t\":[\"基本原理：数组+单向链表\",\"代码逻辑概述：\",\"存储\",\"初始化默认创建一个长度为16的Entry数组，扩容因子是0.75，即12个长度。\",\"在存放数据时，会计算KEY的hash码值，来决定Value的存放位置。为了避免Hash撞码的情况，底层采用了二次散列以及扰动函数。\",\"相同的KEY会放到同样的位置，后者会替换前者的Value，并返回替换前的值。\",\"不同的KEY通过取模来判断存放的位置，相同的下标上可以存放多个Value，以单向链表的形式存储\",\"扩容\",\"当Entry数组上存储的数量达到最大扩容因子限定的长度时，HashMap会自动扩容：扩容以主数组的2倍扩容\",\"扩容会重新创建一个当前数组长度2倍的新的Entry数组，并将原数组的Value复制到新的数组，此时会重新计算原有的位置\",\"将HashMap的引用指向到新的Entry数组，舍弃原有Entry数组等待GC扫描回收\",\"重新计算当前需要插入的值在新数组的位置，插入数值\",\"相关代码\",\"public class HashMap<K,V> //【1】继承的AbstractMap中，已经实现了Map接口 extends AbstractMap<K,V> //【2】又实现了这个接口，多余，但是设计者觉得没有必要删除，就这么地了 implements Map<K,V>, Cloneable, Serializable{ //【3】后续会用到的重要属性：先粘贴过来： static final int DEFAULT_INITIAL_CAPACITY = 16;//哈希表主数组的默认长度 //定义了一个float类型的变量，以后作为：默认的装填因子，加载因子是表示Hsah表中元素的填满的程度 //太大容易引起哈西冲突，太小容易浪费 0.75是经过大量运算后得到的最好值 //这个值其实可以自己改，但是不建议改，因为这个0.75是大量运算得到的 static final float DEFAULT_LOAD_FACTOR = 0.75f; transient Entry<K,V>[] table;//主数组,每个元素为Entry类型 transient int size; int threshold;//数组扩容的界限值,门槛值 16*0.75=12 final float loadFactor;//用来接收装填因子的变量 //【4】查看构造器：内部相当于：this(16,0.75f);调用了当前类中的带参构造器 public HashMap() { this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR); } //【5】本类中带参数构造器：--》作用给一些数值进行初始化的！ public HashMap(int initialCapacity, float loadFactor) { //【6】给capacity赋值，capacity的值一定是 大于你传进来的initialCapacity 的 最小的 2的倍数(2^n) int capacity = 1; while (capacity < initialCapacity) capacity <<= 1; //【7】给loadFactor赋值，将装填因子0.75赋值给loadFactor this.loadFactor = loadFactor; //【8】数组扩容的界限值,门槛值 threshold = (int)Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1); //【9】给table数组赋值，初始化数组长度为16 table = new Entry[capacity]; } //【10】调用put方法： public V put(K key, V value) { //【11】对空值的判断 if (key == null)return putForNullKey(value); //【12】调用hash方法，获取哈希码 int hash = hash(key); //【14】得到key对应在数组中的位置 int i = indexFor(hash, table.length); //【16】如果你放入的元素，在主数组那个位置上没有值，e==null 那么下面这个循环不走 //当在同一个位置上放入元素的时候 for (Entry<K,V> e = table[i]; e != null; e = e.next) { Object k; //哈希值一样 并且 equals相比一样 //(k = e.key) == key 如果是一个对象就不用比较equals了 if (e.hash == hash && ((k = e.key) == key || key.equals(k))) { //获取老的Value V oldValue = e.value; //新Value替换老的Value --> 只替换value不替换值 e.value = value; e.recordAccess(this); //返回老的Value return oldValue; } } modCount++; //【17】走addEntry添加这个节点的方法： addEntry(hash, key, value, i); return null; } //【13】hash方法返回这个key对应的哈希值，内部进行二次散列，为了尽量保证不同的key得到不同的哈希码！ final int hash(Object k) { int h = 0; if (useAltHashing) { if (k instanceof String) { return sun.misc.Hashing.stringHash32((String) k); } h = hashSeed; } //k.hashCode()函数调用的是key键值类型自带的哈希函数， //由于不同的对象其hashCode()有可能相同，所以需对hashCode()再次哈希，以降低相同率。 h ^= k.hashCode(); // This function ensures that hashCodes that differ only by // constant multiples at each bit position have a bounded // number of collisions (approximately 8 at default load factor). /* 接下来的一串与运算和异或运算，称之为“扰动函数”， 扰动的核心思想在于使计算出来的值在保留原有相关特性的基础上， 增加其值的不确定性，从而降低冲突的概率。 不同的版本实现的方式不一样，但其根本思想是一致的。 往右移动的目的，就是为了将h的高位利用起来，减少哈西冲突 */ h ^= (h >>> 20) ^ (h >>> 12); return h ^ (h >>> 7) ^ (h >>> 4); } //【15】返回int类型数组的坐标 static int indexFor(int h, int length) { //其实这个算法就是取模运算：h%length，取模效率不如位运算 return h & (length-1); } //【18】调用addEntry void addEntry(int hash, K key, V value, int bucketIndex) { //【25】size的大小 大于 16*0.75=12的时候，比如你放入的是第13个，这第13个你打算放在没有元素的位置上的时候 if ((size >= threshold) && (null != table[bucketIndex])) { //【26】主数组扩容为2倍 resize(2 * table.length); //【30】重新调整当前元素的hash码 hash = (null != key) ? hash(key) : 0; //【31】重新计算元素位置 bucketIndex = indexFor(hash, table.length); } //【19】将hash,key,value,bucketIndex位置 封装为一个Entry对象： createEntry(hash, key, value, bucketIndex); } //【20】 void createEntry(int hash, K key, V value, int bucketIndex) { //【21】获取bucketIndex位置上的元素给e Entry<K,V> e = table[bucketIndex]; //【22】然后将hash, key, value封装为一个对象，然后将下一个元素的指向为e （链表的头插法） //【23】将新的Entry放在table[bucketIndex]的位置上 table[bucketIndex] = new Entry<>(hash, key, value, e); //【24】集合中加入一个元素 size+1 size++; } //【27】 void resize(int newCapacity) { Entry[] oldTable = table; int oldCapacity = oldTable.length; if (oldCapacity == MAXIMUM_CAPACITY) { threshold = Integer.MAX_VALUE; return; } //【28】创建长度为newCapacity的数组 Entry[] newTable = new Entry[newCapacity]; boolean oldAltHashing = useAltHashing; useAltHashing |= sun.misc.VM.isBooted() && (newCapacity >= Holder.ALTERNATIVE_HASHING_THRESHOLD); boolean rehash = oldAltHashing ^ useAltHashing; //【28.5】转让方法：将老数组中的东西都重新放入新数组中 transfer(newTable, rehash); //【29】老数组替换为新数组 table = newTable; //【29.5】重新计算 threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1); } //【28.6】 void transfer(Entry[] newTable, boolean rehash) { int newCapacity = newTable.length; for (Entry<K,V> e : table) { while(null != e) { Entry<K,V> next = e.next; if (rehash) { e.hash = null == e.key ? 0 : hash(e.key); } //【28.7】将哈希值，和新的数组容量传进去，重新计算key在新数组中的位置 int i = indexFor(e.hash, newCapacity); //【28.8】头插法 e.next = newTable[i];//获取链表上元素给e.next newTable[i] = e;//然后将e放在i位置 e = next;//e再指向下一个节点继续遍历 } } } } \"]},\"295\":{\"h\":\"JDK1.8\",\"t\":[\"总结，相对于JDK1.7，JDK1.8做了一些优化：\",\"数据结构上的优化：\",\"由数组+链表的形式 转换为数组+链表+红黑树的形式 在1.8中，引入了红黑树，当相同位置的链表长度超过8个的时候，会自动从链表结构转换为红黑树结构，加快查找效率。相反，减少为8个以内时会再次转换为链表结构。\",\"扩容上的优化： \",\"在JDK1.7中，HashMap扩容时会重新计算原有数组中的值在新数组中的位置。在JDK1.8时，则新数组中的位置 = 原位置 or 原位置+旧容量，类似于复制的操作\",\"在JDK1.7中，插入值操作时导致扩容，会先扩容后，在新数组中重新计算位置。在JDK1.8时，则扩容前插入，转移数据时统一转移。\"]},\"296\":{\"h\":\"有意思的面试题\",\"t\":[\"为什么是2的倍数？ 在上面的底层原理中，我们发现HashMap的扩容是以主数组的2倍进行的。因为底层在计算Value的位置时，并没有使用h%length来计算value的位置，而是使用效率比较高的h&(length-1)位运算进行处理的。这样的话，要想结果准确，则length的长度必须为2的整数倍，如果不是的话，hash碰撞的几率会高很多。\",\"为什么扩容因子是0.75？ 如果是1的话，数组满了才扩容。节省了空间，但是由于元素不会均匀分布，我们可能会得到一个极长的链表，会影响我们的查询时间。 如果是0.5就扩容的话，数组并没有达到最大利用率就被扩容了，会出现浪费空间的情况 综上所述，0.75是一个比较合适的取值限定\"]},\"297\":{\"h\":\"LinkedHashMap\",\"t\":[\"版本：JDK1.2 特点：有序、唯一在Hash表的基础上又添加了链表的结构，输出顺序与录入顺序一致\"]},\"298\":{\"h\":\"HashTable\",\"t\":[\"版本：JDK1.0 特点：无序、唯一 相对于HashTable，它的Key不允许为null 底层使用了线程安全机制，相对于HashTable是线程安全的，但效率低\"]},\"299\":{\"h\":\"TreeMap\",\"t\":[\"特性：是唯一的、有序的（按照规则排序输出）\\n排序：包装类【升序】、自定义引用类型【需要重写比较器】\\n底层是个二叉树的结构来存储数据\"]},\"300\":{\"h\":\"Collections工具类\",\"t\":[\"public class Test01 { public static void main(String[] args) { //Collections不支持创建对象，因为构造器私有化了 /*Collections cols = new Collections();*/ //里面的属性和方法都是被static修饰，我们可以直接用类名.去调用即可： //常用方法： //addAll： ArrayList<String> list = new ArrayList<>(); list.add(\\\"cc\\\"); list.add(\\\"bb\\\"); list.add(\\\"aa\\\"); Collections.addAll(list,\\\"ee\\\",\\\"dd\\\",\\\"ff\\\"); Collections.addAll(list,new String[]{\\\"gg\\\",\\\"oo\\\",\\\"pp\\\"}); System.out.println(list); //sort提供的是升序排列 Collections.sort(list); System.out.println(list); //binarySearch必须在有序的集合中查找： 返回第一个下标 System.out.println(Collections.binarySearch(list,\\\"cc\\\")); //copy:替换方法 只会替换相同的长度，如果目标长度长于复制的数组，则多余的元素不受影响 ArrayList<String> list1 = new ArrayList<>(); Collections.addAll(list1,\\\"xx\\\",\\\"zz\\\"); Collections.copy(list,list1);//将list1的内容替换到list上去 System.out.println(list); System.out.println(list1); //fill 填充 用指定值填充所有元素 Collections.fill(list1,\\\"yyy\\\"); System.out.println(list1); } } \"]},\"301\":{\"h\":\"数据结构-栈\"},\"302\":{\"h\":\"前言\",\"t\":[\"在之前的学习中，我们知道了数据结构分为：逻辑结构和物理结构\",\"逻辑结构： \",\"思想上的结构--》卧室，厨房，卫生间 ---》线性表（数组，链表），图，树，栈，队列\",\"物理结构： \",\"真实结构--》钢筋混凝土+牛顿力学------》紧密结构（顺序结构），跳转结构（链式结构）\",\"接下来我们了解一下栈 所属：逻辑结构 特点：后进先出（LIFO - last in first out）\",\"生活中的案例\",\"在开发中的应用\",\"内存分析：形参，局部变量放入栈中。放入的那个区域的数据结构就是按照栈来做的。\",\"网络浏览器多会将用户最近访问过的网址组织为一个栈。这样，用户每访问一个新页面，其地址就会被存放至栈顶；而用户每按下一次“后退”按钮，即可沿相反的次序访问此前刚访问过的页面。\",\"主流的文本编辑器也大都支持编辑操作的历史记录功能（ctrl + z：撤销，ctrl + y：恢复），用户的编辑操作被依次记录在一个栈中。一旦出现误操作，用户只需按下“撤销”按钮，即可取消最近一次操作并回到此前的编辑状态。\"]},\"303\":{\"h\":\"Stack\",\"t\":[\"Stack是Vector的子类，Vector里面两个重要的属性：\",\"Object[] elementData;底层依然是一个数组\",\"int elementCount;数组中的容量\",\"public class Test01 { public static void main(String[] args) { /* Stack是Vector的子类，Vector里面两个重要的属性： Object[] elementData;底层依然是一个数组 int elementCount;数组中的容量 */ Stack<String> stackStr = new Stack<>(); stackStr.add(\\\"A\\\");//返回添加结果 stackStr.add(\\\"D\\\"); stackStr.add(\\\"B\\\"); System.out.println(stackStr);//[A, D, B] System.out.println(\\\"是否为空？ \\\"+stackStr.empty());//false System.out.println(\\\"查看栈顶的数据不移除：\\\"+stackStr.peek());//B System.out.println(stackStr);//[A, D, B] System.out.println(\\\"查看栈顶的数据并移除：\\\"+stackStr.pop());//B System.out.println(stackStr);//[A, D] stackStr.push(\\\"B\\\");//和ADD方法执行的底层一样，只是返回了添加的数据 System.out.println(stackStr);//[A, D, B] } } \"]},\"304\":{\"h\":\"同步类容器\",\"t\":[\"在之前的学习中，我们说Vector和HashTable是线程安全的，但是目前来说在实际开发中我们是淘汰使用的。因为他们底层默认使用了synchronized将整个容器锁了起来，这种情况下我们会出现效率低下的情况。所以，我们常用的是一般的集合容器，在特殊的场景下（必须线程同步）时，讲普通容器转换为同步类容器。\",\"涉及方法：Collections.synchronizedList();Collections.synchronizedMap();Collections.synchronizedSet();\"]},\"305\":{\"h\":\"测试线程的不安全性\",\"t\":[\"public class Test01 { public static void main(String[] args) { ArrayList<String> list = new ArrayList<>(); //创建一个线程池 ExecutorService executorService = Executors.newFixedThreadPool(100); //并发使用线程向同一个集合中塞入数据 for (int i = 0; i < 10000; i++) { executorService.execute(new Runnable() { @Override public void run() { list.add(\\\"A\\\"); } }); } //关闭线程 executorService.shutdown(); //检查线程是否执行完毕 while (true){ //线程都执行完以后返回true if (executorService.isTerminated()){ System.out.println(\\\"所有的线程都执行完毕\\\"); System.out.println(list.size()); if (list.size()==10000){ System.out.println(\\\"线程安全！\\\"); }else{ System.out.println(\\\"线程不安全！\\\"); } break; } } } } \",\" 原因： 由于我们在集合中塞入数据时，由于多个线程的影响，可能出现两个线程同时操作同一个下标上的数据的情况。所以最终不会完全操作完所有的数据，个别数据被重复修改。\"]},\"306\":{\"h\":\"修改为线程安全的\",\"t\":[\"public class Test01 { public static void main(String[] args) { ArrayList<String> oldList = new ArrayList<>(); //将普通集合转换成同步类集合 List<String> list = Collections.synchronizedList(oldList); //创建一个线程池 ExecutorService executorService = Executors.newFixedThreadPool(100); //并发使用线程向同一个集合中塞入数据 for (int i = 0; i < 10000; i++) { executorService.execute(new Runnable() { @Override public void run() { list.add(\\\"A\\\"); } }); } //关闭线程 executorService.shutdown(); //检查线程是否执行完毕 while (true){ //线程都执行完以后返回true if (executorService.isTerminated()){ System.out.println(\\\"所有的线程都执行完毕\\\"); System.out.println(list.size()); if (list.size()==10000){ System.out.println(\\\"线程安全！\\\"); }else{ System.out.println(\\\"线程不安全！\\\"); } break; } } } } \"]},\"307\":{\"h\":\"底层源码\",\"t\":[\"解释：使用Collections工具类中的synchronizedXXX方法，会将\"]},\"308\":{\"h\":\"并发容器\",\"t\":[\"JDK5.0之后提供了多种并发类容器可以替代同步类容器，提升性能、吞吐量ConcurrentHashMap替代 HashMap、HashTableConcurrentSkipListMap替代TreeMap 简单来讲：ConcurrentHashMap使用了粒度更小的锁\"]},\"309\":{\"h\":\"测试代码\",\"t\":[\"public class Test01 { public static void main(String[] args) { //测试ConcurrentHashMap ConcurrentHashMap<String,Integer> concurrentHashMap = new ConcurrentHashMap<>(); // //创建10个线程 for (int i = 0; i < 10; i++) { new Thread(new Runnable() { @Override public void run() { long startTime = System.currentTimeMillis(); for (int j = 0; j < 1000000; j++) { concurrentHashMap.put(\\\"a\\\"+j,j); } long endTime = System.currentTimeMillis(); System.out.println(\\\"耗时：\\\"+(endTime-startTime)); } }).start(); } //测试普通容器转换成同步容器 // HashMap<String, Integer> stringIntegerHashMap = new HashMap<>(); // Map<String, Integer> stringIntegerMap = Collections.synchronizedMap(stringIntegerHashMap); // for (int i = 0; i < 10; i++) { // new Thread(new Runnable() { // @Override // public void run() { // long startTime = System.currentTimeMillis(); // for (int j = 0; j < 1000000; j++) { // stringIntegerMap.put(\\\"A\\\"+j,j); // } // long endTime = System.currentTimeMillis(); // System.out.println(\\\"耗时：\\\"+(endTime-startTime)); // } // }).start(); // } //测试安全性集合 // Hashtable<String, Integer> stringIntegerHashtable = new Hashtable<>(); // for (int i = 0; i < 10; i++) { // new Thread(new Runnable() { // @Override // public void run() { // long startTime = System.currentTimeMillis(); // for (int j = 0; j < 1000000; j++) { // stringIntegerHashtable.put(\\\"A\\\"+j,j); // } // long endTime = System.currentTimeMillis(); // System.out.println(\\\"耗时：\\\"+(endTime-startTime)); // } // }).start(); // } } } \"]},\"310\":{\"h\":\"底层逻辑\",\"t\":[\"TODO\"]},\"311\":{\"h\":\"经典面试题\",\"t\":[\"为什么HashTable慢? 它的并发度是什么? 那么ConcurrentHashMap并发度是什么?\",\"ConcurrentHashMap在JDK1.7和JDK1.8中实现有什么差别? JDK1.8解決了JDK1.7中什么问题\",\"ConcurrentHashMap JDK1.7实现的原理是什么? 分段锁机制\",\"ConcurrentHashMap JDK1.8实现的原理是什么? 数组+链表+红黑树，CAS\",\"ConcurrentHashMap JDK1.7中Segment数(concurrencyLevel)默认值是多少? 为何一旦初始化就不可再扩容?\",\"ConcurrentHashMap JDK1.7说说其put的机制?\",\"ConcurrentHashMap JDK1.7是如何扩容的? rehash(注：segment 数组不能扩容，扩容是 segment 数组某个位置内部的数组 HashEntry<K,V>[] 进行扩容)\",\"ConcurrentHashMap JDK1.8是如何扩容的? tryPresize\",\"ConcurrentHashMap JDK1.8链表转红黑树的时机是什么? 临界值为什么是8?\",\"ConcurrentHashMap JDK1.8是如何进行数据迁移的? transferConcurrentHashMap不能保证并发下数据读写顺序的准确性，但是可以保证内部的数据不被破坏。\"]},\"312\":{\"h\":\"COW容器\"},\"313\":{\"h\":\"概念\",\"t\":[\"COW类并发容器，全称：Copy On Write容器，写时复制容器。（读写分离容器）\",\"原理：向容器中添加元素时，先将容器进行Copy复制出一个新容器，然后将元素添加到新容器中，再将原容器的引用指向新容器,并发读的时候不需要锁定容器，因为原容器没有变化，所以可以读取原容器中的值，使用的是一种读写分离的思想。\",\"优点:操作arr数组本身是无锁的，没有锁，在添加数据的时候，做了额外的复制。如果有线程来读数据，那么读取的是老arr的数据，此时arr的地址还没有改呢，在我添加元素的过程中，无论有多少个线程来读数据，都是读的原来的arr，不是新的arr。所以性能很高，读写分离。提高了并发的性能。如果再读再复制...\",\"注意:CopyOnWrite容器只能保证数据的最终一致性，不能保证数据实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。\",\"适合特定场合 这个应用场景显而易见，适合读多写少的情况。如果一万个线程都添加操作，都在集合中添加数据，那数组不断复制，长度不断+1，那JVM肯定一直往上飙升，你用的时候肯定要评估使用场景的。由于每次更新都会复制新容器，所以如果数据量较大并且更新操作频繁则对内存消耗很高，建议在高并发读的场景下使用。\"]},\"314\":{\"h\":\"CopyOnWriteArrayList\"},\"315\":{\"h\":\"使用案例\",\"t\":[\"public class Test { //这是main方法，程序的入口 public static void main(String[] args) { CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>(); //添加方法： list.add(1); list.add(2); list.add(3); list.add(4); System.out.println(list);//[1, 2, 3, 4] list.add(3);//add方法无论元素是否存在，都可以添加进去--》添加重复的元素 System.out.println(list);//[1, 2, 3, 4, 3] //adj. 缺席的；缺少的；心不在焉的；茫然的 list.addIfAbsent(33);//添加不存在的元素--》不可以添加重复的数据 System.out.println(list);//[1, 2, 3, 4, 3, 33] } } \"]},\"316\":{\"h\":\"相关源码\",\"t\":[\"public class CopyOnWriteArrayList<E>{ //底层基于数组实现的 private transient volatile Object[] array; public CopyOnWriteArrayList() { setArray(new Object[0]); } //add方法： public boolean add(E e) { final ReentrantLock lock = this.lock; lock.lock(); try { //返回底层array数组,给了elements Object[] elements = getArray(); //获取elements的长度---》获取老数组的长度 int len = elements.length; //完成数组的复制，将老数组中的元素复制到新数组中，并且新数组的长度加1操作 Object[] newElements = Arrays.copyOf(elements, len + 1); //将e元素放入新数组最后位置 newElements[len] = e; //array数组的指向从老数组变为新数组 setArray(newElements); return true; } finally { lock.unlock(); } } final void setArray(Object[] a) { array = a; // array = new Object[0] } final Object[] getArray() { return array;//返回底层数组 } private boolean addIfAbsent(E e, Object[] snapshot) { final ReentrantLock lock = this.lock; lock.lock(); try { //取出array数组给current Object[] current = getArray(); int len = current.length; if (snapshot != current) { // Optimize for lost race to another addXXX operation int common = Math.min(snapshot.length, len); //遍历老数组： for (int i = 0; i < common; i++) //eq(e, current[i])将放入的元素和老数组的每一个元素进行比较，如果有重复的元素，就返回false，不添加了 if (current[i] != snapshot[i] && eq(e, current[i])) return false; if (indexOf(e, current, common, len) >= 0) return false; } //完成数组的复制，将老数组中的元素复制到新数组中，并且新数组的长度加1操作 Object[] newElements = Arrays.copyOf(current, len + 1); //将e元素放入新数组最后位置 newElements[len] = e; //array数组的指向从老数组变为新数组 setArray(newElements); return true; } finally { lock.unlock(); } } } \"]},\"317\":{\"h\":\"CopyOnWriteArraySet\"},\"318\":{\"h\":\"使用案例\",\"t\":[\"public class Test02 { //这是main方法，程序的入口 public static void main(String[] args) { //创建一个集合： CopyOnWriteArraySet<Integer> set = new CopyOnWriteArraySet<>(); //在这里也体现出Set和List的本质区别，就在于是否重复 //所以add方法直接不可以添加重复数据进去 set.add(1); set.add(2); set.add(2); set.add(7); System.out.println(set);//[1, 2, 7] } } \"]},\"319\":{\"h\":\"相关源码\",\"t\":[\"public class CopyOnWriteArraySet<E>{ //CopyOnWriteArraySet底层基于CopyOnWriteArrayList private final CopyOnWriteArrayList<E> al; public CopyOnWriteArraySet() { al = new CopyOnWriteArrayList<E>(); } //添加方法： public boolean add(E e) { return al.addIfAbsent(e);//底层调用的还是CopyOnWriteArrayList的addIfAbsent } } \",\"每次调用CopyOnWriteArraySet的add方法时候，其实底层是基于CopyOnWriteArrayList的addIfAbsent，每次在addIfAbsent方法中每次都要对数组进行遍历，所以CopyOnWriteArraySet的性能低于CopyOnWriteArrayList\"]},\"320\":{\"h\":\"队列\"},\"321\":{\"h\":\"引入\",\"t\":[\"特点：先进先出（FIFO） （First In First Out） 他有两端，一端是让新元素进去，一端是让老元素出去\",\"在日常的社会生活中，比如排队买票使用的就是队列。在计算机网络架构中、网络自身内部的各种计算资源，无论是多进程共享的 CPU 时间，还是多用户共享的打印机，也都需要借助队列结构实现合理和优化的分配。\",\"同样，我们也可以创建双端队列：两端都可以进行进队，出队的队列\",\"在上面的双端队列的基础上 我们可以加以限制，获得：\",\"栈和队列的物理结构实现 可以用线性表的数组，链表都可以\"]},\"322\":{\"h\":\"阻塞队列 - BlockingQueue\",\"t\":[\"BlockingQueue继承Queue，Queue继承自Collection。所以Collection最基础的增删改查操作是有的，在这个基础上，多了Queue的特点，在这个基础上又多了阻塞的特点，最终形成了BlockingQueue\"]},\"323\":{\"h\":\"阻塞的概念\",\"t\":[\"简单来讲，获取参数时如果队列为空则等待，直到队列加入元素后直接获取。添加元素时队列如果满载则等待，直至队列出现空余时立即加入。\"]},\"324\":{\"h\":\"常用的API\",\"t\":[\"注意：不可以添加Null\",\"API\",\"说明\",\"boolean add(E e)\",\"将指定元素插入此队列（如果立即可行且不违反容量限制），成功返回true，如果当前没有可用空间，则抛出异常\",\"boolean offer(E e)\",\"将指定元素插入此队列（如果立即可行且不违反容量限制），成功返回true，如果当前没有可用空间，则返回false\",\"void put(E e)\",\"将指定元素插入此队列，如果没有空余空间则等待（阻塞）\",\"E take()\",\"获取并移除此队列的头部，如果没有元素则一直等待\",\"E pool(long timeout,TimeUnit unit)\",\"获取并移除此队列的头部，如果没有元素则等待指定的时间\",\"boolean remove(Object o)\",\"从队列中移除指定的元素实例，无论在不在无异常\"]},\"325\":{\"h\":\"子类 - ArrayBlockingQueue\"},\"326\":{\"h\":\"概念\",\"t\":[\"ArrayBlockingQueue是一个底层基于数组的有边界的队列，和其他的队列一样是FIFO（先进先出）。获取元素从头部获取，放置元素从尾部放置。\",\"不支持读写同时操作，底层基于数组的\"]},\"327\":{\"h\":\"代码\",\"t\":[\"public class TestArrayBlockingQueue { public static void main(String[] args) throws InterruptedException { ArrayBlockingQueue queue = new ArrayBlockingQueue(3); //【1】添加null元素：不可以添加null元素，会报空指针异常：NullPointerException //queue.add(null); queue.add('a'); queue.add('b'); queue.add('c'); //【2】由于当前队列处于满载情况，我们无法添加直接抛出异常 Queue full //System.out.println(queue.add('c')); //【3】 创建一个独立的线程，测试阻塞添加 new Thread(new Runnable() { @Override public void run() { try { //【3】指定时间等阻塞添加，失败则返回false System.out.println(queue.offer(\\\"e\\\", 3, TimeUnit.MILLISECONDS));//flase //【4】完全阻塞添加 queue.put('f'); } catch (InterruptedException e) { throw new RuntimeException(e); } } }).start(); Thread.sleep(100);//休眠1S //【5】获取队列头，不移除 System.out.println(queue.peek());//a System.out.println(queue);//[a, b, c] //【6】获取队列头，且移除 System.out.println(queue.poll());//a System.out.println(queue);//[b, c] Thread.sleep(100);//休眠1S System.out.println(queue);//[b, c, f] //【7】获取队列头，且移除(阻塞) System.out.println(queue.take());//b System.out.println(queue);//[c, f] //【8】清空元素 queue.clear(); System.out.println(queue);//[] System.out.println(queue.peek());//null System.out.println(queue.poll());//null //测试阻塞 new Thread(new Runnable() { @Override public void run() { try { //指定时间阻塞式获取 System.out.println(queue.poll(2,TimeUnit.MILLISECONDS)); //永久阻塞式获取 System.out.println(\\\"开始强制获取.....\\\"); System.out.println(queue.take()); } catch (InterruptedException e) { throw new RuntimeException(e); } } }).start(); Thread.sleep(2000);//休眠2s queue.add(\\\"a\\\"); } } \"]},\"328\":{\"h\":\"源码\",\"t\":[\"public class ArrayBlockingQueue<E> { //底层就是一个数组： final Object[] items; //取元素用到的索引，初始结果为0 int takeIndex; //放元素用到的索引，初始结果为0 int putIndex; //数组中元素的个数： int count; //一把锁：这个锁肯定很多方法中用到了，所以定义为属性，初始化以后可以随时使用 final ReentrantLock lock; //锁伴随的一个等待池：notEmpty private final Condition notEmpty; //锁伴随的一个等待池：notFull private final Condition notFull; //构造器： public ArrayBlockingQueue(int capacity) {//传入队列指定的容量 this(capacity, false); } public ArrayBlockingQueue(int capacity, boolean fair) {//传入队列指定的容量 //健壮性考虑 if (capacity <= 0) throw new IllegalArgumentException(); //初始化底层数组 this.items = new Object[capacity]; //初始化锁 和 等待队列 lock = new ReentrantLock(fair); notEmpty = lock.newCondition(); notFull = lock.newCondition(); } //两个基本方法：一个是入队，一个是出队 ，是其他方法的基础： //入队： private void enqueue(E x) { // assert lock.getHoldCount() == 1; // assert items[putIndex] == null; final Object[] items = this.items;//底层数组赋给items //在对应的下标位置放入元素 items[putIndex] = x; if (++putIndex == items.length) //++putIndex putIndex 索引 加1 putIndex = 0; //每放入一个元素，count加1操作 count++; notEmpty.signal(); } //出队： private E dequeue() { // assert lock.getHoldCount() == 1; // assert items[takeIndex] != null; final Object[] items = this.items;//底层数组赋给items @SuppressWarnings(\\\"unchecked\\\") E x = (E) items[takeIndex];//在对应的位置取出元素 items[takeIndex] = null;//对应位置元素取出后就置为null if (++takeIndex == items.length)//++takeIndex 加1操作 takeIndex = 0; count--;//每取出一个元素，count减1操作 if (itrs != null) itrs.elementDequeued(); notFull.signal(); return x;//将取出的元素作为方法的返回值 } } \"]},\"329\":{\"h\":\"基本原理\"},\"330\":{\"h\":\"核心元素\",\"t\":[\"Object[] items 用于存储数据，int takeIndex 取元素用到的索引，初始结果为0int putIndex 放元素用到的索引，初始结果为0int count 数组中元素的个数ReentrantLock lock 一把阻塞锁，存数据/取数据都用这个锁Condition notEmpty 非空等待池Condition notFull 非满等待池\"]},\"331\":{\"h\":\"初始化\",\"t\":[\"初始化底层数组长度 初始化锁以及等待池\"]},\"332\":{\"h\":\"存元素\",\"t\":[\"将底层数组先赋值给Object[] items 数组\",\"items[putIndex] = x；//在对应的下标位置放入元素\",\"将存元素的指针向后位移一个，如果达到队列最大长度则指向0\",\"将Count计数+1\",\"激活非空等待池\"]},\"333\":{\"h\":\"取元素\",\"t\":[\"将底层数组先赋值给Object[] items 数组\",\"E x = (E) items[takeIndex];//在对应的位置取出元素\",\"将取元素的指针向后位移一个，如果达到队列最大长度则指向0\",\"将Count计数-1\",\"激活非满等待池\",\"返回元素\"]},\"334\":{\"h\":\"相关概念\",\"t\":[\"阻塞存取基于基本的enqueue 和 enqueue，是通过对等待池的限定来实现的 简单点我们可以理解为：\",\"在执行阻塞操作时我们会先获取锁，来同步结果。\",\"如果放数据时达到最大长度，则notFull等待池会进入等待状态。当其他线程取出数据时，才会重新激活notFull等待池，继续执行放置元素的任务\",\"如果取元素时队列为空，则notEmpty等待池会进入等待状态，当其他元素放置元素时，才会重新激活notEmpty等待池，继续执行取元素的任务\",\"注意：代码的核心关键是，在判断是否阻塞时采用了while不断的查询状态，这样可以在线程被激活的第一时间执行任务。避免当再次准备放置时，被其他线程抢先的情况造成错误。\"]},\"335\":{\"h\":\"子类 - LinkedBlockingQueue\"},\"336\":{\"h\":\"概念\",\"t\":[\"LinkedBlockingQueue是一个有边界的队列，底层采用了链表的结构。如果我们不指定长度时，他会默认为Integer.MAX_VALUE 21亿多\",\"支持读写同时操作，并发情况下，效率高。底层基于链表。\"]},\"337\":{\"h\":\"代码\",\"t\":[\" /** * 放置元素 * @throws InterruptedException */ public void setValue() throws InterruptedException { LinkedBlockingQueue<Object> aq = new LinkedBlockingQueue<>(3); //添加元素： //【1】添加null元素：不可以添加null元素，会报空指针异常：NullPointerException //aq.add(null); //aq.offer(null); aq.put(null); //【2】正常添加元素： aq.add(\\\"aaa\\\"); aq.offer(\\\"bbb\\\"); aq.put(\\\"ccc\\\"); System.out.println(aq);//[aaa, bbb, ccc] //【3】在队列满的情况下，再添加元素： //aq.add(\\\"ddd\\\");//在队列满的情况下，添加元素 出现异常：Queue full //System.out.println(aq.offer(\\\"ddd\\\"));//没有添加成功，返回false //设置最大阻塞时间，如果时间到了，队列还是满的，就不再阻塞了 //aq.offer(\\\"ddd\\\",2, TimeUnit.SECONDS); //真正阻塞的方法： put ,如果队列满，就永远阻塞 aq.put(\\\"ddd\\\"); System.out.println(aq); } /** * 取元素 * @throws InterruptedException */ public void getValue() throws InterruptedException { //创建一个队列，队列可以指定容量指定长度3： LinkedBlockingQueue aq = new LinkedBlockingQueue(); aq.add(\\\"aaa\\\"); aq.add(\\\"bbb\\\"); aq.add(\\\"ccc\\\"); //得到头元素但是不移除 System.out.println(aq.peek()); System.out.println(aq); //得到头元素并且移除 System.out.println(aq.poll()); System.out.println(aq); //得到头元素并且移除 System.out.println(aq.take()); System.out.println(aq); //清空元素： aq.clear(); System.out.println(aq); System.out.println(aq.peek());//null System.out.println(aq.poll());//null //设置阻塞事件，如果队列为空，返回null，时间到了以后就不阻塞了 //System.out.println(aq.poll(2, TimeUnit.SECONDS)); //真正阻塞：队列为空，永远阻塞 System.out.println(aq.take()); } \"]},\"338\":{\"h\":\"源码\",\"t\":[\"public class LinkedBlockingQueue<E>{ //内部类Node就是链表的节点的对象对应的类： static class Node<E> { E item;//封装你要装的那个元素 Node<E> next;//下一个Node节点的地址 Node(E x) { item = x; }//构造器 } //链表的长度 private final int capacity; //计数器： private final AtomicInteger count = new AtomicInteger(); //链表的头结点 transient Node<E> head; //链表的尾结点 private transient Node<E> last; //取元素用的锁 private final ReentrantLock takeLock = new ReentrantLock(); //等待池 private final Condition notEmpty = takeLock.newCondition(); //放元素用的锁 private final ReentrantLock putLock = new ReentrantLock(); //等待池 private final Condition notFull = putLock.newCondition(); public LinkedBlockingQueue() { this(Integer.MAX_VALUE);//调用类本类的空构造器，传入正21亿 } public LinkedBlockingQueue(int capacity) { //健壮性考虑 if (capacity <= 0) throw new IllegalArgumentException(); //给队列指定长度 this.capacity = capacity; //last，head指向一个新的节点，新的节点中 元素为null last = head = new Node<E>(null); } //入队： private void enqueue(Node<E> node) { last = last.next = node; } //出队： private E dequeue() { Node<E> h = head;//h指向了head Node<E> first = h.next;//first 指向head的next h.next = h; // help GC h.next指向自己，更容易被GC发现 被GC head = first;//head的指向指为first E x = first.item;//取出链中第一个元素，给了x first.item = null; return x;//把x作为方法的返回值 } } \"]},\"339\":{\"h\":\"基本原理\"},\"340\":{\"h\":\"初始化\",\"t\":[\"初始化时默认传一个结点，值为空 / 下一个地址也为空，且head指针和last指针都指向这个节点\"]},\"341\":{\"h\":\"放元素的基本原理\",\"t\":[\"将last节点的地址指向新增的节点（此时last是新增前的last） 将last指针指向新增节点\"]},\"342\":{\"h\":\"取元素的基本原理\",\"t\":[\"将head指针指向head指针指向的地址的节点 修改原有head指针指向的节点地址为自己（这样更容易被GC） 返回修改后head指针指向的节点的值，并修改为null\"]},\"343\":{\"h\":\"相关概念\"},\"344\":{\"h\":\"阻塞原理实现\",\"t\":[\"同ArrayListBlockingQueue，只不过是LinkedBlockingQueue使用了两把锁，读写各自有单独的锁。\",\"放数据 \",\"打开放数据的锁 → 传入对象 → 判断是否满载（满载 notFull等待池开始阻塞/非满载存放数据 激活notEmpty等待池) → 关闭放数据的锁\",\"取数据 \",\"打开取数据的锁 → 获取head指向的对象 → 判断是否为空队列（空队列 notEmpty等待池开始阻塞/非空队列 激活notFull等待池) → 关闭取数据的锁\"]},\"345\":{\"h\":\"子类 - SynchronousQueue\"},\"346\":{\"h\":\"概念\",\"t\":[\"SynchronousQueue是一个没有容量大小的队列，这也寓意着我们没有办法正常的通过他来存放数据。同常在使用中需要先获取数据再存放数据，它常被用做线程间的通信。\",\"优点：效率极高不会出现线程争抢的问题，我们可以理解为他是线程与线程间的传送门\",\"注意: 取出元素 不能用peek，因为peek不会将元素从队列中拿走，只是查看的效果； 一定要先取再放！！！\"]},\"347\":{\"h\":\"代码\"},\"348\":{\"h\":\"非阻塞\",\"t\":[\"/** * 非阻塞类型 * @throws InterruptedException */ public static void testTake() throws InterruptedException { SynchronousQueue<Object> synchronousQueue1 = new SynchronousQueue<>(); SynchronousQueue<Object> synchronousQueue2 = new SynchronousQueue<>(); SynchronousQueue<Object> synchronousQueue3 = new SynchronousQueue<>(); new Thread(()->{ while (true){ try { System.out.println(\\\"线程：\\\"+Thread.currentThread().getName()+\\\" 数据：\\\"+synchronousQueue1.take()); } catch (InterruptedException e) { throw new RuntimeException(e); } } },\\\"Thread01\\\").start(); new Thread(()->{ while (true){ try { System.out.println(\\\"线程：\\\"+Thread.currentThread().getName()+\\\" 数据：\\\"+synchronousQueue3.take()); } catch (InterruptedException e) { throw new RuntimeException(e); } } },\\\"Thread02\\\").start(); new Thread(()->{ while (true){ try { System.out.println(\\\"线程：\\\"+Thread.currentThread().getName()+\\\" 数据：\\\"+synchronousQueue3.take()); } catch (InterruptedException e) { throw new RuntimeException(e); } } },\\\"Thread03\\\").start(); synchronousQueue1.put(\\\"a\\\"); synchronousQueue2.put(\\\"b\\\"); synchronousQueue3.put(\\\"c\\\"); } \"]},\"349\":{\"h\":\"阻塞\",\"t\":[\"/** * 阻塞类型 * @throws InterruptedException */ public static void testPoll() throws InterruptedException { SynchronousQueue<Object> synchronousQueue1 = new SynchronousQueue<>(); SynchronousQueue<Object> synchronousQueue2 = new SynchronousQueue<>(); SynchronousQueue<Object> synchronousQueue3 = new SynchronousQueue<>(); new Thread(()->{ while (true){ try { Object poll = synchronousQueue1.poll(5, TimeUnit.SECONDS); if (poll==null) break; System.out.println(\\\"线程：\\\"+Thread.currentThread().getName()+\\\" 数据：\\\"+poll); } catch (InterruptedException e) { throw new RuntimeException(e); } } },\\\"Thread01\\\").start(); new Thread(()->{ while (true){ try { Object poll = synchronousQueue2.poll(5, TimeUnit.SECONDS); if (poll==null) break; System.out.println(\\\"线程：\\\"+Thread.currentThread().getName()+\\\" 数据：\\\"+poll); } catch (InterruptedException e) { throw new RuntimeException(e); } } },\\\"Thread02\\\").start(); new Thread(()->{ while (true){ try { Object poll = synchronousQueue3.poll(5, TimeUnit.SECONDS); if (poll==null) break; System.out.println(\\\"线程：\\\"+Thread.currentThread().getName()+\\\" 数据：\\\"+poll); } catch (InterruptedException e) { throw new RuntimeException(e); } } },\\\"Thread03\\\").start(); synchronousQueue1.put(\\\"a\\\"); synchronousQueue2.put(\\\"b\\\"); synchronousQueue3.put(\\\"c\\\"); } \"]},\"350\":{\"h\":\"子类 - PriorityBlockingQueue\"},\"351\":{\"h\":\"概念\",\"t\":[\"这是一个带有优先级的无界队列，默认长度为11，长度会根据使用情况自动扩容，直至内存全部耗尽出现OutOfMemoryError内存溢出 程序才会结束。\",\"存放对象必须是比较对象，实现内部比较器或者外部比较器，否则抛出异常ClassCastException\"]},\"352\":{\"h\":\"代码\",\"t\":[\"package com.meturing.Queue; import java.util.concurrent.PriorityBlockingQueue; public class TestPriorityBlockingQueue { public static void main(String[] args) { PriorityBlockingQueue<Student> priorityBlockingQueue = new PriorityBlockingQueue<Student>(); priorityBlockingQueue.put(new Student(\\\"张三\\\", 19)); priorityBlockingQueue.put(new Student(\\\"李四\\\", 10)); priorityBlockingQueue.put(new Student(\\\"王五\\\", 29)); priorityBlockingQueue.put(new Student(\\\"赵六\\\", 1)); System.out.println(priorityBlockingQueue); } } class Student implements Comparable<Student>{ String name; int age; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public Student(String name, int age) { this.name = name; this.age = age; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + '}'; } @Override public int compareTo(Student o) { return this.age - o.age; } } \",\"该队列会根据比较器，将队列中的数据进行排序，按照比较器规则有序取出\"]},\"353\":{\"h\":\"子类 - DelayQueue\"},\"354\":{\"h\":\"简介\",\"t\":[\"DelayQueue是一个无界的BlockingQueue，用于放置实现了Delayed接口的对象，其中的对象只能在其到期时才能从队列中取走\",\"当生产者线程调用put之类的方法加入元素时，会触发Delayed接口中的compareTo方法进行排序，也就是说队列中元素的顺序是按到期时间排序的，而非它们进入队列的顺序。排在队列头部的元素是最早到期的，越往后到期时间赿晚。\",\"消费者线程查看队列头部的元素，注意是查看不是取出。然后调用元素的getDelay方法，如果此方法返回的值小０或者等于０，则消费者线程会从队列中取出此元素，并进行处理。如果getDelay方法返回的值大于0，则消费者线程wait返回的时间值后，再从队列头部取出元素，此时元素应该已经到期。\"]},\"355\":{\"h\":\"应用场景\",\"t\":[\"淘宝订单业务:下单之后如果三十分钟之内没有付款就自动取消订单。\",\"饿了吗订餐通知:下单成功后60s之后给用户发送短信通知。\",\"关闭空闲连接。服务器中，有很多客户端的连接，空闲一段时间之后需要关闭之。\",\"缓存。缓存中的对象，超过了空闲时间，需要从缓存中移出。\",\"任务超时处理。在网络协议滑动窗口请求应答式交互时，处理超时未响应的请求等。\"]},\"356\":{\"h\":\"测试案例\",\"t\":[\"package com.meturing.Queue; import java.util.concurrent.DelayQueue; import java.util.concurrent.Delayed; import java.util.concurrent.TimeUnit; public class TestDelayQueue { DelayQueue<User> delayQueue = new DelayQueue<User>(); public static void main(String[] args) { TestDelayQueue testDelayQueue = new TestDelayQueue(); testDelayQueue.login(new User(\\\"zs1\\\",\\\"张三\\\",System.currentTimeMillis()+5000)); testDelayQueue.login(new User(\\\"ls1\\\",\\\"李四\\\",System.currentTimeMillis()+2000)); testDelayQueue.login(new User(\\\"ww1\\\",\\\"王五\\\",System.currentTimeMillis()+10000)); while (true){ testDelayQueue.loginOut(); if (testDelayQueue.getUserSUM()<=0) break; } } /** * 登录 * @param user */ public void login(User user){ delayQueue.put(user); System.out.println(\\\"用户：[\\\"+user.getUserId()+\\\"] \\\"+user.getUserName()+\\\" 已登录游戏\\\"); } /** * 登出 */ public void loginOut(){ try { User take = delayQueue.take(); System.out.println(\\\"用户：[\\\"+take.getUserId()+\\\"] \\\"+take.getUserName()+\\\" 时间到，登出游戏~\\\"); } catch (InterruptedException e) { throw new RuntimeException(e); } } /** * 获取人数 * @return */ public int getUserSUM(){ return delayQueue.size(); } } class User implements Delayed{ String UserId;//用户ID String UserName;//用户名 Long endTime;//到期时间 public String getUserId() { return UserId; } public void setUserId(String userId) { UserId = userId; } public String getUserName() { return UserName; } public void setUserName(String userName) { UserName = userName; } public Long getEndTime() { return endTime; } public void setEndTime(Long endTime) { this.endTime = endTime; } public User(String userId, String userName, Long endTime) { UserId = userId; UserName = userName; this.endTime = endTime; } @Override public String toString() { return \\\"User{\\\" + \\\"UserId='\\\" + UserId + '\\\\'' + \\\", UserName='\\\" + UserName + '\\\\'' + \\\"}\\\"; } @Override public long getDelay(TimeUnit unit) { //到期时间小于系统时间，退出队列 return this.getEndTime()-System.currentTimeMillis(); } @Override public int compareTo(Delayed o) { //按照到期时间按排序 User u = (User) o; return ((Long)this.endTime).compareTo((Long) u.endTime); } } \"]},\"357\":{\"h\":\"双端队列Deque\",\"t\":[\"双端队列用的比较少，再具备Queue的基础上同时拓展了对头尾的独立操作方法。 由于Deque是个接口，同样我们使用他的实现类LinkedList\",\"public class Test03 { //这是main方法，程序的入口 public static void main(String[] args) { /* 双端队列： Deque<E> extends Queue Queue一端放 一端取的基本方法 Deque是具备的 在此基础上 又扩展了 一些 头尾操作（添加，删除，获取）的方法 */ Deque<String> d = new LinkedList<>() ; d.offer(\\\"A\\\"); d.offer(\\\"B\\\"); d.offer(\\\"C\\\"); System.out.println(d);//[A, B, C] d.offerFirst(\\\"D\\\"); d.offerLast(\\\"E\\\"); System.out.println(d);//[D, A, B, C, E] System.out.println(d.poll()); System.out.println(d);//[A, B, C, E] System.out.println(d.pollFirst()); System.out.println(d.pollLast()); System.out.println(d); } } \"]},\"358\":{\"h\":\"包装类\"},\"359\":{\"h\":\"什么是包装类\",\"t\":[\"在之前的学习中，我们使用的时基本数据类型来存储变量。而包装类是在基本数据类型的基础上，加上属性、特有方法、构造器进行封装。\",\"它拥有更加灵活的操作方式以及API，在后面集合的学习中，我们需要操作的都是引用类型的数据。\",\"同时，Java语言是面向对象的语言。与生俱来就更加擅长操作各种类。\"]},\"360\":{\"h\":\"有哪些包装类\",\"t\":[\"基本数据类型\",\"对应包装类\",\"继承关系\",\"byte\",\"Byte\",\"Byte → Number → Object\",\"short\",\"Short\",\"Short → Number → Object\",\"int\",\"Integer\",\"Integer → Number → Object\",\"long\",\"Long\",\"Long → Number → Object\",\"float\",\"Float\",\"Float → Number → Object\",\"double\",\"Double\",\"Double → Number → Object\",\"char\",\"Character\",\"Character → Object\",\"boolean\",\"Boolean\",\"Boolean → Object\"]},\"361\":{\"h\":\"装箱与拆箱\",\"t\":[\"自动装箱 自动拆箱 是从JDK1.5以后新出的特性 自动装箱就是将基本数据类型自动转换为封装类型，自动拆箱是将封装类型自动转换为基本数据类型\"]},\"362\":{\"h\":\"代码演示\",\"t\":[\"//自动装箱：int--->Integer Integer i = 12; System.out.println(i); //自动拆箱：Integer--->int Integer i2 = new Integer(12); int num = i2; System.out.println(num); \"]},\"363\":{\"h\":\"底层原理\",\"t\":[\"我们将上面的代码编译后，查看它的Class文件反编译代码\",\"//自动装箱：int--->Integer //Integer i = 12; //System.out.println(i); Integer i = Integer.valueof(12); System.out.println(i); //自动拆箱：Integer--->int //Integer i2 = new Integer(12); //int num = i2; //System.out.println(num); Integer i2 = Integer.valueof(12); int num = i2.intValue(); System.out.println(num ); \",\"我们看到他调用了Integer内置函数valueof() 与 intValue()\",\"自动装箱，相当于Java编译器替我们执行了 Integer.valueOf(XXX);\",\"自动拆箱，相当于Java编译器替我们执行了Integer.intValue(XXX);\",\" /** * 返回一个表示指定int值的Integer实例。如果不需要新的Integer实例，则通常应优先使用此方法而不是构造函数Integer(int) ， * 因为此方法可能会通过缓存频繁请求的值来显着提高空间和时间性能。此方法将始终缓存 -128 到 127（含）范围内的值， * 并且可能缓存此范围之外的其他值。 * * 参数：i - 一个int值。 * 返回：表示i的Integer实例。 * 版本：1.5 */ public static Integer valueOf(int i) { if (i >= IntegerCache.low && i <= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); } /** * 将此Integer的值作为int返回 */ public int intValue() { return value; } \"]},\"364\":{\"h\":\"详解Integer\",\"t\":[\"所属的包：java.lang.Integer 继承关系：java.lang.Object → java.lang.Nubmer → java.lang.Integer 实现接口：Serializable Comparable<Integer> 继承？ 被final修饰，不可以有子类 出现版本：JDK1.0 属性： Integer.MAX_VALUE → 最大取值Integer.MIN_VALUE → 最小取值 特殊情况：Integer.MAX_VALUE+1 = Integer.MIN_VALUEInteger.MIN_VALUE-1 = Integer.MAX_VALUE 详细原理见数据结构TODO 构造器：Integer没有空构造器可使用有参构造传入int或String\",\"// Integer i1 = new Integer(12); public Integer (int value){ this.value = value; } /** String s 传入字符串 * throws NumberFormatException 当字符串无法转换成Int时，抛出异常 * parseInt(s,10) 调用当前类中的parseInt方法，转换为10进制int */ public Integer(String s) throws NumberFormatException{ this.value = parseInt(s,10) } \",\"特殊缓存：-128~127 IntegerCache\",\"在Integer中存在一个IntegerCache缓存数组，如果取值在 -128 \\\\ ~127 则直接从缓存中取值，如果在缓存外，则会重新创建对应的对象初始化\",\" /** * 如果传入的数字≥IntegerCache.low【-128】 且 ≤ IntegerCache.high【127】 * 则返回 IntegerCache.cache中指定的值 * 否则 创建一个Integer对象并返回 **/ public static Integer valueOf(int i) { if (i >= IntegerCache.low && i <= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); } /** * 缓存以支持 JLS 要求的 -128 和 127（含）之间的值的自动装箱的对象标识语义。 * 缓存在第一次使用时被初始化。缓存的大小可以由-XX:AutoBoxCacheMax=<size>选项控制。 * 在VM初始化时，可以设置java.lang.Integer.IntegerCache.high属性并保存在sun.misc.VM类的私有系统属性中。 */ private static class IntegerCache { static final int low = -128; static final int high; static final Integer cache[]; static { // high value may be configured by property int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(\\\"java.lang.Integer.IntegerCache.high\\\"); if (integerCacheHighPropValue != null) { try { int i = parseInt(integerCacheHighPropValue); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - (-low) -1); } catch( NumberFormatException nfe) { // If the property cannot be parsed into an int, ignore it. } } high = h; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k < cache.length; k++) cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7) assert IntegerCache.high >= 127; } private IntegerCache() {} } \",\"常用方法：\",\"API\",\"说明\",\"返回结果\",\"Integer1.compareTo(Integer2)\",\"对于两个Integer类型数值进行比较\",\"小于：return -1 等于：return 0 大于：return 1\",\"Integer1.equals(Integer2)\",\"比较两个Integer的值\",\"等于：true 不等于：false\",\"Integer1.intValue()\",\"Integer转int\",\"int\",\"Integer1.parseInt(String)\",\"String转int\",\"int\",\"Integer1.toString()\",\"Integer转String\",\"String\",\"public class Test04 { //这是一个main方法，是程序的入口： public static void main(String[] args) { //compareTo：只返回三个值：要么是0,-1,1 Integer i1 = new Integer(6); Integer i2 = new Integer(12); System.out.println(i1.compareTo(i2));// return (x < y) ? -1 : ((x == y) ? 0 : 1); //equals:Integer对Object中的equals方法进行了重写，比较的是底层封装的那个value的值。 //Integer对象是通过new关键字创建的对象： Integer i3 = new Integer(12); Integer i4 = new Integer(12); System.out.println(i3 == i4);//false 因为==比较的是两个对象的地址 boolean flag = i3.equals(i4); System.out.println(flag); //Integer对象通过自动装箱来完成： Integer i5 = 130; Integer i6 = 130; System.out.println(i5.equals(i6));//true System.out.println(i5 == i6); /* 如果自动装箱值在-128~127之间，那么比较的就是具体的数值 否在，比较的就是对象的地址 */ //intValue() :作用将Integer--->int Integer i7 = 130; int i = i7.intValue(); System.out.println(i); //parseInt(String s) :String--->int: int i8 = Integer.parseInt(\\\"12\\\"); System.out.println(i8); //toString:Integer--->String Integer i10 = 130; System.out.println(i10.toString()); } } \"]},\"365\":{\"h\":\"Math类\"},\"366\":{\"h\":\"特性\",\"t\":[\"所属包：java.lang 继承：被final修饰，不可继承 对象：构造器私有化，无法创建 调用：所有方法都是静态，直接调用\"]},\"367\":{\"h\":\"常用方法\",\"t\":[\" public class test01 { public static void main(String[] args) { //常用属性： System.out.println(Math.PI); //常用方法： System.out.println(\\\"随机数：\\\"+Math.random());//[0.0,1.0) System.out.println(\\\"绝对值：\\\"+Math.abs(-80));//80 System.out.println(\\\"向上取值：\\\"+Math.ceil(9.1));//10.0 System.out.println(\\\"向下取值：\\\"+Math.floor(9.9));//9.0 System.out.println(\\\"四舍五入：\\\"+Math.round(3.5));//4 System.out.println(\\\"取大的那个值：\\\"+Math.max(3, 6));//6 System.out.println(\\\"取小的那个值：\\\"+Math.min(3, 6));//3 } } \"]},\"368\":{\"h\":\"静态导入\",\"t\":[\"import static java.lang.Math.*; public class test02 { public static void main(String[] args) { //常用属性： System.out.println(PI); //常用方法： System.out.println(\\\"随机数：\\\"+random());//[0.0,1.0) System.out.println(\\\"绝对值：\\\"+abs(-80)); System.out.println(\\\"向上取值：\\\"+ceil(9.1)); System.out.println(\\\"向下取值：\\\"+floor(9.9)); System.out.println(\\\"四舍五入：\\\"+round(3.5)); System.out.println(\\\"取大的那个值：\\\"+max(3, 6)); System.out.println(\\\"取小的那个值：\\\"+min(3, 6)); } //如果跟Math中方法重复了，那么会优先走本类中的方法（就近原则） public static int random(){ return 100; } } \"]},\"369\":{\"h\":\"日期相关类\"},\"370\":{\"h\":\"java.util.Date 与 java.sql.Date\",\"t\":[\"java.util.date是java.sql.date的父类，其中java.util.date用于除了数据库以外的任何地方（实际上也可以用于数据库）。两者都有getTime的方法（获取long类型）。所以可以互相转换\",\"java.sql.date date_sql = new java.sql.date(System.currentTime()); java.util.date date = new java,util.date(date_sql.getTime()); \"]},\"371\":{\"h\":\"java.util.Dat 相关API\",\"t\":[\"ublic class utilDemo { //这是一个main方法，是程序的入口： public static void main(String[] args) { //java.util.Date: Date d = new Date(); // Wed Jul 20 20:32:16 CST 2022 System.out.println(d); // Wed Jul 20 20:32:16 CST 2022 System.out.println(d.toString()); // 20 Jul 2022 12:32:16 GMT System.out.println(d.toGMTString());//过期方法，过时方法，废弃方法。 // 2022年7月20日 下午8:32:16 System.out.println(d.toLocaleString()); // 122 System.out.println(d.getYear());//122+1900=2022 // 6 System.out.println(d.getMonth());//6 :返回的值在 0 和 11 之间，值 0 表示 1 月。 //返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。 // 1658320336844 System.out.println(d.getTime()); System.out.println(System.currentTimeMillis()); /* （1）疑问：以后获取时间差用：getTime()还是currentTimeMillis() 答案：currentTimeMillis()--》因为这个方法是静态的，可以类名.方法名直接调用 （2）public static native long currentTimeMillis(); 本地方法 为什么没有方法体？因为这个方法的具体实现不是通过java写的。 （3）这个方法的作用： 一般会去衡量一些算法所用的时间 */ long startTime = System.currentTimeMillis(); for (int i = 0; i < 100000; i++) { System.out.println(i); } long endTime = System.currentTimeMillis(); System.out.println(endTime-startTime); } } \"]},\"372\":{\"h\":\"java.sql.Date 相关API\",\"t\":[\"public class sqlDate { public static void main(String[] args) { Date d = new Date(1592055964263L); System.out.println(d); /* (1)java.sql.Date和java.util.Date的区别： java.util.Date：年月日 时分秒 java.sql.Date：年月日 (2)java.sql.Date和java.util.Date的联系： java.sql.Date(子类) extends java.util.Date （父类） */ //java.sql.Date和java.util.Date相互转换： //【1】util--->sql: java.util.Date date = new Date(1592055964263L);//创建util.Date的对象 //方式1：向下转型 Date date1 = (Date) date; /* 父类：Animal 子类：Dog Animal an = new Dog(); Dog d = (Dog)an; */ //方式2：利用构造器 Date date2 = new Date(date.getTime()); //【2】sql-->util: java.util.Date date3 = d; //[3]String--->sql.Date: Date date4 = Date.valueOf(\\\"2019-3-8\\\"); } } \"]},\"373\":{\"h\":\"类型互转\",\"t\":[\"String → java.util.Date 类型转换 String → java.sql.Date → java.util.Date\",\"public class Test04 { //这是一个main方法，是程序的入口： public static void main(String[] args) { //（1）String--->java.sql.Date java.sql.Date date = java.sql.Date.valueOf(\\\"2015-9-24\\\"); //（2）java.sql.Date--->java.util.Date java.util.Date date2 = date; System.out.println(date2.toString()); } } \",\"String的格式必须是：年-月-日 拼接的形式，换成其它类型，就会出现异常\"]},\"374\":{\"h\":\"SimpleDateFormat\",\"t\":[\"SimpleDateFormat(子类) extends DateFormat（父类是一个抽象类），主要用来定义日期的格式\",\"public class Test05 { public static void main(String[] args) { //日期转换： //SimpleDateFormat(子类) extends DateFormat（父类是一个抽象类） //格式化的标准已经定义好了： DateFormat dateFormat = new SimpleDateFormat(\\\"yyyy-MM-dd HH:MM:SS\\\"); try { // String -> Date Date parse = dateFormat.parse(\\\"2022-07-21 12:00:00\\\"); System.out.println(parse); } catch (ParseException e) { throw new RuntimeException(e); } // Date -> String String format = dateFormat.format(new Date()); System.out.println(format); Date date = new Date(); System.out.println(date.toString()); System.out.println(date.toGMTString()); System.out.println(date.toLocaleString()); } } \",\"日期格式\",\"字母\",\"日期或者时间元素\",\"表示\",\"示例\",\"G\",\"Era 标识符\",\"Text\",\"AD\",\"y\",\"年\",\"Year\",\"1996; 96\",\"M\",\"年中的月份\",\"Month\",\"July; Jul; 07\",\"w\",\"年中的周数\",\"Number\",\"27\",\"W\",\"月中的周数\",\"Number\",\"2\",\"D\",\"年中的天数\",\"Number\",\"189\",\"d\",\"月中的天数\",\"Number\",\"10\",\"F\",\"月中的星期数\",\"Number\",\"2\",\"E\",\"星期中的天数\",\"Text\",\"Tuesday; tue\",\"a\",\"Am/pm 标记\",\"Text\",\"PM\",\"H\",\"一天中的小时数(0-23)\",\"Number\",\"0\",\"k\",\"一天中的小时数(1-24)\",\"Number\",\"24\",\"K\",\"am/pm 中的小时数(0-11)\",\"Number\",\"0\",\"h\",\"am/pm 中的小时数(1-12)\",\"Number\",\"12\",\"m\",\"小时中的分钟数\",\"Number\",\"30\",\"s\",\"分钟中的秒数\",\"Number\",\"55\",\"S\",\"毫秒数\",\"Number\",\"978\",\"z\",\"时区\",\"General time zone\",\"Pacific Standard Time； PST；GMT-08:00\",\"Z\",\"时区\",\"RFC 822 time zone\",\"-0800\"]},\"375\":{\"h\":\"Calendar\",\"t\":[\"Calendar是一个抽象类，不可以直接创建对象 GregorianCalendar()子类 extends Calendar（父类是一个抽象类）\",\"public class Test06 { public static void main(String[] args) { Calendar gregorianCalendar = new GregorianCalendar(); Calendar instance = Calendar.getInstance(); System.out.println(gregorianCalendar); //获取当前年 System.out.println(gregorianCalendar.get(Calendar.YEAR)); //获取当前月 0-11 System.out.println(gregorianCalendar.get(Calendar.MONTH)); //获取当前日 21 System.out.println(gregorianCalendar.get(Calendar.DATE)); //获取当前是周几？ 分地区，默认按照周日是第一天 // MONDAY 1， TUESDAY 2， WEDNESDAY 3, THURSDAY 4， FRIDAY 5， SATURDAY 6 ， SUNDAY 7 //SUNDAY 1， MONDAY 2， TUESDAY 3， WEDNESDAY 4, THURSDAY 5， FRIDAY 6， SATURDAY 7 ， System.out.println(gregorianCalendar.get(Calendar.DAY_OF_WEEK)); //获取当月日期的最大天数 System.out.println(gregorianCalendar.getActualMaximum(Calendar.DATE)); ////获取当月日期的最小天数 System.out.println(gregorianCalendar.getActualMinimum(Calendar.DATE)); //Set改变Calendar的内容 gregorianCalendar.set(Calendar.YEAR,1997); gregorianCalendar.set(Calendar.MONTH,11); gregorianCalendar.set(Calendar.DATE,8); System.out.println(gregorianCalendar); //String -> Calendar Date d = java.sql.Date.valueOf(\\\"2022-07-21\\\"); gregorianCalendar.setTime(d); System.out.println(gregorianCalendar); } } \"]},\"376\":{\"h\":\"小练习\",\"t\":[\"一个简单的日历小程序\",\"public class Test07 { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\\\"请输入您想查看的日期，格式：1999-11-18\\\"); String next = scanner.next(); Date date = java.sql.Date.valueOf(next); Calendar calendar = new GregorianCalendar(); calendar.setTime(date); System.out.println(\\\"日\\\\t一\\\\t二\\\\t三\\\\t四\\\\t五\\\\t六\\\"); //获取当前这个月最大天数 int maxDay = calendar.getActualMaximum(Calendar.DATE); //获取输入的天 int nowDay = calendar.get(Calendar.DATE); //获取这个月第一天是周几？ calendar.set(Calendar.DATE,1); int begin = calendar.get(Calendar.DAY_OF_WEEK); //存入一个计数器 int count = 0; for (int i = 0; i < begin-1; i++) { System.out.print(\\\"\\\\t\\\"); } count+=begin; //补齐第一行 for (int i = 1; i <= maxDay; i++){ if (nowDay==i){ System.out.print(\\\"*\\\"); } System.out.print(i+\\\"\\\\t\\\"); count++; if (count%7==0){ System.out.println(); } } System.out.println(); } } \"]},\"377\":{\"h\":\"JDK1.8中的日期API\"},\"378\":{\"h\":\"为什么会有第三代日期API\",\"t\":[\"第一代API：java.util.Date类\",\"第二代API：Calendar类 前两代缺陷： 可变性：日期和时间的类应该是不可变的 偏移性：Date种年份是从1900开始，月份是从0开始 格式化：格式化只对Date有用，Calendar无法使用\",\"第三代：JDK1.8新增API\"]},\"379\":{\"h\":\"LocalDate / LocalTime / LocalDateTime\",\"t\":[\"public class Test08 { public static void main(String[] args) { //实例化 //2022-07-21 LocalDate localDate = LocalDate.now(); System.out.println(localDate); //14:56:28.695081900 LocalTime localTime = LocalTime.now(); System.out.println(localTime); //2022-07-21T14:56:28.695081900 LocalDateTime localDateTime = LocalDateTime.now(); System.out.println(localDateTime); //设置指定的日期 LocalDate of = LocalDate.of(2022, 7, 21); System.out.println(of); LocalTime of1 = LocalTime.of(12, 35, 56); System.out.println(of1); LocalDateTime of2 = LocalDateTime.of(2022, 7, 21, 14, 58, 58); System.out.println(of2); //LocalDate,LocalTime用的不如LocalDateTime多 System.out.println(localDateTime.getYear());//2022 System.out.println(localDateTime.getMonth());//JULY System.out.println(localDateTime.getMonthValue());//7 System.out.println(localDateTime.getDayOfMonth());//21 System.out.println(localDateTime.getDayOfWeek());//THURSDAY System.out.println(localDateTime.getDayOfYear());//202 System.out.println(localDateTime.getHour());//15 System.out.println(localDateTime.getMinute());//4 System.out.println(localDateTime.getSecond());//39 //不可变性 日期之间相互独立，不会相互影响 //设置指定的日期，不是set 是with LocalDateTime localDateTime1 = localDateTime.withMonth(12); //2022-12-21T15:04:39.706128800 System.out.println(localDateTime1); //2022-07-21T15:04:39.706128800 System.out.println(localDateTime); //提供加减操作 LocalDateTime localDateTime2 = localDateTime.plusHours(1); //2022-07-21T16:04:39.706128800 System.out.println(localDateTime2); //2022-07-21T15:04:39.706128800 System.out.println(localDateTime); LocalDateTime localDateTime3 = localDateTime.minusDays(5); //2022-07-16T15:04:39.706128800 System.out.println(localDateTime3); //2022-07-21T15:04:39.706128800 System.out.println(localDateTime); } } \"]},\"380\":{\"h\":\"DateTimeFormatter\",\"t\":[\"public class Test09 { public static void main(String[] args) { //格式化类：DateTimeFormatter //方式一:预定义的标准格式。如: ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;IS0_LOCAL_TIME DateTimeFormatter isoLocalDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME; //isoLocalDateTime就可以帮我们完成LocalDateTime和String之间的相互转换： //LocalDateTime-->String: LocalDateTime now = LocalDateTime.now(); String format = isoLocalDateTime.format(now); System.out.println(format); //String--->LocalDateTime TemporalAccessor parse = isoLocalDateTime.parse(\\\"2022-06-15T15:02:51.29\\\"); System.out.println(parse); //方式二:本地化相关的格式。如: oflocalizedDateTime() //参数：FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT //FormatStyle.LONG :2020年6月15日 下午03时17分13秒 //FormatStyle.MEDIUM: 2020-6-15 15:17:42 //FormatStyle.SHORT:20-6-15 下午3:18 DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT); //LocalDateTime-->String: LocalDateTime now1 = LocalDateTime.now(); String format1 = dateTimeFormatter.format(now1); System.out.println(format1); //String--->LocalDateTime TemporalAccessor parse1 = dateTimeFormatter.parse(\\\"2022/7/21 下午3:17\\\"); System.out.println(parse1); //方式三: 自定义的格式。如: ofPattern( \\\"yyyy-MM-dd hh:mm:ss\\\") ---》重点，以后常用 DateTimeFormatter dateTimeFormatter1 = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd hh:mm:ss\\\"); //LocalDateTime-->String: LocalDateTime now2 = LocalDateTime.now(); String format2 = dateTimeFormatter1.format(now2); System.out.println(format2); //String--->LocalDateTime TemporalAccessor parse2 = dateTimeFormatter1.parse(\\\"2020-06-15 03:22:03\\\"); System.out.println(parse2); } } \"]},\"381\":{\"h\":\"Random类\"},\"382\":{\"h\":\"常用方法\",\"t\":[\"public class test01 { public static void main(String[] args) { //返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。 System.out.println(\\\"随机数：\\\"+Math.random()); //Random类 //（1）利用带参数的构造器创建对象： Random random = new Random(System.currentTimeMillis()); int i = random.nextInt(); System.out.println(i); //（2）利用空参构造器创建对象： Random random1 = new Random();//表面是在调用无参数构造器，实际底层还是调用了带参构造器 System.out.println(random1.nextInt(10));//在 0（包括）和指定值（不包括）之间均匀分布的 int 值 System.out.println(random1.nextDouble());//在 0.0 和 1.0 之间均匀分布的 double 值。 } } \"]},\"383\":{\"h\":\"File类\"},\"384\":{\"h\":\"概念\",\"t\":[\"在Java中对文件或目录的操作，通常是将他转换为File对象，该对象内置了很多处理的方法，以便我们使用。\",\"例如：File file1 = new File(\\\"D:/新建文件.txt\\\"); 但是这种写法并不好，因为路径中很容易出现\\\\t之类的转义符\",\"所以推荐使用：File file2 = new File(\\\"D:\\\"+File.separatorChar+\\\"newTest.txt\\\"); 其中File.separatorChar在此自动替换了路径中的特殊符号\",\"盘符上的文件 → 封装为对象 → 对象属于File类的对象 → 有了这个对象，我们程序就可以直接操纵这个对象，通过这个对象获取文件的各种信息，还可以对文件进行创建 ，删除。\"]},\"385\":{\"h\":\"文件的操作\",\"t\":[\"File file2 = new File(\\\"D:\\\"+File.separatorChar+\\\"newTest.txt\\\"); //将指定文件封装为File对象\"]},\"386\":{\"h\":\"常见API\",\"t\":[\"API\",\"说明\",\"举例\",\"boolean canRead()\",\"是否可读\",\"System.out.println(\\\"是否可读：\\\"+file2.canRead());\",\"boolean canWrite()\",\"是否可写\",\"System.out.println(\\\"是否可写：\\\"+file2.canWrite())\",\"String getName()\",\"文件名字\",\"System.out.println(\\\"文件名字：\\\"+file2.getName());\",\"String getParent()\",\"上级目录\",\"System.out.println(\\\"上级目录：\\\"+file2.getParent());\",\"boolean isDirectory()\",\"是否是一个目录\",\"System.out.println(\\\"是否是一个目录：\\\"+file2.isDirectory());\",\"boolean isFile()\",\"是否是一个文件\",\"System.out.println(\\\"是否是一个文件：\\\"+file2.isFile());\",\"boolean isHidden()\",\"是否隐藏\",\"System.out.println(\\\"是否隐藏：\\\"+file2.isHidden());\",\"long length()\",\"文件大小\",\"System.out.println(\\\"文件大小：\\\"+file2.length());\",\"boolean exists()\",\"文件是否存在\",\"System.out.println(\\\"文件是否存在：\\\"+file2.exists());\",\"boolean delete()\",\"删除文件\",\"file2.delete();\",\"file1==file2\",\"比较两个对象的地址\",\"System.out.println(file1==file2);\",\"file1.equals(file2)\",\"比较两个文件的路径（即是否是同一个文件）\",\"System.out.println(file1.equals(file2));\",\"String getAbsolutePath()\",\"绝对路径：文件真实的、精准的、完整的路径\",\"System.out.println(\\\"绝对路径：\\\"+file.getAbsolutePath());//E:\\\\AllPerject\\\\IDEAProject\\\\MCA_Demo\\\\JavaSE_Demo\\\\demo.txt\",\"String getPath()\",\"相对路径：在Main方法中是以当前项目为参照物，在JUNIT中是以当前模块为参照物的相对路径位置\",\"System.out.println(\\\"相对路径：\\\"+file.getPath());//demo.txt\",\"String toString()\",\"toString，通常就是相对路径\",\"System.out.println(\\\"toString:\\\"+file.toString());//demo.txt\",\"boolean createNewFile() throws IOException\",\"创建文件\",\"file2.createNewFile();\"]},\"387\":{\"h\":\"代码案例\",\"t\":[\" public class TestFile01 { public static void main(String[] args) throws IOException { /** * 文件相关的操作 */ // File file = new File(\\\"D:\\\\\\\\新建文件夹.txt\\\"); File file1 = new File(\\\"D:/新建文件.txt\\\"); File file2 = new File(\\\"D:\\\"+File.separatorChar+\\\"newTest.txt\\\");//推荐这种写法 System.out.println(\\\"是否可读：\\\"+file2.canRead()); System.out.println(\\\"是否可写：\\\"+file2.canWrite()); System.out.println(\\\"文件名字：\\\"+file2.getName()); System.out.println(\\\"上级目录：\\\"+file2.getParent()); System.out.println(\\\"是否是一个目录：\\\"+file2.isDirectory()); System.out.println(\\\"是否是一个文件：\\\"+file2.isFile()); System.out.println(\\\"是否隐藏：\\\"+file2.isHidden()); System.out.println(\\\"文件大小：\\\"+file2.length()); System.out.println(\\\"文件是否存在：\\\"+file2.exists()); //如果文件存在则删除 // if (file2.exists()){ // file2.delete(); // }else { // //不存在则创建 // file2.createNewFile(); // } /** * 地址相关的操作 */ //比较两个对象的地址 System.out.println(file1==file2); //比较两个文件的路径（即是否是同一个文件） System.out.println(file1.equals(file2)); System.out.println(\\\"绝对路径：\\\"+file2.getAbsolutePath());//D:\\\\newTest.txt System.out.println(\\\"相对路径：\\\"+file2.getPath());//D:\\\\newTest.txt System.out.println(\\\"toString:\\\"+file2.toString());//D:\\\\newTest.txt System.out.println(\\\"-----------------\\\"); File file = new File(\\\"demo.txt\\\"); if (file.exists()) file.createNewFile(); ////绝对路径指的就是：真实的一个精准的，完整的路径 System.out.println(\\\"绝对路径：\\\"+file.getAbsolutePath());//E:\\\\AllPerject\\\\IDEAProject\\\\MCA_Demo\\\\JavaSE_Demo\\\\demo.txt //相对路径：有一个参照物，相对这个参照物的路径。 //在main方法中，相对位置指的就是：E:\\\\AllPerject\\\\IDEAProject\\\\MCA_Demo\\\\JavaSE_Demo //在junit的测试方法中，相对路径指的就是模块位置 System.out.println(\\\"相对路径：\\\"+file.getPath());//demo.txt //toString的效果永远是 相对路径 System.out.println(\\\"toString:\\\"+file.toString());//demo.txt File file3 = new File(\\\"a/b/c/demo.txt\\\"); if (file3.exists()) file3.createNewFile(); System.out.println(\\\"绝对路径：\\\"+file3.getAbsolutePath());//E:\\\\AllPerject\\\\IDEAProject\\\\MCA_Demo\\\\JavaSE_Demo\\\\a\\\\b\\\\c\\\\demo.txt System.out.println(\\\"相对路径：\\\"+file3.getPath());//a\\\\b\\\\c\\\\demo.txt } } \"]},\"388\":{\"h\":\"目录的操作\",\"t\":[\"File file2 = new File(\\\"D:\\\"+File.separatorChar+\\\"IDEA_workspace\\\"); //将指定目录封装为File对象\"]},\"389\":{\"h\":\"常见API\",\"t\":[\"API\",\"说明\",\"举例\",\"boolean canRead()\",\"是否可读\",\"System.out.println(\\\"是否可读：\\\"+file2.canRead());\",\"boolean canWrite()\",\"是否可写\",\"System.out.println(\\\"是否可写：\\\"+file2.canWrite())\",\"String getName()\",\"文件名字\",\"System.out.println(\\\"文件名字：\\\"+file2.getName());\",\"String getParent()\",\"上级目录\",\"System.out.println(\\\"上级目录：\\\"+file2.getParent());\",\"boolean isDirectory()\",\"是否是一个目录\",\"System.out.println(\\\"是否是一个目录：\\\"+file2.isDirectory());\",\"boolean isFile()\",\"是否是一个文件\",\"System.out.println(\\\"是否是一个文件：\\\"+file2.isFile());\",\"boolean isHidden()\",\"是否隐藏\",\"System.out.println(\\\"是否隐藏：\\\"+file2.isHidden());\",\"long length()\",\"文件大小\",\"System.out.println(\\\"文件大小：\\\"+file2.length());\",\"boolean exists()\",\"文件是否存在\",\"System.out.println(\\\"文件是否存在：\\\"+file2.exists());\",\"file1==file2\",\"比较两个对象的地址\",\"System.out.println(file1==file2);\",\"file1.equals(file2)\",\"比较两个文件的路径（即是否是同一个文件）\",\"System.out.println(file1.equals(file2));\",\"String getAbsolutePath()\",\"绝对路径：文件真实的、精准的、完整的路径\",\"System.out.println(\\\"绝对路径：\\\"+file2.getAbsolutePath());//E:\\\\AllPerject\\\\IDEAProject\\\\MCA_Demo\\\\JavaSE_Demo\\\\demo.txt\",\"String getPath()\",\"相对路径：在Main方法中是以当前项目为参照物，在JUNIT中是以当前模块为参照物的相对路径位置\",\"System.out.println(\\\"相对路径：\\\"+file2.getPath());//demo.txt\",\"String toString()\",\"toString，通常就是相对路径\",\"System.out.println(\\\"toString:\\\"+file2.toString());//demo.txt\",\"boolean mkdir()\",\"创建单层目录\",\"file2.mkdir();\",\"boolean mkdirs()\",\"创建多层目录\",\"file2.mkdirs();\",\"boolean delete()\",\"删除目录： 只会删除一层目录，并且必须为空目录\",\"file2.delete();\",\"String[] list()\",\"获取指定目录内存在的所有目录或者文件的名字的数组\",\"String[] list = file2.list();\",\"File[] listFiles()\",\"获取指定目录内存在的所有目录或者文件的File对象数组\",\"File[] files = file2.listFiles();\"]},\"390\":{\"h\":\"代码案例\",\"t\":[\" package com.meturing.file; import java.io.File; /** * 对目录开始操作 */ public class TestFile02 { public static void main(String[] args) { //将目录封装为File类的对象： File f = new File(\\\"D:\\\\\\\\IDEA_workspace\\\"); System.out.println(\\\"文件是否可读：\\\"+f.canRead()); System.out.println(\\\"文件是否可写：\\\"+f.canWrite()); System.out.println(\\\"文件的名字：\\\"+f.getName()); System.out.println(\\\"上级目录：\\\"+f.getParent()); System.out.println(\\\"是否是一个目录：\\\"+f.isDirectory()); System.out.println(\\\"是否是一个文件：\\\"+f.isFile()); System.out.println(\\\"是否隐藏：\\\"+f.isHidden()); System.out.println(\\\"文件的大小：\\\"+f.length()); System.out.println(\\\"是否存在：\\\"+f.exists()); System.out.println(\\\"绝对路径：\\\"+f.getAbsolutePath()); System.out.println(\\\"相对路径：\\\"+f.getPath()); System.out.println(\\\"toString:\\\"+f.toString()); //目录特有的属性 File a = new File(\\\"D:\\\"+File.separatorChar+\\\"a\\\"); a.mkdir();//创建单层目录 File b = new File(\\\"D:\\\"+File.separatorChar+\\\"a\\\"+File.separatorChar+\\\"b\\\"+File.separatorChar+\\\"c\\\"); b.mkdirs();//创建多层目录 b.delete();//删除 如果删除目录的话，只会删除一层目录，并且必须为空目录 //获取指定目录内存在的所有目录或者文件的名字的数组 String[] list = a.list(); for (String s : list) { System.out.println(s); } //获取指定目录内存在的所有目录或者文件的File对象数组 File[] files = a.listFiles(); for (File file : files) { System.out.println(\\\"当前的名字：\\\"+file.getName()+\\\"\\\\t当前的绝对路径\\\"+file.getAbsolutePath()); } } } \"]},\"391\":{\"h\":\"StringBuilder与StringBuffer类\",\"t\":[\"StringBuilder与StringBuffer类 很相似，下面我们就以StringBuilder为例讲解底层内存。\"]},\"392\":{\"h\":\"StringBuilder的底层\",\"t\":[\"可变字符串：StringBuilder，StringBuffer\",\"StringBuilder底层中 非常重要的两个属性：char[ ] value; //底层存储数组int count; // 指value数组中被使用的长\",\"继承： StringBuilder 继承 AbstractStringBuilder\",\"public class Test01 { //这是一个main方法，是程序的入口： public static void main(String[] args) { //创建StringBuilder的对象： StringBuilder sb3 = new StringBuilder(); //表面上调用StringBuilder的空构造器，实际底层是对value数组进行初始化，长度为16 StringBuilder sb2 = new StringBuilder(3); //表面上调用StringBuilder的有参构造器，传入一个int类型的数，实际底层就是对value数组进行初始化，长度为你传入的数字 StringBuilder sb = new StringBuilder(\\\"abc\\\"); System.out.println(sb.append(\\\"def\\\").append(\\\"aaaaaaaa\\\").append(\\\"bbb\\\").append(\\\"ooooooo\\\").toString());;//链式调用方式：return this } } \",\"查看源码我们知道：\",\"初始化String的长度是：参数长度+16\",\"StringBulider的扩容是：(value.length <<1) +2 // 当前存储char数组的长度 * 2 + 2\"]},\"393\":{\"h\":\"理解什么是可变与不可变\",\"t\":[\"在前面的学习中，我们知道String是应用方法，他一单被声明则创建在JVM的常量池中，并指向这个位置。当我们改变这个String的参数时，他会优先在常量池中查找，如果不存在则再次创建并指向新的地址。\",\"通过阅读StringBuilder的底层源码，我们发现他是指向一个char数组的引用位置。我们对于StringBuilder的改动，都是在原有的char数组上进行变更，内存地址是一样的。如果超过数组长度，底层会帮我们自动扩容，并将原有的内容复制到新的地址中继续操作。\"]},\"394\":{\"h\":\"常用方法\"},\"395\":{\"h\":\"StringBuilder常用方法\",\"t\":[\"public class Test02 { public static void main(String[] args) { StringBuilder sb=new StringBuilder(\\\"nihaojavawodeshijie\\\"); //增加 sb.append(\\\"这是梦想\\\"); System.out.println(sb);//nihaojavawodeshijie这是梦想 //删除 sb.delete(3,6);////删除位置在[3,6)上的字符 System.out.println(sb);//nihavawodeshijie这是梦想 sb.deleteCharAt(16); System.out.println(sb);//nihavawodeshijie是梦想 //修改--> 插入 StringBuilder sb1=new StringBuilder(\\\"$23445980947\\\"); sb1.insert(3,\\\",\\\");////在下标为3的位置上插入 , System.out.println(sb1);//$23,445980947 //修改--> 替换 sb1.replace(3,5,\\\"我好累\\\");//在下标[3,5)位置上替换插入字符串 System.out.println(sb1);//$23我好累45980947 sb1.setCharAt(3,'你');//在下标3位置上替换插入字符串 System.out.println(sb1);//$23你好累45980947 //查询 StringBuilder sb3=new StringBuilder(\\\"asdfa\\\"); for (int i = 0; i < sb3.length(); i++) { System.out.print(sb3.charAt(i)+\\\"\\\\t\\\"); } System.out.println(); //截取 String str=sb3.substring(2,4);//截取[2,4)返回的是一个新的String，对StringBuilder没有影响 System.out.println(str); System.out.println(sb3); } } \"]},\"396\":{\"h\":\"StringBuffer常用方法\",\"t\":[\"public class Test03 { //这是一个main方法，是程序的入口： public static void main(String[] args) { StringBuffer sb=new StringBuffer(\\\"nihaojavawodeshijie\\\"); //增 sb.append(\\\"这是梦想\\\"); System.out.println(sb);//nihaojavawodeshijie这是梦想 //删 sb.delete(3, 6);//删除位置在[3,6)上的字符 System.out.println(sb);//nihavawodeshijie这是梦想 sb.deleteCharAt(16);//删除位置在16上的字符 System.out.println(sb);//nihavawodeshijie是梦想 //改-->插入 StringBuilder sb1=new StringBuilder(\\\"$23445980947\\\"); sb1.insert(3, \\\",\\\");//在下标为3的位置上插入 , System.out.println(sb1); StringBuilder sb2=new StringBuilder(\\\"$2你好吗5980947\\\"); //改-->替换 sb2.replace(3, 5, \\\"我好累\\\");//在下标[3,5)位置上插入字符串 System.out.println(sb2); sb.setCharAt(3, '!'); System.out.println(sb); //查 StringBuilder sb3=new StringBuilder(\\\"asdfa\\\"); for (int i = 0; i < sb3.length(); i++) { System.out.print(sb3.charAt(i)+\\\"\\\\t\\\"); } System.out.println(); //截取 String str=sb3.substring(2,4);//截取[2,4)返回的是一个新的String，对StringBuilder没有影响 System.out.println(str); System.out.println(sb3); } } \"]},\"397\":{\"h\":\"StringBuilder与StringBuffer的区别\",\"t\":[\"String类是不可变类，即一旦一个String对象被创建后，包含在这个对象中的字符序列是不可改变的，直至这个对象销毁\",\"StringBuffer类则代表一个字符序列可变的字符串，可以通过append、insert、reverse、setChartAt、setLength等方法改变其内容。一旦生成了最终的字符串，调用toString方法将其转变为String\",\"JDK1.5新增了一个StringBuilder类，与StringBuffer相似，构造方法和方法基本相同。不同是StringBuffer是线程安全的，而StringBuilder是线程不安全的，所以性能略高。通常情况下，创建一个内容可变的字符串，应该优先考虑使用StringBuilder\",\"StringBuilder:JDK1.5开始 效率高 线程不安全\",\"StringBuffer:JDK1.0开始   效率低    线程安全\"]},\"398\":{\"h\":\"IO流\"},\"399\":{\"h\":\"概览\"},\"400\":{\"h\":\"概念\",\"t\":[\"在本章节我们将学习Java中的IO流的操作，在此之前我们先熟悉两个基本的概念：\",\"File类 封装文件/目录的各种信息，对目录/文件进行操作，但是我们不可以获取到文件/目录中的内容。\",\"IO流 Input/Output的缩写，用于处理设备之间的数据的传输。\",\"我们可以理解为，将文件实体读取为FIle类对象，然后使用IO流类似通道一样读取文件中的内容。反之将内容通过IO流写道File类对象中，然后保存到硬盘。\"]},\"401\":{\"h\":\"IO流的体系结构\",\"t\":[\"文本文件：.txt .java .c .cpp ---》建议使用字符流操作 非文本文件：.jpg, .mp3 , .mp4 , .doc , .ppt ---》建议使用字节流操作\"]},\"402\":{\"h\":\"字符流\"},\"403\":{\"h\":\"FileReader\"},\"404\":{\"h\":\"API\",\"t\":[\"API\",\"说明\",\"举例\",\"FileReader(File file);\",\"构造函数，导入指定的File类\",\"int read()\",\"读取一个字符，返回读取的字符，如果已到达流的末尾则为-1\",\"int read(char cbuf[])\",\"读取指定长度的字符，返回读取的字符数，如果已到达流的末尾则为-1\",\"String(char value[], int offset, int count)\",\"分配一个新字符串，该字符串包含字符数组参数的子数组中的字符。offset参数是子数组第一个字符的索引，count参数指定子数组的长度。复制子数组的内容;字符数组的后续修改不会影响新创建的字符串。\"]},\"405\":{\"h\":\"代码\",\"t\":[\"package com.meturing.io; import java.io.*; public class TestIO01 { /** * 读取指定char长度的字符，通过String函数转换成str * @param args * @throws IOException */ public static void main(String[] args) throws IOException { File file = new File(\\\"D:\\\" + File.separatorChar + \\\"newFile.txt\\\"); FileReader fileReader = new FileReader(file); char[] chars = new char[5];//缓冲数组 // 按字符读取 如果读取不到则返回-1 int read = fileReader.read(chars);//一次性读取指定char长度,并返回当前读取的数量 while(read!= -1){ String str = new String(chars, 0, read);//直接使用String读取char数组 System.out.print(str); read = fileReader.read(chars); } fileReader.close();//关闭流 } /** * 读取指定char长度的字符 * @throws IOException */ public void Test02() throws IOException { File file = new File(\\\"D:\\\" + File.separatorChar + \\\"newFile.txt\\\"); FileReader fileReader = new FileReader(file); char[] chars = new char[5];//缓冲数组 // 按字符读取 如果读取不到则返回-1 int read = fileReader.read(chars);//一次性读取指定char长度,并返回当前读取的数量 while(read!= -1){ for (int i = 0; i < read; i++) { System.out.print(chars[i]); } read = fileReader.read(chars); } fileReader.close();//关闭流 } /** * 一个字符一个字符读取 * @throws IOException */ public void Test01() throws IOException { File file = new File(\\\"D:\\\" + File.separatorChar + \\\"newFile.txt\\\"); FileReader fileReader = new FileReader(file); // 按字符读取 如果读取不到则返回-1 int read = fileReader.read();//读取一个字符 while(read!= -1){ System.out.println(read); read = fileReader.read(); } fileReader.close();//关闭流 } } \"]},\"406\":{\"h\":\"FileWriter\"},\"407\":{\"h\":\"API\",\"t\":[\"API\",\"说明\",\"举例\",\"FileReader(File file);\",\"构造函数，导入指定的File类\",\"FileWriter(File file, boolean append)\",\"给定File对象，构造一个FileWriter对象。如果第二个参数为true，则字节将被写入文件的末尾而不是开头\",\"void write(char cbuf[])\",\"写入字符数组\",\"void write(String str)\",\"写一个字符串。\",\"void write(String str, int off, int len)\",\"写入字符串的一部分。 参数: str -一个字符串off -开始写入字符的偏移量len -要写入的字符的数量\"]},\"408\":{\"h\":\"代码\",\"t\":[\" public class TestIO02 { public static void main(String[] args) throws IOException { File file = new File(\\\"D:\\\" + File.separatorChar + \\\"Demo.txt\\\"); FileWriter fileWriter = new FileWriter(file,true);//默认为false 不执行追加 //输出96 -> 、 // fileWriter.write(96); // char[] chars = new char[5]; // chars[0] = 'a'; // chars[1] = 'b'; // chars[2] = 'c'; // chars[3] = 'd'; // chars[4] = 'e'; // fileWriter.write(chars); String str = \\\"你好Java\\\"; fileWriter.write(str.toCharArray()); fileWriter.close(); } } \"]},\"409\":{\"h\":\"复制文件\",\"t\":[\"package com.meturing.io; import java.io.*; public class TestIO03 { public static <Stirng> void main(String[] args) throws IOException { //创建复制文件对象 File fileIn = new File(\\\"D:\\\" + File.separatorChar + \\\"Demo.txt\\\"); //创建输出对象 File fileOut = new File(\\\"D:\\\" + File.separatorChar + \\\"DemoCopy.txt\\\"); //创建文件输入流 FileReader fileReader = new FileReader(fileIn); //创建文件输出流 FileWriter fileWriter = new FileWriter(fileOut); //方式一 一个一个读和写 // int read = fileReader.read(); // while(read!=-1){ // fileWriter.write(read); // read = fileReader.read(); // } //方式二 使用数组缓冲 // char[] chars = new char[5]; // int read = fileReader.read(chars); // while (read!=-1){ // fileWriter.write(chars,0,read); // read = fileReader.read(chars); // } //方式三 直接使用Str输出 char[] chars = new char[5]; int read = fileReader.read(chars); while (read!=-1){ String str = new String(chars,0,read); fileWriter.write(str); read = fileReader.read(chars); } //关闭流：从下往上关闭 fileWriter.close(); fileReader.close(); } } \"]},\"410\":{\"h\":\"字节流\"},\"411\":{\"h\":\"FileInputStream\"},\"412\":{\"h\":\"FileOutputStream\",\"t\":[\"package com.meturing.io; import java.io.*; /** * 使用字符流复制 */ public class TestIO05 { public static void main(String[] args) throws IOException { File fileIn = new File(\\\"D:\\\" + File.separatorChar + \\\"Demo.png\\\"); File fileOut = new File(\\\"D:\\\" + File.separatorChar + \\\"DemoCopy.png\\\"); FileInputStream fileInputStream = new FileInputStream(fileIn); FileOutputStream fileOutputStream = new FileOutputStream(fileOut); byte[] bytes = new byte[1024*8]; int read = fileInputStream.read(bytes); while (read!=-1){ fileOutputStream.write(bytes,0,read); read = fileInputStream.read(bytes); } fileOutputStream.close(); fileInputStream.close(); } /** * 普通一个字节一个字节读取 * @throws IOException */ public void Demo01() throws IOException { File fileIn = new File(\\\"D:\\\" + File.separatorChar + \\\"Demo.png\\\"); File fileOut = new File(\\\"D:\\\" + File.separatorChar + \\\"DemoCopy.png\\\"); FileInputStream fileInputStream = new FileInputStream(fileIn); FileOutputStream fileOutputStream = new FileOutputStream(fileOut); int read = fileInputStream.read(); while (read!=-1){ fileOutputStream.write(read); read = fileInputStream.read(); } fileOutputStream.close(); fileInputStream.close(); } } \"]},\"413\":{\"h\":\"字符缓冲流\"},\"414\":{\"h\":\"BufferedReader\"},\"415\":{\"h\":\"BufferedWriter\",\"t\":[\"/** * 字节缓冲流 */ public class TestIO07 { public static void main(String[] args) throws IOException { //创建File对象 File fileIn = new File(\\\"D:\\\" + File.separatorChar + \\\"Demo.txt\\\"); File fileOut = new File(\\\"D:\\\" + File.separatorChar + \\\"DemoCopy.txt\\\"); //构建字节流 FileReader fileReader = new FileReader(fileIn); FileWriter fileWriter = new FileWriter(fileOut); //字节缓冲流 BufferedReader bufferedReader = new BufferedReader(fileReader); BufferedWriter bufferedWriter = new BufferedWriter(fileWriter); String str = bufferedReader.readLine(); while (str!=null){ bufferedWriter.write(str); bufferedWriter.newLine(); str = bufferedReader.readLine(); } } } \"]},\"416\":{\"h\":\"字节缓冲流\"},\"417\":{\"h\":\"BufferedInputStream\"},\"418\":{\"h\":\"BufferedOutputStream\",\"t\":[\"/** * 字节缓冲流 */ public class TestIO06 { public static void main(String[] args) throws IOException { //构建File File fileIn = new File(\\\"D:\\\" + File.separatorChar + \\\"Demo.png\\\"); File fileOut = new File(\\\"D:\\\" + File.separatorChar + \\\"DemoCopy.png\\\"); //创建字节流 FileInputStream fileInputStream = new FileInputStream(fileIn); FileOutputStream fileOutputStream = new FileOutputStream(fileOut); //字节缓冲流 BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream); BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(fileOutputStream); byte[] bytes = new byte[1024 * 8]; int read = bufferedInputStream.read(bytes); while (read!=-1){ bufferedOutputStream.write(bytes,0,read); read = bufferedInputStream.read(bytes); } //如果处理流包裹着节点流的话，那么其实只要关闭高级流（处理流），那么里面的字节流也会随之被关闭。 bufferedOutputStream.close(); bufferedInputStream.close(); } } \"]},\"419\":{\"h\":\"字符转换流\"},\"420\":{\"h\":\"InputStreamReader\"},\"421\":{\"h\":\"OutputStreamWriter\",\"t\":[\"package com.meturing.io; import java.io.*; /** * 使用字符转换流达到文件复制 * 、 * 注意：转换流在使用的时候可以指定编码格式，如果不指定则为当前的程序编码格式一致 */ public class TestIO08 { public static void main(String[] args) throws IOException { //创建File对象 File fileIn = new File(\\\"D:\\\" + File.separatorChar + \\\"Demo.txt\\\"); File fileOut = new File(\\\"D:\\\" + File.separatorChar + \\\"DemoCopy.txt\\\"); FileInputStream fileInputStream = new FileInputStream(fileIn);//字节流 InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);//FileInputStream-> InputStreamReader 字符流 FileOutputStream fileOutputStream = new FileOutputStream(fileOut);//字节流 OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream);//FileOutputStream-> OutputStreamWriter 字符流 char[] chars = new char[8]; int read = inputStreamReader.read(chars); while (read!=-1){ outputStreamWriter.write(chars,0,read); read = inputStreamReader.read(chars); } outputStreamWriter.close(); inputStreamReader.close(); } } \"]},\"422\":{\"h\":\"Scanner扫描器\",\"t\":[\"/** * Scanner扫描器 */ public class TestIO09 { public static void main(String[] args) throws IOException { //简单的额IO输入 // InputStream in = System.in; // int read = in.read(); // System.out.println(read); //使用Scanner扫描器 // Scanner scanner = new Scanner(System.in); // int i = scanner.nextInt(); // System.out.println(i); //使用扫描器输出流中的数据 Scanner scanner = new Scanner(new FileInputStream(new File(\\\"D:\\\" + File.separatorChar + \\\"Demo.txt\\\"))); while (scanner.hasNext()){ System.out.println(scanner.next()); } } } \",\"/** * 使用控制台向文件录入信息 */ public class TestIO10 { public static void main(String[] args) throws IOException { File file = new File(\\\"D:\\\" + File.separatorChar + \\\"SystemIn.txt\\\"); FileWriter fileWriter = new FileWriter(file);//字符流 BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);//增强流 InputStream inputStream = System.in;//字节流 InputStreamReader inputStreamReader = new InputStreamReader(inputStream,\\\"UTF-8\\\");//字符流 BufferedReader bufferedReader = new BufferedReader(inputStreamReader);//增强流 String str = bufferedReader.readLine(); while (!str.equals(\\\"exit\\\")){ bufferedWriter.write(str); bufferedWriter.newLine(); str = bufferedReader.readLine(); } bufferedReader.close(); bufferedWriter.close(); } } \"]},\"423\":{\"h\":\"字节对象流\"},\"424\":{\"h\":\"ObjectInputStream\"},\"425\":{\"h\":\"ObjectOutputStream\",\"t\":[\"package com.meturing.io; import java.io.*; /** * 对象流 * 写出的类型跟读入的类型 必须 要匹配！ */ public class TestIO11 { public static void main(String[] args) throws IOException { File file = new File(\\\"D:\\\" + File.separatorChar + \\\"DataDemo.txt\\\"); DataOutputStream dataOutputStream = new DataOutputStream(new FileOutputStream(file)); dataOutputStream.writeUTF(\\\"张三\\\"); dataOutputStream.writeInt(19); dataOutputStream.writeBoolean(false); dataOutputStream.close(); DataInputStream dataInputStream = new DataInputStream(new FileInputStream(file)); System.out.println(dataInputStream.readUTF()); System.out.println(dataInputStream.readInt()); System.out.println(dataInputStream.readBoolean()); dataInputStream.close(); } } \"]},\"426\":{\"h\":\"序列化\"},\"427\":{\"h\":\"说明\",\"t\":[\"实现Serializable 接口，可以省略serialVersionUID 的声明，如果不注明则程序自动在编译时创建。\",\"序列化类如果修改，则serialVersionUID 也会变动，导致无法反序列化。\"]},\"428\":{\"h\":\"案例\",\"t\":[\"package com.meturing.io.Objct; import java.io.Serializable; public class Student implements Serializable { private static final long serialVersionUID = 1L; private String name; private int Age; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return Age; } public int setAge(int age) { return Age = age; } public Student(String name, int age) { this.name = name; Age = age; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", Age='\\\" + Age + '\\\\'' + '}'; } } \",\"public class TestIO12 { public static void main(String[] args) throws IOException, ClassNotFoundException { new TestIO12().test01(); new TestIO12().test02(); } //反序列化 public void test02() throws IOException, ClassNotFoundException { ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(new File(\\\"D:\\\" + File.separatorChar + \\\"Objcet.txt\\\"))); Student student = (Student)objectInputStream.readObject(); System.out.println(student); } //将对象序列化 public void test01() throws IOException { ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(new File(\\\"D:\\\" + File.separatorChar + \\\"Objcet.txt\\\"))); objectOutputStream.writeObject(new Student(\\\"张三\\\",19)); objectOutputStream.close(); } } \"]},\"429\":{\"h\":\"String类\"},\"430\":{\"h\":\"特性\",\"t\":[\"包名：java.lang 特征：是对象、不可改变、不可继承、底层是一个char数组\"]},\"431\":{\"h\":\"常用方法\",\"t\":[\"public class test01 { public static void main(String[] args) { String s1 = new String(); String s2 = new String(\\\"abc\\\"); String s3 = new String(new char[]{'a','b','c'}); System.out.println(\\\"字符串长度：\\\"+s2.length()); System.out.println(\\\"字符串是否为空：\\\"+s1.isEmpty()); System.out.println(\\\"字符串下表对应字符：\\\"+s2.charAt(1)); System.out.println(\\\"字符串是否相同：\\\"+s2.equals(s3)); System.out.println(\\\"字符串地址是否相同：\\\"+ (s2== s3)); //String类实现了Comparable，里面有一个抽象方法叫compareTo，所以String中一定要对这个方法进行重写 //按位比较 // abc =》 accdef 返回 b与c之间的ASCII差值 -1 // abc =》 abcdef 返回 两者之间的长度差 -3 // abc =》 abc 返回 0 // abc =》 abf 返回 b与c之间的ASCII差值 -3 s2 = \\\"abc\\\"; s3 = \\\"abf\\\"; System.out.println(s2.compareTo(s3)); //字符串截取 String s10 = \\\"abcdefhijk\\\"; System.out.println(s10.substring(3)); System.out.println(s10.substring(3,6)); //字符串合并 System.out.println(s10.concat(\\\"lmn\\\")); //字符串替换 System.out.println(s10.replace('a','t')); //字符串分割 String str = \\\"a-b-c-d-e-f\\\"; String[] split = str.split(\\\"-\\\"); Arrays.stream(split).forEach(System.out::print); //大小写转换 System.out.println(s10.toUpperCase()); System.out.println(s10.toLowerCase()); //去除空格 String s14 = \\\" a b c \\\"; System.out.println(s14.trim()); //toString() String s15 = \\\"abc\\\"; System.out.println(s15.toString()); //转换为String类型： System.out.println(String.valueOf(false)); } } \"]},\"432\":{\"h\":\"内存分析\"},\"433\":{\"h\":\"原理\",\"t\":[\"我们创建的字符串，底层是Final修饰的，第一次创建我们会生成在字符串常量池中。 所有创建字符串都会在常量池中寻找一下，如果没有的话则在创建一个新的，并将对象指向常量池中的位置。\"]},\"434\":{\"h\":\"区别\",\"t\":[\"直接赋值：String a = \\\"123\\\"\",\"构造方法赋值：String a = new String(\\\"123\\\");\",\"字符串拼接：String a = \\\"123\\\";String b = a+\\\"456\\\";\"]},\"435\":{\"h\":\"创建线程的方式\"},\"436\":{\"h\":\"继承Thread类\"},\"437\":{\"h\":\"步骤\",\"t\":[\"① 继承Thread类 ② 重写run方法 ③ 执行start方法\"]},\"438\":{\"h\":\"一个简单的Demo\",\"t\":[\"/** * 简单的线程测试 */ public class TestDemo01 { public static void main(String[] args) throws InterruptedException { for (int i = 0; i < 10; i++) { Thread.sleep(200); System.out.println(\\\"main---\\\"+i); } ThreadObject threadObject = new ThreadObject(); threadObject.start(); for (int i = 10; i < 20; i++) { Thread.sleep(200); System.out.println(\\\"main---\\\"+i); } } } /** * ① 继承Thread类 ② 重写run方法 ③ 执行start方法 */ class ThreadObject extends Thread{ @Override public void run() { for (int i = 0; i < 10; i++) { try { Thread.sleep(200); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(i); } } } \",\"我们可以看到：在执行多线程之前，我们的程序还是单线程执行的，将红色代码块全部执行完毕，当执行到绿色代码块时，并不会等待执行完毕，而是和橙色代码块一起并发执行。\"]},\"439\":{\"h\":\"给线程设置名字\",\"t\":[\"Thread.currentThread().setName(\\\"主线程\\\"); //设置当前主线程的名字Thread.currentThread().getName() //获取当前主线程的名字线程对象.setName(\\\"子线程\\\")//设置当前子线程的名字线程对象.getName()//获取当前子线程的名字\"]},\"440\":{\"h\":\"通过对象属性设置\",\"t\":[\"package com.turing.createthread; public class TestDemo02 { public static void main(String[] args) throws InterruptedException { Thread.currentThread().setName(\\\"主线程\\\");//设置当前主线程的名字 ThreadObject01 threadObject01 = new ThreadObject01(); threadObject01.setName(\\\"子线程\\\");//设置当前子线程的名字 threadObject01.start(); for (int i = 0; i < 10; i++) { Thread.sleep(200); System.out.println(Thread.currentThread().getName()+\\\"----\\\"+i); } } } /** * ① 继承Thread类 ② 重写run方法 ③ 执行start方法 */ class ThreadObject01 extends Thread{ @Override public void run() { for (int i = 0; i < 10; i++) { try { Thread.sleep(200); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(this.getName()+\\\"----\\\"+i); } } } \"]},\"441\":{\"h\":\"通过构造函数设置\",\"t\":[\"public class TestDemo03 { public static void main(String[] args) throws InterruptedException { Thread.currentThread().setName(\\\"主线程\\\");//设置当前主线程的名字 ThreadObject02 threadObject02 = new ThreadObject02(\\\"子线程\\\");//设置当前子线程的名字 threadObject02.start(); for (int i = 0; i < 10; i++) { Thread.sleep(200); System.out.println(Thread.currentThread().getName()+\\\"----\\\"+i); } } } /** * ① 继承Thread类 ② 重写run方法 ③ 执行start方法 */ class ThreadObject02 extends Thread{ //重写构造方法 给线程设置名字 public ThreadObject02(String name) { super(name); } @Override public void run() { for (int i = 0; i < 10; i++) { try { Thread.sleep(200); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(this.getName()+\\\"----\\\"+i); } } } \",\"我们可以看到：每个线程都获取到我们设置的名字\"]},\"442\":{\"h\":\"模拟卖票\",\"t\":[\"我们模拟火车站卖票的操作，一共3个窗口，每个窗口50人，大家一起抢剩余的10张票\",\"代码\",\"public class TestDemo04 { public static void main(String[] args) { TrainStation thread01 = new TrainStation(\\\"窗口1\\\"); thread01.start(); TrainStation thread02 = new TrainStation(\\\"窗口2\\\"); thread02.start(); TrainStation thread03 = new TrainStation(\\\"窗口3\\\"); thread03.start(); } } class TrainStation extends Thread{ private static int ticket = 10; //初始化10张票 //设置线程的名字 public TrainStation(String name) { super(name); } //执行的方法 @Override public void run() { //每个线程后面有50个人去抢票 for (int i = 0; i < 50; i++) { if (ticket>0){ System.out.println(this.getName()+\\\"-- 卖出了一张票，还剩\\\"+(--ticket)); } } } } \",\"我们可以看到：效果实现，没有出现票卖超的情况\"]},\"443\":{\"h\":\"实现Runnable接口\"},\"444\":{\"h\":\"步骤\",\"t\":[\"① 实现Runnable接口 ② 重写run方法 ③ 创建线程任务对象 ④ 创建Thread对象，使用构造方法传入线程任务对象以及线程名字 ⑤ Thread对象.strat()执行线程\"]},\"445\":{\"h\":\"一个简单的Demo\",\"t\":[\"public class TestDemo05 { public static void main(String[] args) { runnableDemo runnableDemo = new runnableDemo();//创建对象 Thread thread = new Thread(runnableDemo,\\\"线程1\\\");//使用对象创建线程对象，并为线程创建名字 thread.start(); } } class runnableDemo implements Runnable{ @Override public void run() { for (int i = 0; i < 10; i++) { try { Thread.sleep(200); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(Thread.currentThread().getName()+\\\"----\\\"+i); } } } \"]},\"446\":{\"h\":\"模拟卖票\",\"t\":[\"public class TestDemo06 { public static void main(String[] args) { TrainStation02 trainStation01 = new TrainStation02(); Thread thread1 = new Thread(trainStation01,\\\"窗口1\\\"); thread1.start(); Thread thread2 = new Thread(trainStation02,\\\"窗口2\\\"); thread2.start(); Thread thread3 = new Thread(trainStation03,\\\"窗口3\\\"); thread3.start(); } } class TrainStation02 implements Runnable{ private static int ticket = 10; //初始化10张票 @Override public void run() { for (int i = 0; i < 50; i++) { if (ticket>0){ System.out.println(Thread.currentThread().getName()+\\\"---- 卖出去一张票，还剩\\\"+(--ticket)+\\\"张票\\\"); } } } } \",\"效果\"]},\"447\":{\"h\":\"实现Callable接口\",\"t\":[\"我们查看前面的集中线程的创建方法，我们发现都是重写了run方法，这个方法是没有返回值的。在JDK1.5后，我们可以实现Callable接口来获取线程的返回值\"]},\"448\":{\"h\":\"优点\",\"t\":[\"（1）有返回值 （2）能抛出异常\"]},\"449\":{\"h\":\"步骤\",\"t\":[\"① 实现Callable接口（可以指定返回值类型，不指定返回Object） ② 重写call方法 ③ 创建线程任务对象 ④ 创建FutureTask对象，传入线程任务对象 ⑤ 创建Thread线程对象，传入FutureTask对象，线程名字 ⑥ 线程对象.start() 执行线程 ⑦ FutureTask对象.get() 获取返回值\"]},\"450\":{\"h\":\"一个简单的Demo\",\"t\":[\"public class TestDemo07 { public static void main(String[] args) throws ExecutionException, InterruptedException { CallAbleDemo callAbleDemo = new CallAbleDemo(); //创建线程任务对象 FutureTask futureTask = new FutureTask(callAbleDemo);//创建FutureTask对象，传入线程任务对象 Thread thread = new Thread(futureTask, \\\"线程一\\\");//创建Thread线程对象，传入FutureTask对象 thread.start();//运行线程 int random = (int)futureTask.get();//通过FutureTask对象.get() 获取返回值 System.out.println(random); } } class CallAbleDemo implements Callable<Integer>{ @Override public Integer call() throws Exception { return new Random().nextInt(10);//返回10以内的随机数 } } \"]},\"451\":{\"h\":\"初识多线程\"},\"452\":{\"h\":\"程序、进程、线程\",\"t\":[\"➢程序(program)：是为完成特定任务、用某种语言编写的一组指令的集合,是一段静态的代码。 （程序是静态的）\",\"➢进程(process)：是程序的一次执行过程。正在运行的一个程序，进程作为资源分配的单位，在内存中会为每个进程分配不同的内存区域。 （进程是动态的）是一个动的过程 ，进程的生命周期 : 有它自身的产生、存在和消亡的过程 \",\"➢线程(thread): 进程可进一步细化为线程， 是一个程序内部的一条执行路径。若一个进程同一时间并行执行多个线程，就是支持多线程的。\",\"注意：单核CPU在执行任务时，是按照时间片来执行的，他是不停的来切换时间片，执行不同的线程。由于时间片比较短，所以我们感受到的是多个任务同时执行，实际上这是一种假象，是并行。多核CPU 较于单核CPU来讲，是同时有多个内核，每个内核有自己的时间片，从宏观上来讲是并发的多个任务，与内核的数量有关。但每个内核中还是单线程的。是并发\",\"拓展： 我们常听说4核8线程类似的CPU描述语句，这里的核表示的是内核，这里的线程表示的是逻辑单元，是指使用超线程技术，使原本只支持一个线程的内核，虚拟化出一个内核，物理内核和虚拟内核同时各自执行一个线程，做到单核双线程的目的。\"]},\"453\":{\"h\":\"Java上的多线程\",\"t\":[\"在正常的Java代码中，我们编写的代码都是执行在主线程上。但是从JVM的层面来看，我们的程序是多线程的，除了主线程、我们还有异常信息捕捉线程和垃圾回收线程。\",\"我们创建的多线程是指，在主线程的基础上，再开辟其他的线程\"]},\"454\":{\"h\":\"线程的生命周期\"},\"455\":{\"h\":\"线程常见方法\"},\"456\":{\"h\":\"API\",\"t\":[\"start() : 启动当前线程，表面上调用start方法，实际在调用线程里面的run方法\",\"run() : 线程类 继承 Thread类 或者 实现Runnable接口的时候，都要重新实现这个run方法，run方法里面是线程要执行的内容\",\"currentThread() : Thread类中一个静态方法：获取当前正在执行的线程\",\"setName(String) ：设置线程名字\",\"getName()： 读取线程名字\"]},\"457\":{\"h\":\"优先级\",\"t\":[\"同优先级别的线程，采取的策略就是先到先服务，使用时间片策略。线程的优先级默认是5，设置范围为1-10，数字越大优先级越大。高优先级的线程，被CPU调度的概率就高。\",\"public class TestDemo08 { public static void main(String[] args) { TestThread01 testThread01 = new TestThread01(); testThread01.setPriority(1);//设置优先级低 testThread01.start(); TestThread02 testThread02 = new TestThread02(); testThread01.setPriority(10);//设置优先级高 testThread02.start(); } } class TestThread01 extends Thread{ @Override public void run() { for (int i = 0; i < 30; i++) { try { sleep(200); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(this.getName()+\\\"----\\\"+i); } } } class TestThread02 extends Thread{ @Override public void run() { for (int i = 0; i < 30; i++) { try { sleep(200); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(this.getName()+\\\"----\\\"+i); } } } \"]},\"458\":{\"h\":\"Join\",\"t\":[\"当一个线程调用了join方法，这个线程就会先被执行，它执行结束以后才可以去执行其余的线程。\",\"必须先start，再join才有效。\",\"/** * Join */ public class TestDemo09 { public static void main(String[] args) throws InterruptedException { for (int i = 0; i < 20; i++) { System.out.println(\\\"main======\\\"+i); if (i==6){ ThreadDemo09 threadDemo09 = new ThreadDemo09(\\\"线程：\\\" + i); threadDemo09.start();//启动线程 threadDemo09.join();//加入线程 } } } } class ThreadDemo09 extends Thread{ public ThreadDemo09(String name) { super(name); } @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(this.getName()+\\\"---- 执行任务\\\"+i); } } } \"]},\"459\":{\"h\":\"Sleep\",\"t\":[\"人为的制造阻塞事件\",\"public class TestDemo10 { public static void main(String[] args) throws InterruptedException { SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\\\"HH:mm:ss\\\"); while (true){ Thread.sleep(1000); System.out.println(simpleDateFormat.format(new Date())); } } } \"]},\"460\":{\"h\":\"setDaemon\",\"t\":[\"将子线程设置为主线程的伴随线程，主线程停止的时候，子线程也不要继续执行了\",\"/** * setDaemon */ public class TestDemo11 { public static void main(String[] args) throws InterruptedException { ThreadDemo11 threadDemo11 = new ThreadDemo11(); threadDemo11.setDaemon(true);//设置伴随线程 注意：先设置，再启动 threadDemo11.start(); for (int i = 0; i < 20; i++) { Thread.sleep(100); System.out.println(\\\"主线程===\\\"+i); } } } class ThreadDemo11 extends Thread{ @Override public void run() { for (int i = 0; i < 20; i++) { try { sleep(200); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(\\\"子线程===\\\"+i); } } } \"]},\"461\":{\"h\":\"stop\",\"t\":[\"停止当前线程，过期方法，不建议使用\",\"/** * stop */ public class TestDemo12 { public static void main(String[] args) throws InterruptedException { for (int i = 0; i < 100; i++) { System.out.println(\\\"main === \\\"+i); if (i==6) Thread.currentThread().stop(); //停止线程 过期方法不建议使用 } } } \"]},\"462\":{\"h\":\"线程安全\",\"t\":[\"由于多线程的特性，由于多个线程互相抢占资源，可能会出现资源不可控的现象：\",\"比如：抢票软件出现了 重票，错票。主要就是：多个线程，在争抢资源的过程中，导致共享的资源出现问题。一个线程还没执行完，另一个线程就参与进来了，开始争抢。\",\"为此，我们需要对线程进行同步操作，也就是加锁。\"]},\"463\":{\"h\":\"同步代码块\"},\"464\":{\"h\":\"语法\",\"t\":[\"synchronized (同步监视器){}\"]},\"465\":{\"h\":\"代码\",\"t\":[\"public class BuyTicketThread implements Runnable { int ticketNum = 10; @Override public void run() { //此处有1000行代码 for (int i = 1; i <= 100 ; i++) { synchronized (this){//把具有安全隐患的代码锁住即可，如果锁多了就会效率低 --》this就是这个锁 if(ticketNum > 0){ System.out.println(\\\"我在\\\"+Thread.currentThread().getName()+\\\"买到了北京到哈尔滨的第\\\" + ticketNum-- + \\\"张车票\\\"); } } } //此处有1000行代码 } } \"]},\"466\":{\"h\":\"关于同步监视器\",\"t\":[\"必须是引用数据类型，不能是基本数据类型\",\"也可以创建一个专门的同步监视器，没有任何业务含义\",\"一般使用共享资源做同步监视器即可\",\"在同步代码块中不能改变同步监视器对象的引用\",\"尽量不要String和包装类Integer做同步监视器\",\"建议使用final修饰同步监视器\",\"也可以利用反射的原理，使用 类名.class 字节码作为同步监视器\"]},\"467\":{\"h\":\"执行过程\",\"t\":[\"第一个线程来到同步代码块，发现同步监视器open状态，需要close,然后执行其中的代码\",\"第一个线程执行过程中，发生了线程切换（阻塞 就绪），第一个线程失去了cpu，但是没有开锁open\",\"第二个线程获取了cpu，来到了同步代码块，发现同步监视器close状态，无法执行其中的代码，第二个线程也进入阻塞状态\",\"第一个线程再次获取CPU,接着执行后续的代码；同步代码块执行完毕，释放锁open\",\"第二个线程也再次获取cpu，来到了同步代码块，发现同步监视器open状态，拿到锁并且上锁，由阻塞状态进入就绪状态，再进入运行状态，重复第一个线程的处理过程（加锁）\",\"建议使用final修饰同步监视器\"]},\"468\":{\"h\":\"注意\",\"t\":[\"同步代码块中能发生CPU的切换吗？能！！！ 但是后续的被执行的线程也无法执行同步代码块（因为锁仍旧close）\",\"多个代码块使用了同一个同步监视器（锁），锁住一个代码块的同时，也锁住所有使用该锁的所有代码块，其他线程无法访问其中的任何一个代码块\",\"多个代码块使用了同一个同步监视器（锁），锁住一个代码块的同时，也锁住所有使用该锁的所有代码块， 但是没有锁住使用其他同步监视器的代码块，其他线程有机会访问其他同步监视器的代码块\"]},\"469\":{\"h\":\"同步方法\"},\"470\":{\"h\":\"语法\",\"t\":[\"public static`` ``synchronized`` ``void buyTicket(){}\"]},\"471\":{\"h\":\"代码\",\"t\":[\"public class BuyTicketThread extends Thread { public BuyTicketThread(String name){ super(name); } //一共10张票： static int ticketNum = 10;//多个对象共享10张票 //每个窗口都是一个线程对象：每个对象执行的代码放入run方法中 @Override public void run() { //每个窗口后面有100个人在抢票： for (int i = 1; i <= 100 ; i++) { buyTicket(); } } public static synchronized void buyTicket(){//锁住的 同步监视器： BuyTicketThread.class if(ticketNum > 0){//对票数进行判断，票数大于零我们才抢票 System.out.println(\\\"我在\\\"+Thread.currentThread().getName()+\\\"买到了从北京到哈尔滨的第\\\" + ticketNum-- + \\\"张车票\\\"); } } } \"]},\"472\":{\"h\":\"注意\",\"t\":[\"不要将run()定义为同步方法\",\"非静态同步方法的同步监视器是this，静态同步方法的同步监视器是 类名.class 字节码信息对象\",\"同步代码块的效率要高于同步方法，因为：同步方法是将线程挡在了方法的外部，而同步代码块锁将线程挡在了代码块的外部，但是却是方法的内部\",\"同步方法的锁是this，一旦锁住一个方法，就锁住了所有的同步方法；同步代码块只是锁住使用该同步监视器的代码块，而没有锁住使用其他监视器的代码块\"]},\"473\":{\"h\":\"Lock锁\",\"t\":[\"JDK1.5后新增新一代的线程同步方式 : Lock锁，与采用synchronized相比，lock可提供多种锁方案，更灵活\",\"synchronized是Java中的关键字，这个关键字的识别是靠JVM来识别完成的，是虚拟机级别的。但是Lock锁是API级别的，提供了相应的接口和对应的实现类，这个方式更灵活，表现出来的性能优于之前的方式\"]},\"474\":{\"h\":\"相关概念\"},\"475\":{\"h\":\"Condition等待池\",\"t\":[\"Condition是在Java 1.5中才出现的，它用来替代传统的Object的wait()、notify() 实现线程间的协作，相比使用Object的wait()、notify()，使用Condition的await()、signal()这种方式实现线程间协作更加安全和高效。\",\"它能够更加精细的控制多线程的休眠与唤醒。对于同一个锁，我们可以创建多个Condition，在不同的情况下使用不同的Condition\",\"一个Condition包含一个等待队列。一个Lock可以产生多个Condition，所以可以有多个等待队列。\",\"在Object的监视器模型上，一个对象拥有一个同步队列和等待队列，而Lock（同步器）拥有一个同步队列和多个等待队列。​\",\"Object中的wait(),notify(),notifyAll()方法是和\\\"同步锁\\\"(synchronized关键字)捆绑使用的；而Condition是需要与\\\"互斥锁\\\" / \\\"共享锁\\\" 捆绑使用的。\",\"调用Condition的await()、signal()、signalAll()方法，都必须在lock保护之内，就是说必须在lock.lock()和lock.unlock之间才可以使用\",\"Conditon中的await()对应Object的wait()；\",\"Condition中的signal()对应Object的notify()；\",\"Condition中的signalAll()对应Object的notifyAll()。\",\"注意 :await()的线程在接到信号或被中断之前一直处于等待状态： 与此 Condition 相关的锁以原子方式释放，并且出于线程调度的目的，将禁用当前线程，且在发生以下四种情况之一 以前，当前线程将一直处于休眠状态：\",\"其他某个线程调用此 Condition 的 signal() 方法，并且碰巧将当前线程选为被唤醒的线程；\",\"其他某个线程调用此 Condition 的 signalAll() 方法；\",\"其他某个线程中断当前线程，且支持中断线程的挂起；\",\"发生“虚假唤醒”\"]},\"476\":{\"h\":\"语法\",\"t\":[\"Lock lock = new ReentrantLock();\"]},\"477\":{\"h\":\"API\"},\"478\":{\"h\":\"Lock锁的API\",\"t\":[\"API\",\"说明\",\"ReentrantLock()\",\"构造方法，默认不开启公平策略\",\"ReentrantLock(boolean fair)\",\"构造方法，是否开启公平策略，true 开始 false 不开启\",\"void lock()\",\"获得锁\",\"void unlock()\",\"释放此锁\",\"Condition newCondition()\",\"创建等待池\",\"final int getQueueLength()\",\"返回等待获取此锁的线程数的估计值\",\"boolean hasWaiters(Condition condition)\",\"查询是否有线程正在等待与此锁\",\"int getWaitQueueLength(Condition condition)\",\"返回在与此锁相关的给定条件上等待的线程数的估计值\"]},\"479\":{\"h\":\"Condition 等待池的API\",\"t\":[\"API\",\"说明\",\"void await()\",\"当前线程放入等待池，直到收到信号或被中断\",\"boolean await(long time, TimeUnit unit)\",\"导致当前线程等待，直到发出信号或中断，或指定的等待时间结束。 Time→等待的最大时间单位 unit → 参数的时间单位\",\"boolean awaitUntil(Date deadline)\",\"导致当前线程等待，直到收到信号或中断，或超过指定的截止日期。 deadline → 等待的绝对时间\",\"void signal()\",\"唤醒一个等待的线程\",\"void signalAll()\",\"唤醒所有等待的线程\"]},\"480\":{\"h\":\"代码\",\"t\":[\"public class BuyTicketThread implements Runnable { int ticketNum = 10; //拿来一把锁： Lock lock = new ReentrantLock();//多态 接口=实现类 可以使用不同的实现类 @Override public void run() { //此处有1000行代码 for (int i = 1; i <= 100 ; i++) { //打开锁： lock.lock(); try{ if(ticketNum > 0){ System.out.println(\\\"我在\\\"+Thread.currentThread().getName()+\\\"买到了北京到哈尔滨的第\\\" + ticketNum-- + \\\"张车票\\\"); } }catch (Exception ex){ ex.printStackTrace(); }finally { //关闭锁：--->即使有异常，这个锁也可以得到释放 lock.unlock(); } } //此处有1000行代码 } } \"]},\"481\":{\"h\":\"Lock和synchronized的区别\",\"t\":[\"Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁\",\"Lock只有代码块锁，synchronized有代码块锁和方法锁\",\"使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）\"]},\"482\":{\"h\":\"线程同步的优缺点\",\"t\":[\"优先使用：Lock----同步代码块（已经进入了方法体，分配了相应资源）----同步方法（在方法体之外）\"]},\"483\":{\"h\":\"优点\",\"t\":[\"线程安全，效率低\"]},\"484\":{\"h\":\"缺点\",\"t\":[\"线程不安全，效率高\",\"可能造成死锁 \",\"不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁\",\"出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续\",\"避免死锁：\\n减少同步资源的定义，避免嵌套同步\"]},\"485\":{\"h\":\"线程通信\"},\"486\":{\"h\":\"需求\",\"t\":[\"我们来模拟开发者常见的生产者和消费者模式，我们需要生产者创建指定类的对象，消费者访问这个类的对象。两者有序交替执行，\"]},\"487\":{\"h\":\"注意点\",\"t\":[\"生产者和消费者之间需要保证线程的同步，我们需要采用同步锁的方式\",\"注意同步监视器的设置，我们可以将同步监视器设置为共同的对象资源\"]},\"488\":{\"h\":\"案例\"},\"489\":{\"h\":\"使用synchronized的解决方案\",\"t\":[\"注意点： 我们不可以在线程里面使用同步代码块，因为生产者和消费者是两个独立的线程，在使用线程阻塞的时候，我们拿到的锁也是独自的个体。所以我们需要在产品类中使用锁以及监视器\",\"synchronized使用的是一个等待池，这样只能对于一个生产者和一个消费者使用时可以正常，如果多个生产者和多个消费者时，还是会出现锁资源争抢的情况。\",\"产品类\",\"/** * 商品类 */ public class Product { //品牌 private String brand; //名字 private String name; //状态 true 生产 false 消费 private boolean locked = true; public Product() {} public Product(String brand, String name) { this.brand = brand; this.name = name; } public String getBrand() { return brand; } public void setBrand(String brand) { this.brand = brand; } public String getName() { return name; } public void setName(String name) { this.name = name; } public boolean isLocked() { return locked; } public void setLocked(boolean locked) { this.locked = locked; } /** * 生产 */ public synchronized void setProduct(String brand,String name){ if (!this.isLocked()){ try { wait(); } catch (InterruptedException e) { throw new RuntimeException(e); } } this.brand = brand; this.name = name; System.out.println(\\\"生产者：生产了\\\"+this.brand+\\\"===\\\"+this.name); this.setLocked(false); notify(); } /** * 消费 */ public synchronized void getProduct(){ if (this.isLocked()){ try { wait(); } catch (InterruptedException e) { throw new RuntimeException(e); } } System.out.println(\\\"消费者：消费了\\\"+this.brand+\\\"===\\\"+this.name); this.setLocked(true); notify(); } } \",\"生产者\",\"/** * 生产者 */ public class ProducerThread extends Thread { private Product product; public ProducerThread(Product product) { this.product = product; } @Override public void run() { for (int i = 1; i <= 10; i++) { if (i%2==0){ product.setProduct(\\\"费列罗\\\",\\\"巧克力\\\"); }else { product.setProduct(\\\"哈尔滨\\\",\\\"菠萝啤\\\"); } } } } \",\"消费者\",\"/** * 消费者 */ public class CustomerThread extends Thread{ private Product product; public CustomerThread(Product product) { this.product = product; } @Override public void run() { for (int i = 1; i <= 10; i++) { product.getProduct(); } } } \",\"主线程\",\"public class TestDemo13 { public static void main(String[] args) { Product product = new Product(); ProducerThread producerThread = new ProducerThread(product); CustomerThread customerThread = new CustomerThread(product); producerThread.start(); customerThread.start(); } } \"]},\"490\":{\"h\":\"使用Lock的解决方案\",\"t\":[\"对于多个消费者和多个生产者的情况，单一的等待池就不够用了。我们需要使用Lock锁去对应的构建独自的等待池：\",\"产品类\",\"/** * 商品类 */ public class Product { //品牌 private String brand; //名字 private String name; //状态 true 生产 false 消费 private boolean locked = true; //使用Lock锁 Lock lock = new ReentrantLock(); //消费者等待池 Condition produceCondition = lock.newCondition(); Condition customerCondition = lock.newCondition(); public Product() {} public Product(String brand, String name) { this.brand = brand; this.name = name; } public String getBrand() { return brand; } public void setBrand(String brand) { this.brand = brand; } public String getName() { return name; } public void setName(String name) { this.name = name; } public boolean isLocked() { return locked; } public void setLocked(boolean locked) { this.locked = locked; } /** * 生产 */ public void setProduct(String brand,String name){ lock.lock(); try { if (!this.isLocked()){ try { //wait(); produceCondition.await(); } catch (InterruptedException e) { throw new RuntimeException(e); } } this.brand = brand; this.name = name; System.out.println(\\\"生产者：生产了\\\"+this.brand+\\\"===\\\"+this.name); this.setLocked(false); //notify(); customerCondition.signal(); } finally { lock.unlock(); } } /** * 消费 */ public synchronized void getProduct(){ lock.lock(); try { if (this.isLocked()){ try { //wait(); customerCondition.await(); } catch (InterruptedException e) { throw new RuntimeException(e); } } System.out.println(\\\"消费者：消费了\\\"+this.brand+\\\"===\\\"+this.name); this.setLocked(true); //notify(); produceCondition.signal(); } finally { lock.unlock(); } } } \",\"生产者\",\"/** * 生产者 */ public class ProducerThread extends Thread { private Product product; public ProducerThread(Product product) { this.product = product; } @Override public void run() { for (int i = 1; i <= 10; i++) { if (i%2==0){ product.setProduct(\\\"费列罗\\\",\\\"巧克力\\\"); }else { product.setProduct(\\\"哈尔滨\\\",\\\"菠萝啤\\\"); } } } } \",\"消费者\",\"/** * 消费者 */ public class CustomerThread extends Thread{ private Product product; public CustomerThread(Product product) { this.product = product; } @Override public void run() { for (int i = 1; i <= 10; i++) { product.getProduct(); } } } \",\"主线程\",\"public class TestDemo13 { public static void main(String[] args) { Product product = new Product(); ProducerThread producerThread = new ProducerThread(product); CustomerThread customerThread = new CustomerThread(product); producerThread.start(); customerThread.start(); } } \"]},\"491\":{\"h\":\"初识网络编程\"},\"492\":{\"h\":\"基本概念\",\"t\":[\"把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。设备之间在网络中进行数据的传输，发送/接收数据。\",\"两台或两台以上的计算机即可构成网络，网络通讯最重要的要素是 IP 和 PORT，通过IP定位计算机，通过PORT定位使用的软件程序。\"]},\"493\":{\"h\":\"IP\",\"t\":[\"A类IP地址：第一个字节在0 - 127之间（1.0.0.1 ~ 126.155.255.254）（其中127.0.0.1 为保留地址，一般用于环回地址）\",\"B类IP地址：第一个字节在128 - 192之间（128.0.0.1 ~ 191.255.255.254）\",\"C类IP地址：第一个字节在192 - 223之间（192.0.0.1 ~ 223.255.255.254）\",\"D类IP地址：第一个字节在224 - 239之间（224.0.0.1 ~ 239.255.255.254）\",\"E类IP地址：第一个字节在240 - 255之间（240.0.0.1 ~ 255.255.255.254）\"]},\"494\":{\"h\":\"PORT\",\"t\":[\"0 到 65535\"]},\"495\":{\"h\":\"通讯协议\",\"t\":[\"消息发送： 应用层 → 传输层 → 网络层 → 物理，数据链路层\",\"消息接收：物理，数据链路层 → 网络层 → 传输层 → 应用层\"]},\"496\":{\"h\":\"TCP\",\"t\":[\"安全可靠的，使用三次握手，四次挥手的方式\"]},\"497\":{\"h\":\"建立连接：三次握手\",\"t\":[\"客户端请求链接 / 服务器响应客户端的请求 / 客户端回应服务器收到响应\"]},\"498\":{\"h\":\"断开链接：四次挥手\",\"t\":[\"客户端请求断开 / 服务器响应客户端断开请求 / 服务器断开链接 / 客户端检验是否断开\"]},\"499\":{\"h\":\"UDP\",\"t\":[\"不太安全可靠，数据发送使用数据包，容易产生丢包的现象。\"]},\"500\":{\"h\":\"地址API\"},\"501\":{\"h\":\"InetAddress\"},\"502\":{\"h\":\"API\",\"t\":[\"API\",\"说明\",\"InetAddress.getByName(String str)\",\"获取指定地址的IP地址,如：localhost → 获取本地地址 127.0.0.1 → 获取本地地址 LAPTOP → 获取计算机名地址 baidu.com → 获取域名地址\",\"InetAddress对象.getHostName()\",\"获取域名\",\"InetAddress对象.getHostAddress()\",\"获取ip地址\"]},\"503\":{\"h\":\"代码\",\"t\":[\"public class Test01 { //这是一个main方法，是程序的入口： public static void main(String[] args) throws UnknownHostException, UnknownHostException { //封装IP： //InetAddress ia = new InetAddress();不能直接创建对象，因为InetAddress()被default修饰了。 InetAddress ia = InetAddress.getByName(\\\"192.168.199.217\\\"); System.out.println(ia); InetAddress ia2 = InetAddress.getByName(\\\"localhost\\\");//localhost指代的是本机的ip地址 System.out.println(ia2); InetAddress ia3 = InetAddress.getByName(\\\"127.0.0.1\\\");//127.0.0.1指代的是本机的ip地址 System.out.println(ia3); InetAddress ia4 = InetAddress.getByName(\\\"LAPTOP-CRIVSRRU\\\");//封装计算机名 System.out.println(ia4); InetAddress ia5 = InetAddress.getByName(\\\"www.baidu.com\\\");//封装域名 System.out.println(ia5); System.out.println(ia5.getHostName());//获取域名 System.out.println(ia5.getHostAddress());//获取ip地址 } } \"]},\"504\":{\"h\":\"InetSocketAddress\"},\"505\":{\"h\":\"API\",\"t\":[\"API\",\"说明\",\"InetSocketAddress isa = new InetSocketAddress(\\\"192.168.199.217\\\",8080);\",\"初始化InetSocketAddress对象：参数1→地址 参数2 → 端口号\",\"isa.getHostName()\",\"获取地址名\",\"isa.getPort()\",\"获取端口号\",\"isa.getAddress()\",\"获取InetAddress对象\"]},\"506\":{\"h\":\"代码\",\"t\":[\"public class Test02 { //这是一个main方法，是程序的入口： public static void main(String[] args) { InetSocketAddress isa = new InetSocketAddress(\\\"localhost\\\",8080); System.out.println(isa);// localhost/127.0.0.1:8080 System.out.println(isa.getHostName());//localhost System.out.println(isa.getPort());//8080 InetAddress ia = isa.getAddress();//转为InetAddress System.out.println(ia.getHostName());//localhost System.out.println(ia.getHostAddress());//127.0.0.1 } } \"]},\"507\":{\"h\":\"模拟通讯\"},\"508\":{\"h\":\"TCP 通讯\"},\"509\":{\"h\":\"单向通讯\",\"t\":[\"使用DataOutputStream高级流处理\",\"客户端\",\"获取Socket对象 → 获取字节输出流 → 嵌套高级流 → 使用流写入\",\"public class TestClient { public static void main(String[] args) throws IOException { Socket socket = new Socket(\\\"127.0.0.1\\\", 8888);//打开指定IP与接口的通信 OutputStream outputStream = socket.getOutputStream();//获取输出流 DataOutputStream dataOutputStream = new DataOutputStream(outputStream);//获取数据输出流 dataOutputStream.writeUTF(\\\"你好！\\\");//输出对象 dataOutputStream.close();//关闭流 outputStream.close(); socket.close(); } } \",\"服务器\",\"获取ServerSocket对象 → ServerSocket对象.accept() 阻塞，等待响应，获取Socket 对象 → 获取字节输入流 → 嵌套高级流 → 读取流中的数据\",\"public class TestServer { public static void main(String[] args) throws IOException { ServerSocket serverSocket = new ServerSocket(8888);//监听指定接口 Socket accept = serverSocket.accept();//阻塞线程 直到获取到数据 InputStream inputStream = accept.getInputStream();//获取输入流 DataInputStream dataInputStream = new DataInputStream(inputStream);//获取数据输入流 String s = dataInputStream.readUTF();//读取指定类型数据 System.out.println(s); dataInputStream.close();//关闭流 inputStream.close(); accept.close(); serverSocket.close(); } } \"]},\"510\":{\"h\":\"双向通讯\",\"t\":[\"使用DataOutputStream高级流处理\",\"客户端\",\"在单项流的基础上加入 读取\",\"public class TestClient { public static void main(String[] args) throws IOException { Socket socket = new Socket(\\\"127.0.0.1\\\", 8888);//打开指定IP与接口的通信 OutputStream outputStream = socket.getOutputStream();//获取输出流 DataOutputStream dataOutputStream = new DataOutputStream(outputStream);//获取数据输出流 dataOutputStream.writeUTF(\\\"客户端：你好！\\\");//输出对象 InputStream inputStream = socket.getInputStream(); DataInputStream dataInputStream = new DataInputStream(inputStream); String s = dataInputStream.readUTF(); System.out.println(s); dataInputStream.close(); inputStream.close(); dataOutputStream.close();//关闭流 outputStream.close(); socket.close(); } } \",\"服务器\",\"在单项流的基础上加入 输出\",\"public class TestServer { public static void main(String[] args) throws IOException { ServerSocket serverSocket = new ServerSocket(8888);//监听指定接口 Socket accept = serverSocket.accept();//阻塞线程 直到获取到数据 InputStream inputStream = accept.getInputStream();//获取输入流 DataInputStream dataInputStream = new DataInputStream(inputStream);//获取数据输入流 String s = dataInputStream.readUTF();//读取指定类型数据 System.out.println(s); //向客户端发送信息 OutputStream outputStream = accept.getOutputStream(); DataOutputStream dataOutputStream = new DataOutputStream(outputStream); dataOutputStream.writeUTF(\\\"服务器：我收到了你的消息\\\"); dataOutputStream.close(); outputStream.close(); dataInputStream.close();//关闭流 inputStream.close(); accept.close(); serverSocket.close(); } } \"]},\"511\":{\"h\":\"对象传输通讯\",\"t\":[\"使用ObjectOutputStream 高级流处理\",\"对象类 : 记得要序列化\",\"package com.meturing.TCP.Demo03; import java.io.Serializable; public class UserInfo implements Serializable { private static final long serialVersionUID = 9050691344308365540L; private String name; private String pwd; public UserInfo(String name, String pwd) { this.name = name; this.pwd = pwd; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getPwd() { return pwd; } public void setPwd(String pwd) { this.pwd = pwd; } @Override public String toString() { return \\\"UserInfo{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", pwd='\\\" + pwd + '\\\\'' + '}'; } } \",\"客户端\",\"public class TestClient { public static void main(String[] args) throws IOException { Socket socket = new Socket(\\\"127.0.0.1\\\", 8888);//打开指定IP与接口的通信 OutputStream outputStream = socket.getOutputStream();//获取输出流 //获取对象输出流 ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream); Scanner scanner = new Scanner(System.in); System.out.print(\\\"请输入用户名：\\\"); String userName = scanner.next(); System.out.print(\\\"请输入密码：\\\"); String userPwd = scanner.next(); objectOutputStream.writeObject(new UserInfo(userName,userPwd));//输出对象 //获取服务器返回状态 InputStream inputStream = socket.getInputStream(); DataInputStream dataInputStream = new DataInputStream(inputStream); boolean flag = dataInputStream.readBoolean(); if (flag){ System.out.println(\\\"登录成功~！\\\"); }else { System.out.println(\\\"登录失败~！\\\"); } //关闭流 dataInputStream.close(); inputStream.close(); objectOutputStream.close(); outputStream.close(); socket.close(); } } \",\"服务器\",\"public class TestServer { public static void main(String[] args) throws IOException, ClassNotFoundException { ServerSocket serverSocket = new ServerSocket(8888);//监听指定接口 Socket accept = serverSocket.accept();//阻塞线程 直到获取到数据 InputStream inputStream = accept.getInputStream();//获取输入流 //获取数据输入流 ObjectInputStream objectInputStream = new ObjectInputStream(inputStream); UserInfo userInfo = (UserInfo)objectInputStream.readObject(); System.out.println(\\\"服务器收到：\\\"+userInfo.toString()); //判断是否正确 boolean flag = false; if (userInfo.getName().equals(\\\"张三\\\") && userInfo.getPwd().equals(\\\"123456\\\")){ flag = true; System.out.println(\\\"服务器验证成功！\\\"); }else { System.out.println(\\\"服务器验证失败！\\\"); } //返回状态 OutputStream outputStream = accept.getOutputStream(); DataOutputStream dataOutputStream = new DataOutputStream(outputStream); dataOutputStream.writeBoolean(flag); //关闭流 dataOutputStream.close(); outputStream.close(); objectInputStream.close(); inputStream.close(); accept.close(); serverSocket.close(); } } \"]},\"512\":{\"h\":\"异常处理\",\"t\":[\"对于关闭时，都需要写在finally 中，并且需要判空\",\"对象类 : 记得要序列化\",\"public class UserInfo implements Serializable { private static final long serialVersionUID = 9050691344308365540L; private String name; private String pwd; public UserInfo(String name, String pwd) { this.name = name; this.pwd = pwd; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getPwd() { return pwd; } public void setPwd(String pwd) { this.pwd = pwd; } @Override public String toString() { return \\\"UserInfo{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", pwd='\\\" + pwd + '\\\\'' + '}'; } } \",\"客户端\",\"public class TestClient { public static void main(String[] args) { Socket socket = null;//打开指定IP与接口的通信 OutputStream outputStream = null;//获取输出流 ObjectOutputStream objectOutputStream = null; InputStream inputStream = null; DataInputStream dataInputStream = null; try { socket = new Socket(\\\"127.0.0.1\\\", 8888); outputStream = socket.getOutputStream(); //获取对象输出流 objectOutputStream = new ObjectOutputStream(outputStream); Scanner scanner = new Scanner(System.in); System.out.print(\\\"请输入用户名：\\\"); String userName = scanner.next(); System.out.print(\\\"请输入密码：\\\"); String userPwd = scanner.next(); objectOutputStream.writeObject(new UserInfo(userName,userPwd));//输出对象 //获取服务器返回状态 inputStream = socket.getInputStream(); dataInputStream = new DataInputStream(inputStream); boolean flag = dataInputStream.readBoolean(); if (flag){ System.out.println(\\\"登录成功~！\\\"); }else { System.out.println(\\\"登录失败~！\\\"); } } catch (IOException e) { throw new RuntimeException(e); } finally { //关闭流 if (dataInputStream == null) { try { dataInputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (inputStream == null) { try { inputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (objectOutputStream == null) { try { objectOutputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (outputStream == null) { try { outputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (socket == null) { try { socket.close(); } catch (IOException e) { throw new RuntimeException(e); } } } } } \",\"服务器\",\"public class TestServer { public static void main(String[] args) { ServerSocket serverSocket = null;//监听指定接口 Socket accept = null;//阻塞线程 直到获取到数据 InputStream inputStream = null;//获取输入流 ObjectInputStream objectInputStream = null; OutputStream outputStream = null; DataOutputStream dataOutputStream = null; try { serverSocket = new ServerSocket(8888); accept = serverSocket.accept(); inputStream = accept.getInputStream(); //获取数据输入流 objectInputStream = new ObjectInputStream(inputStream); UserInfo userInfo = (UserInfo)objectInputStream.readObject(); System.out.println(\\\"服务器收到：\\\"+userInfo.toString()); //判断是否正确 boolean flag = false; if (userInfo.getName().equals(\\\"张三\\\") && userInfo.getPwd().equals(\\\"123456\\\")){ flag = true; System.out.println(\\\"服务器验证成功！\\\"); }else { System.out.println(\\\"服务器验证失败！\\\"); } //返回状态 outputStream = accept.getOutputStream(); dataOutputStream = new DataOutputStream(outputStream); dataOutputStream.writeBoolean(flag); } catch (IOException e) { throw new RuntimeException(e); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } finally { //关闭流 if (dataOutputStream == null) { try { dataOutputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (outputStream == null) { try { outputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (objectInputStream == null) { try { objectInputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (inputStream == null) { try { inputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (accept == null) { try { accept.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (serverSocket == null) { try { serverSocket.close(); } catch (IOException e) { throw new RuntimeException(e); } } } } } \"]},\"513\":{\"h\":\"多线程\",\"t\":[\"创建接收消息的线程类，通过构造获取Socket 对象\",\"对象类 : 记得要序列化\",\"public class UserInfo implements Serializable { private static final long serialVersionUID = 9050691344308365540L; private String name; private String pwd; public UserInfo(String name, String pwd) { this.name = name; this.pwd = pwd; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getPwd() { return pwd; } public void setPwd(String pwd) { this.pwd = pwd; } @Override public String toString() { return \\\"UserInfo{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", pwd='\\\" + pwd + '\\\\'' + '}'; } } \",\"客户端\",\"public class TestClient { public static void main(String[] args) { Socket socket = null;//打开指定IP与接口的通信 OutputStream outputStream = null;//获取输出流 ObjectOutputStream objectOutputStream = null; InputStream inputStream = null; DataInputStream dataInputStream = null; try { socket = new Socket(\\\"127.0.0.1\\\", 8888); outputStream = socket.getOutputStream(); //获取对象输出流 objectOutputStream = new ObjectOutputStream(outputStream); Scanner scanner = new Scanner(System.in); System.out.print(\\\"请输入用户名：\\\"); String userName = scanner.next(); System.out.print(\\\"请输入密码：\\\"); String userPwd = scanner.next(); objectOutputStream.writeObject(new UserInfo(userName,userPwd));//输出对象 //获取服务器返回状态 inputStream = socket.getInputStream(); dataInputStream = new DataInputStream(inputStream); boolean flag = dataInputStream.readBoolean(); if (flag){ System.out.println(\\\"⌈客户端消息⌋ 登录成功~！\\\"); }else { System.out.println(\\\"⌈客户端消息⌋ 登录失败~！\\\"); } } catch (IOException e) { throw new RuntimeException(e); } finally { //关闭流 if (dataInputStream != null) { try { dataInputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (inputStream != null) { try { inputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (objectOutputStream != null) { try { objectOutputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (outputStream != null) { try { outputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (socket != null) { try { socket.close(); } catch (IOException e) { throw new RuntimeException(e); } } } } } \",\"服务器\",\"public class TestServer { public static void main(String[] args) { ServerSocket serverSocket = null; Socket accept = null; try { serverSocket = new ServerSocket(8888); int count = 0; while (true){ accept = serverSocket.accept(); new ThreadServer(accept).start(); count++; System.out.println(\\\"⌈服务器消息⌋ 这是第\\\"+count+\\\"个登陆的用户，地址是：\\\"+accept.getInetAddress()); } } catch (IOException e) { throw new RuntimeException(e); }finally { if (serverSocket != null) { try { serverSocket.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (accept != null) { try { accept.close(); } catch (IOException e) { throw new RuntimeException(e); } } } } } \",\"服务器线程类\",\"public class ThreadServer extends Thread{ ServerSocket serverSocket = null; Socket accept = null; InputStream inputStream = null; ObjectInputStream objectInputStream = null; OutputStream outputStream = null; DataOutputStream dataOutputStream = null; public ThreadServer(Socket accept) { this.accept = accept; } @Override public void run() { try { if (accept==null)return; inputStream = accept.getInputStream(); objectInputStream = new ObjectInputStream(inputStream); UserInfo userInfo = (UserInfo) (objectInputStream.readObject()); boolean flage = false; if (userInfo.getName().equals(\\\"张三\\\")&&userInfo.getPwd().equals(\\\"123456\\\")){ flage = true; System.out.println(\\\"⌈服务器消息⌋ 用户：\\\"+userInfo.getName()+\\\"--登录成功~!\\\"); }else { System.out.println(\\\"⌈服务器消息⌋ 用户：\\\"+userInfo.getName()+\\\"--登录失败~!\\\"); } outputStream = accept.getOutputStream(); dataOutputStream = new DataOutputStream(outputStream); dataOutputStream.writeBoolean(flage); } catch (IOException e) { throw new RuntimeException(e); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } finally { //关闭流 if (dataOutputStream != null) { try { dataOutputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (outputStream != null) { try { outputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (objectInputStream != null) { try { objectInputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } if (inputStream != null) { try { inputStream.close(); } catch (IOException e) { throw new RuntimeException(e); } } } } } \"]},\"514\":{\"h\":\"UDP 通讯\"},\"515\":{\"h\":\"单向通讯\",\"t\":[\"客户端\",\"public class TestReceive { public static void main(String[] args) throws IOException { System.out.println(\\\"接收端上线~！\\\"); DatagramSocket datagramSocket = new DatagramSocket(9999); byte[] bytes = new byte[1024]; DatagramPacket datagramPacket = new DatagramPacket(bytes, bytes.length); datagramSocket.receive(datagramPacket); byte[] data = datagramPacket.getData(); String s = new String(data, \\\"UTF-8\\\"); System.out.println(s); datagramSocket.close(); } } \",\"服务器\",\"public class TestSend { public static void main(String[] args) throws IOException { System.out.println(\\\"发送端打开~~~\\\"); //指定客户端的接口 DatagramSocket datagramSocket = new DatagramSocket(8888); String str = \\\"您好~!\\\"; byte[] bytes = str.getBytes(StandardCharsets.UTF_8); //向指定接口发送数据 /** * 内容，长度，地址，接口 */ DatagramPacket localhost = new DatagramPacket(bytes, bytes.length, InetAddress.getByName(\\\"localhost\\\"),9999); //发送数据包 datagramSocket.send(localhost); //关闭发送端接口 datagramSocket.close(); } } \"]},\"516\":{\"h\":\"双向通讯\",\"t\":[\"客户端\",\"public class TestReceive { public static void main(String[] args) throws IOException { System.out.println(\\\"接收端上线~！\\\"); DatagramSocket datagramSocket = new DatagramSocket(9999); byte[] bytes = new byte[1024]; DatagramPacket datagramPacket = new DatagramPacket(bytes, bytes.length); datagramSocket.receive(datagramPacket); byte[] data = datagramPacket.getData(); String s = new String(data, \\\"UTF-8\\\"); System.out.println(s); String str = \\\"你也是\\\"; byte[] bytes1 = str.getBytes(); DatagramPacket localhost = new DatagramPacket(bytes1, bytes1.length, InetAddress.getByName(\\\"localhost\\\"), 8888); datagramSocket.send(localhost); datagramSocket.close(); } } \",\"服务器\",\"public class TestSend { public static void main(String[] args) throws IOException { System.out.println(\\\"发送端打开~~~\\\"); //指定客户端的接口 DatagramSocket datagramSocket = new DatagramSocket(8888); String str = \\\"您好~!\\\"; byte[] bytes = str.getBytes(StandardCharsets.UTF_8); //向指定接口发送数据 /** * 内容，长度，地址，接口 */ DatagramPacket localhost = new DatagramPacket(bytes, bytes.length, InetAddress.getByName(\\\"localhost\\\"),9999); //发送数据包 datagramSocket.send(localhost); //接受反馈 byte[] bytes1 = new byte[1024]; DatagramPacket datagramPacket = new DatagramPacket(bytes1, bytes1.length); datagramSocket.receive(datagramPacket); byte[] data = datagramPacket.getData(); String s = new String(data, \\\"UTF-8\\\"); System.out.println(s); //关闭发送端接口 datagramSocket.close(); } } \"]},\"517\":{\"h\":\"异常处理\",\"t\":[\"客户端\",\"public class TestReceive { public static void main(String[] args) { DatagramSocket datagramSocket = null; try { System.out.println(\\\"接收端上线~！\\\"); datagramSocket = new DatagramSocket(9999); byte[] bytes = new byte[1024]; DatagramPacket datagramPacket = new DatagramPacket(bytes, bytes.length); datagramSocket.receive(datagramPacket); byte[] data = datagramPacket.getData(); String s = new String(data, \\\"UTF-8\\\"); System.out.println(s); String str = \\\"你也是\\\"; byte[] bytes1 = str.getBytes(); DatagramPacket localhost = new DatagramPacket(bytes1, bytes1.length, InetAddress.getByName(\\\"localhost\\\"), 8888); datagramSocket.send(localhost); } catch (IOException e) { throw new RuntimeException(e); } finally { try { if (datagramSocket == null) { datagramSocket.close(); } } catch (Exception e) { throw new RuntimeException(e); } } } } \",\"服务器\",\"public class TestSend { public static void main(String[] args) { System.out.println(\\\"发送端打开~~~\\\"); DatagramSocket datagramSocket = null; try { //指定客户端的接口 datagramSocket = new DatagramSocket(8888); String str = \\\"您好~!\\\"; byte[] bytes = str.getBytes(StandardCharsets.UTF_8); //向指定接口发送数据 /** * 内容，长度，地址，接口 */ DatagramPacket localhost = new DatagramPacket(bytes, bytes.length, InetAddress.getByName(\\\"localhost\\\"),9999); //发送数据包 datagramSocket.send(localhost); //接受反馈 byte[] bytes1 = new byte[1024]; DatagramPacket datagramPacket = new DatagramPacket(bytes1, bytes1.length); datagramSocket.receive(datagramPacket); byte[] data = datagramPacket.getData(); String s = new String(data, \\\"UTF-8\\\"); System.out.println(s); } catch (IOException e) { throw new RuntimeException(e); } finally { //关闭发送端接口 try { if (datagramSocket == null) { datagramSocket.close(); } } catch (Exception e) { throw new RuntimeException(e); } } } } \"]},\"518\":{\"h\":\"持久通讯\",\"t\":[\"客户端\",\"public class TestReceive { public static void main(String[] args) { DatagramSocket datagramSocket = null; Scanner scanner = null; try { System.out.println(\\\"接收端上线~！\\\"); datagramSocket = new DatagramSocket(9999); scanner = new Scanner(System.in); while (true) { byte[] bytes = new byte[1024]; DatagramPacket datagramPacket = new DatagramPacket(bytes, bytes.length); datagramSocket.receive(datagramPacket); byte[] data = datagramPacket.getData(); String s = new String(data, \\\"UTF-8\\\"); System.out.println(s); if (s.equals(\\\"byebye\\\"))break; System.out.println(\\\"请输入消息\\\"); String str = scanner.next(); byte[] bytes1 = str.getBytes(); DatagramPacket localhost = new DatagramPacket(bytes1, bytes1.length, InetAddress.getByName(\\\"localhost\\\"), 8888); datagramSocket.send(localhost); } } catch (IOException e) { throw new RuntimeException(e); } finally { try { if (datagramSocket == null) { datagramSocket.close(); } } catch (Exception e) { throw new RuntimeException(e); } } } \",\"模拟通讯\",\"public class TestSend { public static void main(String[] args) { System.out.println(\\\"发送端打开~~~\\\"); DatagramSocket datagramSocket = null; Scanner scanner = null; try { //指定客户端的接口 datagramSocket = new DatagramSocket(8888); scanner = new Scanner(System.in); while (true) { System.out.println(\\\"请输入消息：\\\"); String str = scanner.next(); byte[] bytes = str.getBytes(StandardCharsets.UTF_8); //向指定接口发送数据 /** * 内容，长度，地址，接口 */ DatagramPacket localhost = new DatagramPacket(bytes, bytes.length, InetAddress.getByName(\\\"localhost\\\"),9999); //发送数据包 datagramSocket.send(localhost); //接受反馈 byte[] bytes1 = new byte[1024]; DatagramPacket datagramPacket = new DatagramPacket(bytes1, bytes1.length); datagramSocket.receive(datagramPacket); byte[] data = datagramPacket.getData(); String s = new String(data, \\\"UTF-8\\\"); System.out.println(s); if (s.equals(\\\"byebye\\\"))break; } System.out.println(\\\"链接断开\\\"); } catch (IOException e) { throw new RuntimeException(e); } finally { //关闭发送端接口 try { if (datagramSocket == null) { datagramSocket.close(); } } catch (Exception e) { throw new RuntimeException(e); } } } } \"]},\"519\":{\"h\":\"Junit单元测试\"},\"520\":{\"h\":\"概念\",\"t\":[\"Junit 测试的优点：\",\"测试不用在Main方法中执行\",\"无需注释其他的代码\",\"无需定义很多测试类，不会干扰原有代码\"]},\"521\":{\"h\":\"使用Junit单元测试\"},\"522\":{\"h\":\"开发步骤\",\"t\":[\"创建独立的测试单元包，例如：公司域名倒着写+test\",\"创建测试类：xxxxTest\",\"设置当前包为Test包\",\"定义测试方法，使用@Test注解\",\"导入依赖Jar包\",\"执行测试单元获取结果，可加入断言Assert.assertEquals(a,b)\"]},\"523\":{\"h\":\"完整代码\",\"t\":[\"功能类\",\"public class Calculator { public int add(int a ,int b){ return a + b; } public int sub(int a ,int b){ return a - b; } } \",\"测试类\",\"public class Test01 { @Test public void testAdd(){ Calculator calculator = new Calculator(); int add = calculator.add(10, 20); Assert.assertEquals(40,add);//加入断言，判断接受是否符合预期的40 System.out.println(add); } @Test public void testSub(){ Calculator calculator = new Calculator(); int sub = calculator.sub(20, 10); Assert.assertEquals(0,sub);//加入断言，判断接受是否符合预期的40 System.out.println(sub); } } \"]},\"524\":{\"h\":\"@Before @After\",\"t\":[\"@Before 某一个方法中，加入了@Before注解以后，那么这个方法中的功能会在测试方法执行前先执行 一般会在@Beforer修饰的那个方法中加入：加入一些申请资源的代码：申请数据库资源，申请IO资源，申请网络资源。。。\",\"@After 某一个方法中，加入了@After注解以后，那么这个方法中的功能会在测试方法执行后先执行 一般会在@After修饰的那个方法中加入：加入释放资源的代码：释放数据库资源，释放IO资源，释放网络资源。。\"]},\"525\":{\"h\":\"相关代码\",\"t\":[\"功能类\",\"public class Calculator { public int add(int a ,int b){ return a + b; } public int sub(int a ,int b){ return a - b; } } \",\"测试类\",\"public class Test01 { @Before public void testBefore(){ System.out.println(\\\"测试方法执行前先执行，通常用来申请资源\\\"); } @After public void testAfter(){ System.out.println(\\\"测试方法执行后执行，通常用来释放资源\\\"); } @Test public void testAdd(){ Calculator calculator = new Calculator(); int add = calculator.add(10, 20); Assert.assertEquals(40,add);//加入断言，判断接受是否符合预期的40 System.out.println(add); } @Test public void testSub(){ Calculator calculator = new Calculator(); int sub = calculator.sub(20, 10); Assert.assertEquals(0,sub);//加入断言，判断接受是否符合预期的40 System.out.println(sub); } } \"]},\"526\":{\"h\":\"测试的概念\"},\"527\":{\"h\":\"概念\",\"t\":[\"软件测试的目的是在规定的条件下对程序进行操作,以发现程序错误,衡量软件质量,并对其是否能满足设计要求进行评估的过程\"]},\"528\":{\"h\":\"测试分类\"},\"529\":{\"h\":\"黑盒测试\",\"t\":[\"软件的黑盒测试意味着测试要在软件的接口处进行。这种方法是把测试对象看做一个黑盒子,测试人员完全不考虑程序内部的逻辑结构和内部特性,只依据程序的需求规格说明书,检查程序的功能是否符合它的功能说明。因此黑盒测试又叫功能测试。\"]},\"530\":{\"h\":\"白盒测试\",\"t\":[\"Junit属于白盒测试。软件的白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看做一个打开的盒子,它允许测试人员利用程序内部的逻辑结构及有关信息,设计或选择测试用例,对程序的所有逻辑路径进行测试,通过在不同点检查程序状态,确定实际状态是否与预期的状态一致。因此白盒测试又称为结构测试。\"]},\"531\":{\"h\":\"注解\"},\"532\":{\"h\":\"概念\",\"t\":[\"JDK5.0 新增 --- 注解（Annotation）,也叫元数据\"]},\"533\":{\"h\":\"什么是注解\",\"t\":[\"注解其实就是代码里的特殊标记，这些标记可以在编译,类加载,运行时被读取,并执行相应的处理。\",\"通过使用注解,程序员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。\",\"使用注解时要在其前面增加@符号,并把该注解当成一个修饰符使用。用于修饰它支持的程序元素。\"]},\"534\":{\"h\":\"注解的重要性\",\"t\":[\"Annotation 可以像修饰符一样被使用，可用于修饰包，类，构造器,方法，成员变量,参数，局部变量的声明，这些信息被保存在Annotation的\\\"name=value\\\"对中。\",\"在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/ArIdroid中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。\",\"未来的开发模式都是基于注解的，JPA(java的持久化API)是基于注解的，Spring2.5以后都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说 ：框架=注解+反射+设计模式。\"]},\"535\":{\"h\":\"Junit 注解\",\"t\":[\"@Before@After@Test\"]},\"536\":{\"h\":\"文档注解\",\"t\":[\"说明注释允许你在程序中嵌入关于程序的信息。你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。 说明注释，使你更加方便的记录你的程序信息。\",\"文档注解我们一般使用在文档注释中，配合javadoc工具\"]},\"537\":{\"h\":\"常见的文档注解\",\"t\":[\"其中注意 ：\",\"@param @return和@exception这三个标记都是只用于方法的。\",\"@param的格式要求: @param 形参名 形参类型 形参说明\",\"@return的格式要求: @return 返回值类型返回值说明，如果方法的返回值类型是void就不能写\",\"@exception的格式要求: @exception 异常类型异常说明\",\"@param和@exception可以并列多个\"]},\"538\":{\"h\":\"代码案例\",\"t\":[\"/** * @author : meturing * @version : 1.0 */ public class Person { /** * 下面是eat方法，实现了XXX功能。 * @param num1 就餐人数 * @param num2 点了几个菜 */ public void eat(int num1,int num2){ } /** * @param age 年龄 * @return int * @exception RuntimeException 当年龄过大的时候 * @exception IndexOutOfBoundsException 当年龄过小的时候 * @see Student */ public int sleep(int age){ new Student(); if(age>100){ throw new RuntimeException(); } if(age<0){ throw new IndexOutOfBoundsException(); } return 10; } } \"]},\"539\":{\"h\":\"IDEA的javadoc工具的使用\"},\"540\":{\"h\":\"JDK内置注解\"},\"541\":{\"h\":\"@Override\",\"t\":[\"限定重写父类方法，该注解只能用于方法\",\"public class Person { public void eat(){ System.out.println(\\\"父类eat..\\\"); } } \",\"public class Student extends Person { /* @Override的作用：限定重写的方法，只要重写方法有问题，就有错误提示。 */ @Override public void eat(){ System.out.println(\\\"子类eat..\\\"); } } \"]},\"542\":{\"h\":\"@Deprecated\",\"t\":[\"用于表示所修饰的元素(类,方法，构造器，属性等)已过时\",\"public class Student extends Person { /* @Override的作用：限定重写的方法，只要重写方法有问题，就有错误提示。 */ @Override public void eat(){ System.out.println(\\\"子类eat..\\\"); } /* 在方法前加入@Deprecated，这个方法就会变成一个废弃方法/过期方法/过时方法 */ @Deprecated public void study(){ System.out.println(\\\"学习。。\\\"); } } \"]},\"543\":{\"h\":\"@SuppressWarnings\",\"t\":[\"抑制编译器警告\",\"public class Test02 { //这是一个main方法，是程序的入口： public static void main(String[] args) { @SuppressWarnings(\\\"unused\\\") int age = 10; int num = 10; System.out.println(num); @SuppressWarnings({\\\"unused\\\",\\\"rwatypes\\\"}) ArrayList al = new ArrayList(); } } \"]},\"544\":{\"h\":\"简化配置文件\"},\"545\":{\"h\":\"在servlet3.0之前的配置\",\"t\":[\"public class HelloServlet implements Servlet { @Override public void init(ServletConfig servletConfig) throws ServletException {} @Override public ServletConfig getServletConfig() {return null;} @Override public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException { System.out.println(\\\"service方法被调用了...\\\"); } @Override public String getServletInfo() {return null;} @Override public void destroy() {} } \",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <!--配置Servlet--> <!--配置Servlet的信息--> <servlet> <servlet-name>HelloServlet</servlet-name> <servlet-class>com.bjsxt.servlet.HelloServlet</servlet-class> </servlet> <!--配置Servlet的映射路径--> <servlet-mapping> <servlet-name>HelloServlet</servlet-name> <!--http://localhost:8080/01-hello-servlet/hello--> <url-pattern>/hello</url-pattern> </servlet-mapping> </web-app> \"]},\"546\":{\"h\":\"servlet3.0之后使用注解\",\"t\":[\"@WebServlet(\\\"/hello\\\") public class HelloServlet implements Servlet { @Override public void init(ServletConfig servletConfig) throws ServletException { } @Override public ServletConfig getServletConfig() { return null; } /** * 用于提供服务, 接收请求, 处理响应 * * @param servletRequest * @param servletResponse * @throws ServletException * @throws IOException */ @Override public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException { System.out.println(\\\"service方法被调用了...\\\"); } @Override public String getServletInfo() { return null; } @Override public void destroy() {} } \"]},\"547\":{\"h\":\"自定义注解\"},\"548\":{\"h\":\"创建自定义注解\",\"t\":[\"注解并不是创建了接口，是@interface，跟接口没有一点关系\"]},\"549\":{\"h\":\"可以省略的元素\"},\"550\":{\"h\":\"省略value\",\"t\":[\"如果自定义注解只有一个参数，使用时可以省略value\"]},\"551\":{\"h\":\"设略赋值\",\"t\":[\"如果自定义注解内部参数自带默认值，使用时可以不赋值\",\"如果自定义注解没有参数，那么实际上只是个标记，只有有参数的才是元注解\"]},\"552\":{\"h\":\"元注解\",\"t\":[\"元注解是用于修饰其它注解的注解\",\"JDK5.0提供了四种元注解：Retention, Target, Documented, Inherited\"]},\"553\":{\"h\":\"@Retention\",\"t\":[\"用于修饰注解，用于指定修饰的那个注解的生命周期，@Rentention包含一个RetentionPolicy枚举类型的成员变量,使用@Rentention时必须为该value成员变量指定值:\",\"RetentionPolicy.SOURCE: 在源文件中有效(即源文件保留),编译器直接丢弃这种策略的注释，在.class文件中不会保留注解信息\",\"RetentionPolicy.CLASS: 在class文件中有效(即class保留)，保留在.class文件中，但是当运行Java程序时，他就不会继续加载了，不会保留在内存中，JVM不会保留注解。如果注解没有加Retention元注解，那么相当于默认的注解就是这种状态。\",\"RetentionPolicy.RUNTIME: 在运行时有效(即运行时保留),当运行 Java程序时，JVM会保留注释，加载在内存中了，那么程序可以通过反射获取该注释。\"]},\"554\":{\"h\":\"@Target\",\"t\":[\"用于修饰注解的注解，用于指定被修饰的注解能用于修饰哪些程序元素。@Target也包含一个名为value的成员变量。\",\"CONSTRUCTOR 表示可以在类上使用 METHOD表示可以在方法上使用 未注明的则不可以使用\"]},\"555\":{\"h\":\"@Documented(很少用）\",\"t\":[\"用于指定被该元注解修饰的注解类将被javadoc工具提取成文档。默认情况下，javadoc是 不包括注解的，但是加上了这个注解生成的文档中就会带着注解了\"]},\"556\":{\"h\":\"@Inherited(极少用）\",\"t\":[\"被它修饰的Annotation将具有继承性。如果某个类使用了被@Inherited修饰的Annotation,则其子类将自动具有该注解。\",\"如果MyAnno注解使用了@Inherited之后，就具备了继承性，那么相当于子类Student也使用了这个MyAnno\"]},\"557\":{\"h\":\"枚举\"},\"558\":{\"h\":\"概念\",\"t\":[\"在java中，类的对象是有限个，确定的。这个类我们可以定义为枚举类。\"]},\"559\":{\"h\":\"枚举的使用\"},\"560\":{\"h\":\"JDK1.5之前\",\"t\":[\"public class Season { //属性： private final String seasonName ;//季节名字 private final String seasonDesc ;//季节描述 //利用构造器对属性进行赋值操作： //构造器私有化，外界不能调用这个构造器，只能Season内部自己调用 private Season(String seasonName,String seasonDesc){ this.seasonName = seasonName; this.seasonDesc = seasonDesc; } //提供枚举类的有限的 确定的对象： public static final Season SPRING = new Season(\\\"春天\\\",\\\"春暖花开\\\"); public static final Season SUMMER = new Season(\\\"夏天\\\",\\\"烈日炎炎\\\"); public static final Season AUTUMN = new Season(\\\"秋天\\\",\\\"硕果累累\\\"); public static final Season WINTER = new Season(\\\"冬天\\\",\\\"冰天雪地\\\"); //额外因素： public String getSeasonName() { return seasonName; } public String getSeasonDesc() { return seasonDesc; } //toString(); @Override public String toString() { return \\\"Season{\\\" + \\\"seasonName='\\\" + seasonName + '\\\\'' + \\\", seasonDesc='\\\" + seasonDesc + '\\\\'' + '}'; } } \",\"public class TestSeason { //这是一个main方法，是程序的入口： public static void main(String[] args) { Season summer = Season.SUMMER; System.out.println(summer/*.toString()*/); System.out.println(summer.getSeasonName()); } } \"]},\"561\":{\"h\":\"JDK1.5之后\",\"t\":[\"public enum Season { //提供枚举类的有限的 确定的对象：--->enum枚举类要求对象（常量）必须放在最开始位置 //多个对象之间用，进行连接，最后一个对象后面用;结束 SPRING(\\\"春天\\\",\\\"春暖花开\\\"), SUMMER(\\\"夏天\\\",\\\"烈日炎炎\\\"), AUTUMN(\\\"秋天\\\",\\\"硕果累累\\\"), WINTER(\\\"冬天\\\",\\\"冰天雪地\\\"); //属性： private final String seasonName ;//季节名字 private final String seasonDesc ;//季节描述 //利用构造器对属性进行赋值操作： //构造器私有化，外界不能调用这个构造器，只能Season内部自己调用 private Season(String seasonName, String seasonDesc){ this.seasonName = seasonName; this.seasonDesc = seasonDesc; } //额外因素： public String getSeasonName() { return seasonName; } public String getSeasonDesc() { return seasonDesc; } //toString(); @Override public String toString() { return \\\"Season{\\\" + \\\"seasonName='\\\" + seasonName + '\\\\'' + \\\", seasonDesc='\\\" + seasonDesc + '\\\\'' + '}'; } } \",\"public class TestSeason { //这是一个main方法，是程序的入口： public static void main(String[] args) { Season winter = Season.WINTER; System.out.println(winter); //enum关键字对应的枚举类的上层父类是 ：java.lang.Enum //但是我们自定义的枚举类的上层父类：Object System.out.println(Season.class.getSuperclass().getName());//java.lang.Enum } } \",\"在源码中经常看到别人定义的枚举类形态：\",\"public enum Season { SPRING, SUMMER, AUTUMN, WINTER; } \",\"为什么这么简单：因为这个枚举类底层没有属性，属性，构造器，toString，get方法都删掉不写了，然后案例来说应该 写为：SPRING() 现在连（）可以省略 就变成 SPRING 看到的形态就剩：常量名（对象名）\"]},\"562\":{\"h\":\"常用方法\",\"t\":[\"public class TestSeason { //这是一个main方法，是程序的入口： public static void main(String[] args) { //用enum关键字创建的Season枚举类上面的父类是：java.lang.Enum,常用方法子类Season可以直接拿过来使用： //toString();--->获取对象的名字 Season autumn = Season.AUTUMN; System.out.println(autumn/*.toString()*/);//AUTUMN System.out.println(\\\"--------------------\\\"); //values:返回枚举类对象的数组 Season[] values = Season.values(); for(Season s:values){ System.out.println(s/*.toString()*/); } System.out.println(\\\"--------------------\\\"); //valueOf：通过对象名字获取这个枚举对象 //注意：对象的名字必须传正确，否则抛出异常 Season autumn1 = Season.valueOf(\\\"AUTUMN\\\"); System.out.println(autumn1); } } \"]},\"563\":{\"h\":\"枚举类实现接口\",\"t\":[\"public interface TestInterface { void show(); } \",\"public enum Season implements TestInterface { SPRING{ @Override public void show() { System.out.println(\\\"这是春天。。。\\\"); } }, SUMMER{ @Override public void show() { System.out.println(\\\"这是夏天。。\\\"); } }, AUTUMN{ @Override public void show() { System.out.println(\\\"这是秋天\\\"); } }, WINTER{ @Override public void show() { System.out.println(\\\"这是冬天\\\"); } }; /*@Override public void show() { System.out.println(\\\"这是Season....\\\"); }*/ } \",\"public class Test { //这是一个main方法，是程序的入口： public static void main(String[] args) { Season autumn = Season.AUTUMN; autumn.show(); Season summer = Season.SUMMER; summer.show(); } } \"]},\"564\":{\"h\":\"实际应用\",\"t\":[\"public class Test02 { //这是一个main方法，是程序的入口： public static void main(String[] args) { Gender sex = Gender.男; //switch后面的（）中可以传入枚举类型 //switch后面的（）:int,short,byte,char,String ,枚举 switch (sex){ case 女: System.out.println(\\\"是个女孩\\\"); break; case 男: System.out.println(\\\"是个男孩\\\"); break; } } } \"]},\"565\":{\"h\":\"初识反射\"},\"566\":{\"h\":\"为什么用反射\"},\"567\":{\"h\":\"优缺点\",\"t\":[\"优点:主要是其动态性 \",\"1.反射和new 都能创建用户对象,并且调用里面的方法,但是反射是针对字符串编程,new是针对实体类编程\",\"2.可以使框架更灵活\",\"3.可以深入到类的内部结构,去做一些操作。\",\"缺点:主要是性能损失\"]},\"568\":{\"h\":\"案例\",\"t\":[\"public class AliPay implements Mtwm{ @Override public void pay() { System.out.println(\\\"正在使用支付宝支付~~~！！\\\"); } } \",\"public interface Mtwm { void pay(); } \",\"public class WeChat implements Mtwm{ @Override public void pay() { System.out.println(\\\"正在使用美团支付~~!\\\"); } } \",\"常用的调用方法\",\"public class Demo01 { /** * 一般的使用方法 * @param args */ public static void main(String[] args) { String str = \\\"微信\\\"; if (\\\"微信\\\".equals(str)) { weChat(); } if (\\\"支付宝\\\".equals(str)) { aliPay(); } } public static void weChat(){ new WeChat().pay(); } public static void aliPay(){ new WeChat().pay(); } } \",\"尝试通过多态优化代码\",\"public class Demo02 { /** * 利用多态的优化 * @param args */ public static void main(String[] args) { String str = \\\"微信\\\"; if (\\\"微信\\\".equals(str)) { paly(new WeChat()); } if (\\\"支付宝\\\".equals(str)) { paly(new AliPay()); } } public static void paly(Mtwm mtwm){ mtwm.pay(); } } \",\"利用反射优化代码\",\"public class Demo03 { /** * 利用反射通过字节码获取方法 * @param args * @throws ClassNotFoundException * @throws InstantiationException * @throws IllegalAccessException * @throws NoSuchMethodException * @throws InvocationTargetException */ public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException { String str = \\\"com.meturing.test01.AliPay\\\"; Class aClass = Class.forName(str);//cls-->Class类具体的对象--》AliPay字节码信息 Object o = aClass.newInstance();//通过字节码获取对象实例化 Method paly = aClass.getMethod(\\\"pay\\\");//获取方法 paly.invoke(o);//执行方法 } } \"]},\"569\":{\"h\":\"反射的概念\"},\"570\":{\"h\":\"概念\",\"t\":[\"JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。\",\"在编译后产生字节码文件的时候，类加载器子系统通过二进制字节流，负责从文件系统加载class文件。\",\"在执行程序（java.exe）时候，将字节码文件读入JVM中--->这个过程叫做类的加载. 然后在内存中对应创建一个java.lang.Class对象-->这个对象会被放入字节码信息中,这个Class对象,就对应加载那个字节码信息,这个对象将被作为程序访问方法区中的这个类的各种数据的外部接口。\",\"所以：我们可以通过这个对象看到类的结构，这个对象就好像是一面镜子，透过镜子看到类的各种信息，我们形象的称之为反射 这种“看透”class的能力（the ability of the program to examine itself）被称为introspection（内省、内观、反省）。Reflection和introspection是常被并提的两个术语。\",\"说明：在运行期间，如果我们要产生某个类的对象，Java虚拟机(JVM)会检查该类型的Class对象是否已被加载。 如果没有被加载，JVM会根据类的名称找到.class文件并加载它。一旦某个类型的Class对象已被加载到内存，就可以用它来产生该类型的所有对象。\"]},\"571\":{\"h\":\"动态语音与静态语音\"},\"572\":{\"h\":\"动态语言\",\"t\":[\"是一类在运行时可以改变其结构的语言:例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。 主要动态语言: Object-C、 C#、JavaScript、 PHP、 Python、 Erlang 。\"]},\"573\":{\"h\":\"静态语言\",\"t\":[\"与动态语言相对应的，运行时结构不可变的语言就是静态语言。 如Java、C、C++。\",\"Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。Java的动态性让编程的时候更加灵活! \"]},\"574\":{\"h\":\"获取字节码对象\"},\"575\":{\"h\":\"API\",\"t\":[\"API\",\"说明\",\"native Class<?> getClass();\",\"通过对象获取\",\"类.class;\",\"通过类的内置.Class属性\",\"static Class<?> forName(String className);\",\"通过字节码包名获取[推荐]\",\"ClassLoader getClassLoader(); Class<?> loadClass(String name);\",\"通过类加载器获取\"]},\"576\":{\"h\":\"准备素材类\",\"t\":[\"public class Person { //属性 private int age; public String name; //方法 private void eat(){ System.out.println(\\\"Person---eat\\\"); } public void sleep(){ System.out.println(\\\"Person---sleep\\\"); } } \",\"public class Student extends Person { //属性： private int sno;//学号 double height;//身高 protected double weight;//体重 public double score;//成绩 //方法： public String showInfo(){ return \\\"我是一名三好学生\\\"; } private void work(){ System.out.println(\\\"我以后会找工作--》成为码农 程序员 程序猿 程序媛\\\"); } //构造器 public Student(){ System.out.println(\\\"空参构造器\\\"); } private Student(int sno){ this.sno = sno; } Student(int sno,double weight){ this.sno = sno; this.weight = weight; } } \"]},\"577\":{\"h\":\"方式一: 通过对象获取\",\"t\":[\"public class Demo01 { public static void main(String[] args) throws ClassNotFoundException { //通过对象获取 Person person = new Person(); Class personClass1 = person.getClass(); System.out.println(personClass1); } } \"]},\"578\":{\"h\":\"方式二: 通过内置.class属性获取\",\"t\":[\"public class Demo01 { public static void main(String[] args) throws ClassNotFoundException { //通过类的内置.Class属性 Class personClass2 = Person.class; System.out.println(personClass2); } } \"]},\"579\":{\"h\":\"方式三: 通过字节码包名获取[推荐]\",\"t\":[\"public class Demo01 { public static void main(String[] args) throws ClassNotFoundException { //通过字节码包名获取[推荐] Class personClass3 = Class.forName(\\\"com.meturing.test02.Person\\\"); System.out.println(personClass3); } } \"]},\"580\":{\"h\":\"方式三: 通过类加载器获取\",\"t\":[\"public class Demo01 { public static void main(String[] args) throws ClassNotFoundException { //通过类加载器获取 ClassLoader classLoader = Demo01.class.getClassLoader(); Class personClass4 = classLoader.loadClass(\\\"com.meturing.test02.Person\\\"); System.out.println(personClass4); } } \"]},\"581\":{\"h\":\"Class类的应用\",\"t\":[\"类：外部类，内部类 \",\"接口\",\"注解\",\"数组\",\"基本数据类型\",\"void\",\"public class Demo02 { public static void main(String[] args) { Class personClass1 = Person.class; Class componentClass = Component.class; Class overrideClass = Override.class; String[] strArray1 = new String[1]; Class aClass1 = strArray1.getClass(); String[] strArray2 = new String[1]; Class aClass2 = strArray2.getClass(); System.out.println(aClass1==aClass2);//结果：true .同一个维度，同一个元素类型,得到的字节码就是同一个 Class integerClass = int.class; Class voidClass = void.class; } } \"]},\"582\":{\"h\":\"常用API\"},\"583\":{\"h\":\"构造器\"},\"584\":{\"h\":\"API\",\"t\":[\"API\",\"说明\",\"java.lang.Class#Constructor<?>[] getConstructors()\",\"获取构造器列表(仅限Public修饰)\",\"java.lang.Class#Constructor<?>[] getDeclaredConstructors()\",\"获取构造器列表(全部)\",\"java.lang.Class#Constructor<T> getConstructor(Class<?>... parameterTypes)\",\"获取指定的构造器(仅限Public修饰)\",\"java.lang.Class#Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes)\",\"获取指定的构造器(全部)\",\"java.lang.Class#T newInstance(Object ... initargs)\",\"初始化对象\"]},\"585\":{\"h\":\"案例\",\"t\":[\"/** * 获取构造器和创建对象 * 字节码对象.getConstructors() -> 获取构造器列表(仅限Public修饰) * 字节码对象.getDeclaredConstructors() -> 获取构造器列表(全部) * 字节码对象.getConstructor() -> 获取指定的无参构造器(仅限Public修饰) * 字节码对象.getConstructor(Class,Class,.....) -> 获取带参的构造器,参数传入构造器的参数类型.class(仅限Public修饰) * 字节码对象.getDeclaredConstructor(Class,.....) -> 获取编译后的指定构造器,参数传入构造器的参数类型.class(全部) */ public class Demo01 { public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException { Class studentClass = Student.class;//获取到字节码对象 //通过字节码信息可以获取构造器： //getConstructors只能获取当前运行时类的被public修饰的构造器 Constructor[] constructors = studentClass.getConstructors(); Arrays.stream(constructors).forEach(c->{ System.out.println(c); }); System.out.println(\\\"-------------------\\\"); //getDeclaredConstructors:获取运行时类的全部修饰符的构造器 Constructor[] declaredConstructors = studentClass.getDeclaredConstructors(); Arrays.stream(declaredConstructors).forEach(c->{ System.out.println(c); }); System.out.println(\\\"-------------------\\\"); //获取指定的构造器： //得到空构造器(仅限Public修饰) Constructor constructor = studentClass.getConstructor(); System.out.println(constructor); //得到两个参数的构造器(仅限Public修饰) Constructor constructor1 = studentClass.getConstructor(int.class,int.class); System.out.println(constructor1); //得到一个参数的构造器(全部) Constructor declaredConstructor = studentClass.getDeclaredConstructor(int.class); System.out.println(declaredConstructor); //有了构造器以后我就可以创建对象： Object o = constructor.newInstance(); System.out.println(o); Object o1 = constructor1.newInstance(10,10); System.out.println(o1); } } \"]},\"586\":{\"h\":\"属性\"},\"587\":{\"h\":\"API\",\"t\":[\"API\",\"说明\",\"java.lang.Class#Field[] getFields()\",\"字节码对象.getFields() -> 获取属性列表(仅限Public修饰)\",\"java.lang.Class#Field[] getDeclaredFields()\",\"字节码对象.getDeclaredFields() -> 获取属性列表(全部)\",\"java.lang.Class#Field getField(String name)\",\"获取指定的属性(仅限Public修饰)\",\"java.lang.Class#Field getDeclaredField(String name)\",\"获取指定的属性(全部)\",\"java.lang.reflect.Field#int getModifiers()\",\"属性对象.getModifiers() -> 获取属性的修饰符 Modifier.toString(int arg) : 将上面获取到的码值转换成最终的值\",\"java.lang.reflect.Field#Class<?> getType()\",\"属性对象.getType() -> 获取属性的类型 java.lang.Class#getName.getName() 获取对应的名字\",\"java.lang.reflect.Field#String getName()\",\"属性对象.getName() -> 获取属性名字\",\"java.lang.reflect.Field#void set(Object obj, Object value)\",\"属性对象.set(对象,值) -> 设置属性的值,但是要传入对象\"]},\"588\":{\"h\":\"案例\",\"t\":[\"/** * 获取属性和对属性赋值 * 字节码对象.getFields() -> 获取属性列表(仅限Public修饰) * 字节码对象.getDeclaredFields() -> 获取属性列表(全部) * 字节码对象.getField(str) -> 获取指定的属性(仅限Public修饰) * 字节码对象.getDeclaredField(str) -> 获取指定的属性(全部) * 属性对象.getModifiers() -> 获取属性的修饰符 * 属性对象.getType() -> 获取属性的类型 * 属性对象.getName() -> 获取属性名字 * 属性对象.set(对象,值) -> 设置属性的值,但是要传入对象 */ public class Demo02 { public static void main(String[] args) throws NoSuchFieldException, InstantiationException, IllegalAccessException { //获取字节码对象 Class studentClass = Student.class; //获取所有的属性(Public) Field[] fields = studentClass.getFields(); Arrays.stream(fields).forEach(c->{ System.out.println(c); }); System.out.println(\\\"----------------------------\\\"); //获取全部的属性(不限制修饰符) Field[] declaredFields = studentClass.getDeclaredFields(); Arrays.stream(declaredFields).forEach(c->{ System.out.println(c); }); System.out.println(\\\"----------------------------\\\"); //获取指定的属性(Public) Field score = studentClass.getField(\\\"score\\\"); System.out.println(score); System.out.println(\\\"----------------------------\\\"); //获取指定的属性(全部) Field sno = studentClass.getDeclaredField(\\\"sno\\\"); System.out.println(sno); System.out.println(\\\"----------------------------\\\"); //获取属性的结构 //获取属性的修饰符 int modifiers = sno.getModifiers(); System.out.println(Modifier.toString(modifiers)); //获取属性的类型 Class type = sno.getType(); System.out.println(type.getName()); //获取属性的名字 String name = sno.getName(); System.out.println(name); //给属性设置值:必须要有对象 Field score1 = studentClass.getField(\\\"score\\\"); Object o = studentClass.newInstance(); score1.set(o, 100); System.out.println(o); } } \"]},\"589\":{\"h\":\"方法\"},\"590\":{\"h\":\"API\",\"t\":[\"API\",\"说明\",\"java.lang.Class#Method[] getMethods()\",\"获取全部的方法(仅限Public修饰,包含父类)\",\"java.lang.Class#Method[] getDeclaredMethods()\",\"获取全部的方法(全部修饰符,仅限当前类)\",\"java.lang.Class#Method getMethod(String name, Class<?>... parameterTypes)\",\"获取指定的方法(仅限Public修饰,包含父类)\",\"java.lang.Class#Method getDeclaredMethod(String name, Class<?>... parameterTypes)\",\"获取指定的方法(全部修饰符,仅限当前类)\",\"java.lang.reflect.Method#int getModifiers()\",\"属性对象.getModifiers() -> 获取属性的修饰符 Modifier.toString(int arg) : 将上面获取到的码值转换成最终的值\",\"java.lang.reflect.Method#Class<?> getReturnType()\",\"获取方法返回类型\",\"java.lang.reflect.Method#String getName()\",\"获取方法名\",\"java.lang.reflect.Method#Parameter[] getParameters()\",\"获取方法参数列表\",\"java.lang.reflect.Method#Class<?>[] getParameterTypes()\",\"获取方法参数类型列表\",\"java.lang.reflect.Method#Class<?>[] getExceptionTypes()\",\"获取方法异常类型\",\"java.lang.reflect.Method#Annotation[] getAnnotations()\",\"获取方法注解\",\"java.lang.reflect.Method#Object invoke(Object obj, Object... args)\",\"运行指定方法\"]},\"591\":{\"h\":\"案例\",\"t\":[\"/** * 获取方法和调用方法 * 字节对象.getMethods() -> 获取全部的方法(仅限Public修饰,包含父类) * 字节对象.getDeclaredMethods() -> 获取全部的方法(全部修饰符,仅限当前类) * 字节对象.getMethod(str) -> 获取指定的方法,参数为方法名(仅限Public修饰,包含父类) * 字节对象.getMethod(str,str,...,str) -> 获取指定的方法,参数为方法名,方法参数类型(仅限Public修饰,包含父类) * 字节对象.getDeclaredMethod(str) -> 获取指定的方法,参数为方法名(全部修饰符,仅限当前类) * 字节对象.getDeclaredMethod(str,str,...,str) -> 获取指定的方法,参数为方法名,方法参数类型(全部修饰符,仅限当前类) * * 方法对象.getModifiers() -> 获取方法修饰符 * 方法对象.getReturnType() -> 获取方法返回类型 * 方法对象.getName() -> 获取方法名 * 方法对象.getParameters() -> 获取方法参数列表 * 方法对象.getParameterTypes() -> 获取方法参数类型列表 * 方法对象.getExceptionTypes() -> 获取方法异常类型 * 方法对象.getAnnotations() -> 获取方法注解 * * 方法对象.invoke(object) -> 执行无参方法 * 方法对象.invoke(object,str,...,str) -> 执行带参方法 */ public class Demo03 { public static void main(String[] args) throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException { Class<Student> studentClass = Student.class; //获取运行时类的方法还有所有父类中的方法(仅限Public修饰,包含父类) Method[] methods = studentClass.getMethods(); Arrays.stream(methods).forEach(c -> { System.out.println(c); }); System.out.println(\\\"-----------------------\\\"); //获取运行时类中的所有方法(全部,只有当前类) Method[] declaredMethods = studentClass.getDeclaredMethods(); Arrays.stream(declaredMethods).forEach(c -> { System.out.println(c); }); System.out.println(\\\"-----------------------\\\"); //获取指定的方法 Method showInfo1 = studentClass.getMethod(\\\"showInfo\\\"); System.out.println(showInfo1); Method showInfo2 = studentClass.getMethod(\\\"showInfo\\\",int.class,int.class); System.out.println(showInfo2); Method work = studentClass.getDeclaredMethod(\\\"work\\\", int.class); System.out.println(work); System.out.println(\\\"------------------------------\\\"); //获取方法的结构 /* @注解 修饰符 返回值类型 方法名(参数列表) throws XXXXX{} */ //获取名字 System.out.println(Modifier.toString(work.getModifiers()));//获取修饰符 System.out.println(work.getReturnType());//获取返回类型 System.out.println(work.getName());//获取方法名 Parameter[] parameters = showInfo2.getParameters();//获取参数列表 Arrays.stream(parameters).forEach(c -> System.out.println(c)); Class<?>[] parameterTypes = work.getParameterTypes();//获取参数类型 Arrays.stream(parameterTypes).forEach(c -> System.out.println(c)); Method myMethod = studentClass.getMethod(\\\"myMethod\\\"); Class<?>[] exceptionTypes = myMethod.getExceptionTypes();//获取异常 Arrays.stream(exceptionTypes).forEach(c -> System.out.println(c)); Annotation[] annotations = myMethod.getAnnotations();//获得注解 Arrays.stream(annotations).forEach(c -> System.out.println(c)); //调用方法 System.out.println(\\\"-------------------------\\\"); Student student = studentClass.newInstance(); myMethod.invoke(student); System.out.println(showInfo2.invoke(student, 1,1)); } } \"]},\"592\":{\"h\":\"接口\"},\"593\":{\"h\":\"API\",\"t\":[\"API\",\"说明\",\"java.lang.Class#Class<?>[] getInterfaces()\",\"获取接口\",\"java.lang.Class#native Class<? super T> getSuperclass()\",\"获取父类的字节码对象\",\"java.lang.Class#Package getPackage()\",\"当前类所在的包\",\"java.lang.Class#Annotation[] getAnnotations()\",\"当前类的注解\"]},\"594\":{\"h\":\"案例\",\"t\":[\"/** * 获取类的接口，所在包，注解 * 字节码对象.getInterfaces() -> 获取接口 * 字节码对象.getSuperclass() -> 获取父类的字节码对象 * 字节码对象.getPackage() -> 当前类所在的包 * 字节码对象.getPackage().getName() -> 当前类所在的包名 * 字节码对象.getAnnotations() -> 当前类的注解 */ public class Demo04 { public static void main(String[] args) { Class<Student> studentClass = Student.class; //获取当前类的接口 Class<?>[] interfaces = studentClass.getInterfaces(); Arrays.stream(interfaces).forEach(c -> { System.out.println(c); }); //获取父类的接口 Class<? super Student> superclass = studentClass.getSuperclass(); Class<?>[] interfaces1 = superclass.getInterfaces(); Arrays.stream(interfaces1).forEach(c -> System.out.println(c)); //获取所在的包 Package aPackage = studentClass.getPackage(); System.out.println(aPackage); System.out.println(aPackage.getName()); //获取类上的注解 Annotation[] annotations = studentClass.getAnnotations(); Arrays.stream(annotations).forEach(c -> System.out.println(c)); } } \"]},\"595\":{\"h\":\"面试题\"},\"596\":{\"h\":\"问题1：创建Person的对象，以后用new Person()创建,还是用反射创建？\",\"t\":[\"日常使用中我们还是正常的使用new创建对象,因为我们需要遵守封装的规则,保障代码的安全性. 使用反射创建对象不利于我们遵守开发准则\"]},\"597\":{\"h\":\"问题2：反射是否破坏了面向对象的封装性？\",\"t\":[\"从客观来讲使用反射的确有破坏封装的可能性,因为反射可以无视封装的特性,获取到全部的内容. 但是合理的运用反射,我们也是可以遵守该特性的,比如我们使用getMethods,而不是用getDeclaredMethods, 再比如我们使用反射的特性来优化我们的代码\"]},\"598\":{\"h\":\"入门体验\"},\"599\":{\"h\":\"运行与调试\"},\"600\":{\"h\":\"项目视图\",\"t\":[\"项目视图是主要工具窗囗之一 。 它包含页目目录 、 SDK 特定的外部库和临时文件 。\",\"点击图标或者按 AIt + 1 快速打开 。\",\"点击对应的源码文件,即可打开编辑框视图\",\"第一次打开项目时，IntelliJ IDEA会扫描JDK和项目本身，以收集编码辅助所需的详细信息。要继续：请等待索引完成。\"]},\"601\":{\"h\":\"运行项目\",\"t\":[\"在高亮显示的组件中，您可以看到所选配置的常用运行操作 点击三角图标或使用Shift F10快速运行项目\"]},\"602\":{\"h\":\"调试项目\",\"t\":[\"当程序发生错误时,可以点击行号下断点调试\",\"我们次啊是可以看到调试控制台的展示\"]},\"603\":{\"h\":\"快速提醒\",\"t\":[\"IDEA在您使用.时会自动触发自动提示功能,也可以使用ALT + / 来在代码任意部分触发提示\"]},\"604\":{\"h\":\"警告预览与意图\",\"t\":[\"IDEA将高亮显示可以改进的代码行，并为这些行添加黄色灯泡。按Alt + Enter可以打开警告预览进行修复\",\"意图也可以节省您的时间，让编码更轻松。 我们来使用意图重新格式化字符串串联。按Alt + Enter显示可能的选项。 使用意图优化后\"]},\"605\":{\"h\":\"全局导航\",\"t\":[\"Ctrl+W选中当前AVERAGE单次,按两下Shift,在弹出的窗口输入大小写,选择大小写即可快速切换大小写\\n也可以按照旁边的提示使用Ctrl+Shift+U快速切换\"]},\"606\":{\"h\":\"基本操作\"},\"607\":{\"h\":\"意图操作\",\"t\":[\"IntelliJ IDEA有数百个上下文相关操作，可以帮助您转换，改进和修正代码。按Alt + Enter以调用显示上下文操作。\",\"删除无用的参数\",\"变换条件\",\"详见官方文档 : https://www.jetbrains.com/help/idea/intention-actions.html#intention-settings\"]},\"608\":{\"h\":\"搜索操作\",\"t\":[\"您还可以使用Ctrl + Shift + A或按两次Shift来更改IDE和项自设置。\"]},\"609\":{\"h\":\"随处搜索\",\"t\":[\"假设您正在寻找名称中包含单词guadratic和equation的类。 可以按两下shift 打开随处搜索,在搜索字段中输que（这些单词的首字母）。\",\"如果指向查找类,可以使用Ctrl+N 按:Ctrl+Q,可以预览类的相关文档\",\"同样，您可以按Ctrl+Alt+Shift+N查找方法或全局变量 ,按Ctrl+Shift+N查找文件。\"]},\"610\":{\"h\":\"基本补全\",\"t\":[\"正常情况下,我们编辑代码IDEA都会帮我们自动补全\",\"当然,我们也可以在代码的任意地方使用ALT+/进行手动激活\",\"使用Ctrl + Shift + Enter 可以补全语句,\\n在方法上或者静态常量上按两下ALT+/可以获取相关提示\"]},\"611\":{\"h\":\"编辑器基础知识\"},\"612\":{\"h\":\"扩展和收缩代码选区\",\"t\":[\"按住Ctrl+W可以快速选则光标处的单次\",\"再次按住Ctrl+W可以选择整个字符串\",\"第三次按住Ctrl+W可以选择整个字符串和引号\",\"再次按住Ctrl+W两次可以选择整个引用\",\"使用Ctrl+Shift+W可以搜索选中\",\"在代码块之前多点几次Ctrl+W可以选中代码块\"]},\"613\":{\"h\":\"注释行和代码块\",\"t\":[\"Ctrl+/ 可以注释当前行,再次点击Ctrl+/则取消注释\",\"Ctrl+Shit+/ 可以块注释,再次点击Ctrl+Shit+/则取消注释\"]},\"614\":{\"h\":\"复制和删除行\",\"t\":[\"Ctrl+D可以复制当前行\",\"Ctrl+Y删除当前行\",\"多行操作可以使用Shift+↑ 或 Shift+↓\"]},\"615\":{\"h\":\"移动代码\",\"t\":[\"移动当前行: Alt+Shit+↑向上一动 / Alt+Shit+↓ 向下移动\",\"移动当前方法块: Ctrl+Shit+↑向上一动 / Ctrl+Shit+↓ 向下移动\"]},\"616\":{\"h\":\"收起/展开\",\"t\":[\"当前代码块操作: Ctrl + - 收起代码块 / Ctrl + = 展开代码块\",\"全部代码块操作: Ctrl + Shift + - 收起代码块 / Ctrl + Shift + = 展开代码块\"]},\"617\":{\"h\":\"包围和解包围\",\"t\":[\"Ctrl + Alt + T 可以对当前代码进行包围操作,如:try-catch\",\"Ctrl + Shift + Delete 可以对当前代码进行解包操作,还原成原有状态\"]},\"618\":{\"h\":\"多选\",\"t\":[\"Alt+J 可以选中光标处的符号\",\"Alt+J多次可以选中多次当前匹配的符号\",\"Alt+Shift+J 可以取消上一个选中\",\"Ctrl + Alt + Shift + J 可以选中全部\"]},\"619\":{\"h\":\"代码补全\"},\"620\":{\"h\":\"基本补全\",\"t\":[\"默认情况下,IDEA中输入.会自动进行代码补全提醒,当然也可以使用Alt+/ 进行激活提醒\",\"Ctrl + Shift + Enter 可以对当前语句进行补全\",\"连续两次 Alt+/可以对静态常量或方法进行提醒\"]},\"621\":{\"h\":\"类型匹配补全\",\"t\":[\"Ctrl + Shift + 空格 自动补全上下文适用的提醒\"]},\"622\":{\"h\":\"后缀补全\",\"t\":[\"对于已经键入的表达式,可以直接使用.的方法来进行补全操作\"]},\"623\":{\"h\":\"语句补全\",\"t\":[\"Ctrl + Shift + Enter 可以对当前语句进行自动补全\"]},\"624\":{\"h\":\"使用Tab补全\",\"t\":[\"Alt + / 查看代码建议时,如果使用Tab选中,则直接替换当前标签\"]},\"625\":{\"h\":\"重构\"},\"626\":{\"h\":\"重命名\",\"t\":[\"Shift + F6 可以直接对当前变量进行改名\"]},\"627\":{\"h\":\"提取变量\",\"t\":[\"Ctrl + Alt + V 提取变量\",\"提取后\"]},\"628\":{\"h\":\"提取方法\",\"t\":[\"Ctrl + Alt + M 提取代码段为方法\",\"对于重复的代码会提醒一起替换\"]},\"629\":{\"h\":\"重构菜单\"},\"630\":{\"h\":\"引入形参\",\"t\":[\"Ctrl + Alt + Shift + T 选中引入形参 或者 Ctrl + Alt + P \"]},\"631\":{\"h\":\"内联变量\",\"t\":[\"Ctrl + Alt + Shift + T 选中内联变量 或者 Ctrl + Alt + N \"]},\"632\":{\"h\":\"引入常量\",\"t\":[\"Ctrl + Alt + Shift + T 选中引入常量 或者 Ctrl + Alt + C \"]},\"633\":{\"h\":\"代码辅助\"},\"634\":{\"h\":\"还原移除的代码\",\"t\":[\"右键 -> 本地历史记录 -> 显示历史记录\",\"选择需要还原的历史版本,合并差异\"]},\"635\":{\"h\":\"代码格式\",\"t\":[\"Ctrl + Alt + L 可以对当前代码快速格式化\",\"使用 Ctrl + Alt + Shift + L 可以个性化格式化的设置,如优化Import\"]},\"636\":{\"h\":\"形参信息\",\"t\":[\"Ctrl + P 可以快速查看所需形参\"]},\"637\":{\"h\":\"快速弹出窗口\",\"t\":[\"Ctrl + Q 查看光标处的文档\",\"Ctrl + Shift + I 可以查看光标处的定义\"]},\"638\":{\"h\":\"编辑器编码辅助\",\"t\":[\"F2 快速跳转到错误处\",\"Ctrl + F1 展开警告说明\",\"Alt + Shift + Enter 可以执行建议\",\"Ctrl + Shfit + F7 高亮显示文本中光标处的所有用法\"]},\"639\":{\"h\":\"导航\"},\"640\":{\"h\":\"随处搜索\",\"t\":[\"随处搜索\"]},\"641\":{\"h\":\"查找和替换\",\"t\":[\"Ctrl + Shift + F 全文查找字符串\",\"Ctrl + Shift + R 全文替换\"]},\"642\":{\"h\":\"文件结构\",\"t\":[\"Ctrl + F12 可以打开文件结构,直接输入关键词可以过滤\",\"Alt + 7 可以在左边打开小窗口\"]},\"643\":{\"h\":\"声明和用法\",\"t\":[\"Ctrl + B 跳转到方法声明\",\"如果在方法声明中使用Ctrl + B ,会展示该方法所有的引用\",\"Alt + F7 查看所有的位置结构\"]},\"644\":{\"h\":\"继承层次结构\",\"t\":[\"Ctrl + Alt +B 查看当前类所有的实现\",\"Ctrl + U 查看当前派产生类的父类\",\"Ctrl + Shift + H 查看当前的层次结构\"]},\"645\":{\"h\":\"最近的文件和位置\",\"t\":[\"Ctrl + E 查看最近使用的文件\",\"Ctrl + Shift + E 查看最近使用的位置\"]},\"646\":{\"h\":\"上一个/下一个匹配\",\"t\":[\"Ctrl + F 在当前文件中查找\",\"Enter 或 F3 切换到下一个匹配\",\"Shift + Enter  或 Shift + F3 切换到上一个匹配\"]},\"647\":{\"h\":\"初识Maven\"},\"648\":{\"h\":\"第一章：为什么要使用Maven\"},\"649\":{\"h\":\"第三方Jar包添加\",\"t\":[\"在今天的JavaEE开发领域，有大量的第三方框架和工具可以供我们使用。要使用这些jar包最简单的方法就是复制粘贴到WEB-INF目录下的lib目录下。但是这会导致每次创建一个新的工程就需要将jar包重复复制到lib目录下，从而造成工作区中存在大量重复的文件。\",\"而使用Maven后每个jar包只在本地仓库中保存一份，需要jar包的工程只需要维护一个文本形式的jar包的引用——我们称之为“坐标”。不仅极大的节约了存储空间，更避免了重复文件太多而造成的混乱。\"]},\"650\":{\"h\":\"第三方Jar包获取\",\"t\":[\"JavaEE开发中需要使用到的jar包种类繁多，几乎每个jar包在其本身的官网上的获取方式都不尽相同。为了查找一个jar包找遍互联网，身心俱疲，没有经历过的人或许体会不到这种折磨。不仅如此，费劲心血找的jar包里有的时候并没有你需要的那个类，又或者有同名的类没有你要的方法——以不规范的方式获取的jar包也往往是不规范的。\",\"使用Maven我们可以享受到一个完全统一规范的jar包管理体系。你只需要在你的项目中以坐标的方式依赖一个jar包，Maven就会自动从中央仓库进行下载，并同时下载这个jar包所依赖的其他jar包——规范、完整、准确！一次性解决所有问题！\"]},\"651\":{\"h\":\"Jar包之间的依赖关系\",\"t\":[\"jar包往往不是孤立存在的，很多jar包都需要在其他jar包的支持下才能够正常工作，我们称之为jar包之间的依赖关系。最典型的例子是：commons-fileupload-1.3.jar依赖于commons-io-2.0.1.jar，如果没有IO包，FileUpload包就不能正常工作\",\"那么问题来了，你知道你所使用的所有jar包的依赖关系吗？当你拿到一个新的从未使用过的jar包，你如何得知他需要哪些jar包的支持呢？如果不了解这个情况，导入的jar包不够，那么现有的程序将不能正常工作。再进一步，当你的项目中需要用到上百个jar包时，你还会人为的，手工的逐一确认它们依赖的其他jar包吗？这简直是不可想象的。\",\"而引入Maven后，Maven就可以替我们自动的将当前jar包所依赖的其他所有jar包全部导入进来，无需人工参与，节约了我们大量的时间和精力。用实际例子来说明就是：通过Maven导入commons-fileupload-1.3.jar后，commons-io-2.0.1.jar会被自动导入，程序员不必了解这个依赖关系\"]},\"652\":{\"h\":\"Jar包之间的冲突\",\"t\":[\"上一点说的是jar包不足项目无法正常工作，但其实有的时候jar包多了项目仍然无法正常工作，这就是jar包之间的冲突：\",\"举个例子：我们现在有三个工程MakeFriend、HelloFriend和Hello。MakeFriend依赖HelloFriend，HelloFriend依赖Hello。而Hello依赖log4j.1.2.17.jar，HelloFriend依赖log4j.1.2.14.jar。如下图所示：\",\"那么MakeFriend工程的运行时环境中该导入log4j.1.2.14.jar呢还是log4j.1.2.17.jar呢？\",\"这样的问题一个两个还可以手工解决，但如果系统中存在几十上百的jar包，他们之间的依赖关系会非常复杂，几乎不可能手工实现依赖关系的梳理。\",\"使用Maven就可以自动的处理jar包之间的冲突问题。因为Maven中内置了两条依赖原则：最短路径者优先和先声明者优先，上述问题MakeFriend工程会自动使用log4j.1.2.14.jar。\"]},\"653\":{\"h\":\"将项目拆分成多个工程模块\",\"t\":[\"随着JavaEE项目的规模越来越庞大，开发团队的规模也与日俱增。一个项目上千人的团队持续开发很多年对于JavaEE项目来说再正常不过。那么我们想象一下：几百上千的人开发的项目是同一个Web工程。那么架构师、项目经理该如何划分项目的模块、如何分工呢？这么大的项目已经不可能通过package结构来划分模块，必须将项目拆分成多个工程协同开发。多个模块工程中有的是Java工程，有的是Web工程。\",\"那么工程拆分后又如何进行互相调用和访问呢？这就需要用到Maven的依赖管理机制。例如：某项目拆分的情况如下。\",\"上层模块依赖下层，所以下层模块中定义的API都可以为上层所调用和访问。\"]},\"654\":{\"h\":\"实现项目的分布式部署\",\"t\":[\"在实际生产环境中，项目规模增加到一定程度后，可能每个模块都需要运行在独立的服务器上，我们称之为分布式部署，这里同样需要用到Maven。\"]},\"655\":{\"h\":\"第二章：Maven是什么\",\"t\":[\"Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件。 Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。\"]},\"656\":{\"h\":\"自动化构建\",\"t\":[\"（1）Maven这个单词的本意是：专家，内行。读音是['meɪv(ə)n]或['mevn]，不要读作“妈文”。\",\"（2）Maven是一款自动化构建工具，专注服务于Java平台的项目构建和依赖管理。在JavaEE开发的历史上构建工具的发展也经历了一系列的演化和变迁：Make→Ant→Maven→Gradle→其他……\"]},\"657\":{\"h\":\"构建的 概念\",\"t\":[\"构建并不是创建，创建一个工程并不等于构建一个项目。要了解构建的含义我们应该由浅入深的从以下三个层面来看：\"]},\"658\":{\"h\":\"（1）纯Java代码\",\"t\":[\"大家都知道，我们Java是一门编译型语言，.java扩展名的源文件需要编译成.class扩展名的字节码文件才能够执行。所以编写任何Java代码想要执行的话就必须经过编译得到对应的.class文件。\"]},\"659\":{\"h\":\"（2）Web工程\",\"t\":[\"当我们需要通过浏览器访问Java程序时就必须将包含Java程序的Web工程编译的结果“拿”到服务器上的指定目录下，并启动服务器才行。这个“拿”的过程我们叫部署。\",\"我们可以将未编译的Web工程比喻为一只生的鸡，编译好的Web工程是一只煮熟的鸡，编译部署的过程就是将鸡炖熟。\",\"Web工程和其编译结果的目录结构对比见下图：\"]},\"660\":{\"h\":\"（3）实际项目\",\"t\":[\"在实际项目中整合第三方框架，Web工程中除了Java程序和JSP页面、图片等静态资源之外，还包括第三方框架的jar包以及各种各样的配置文件。所有这些资源都必须按照正确的目录结构部署到服务器上，项目才可以运行。\",\"所以综上所述：构建就是以我们编写的Java代码、框架配置文件、国际化等其他资源文件、JSP页面和图片等静态资源作为“原材料”，去“生产”出一个可以运行的项目的过程。\"]},\"661\":{\"h\":\"构建的环节\"},\"662\":{\"h\":\"（1）清理\",\"t\":[\"删除以前的编译结果，为重新编译做好准备。\"]},\"663\":{\"h\":\"（2）编译\",\"t\":[\"将Java源程序编译为字节码文件。\"]},\"664\":{\"h\":\"（3）测试\",\"t\":[\"针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。\"]},\"665\":{\"h\":\"（4）报告\",\"t\":[\"在每一次测试后以标准的格式记录和展示测试结果。\"]},\"666\":{\"h\":\"（5）打包\",\"t\":[\"将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对应war包。\"]},\"667\":{\"h\":\"（6）安装\",\"t\":[\"在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。\"]},\"668\":{\"h\":\"（7）部署\",\"t\":[\"将打包的结果部署到远程仓库或将war包部署到服务器上运行。\"]},\"669\":{\"h\":\"运行并调试\"},\"670\":{\"h\":\"运行\",\"t\":[\"Ctrl + Shift + F10 快速运行\",\"Shift 按住 然后点击下图按钮,可以编辑配置运行\"]},\"671\":{\"h\":\"调试\",\"t\":[\"Shift + F9 或点击下列图标开始调试程序\",\"对于可能出错的代码,我们可以粘贴到下列监视窗口中\",\"点击按钮添加到监视或者Ctrl +Shift +Enter 或者Ctrl +Shift +A 然后输入添加到监视\",\"F7 或者 步入调试时,多个调用都会高亮,可以使用←→来控制选择 然后Enter进入\",\"Ctrl + Alt + F8 对所选表达式快速求值\",\"Ctrl + F9 热交换部署,即使修改生效,不用重新启动程序\",\"Ctrl +Shift + A 搜索重置帧 或者点击下图按钮\",\"F8 下一步\",\"F9 执行到下次断点\",\"Alt+ F9 执行程序到光标处\",\"Ctrl +F2结束调试\"]},\"672\":{\"h\":\"Maven的使用\"},\"673\":{\"h\":\"第三章：Maven的使用\"},\"674\":{\"h\":\"3.1 安装Maven核心程序\",\"t\":[\"1）检查JAVA_HOME环境变量。Maven是使用Java开发的，所以必须知道当前系统环境中JDK的安装目录。\",\"C:\\\\Windows\\\\System32>echo %JAVA_HOME% D:\\\\Java\\\\jdk1.8.0_111 \",\"2）解压Maven的核心程序。将apache-maven-3.2.2-bin.zip解压到一个非中文无空格的目录下。例如：\",\"D:\\\\apache-maven-3.2.2 \",\"3）配置环境变量。\",\"（1）在系统变量里面创建M2_HOME变量，并赋值\",\"变量：M2_HOME 值：D:\\\\apache-maven-3.2.2 \",\"（2）在Path变量中，添加maven环境变量\",\"变量：Path 值：%M2_HOME%\\\\bin或D:\\\\apache-maven-3.2.2\\\\bin \",\"4）查看Maven版本信息验证安装是否正确\",\"（1）按Win +r，进入电脑运行模式；\",\"（2）在打开里面输入：cmd\",\"（3）在管理员窗口输入\",\"C:\\\\Users\\\\Administrator>mvn -v\"]},\"675\":{\"h\":\"3.2 Maven的本地仓库配置\",\"t\":[\"（1）Maven默认的本地仓库：~\\\\.m2\\\\repository目录。\",\"说明：~表示当前用户的家目录。\",\"（2）Maven的核心配置文件位置：\",\"解压目录D:\\\\apache-maven-3.2.2\\\\conf\\\\settings.xml\",\"（3）本地仓库地址更改到E:\\\\LocalRepository，默认在C:\\\\Users\\\\Administrator\\\\.m2\\\\repository\",\"<localRepository>E:\\\\LocalRepository</localRepository> \",\"（4）配置阿里云镜像（下载速度快）\",\"<mirror> <id>nexus-aliyun</id> <mirrorOf>central</mirrorOf> <name>Nexus aliyun</name> <url>http://maven.aliyun.com/nexus/content/groups/public</url> </mirror> \"]},\"676\":{\"h\":\"3.3 在IDEA中配置Maven\",\"t\":[\"1）close project所有项目后，回到如下页面，点击右下角的Configure=》点击setting\",\"2）设置Maven的安装目录及本地仓库\",\"ØMaven home directory： 可以指定本地 Maven 的安装目录所在，因为我已经配置了M2_HOME系统参数，所以直接这样配置IntelliJ IDEA是可以找到的。但是假如你没有配置的话，这里可以选择你的Maven安装目录。此外，这里不建议使用IDEA默认的。\",\"Ø User settings file / Local repository：我们还可以指定 Maven 的 settings.xml 位置和本地仓库位置。\",\"3) 配置Maven自动导入依赖的jar包\",\"Ø Import Maven projects automatically：表示 IntelliJ IDEA 会实时监控项目的 pom.xml 文件，进行项目变动设置，勾选上。\",\"Ø Automatically download：在 Maven 导入依赖包的时候是否自动下载源码和文档。默认是没有勾选的，也不建议勾选，原因是这样可以加快项目从外网导入依赖包的速度，如果我们需要源码和文档的时候我们到时候再针对某个依赖包进行联网下载即可。IntelliJ IDEA 支持直接从公网下载源码和文档的。\",\"Ø VM options for importer：可以设置导入的VM参数。一般这个都不需要主动改，除非项目真的导入太慢了我们再增大此参数。\"]},\"677\":{\"h\":\"3.4 创建Maven程序\"},\"678\":{\"h\":\"3.4.1 创建项目\"},\"679\":{\"h\":\"3.4.2 项目结构\",\"t\":[\"Ø main目录用于存放主程序。\",\"Ø java目录用于存放源代码文件。\",\"Ø resources目录用于存放配置文件和资源文件。\",\"Ø test目录用于存放测试程序。\"]},\"680\":{\"h\":\"3.4.3 配置Maven的核心配置文件pom.xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <!--当前的Maven模块的坐标信息--> <groupId>maven</groupId> <artifactId>Hello</artifactId> <version>1.0-SNAPSHOT</version> <!--添加依赖--> <dependencies> <!--junit的依赖坐标--> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <!-- scope标签决定了当前依赖的生效范围 main和test 如果不写，默认是compile，表示主程序和测试程序都生效 如果设置成provided的话，则表示 主程序和测试程序都生效且实时加载 --> <scope>test</scope> </dependency> </dependencies> </project> \"]},\"681\":{\"h\":\"3.4.4 Maven的命令\"},\"682\":{\"h\":\"Maven的核心概念\"},\"683\":{\"h\":\"4.1 POM\",\"t\":[\"Project Object Model：项目对象模型。将Java工程的相关信息封装为对象作为便于操作和管理的模型。使用pom.xml文件描述整个模块的思想\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.meturing.maven</groupId> <artifactId>mavenDemo</artifactId> <version>1.0-SNAPSHOT</version> <dependencies> <dependency> <!--1.组ID: 公司域名倒写 www.tedu.cn--> <groupId>junit</groupId> <!--2.项目名称唯一--> <artifactId>junit</artifactId> <!--3.版本号 唯一的--> <version>4.12</version> <!--了解: 什么时候有效--> <scope>test</scope> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.46</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.1.10</version> </dependency> <dependency> <groupId>commons-dbutils</groupId> <artifactId>commons-dbutils</artifactId> <version>1.4</version> </dependency> </dependencies> </project> \"]},\"684\":{\"h\":\"4.2 约定目录结构\",\"t\":[\"Maven项目有自己的一套规范，有默认约定好的目录结构，之所以能够自动化构建项目和管理jar包，完全取决于约定好的设计\",\"约定 > 配置 > 编码\"]},\"685\":{\"h\":\"4.3 坐标\",\"t\":[\"Maven中的坐标它就是体现当前Maven工程的唯一性，而且也是将来引用此jar包的唯一路径\",\"<dependency> <!--1.组ID: 公司域名倒写 com.meturing.demo--> <groupId>junit</groupId> <!--2.项目名称唯一--> <artifactId>junit</artifactId> <!--3.版本号 唯一的--> <version>4.12</version> <!--了解: 什么时候有效--> <scope>test</scope> </dependency> \",\"命名规范 （1）groupId：公司或组织的域名倒序+当前项目名称 （2）artifactId：当前项目的模块名称 （3）version：当前模块的版本\",\"在本地仓库中，jar包的位置与Maven的坐标一一对应，如果遇到Jar包下载不全等其他问题，可以在本地仓库删除文件再重新导入\"]},\"686\":{\"h\":\"4.4 依赖管理\"},\"687\":{\"h\":\"4.4.1 概念\",\"t\":[\"Maven项目之间可以通过坐标相互进行依赖\",\"如果A依赖B，B依赖C，那么A→B和B→C都是直接依赖，而A→C是间接依赖。\"]},\"688\":{\"h\":\"4.4.2 依赖范围\",\"t\":[\" <!--添加依赖--> <dependencies> <!--junit的依赖坐标--> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <!-- scope标签决定了当前依赖的生效范围 main和test 如果不写，默认是compile，表示主程序和测试程序都生效 如果设置成provided的话，则表示 主程序和测试程序都生效且实时加载 --> <scope>test</scope> </dependency> </dependencies> \"]},\"689\":{\"h\":\"4.4.2.1 compile（默认）\",\"t\":[\"（1）main目录下的Java代码可以访问这个范围的依赖 （2）test目录下的Java代码可以访问这个范围的依赖 （3）部署到Tomcat服务器上运行时要放在WEB-INF的lib目录下 例如：对Hello的依赖。主程序、测试程序和服务器运行时都需要用到。\"]},\"690\":{\"h\":\"4.4.2.2 test\",\"t\":[\"（1）main目录下的Java代码不能访问这个范围的依赖 （2）test目录下的Java代码可以访问这个范围的依赖 （3）部署到Tomcat服务器上运行时不会放在WEB-INF的lib目录下 例如：对junit的依赖。仅仅是测试程序部分需要。\"]},\"691\":{\"h\":\"4.4.2.3 provided\",\"t\":[\"（1）main目录下的Java代码可以访问这个范围的依赖 （2）test目录下的Java代码可以访问这个范围的依赖 （3）部署到Tomcat服务器上运行时不会放在WEB-INF的lib目录下 例如：servlet-api在服务器上运行时，Servlet容器会提供相关API，所以部署的时候不需要。\"]},\"692\":{\"h\":\"4.4.2.4 其他runtime、import、system等\"},\"693\":{\"h\":\"4.4.3 依赖的传递性\",\"t\":[\"用户添加jar包时,maven工具会根据jar包的坐标,去本地仓库中查找指定的jar包文件. \",\"找到jar包并且实现了jar包文件的依赖. \",\"同时加载当前目录下的pom文件,通过标签 加载其它的依赖项. \",\"循环执行上述的操作 直到所有的jar包依赖完成为止.\",\"多个Maven工程之间相互依赖具有传递性，但是是否能够传递还要取决于被传递者的使用范围\"]},\"694\":{\"h\":\"4.4.5 Jar包冲突\"},\"695\":{\"h\":\"路径最短则优先\"},\"696\":{\"h\":\"路径相同时先声明的优先\",\"t\":[\"这里“声明”的先后顺序指的是dependency标签配置的先后顺序。\"]},\"697\":{\"h\":\"4.4.6 依赖的排除\",\"t\":[\" <!--依赖排除--> <exclusions> <exclusion> <groupId>commons-logging</groupId> <artifactId>commons-logging</artifactId> </exclusion> </exclusions> \"]},\"698\":{\"h\":\"4.5 版本统一管理\"},\"699\":{\"h\":\"4.5.1 在pom.xml中创建自定义标签\",\"t\":[\"<!--统一管理当前模块的jar包的版本--> <properties> <spring.version>4.0.0.RELEASE</spring.version> </properties> \"]},\"700\":{\"h\":\"4.5.2 在指定位置使用标签\",\"t\":[\"<dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>${spring.version}</version> </dependency> \"]},\"701\":{\"h\":\"4.6 Maven的安全性保障机制\",\"t\":[\"为了避免jar包在网络中进行传输.可能会被篡改，Maven采用sha1算法校验机制\"]},\"702\":{\"h\":\"4.6.1 sha1算法\",\"t\":[\"SHA-1（英语：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种密码散列函数，美国国家安全局设计，并由美国国家标准技术研究所（NIST）发布为联邦数据处理标准（FIPS）。SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数。\",\"对数据采用算法进行计算生成摘要信息，当数据传递到本地也会生成摘要信息。 之后对比2个摘要数据。判断数据是否相同\",\"但是，由于底层采用了hash码，所以拥有以下特性：\",\"对相同数据,采用相同的hash算法, 问: 结果是否相同? 答:必定相同\",\"不同的数据,采用相同的hash算法, 问: 结果是否不同? 答: 可能相同，可能出现hash碰撞\"]},\"703\":{\"h\":\"4.6.2 哈希碰撞\",\"t\":[\"由于哈希码长度的局限性，在资源的文件的种类无限多样化的前提下，哈希码可能会出现不同的数据出现相同的哈希码，这种情况叫做hash碰撞\",\"为了避免哈希碰撞出现的概率，我们可以增加哈希码的长度，弱化出现哈希碰撞的概率\"]},\"704\":{\"h\":\"4.6 仓库\"},\"705\":{\"h\":\"4.6.1 仓库分类\",\"t\":[\"本地仓库：为当前本机电脑上的所有Maven工程服务。远程仓库私服：架设在当前局域网环境下，为当前局域网范围内的所有Maven工程服务。中央仓库：架设在Internet上，为全世界所有Maven工程服务。中央仓库的镜像：架设在各个大洲，为中央仓库分担流量。减轻中央仓库的压力，同时更快的响应用户请求。\"]},\"706\":{\"h\":\"4.6.2 仓库中的文件\",\"t\":[\"（1）Maven的插件 （2）我们自己开发的项目的模块 （3）第三方框架或工具的jar包\",\"不管是什么样的jar包，在仓库中都是按照坐标生成目录结构，所以可以通过统一的方式查询或依赖。\"]},\"707\":{\"h\":\"4.7 生命周期\"},\"708\":{\"h\":\"4.7.1 Clean Lifecycle\",\"t\":[\"在进行真正的构建之前进行一些清理工作。\"]},\"709\":{\"h\":\"4.7.2 Default Lifecycle\",\"t\":[\"构建的核心部分，编译，测试，打包，安装，部署等等。\"]},\"710\":{\"h\":\"4.7.3 Site Lifecycle\",\"t\":[\"生成项目报告，站点，发布站点。\"]},\"711\":{\"h\":\"4.8 插件和目标\",\"t\":[\"（1）Maven的核心仅仅定义了抽象的生命周期，具体的任务都是交由插件完成的。\\n（2）每个插件都能实现多个功能，每个功能就是一个插件目标。\\n（3）Maven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。\\n例如：compile就是插件maven-compiler-plugin的一个功能；pre-clean是插件maven-clean-plugin的一个目标。\"]},\"712\":{\"h\":\"继承与聚合\"},\"713\":{\"h\":\"第五章 继承\",\"t\":[\"使用继承机制就可以将这样的依赖信息统一提取到父工程模块中进行统一管理\"]},\"714\":{\"h\":\"方式一：<dependencyManagement>标签\",\"t\":[\"第一步：配置父类的Module修改pom.xml\",\"项目中的dependencies标签，用dependencyManagement标签括起来\",\" <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.meturing.maven</groupId> <artifactId>mavenDemo01</artifactId> <version>1.0-SNAPSHOT</version> <!-- 挂载父类打包的类型 默认是jar包 jar/pom/war --> <packaging>pom</packaging> <!--统一管理依赖的版本--> <dependencyManagement> <dependencies> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13</version> </dependency> </dependencies> </dependencyManagement> </project> \",\"第二步：在子类的Module修改pom.xml\",\"重新指定需要的依赖，删除范围和版本号\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <!--实现继承--> <parent> <groupId>com.meturing.maven</groupId> <artifactId>mavenDemo01</artifactId> <version>1.0-SNAPSHOT</version> <relativePath>../mavenDemo01/pom.xml</relativePath> </parent> <!--当前的Maven模块的坐标信息--> <groupId>maven</groupId> <artifactId>Hello</artifactId> <version>1.0-SNAPSHOT</version> <!--添加依赖--> <dependencies> <!--junit的依赖坐标--> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <!-- 如果子类标注了版本号，则以子类为主 若子类没有标注版本号，则归父类管理 <version>4.12</version> --> </dependency> </dependencies> </project> \"]},\"715\":{\"h\":\"方式二：父类不使用<dependencyManagement>标签\",\"t\":[\"第一步：配置父类的Module修改pom.xml\",\" <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.meturing.maven</groupId> <artifactId>mavenDemo01</artifactId> <version>1.0-SNAPSHOT</version> <!-- 挂载父类打包的类型 默认是jar包 jar/pom/war --> <packaging>pom</packaging> <!--统一管理依赖的版本--> <dependencies> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13</version> </dependency> </dependencies> </project> \",\"第二步：在子类的Module修改pom.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <!--实现继承--> <parent> <groupId>com.meturing.maven</groupId> <artifactId>mavenDemo01</artifactId> <version>1.0-SNAPSHOT</version> <relativePath>../mavenDemo01/pom.xml</relativePath> </parent> <!--当前的Maven模块的坐标信息--> <groupId>maven</groupId> <artifactId>Hello</artifactId> <version>1.0-SNAPSHOT</version> <!--添加依赖--> <dependencies> <!--无需添加jar包的依赖，自动引用父类--> </dependencies> </project> \"]},\"716\":{\"h\":\"方式三：在IDEA中的父Module中创建子Module\"},\"717\":{\"h\":\"第六章 聚合\",\"t\":[\"使用了聚合之后就可以批量进行Maven工程的安装、清理工作。\"]},\"718\":{\"h\":\"如何配置聚合\",\"t\":[\"总的聚合工程中使用modules/module标签组合，指定模块工程的相对路径即可\",\"<!--聚合--> <modules> <module>../MakeFriend</module> <module>../OurFriends</module> <module>../HelloFriend</module> <module>../Hello</module> </modules> \"]},\"719\":{\"h\":\"初识Git\"},\"720\":{\"h\":\"概述\"},\"721\":{\"h\":\"介绍\",\"t\":[\"Git是目前世界上最先进的分布式版本控制系统（Distributed Version Control System，简称 DVCS）\"]},\"722\":{\"h\":\"Git工作机制\"},\"723\":{\"h\":\"版本控制工具\",\"t\":[\"集中式版本控制工具\",\"CVS、SVN(Subversion)、VSS……\",\"SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器下载最新的版本，然后开发代码，写完代码后需要把自己的代码推送到中央服务器。\",\"缺点： \",\"服务器单点故障\",\"容错性差\",\"分布式版本控制工具\",\"Git、Mercurial、Bazaar、Darcs……\",\"仓库：\",\"本地仓库：是在开发人员自己电脑上的Git仓库 \",\"远程仓库：是在远程服务器上的Git仓库 \",\"团队内协作\",\"跨团队协作\",\"操作：\",\"clone：克隆，就是将远程仓库复制到本地\",\"push：推送，就是将本地仓库代码上传到远程仓库\",\"pull：拉取，就是将远程仓库代码下载到本地仓库\",\"Commit：提交，就是将本地工作区代码上传到本地仓库中\",\"优点：\",\"容灾能力强\",\"本地版本管理\",\"异地协作\",\"灵活分支\"]},\"724\":{\"h\":\"安装、环境搭建\"},\"725\":{\"h\":\"安装\",\"t\":[\"安装步骤 出现安全警告，点击运行 浏览协议，下一步 安装目录，所需要磁盘空间大小，下一步 Git Bash需要安装的，其他默认即可，下一步 开始菜单，下一步 默认编辑器，下一步 选择Git命令的执行环境 \",\"这里推荐选择第一个，就是单独用户Git自己的命令行窗口。\",\"不推荐和windows的命令行窗口混用。 HTTPS传输：使用SSL传输协议 在“Configuring the line ending conversions”选项中， 第一个选项：如果是跨平台项目，在windows系统安装 第二个选项：如果是跨平台项目，在Unix系统安装 第三个选项：非跨平台项目 在“terminal emulator”选项中， 第一个选项：使用专用的Git窗口（推荐） 第二个选项：使用windows的cmd命令行窗口。 在“Configuring extra”选项中，默认开启文件缓存即可（推荐） 新功能，还不稳定，不勾选，开始安装 安装完成\"]},\"726\":{\"h\":\"设置全局用户签名\",\"t\":[\"安装完成后，在任意的文件目录下，右键都可以开打Git的命令行窗口——Git Bash Here\",\"Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识——即：用户签名 \",\"说明 \",\"签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。\",\"注意：这里设置用户签名和将来登录GitHub（或其他代码托管中心）的账号没有任何关系。\",\"命令：git config --global user.name \\\"用户名\\\"git config --global user.email \\\"用户邮箱\\\"\",\"--global 表示全局属性，所有的git项目都会共用属性\",\"查看配置信息：git config --list\",\"在当前登录的系统用户路径下，生成~/.gitconfig隐含文件，里面可以看到刚刚设置的信息。如果不用命令设置，也可以直接打开文件进行设置。\"]},\"727\":{\"h\":\"相关概念\"},\"728\":{\"h\":\"理解工作区、版本库、暂存区概念\",\"t\":[\"工作区(Working Directory)：就是你电脑本地硬盘目录，一般是项目当前目录\",\"版本库(Repository)：工作区有个隐藏目录.git，它就是Git的本地版本库\",\"暂存区(stage)：一般存放在\\\"git目录\\\"下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）\",\"分支（Branch）：Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD\"]},\"729\":{\"h\":\"提交Git版本库分两步执行\",\"t\":[\"第一步 用“git add”把文件纳入Git管理，实际是把本地文件修改添加到暂存区\",\"第二步 用“git commit”提交更改，实际上就是把暂存区的所有内容提交到当前分支 \",\"因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以commit就是往master分支上提交更改。\",\"可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。一旦提交完后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的。 即：nothing to commit (working directory clean)。\",\"其他操作\\n①用“git diff HEAD -- filename”命令可以查看工作区和暂存区里面最新版本的区别。\\n②新建过撤销未add： git checkout  -- 文件名\\n③撤销已add未commit：先git  reset HEAD  文件名，再 git checkout -- 文件名\\n④撤销已add已commit：git reset --hard HEAD^\"]},\"730\":{\"h\":\"Git本地库实战\"},\"731\":{\"h\":\"常用命令预览\",\"t\":[\"命令名称 \",\"命令作用 \",\"git init \",\"初始化本地库 \",\"git config --global user.name 用户名 \",\"设置用户签名的用户名部分 \",\"git config --global user.email 邮箱 \",\"设置用户签名的邮箱部分 \",\"git status \",\"查看本地库状态 \",\"git add 文件名 \",\"添加到暂存区 \",\"git commit -m \\\"日志信息\\\" 文件名 \",\"提交到本地库 \",\"git reflog \",\"查看历史记录 \",\"git reset --hard 版本号 \",\"版本穿梭 \"]},\"732\":{\"h\":\"初始化版本库\",\"t\":[\"初始化: git init\",\"查看当前目录产生.git隐藏文件夹\",\"注意：当前的 .git 是一个隐藏文件夹，需要在电脑上面设置隐藏文件夹显示设置，否则，看不到这个.git目录\"]},\"733\":{\"h\":\"新建提交状态\"},\"734\":{\"h\":\"状态\",\"t\":[\"语法 : git statusOn branch master ：表示主分支Untracked files ：表示未跟踪状态\",\"Git工作目录下的文件状态信息：\",\"Untracked 未跟踪（未被纳入版本控制）\",\"Tracked 已跟踪（被纳入版本控制）\",\"Unmodified 未修改状态\",\"Modified 已修改状态\",\"Staged 已暂存状态\",\"这些文件的状态会随着我们执行Git的命令发生变化,这些文件的状态会随着我们执行Git的命令发生变化\",\"红色表示新建文件或者新修改的文件,都在工作区.\",\"绿色表示文件在暂存区\",\"新建的文件在工作区，需要添加到暂存区并提交到仓库区\",\"也可以使用git status –s 使输出信息更加简洁,?? : 表示未跟踪状态\"]},\"735\":{\"h\":\"暂存区\"},\"736\":{\"h\":\"添加到暂存区\",\"t\":[\"提交指定文件 : git add <文件名称> 只是增加到栈空间（index文件）中，还没有添加到本地库中。初始化时没有这个index文件。这还是一个新文件，需要将栈空间文件提交到本地仓库。\",\"git add . -> 添加项目中所有文件\",\"添加未存在文件会出错：fatal: pathspec 'xxxx' did not match any files\"]},\"737\":{\"h\":\"撤销暂存区文件\",\"t\":[\"撤销暂存区的文件 : git reset <文件名称>\",\"撤销后，查看文件状态（git status）文件由绿色变为红色\"]},\"738\":{\"h\":\"本地库\",\"t\":[\"将暂存区文件提交到本地库 : git commit 执行命令时需要填写提交日志，进入编辑模式\",\"git commit –m \\\"注释内容\\\" -> 直接用-m参数指定日志内容，推荐\",\"commit 会生成一条版本记录，add只是添加暂存区，不会生成版本记录\",\"建议多次add后，一次性commit，避免每次add都commit产生版本信息爆炸。\",\"git commit -am \\\"注释内容\\\" -> 添加和提交合并命令,代码编辑完成后即可进行 add 和 commit 操作.\"]},\"739\":{\"h\":\"查看日志\",\"t\":[\"查看日志指令 : git loggit log filename -> 查看文件日志(查看所有日志或某个文件日志),q退出git log --pretty=oneline -> 如果日志很多,可以在一行显示git reflog -> 查看历史操作\"]},\"740\":{\"h\":\"回退/穿梭/撤销\"},\"741\":{\"h\":\"回退\",\"t\":[\"回退到历史版本 : git reset --hard HEAD^ 一次回退一个版本，一个^代表一个版本数量\",\"git reset --hard HEAD~n -> 回退n次操作\"]},\"742\":{\"h\":\"穿梭\",\"t\":[\"git reflog filename -> 查看历史操作git reset --hard 版本号 -> 回到最新的版本\"]},\"743\":{\"h\":\"撤销\",\"t\":[\"撤销修改(还原原来的文件)\",\"未add，未commit : git checkout -- filename 已add，未commit : git reset\"]},\"744\":{\"h\":\"分支\",\"t\":[\"几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。\",\"Git 的master分支并不是一个特殊分支。 它跟其它分支没有区别。 之所以几乎每一个仓库都有 master 分支，是因为git init 命令默认创建它，并且大多数人都懒得去改动它。\"]},\"745\":{\"h\":\"实际开发流程\"},\"746\":{\"h\":\"分支概念\",\"t\":[\"在使用版本控制工具开发的过程中，同时推进多个任务\"]},\"747\":{\"h\":\"分支的好处\",\"t\":[\"同时并行推进多个功能开发，提高开发效率\",\"各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。\"]},\"748\":{\"h\":\"分支操作\",\"t\":[\"命令名称 \",\"作用 \",\"git branch 分支名\",\"创建分支 \",\"git branch -v\",\"查看分支 \",\"git checkout 分支名\",\"切换分支 \",\"git merge 分支名\",\"把指定的分支合并到当前分支上 \",\"切换分支的本质就是移动HEAD指针。\"]},\"749\":{\"h\":\"实战(版本冲突)\"},\"750\":{\"h\":\"冲突产生的表现\",\"t\":[\"Git使用 <<<<<<< ========= >>>>>>>>>> 符号帮我们标记出来，现在产生冲突的内容。\",\"<<<<<<< HEAD Hello Git!I am very happy! &&&&&&&&&&&&& Hello Git!I am very happy! ======= Hello Git!I am very happy! Hello Git!I am very happy! ************ >>>>>>> hotfix \",\"表示HEAD指针指向的位置在冲突中的内容\"]},\"751\":{\"h\":\"冲突产生的原因\",\"t\":[\"合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须人为决定新代码内容。\"]},\"752\":{\"h\":\"冲突的解决\",\"t\":[\"①编辑有冲突的文件，删除特殊符号，决定要使用的内容\",\"②添加到暂存区\",\"③执行提交（注意：使用git commit命令时不能带文件名）\"]},\"753\":{\"h\":\"避免冲突\",\"t\":[\"容易冲突的操作方式 \",\"多个人同时操作了同一个文件\",\"一个人一直写不提交\",\"修改之前不更新最新代码\",\"提交之前不更新最新代码\",\"擅自修改同事代码\",\"减少冲突的操作方式 \",\"养成良好的操作习惯 ，先pull在修改,修改完立即commit和push\",\"一定要确保自己正在修改的文件是最新版本的\",\"各自开发各自的模块\",\"如果要修改公共文件，一定要先确认有没有人正在修改\",\"下班前一定要提交代码,上班第一件事拉取最新代码\",\"一定不要擅自修改同事的代码\"]},\"754\":{\"h\":\"GitHub远程库常用操作\"},\"755\":{\"h\":\"团队协作的常用流程\"},\"756\":{\"h\":\"Fork 跨团队协作\"},\"757\":{\"h\":\"概念\",\"t\":[\"现在的情景是，用叉子把别人的东西（copy no cut）叉到你的碗里～\",\"就是把别人的项目clone一份，但是owner变成自己，这样你就可以在遵守Open source license的前提下任意修改这个项目了。\",\"相当于你在原项目的主分支上又建立了一个分支，你可以在该分支上任意修改，如果想将你的修改合并到原项目中时，可以pull request，\",\"这样原项目的作者就可以将你修改的东西合并到原项目的主分支上去，这样你就为开源项目贡献了代码，开源项目就会在大家共同的努力下不断壮大和完善。\"]},\"758\":{\"h\":\"演示Fork\"},\"759\":{\"h\":\"背景\",\"t\":[\"zhangsan和lisi是一个团队的人，wangwu是另一个团队的人\",\"第三方账号登录（wangwu），搜索某账号找到某项目(zhangsan)，然后点击Fork按钮，这样就将该项目克隆一份到当前账号(wangwu)内，然后进行修改，提交pull request，告诉对方(zhangsan)已经修改了，请求合并；\",\"当前用户登录(zhangsan)后，可以看到小铃铛中的消息提醒，查看到pull request，然后，选择合并或拒绝。\"]},\"760\":{\"h\":\"步骤\",\"t\":[\"①[wangwuatguigu]获取[zhangsanatguigu]的项目URL(可以进行搜索,也可以通过email发送url地址告知)\",\"②[wangwuatguigu]点击[Fork]，产生分支\",\"③[wangwuatguigu]修改项目文件.(可以pull本地后修改,也可以在github上直接进行修改.)\",\"④[wangwuatguigu]-> [New pull request]\",\"⑤[wangwuatguigu]->[Create pull request]->[填写pull request信息]\",\"⑥分支已提交到主分支\",\"⑦[zhangsanatguigu]和[lisiatguigu]都可以看到[wangwuatguigu]提交的项目内容.\",\"⑧[zhangsanatguigu]合并项目,点击[Merge pull request]->点击[Confirm merge]\",\"⑨[zhangsanatguigu]查看项目代码，合并完成，OK\"]},\"761\":{\"h\":\"解决重复输入密码问题\"},\"762\":{\"h\":\"两种模式：https VS ssh\",\"t\":[\"ssh模式比https模式的一个重要好处就是，每次push，pull，fetch等操作时不用重复填写用户名密码。\",\"前提是你必须是这个项目的拥有者或合作者，且配好了ssh key\"]},\"763\":{\"h\":\"如何配置ssh key\",\"t\":[\"①步骤1：检查电脑家目录下是否已经生成了SSH key，如果有.ssh目录删除即可\",\"②步骤2：创建SSH Key : ssh-keygen -t rsa -C lisiatguigu\",\"成功的话(执行命令不需要输入任何内容)，会在~/下生成.ssh文件夹，查看生成两个文件:id_rsa 和 id_rsa.pub 打开id_rsa.pub，复制里面的内容，到github上\",\"③步骤3：登录[lisiatguigu]账户 打开用户设置 点击[SSH and GPG keys] 填写Title和Key，点击[Add SSH key]\",\"④重新建立github连接,如果之前配置过则删除，重新配置 命令：git remote add originssh sshpathgit push originssh master\",\"修改文件，重新提交,不需要再输入用户名和密码了\"]},\"764\":{\"h\":\"注意问题\",\"t\":[\"一个账户只能设置一个默认密码. 如果有多个账号存在的话，只能选择设置其中某一个\"]},\"765\":{\"h\":\"配置Git忽略文件\"},\"766\":{\"h\":\"哪些文件要忽略\"},\"767\":{\"h\":\"Eclipse特定文件\"},\"768\":{\"h\":\"IDEA特定文件\"},\"769\":{\"h\":\"Maven工程的target目录\"},\"770\":{\"h\":\"为什么要忽略它们\",\"t\":[\"与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽IDE工具之间的差异。\"]},\"771\":{\"h\":\"怎么忽略\"},\"772\":{\"h\":\"创建忽略规则文件（git.ignore）\",\"t\":[\"这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig文件引用，建议也放在用户家目录下\",\"# Compiled class file *.class # Log file *.log # BlueJ files *.ctxt # Mobile Tools for Java (J2ME) .mtj.tmp/ # Package Files # *.jar *.war *.nar *.ear *.zip *.tar.gz *.rar # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml hs_err_pid* .classpath .project .settings target .idea *.iml \"]},\"773\":{\"h\":\"在.gitconfig文件中引用忽略规则文件\",\"t\":[\"[user] name = peter email = peter@atguigu.com [core] excludesfile = C:/Users/xxxxx/git.ignore \",\"注意：这里要使用“正斜线（/）”，不要使用“反斜线（\\\\）”\"]},\"774\":{\"h\":\"IDEA集成Git\"},\"775\":{\"h\":\"IDEA集成Git\"},\"776\":{\"h\":\"配置Git程序\"},\"777\":{\"h\":\"初始化本地库\"},\"778\":{\"h\":\"添加到暂存区\"},\"779\":{\"h\":\"提交到本地库\"},\"780\":{\"h\":\"创建分支\"},\"781\":{\"h\":\"切换分支\",\"t\":[\"在IDEA窗口的右下角\"]},\"782\":{\"h\":\"合并分支\"},\"783\":{\"h\":\"解决冲突\",\"t\":[\"在和远程库交互过程中也有可能发生冲突，因为解决办法一样，所以这里按照分支操作过程中产生的冲突来演示。\"]},\"784\":{\"h\":\"冲突的产生\",\"t\":[\"仍然是同一个文件在同一个位置有不同内容。\"]},\"785\":{\"h\":\"合并分支\"},\"786\":{\"h\":\"看到冲突提示\",\"t\":[\"这里可以直接点“Accept Yours”或者“Accept Theirs”来解决冲突。这代表完全使用我们的内容或完全使用他们的内容。\",\"如果我们想要详细修改冲突内容则点击Close。此时IDEA会提示Resolve\"]},\"787\":{\"h\":\"冲突的表现\"},\"788\":{\"h\":\"点击Resolve\"},\"789\":{\"h\":\"点击Merge...\",\"t\":[\"根据需要调整完成后点击“Save changes and finish merging”\",\"然后提交到本地库就好啦！\"]},\"790\":{\"h\":\"在IDEA中连接GitHub\"},\"791\":{\"h\":\"保存GitHub账号\"},\"792\":{\"h\":\"分享工程到GitHub\"},\"793\":{\"h\":\"Clone\"},\"794\":{\"h\":\"Push\"},\"795\":{\"h\":\"Pull\"},\"796\":{\"h\":\"Git工作流与私服\"},\"797\":{\"h\":\"Git工作流\",\"t\":[\"简单来说就是，一个项目的成员们在工作中统一使用Git的工作方式。\",\"Gitflow工作流通过为功能开发、发布准备和维护设立了独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。\"]},\"798\":{\"h\":\"分支案例\"},\"799\":{\"h\":\"简单的分支\"},\"800\":{\"h\":\"复杂分支\"},\"801\":{\"h\":\"分支种类\"},\"802\":{\"h\":\"主干分支 master\",\"t\":[\"主要负责管理正在运行的生产环境代码。永远保持与正在运行的生产环境完全一致。\"]},\"803\":{\"h\":\"开发分支 develop\",\"t\":[\"主要负责管理正在开发过程中的代码。一般情况下应该是最新的代码。\"]},\"804\":{\"h\":\"bug修理分支 hotfix\",\"t\":[\"要负责管理生产环境下出现的紧急修复的代码。 从主干分支分出，修理完毕并测试上线后，并回主干分支。并回后，视情况可以删除该分支。\"]},\"805\":{\"h\":\"发布版本分支 release\",\"t\":[\"较大的版本上线前，会从开发分支中分出发布版本分支，进行最后阶段的集成测试。该版本上线后，会合并到主干分支。生产环境运行一段阶段较稳定后可以视情况删除。\"]},\"806\":{\"h\":\"功能分支 feature\",\"t\":[\"为了不影响较短周期的开发工作，一般把中长期开发模块，会从开发分支中独立出来。 开发完成后会合并到开发分支。\"]},\"807\":{\"h\":\"Gitlab私服\",\"t\":[\"注意：要使用CentOS7版本安装，CentOS6版本不行。\"]},\"808\":{\"h\":\"官网地址\",\"t\":[\"首页：https://about.gitlab.com/ 安装说明：https://about.gitlab.com/installation/\"]},\"809\":{\"h\":\"提前下载所需rpm\",\"t\":[\"yum安装gitlab-ee(或ce)时，需要联网下载几百M的安装文件，非常耗时，所以应提前把所需RPM包下载并安装好。[ee企业版 ce社区版本]\",\"下载地址是：https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm\",\"下载好后上传到Linux系统，习惯上还是放在/opt目录下\"]},\"810\":{\"h\":\"安装步骤\",\"t\":[\"sudo rpm -ivh /opt/gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm sudo yum install -y curl policycoreutils-python openssh-server cronie sudo yum install lokkit sudo lokkit -s http -s ssh sudo yum install postfix sudo service postfix start sudo chkconfig postfix on //设置开机启动 curl \\\"https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh\\\") | sudo bash sudo EXTERNAL_URL=\\\"http://127.0.0.1\\\" yum -y install gitlab-ce \",\"当前步骤完成后重启。\",\"在安装lokkit -s http -s ss 报错如下，需要关闭防火墙。\"]},\"811\":{\"h\":\"Gitlab服务操作\",\"t\":[\"初始化配置 : gitlab-ctl reconfigure\",\"启动Gitlab服务 : gitlab-ctl start\",\"停止Gitlab服务 : gitlab-ctl stop\"]},\"812\":{\"h\":\"浏览器访问\",\"t\":[\"访问Linux服务器IP地址即可，如果想访问EXTERNAL_URL指定的域名还需要配置域名服务器或本地hosts文件。\\n初次登录时需要为gitlab的root用户设置密码。\"]},\"813\":{\"h\":\"接口增强\"},\"814\":{\"h\":\"JDK1.8的增强\",\"t\":[\"在JDK1.8之前，接口中只能存在 静态常量 和 抽象方法\",\"interface 接口名称 { 静态常量; 抽象方法; } \",\"在JDK1.8之后,接口新增了 默认方法 和 静态方法\",\"interface 接口名称 { 静态常量; 抽象方法; 默认方法; 静态方法; } \"]},\"815\":{\"h\":\"默认方法\"},\"816\":{\"h\":\"为什么要增加默认方法\",\"t\":[\"在JDK1.8之前，如果接口中新增抽象方法，所有的实现类都需要重写新增的方法，这样不利于我们的代码拓展。\",\"public class Test { public static void main(String[] args) { A a1 = new B(); A a2 = new C(); } } interface A { void say(); //新增的抽象方法 需要在后续的实现类中都进行重写 void show(); } class B implements A{ @Override public void say() { } @Override public void show() { } } class C implements A{ @Override public void say() { } @Override public void show() { } } \"]},\"817\":{\"h\":\"语法格式\",\"t\":[\"语法格式\",\"interface 接口名{ 修饰符 default 返回值类型 方法名(){ 方法体; } } \",\"案例\",\"public class Test { public static void main(String[] args) { A a1 = new B(); a1.test();//使用接口的默认方法 A a2 = new C(); a2.test();//使用实现类重写的方法 } } interface A { void say(); //新增的抽象方法 需要在后续的实现类中都进行重写 void show(); /** * 接口中定义的默认方法 * @return */ public default String test(){ System.out.println(\\\"方法中的默认方法\\\"); return \\\"Hello\\\"; } } class B implements A{ @Override public void say() { } @Override public void show() { } } class C implements A{ @Override public void say() { } @Override public void show() { } /** * 重写默认方法 * @return */ @Override public String test() { System.out.println(\\\"B\\\"); return \\\"BBBB\\\"; } } \"]},\"818\":{\"h\":\"使用\",\"t\":[\"接口中的默认方法有两中使用方式:\",\"实现类直接调用接口的默认方法\",\"实现类重写接口中的默认方法\"]},\"819\":{\"h\":\"静态方法\",\"t\":[\"JDK1.8中新增了静态方法,也是为了接口的扩展性\"]},\"820\":{\"h\":\"语法格式\",\"t\":[\"interface 接口名{ 修饰符 static 返回值类型 方法名(){ 方法体; } } \",\" public class Test02 { public static void main(String[] args) { AA aa = new BB(); // aa.sayHello(); AA.sayHello(); //静态方法只能通过接口名直接使用,且子类无法重写 } } interface AA { void test(); public static String sayHello(){ System.out.println(\\\"sayHello\\\"); return \\\"Hello\\\"; } } class BB implements AA { @Override public void test() { } } \"]},\"821\":{\"h\":\"使用\",\"t\":[\"接口中的静态方法,在实现类中是不能被重写的,调用的话只能通过接口类型来实现. 接口名.静态方法\"]},\"822\":{\"h\":\"两者区别\",\"t\":[\"默认方法通过实例调用,静态方法通过接口名调用\",\"默认方法可以被继承,实现类可以直接调用接口默认方法,也可以重写接口默认方法. \",\"静态方法不能被继承,实现类不能重写接口的静态方法,只能使用接口名调用\"]},\"823\":{\"h\":\"方法引用\"},\"824\":{\"h\":\"为什么要用方法引用\"},\"825\":{\"h\":\"Lambda表达式的冗余\",\"t\":[\"public class demo01 { public static void main(String[] args) { getMax(arr->{ int sum = 0; for (int i : arr) { sum+=i; } System.out.println(sum); }); } /** * 获取数组的合 * @param arr */ public static void getTotal(int[] arr) { int sum = 0; for (int i : arr) { sum+=i; } System.out.println(sum); } public static void getMax(Consumer<int[]> consumer) { int[] arr = {1,2,3,4,5}; consumer.accept(arr); } } \",\"我们发现: 在使用Lambda表达式时,可能会与之前已经实现的代码产生冗余\"]},\"826\":{\"h\":\"解决方案\",\"t\":[\"使用方法引用直接调用已实现的方法\",\"public class demo01 { public static void main(String[] args) { // getMax(arr->{ // int sum = 0; // for (int i : arr) { // sum+=i; // } // System.out.println(sum); // }); // getMax(arr->demo01.getTotal(arr)); //:: 就是方法引用 getMax(demo01::getTotal); //相当于执行了getTotal } /** * 获取数组的合 * @param arr */ public static void getTotal(int[] arr) { int sum = 0; for (int i : arr) { sum+=i; } System.out.println(sum); } public static void getMax(Consumer<int[]> consumer) { int[] arr = {1,2,3,4,5}; consumer.accept(arr); } } \"]},\"827\":{\"h\":\"语法格式\",\"t\":[\"符号表示: :: 符号说明：双冒号为方法引用运算符，而它所在的表达式被称为方法引用 应用场景：如果Lambda表达式所要实现的方案，已经有其他方法存在相同的方案，那么则可以使用方法引用。 常见的引用方式： 方法引用在JDK8中使用是相当灵活的，有以下几种形式：\",\"语法\",\"案例\",\"说明\",\"instanceName : : methodName\",\"customer : : getName\",\"对象 : : 方法名\",\"ClassName : : staticMethodName\",\"Customer : : getAge\",\"类名 : : 静态方法\",\"ClassName : : methodName\",\"Customer : : getName\",\"类名 : : 普通方法\",\"ClassName : : new\",\"Customer : : new\",\"类名 : : 构造器\",\"TypeName[] : : new\",\"String[] : : new\",\"数组 : : 构造器\"]},\"828\":{\"h\":\"对象 : : 方法名\",\"t\":[\"最常见的一种用法. 如果一个类中已经存在一个成员方法,则可以通过对象名引用成员方法\",\"public class demo02 { public static void main(String[] args) { Date date = new Date(); Supplier<Long> supplier = ()-> date.getTime(); System.out.println(supplier.get()); //使用方法引用改写 Supplier<Long> supplier1 = date::getTime; System.out.println(supplier1.get()); } } \",\"注意事项:\",\"被引用的方法,参数要和抽象方法中的参数一致\",\"当接口抽象方法有返回值时,被引用的方法也必须由返回值\"]},\"829\":{\"h\":\"类名 : : 静态方法\",\"t\":[\"也是比较常用的方式\",\"public class Demo03 { public static void main(String[] args) { Supplier<Long> supplier = ()->{ return System.currentTimeMillis(); }; System.out.println(supplier.get()); //使用引用方法改写 Supplier<Long> supplier1 = System::currentTimeMillis; System.out.println(supplier1.get()); } } \"]},\"830\":{\"h\":\"类名 : : 实例普通方法\",\"t\":[\"Java面向对象中,类名只能调用静态方法,类名引用实例方法使用是有前提的:实际上是拿第一个参数作为方法的调用者\",\"public class Demo04 { public static void main(String[] args) { Function<String,Integer> function = (s)-> s.length(); System.out.println(function.apply(\\\"hello\\\"));//5 //使用引用方法改写 Function<String,Integer> function1 = String::length; System.out.println(function1.apply(\\\"hello\\\"));//5 BiFunction<String,Integer,String> function2 = String::substring; String absjnsj = function2.apply(\\\"absjnsj\\\", 3);//jnsj System.out.println(absjnsj); } } \"]},\"831\":{\"h\":\"类名 : : 构造器\",\"t\":[\"由于构造器的名称和类名完全一致,所以构造器引用使用 : : new的格式\",\"public class Demo05 { public static void main(String[] args) { Supplier<String> supplier = ()-> {return new String();}; System.out.println(supplier.hashCode()); //使用引用方法创建 Supplier<String> supplier1 = String::new; System.out.println(supplier1.hashCode()); Function<String,String> function = String::new; System.out.println(function.apply(\\\"aaa\\\")); } } \"]},\"832\":{\"h\":\"数组 : : 构造器\",\"t\":[\"public class Demo06 { public static void main(String[] args) { Function<Integer,String[]> function1 = (len)->{return new String[len];}; System.out.println(function1.apply(3).length); //使用引用方法创建 Function<Integer,String[]> function2 = String[]::new; System.out.println(function2.apply(3).length); } } \"]},\"833\":{\"h\":\"小结\",\"t\":[\"方法引用是对Lambda表达式符合特定情况下的一种缩写方式， 它使得我们的Lambda表达式更加的精简,  也可以理解为lambda表达式的缩写形式， 不过要注意的是方法引用只能引用已经存在的方法。\"]},\"834\":{\"h\":\"函数式接口\"},\"835\":{\"h\":\"函数式接口的由来\",\"t\":[\"我们知道使用Lambda表达式的前提是需要有函数式接口，而Lambda表达式使用时不关心接口名， 抽象方法名。 只关心抽象方法的参数列表和返回值类型。\",\"因此为了让我们使用Lambda表达式更加的方便，在JDK中提供了大量常用的函数式接口\",\"public class Test01 { public static void main(String[] args) { fun1((arr)->{ // int sum = 0; // for (int i : arr) { // sum+=i; // } // return sum; int reduce = Arrays.stream(arr).reduce(0, Integer::sum); return reduce; }); } public static void fun1(Operator Operator){ int[] arrys = {1,2,3,4}; int sum = Operator.sum(arrys); System.out.println(\\\"执行结果为:\\\"+sum); } } /** * 函数式接口 */ @FunctionalInterface interface Operator{ int sum(int[] arry); } \"]},\"836\":{\"h\":\"Supplier接口\",\"t\":[\"生产者接口，无参有返回值，使用时需要提供一个返回值类型\",\"@FunctionalInterface public interface Supplier<T> { /** * Gets a result. * * @return a result */ T get(); } \"]},\"837\":{\"h\":\"get()\",\"t\":[\"public class SupplierLambda { public static void main(String[] args) { fin1(()->{ int[] arr = {1,2,3,4,5,6,7,8,9,10}; return Arrays.stream(arr).reduce(0, Integer::sum); }); } public static void fin1(Supplier<Integer> supplier){ Integer max = supplier.get(); System.out.println(max); } } \"]},\"838\":{\"h\":\"Consumer接口\",\"t\":[\"消费者接口\",\"public interface Consumer<T> { void accept(T t); default Consumer<T> andThen(Consumer<? super T> after) { Objects.requireNonNull(after); return (T t) -> { accept(t); after.accept(t); }; } } \",\"使用：\"]},\"839\":{\"h\":\"accept方法\",\"t\":[\"对给定参数执行此操作\",\"public class ConsumerLambda { public static void main(String[] args) { testConsumer1(msg->{ System.out.println(msg+\\\"->转换成小写:\\\"+msg.toLowerCase()); }); } /** * 对给定参数执行此操作 * @param consumer */ public static void testConsumer1(Consumer<String> consumer) { consumer.accept(\\\"Hello\\\"); } } \"]},\"840\":{\"h\":\"andThen方法\",\"t\":[\"先做一个操作,在做一个操作\",\"public class ConsumerLambda { public static void main(String[] args) { testConsumer2(msg1->{ System.out.println(msg1+\\\"->转换成小写:\\\"+msg1.toLowerCase()); },msg2->{ System.out.println(msg2+\\\"->转换成大写:\\\"+msg2.toUpperCase()); }); } /** * andThen 表示先后执行顺序 * consumer1.andThen(consumer2).accept(str); * 先执行consumer1.accept(str); 在执行 consumer2.accept(str); * @param consumer1 * @param consumer2 */ public static void testConsumer2(Consumer<String> consumer1,Consumer<String> consumer2) { String str =\\\"Hello\\\"; // consumer1.accept(str); // consumer2.accept(str); consumer1.andThen(consumer2).accept(str); } } \"]},\"841\":{\"h\":\"Function接口\",\"t\":[\"有参返回值的接口,根据一个类型返回另一个类型的接口,前者称之为前置条件,后者称之为后置条件.\",\"@FunctionalInterface public interface Function<T, R> { R apply(T t); default <V> Function<V, R> compose(Function<? super V, ? extends T> before) { Objects.requireNonNull(before); return (V v) -> apply(before.apply(v)); } default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) { Objects.requireNonNull(after); return (T t) -> after.apply(apply(t)); } static <T> Function<T, T> identity() { return t -> t; } } \",\"使用：\"]},\"842\":{\"h\":\"apply方法\",\"t\":[\"对给定参数执行操作: Function<T,R> 传入T返回 R\",\"public class FunctionLambda { public static void main(String[] args) { testFunction1(msg->{ return Integer.parseInt(msg); }); } /** * * @param function */ public static void testFunction1(Function<String,Integer> function){ Integer apply = function.apply(\\\"666\\\"); System.out.println(apply); } } \"]},\"843\":{\"h\":\"andThen方法\",\"t\":[\"先做一个操作,在做一个操作:function1.andThen(function2) 表示 先执行function1 在执行 function2\",\"public class FunctionLambda { public static void main(String[] args) { testFunction2(msg1->{ return Integer.parseInt(msg1); },msg2->{ return msg2 * 10; }); } public static void testFunction2(Function<String,Integer> function1,Function<Integer,Integer> function2){ Integer apply = function1.andThen(function2).apply(\\\"666\\\"); //先执行function1 再执行 function2 System.out.println(apply); } } \"]},\"844\":{\"h\":\"compose方法\",\"t\":[\"一个操作在另一个操作之前执行:function1.compose(function2) 表示 先执行function2在执行 function1\",\"public class FunctionLambda { public static void main(String[] args) { testFunction2(msg1->{ return Integer.parseInt(msg1); },msg2->{ return msg2 * 10; }); } public static void testFunction2(Function<String,Integer> function1,Function<Integer,Integer> function2){ Integer apply = function1.andThen(function2).apply(\\\"666\\\"); //先执行function1 再执行 function2 System.out.println(apply); } } \"]},\"845\":{\"h\":\"identity方法\",\"t\":[\"传入什么返回什么\",\" public static void main(String[] args) { ArrayList<String> arrayList = new ArrayList<String>(); arrayList.add(\\\"111\\\"); arrayList.add(\\\"222\\\"); arrayList.add(\\\"333\\\"); Stream<String> stream = arrayList.stream(); // Map<String, String> collect = stream.collect(Collectors.toMap(t->t, t->t)); Map<String, String> collect = stream.collect(Collectors.toMap(Function.identity(), Function.identity())); } \",\"为什么要使用Function.identity()?\",\"https://blog.csdn.net/m0_45899013/article/details/118542159?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-118542159-blog-105261100.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-118542159-blog-105261100.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=3\"]},\"846\":{\"h\":\"Predicate接口\",\"t\":[\"表示一个参数的谓词（布尔值函数）\",\"@FunctionalInterface public interface Predicate<T> { boolean test(T t); default Predicate<T> and(Predicate<? super T> other) { Objects.requireNonNull(other); return (t) -> test(t) && other.test(t); } default Predicate<T> negate() { return (t) -> !test(t); } default Predicate<T> or(Predicate<? super T> other) { Objects.requireNonNull(other); return (t) -> test(t) || other.test(t); } static <T> Predicate<T> isEqual(Object targetRef) { return (null == targetRef) ? Objects::isNull : object -> targetRef.equals(object); } } \"]},\"847\":{\"h\":\"test()\",\"t\":[\"public class PredicateLambda { public static void main(String[] args) { test1(msg->{ return msg.contains(\\\"H\\\"); },\\\"Hello\\\"); } public static void test1(Predicate<String> predicate,String msg){ System.out.println(predicate.test(msg));//true } } \"]},\"848\":{\"h\":\"and()/or()/negate()\",\"t\":[\"public class PredicateLambda { public static void main(String[] args) { test2(msg1->{ return msg1.contains(\\\"H\\\"); },msg2->{ return msg2.contains(\\\"W\\\"); },\\\"Hello\\\"); } public static void test2(Predicate<String> predicate1,Predicate<String> predicate2,String msg){ //predicate1 和 predicate2 都满足 boolean test1 = predicate1.and(predicate2).test(msg);//false //predicate1 或 predicate2 满足 boolean test2 = predicate1.or(predicate2).test(msg);//true //predicate1 不满足 boolean test3 = predicate1.negate().test(msg);//false System.out.println(test1); System.out.println(test2); System.out.println(test3); } } \"]},\"849\":{\"h\":\"Optional类\"},\"850\":{\"h\":\"之前对于Null的处理\",\"t\":[\" @Test public void test01(){ // String userName1 =\\\"张三\\\"; // System.out.println(\\\"字符串的长度:\\\"+userName1.length());//2 // // String userName2 = null; // System.out.println(\\\"字符串的长度:\\\"+userName2.length());//异常 //处理 String userName3 = null; if (userName3 == null) { System.out.println(\\\"字符串为空\\\"); }else{ System.out.println(\\\"字符串的长度:\\\"+userName3.length()); } } \"]},\"851\":{\"h\":\"Optional类\",\"t\":[\"Optional类是一个没有子类的工具类,是一个可以为null的容器对象,主要就是为了避免null检查,防止空指针异常\"]},\"852\":{\"h\":\"Optional类的使用\",\"t\":[\" /** * Optional对象的创建 */ @Test public void test02(){ //通过of创建对象 of方法是不支持null Optional<String> op1 = Optional.of(\\\"张三\\\"); // Optional<Object> op2 = Optional.of(null); //通过ofNullable创建对象 支持null Optional<String> op3 = Optional.ofNullable(\\\"张三\\\"); Optional<String> op4 = Optional.ofNullable(null); //通过empty创建空的对象 Optional<Object> op5 = Optional.empty(); } \"]},\"853\":{\"h\":\"Optional类的常用方法\",\"t\":[\"API\",\"说明\",\"get()\",\"如果有值则返回,否则抛出异常NoSuchElementException\",\"isPresent()\",\"判断是否包含值,包含返回true 否则返回false\",\"orElse(T other)\",\"如果对象包含值,则返回该值否则就返回T\",\"orElseGet(Supplier other)\",\"如果调用对象包含值,就返回该值,否则返回Lambda表达式的返回值\",\"orElseThrow(Supplier exceptionSupplier)\",\"如果调用对象包含值,就返回该值,否则返回Lambda表达式的指定异常\",\" /** * Optional对象的常用方法 * get() 如果有值则返回,否则抛出异常NoSuchElementException * get()通常和isPresent方法一起使用 * isPresent() 判断是否包含值,包含返回true 否则返回false * orElse(T other) 如果对象包含值,则返回该值否则就返回T * orElseGet(Supplier other) 如果调用对象包含值,就返回该值,否则返回Lambda表达式的返回值 * orElseThrow(Supplier exceptionSupplier) 如果调用对象包含值,就返回该值,否则返回Lambda表达式的指定异常 */ @Test public void test03(){ //通过of创建对象 of方法是不支持null Optional<String> op1 = Optional.of(\\\"张三\\\"); Optional<String> op2 = Optional.empty(); //get 获取Optional的值 //如果有值则返回 否则 抛出异常 if (op1.isPresent()){ System.out.println(op1.get());//张三 } if(op2.isPresent()){ System.out.println(op2.get()); } //如果有值就返回原有值,为空就返回指定值 String s3 = op1.orElse(\\\"李四\\\"); String s4 = op2.orElse(\\\"王五\\\"); System.out.println(s3);//张三 System.out.println(s4);//王五 //如果有值就返回原有值,为空就返回指定值 String s = op2.orElseGet(() -> { return \\\"Hello\\\"; }); System.out.println(s); //如果有值就返回原有值,为空就返回指定异常 String s1 = op2.orElseThrow(() -> { return new RuntimeException(); }); System.out.println(s1); } \"]},\"854\":{\"h\":\"Optional类的高级应用\",\"t\":[\" /** * 自定义一个方法将Student对象中的Name转换成大写并返回 */ @Test public void test05(){ Student student1 = new Student(null, 19); Student student2 = new Student(\\\"张三\\\", 19); System.out.println(getName(student1)); System.out.println(getName(student2)); Optional<Student> studentOp1 = Optional.ofNullable(student1); Optional<Student> studentOp2 = Optional.ofNullable(student2); System.out.println(getNameForOptional(studentOp1)); System.out.println(getNameForOptional(studentOp2)); } /** * 使用Optional对象 * @param student * @return */ public String getNameForOptional(Optional<Student> student){ if (student.isPresent()) { String s = student .map(Student::getName)//获取对象中的Name .map(String::toUpperCase)//将名字转换成大写 .orElse(null);//如果为空返回null return s; } return null; } /** * 原始写法 * @param student * @return */ public String getName(Student student){ if (student!=null){ String name = student.getName(); if (name != null){ return name.toUpperCase(); }else { return null; } }else { return null; } } \"]},\"855\":{\"h\":\"StreamAPI\"},\"856\":{\"h\":\"集合处理数据的弊端\",\"t\":[\"当我们需要对集合中的元素进行操作的时候, 除了必须的添加\\\\删除\\\\获取 外,比较常用的就是集合的循环\",\"public class demo01 { public static void main(String[] args) { //素材 List<String> nameList = Arrays.asList(\\\"张三\\\", \\\"张三丰\\\", \\\"李四\\\", \\\"王五\\\"); //获取所有姓张的名字并且长度为3 ArrayList<String> arrayList = new ArrayList(); for (String name : nameList) { if (name.startsWith(\\\"张\\\")&&name.length()==3) { arrayList.add(name); } } for (String s : arrayList) { System.out.println(s); } } } \",\"上面的代码针对与我们不同的需求总是一次次的循环循环循环. 这时我们希望有更加高效的处理方式， 这时我们就可以通过JDK8中提供的Stream API来解决这个问题了。\",\"Stream更加优雅的解决方案:\",\"public class demo01 { public static void main(String[] args) { //素材 List<String> nameList = Arrays.asList(\\\"张三\\\", \\\"张三丰\\\", \\\"李四\\\", \\\"王五\\\"); //使用Lambda表达式优化 List<String> arrayList1 = nameList.stream() .filter(s -> s.startsWith(\\\"张\\\"))//过滤张开头的 .filter(s -> s.length()==3)//过滤长度等于3 .collect(Collectors.toList());//转换成新的List数组 arrayList1.stream().forEach(System.out::println);//引用方法 } } \"]},\"857\":{\"h\":\"Stream流式编程思想\",\"t\":[\"Stream流和IO流是没有任何关系的,Stream流式编程思想类似于工厂车间的生产流水线,Stream流不是一种数据结构,不保存数据,而是对于数据进行加工处理. \",\"我们可以将Stream看做流水线上的一个工序,通过Stream流的多个工序加工得到我们想要的商品.\",\"Stream API能让我们快速完成许多复杂的操作，如筛选、切片、映射、查找、去除重复，统计，匹配和归约。\"]},\"858\":{\"h\":\"Stream流的获取方式\"},\"859\":{\"h\":\"根据Collection获取\",\"t\":[\"首先, Java.Collection中加入了默认方法: default Stream<E> stream() 也就是说 Collection接口下面所有的实现都可以通过该方法获取流\",\"public class demo02 { public static void main(String[] args) { ArrayList<String> strings = new ArrayList<>(); Stream<String> stream = strings.stream(); HashSet<String> strings1 = new HashSet<>(); Stream<String> stream1 = strings1.stream(); Vector<String> strings2 = new Vector<>(); Stream<String> stream2 = strings2.stream(); } } \",\"但是Map接口并没有实现Collection接口,所以我们需要特殊处理\",\"public class demo02 { public static void main(String[] args) { HashMap<String, String> stringStringHashMap = new HashMap<>(); Set<String> strings3 = stringStringHashMap.keySet();//获取全部的Key集合 Stream<String> stream3 = strings3.stream(); Collection<String> values = stringStringHashMap.values();//获取全部的Values集合 Stream<String> stream4 = values.stream(); Set<Map.Entry<String, String>> entries = stringStringHashMap.entrySet();//获取entrySet集合 Stream<Map.Entry<String, String>> stream5 = entries.stream(); } } \"]},\"860\":{\"h\":\"根据Stream的of方法获取\",\"t\":[\"在一些特殊情况下,我们可以通过Stream方法中的of()静态方法来获取流\",\"public class demo03 { public static void main(String[] args) { Stream<String> stream1 = Stream.of(\\\"张三\\\", \\\"李四\\\"); stream1.forEach(System.out::println); String[] names2 = {\\\"张三\\\",\\\"李四\\\"}; Stream<String> stream2 = Stream.of(names2); stream2.forEach(System.out::println); // 注意:基本数据类型的数组是不行的,此时我们需要借助Arrays静态类中的stream方法 int[] names3 = {1,2,3,4}; // Stream<int[]> stream3 = Stream.of(names3); //获取的是地址信息 IntStream stream3 = Arrays.stream(names3); //IntStream stream3.forEach(System.out::println); } } \",\"注意: 基本数据类型的数组使用Stream中的静态方法of是不行的,此时我们需要借助Arrays静态类中的stream方法\"]},\"861\":{\"h\":\"Stream流中的常用方法\",\"t\":[\"Stream流模型的操作很丰富，这里介绍一些常用的APl。这些方法可以被分成两种：\",\"方法名\",\"方法作用\",\"返回值类型\",\"方法种类\",\"count\",\"统计个数\",\"long\",\"终结\",\"forEach\",\"逐一处理\",\"void\",\"终结\",\"fifilter\",\"过滤\",\"Stream\",\"函数拼接\",\"limit\",\"取用前几个\",\"Stream\",\"函数拼接\",\"skip\",\"跳过前几个\",\"Stream\",\"函数拼接\",\"map\",\"映射\",\"Stream\",\"函数拼接\",\"concat\",\"组合\",\"Stream\",\"函数拼接\",\"终结方法： 返回值类型不再是Stream类型的方法，不再支持链式调用。常见终结方法包括count和forEach方法。\",\"非终结方法： 返回值类型仍然是Stream类型的方法，支持链式调用。（除了终结方法外，其余方法均为非终结方法。）\",\"Stream注意事项 (重要)\",\"Stream只能操作一次\",\"Stream方法返回的是新的流\",\"Stream不调用终结方法，中间的操作不会执行\"]},\"862\":{\"h\":\"ForEach\",\"t\":[\"ForEach用来遍历流中的数据的\",\"void forEach(Consumer<? super T> action); \",\"该方法接收一个Consumer接口,会将每一个流元素交给函数处理\",\"public class demo04 { public static void main(String[] args) { Stream.of(\\\"张三\\\", \\\"李四\\\") .forEach(System.out::println); } } \"]},\"863\":{\"h\":\"Count\",\"t\":[\"Stream流中的Count方法,用来统计流中元素的个数\",\" long count(); \",\"返回long类型数据,代表元素的个数\",\"public class demo04 { public static void main(String[] args) { long count = Stream.of(\\\"张三\\\", \\\"李四\\\").count(); System.out.println(count); } } \"]},\"864\":{\"h\":\"Filter\",\"t\":[\"Filter方法的作用是用来过滤数据的,返回符合条件的数据\",\"可以通过Filter方法将一个流转换成另一个子集流\",\" Stream<T> filter(Predicate<? super T> predicate); \",\"该接口接收一个Predicate接口的参数作为筛选的条件\",\"public class demo04 { public static void main(String[] args) { Stream.of(\\\"张三\\\", \\\"李四\\\") .filter(s -> s.startsWith(\\\"张\\\"))//张三 .forEach(System.out::println); } } \"]},\"865\":{\"h\":\"Limit\",\"t\":[\"Limit方法可以对流进行截取处理,只取前n个数据\",\" Stream<T> limit(long maxSize); \",\"参数是一个long类型的数值,如果当前集合长度大于参数则进行截取,否则不进操作\",\"public class demo04 { public static void main(String[] args) { Stream.of(\\\"张三\\\", \\\"李四\\\") .limit(1)//张三 .forEach(System.out::println); } } \"]},\"866\":{\"h\":\"Skip\",\"t\":[\"如果希望跳过前面几个元素,则可以使用Skip进行截取获取一个新的流\",\" Stream<T> skip(long n); \",\"参数是一个long类型的数值,如果当前集合长度大于参数则进行截取,否则按照流最大长度进行截取跳过\",\"public class demo04 { public static void main(String[] args) { Stream.of(\\\"张三\\\", \\\"李四\\\") .skip(1)//李四 .forEach(System.out::println); } } \"]},\"867\":{\"h\":\"Map\",\"t\":[\"如果我们需要将流中的元素映射到另一个流中,我们可以使用Map:\",\" <R> Stream<R> map(Function<? super T, ? extends R> mapper); \",\"该方法需要一个Function接口参数,可以将一个T类型的参数转换成R类型的参数,并返回转换后的流\",\"public class demo04 { public static void main(String[] args) { Integer integer1 = Stream.of(\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\") .map(msg -> Integer.parseInt(msg)) .reduce(Integer::sum).get(); System.out.println(integer1);//15 Integer integer = Stream.of(\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\") .map(Integer::parseInt) .reduce(Integer::sum).get(); System.out.println(integer);//15 } } \"]},\"868\":{\"h\":\"Sorted\",\"t\":[\"如果需要将数据排序,可以使用sorted方法:\",\" Stream<T> sorted(); Stream<T> sorted(Comparator<? super T> comparator); \",\"在使用时,可以根据自然排序,也可以根据比较器进行指定排序:\",\"public class demo04 { public static void main(String[] args) { //根据自然规则排序 Stream.of(\\\"11\\\", \\\"121\\\", \\\"31\\\", \\\"14\\\", \\\"5\\\") .map(Integer::parseInt) .sorted()//根据数据的自然排序 .forEach(System.out::println);// 5 11 14 31 121 //根据比较器排序 Stream.of(\\\"11\\\", \\\"121\\\", \\\"31\\\", \\\"14\\\", \\\"5\\\") .map(Integer::parseInt) .sorted((o1, o2) -> o2-o1)//根据数据的自然倒序 .forEach(System.out::println);// 121 31 14 11 5 } } \"]},\"869\":{\"h\":\"Distinct\",\"t\":[\"如果需要去除重复的数据,可以使用Distinct方法:\",\" Stream<T> distinct(); \",\"使用:\",\"public class demo04 { public static void main(String[] args) { Stream.of(\\\"1\\\", \\\"12\\\", \\\"31\\\", \\\"12\\\", \\\"5\\\") .distinct() .forEach(System.out::println);//1 12 31 5 //自定义类型需要重新 equals 和 hashCode 方法才可以生效 Stream.of(new Student(\\\"张三\\\",19), new Student(\\\"李四\\\",19), new Student(\\\"张三\\\",19)) .distinct() .forEach(System.out::println); } } \",\"Stream流中的distinct方法对于基本数据类型是可以直接去重的,对于自定义数据类型需要重新equals 和 hashCode 方法才可以生效.\"]},\"870\":{\"h\":\"Match\",\"t\":[\"如果需要判断数据是否匹配指定的条件,可以使用match相关的方法:\",\" boolean anyMatch(Predicate<? super T> predicate); // 元素是否有任意一个满足条件 boolean allMatch(Predicate<? super T> predicate);// 元素是否都满足条件 boolean noneMatch(Predicate<? super T> predicate);// 元素是否都不满足条件 \",\"使用:\",\"public class demo04 { public static void main(String[] args) { boolean b1 = Stream.of(\\\"1\\\", \\\"12\\\", \\\"31\\\", \\\"12\\\", \\\"5\\\") .map(Integer::parseInt) .allMatch(s -> s > 0); System.out.println(b1);//true boolean b2 = Stream.of(\\\"1\\\", \\\"12\\\", \\\"31\\\", \\\"12\\\", \\\"5\\\") .map(Integer::parseInt) .anyMatch(s -> s > 0); System.out.println(b2);//true boolean b3 = Stream.of(\\\"1\\\", \\\"12\\\", \\\"31\\\", \\\"12\\\", \\\"5\\\") .map(Integer::parseInt) .noneMatch(s -> s > 0); System.out.println(b3);//false } } \",\"Match是一个终结方法\"]},\"871\":{\"h\":\"Find\",\"t\":[\"如果我们需要找到某些数据,可以使用find方法来实现:\",\" Optional<T> findFirst(); Optional<T> findAny(); \",\"使用:\",\"public class demo04 { public static void main(String[] args) { Stream<String> stringStream1 = Stream.of(\\\"1\\\", \\\"12\\\", \\\"31\\\", \\\"12\\\", \\\"5\\\"); Optional<String> first = stringStream1.findFirst(); System.out.println(first.get());//1 Stream<String> stringStream2 = Stream.of(\\\"1\\\", \\\"12\\\", \\\"31\\\", \\\"12\\\", \\\"5\\\"); Optional<String> any = stringStream2.findAny(); System.out.println(any.get());//1 } } \"]},\"872\":{\"h\":\"Max和Min\",\"t\":[\"获取最大值和最小值\",\" Optional<T> min(Comparator<? super T> comparator); Optional<T> max(Comparator<? super T> comparator); \",\"使用:\",\"public class demo04 { public static void main(String[] args) { Stream<Integer> integerStream1 = Stream.of(\\\"1\\\", \\\"12\\\", \\\"31\\\", \\\"12\\\", \\\"5\\\").map(Integer::parseInt); Integer integerMax = integerStream1.max((o1, o2) -> o1 - o2).get(); System.out.println(integerMax);//31 Stream<Integer> integerStream2 = Stream.of(\\\"1\\\", \\\"12\\\", \\\"31\\\", \\\"12\\\", \\\"5\\\").map(Integer::parseInt); Integer integerMin = integerStream2.min((o1, o2) -> o1 - o2).get(); System.out.println(integerMin);//1 } } \"]},\"873\":{\"h\":\"Reduce\",\"t\":[\"如果需要将所有数据归纳得到一个数据,可以使用Reduce方法:\",\" T reduce(T identity, BinaryOperator<T> accumulator); Optional<T> reduce(BinaryOperator<T> accumulator); <U> U reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner); \",\"使用:\",\"public class demo04 { public static void main(String[] args) { //求和 Integer integer2 = Stream.of(\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\") .map(msg -> Integer.parseInt(msg)) .reduce(0,(x,y) -> x + y); System.out.println(integer2);//15 // 获取最大值 Integer integer3 = Stream.of(\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\") .map(msg -> Integer.parseInt(msg)) .reduce(0,(x,y) -> { return x>y?x:y; }); System.out.println(integer3);//5 //求和 Integer integer1 = Stream.of(\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\") .map(msg -> Integer.parseInt(msg)) .reduce(Integer::sum).get(); System.out.println(integer1);//15 } } \",\"public class demo06 { public static void main(String[] args) { // 统计全部的年龄合 Stream<Student> studentStream = Stream.of(new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22)); // Integer reduce = studentStream.map(p -> p.getAge()).reduce(0, (x, y) -> x + y); //简化代码 Integer reduce = studentStream.map(Student::getAge).reduce(0, Integer::sum); System.out.println(reduce);//52 } } \",\"public class demo06 { public static void main(String[] args) { //统计a出现的次数 Stream<String> stream1 = Stream.of(\\\"a\\\", \\\"v\\\", \\\"a\\\", \\\"2\\\"); Integer reduce1 = stream1.map(msg -> \\\"a\\\".equals(msg) ? 1 : 0) .reduce(0, Integer::sum); System.out.println(reduce1);//2 } } \"]},\"874\":{\"h\":\"MapToInt/MapToDouble/MapToLong\",\"t\":[\"在Stream流中使用包装类Integer时,由于Integer占用的内存会比int高很多,所以会自动装箱和拆箱.\",\"所以为了提高效率,我们可以现将Stream流中的Integer类型数据转换成Int类型,然后再操作\",\"public class demo07 { public static void main(String[] args) { //原始写法:由Stream进行操作时自动装箱拆箱 Integer arr[] = {1,2,34,5}; Stream.of(arr) .filter(s->s>0) .forEach(System.out::println); //优化代码:将包装类提前拆箱 IntStream intStream = Stream.of(arr).mapToInt(Integer::intValue); intStream.filter(i->i>0).forEach(System.out::println); } \"]},\"875\":{\"h\":\"Concat\",\"t\":[\"如果有两个流希望何必成为一个流,可以使用Stream接口的静态方法\",\"public static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b) { Objects.requireNonNull(a); Objects.requireNonNull(b); @SuppressWarnings(\\\"unchecked\\\") Spliterator<T> split = new Streams.ConcatSpliterator.OfRef<>( (Spliterator<T>) a.spliterator(), (Spliterator<T>) b.spliterator()); Stream<T> stream = StreamSupport.stream(split, a.isParallel() || b.isParallel()); return stream.onClose(Streams.composedClose(a, b)); } \",\"代码:\",\"public class demo08 { public static void main(String[] args) { //原始写法:由Stream进行操作时自动装箱拆箱 Stream<String> stream1 = Stream.of(\\\"1\\\", \\\"2\\\"); Stream<String> stream2 = Stream.of(\\\"3\\\", \\\"4\\\"); Stream<String> concat = Stream.concat(stream1, stream2); concat.forEach(System.out::println);//1 2 3 4 } } \"]},\"876\":{\"h\":\"综合案例\",\"t\":[\"定义两个队伍进行操作:\",\"1. 第一个队伍只保留姓名长度为3的成员 \",\"2. 第一个队伍筛选之后只要前3人 \",\"3. 第二个队伍只要姓张的成员 \",\"4. 第二个队伍筛选之后不要前两个人 \",\"5. 将两个队伍合并成为一个队伍 \",\"6. 根据姓名创建Student对象 \",\"7. 打印整个Student信息\",\"public class demo09 { public static void main(String[] args) { List<String> list1 = new ArrayList<String>(); list1.add(\\\"张三\\\"); list1.add(\\\"张三封\\\"); list1.add(\\\"李四\\\"); list1.add(\\\"王二妹\\\"); list1.add(\\\"赵麻子\\\"); list1.add(\\\"李旺旺\\\"); Stream<String> list1Stream = list1.stream() .filter(name -> name.length() == 3)//第一个队伍只保留姓名长度为3的成员 .limit(3);//第一个队伍筛选之后只要前3人 List<String> list2 = new ArrayList<String>(); list2.add(\\\"张二\\\"); list2.add(\\\"张二妹\\\"); list2.add(\\\"张大脸\\\"); list2.add(\\\"赵旺\\\"); list2.add(\\\"孙火旺\\\"); list2.add(\\\"张无忌\\\"); Stream<String> list2Stream = list2.stream() .filter(name -> name.startsWith(\\\"张\\\"))//第二个队伍只要姓张的成员 .skip(2);//第二个队伍筛选之后不要前两个人 Stream<String> concat = Stream.concat(list1Stream, list2Stream);//将两个队伍合并成为一个队伍 Stream<Student> studentStream = concat.map(s -> new Student(s));//根据姓名创建Student对象 studentStream.forEach(System.out::println);//打印整个Student信息 } } \",\"输出结果:\",\"Student{name='张三封', age=0} Student{name='王二妹', age=0} Student{name='赵麻子', age=0} Student{name='张大脸', age=0} Student{name='张无忌', age=0} \"]},\"877\":{\"h\":\"Stream结果收集\"},\"878\":{\"h\":\"结果收集到集合\",\"t\":[\" /** * Stream结果收集到集合中 */ @Test public void test(){ //转换成List List<String> collect1 = Stream.of(\\\"aa\\\", \\\"bb\\\", \\\"cc\\\",\\\"aa\\\") .collect(Collectors.toList()); System.out.println(collect1);//[aa, bb, cc, aa] //转换成set Set<String> collect2 = Stream.of(\\\"aa\\\", \\\"bb\\\", \\\"cc\\\",\\\"aa\\\") .collect(Collectors.toSet()); System.out.println(collect2);//[aa, bb, cc] //如果需要获取的类型为具体的实现,比如Arraylist hashset ArrayList<String> arr1=Stream.of(\\\"aa\\\", \\\"bb\\\", \\\"cc\\\",\\\"aa\\\") .collect(Collectors.toCollection(ArrayList::new)); System.out.println(arr1);//[aa, bb, cc, aa] HashSet<String> arr2 = Stream.of(\\\"aa\\\", \\\"bb\\\", \\\"cc\\\", \\\"aa\\\") .collect(Collectors.toCollection(HashSet::new)); System.out.println(arr2);//[aa, bb, cc] } \"]},\"879\":{\"h\":\"结果收集到数组\",\"t\":[\" /** * Stream结果收集到集合中 */ @Test public void test02(){ Object[] objects = Stream.of(\\\"aa\\\", \\\"bb\\\", \\\"cc\\\", \\\"aa\\\").toArray();//返回的元素是object System.out.println(Arrays.toString(objects));//[aa, bb, cc, aa] String[] strings = Stream.of(\\\"aa\\\", \\\"bb\\\", \\\"cc\\\", \\\"aa\\\").toArray(String[]::new);//指定返回的类型 System.out.println(Arrays.toString(strings));//[aa, bb, cc, aa] } \"]},\"880\":{\"h\":\"流中的数据进行聚合计算\",\"t\":[\"当我们使用Stream流处理数据后,可以像数据库的聚合函数一样对某个字段进行操作. 比如: 最大值 最小值 求和 平均值 统计数量....\",\"/** * Stream流数据聚合计算 */ @Test public void test03(){ //获取年龄最大值 /* //之前的写法 Integer integer = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22) ).map(Student::getAge).max((p1, p2) -> p1 - p2).get(); System.out.println(integer);*/ //使用collect //最大值 Student student = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22) ).collect(Collectors.maxBy((p1, p2) -> p1.getAge() - p2.getAge())).get(); System.out.println(\\\"年龄最大的是:\\\"+student);//年龄最大的是:Student{name='王五', age=22} //最小值 Student student1 = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22) ).collect(Collectors.minBy((p1, p2) -> p1.getAge() - p2.getAge())).get(); System.out.println(\\\"年龄最小的是:\\\"+student1);//年龄最小的是:Student{name='李四', age=11} //求和 Integer collect = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22) ).collect(Collectors.summingInt(Student::getAge)); System.out.println(\\\"年龄和:\\\"+collect);//年龄和:52 //平均值 Double collect1 = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22) ).collect(Collectors.averagingDouble(Student::getAge)); System.out.println(\\\"年龄平均值:\\\"+collect1);//年龄平均值:17.333333333333332 //数量 Long collect2 = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22) ).collect(Collectors.counting()); System.out.println(\\\"数量:\\\"+collect2);//数量:3 } \"]},\"881\":{\"h\":\"流中的数据进行分组操作\",\"t\":[\"当我们使用Stream流处理数据后,可以根据某个属性将数据分组\",\" /** * 分组计算 */ @Test public void test04(){ //根据姓名分组 Map<String, List<Student>> collect = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22), new Student(\\\"张三\\\", 29) ).collect(Collectors.groupingBy(Student::getName)); // { // 李四=[Student{name='李四', age=11}], // 张三=[Student{name='张三', age=19}, // Student{name='张三', age=29}], // 王五=[Student{name='王五', age=22}] // } System.out.println(collect); //根据年龄分组 Map<String, List<Student>> collect1 = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22), new Student(\\\"张三\\\", 29) ).collect(Collectors.groupingBy(p -> { return p.getAge() >= 18 ? \\\"成年\\\" : \\\"未成年\\\"; })); // { // 未成年=[Student{name='李四', age=11}], // 成年=[Student{name='张三', age=19}, // Student{name='王五', age=22}, // Student{name='张三', age=29}] // } System.out.println(collect1); } \",\"多级分组的操作:\",\" /** * 多级分组计算 */ @Test public void test05(){ //先根据姓名分组 再根据年龄分组 Map<String, Map<String, List<Student>>> collect = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22), new Student(\\\"张三\\\", 29) ).collect( Collectors.groupingBy( Student::getName, Collectors.groupingBy( p -> p.getAge() >= 18 ? \\\"成年\\\" : \\\"未成年\\\" ) ) ); System.out.println(collect); // { // 李四={ // 未成年=[Student{name='李四', age=11}] // }, // 张三={ // 成年=[Student{name='张三', age=19}, Student{name='张三', age=29}] // }, // 王五={成年=[Student{name='王五', age=22}]} // } } \"]},\"882\":{\"h\":\"流中的数据进行分区操作\",\"t\":[\"Collectors.partitioningBy会根据流中的值是否为true,把集合中的数据分割成两个列表: true 和 false\",\" /** * 分区操作 */ @Test public void test06(){ Map<Boolean, List<Student>> collect = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22), new Student(\\\"张三\\\", 29) ).collect(Collectors.partitioningBy(p -> p.getAge() > 18)); System.out.println(collect); // { // false=[ // Student{name='李四', age=11} // ], // true=[ // Student{name='张三', age=19}, // Student{name='王五', age=22}, // Student{name='张三', age=29} // ] // } } \"]},\"883\":{\"h\":\"流中的数据进行拼接操作\",\"t\":[\"Collectors.joining会根据指定的方式将流中的所有元素连接成一个字符串\",\" /** * 拼接操作 */ @Test public void test07(){ String collect = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22), new Student(\\\"张三\\\", 29) ).map(Student::getName).collect(Collectors.joining()); System.out.println(collect);//张三李四王五张三 String collect1 = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22), new Student(\\\"张三\\\", 29) ).map(Student::getName).collect(Collectors.joining(\\\",\\\")); System.out.println(collect1);//张三,李四,王五,张三 String collect2 = Stream.of( new Student(\\\"张三\\\", 19), new Student(\\\"李四\\\", 11), new Student(\\\"王五\\\", 22), new Student(\\\"张三\\\", 29) ).map(Student::getName).collect(Collectors.joining(\\\",\\\",\\\"[\\\",\\\"]\\\")); System.out.println(collect2);//[张三,李四,王五,张三] } \"]},\"884\":{\"h\":\"并行的Stream流\"},\"885\":{\"h\":\"串行的Stream流\",\"t\":[\"在前面的使用中,我们使用的都是串行的Stream流,在一个线程中一次执行.\",\" /** * 串行流 */ @Test public void test01(){ Stream.of(1,2,3,4,5).filter(s->{ System.out.println(Thread.currentThread()+\\\"/\\\"+s); return s>2; }).count(); } \",\"输出:\",\"Thread[main,5,main]/1 Thread[main,5,main]/2 Thread[main,5,main]/3 Thread[main,5,main]/4 Thread[main,5,main]/5 \"]},\"886\":{\"h\":\"获取并行的Stream流\",\"t\":[\"parallelStream其实就是一个并行执行的流,他通过默认的ForkJoinPool,可以提高多线程任务的速度\",\" /** * 获取并行流的两种方法 */ @Test public void test02(){ ArrayList<Integer> list = new ArrayList<>(); //一: 通过List直接获取并行的流 Stream<Integer> integerStream = list.parallelStream(); //二: 将已有的Stream流转换成并行流 Stream<Integer> parallel = Stream.of(1, 2, 3, 4, 5).parallel(); } \",\"我们可以通过两种方法来获取并行的流:\",\"通过List接口中的parallelStream方法来获取\",\"通过已有的串行流转换为并行流\"]},\"887\":{\"h\":\"并行流的操作\",\"t\":[\" /** * 并行流的操作 */ @Test public void test03(){ //将已有的Stream流转换成并行流 Stream<Integer> parallel = Stream.of(1, 2, 3, 4, 5).parallel(); parallel.filter(s->{ System.out.println(Thread.currentThread()+\\\"/\\\"+s); return s>2; }).count(); } \",\"输出:\",\"Thread[ForkJoinPool.commonPool-worker-11,5,main]/1 Thread[ForkJoinPool.commonPool-worker-9,5,main]/2 Thread[ForkJoinPool.commonPool-worker-2,5,main]/5 Thread[main,5,main]/3 Thread[ForkJoinPool.commonPool-worker-4,5,main]/4 \",\"我们发现此时,流是通过多个线程进行处理的,并非单一线程,这样可以提高处理的速度.\"]},\"888\":{\"h\":\"并行流和串行流的对比\",\"t\":[\"通过for循环,串行流 并行流 分别对500000000的数据进行求和,比对执行的时间\",\"public class test03 { private static long times = 500000000; private long start; private long end; @Before public void before() { start = System.currentTimeMillis(); } @After public void end() { end = System.currentTimeMillis(); System.out.println(\\\"消耗时间:\\\" + (end - start)); } /** * 普通for循环 * 消耗时间:125 */ @Test public void test01() { System.out.println(\\\"普通for循环:\\\"); long res = 0; for (long i = 0; i <= times; i++) { res += i; } System.out.println(res); } /** * 串行流 * 消耗时间:217 */ @Test public void test02() { //rangeClosed 生成初始化的流 System.out.println(\\\"串行流:\\\"); LongStream.rangeClosed(0, times).reduce(Long::sum); } /** * 并行流 * 消耗时间:88 */ @Test public void test03() { System.out.println(\\\"并行流\\\"); LongStream.rangeClosed(0, times).parallel().reduce(Long::sum); } } \",\"输出:\",\"普通for循环: 消耗时间:125 串行流: 消耗时间:217 并行流 消耗时间:88 \",\"通过上面的对比,我们发现parallelStream的执行效率是最高的:\",\"因为:Stream并行处理的过程会分而治之,将一个大任务分割成多个小任务,这表示每个任务都由一个线程独立完成\"]},\"889\":{\"h\":\"并行流的线程安全问题\",\"t\":[\"在多线程的处理下,一定会出现多线程的安全问题: \",\" /** * 并行流的数据安全问题 */ @Test public void test02(){ //将初始化结果通过异步添加到新数组arrayList ArrayList<Integer> arrayList = new ArrayList<>(); IntStream.rangeClosed(1,1000) .parallel() .forEach(arrayList ::add); System.out.println(arrayList.size()); } \",\"输出:\",\"972//并没有完全增加 \",\"或者直接抛出异常\",\"针对这些问题,我们可以采用以下方法进行处理:\",\"添加同步锁\",\"/** * 并行流的数据安全问题 */ @Test public void test02(){ //将初始化结果通过异步添加到新数组arrayList ArrayList<Integer> arrayList = new ArrayList<>(); Object o = new Object(); IntStream.rangeClosed(1,1000) .parallel() .forEach(s->{ //同步代码块 synchronized(o){ arrayList.add(s); } }); System.out.println(arrayList.size()); } \",\"使用线程安全的容器\",\"/** * 使用线程安全的容器 */ @Test public void test03(){ Vector vector = new Vector(); IntStream.rangeClosed(1,1000) .parallel() .forEach(vector::add); System.out.println(vector.size()); } \",\"将线程不安全容器转换成线程安全容器\",\"/** * 将线程不安全容器转换成线程安全容器 */ @Test public void test04(){ //将arrays结果通过异步添加到新数组 ArrayList<Integer> arrayList = new ArrayList<>(); //将线程不安全容器转换成线程安全容器 List<Integer> integers = Collections.synchronizedList(arrayList); IntStream.rangeClosed(1,1000) .parallel() .forEach(integers::add); System.out.println(arrayList.size()); } \",\"使用Stream流中的toArray方法或collect方法来操作\",\"/** * 我们还可以使用Stream流中的toArray方法或collect方法来操作 * 满足线程安全的要求 */ @Test public void test05(){ //将arrays结果通过异步添加到新数组 List<Integer> arrayList = new ArrayList<>(); arrayList = IntStream.rangeClosed(1, 1000) .parallel() .boxed()//boxed() 装箱操作,将intStream转换成 Integer类型 .collect(Collectors.toList()); System.out.println(arrayList.size()); } \"]},\"890\":{\"h\":\"新时间日期API\"},\"891\":{\"h\":\"旧版日期时间的问题\",\"t\":[\"在旧版本中JDK对于日期时间的这块设计是非常差的\",\" /** * 旧版日期时间的设计问题 */ @Test public void test01() throws ParseException { //设计不合理 有两个Date在不同的包 //创建时间的时候与预期不符 Date date = new Date(2022, 12, 18); System.out.println(date);//Thu Jan 18 00:00:00 CST 3923 //时间格式化 SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); System.out.println(simpleDateFormat.format(date));//3923-01-18 System.out.println(simpleDateFormat.parse(\\\"2022-12-18\\\"));//Sun Dec 18 00:00:00 CST 2022 //线程安全性问题:在多线程的情况下 格式化和解析操作会出现报错和不准确的情况 for (int i = 0; i < 50; i++) { new Thread(()->{ try { System.out.println(simpleDateFormat.parse(\\\"2022-12-18\\\")); } catch (ParseException e) { e.printStackTrace(); } }).start(); } } \",\"缺陷如下:\",\"设计不合理 在java.util和java.sql的包中都有Date类, java.util.Date同时包含日期和时间,java.sql.Date只有日期,同时用于格式化和解析的类在java.text包下\",\"非线程安全 java.util.Date是非线程安全的,在多线程使用时可能会出现时间不准确以及报错的情况.所有的日期类都是可变的,这是java日期类最大的问题\",\"时区处理麻烦 日期类并不提供国际化,没有时区的支持\"]},\"892\":{\"h\":\"新日期时间API\",\"t\":[\"JDK8中增加了一套全新的日期时间API,这套API设计合理,是线程安全的.新的日期及时间的API位于java.time包中,下面是一些关键类:\",\"类名\",\"说明\",\"LocalDate\",\"表示日期 包含年月日 格式为:2019-10-16\",\"LocalTime\",\"表示时间 包含时分秒 格式为: 16:38:54.158549300\",\"LocalDateTime\",\"表示日期时间 包含年月日 时分秒 格式为: 2018-09-06T 15:33:56.750453300\",\"DateTimeFormatter\",\"日期时间格式化类\",\"Instant\",\"时间戳,表示一个特定的时间瞬间\",\"Duration\",\"用于计算两个时间(LocalTime,时分秒)的距离\",\"Period\",\"用于计算两个时间(LocalDate,年月日)的距离\",\"ZonedDateTime\",\"包含时区的时间\",\"同时Java中使用的历法是ISO 8601日历系统,他是世界民用历法,也就是我们所说的公历. 平年有365天,闰年有366天. 此外java8还提供了4套其他历法:\",\"ThaiBuddhistDate : 泰国佛教历\",\"MinguoDate : 中华民国历\",\"JapaneseDate : 日本历\",\"HijrahDate : 伊斯兰历\"]},\"893\":{\"h\":\"日期时间的常见操作\",\"t\":[\"LocalDateLocalTimeLocalDateTime 的常见操作\",\" /** * 新版JDK8 日期时间操作 */ @Test public void test01() throws ParseException { //创建指定的日期时间 LocalDate date1 = LocalDate.of(2022, 11, 18); System.out.println(date1);//2022-11-18 //获取当前的日期 LocalDate date2 = LocalDate.now(); System.out.println(date2);//2022-12-18 //根据我们的LocalDate对象获取对应的日期信息 System.out.println(\\\"年:\\\"+date2.getYear());//年:2022 System.out.println(\\\"月:\\\"+date2.getMonth());//月:DECEMBER System.out.println(\\\"月:\\\"+date2.getMonth().getValue());//月:12 System.out.println(\\\"日:\\\"+date2.getDayOfMonth());//日:18 System.out.println(\\\"星期:\\\"+date2.getDayOfWeek());//星期:SUNDAY System.out.println(\\\"星期:\\\"+date2.getDayOfWeek().getValue());//星期:7 } /** * 新版时间操作 */ @Test public void test02(){ //获取指定的时间 LocalTime time1 = LocalTime.of(5, 26, 33, 23145); System.out.println(time1);//05:26:33.000023145 //获取当前的时间 LocalTime time2 = LocalTime.now(); System.out.println(time2);//23:43:44.644 //获取时间信息 System.out.println(\\\"小时:\\\"+time2.getHour());//小时:23 System.out.println(\\\"分钟:\\\"+time2.getMinute());//分钟:45 System.out.println(\\\"秒:\\\"+time2.getSecond());//秒:52 System.out.println(\\\"纳秒:\\\"+time2.getNano());//纳秒:145000000 } /** * 新版日期时间操作 */ @Test public void test03(){ //获取指定的时间 LocalDateTime dateTime = LocalDateTime.of(2020,06,01,12,12,33,1511); System.out.println(dateTime);//2020-06-01T12:12:33.000001511 //获取当前的时间 LocalDateTime nowDateTime = LocalDateTime.now(); System.out.println(nowDateTime);//2022-12-18T23:49:14.329 //获取时间信息 System.out.println(\\\"年:\\\"+nowDateTime.getYear());//年:2022 System.out.println(\\\"月:\\\"+nowDateTime.getMonth());//月:DECEMBER System.out.println(\\\"月:\\\"+nowDateTime.getMonth().getValue());//月:12 System.out.println(\\\"日:\\\"+nowDateTime.getDayOfMonth());//日:18 System.out.println(\\\"星期:\\\"+nowDateTime.getDayOfWeek());//星期:SUNDAY System.out.println(\\\"星期:\\\"+nowDateTime.getDayOfWeek().getValue());//星期:7 System.out.println(\\\"小时:\\\"+nowDateTime.getHour());//小时:23 System.out.println(\\\"分钟:\\\"+nowDateTime.getMinute());//分钟:45 System.out.println(\\\"秒:\\\"+nowDateTime.getSecond());//秒:52 System.out.println(\\\"纳秒:\\\"+nowDateTime.getNano());//纳秒:145000000 } \"]},\"894\":{\"h\":\"日期时间的修改和比较\"},\"895\":{\"h\":\"修改\",\"t\":[\" /** * 日期时间的修改 */ @Test public void test01(){ LocalDateTime now = LocalDateTime.now(); System.out.println(\\\"修改前:\\\"+now); //修改时间 对已存在的LocalDate对象,创建了它的模板,并不会修改原有的信息,而是帮我们重新创建了对象 LocalDateTime localDateTime = now.withYear(1998); System.out.println(\\\"修改后:\\\"+now); System.out.println(\\\"修改后:\\\"+localDateTime); System.out.println(now.withMonth(10));//月份 System.out.println(now.withHour(10));//小时 //在当前日期的基础上加上或者减去指定的时间 System.out.println(now.plusDays(2));//两天后 System.out.println(now.plusYears(10));//十年后 System.out.println(now.minusWeeks(1));//一周前 System.out.println(now.minusYears(10));//十年前 } \",\"注意:在执行LocalDate对象的修改时,并不是直接修改了原有的LocalDate,而是返回一个修改后的新的LocalDate对象,原有的对象并不会受到影响,所以在多线程的环境下是安全的.\"]},\"896\":{\"h\":\"比较\",\"t\":[\" @Test public void test02(){ LocalDate now = LocalDate.now(); LocalDate date = LocalDate.of(1997, 11, 8); System.out.println(now.isAfter(date));//true now是否在date之后 System.out.println(now.isBefore(date));//false now是否在date之前 System.out.println(now.isEqual(date));//false now与date一致 } \"]},\"897\":{\"h\":\"格式化和解析操作\",\"t\":[\"在JDK8中我们可以通过** java.time.format.DateTimeFormatter** 类可以进行日期的解析和格式化操作\",\" /** * 日期格式化 */ @Test public void test01(){ LocalDateTime now = LocalDateTime.now(); //指定格式 使用系统默认的格式 2022-12-25T18:27:57.119 DateTimeFormatter isoLocalDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME; //将日期时间转换为字符串 String format = now.format(isoLocalDateTime); System.out.println(format); //指定转换 ofPattern指定想要的日期格式 2022/12/25 18:27:57 DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\\\"yyyy/MM/dd HH:mm:ss\\\"); String format1 = now.format(dateTimeFormatter); System.out.println(format1); //将字符串解析为指定时间类型 2022-12-25T18:27:57 LocalDateTime parse = LocalDateTime.parse(\\\"2022/12/25 18:27:57\\\", dateTimeFormatter); System.out.println(parse); } \"]},\"898\":{\"h\":\"Instant类\",\"t\":[\"在JDK8中给我提供了Instant类(时间戳/时间线),内部保存了从1970年1月1日 0时0分0秒 以来的 秒和纳秒\",\" /** * 时间戳 */ @Test public void test01() throws InterruptedException { Instant now = Instant.now(); System.out.println(now);//2022-12-25T10:36:09.565Z System.out.println(now.getNano());//获取从1970年1月1日 0时0分0秒 到现在的纳秒 Thread.sleep(5); Instant now1 = Instant.now(); System.out.println(\\\"耗时:\\\"+(now1.getNano()-now.getNano())); } \"]},\"899\":{\"h\":\"计算日期时间的差\",\"t\":[\"在JDK8中提供了两个工具类: Duration/Period 来计算两个日期时间的差\",\"Duration : 用来计算两个时间差(LocalTime)\",\"Period : 用来计算两个日期差(LocalDate)\",\" /** * 计算日期差 */ @Test public void test01() { //计算日期差 LocalTime now = LocalTime.now();//18:52:37.225 LocalTime time = LocalTime.of(22, 48, 59); //Duration计算时间差 Duration between = Duration.between(now,time); System.out.println(between.toDays());//相差的天数 0 System.out.println(between.toHours());//相差的小时 3 System.out.println(between.toMinutes());//相差的分钟 236 System.out.println(between.toMillis());//相差的秒 14181775 } /** * 计算日期差 */ @Test public void test02() { //计算日期差 LocalDate now = LocalDate.now();//2022-12-25 LocalDate date = LocalDate.of(1997, 11, 8); Period period = Period.between(date, now); System.out.println(period.getYears());//相差年份 25 System.out.println(period.getMonths());//相差月份 1 System.out.println(period.getDays());//相差天数 17 } \"]},\"900\":{\"h\":\"时间校正器\",\"t\":[\"有时候我们需要如下调整: 将日期调整到下个月的第一天等操作,这时我们通过时间校正器效果会更好\",\"TemporalAdjuster : 时间校正器 TemporalAdjusters : 通过该类静态方法提供了大量的常用TemporalAdjuster 实现,简化我们的处理操作\",\" /** * 时间校正器 */ @Test public void test03() { LocalDateTime now = LocalDateTime.now(); System.out.println(now);//2022-12-25T19:17:38.134 //将当前的日期调整到下个月的一号 TemporalAdjuster temporalAdjuster = (temporal) -> { LocalDateTime localDateTime = (LocalDateTime) temporal; LocalDateTime nextMonth = localDateTime.plusMonths(1).withDayOfMonth(1); System.out.println(\\\"localDateTime:\\\"+nextMonth);//localDateTime:2023-01-01T19:17:38.134 return nextMonth; }; LocalDateTime with = now.with(temporalAdjuster); System.out.println(with);//2023-01-01T19:17:38.134 //我们还可以通过TemporalAdjusters 来实现 LocalDateTime with1 = now.with(TemporalAdjusters.firstDayOfNextMonth()); System.out.println(with1);//2023-01-01T19:21:20.301 } \"]},\"901\":{\"h\":\"日期时间的时区\",\"t\":[\"Java8中加入了对时区的支持，LocalDate、 LocalTime、LocalDateTime是不带时区的，带时区的日期时间类分别为：ZonedDate / ZonedTime / ZonedDateTime\",\"其中每个时区都对应着ID，ID的格式为\\\"区域/城市”。例如：Asia/Shanghai等。\",\"Zoneld：该类中包含了所有的时区信息\",\" /** * 时区操作 */ @Test public void test1(){ //获取所有的时区ID ZoneId.getAvailableZoneIds().forEach(System.out::println); //获取当前时间 中国使用的是东八区的时区,比标准时间早八个小时 LocalDateTime now = LocalDateTime.now(); System.out.println(now);//2022-12-25T19:33:09.036 //获取标准时间 ZonedDateTime now1 = ZonedDateTime.now(Clock.systemUTC()); System.out.println(now1);// 2022-12-25T11:33:09.036Z //获取特定时区的时间 //以当前计算机时区获取时间 ZonedDateTime now2 = ZonedDateTime.now(); System.out.println(now2);//2022-12-25T19:33:09.036+08:00[Asia/Shanghai] //设定指定时区的时间 ZonedDateTime now3 = ZonedDateTime.now(ZoneId.of(\\\"America/Marigot\\\")); System.out.println(now3);//2022-12-25T07:33:09.036-04:00[America/Marigot] } \"]},\"902\":{\"h\":\"JDK新的日期和时间APi的优势:\",\"t\":[\"新版日期时间API中,日期和时间对象是不可变的,操作日期不会影响原来的值,而是生成一个新的实例\",\"提供不同两种方法,有效的区分了日和机器的操作\",\"TemporalAdjuster可以更精确的操作日期,还可以自定义日期调整\",\"线程安全的\"]},\"903\":{\"h\":\"其他新特性\"},\"904\":{\"h\":\"重复注解\",\"t\":[\"自从Java5中引用注解以来,注解开始变得非常流行. 并在哥哥框架和项目中被广泛使用. 不过注解有一个最大的限制是: 在同一个地方不能多次使用同一个注解. JDK8引入了重复注解的概念,允许在同一个对方多次使用同一个注解.\",\"在JDK8 中使用@Repeatable注解定义重复注解.\",\"定义一个重复注解的容器\",\"@Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotations { MyAnnotation[] value(); } \",\"定义重复注解\",\"@Repeatable(MyAnnotations.class) @Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation { String value(); } \",\"使用重复注解\",\"@MyAnnotation(\\\"Test1\\\") @MyAnnotation(\\\"Test2\\\") @MyAnnotation(\\\"Test3\\\") public class AnnoTest01 { @MyAnnotation(\\\"fun1\\\") @MyAnnotation(\\\"fun2\\\") public void test01(){ } /** * 解析重复注解 * @param args */ public static void main(String[] args) throws NoSuchMethodException { //获取类上的注解 MyAnnotation[] annotationsByType = AnnoTest01.class.getAnnotationsByType(MyAnnotation.class); for (MyAnnotation myAnnotation : annotationsByType) { System.out.println(myAnnotation.value()); } //获取方法上的注解 MyAnnotation[] test01s = AnnoTest01.class.getDeclaredMethod(\\\"test01\\\").getAnnotationsByType(MyAnnotation.class); for (MyAnnotation test01 : test01s) { System.out.println(test01.value()); } } } \"]},\"905\":{\"h\":\"类型注解\",\"t\":[\"JDK8 为@Target原注解新增了两种类型: TYPE_PARAMETER TYPE_USE\",\"TYPE_PARAMETER : 表示该注解能卸载类型参数的声明语句中,类型参数声明如:<T>\",\"@Target(ElementType.TYPE_PARAMETER) public @interface TypeParam { } \",\"public class TypeDemo01 <@TypeParam T>{ public <@TypeParam K extends Object> K test01(){ return null; } } ``` 2. TYPE\\\\_USE : 表示注解可以在任何用到类型的地方使用 ```java @Target(ElementType.TYPE_PARAMETER) public @interface TypeParam { } \",\"public class TypeUserDemo01 { public @NotNull Integer agentId = 10; public void test02(@NotNull String name,@NotNull String sex){ } } \"]},\"906\":{\"h\":\"概念与安装\"},\"907\":{\"h\":\"数据库基本概念\"},\"908\":{\"h\":\"数据\",\"t\":[\"所谓数据（Data）是指对客观事物进行描述并可以鉴别的符号，这些符号是可识别的、抽象的。它不仅仅指狭义上的数字，而是有多种表现形式：字母、文字、文本、图形、音频、视频等。现在计算机存储和处理的数据范围十分广泛，而描述这些数据的符号也变得越来越复杂了。\"]},\"909\":{\"h\":\"数据库\",\"t\":[\"数据库（Database，DB）指的是以一定格式存放、能够实现多个用户共享、与应用程序彼此独立的数据集合。\"]},\"910\":{\"h\":\"数据库管理系统\",\"t\":[\"数据库管理系统（Database Management System，DBMS）是用来定义和管理数据的软件。如何科学的组织和存储数据，如何高效的获取和维护数据，如何保证数据的安全性和完整性，这些都需要靠数据库管理系统完成。目前，比较流行的数据库管理系统有：Oracle、MySQL、SQL Server、DB2等。\"]},\"911\":{\"h\":\"数据库应用程序\",\"t\":[\"数据库应用程序（Database Application System，DBAS）是在数据库管理系统基础上，使用数据库管理系统的语法，开发的直接面对最终用户的应用程序，如学生管理系统、人事管理系统、图书管理系统等。\"]},\"912\":{\"h\":\"数据库管理员\",\"t\":[\"数据库管理员（Database Administrator，DBA）是指对数据库管理系统进行操作的人员，其主要负责数据库的运营和维护。\"]},\"913\":{\"h\":\"最终用户\",\"t\":[\"最终用户（User）指的是数据库应用程序的使用者。用户面向的是数据库应用程序（通过应用程序操作数据），并不会直接与数据库打交道。\"]},\"914\":{\"h\":\"数据库系统\",\"t\":[\"数据库系统（Database System，DBS）一般是由数据库、数据库管理系统、数据库应用程序、数据库管理员和最终用户构成。其中DBMS是数据库系统的基础和核心。\"]},\"915\":{\"h\":\"数据库类型\"},\"916\":{\"h\":\"常见的数据库类型\",\"t\":[\"数据库经过几十年的发展，出现了多种类型。根据数据的组织结构不同，主要分为网状数据库、层次数据库、关系型数据库和非关系型数据库四种。目前最常见的数据库模型主要是：关系型数据库和非关系型数据库。\"]},\"917\":{\"h\":\"关系型数据库\",\"t\":[\"关系型数据库模型是将复杂的数据结构用较为简单的二元关系（二维表）来表示，如图1-4所示。在该类型数据库中，对数据的操作基本上都建立在一个或多个表格上，我们可以采用结构化查询语言（SQL）对数据库进行操作。关系型数据库是目前主流的数据库技术，其中具有代表性的数据库管理系统有：Oracle、DB2、SQL Server、MySQL等。\"]},\"918\":{\"h\":\"非关系型数据库NOSQL\",\"t\":[\"NOSQL（Not Only SQL）泛指非关系型数据库。关系型数据库在超大规模和高并发的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题。NOSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。常见的非关系型数据库管理系统有Memcached、MongoDB，redis，HBase等。 \"]},\"919\":{\"h\":\"关系型数据库和非关系数据库\",\"t\":[\"虽然非关系型数据库的优点很多，但是由于其并不提供SQL支持、学习和使用成本较高并且无事务处理，所以本书的重点是关系型数据库。下面我们将介绍一下常用的关系型数据库管理系统。\",\"Oracle Oracle数据库是由美国的甲骨文（Oracle）公司开发的世界上第一款支持SQL语言的关系型数据库。经过多年的完善与发展，Oracle数据库已经成为世界上最流行的数据库，也是甲骨文公司的核心产品。 Oracle数据库具有很好的开放性，能在所有的主流平台上运行，并且性能高、安全性高、风险低；但是其对硬件的要求很高、管理维护和操作比较复杂而且价格昂贵，所以一般用在满足对银行、金融、保险等行业大型数据库的需求上。\",\"DB2 DB2是IBM公司著名的关系型数据库产品。DB2无论稳定性，安全性，恢复性等等都无可挑剔，而且从小规模到大规模的应用都可以使用，但是用起来非常繁琐，比较适合大型的分布式应用系统。\",\"SQL Server SQL Server是由Microsoft开发和推广的关系型数据库，SQL Server的功能比较全面、效率高，可以作为中型企业或单位的数据库平台。SQL Server可以与Windows操作系统紧密继承，无论是应用程序开发速度还是系统事务处理运行速度，都能得到大幅度提升。但是，SQL Server只能在Windows系统下运行，毫无开放性可言。\",\"MySQL MySQL是一种开放源代码的轻量级关系型数据库，MySQL数据库使用最常用的结构化查询语言（SQL）对数据库进行管理。由于MySQL是开放源代码的，因此任何人都可以在General Public License的许可下下载并根据个人需要对其缺陷进行修改。 由于MySQL数据库体积小、速度快、成本低、开放源码等优点，现已被广泛应用于互联网上的中小型网站中，并且大型网站也开始使用MySQL数据库，如网易、新浪等。 \"]},\"920\":{\"h\":\"MySQL介绍\",\"t\":[\"MySQL数据库最初是由瑞典MySQL AB公司开发，2008年1月16号被Sun公司收购。2009年，SUN又被Oracle收购。MySQL是目前IT行业最流行的开放源代码的数据库管理系统，同时它也是一个支持多线程高并发多用户的关系型数据库管理系统。MySQL之所以受到业界人士的青睐，主要是因为其具有以下几方面优点：\",\"开放源代码 MySQL最强大的优势之一在于它是一个开放源代码的数据库管理系统。开源的特点是给予了用户根据自己需要修改DBMS的自由。MySQL采用了General Public License，这意味着授予用户阅读、修改和优化源代码的权利，这样即使是免费版的MySQL的功能也足够强大，这也是为什么MySQL越来越受欢迎的主要原因。\",\"跨平台 MySQL可以在不同的操作系统下运行，简单地说，MySQL可以支持Windows系统、UNIX系统、Linux系统等多种操作系统平台。这意味着在一个操作系统中实现的应用程序可以很方便地移植到其他的操作系统下。\",\"轻量级 MySQL的核心程序完全采用多线程编程，这些线程都是轻量级的进程，它在灵活地为用户提供服务的同时，又不会占用过多的系统资源。因此MySQL能够更快速、高效的处理数据。\",\"成本低 MySQL分为社区版和企业版，社区版是完全免费的，而企业版是收费的。即使在开发中需要用到一些付费的附加功能，价格相对于昂贵的Oracle、DB2等也是有很大优势的。其实免费的社区版也支持多种数据类型和正规的SQL查询语言，能够对数据进行各种查询、增加、删除、修改等操作，所以一般情况下社区版就可以满足开发需求了，而对数据库可靠性要求比较高的企业可以选择企业版。\",\"另外，PHP中提供了一整套的MySQL函数，对MySQL进行了全方位的强力支持。\",\"总体来说，MySQL是一款开源的、免费的、轻量级的关系型数据库，其具有体积小、速度快、成本低、开放源码等优点，其发展前景是无可限量的。\",\"社区版与企业版主要的区别是：\",\"社区版包含所有MySQL的最新功能，而企业版只包含稳定之后的功能。换句话说，社区版可以理解为是企业版的测试版\",\"MySQL官方的支持服务只是针对企业版，如果用户在使用社区版时出现了问题，MySQL官方是不负责任的\"]},\"921\":{\"h\":\"MySQL安装\",\"t\":[\"官方下载地址：https://dev.mysql.com/downloads/windows/installer/8.0.html\"]},\"922\":{\"h\":\"安装步骤\",\"t\":[\"双击MySQL安装文件mysql-installer-community-8.0.18.0.msi，出现安装类型选项: Developer Default：开发者默认 Server only：只安装服务器端 Client only：只安装客户端 Full：安装全部选项 Custom：自定义安装\",\"选择，然后继续：\",\"进入产品配置向导，配置多个安装细节，点击Next按钮即可:\",\"高可靠性High Availability，采用默认选项即可: InnoDB Cluster:InnoDB集群 Standalone MySQL Server/Classic MySQL Replication:独立MySQL服务器/经典MySQL复制\",\"类型和网络 Type and Networking，采用默认选项即可。记住MySQL的监听端口默认是3306\",\"身份验证方法Authentication Method，采用默认选项即可:\",\"账户和角色 Accounts and Roles。MySQL管理员账户名称是root，在此处指定root用户的密码。还可以在此处通过Add User按钮添加其他新账户，此处省略该操作。\",\"Windows服务：Windows Service Configure MySQL Server as a Windows Service:给MySQL服务器配置一个服务项 Windows Service Name:服务名称，采用默认名称MySQL80即可 Start the MySQL at System Startup：系统启动时开启MySQL服务\",\"Apply Configuration：点击Execute按钮执行开始应用这些配置项 Writing configuration file: 写配置文件。 Updating Windows Firewall rules：更新Windows防火墙规则 Adjusting Windows services：调整Windows服务 Initializing database：初始化数据库 Starting the server： 启动服务器 Applying security setting：应用安全设置 Updating the Start menu link：更新开始菜单快捷方式链接 如果配置出错，查看右侧的log，查看对应错误信息: 执行完成后，如下图所示。单击Finish完成安装，进入产品配置环节。\",\"产品配置Product Configuration到此结束：点击Next按钮\",\"安装完成 Installation Complete。点击Finish按钮完成安装\"]},\"923\":{\"h\":\"检测安装是否成功\",\"t\":[\"安装了Windows Service：MySQL80，并且已经启动\",\"安装了MySQL软件。安装位置为：C:\\\\Program Files\\\\MySQL （MySQL文件下放的是软件的内容）\",\"安装了MySQL数据文件夹，用来存放MySQL基础数据和以后新增的数据。安装位置为C:\\\\ProgramData\\\\MySQL\\\\MySQL Server 8.0 （ProgramData文件夹可能是隐藏的，显示出来即可） （MySQL文件下的内容才是真正的MySQL中数据）\",\"在MySQL数据文件夹中有MySQL的配置文件：my.ini。它是MySQL数据库中使用的配置文件，修改这个文件可以达到更新配置的目的。以下几个配置项需要大家特别理解\",\"port=3306：//监听端口是3306 basedir=\\\"C:/Program Files/MySQL/MySQL Server 8.0/\\\"：//软件安装位置 datadir=C:/ProgramData/MySQL/MySQL Server 8.0/Data：//数据文件夹位置 default_authentication_plugin=caching_sha2_password：//默认验证插件 default-storage-engine=INNODB：//默认存储引擎 （这些内容在Linux下可能会手动更改） \"]},\"924\":{\"h\":\"MySQL访问\"},\"925\":{\"h\":\"登录\",\"t\":[\"访问MySQL服务器对应的命令：mysql.exe ,位置：C:\\\\Program Files\\\\MySQL\\\\MySQL Server 8.0\\\\bin （mysql.exe需要带参数执行，所以直接在图形界面下执行该命令会自动结束）\",\"打开控制命令台：win+r:\",\"执行mysql.exe命令的时候出现错误：\",\"需要配置环境变量path:\",\"注意：控制命令台必须重启才会生效：\",\"登录的命令：mysql -hlocalhost -uroot –p\",\"mysql：bin目录下的文件mysql.exe。mysql是MySQL的命令行工具，是一个客户端软件，可以对任何主机的mysql服务（即后台运行的mysqld）发起连接。\",\"-h：host主机名。后面跟要访问的数据库服务器的地址；如果是登录本机，可以省略 -u：user 用户名。后面跟登录数据的用户名，第一次安装后以root用户来登录，是MySQL的管理员用户 -p: password 密码。一般不直接输入，而是回车后以保密方式输入。 \"]},\"926\":{\"h\":\"访问数据库\",\"t\":[\"显示MySQL中的数据库列表：show databases; 默认有四个自带的数据库，每个数据库中可以有多个数据库表、视图等对象。\",\"切换当前数据库的命令：use mysql; MySQL下可以有多个数据库，如果要访问哪个数据库，需要将其置为当前数据库。\",\"该命令的作用就是将数据库mysql（默认提供的四个数据库之一的名字）置为当前数据库 显示当前数据库的所有数据库表：show tables;\",\"MySQL 层次：不同项目对应不同的数据库组成 - 每个数据库中有很多表 - 每个表中有很多数据\"]},\"927\":{\"h\":\"退出数据库\",\"t\":[\"退出数据库可以使用quit或者exit命令完成，也可以用\\\\q; 完成退出操作\"]},\"928\":{\"h\":\"MySQL卸载\",\"t\":[\"停止MySQL服务：在命令行模式下执行net stop mysql或者在Windows服务窗口下停止服务\",\"在控制面板中删除MySQL软件\",\"删除软件文件夹：直接删除安装文件夹C:\\\\Program Files\\\\MySQL，其实此时该文件夹已经被删除或者剩下一个空文件夹。\",\"删除数据文件夹：直接删除文件夹C:\\\\ProgramData\\\\MySQL。此步不要忘记，否则会影响MySQL的再次安装。 （ProgramData文件夹可能是隐藏的，显示出来即可） （MySQL文件下的内容才是真正的MySQL中数据）\",\"删除path环境变量中关于MySQL安装路径的配置\",\"我们将Mysql安装到虚拟机环境中,此时我们需要执行以下配置\",\"配置VMware的网络 配置NAT模式 以及子网: 配置网关: 将虚拟机镜像设置为NAT\",\"配置虚拟机的网络 虚拟机内部IPV4\",\"配置Mysql的远程访问 在cmd命令行连接数据库：mysql -uroot -p 切换mysql数据库：use mysql; 查看user表中的host信息：select host,user from user; 可以看到root对应的host是localhost，我们将它改成%即可：update user set host = '%' where user = 'root'; 刷新权限：flush privileges;\",\"测试远程访问\"]},\"929\":{\"h\":\"MySQL入门\"},\"930\":{\"h\":\"概述\",\"t\":[\"我们都知道，数据库管理人员（DBA）通过数据库管理系统（DBMS）可以对数据库（DB）中的数据进行操作，但具体是如何操作的呢？这就涉及到我们本节要讲的SQL语言。\",\"SQL（Structured Query Language）是结构化查询语言的简称，它是一种数据库查询和程序设计语言，同时也是目前使用最广泛的关系型数据库操作语言。在数据库管理系统中，使用SQL语言来实现数据的存取、查询、更新等功能。SQL是一种非过程化语言，只需提出“做什么”，而不需要指明“怎么做”。\",\"SQL是由IBM公司在1974~1979年之间根据E.J.Codd发表的关系数据库理论为基础开发的，其前身是“SEQUEL”，后更名为SQL。由于SQL语言具有集数据查询、数据操纵、数据定义和数据控制功能于一体，类似自然语言、简单易用以及非过程化等特点，得到了快速的发展，并于1986年10月，被美国国家标准协会（American National Standards Institute，ANSI）采用为关系数据库管理系统的标准语言，后为国际标准化组织（International Organization for Standardization，ISO）采纳为国际标准。\",\"官方说明文档: ![[assets/mysql.chm]]\"]},\"931\":{\"h\":\"SQL语言分类\"},\"932\":{\"h\":\"数据查询语言（Data Query Language，DQL）\",\"t\":[\"DQL主要用于数据的查询，其基本结构是使用SELECT子句，FROM子句和WHERE子句的组合来查询一条或多条数据。\"]},\"933\":{\"h\":\"数据操作语言（Data Manipulation Language，DML）\",\"t\":[\"DML主要用于对数据库中的数据进行增加、修改和删除的操作，其主要包括：\",\"INSERT：增加数据\",\"UPDATE：修改数据\",\"DELETE：删除数据\"]},\"934\":{\"h\":\"数据定义语言（Data Definition Language，DDL）\",\"t\":[\"DDL主要用针对是数据库对象（数据库、表、索引、视图、触发器、存储过程、函数）进行创建、修改和删除操作。其主要包括：\",\"CREATE：创建数据库对象\",\"ALTER：修改数据库对象\",\"DROP：删除数据库对象\"]},\"935\":{\"h\":\"数据控制语言（Data Control Language，DCL）\",\"t\":[\"DCL用来授予或回收访问 数据库的权限，其主要包括：\",\"GRANT：授予用户某种权限\",\"REVOKE：回收授予的某种权限\"]},\"936\":{\"h\":\"事务控制语言（Transaction Control Language，TCL）\",\"t\":[\"TCL用于数据库的事务管理。其主要包括：\",\"START TRANSACTION：开启事务\",\"COMMIT：提交事务\",\"ROLLBACK：回滚事务\",\"SET TRANSACTION：设置事务的属性 \"]},\"937\":{\"h\":\"初始化表案例\",\"t\":[\"建立一张用来存储学生信息的表\",\"字段包含学号、姓名、性别，年龄、入学日期、班级，email等信息\",\"学号是主键 = 不能为空 + 唯一\",\"姓名不能为空\",\"性别默认值是男\",\"Email唯一\",\"##这是一个单行注释 /* 多行注释 多行注释 多行注释 */ /* 建立一张用来存储学生信息的表 字段包含学号、姓名、性别，年龄、入学日期、班级，email等信息 */ -- 创建数据库表： create table t_student( sno int(6), -- 6显示长度 sname varchar(5), -- 5个字符 sex char(1), age int(3), enterdate date, classname varchar(10), email varchar(15) ); -- 查看表的结构：展示表的字段详细信息 desc t_student; -- 查看表中数据： select * from t_student; -- 查看建表语句： show create table t_student; /* CREATE TABLE `t_student` ( `sno` int DEFAULT NULL, `sname` varchar(5) DEFAULT NULL, `sex` char(1) DEFAULT NULL, `age` int DEFAULT NULL, `enterdate` date DEFAULT NULL, `classname` varchar(10) DEFAULT NULL, `email` varchar(15) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci */ \"]},\"938\":{\"h\":\"数据库表列类型\"},\"939\":{\"h\":\"整数类型\",\"t\":[\"整数类型\",\"大小\",\"表数范围(有符号)\",\"表数范围(无符号)\",\"作用\",\"TINYINT\",\"1字节\",\"(-128,127)\",\"(0,255)\",\"小整数值\",\"SMALLINT\",\"2字节\",\"(-32768,32767)\",\"(0,65526)\",\"大整数值\",\"MEDIUMINT\",\"3字节\",\"(-8388608,8388607)\",\"(0,16777215)\",\"大整数值\",\"INT/INTEGER\",\"4字节\",\"(-2147483648,2147483647)\",\"(0,4294967295)\",\"大整数值\",\"BIGINT\",\"8字节\",\"(-9233372036854775808,9233372036854775807)\",\"(0,18446744073709551615)\",\"极大整数值\",\"MySQL支持选择在该类型关键字后面的括号内指定整数值的显示宽度(例如，INT(4))。显示宽度并不限制可以在列内保存的值的范围，也不限制超过列的指定宽度的值的显示\",\"主键自增：不使用序列，通过auto_increment，要求是整数类型\"]},\"940\":{\"h\":\"浮点数类型\",\"t\":[\"浮点数类型\",\"大小\",\"作用\",\"FLOAT\",\"4字节\",\"单精度浮点数值\",\"DOUBLE\",\"8字节\",\"双精度浮点数值\",\"需要注意的是与整数类型不一样的是，浮点数类型的宽度不会自动扩充。 score double(4,1)\",\"score double(4,1) --小数部分为1位，总宽度4位，并且不会自动扩充。\"]},\"941\":{\"h\":\"字符串类型\",\"t\":[\"字符串类型\",\"大小\",\"描述\",\"CHAR(M)\",\"0~255字符\",\"允许长度0~M个字符长度的定长字符串\",\"VARCHAR(M)\",\"0~65535字符\",\"允许长度0~M个字符长度的定长字符串\",\"BINARY(M)\",\"0~255字节\",\"允许长度0~M个字符长度的定长二进制字符串\",\"VARBINARY(M)\",\"0~65535字节\",\"允许长度0~M个字符长度的定长二进制字符串\",\"TINYBLOB\",\"0~255字节\",\"二进制形式的短文本数据(长度为不超过255个字符)\",\"TINYTEXT\",\"0~255字节\",\"短文本数据\",\"BLOB\",\"binary largeObject\",\"二进制形式的长文本数据\",\"TEXT\",\"长文本数据\",\"MEDIUMBLOB\",\"0~16777215字节\",\"二进制形式的中等长度文本数据\",\"MEDUYMTEXT\",\"0~16777215字节\",\"中等长度文本数据\",\"LOGNGBLOB\",\"0~4294967295字节\",\"二进制形式的极大文本数据\",\"LONGTEXT\",\"0~4294967295字节\",\"极大文本数据\",\"CHAR和VARCHAR类型相似，均用于存于较短的字符串，主要的不同之处在于存储方式。CHAR类型长度固定，VARCHAR类型的长度可变。\",\"因为VARCHAR类型能够根据字符串的实际长度来动态改变所占字节的大小，所以在不能明确该字段具体需要多少字符时推荐使用VARCHAR类型，这样可以大大地节约磁盘空间、提高存储效率。\",\"CHAR和VARCHAR表示的是字符的个数，而不是字节的个数\"]},\"942\":{\"h\":\"日期和时间类型\",\"t\":[\"类型\",\"格式\",\"取值范围\",\"0值\",\"TIME\",\"'HH:MM:SS'\",\"(-838:59:59,838:59:59)\",\"00:00:00\",\"DATE\",\"YYYY-MM-DD\",\"(1000-01-01,9999-12-31)\",\"0000-00-00\",\"YEAR\",\"YYYY\",\"(1901,2155)\",\"0000\",\"DATETIME\",\"YYYY-MM-DD HH:MM:SS\",\"1000-01-01 00:00:00,9999-12-31 23:59:59\",\"0000-00-00 00:00:00\",\"TIMESTAMP\",\"YYYY-MM-DD HH:MM:SS\",\"1970-01-01 00:00:01 UTC,2038-01-19 03:14:07 UTC\",\"0000-00-00 00:00:00\",\"TIMESTEMP类型的数据指定方式与DATETIME基本相同，两者的不同之处在于以下几点：\",\"数据的取值范围不同，TIMESTEMP类型的取值范围更小。\",\"如果我们对TIMESTAMP类型的字段没有明确赋值，或是被赋与了NULL值，MySQL会自动将该字段赋值为系统当前的日期与时间。\",\"TIMESTEMP类型还可以使用CURRENT_TIMESTAMP来获取系统当前时间。\",\"TIMESTEMP类型有一个很大的特点，那就是时间是根据时区来显示的。\\n例如，在东八区插入的TIMESTEMP数据为2017-07-11 16:43:25，在东七区显示时，时间部分就变成了15:43:25，在东九区显示时，时间部分就变成了17:43:25。\"]},\"943\":{\"h\":\"DDL和DML\"},\"944\":{\"h\":\"DDL 数据库定义语言\"},\"945\":{\"h\":\"操作数据库\"},\"946\":{\"h\":\"创建数据库\",\"t\":[\"create database 数据库名 [character set 字符集][collate 校对规则] \"]},\"947\":{\"h\":\"查询所有数据库\",\"t\":[\"show databases; \"]},\"948\":{\"h\":\"查询某个数据库的结构\",\"t\":[\"show create database 数据库名; \"]},\"949\":{\"h\":\"查询当前正在使用哪个数据库\",\"t\":[\"select database(); \"]},\"950\":{\"h\":\"修改数据库的字符集\",\"t\":[\"alter database 数据库名 character set 字符集; \"]},\"951\":{\"h\":\"选中某个数据库\",\"t\":[\"USE 数据库名; \"]},\"952\":{\"h\":\"删除数据库\",\"t\":[\"drop database 数据库名; \"]},\"953\":{\"h\":\"表的操作\"},\"954\":{\"h\":\"创建表\",\"t\":[\"create table 表名( 列名 类型 [约束], 列名 类型 [约束] ... ); \"]},\"955\":{\"h\":\"一般创建\",\"t\":[\"-- 创建数据库表： create table t_student( sno int(6), -- 6显示长度 sname varchar(5), -- 5个字符 sex char(1), age int(3), enterdate date, classname varchar(10), email varchar(15) ); \"]},\"956\":{\"h\":\"快速创建\",\"t\":[\"-- 添加一张表：快速添加：结构和数据跟t_student 都是一致的 create table t_student2 as select * from t_student; -- 快速添加，结构跟t_student一致，数据没有： create table t_student3 as select * from t_student where 1=2; -- 快速添加：只要部分列，部分数据： create table t_student4 as select sno,sname,age from t_student where sno = 2; \"]},\"957\":{\"h\":\"修改表\"},\"958\":{\"h\":\"添加一个字段\",\"t\":[\"//添加一个字段，默认在最后添加 alter table 【数据库名.】表名称 add 【column】 字段名 数据类型; //添加到第一个字段 alter table 【数据库名.】表名称 add 【column】 字段名 数据类型 first; //在某一个字段后面添加 alter table 【数据库名.】表名称 add 【column】 字段名 数据类型 after 另一个字段; \"]},\"959\":{\"h\":\"修改表的字段类型和约束\",\"t\":[\"alter table 表名 modify 字段 类型 约束 ；` \"]},\"960\":{\"h\":\"修改列的名字\",\"t\":[\"alter table 表名 change 旧列 新列 类型 约束;` \"]},\"961\":{\"h\":\"删除字段\",\"t\":[\"alter table 表名 drop 列名;` \"]},\"962\":{\"h\":\"修改表名\",\"t\":[\"`rename table 旧表名 to 新表名;` \"]},\"963\":{\"h\":\"查询所有表\",\"t\":[\"show tables; \"]},\"964\":{\"h\":\"查询某张表的结构\",\"t\":[\"desc 表名; \"]},\"965\":{\"h\":\"查看建表语句\",\"t\":[\"-- 查看建表语句： show create table t_student; /* CREATE TABLE `t_student` ( `sno` int DEFAULT NULL, `sname` varchar(5) DEFAULT NULL, `sex` char(1) DEFAULT NULL, `age` int DEFAULT NULL, `enterdate` date DEFAULT NULL, `classname` varchar(10) DEFAULT NULL, `email` varchar(15) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci */ \"]},\"966\":{\"h\":\"删除表\",\"t\":[\"drop table 表名； \"]},\"967\":{\"h\":\"清空表\",\"t\":[\"-- 删除数据操作 :清空数据 delete from 表名; truncate table 表名; \"]},\"968\":{\"h\":\"DML\"},\"969\":{\"h\":\"插入数据\"},\"970\":{\"h\":\"指定插入的列\",\"t\":[\"insert into 表名(列,列..) values(值,值..); \"]},\"971\":{\"h\":\"不指定插入的列\",\"t\":[\"insert into 表名 values(值,值....); \"]},\"972\":{\"h\":\"例子\",\"t\":[\"-- 在t_student数据库表中插入数据： insert into t_student values (1,'张三','男',18,'2022-5-8','软件1班','123@126.com'); insert into t_student values (10010010,'张三','男',18,'2022-5-8','软件1班','123@126.com'); insert into t_student values (2,'张三','男',18,'2022.5.8','软件1班','123@126.com'); insert into t_student values (2,\\\"张三\\\",'男',18,'2022.5.8','软件1班','123@126.com'); insert into t_student values (7,\\\"张三\\\",'男',18,now(),'软件1班','123@126.com'); insert into t_student values (9,\\\"易烊千玺\\\",'男',18,now(),'软件1班','123@126.com'); insert into t_student (sno,sname,enterdate) values (10,'李四','2023-7-5'); \",\"int 宽度是显示宽度，如果超过，可以自动增大宽度 int底层都是4个字节\",\"时间的方式多样 '1256-12-23' \\\"1256/12/23\\\" \\\"1256.12.23\\\"\",\"字符串不区分单引号和双引号\",\"如何写入当前的时间 now() , sysdate() ,CURRENT\\\\_DATE()\",\"char varchar 是字符的个数，不是字节的个数，可以使用binary，varbinary表示定长和不定长的字节个数。\",\"如果不是全字段插入数据的话，需要加入字段的名字\",\"注意事项： ①：在做插值的操作时，值的位置要与列的字段名一一对应 ②：可以只指定部分列进行插值操作，其他未指定的列，将采用NULL或default默认值 ③：如果有自增的字段可以在插值的时候使用NULL代替 ④：如果列使用了非空约束，则必须插入\"]},\"973\":{\"h\":\"修改数据\",\"t\":[\"update 表名 set 列 =值, 列 =值 [where 条件] \",\"例子:\",\"-- 修改表中数据 update t_student set sex = '女' ; update t_student set sex = '男' where sno = 10 ; UPDATE T_STUDENT SET AGE = 21 WHERE SNO = 10; update t_student set CLASSNAME = 'java01' where sno = 10 ; update t_student set CLASSNAME = 'JAVA01' where sno = 9 ; update t_student set age = 29 where classname = 'java01'; -- 删除操作： delete from t_student where sno = 2; \",\"关键字，表名，字段名不区分大小写\",\"默认情况下，内容不区分大小写\",\"删除操作from关键字不可缺少\",\"修改，删除数据别忘记加限制条件\"]},\"974\":{\"h\":\"删除数据 delect&truncate\"},\"975\":{\"h\":\"delect\",\"t\":[\"删除表中的数据，但是可以通过事务回滚\",\"delete from 表名 [where 条件] \"]},\"976\":{\"h\":\"truncate\",\"t\":[\"删除原表，再创建相同的新表， ​不可以通过事务回滚\",\"truncate table 表; \",\"delete和truncate的区别:\",\"从最终的结果来看，虽然使用TRUNCATE操作和使用DELETE操作都可以删除表中的全部记录，但是两者还是有很多区别的，其区别主要体现在以下几个方面：\",\"DELETE为数据操作语言DML；TRUNCATE为数据定义语言DDL。\",\"DELETE操作是将表中所有记录一条一条删除直到删除完；TRUNCATE操作则是保留了表的结构，重新创建了这个表，所有的状态都相当于新表。因此，TRUNCATE操作的效率更高。\",\"DELETE操作可以回滚；TRUNCATE操作会导致隐式提交，因此不能回滚。\",\"DELETE操作执行成功后会返回已删除的行数（如删除4行记录，则会显示“Affected rows：4”）；截断操作**不会返回已删除的行量**，结果通常是“Affected rows：0”。DELETE操作删除表中记录后，再次向表中添加新记录时，对于设置有自增约束字段的值会从删除前表中该字段的最大值加1开始自增；TRUNCATE操作则会重新从1开始自增。\"]},\"977\":{\"h\":\"物理删除和逻辑和删除的区别\"},\"978\":{\"h\":\"物理删除\",\"t\":[\"真正的删除了，数据不存在\"]},\"979\":{\"h\":\"逻辑删除\",\"t\":[\"没有删除，数据还在。只是在数据中添加了状态标记：Start = 1  时启用，Start = 0 时禁用\"]},\"980\":{\"h\":\"约束策略\"},\"981\":{\"h\":\"概述\",\"t\":[\"为防止不符合规范的数据存入数据库，在用户对数据进行插入、修改、删除等操作时，MySQL提供了一种机制来检查数据库中的数据是否满足规定的条件，以保证数据库中数据的准确性和一致性，这种机制就是完整性约束。\",\"约束条件\",\"约束条件\",\"PRIMARY KEY\",\"主键约束，约束字段的值可唯一地标识对应的记录\",\"NOT NULL\",\"非空约束，约束字段的值不能为空\",\"UNIQUE\",\"唯一约束，约束字段的值是唯一的\",\"CHECK\",\"检查约束，限制某个字段的取值范围\",\"DEFAULT\",\"默认值约束，约束字段的默认值\",\"AUTO_INCREMENT\",\"自动增加约束，约束字段的值自动递增\",\"FOREIGN KEY\",\"外键约束，约束表与表之间的关系\",\"MySQL中主要支持以下几种种完整性约束，如表所示。 其中Check约束是MySQL8中提供的支持。\"]},\"982\":{\"h\":\"查看约束\",\"t\":[\"SELECT * FROM information_schema.table_constraints WHERE table_name = '表名称'; SHOW CREATE TABLE 表名; SHOW INDEX FROM 表名称; \"]},\"983\":{\"h\":\"约束的命名规则\",\"t\":[\"数据库名：与系统名相同 表名：系统名称缩写_表名（表名必须描述该表的用途，由单个或多个名词组成，首字母小写，后续单词首字母大写） 字段名：字段名必须描述该字段的用途，由单个或多个名词组成，单词之间用下划线连接 主键字段：表名+Id 外键字段：与主表主键字段完全一样 主键：pk_表名 外键：fk_从表名_主表名 视图：view_名称 存储过程：prcd_名称 函数：fun_名称 触发器：trg_名称 索引：idx_名称\"]},\"984\":{\"h\":\"主键约束 PRIMARY KEY\"},\"985\":{\"h\":\"概念\",\"t\":[\"创建表，要设计主键，要把一些字段作为主键（可以是一个字段[单一主键]，也可以是多个字段[复合主键]），表示这个字段值非空的，唯一的\"]},\"986\":{\"h\":\"特点\",\"t\":[\"主键约束相当于唯一约束+非空约束的组合，主键约束列**不允许重复，也不允许出现空值 ，如果是多列组合的主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。\",\"每个表有且最多只允许一个主键约束。\",\"MySQL的主键名总是PRIMARY， 就算自己命名了主键约束名也没用。\",\"当创建主键约束时， MySQL默认在对应的列上建立主键索引。删除主键时， 也会直接删除主键索引。\"]},\"987\":{\"h\":\"创建表时创建\",\"t\":[\"#创建单一主键方式一 CREATE TABLE users( id INT PRIMARY KEY, sname VARCHAR(100) ) #创建单一主键方式二 CREATE TABLE person( id INT, NAME VARCHAR(100), PRIMARY KEY(id) ) #创建复合主键方式 CREATE TABLE book( id INT, bname VARCHAR(100), bno INT, PRIMARY KEY(id,bno) ) \"]},\"988\":{\"h\":\"创建表后\",\"t\":[\"#创建主键约束 ALTER TABLE student ADD PRIMARY KEY(id); #创建主键约束并命名 -- ALTER TABLE 表名 ADD CONSTRAINT PK_约束名 PRIMARY KEY(字段列名); ALTER TABLE student ADD CONSTRAINT PK_student PRIMARY KEY(id); #注意：在使用复合主键时可以设置多个字段列名 -- ALTER TABLE 表名 ADD CONSTRAINT PK_约束名 PRIMARY KEY(字段列名1,字段列名2); ALTER TABLE student ADD CONSTRAINT PK_student PRIMARY KEY(id,grade); \"]},\"989\":{\"h\":\"删除\",\"t\":[\"ALTER TABLE 表名称 DROP INDEX 唯一性约束名; \"]},\"990\":{\"h\":\"唯一约束 Unique key\"},\"991\":{\"h\":\"概念\",\"t\":[\"与主键绑定，指向与主键的关系\"]},\"992\":{\"h\":\"特点\",\"t\":[\"同一个表可以有多个唯一约束\",\"唯一约束可以是某一和列的值唯一，也可以多个列组合值的唯一\",\"MySQL会给唯一约束的列上默认创建一个唯一索引\",\"删除唯一键只能通过删除唯一索引的方式删除，删除时需要指定唯一索引名，唯一索引名就是唯一约束名一样。如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同，如果是组合列，那么默认和0中排在第一个的列名相同。也可以自定义唯一性约束名。\"]},\"993\":{\"h\":\"创建表时创建\",\"t\":[\"CREATE TABLE b ( uid INT PRIMARY KEY AUTO_INCREMENT, uname VARCHAR(50) NOT NULL UNIQUE, age INT CHECK(age>50), hobby VARCHAR(20) DEFAULT '123' ) \"]},\"994\":{\"h\":\"创建表后\",\"t\":[\"#创建唯一约束 ALTER TABLE student ADD UNIQUE KEY(id); #创建唯一约束并命名 --ALTER TABLE 表名 ADD CONSTRAINT PK_约束名 PRIMARY KEY(字段列名); ALTER TABLE student ADD CONSTRAINT UK_student UNIQUE KEY(id); 注意：在使用复合键时可以设置多个字段列名 --ALTER TABLE 表名 ADD CONSTRAINT PK_约束名 UNIQUE KEY(字段列名1,字段列名2); ALTER TABLE student ADD CONSTRAINT UK_student UNIQUE KEY(id,grade); \"]},\"995\":{\"h\":\"删除\",\"t\":[\"ALTER TABLE 表名称 DROP INDEX 唯一性约束名; \"]},\"996\":{\"h\":\"外键约束 Foreign Key\",\"t\":[\"实际开发中，我们在创建表的时候，一般外键不声明出来，把他作为关联使用就行了\"]},\"997\":{\"h\":\"概念\",\"t\":[\"在遵循三范式的前提下，很多时候我们必须要进行拆表，将数据分别存放在多张表中，以减少冗余数据。但是拆分出来的表与表之间是有着关联关系的，我们必须得通过一种约束来约定表与表之间的关系，这种约束就是外键约束。\",\"外键约束是保证一个或两个表之间的参照完整性,外键是构建于一个表的两个字段或是两个表的两个字段之间的参照关系。\"]},\"998\":{\"h\":\"特点\",\"t\":[\"外键保障数据的完整性和一致性\"]},\"999\":{\"h\":\"创建表时创建\",\"t\":[\"CREATE TABLE b ( uid INT PRIMARY KEY AUTO_INCREMENT, uname VARCHAR(50) NOT NULL UNIQUE, age INT CHECK(age>50), hobby VARCHAR(20) DEFAULT '123', FOREIGN KET(fname) REFERENCES cls(cid) ) \"]},\"1000\":{\"h\":\"在建表后\",\"t\":[\"alter table 从表名称 add [constraint 外键约束名] foreign key (从表字段名) references 主表名(主表被参照字段名) [on update xx][on delete xx]; \"]},\"1001\":{\"h\":\"删除\",\"t\":[\"ALTER TABLE 表名称 DROP INDEX 唯一性约束名; \",\"如果使用了外键约束的表，删除数据时，需要先删除从表再删除主表，或者尝试一下方式执行更新：\",\"-- 策略1：no action 不允许操作 -- 通过操作sql来完成： -- 先把班级2的学生对应的班级 改为null update t_student set classno = null where classno = 2; -- 然后再删除班级2： delete from t_class where cno = 2; -- 策略2：cascade 级联操作：操作主表的时候影响从表的外键信息： -- 先删除之前的外键约束： alter table t_student drop foreign key fk_stu_classno; -- 重新添加外键约束： alter table t_student add constraint fk_stu_classno foreign key (classno) references t_class (cno) on update cascade on delete cascade; -- 试试更新： update t_class set cno = 5 where cno = 3; -- 试试删除： delete from t_class where cno = 5; -- 策略3：set null 置空操作： -- 先删除之前的外键约束： alter table t_student drop foreign key fk_stu_classno; -- 重新添加外键约束： alter table t_student add constraint fk_stu_classno foreign key (classno) references t_class (cno) on update set null on delete set null; -- 试试更新： update t_class set cno = 8 where cno = 1; -- 注意： -- 1. 策略2 级联操作 和 策略2 的 删除操作 可以混着使用： alter table t_student add constraint fk_stu_classno foreign key (classno) references t_class (cno) on update cascade on delete set null ; -- 2.应用场合： -- （1）朋友圈删除，点赞。留言都删除 -- 级联操作 -- （2）解散班级，对应的学生 置为班级为null就可以了，-- set null \"]},\"1002\":{\"h\":\"外键约束的要求\",\"t\":[\"在从表上建立外键，而且主表要先存在。\",\"一个表可以建立多个外键约束\",\"通常情况下，从表的外键列一定要指向主表的主键列\",\"从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样\"]},\"1003\":{\"h\":\"外键约束等级\",\"t\":[\"Cascade方式：在主表上update/delete记录时，同步update/delete掉从表的匹配记录\",\"Set null方式：在主表上update/delete记录时，将从表上匹配记录的列设为null，但是要注意子表的外键列不能为not null\",\"No action方式：如果子表中有匹配的记录,则不允许对父表对应候选键进行update/delete操作\",\"Restrict方式：同no action, 都是立即检查外键约束\",\"Set default方式 (在可视化工具SQLyog中可能显示空白）：父表有变更时,子表将外键列设置成一个默认的值，但Innodb不能识别。如果没有指定等级，就相当于Restrict方式\"]},\"1004\":{\"h\":\"非空约束 NOT NULL\"},\"1005\":{\"h\":\"概念\",\"t\":[\"表示当前字段不能为空\",\"无论是单个字段还是多个字段非空约束的添加只能使用列级约束（非空约束无表级约束）\"]},\"1006\":{\"h\":\"创建表时创建\",\"t\":[\"CREATE TABLE b ( uid INT PRIMARY KEY AUTO_INCREMENT, uname VARCHAR(50) NOT NULL UNIQUE, age INT CHECK(age>50), hobby VARCHAR(20) DEFAULT '123', FOREIGN KET(fname) REFERENCES cls(cid) ) \"]},\"1007\":{\"h\":\"创建表后\",\"t\":[\"alter table 表明 modify 字段名 字段类型 not null; //添加非空约束 alter table 表明 modify 字段名 字段类型 null; //取消 \"]},\"1008\":{\"h\":\"删除\",\"t\":[\"ALTER TABLE 表名称 DROP INDEX 唯一性约束名; \"]},\"1009\":{\"h\":\"自增 AUTO_INCREMENT\"},\"1010\":{\"h\":\"概念\",\"t\":[\"表示当前字段依次递增，通常与主键一起使用\"]},\"1011\":{\"h\":\"创建表时创建\",\"t\":[\"CREATE TABLE b ( uid INT PRIMARY KEY AUTO_INCREMENT, uname VARCHAR(50) NOT NULL UNIQUE, age INT CHECK(age>50), hobby VARCHAR(20) DEFAULT '123', FOREIGN KET(fname) REFERENCES cls(cid) ) \"]},\"1012\":{\"h\":\"创建表后\",\"t\":[\"alter table 表名 modify 字段名 字段类型 auto_increment; //添加自增 alter table 表名 modify 字段名 字段类型;//取消自增 \"]},\"1013\":{\"h\":\"删除\",\"t\":[\"ALTER TABLE 表名称 DROP INDEX 唯一性约束名; \"]},\"1014\":{\"h\":\"检查约束 CHECK\"},\"1015\":{\"h\":\"概念\",\"t\":[\"在添加数据的时候，被标记的字段需要符合约束限定\"]},\"1016\":{\"h\":\"创建表时创建\",\"t\":[\"CREATE TABLE b ( uid INT PRIMARY KEY AUTO_INCREMENT, uname VARCHAR(50) NOT NULL UNIQUE, age INT CHECK(age>50), hobby VARCHAR(20) DEFAULT '123', FOREIGN KET(fname) REFERENCES cls(cid) ) \"]},\"1017\":{\"h\":\"删除\",\"t\":[\"ALTER TABLE 表名称 DROP INDEX 唯一性约束名; \"]},\"1018\":{\"h\":\"默认约束 Default\"},\"1019\":{\"h\":\"概念\",\"t\":[\"在插入数据的时候如果没有对约束定义的字段赋值，则使用默认的字段进行赋值\"]},\"1020\":{\"h\":\"创建表时创建\",\"t\":[\"CREATE TABLE b ( uid INT PRIMARY KEY AUTO_INCREMENT, uname VARCHAR(50) NOT NULL UNIQUE, age INT CHECK(age>50), hobby VARCHAR(20) DEFAULT '123', FOREIGN KET(fname) REFERENCES cls(cid) ) \"]},\"1021\":{\"h\":\"删除\",\"t\":[\"ALTER TABLE 表名称 DROP INDEX 唯一性约束名; \"]},\"1022\":{\"h\":\"DQL（单表）\"},\"1023\":{\"h\":\"DQL\"},\"1024\":{\"h\":\"查询所有行和列的数据\",\"t\":[\"select * from 表名 \"]},\"1025\":{\"h\":\"查询指定列的数据\",\"t\":[\"select 字段名 from 表名 select 字段名,字段名,字段名.... from 表名 \"]},\"1026\":{\"h\":\"去重查询\",\"t\":[\"select distinct 字段名 from 表名 \",\"注意点: 去重针对某列, distinct前面不能先出现列名\"]},\"1027\":{\"h\":\"别名查询\",\"t\":[\"select 列名 as 别名 from 表 select 列名 别名 from 表 \"]},\"1028\":{\"h\":\"运算查询\",\"t\":[\"//运算查询(+,-,*,/,%等) select 列名+10 as 别名 from 表名; \",\"运算查询字段,字段之间是可以的 字符串等类型可以做运算查询，但结果没有意义\"]},\"1029\":{\"h\":\"条件查询\",\"t\":[\"语法：select ... from 表 where 条件 \"]},\"1030\":{\"h\":\"比较运算符\",\"t\":[\"大于：> 小于：< 大于等于：>= 小于等于：<= 等于：= 不能用于null判断 不等于：!= 或 <> 安全等于: <=> 可以用于null值判断`\"]},\"1031\":{\"h\":\"逻辑运算符\",\"t\":[\"逻辑与：&& 或 and 逻辑或：|| 或 or 逻辑非：! 或 not 逻辑异或：^ 或 xor`\"]},\"1032\":{\"h\":\"范围\"},\"1033\":{\"h\":\"between and\",\"t\":[\"//返回条件符合value1到value2之间的数据 select 列名 from 表名 where 列名 between value1 and value2 \"]},\"1034\":{\"h\":\"in\",\"t\":[\"//返回条件符合value结果任意之一的值 select 列名 from 表名 where 列名 in (value1,value2..) //返回条件不符合value结果任意之一的值 select 列名 from 表名 where 列名 not in (value1,value2..) \"]},\"1035\":{\"h\":\"like模糊查询\",\"t\":[\"like 'xxx' 模糊查询是处理字符串的时候进行部分匹配\",\"//如果想要表示0~n个字符，用% a% => anbcjbjbdj //如果想要表示确定的1个字符，用_ a_ => ab select 列名 from 表名 where 列名 like 'value1' \"]},\"1036\":{\"h\":\"正则查询\",\"t\":[\"//value可以写正则语法 select 列名 from 表名 where 列名 regexp 'value1' \"]},\"1037\":{\"h\":\"空值处理\",\"t\":[\"//条件为空 select 列名 from 表名 where 列名 is null //条件不为空 select 列名 from 表名 where 列名 is not null \"]},\"1038\":{\"h\":\"排序查询ORDER BY\"},\"1039\":{\"h\":\"单列排序\",\"t\":[\"SELECT 字段名 FROM 表名 [WHERE 条件] ORDER BY 字段名 [ASC|DESC]; //ASC: 升序，默认值; DESC: 降序 \"]},\"1040\":{\"h\":\"多列排序\",\"t\":[\"同时对多个字段进行排序，如果第1个字段相等，则按第2个字段排序，依次类推\",\"SELECT 字段名 FROM 表名 WHERE 字段=值 ORDER BY 字段名1 [ASC|DESC], 字段名2 [ASC|DESC]; \"]},\"1041\":{\"h\":\"聚合函数\",\"t\":[\"SELECT 聚合函数(列名) FROM 表名 [where 条件]; \",\"说明\",\"函数\",\"最大\",\"MAX(列名)\",\"最小\",\"MIN(列名)\",\"平均\",\"AVG(列名)\",\"求和\",\"SUM(列名)\",\"计数\",\"COUNT(列名)\",\"注意:聚合函数会忽略空值NULLIFNULL(列名，默认值)函数可以处理值为NULL如果列的值为NULL则返回默认值\"]},\"1042\":{\"h\":\"分组 GROUP BY 与 HAVING\",\"t\":[\"//一般分组会跟聚合函数一起使用 //HAVING 可以对分组结果进行过滤 SELECT 字段1,字段2... FROM 表名 [where 条件] GROUP BY 列 [HAVING 条件]; \",\"HAVING与WHERE的区别\",\"WHERE \",\"对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据，即先过滤再分组。\",\"where后面不可以使用聚合函数\",\"HAVING \",\"having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，即先分组再过滤。\",\"having后面可以使用聚合函数\"]},\"1043\":{\"h\":\"分页\",\"t\":[\"//a 表示的是跳过的数据条数 //b 表示的是要查询的数据条数 select ... from .... limit a ,b \"]},\"1044\":{\"h\":\"DQL（多表）\"},\"1045\":{\"h\":\"三范式\",\"t\":[\"好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响。建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式\"]},\"1046\":{\"h\":\"第一范式：确保每列保持原子性\",\"t\":[\"第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。\",\"第一范式的合理遵循需要根据系统的实际需求来定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便。这样设计才算满足了数据库的第一范式，如下表所示。\"]},\"1047\":{\"h\":\"第二范式：确保表中的每列都和主键相关\",\"t\":[\"第二范式在第一范式的基础之上更进一层。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。\",\"比如要设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键，如下表所示\",\"这样就产生一个问题：这个表中是以订单编号和商品编号作为联合主键。这样在该表中商品名称、单位、商品价格等信息不与该表的主键相关，而仅仅是与商品编号相关。所以在这里违反了第二范式的设计原则。\",\"而如果把这个订单信息表进行拆分，把商品信息分离到另一个表中，把订单项目表也分离到另一个表中，就非常完美了。如下所示\",\"**这样设计，在很大程度上减小了数据库的冗余。如果要获取订单的商品信息，使用商品编号到商品信息表中查询即可 **\"]},\"1048\":{\"h\":\"第三范式：确保每列都和主键列直接相关，而不是间接相关\",\"t\":[\"第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。\",\"比如在设计一个订单数据表的时候，可以将客户编号作为一个外键和订单表建立相应的关系。而不可以在订单表中添加关于客户其它信息（比如姓名、所属公司等）的字段。如下面这两个表所示的设计就是一个满足第三范式的数据库表。\",\"这样在查询订单信息的时候，就可以使用客户编号来引用客户信息表中的记录，也不必在订单信息表中多次输入客户信息的内容，减小了数据冗余\"]},\"1049\":{\"h\":\"多表关系\"},\"1050\":{\"h\":\"一对多\",\"t\":[\"将一的一方作为主表，多的一方作为从表，在从表中指定一个字段作为外键，指向主表的主键\"]},\"1051\":{\"h\":\"多对多\",\"t\":[\"因为两张表都是多的一方，所以在两张表中都无法创建外键，所以需要新创建一张中间表，在中间表中定义两个字段，这俩字段分别作为外键指向两张表各自的主键\"]},\"1052\":{\"h\":\"一对一\",\"t\":[\"在从表中指定一个字段创建外键并指向主表的主键，然后给从表的外键字段添加唯一约束\"]},\"1053\":{\"h\":\"多表关联查询\"},\"1054\":{\"h\":\"交叉查询\",\"t\":[\"交叉查询其实就是将多张表的数据没有条件地连接在一起进行展示\",\"select a.列,a.列,b.列,b.列 from a,b ; select a.*,b.* from a,b ; --或者 select * from a,b; \",\"这种查询方式是不正确的会出现笛卡尔积的情况！！\",\"笛卡尔积 将两（或多）个表的所有行进行组合，连接后的行数为两（或多）个表的乘积数 出现笛卡尔积，主要是因为缺少关联条件或者关联条件不准确\"]},\"1055\":{\"h\":\"内连接查询\",\"t\":[\"交叉查询产生这样的结果并不是我们想要的，那么怎么去除错误的、不想要的记录呢，当然是通过条件过滤。通常要查询的多个表之间都存在关联关系，那么就通过关联关系(主外键关系)去除笛卡尔积。这种通过条件过滤去除笛卡尔积的查询，我们称之为连接查询\"]},\"1056\":{\"h\":\"隐式内连\",\"t\":[\"//隐式内连接查询里面是没有inner join关键字 select [字段,字段,字段] from a,b where 连接条件 (b表里面的外键 = a表里面的主键 ) \"]},\"1057\":{\"h\":\"显式内连\",\"t\":[\"//显式内连接查询里面是有inner join关键字 select [字段,字段,字段] from a [inner] join b on 连接条件 [ where 其它条件] \"]},\"1058\":{\"h\":\"外连接查询\",\"t\":[\"我们发现内连接查询出来的是满足连接条件的公共部分， 如果要保证查询出某张表的全部数据情况下进行连接查询. 那么就要使用外连接查询了. 外连接分为左外连接和右外连接\"]},\"1059\":{\"h\":\"左外连接\"},\"1060\":{\"h\":\"A\",\"t\":[\"左边表中的所有数据，右边表中与左表关联数据（左边有右边没有的使用NULL填充）\",\"select 字段 from 表1 left outer join 表2 on 关联条件 \"]},\"1061\":{\"h\":\"A-A∩B\",\"t\":[\"左表特有的数据\",\"select 字段 from 表1 left outer join 表2 on 关联条件 where 右表.key = NULL \"]},\"1062\":{\"h\":\"右外连接\"},\"1063\":{\"h\":\"B\",\"t\":[\"右边表中的所有数据，左边表中与右表关联数据（右边有左边没有的使用NULL填充）\",\"select 字段 from 表1 right outer join 表2 on 关联条件 \"]},\"1064\":{\"h\":\"B-A∩B\",\"t\":[\"右表特有的数据\",\"select 字段 from 表1 right outer join 表2 on 关联条件 where 左表.key = NULL \"]},\"1065\":{\"h\":\"union联合查询\",\"t\":[\"UNION 操作符用于合并两个或多个 SELECT 语句的结果集。\"]},\"1066\":{\"h\":\"A∪B\",\"t\":[\"可以使用UNION关键字将左外联和右外联合并起来\"]},\"1067\":{\"h\":\"A∪B - A∩B\",\"t\":[\"可以使用UNION关键字将左独和右独合并起来\"]},\"1068\":{\"h\":\"自连接查询\",\"t\":[\"自连接查询是一种特殊的多表连接查询，因为两个关联查询的表是同一张表，通过取别名的方式来虚拟成两张表，然后进行两张表的连接查询\",\"例如：查询员工的编号，姓名，薪资和他领导的编号，姓名，薪资\",\"//将emp表分别以别名的方式声明employee员工 manager 领导 //将employee.mgr = manager.id关联 SELECT employee.id '员工编号',employee.ename '员工姓名', employee.salary '员工薪资',manager.id '领导编号', manager.ename '领导姓名',manager.salary '领导薪资' FROM emp employee,emp manager WHERE employee.mgr = manager.id \"]},\"1069\":{\"h\":\"子查询\",\"t\":[\"如果一个查询语句嵌套在另一个查询语句里面，那么这个查询语句就称之为子查询，根据位置不同，分为：where型，from型，exists型。注意：不管子查询在哪里，子查询必须使用()括起来。\"]},\"1070\":{\"h\":\"子查询的分类\"},\"1071\":{\"h\":\"WHERE型\",\"t\":[\"子查询是单值结果，那么可以对其使用（=，>等比较运算符）\",\"# 查询价格最高的商品信息 select * from t_product where price = (select max(price) from t_product) \",\"子查询是多值结果，那么可对其使用（【not】in(子查询结果)，或 >all(子查询结果)，或>=all(子查询结果)，<all(子查询结果)，<=all（子查询结果)，或 >any(子查询结果)，或>=any(子查询结果)，<any(子查询结果)，<=any（子查询结果)）\",\"# 查询价格最高的商品信息 SELECT * FROM t_product WHERE price >=ALL(SELECT price FROM t_product) \"]},\"1072\":{\"h\":\"FROM型\",\"t\":[\"子查询的结果是多行多列的结果，类似于一张表格。\",\"必须给子查询取别名，即临时表名，表的别名不要加“”和空格。\",\"-- 思路一: 使用连接查询 -- 使用外连接，查询出分类表的所有数据 SELECT tc.cname,COUNT(tp.pid) FROM t_category tc LEFT JOIN t_product tp ON tp.cno = tc.cid GROUP BY tc.cname -- 思路二: 使用子查询 -- 第一步:对t_product根据cno进行分组查询，统计每个分类的商品数量 SELECT cno,COUNT(pid) FROM t_product GROUP BY cno -- 第二步: 用t_category表去连接第一步查询出来的结果，进行连接查询,此时要求查询出所有的分类 SELECT tc.cname,IFNULL(tn.total,0) '总数量' FROM t_category tc LEFT JOIN (SELECT cno,COUNT(pid) total FROM t_product GROUP BY cno) tn ON tn.cno=tc.cid \"]},\"1073\":{\"h\":\"EXISTS型\",\"t\":[\"用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False\",\"# 查询那些有商品的分类 SELECT cid,cname FROM t_category tc WHERE EXISTS (SELECT * FROM t_product tp WHERE tp.cno = tc.cid); \"]},\"1074\":{\"h\":\"子查询的复制操作\"},\"1075\":{\"h\":\"复制表\"},\"1076\":{\"h\":\"拷贝表结构\",\"t\":[\"CREATE TABLE newadmin LIKE admin; \"]},\"1077\":{\"h\":\"拷贝表结构和数据（但约束与索引除外）\",\"t\":[\"CREATE TABLE newadmin AS ( SELECT * FROM admin ) ; \"]},\"1078\":{\"h\":\"拷贝表结构+数据\",\"t\":[\"CREATE TABLE newadmin LIKE admin; INSERT INTO newadmin SELECT * FROM admin; \"]},\"1079\":{\"h\":\"跨数据库拷贝表\",\"t\":[\"CREATE TABLE newadmin LIKE shop.admin; CREATE TABLE newshop.newadmin LIKE shop.admin; \"]},\"1080\":{\"h\":\"拷贝一个表中其中的一些字段（指定新名），其中一些数据\",\"t\":[\"CREATE TABLE newadmin AS ( SELECT id, username AS uname, password AS pass FROM admin WHERE id<10 ) ; \"]},\"1081\":{\"h\":\"在创建表的同时定义表中的字段信息。\",\"t\":[\"create table tt(eid int primary key auto_increment) as (select employee_id as eid,first_name,last_name,email from employees); \"]},\"1082\":{\"h\":\"复制数据\",\"t\":[\"在 INSERT 语句中加入子查询，不必书写 VALUES 子句。\",\"//方法一 INSERT INTO emp2 SELECT * FROM employees WHERE department_id = 90; //方法二 INSERT INTO sales_reps(id, name, salary, commission_pct) SELECT employee_id, last_name, salary, commission_pct FROM employees WHERE job_id LIKE '%REP%'; \"]},\"1083\":{\"h\":\"函数\"},\"1084\":{\"h\":\"MySQL的常用函数\"},\"1085\":{\"h\":\"字符串函数\"},\"1086\":{\"h\":\"连接\",\"t\":[\"函数\",\"用法\",\"CONCAT(S1,S2,......,Sn)\",\"连接S1,S2,......,Sn为一个字符串\",\"CONCAT_WS(separator, S1,S2,......,Sn)\",\"连接S1一直到Sn，并且中间以separator作为分隔符\"]},\"1087\":{\"h\":\"长度\",\"t\":[\"函数\",\"用法\",\"CHAR_LENGTH(s)\",\"返回字符串s的字符数\",\"LENGTH(s)\",\"返回字符串s的字节数，和字符集有关\"]},\"1088\":{\"h\":\"替换\",\"t\":[\"函数\",\"用法\",\"INSERT(str, index , len, instr)\",\"将字符串str从第index位置开始，len个字符长的子串替换为字符串instr\"]},\"1089\":{\"h\":\"大小写处理\",\"t\":[\"函数\",\"用法\",\"UPPER(s) 或 UCASE(s)\",\"将字符串s的所有字母转成大写字母\",\"LOWER(s) 或LCASE(s)\",\"将字符串s的所有字母转成小写字母\"]},\"1090\":{\"h\":\"空格处理\",\"t\":[\"函数\",\"用法\",\"LTRIM(s)\",\"去掉字符串s左侧的空格\",\"RTRIM(s)\",\"去掉字符串s右侧的空格\",\"TRIM(s)\",\"去掉字符串s开始与结尾的空格\"]},\"1091\":{\"h\":\"其他处理\",\"t\":[\"函数\",\"用法\",\"LEFT(s,n)\",\"返回字符串s最左边的n个字符\",\"RIGHT(s,n)\",\"返回字符串s最右边的n个字符\",\"LPAD(str, len, pad)\",\"用字符串pad对str最左边进行填充，直到str的长度为len个字符\",\"RPAD(str ,len, pad)\",\"用字符串pad对str最右边进行填充，直到str的长度为len个字符\",\"TRIM(【BOTH 】s1 FROM s)\",\"去掉字符串s开始与结尾的s1\",\"TRIM(【LEADING】s1 FROM s)\",\"去掉字符串s开始处的s1\",\"TRIM(【TRAILING】s1 FROM s)\",\"去掉字符串s结尾处的s1\",\"REPEAT(str, n)\",\"返回str重复n次的结果\",\"REPLACE（str, a, b）\",\"用字符串b替换字符串str中所有出现的字符串a\",\"STRCMP(s1,s2)\",\"比较字符串s1,s2\",\"SUBSTRING(s,index,len)\",\"返回从字符串s的index位置其len个字符\"]},\"1092\":{\"h\":\"数值函数\",\"t\":[\"函数\",\"用法\",\"ABS(x)\",\"返回x的绝对值\",\"CEIL(x)\",\"返回大于x的最小整数值\",\"FLOOR(x)\",\"返回小于x的最大整数值\",\"MOD(x,y)\",\"返回x/y的模\",\"RAND()\",\"返回0~1的随机值\",\"ROUND(x,y)\",\"返回参数x的四舍五入的有y位的小数的值\",\"TRUNCATE(x,y)\",\"返回数字x截断为y位小数的结果\",\"SQRT(x)\",\"返回x的平方根\",\"POW(x,y)\",\"返回x的y次方\"]},\"1093\":{\"h\":\"日期函数\",\"t\":[\"函数\",\"用法\",\"CURDATE() 或 CURRENT_DATE()\",\"返回当前日期\",\"CURTIME() 或 CURRENT_TIME()\",\"返回当前时间\",\"NOW() / SYSDATE() / CURRENT_TIMESTAMP() / LOCALTIME() / LOCALTIMESTAMP()\",\"返回当前系统日期时间\",\"YEAR(date) / MONTH(date) / DAY(date) / HOUR(time) / MINUTE(time) / SECOND(time)\",\"返回具体的时间值\",\"WEEK(date) / WEEKOFYEAR(date)\",\"返回一年中的第几周\",\"DAYOFWEEK()\",\"返回今天是一周的第几天，注意：周日是1，周一是2，。。。周六是7\",\"WEEKDAY(date)\",\"返回周几，注意，周1是0，周2是1，。。。周日是6\",\"DAYNAME(date)\",\"返回星期：MONDAY,TUESDAY.....SUNDAY\",\"MONTHNAME(date)\",\"返回月份：January，。。。。。\",\"DATEDIFF(date1,date2) / TIMEDIFF(time1, time2) \",\"返回date1 - date2的日期间隔 / 返回time1 - time2的时间间隔\",\"DATE_ADD(datetime, INTERVAL expr type) \",\"返回与给定日期时间相差INTERVAL时间段的日期时间\",\"DATE_FORMAT(datetime ,fmt) \",\"按照字符串fmt格式化日期datetime值\",\"STR_TO_DATE(str, fmt)\",\"按照字符串fmt对str进行解析，解析为一个日期\",\"其中：\",\"DATE_ADD(datetime,INTERVAL expr type) 表达式类型：\",\"参数类型\",\"参数类型\",\"YEAR\",\"YEAR_MONTH\",\"MONTH\",\"DAY_HOUR\",\"DAY\",\"DAY_MINUTE\",\"HOUR\",\"DAY_SECOND\",\"MINUTE\",\"HOUR_MINUTE\",\"SECOND\",\"HOUR_SECOND\",\"MINUTE_SECOND\",\"DATE_FORMAT(datetime,fmt) 和 STR_TO_DATE(str, fmt) 表达式类型：\",\"格式符\",\"说明\",\"格式符\",\"说明\",\"%Y\",\"4位数字表示年份\",\"%y\",\"表示两位数字表示年份\",\"%M\",\"月名表示月份（January,....）\",\"%m\",\"两位数字表示月份（01,02,03。。。）\",\"%b\",\"缩写的月名（Jan.，Feb.，....）\",\"%c\",\"数字表示月份（1,2,3,...）\",\"%D\",\"英文后缀表示月中的天数（1st,2nd,3rd,...）\",\"%d\",\"两位数字表示月中的天数(01,02...)\",\"%e\",\"数字形式表示月中的天数（1,2,3,4,5.....）\",\"%H\",\"两位数字表示小数，24小时制（01,02..）\",\"%h和%I\",\"两位数字表示小时，12小时制（01,02..）\",\"%k\",\"数字形式的小时，24小时制(1,2,3)\",\"%l\",\"数字形式表示小时，12小时制（1,2,3,4....）\",\"%i\",\"两位数字表示分钟（00,01,02）\",\"%S和%s\",\"两位数字表示秒(00,01,02...)\",\"%W\",\"一周中的星期名称（Sunday...）\",\"%a\",\"一周中的星期缩写（Sun.，Mon.,Tues.，..）\",\"%w\",\"以数字表示周中的天数(0=Sunday,1=Monday....)\",\"%j\",\"以3位数字表示年中的天数(001,002...)\",\"%U\",\"以数字表示年中的第几周，（1,2,3。。）其中Sunday为周中第一天\",\"%u\",\"以数字表示年中的第几周，（1,2,3。。）其中Monday为周中第一天\",\"%T\",\"24小时制\",\"%r\",\"12小时制\",\"%p\",\"AM或PM\",\"%%\",\"表示%\"]},\"1094\":{\"h\":\"流程函数\",\"t\":[\"函数\",\"用法\",\"IF(value,t ,f)\",\"如果value是真，返回t，否则返回f\",\"IFNULL(value1, value2) \",\"如果value1不为空，返回value1，否则返回value2\",\"CASE WHEN 条件1 THEN result1 WHEN 条件2 THEN result2 .... [ELSE resultn] END\",\"相当于Java的if...else if...else...\",\"CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 .... [ELSE 值n] END\",\"相当于Java的switch...case...\"]},\"1095\":{\"h\":\"其他函数\",\"t\":[\"函数\",\"用法\",\"database()\",\"返回当前数据库名\",\"version()\",\"返回当前数据库版本\",\"user() \",\"返回当前登录用户名\",\"password(str) \",\"返回字符串str的加密版本，41位长的字符串\",\"md5(str)\",\"返回字符串str的md5值，也是一种加密方式\"]},\"1096\":{\"h\":\"TCL和DCL\"},\"1097\":{\"h\":\"事务TCL\"},\"1098\":{\"h\":\"事务的概述\"},\"1099\":{\"h\":\"概念\",\"t\":[\"保证事务中的所有操作都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交(commit)，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务回滚(rollback) 到最初状态。\"]},\"1100\":{\"h\":\"事务的原理\",\"t\":[\"事务开启之后, 所有的操作都会临时保存到事务日志, 事务日志只有在得到commit命令才会同步到数据表中，其他任何情况都会清空事务日志(rollback，断开连接)\"]},\"1101\":{\"h\":\"应用场景\",\"t\":[\"如果在某个业务中需要执行多条SQL语句，那么此时一般是需要使用到事务，从而保证这多条SQL语句执行同时成功或同时失败。例如: 转账、批量删除、从购物车中提交订单等等操作\"]},\"1102\":{\"h\":\"事务的四大特性(ACID)\",\"t\":[\"原子性（Atomicity） 原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。\",\"一致性（Consistency） 事务必须使数据库从一个一致性状态变换到另外一个一致性状态。\",\"隔离性（lsolation） 事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。\",\"持久性（Durability） 持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响\"]},\"1103\":{\"h\":\"MySQL进行事务管理\"},\"1104\":{\"h\":\"自动事务\",\"t\":[\"MySQL默认是自动提交事务的，一条sql语句就是一个事务\"]},\"1105\":{\"h\":\"手动事务\"},\"1106\":{\"h\":\"开启事务\",\"t\":[\"手动开启事务\",\"//手动开启事务之后，执行的SQL语句都不会真正改变数据库中的数据 //，需要用户手动提交事务才能够真正执行SQL语句 start transaction; \",\"设置MYSQL中的自动事务参数\",\"//第一步: 查看MYSQL中事务是否自动提交 show variables like '%commit%'; //第二步: 设置自动提交的参数为OFF # 0:OFF 1:ON set autocommit = 0; \"]},\"1107\":{\"h\":\"提交和回滚事务\"},\"1108\":{\"h\":\"提交事务\",\"t\":[\"当这个事务中的SQL语句执行完毕之后，没有出现任何问题，那么我们需要在最后提交事务，让这些SQL语句真正执行去改变数据库中的数据\",\"commit; \"]},\"1109\":{\"h\":\"回滚事务\",\"t\":[\"当执行这个事务中的SQL语句的过程中，一旦出现问题或者异常，则需要回滚事务，从而回到SQL语句执行之前的状态\",\"rollback; \"]},\"1110\":{\"h\":\"事务的隔离级别\"},\"1111\":{\"h\":\"不考虑事务的隔离性会引发的问题\",\"t\":[\"事务在操作时的理想状态： 所有的事务之间保持隔离，互不影响。因为并发操作，多个用户同时访问同一个数据。可能引发并发访问的问题\"]},\"1112\":{\"h\":\"事务的四个隔离级别\",\"t\":[\"级别\",\"名字\",\"隔离级别\",\"脏读\",\"不可重复读\",\"幻读\",\"数据库默认隔离级别\",\"1\",\"读未提交\",\"read uncommitted\",\"是\",\"是\",\"是\",\"2\",\"读已提交\",\"read committed\",\"否\",\"是\",\"是\",\"Oracle\",\"3\",\"可重复读\",\"repeatable read\",\"否\",\"否\",\"是\",\"MySQL\",\"4\",\"串行化\",\"serializable\",\"否\",\"否\",\"否\",\"最高的隔离级别\",\"隔离级别越高，性能(效率)越差，安全性越高。\"]},\"1113\":{\"h\":\"设置隔离级别\",\"t\":[\"设置事务隔离级别\",\"set session transaction isolation level 隔离级别; eg: 设置事务隔离级别为read uncommitted set session transaction isolation level read uncommitted; \",\"查询当前事务隔离级别\",\"select @@tx_isolation; \"]},\"1114\":{\"h\":\"DCL\",\"t\":[\"我们现在默认使用的都是root用户，超级管理员，拥有全部的权限。但是，一个公司里面的数据库服务器上面可能同时运行着很多个项目的数据库。所以，我们应该可以根据不同的项目建立不同的用户，分配不同的权限来管理和维护数据库。\"]},\"1115\":{\"h\":\"创建用户\",\"t\":[\"CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码'; \",\"关键字说明\",\"用户名：将创建的用户名\",\"主机名：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%\",\"密码：该用户的登陆密码，密码可以为空，如果为空则l该用户可以不需要密码登陆服务器\",\"具体操作：\",\"-- user1用户只能在localhost这个IP登录mysql服务器 CREATE USER 'user1'@'localhost' IDENTIFIED BY '123'; -- user2用户可以在任何电脑上登录mysql服务器 CREATE USER 'user2'@'%' IDENTIFIED BY '123'; \"]},\"1116\":{\"h\":\"授权用户\",\"t\":[\"GRANT 权限1, 权限2... ON 数据库名.表名 TO '用户名'@'主机名'; \",\"关键字说明：\",\"GRANT 授权关键字 授予用户的权限，如SELECT，INSERT，UPDATE等。如果要授予所的权限则使用ALL\",\"数据库名.表名：该用户可以操作哪个数据库的哪些表。如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.*'用户名'@'主机名': 给哪个用户授权\",\"具体操作：\",\"//给user1用户分配对test这个数据库操作的权限 GRANT CREATE,ALTER,DROP,INSERT,UPDATE,DELETE,SELECT ON test.* TO 'user1'@'localhost'; //给user2用户分配对所有数据库操作的权限 GRANT ALL ON *.* TO 'user2'@'%'; \"]},\"1117\":{\"h\":\"撤销授权\",\"t\":[\"REVOKE 权限1, 权限2... ON 数据库.表名 FROM '用户名'@'主机名'; \"]},\"1118\":{\"h\":\"查看权限\",\"t\":[\"SHOW GRANTS FOR '用户名'@'主机名'; \"]},\"1119\":{\"h\":\"删除用户\",\"t\":[\"DROP USER '用户名'@'主机名'; \"]},\"1120\":{\"h\":\"修改用户密码\"},\"1121\":{\"h\":\"修改管理员密码\",\"t\":[\" //注意：需要在未登陆MySQL的情况下操作。-- 新密码不需要加上引号 mysqladmin -uroot -p password 新密码 \"]},\"1122\":{\"h\":\"修改普通用户密码\",\"t\":[\" //注意：需要在未登陆MySQL的情况下操作 set password for '用户名'@'主机名' = password('新密码'); \"]},\"1123\":{\"h\":\"索引和视图\"},\"1124\":{\"h\":\"索引 INDEX\"},\"1125\":{\"h\":\"概念\",\"t\":[\"索引是一种排好序的快速查找的数据结构，它帮助数据库高效的进行数据的检索。在数据之外，数据库系统还维护着满足特定查找算法的数据结构（额外的存储空间），这些数据结构以某种方式指向数据，这样就可以在这些数据结构上实现高效的查找算法。这种数据结构就叫做索引。\",\"一般来说索引本身也很大，不可能全部存储在内存中，因此往往以索引文件的形式存放在磁盘中。目前大多数索引都采用BTree树方式构建。\"]},\"1126\":{\"h\":\"优势与劣势\"},\"1127\":{\"h\":\"优点\",\"t\":[\"索引是数据库优化， 加快了数据的查询速度(select)\",\"表的主键会默认自动创建索引\",\"每个字段都可以被索引\",\"大量降低数据库的IO磁盘读写成本，极大提高了检索速度\",\"索引事先对数据进行了排序，大大提高了查询效率\"]},\"1128\":{\"h\":\"缺点\",\"t\":[\"索引本身也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也要占用空间\",\"索引表中的内容，在业务表中都有，数据是重复的，空间是“浪费的”\",\"虽然索引大大提高了查询的速度，但对数据的增、删、改的操作需要更新索引表信息，如果数据量非常巨大， 更新效率就很慢， 因为更新表时， MySQL不仅要保存数据， 也要保存一下索引文件\",\"随着业务的不断变化，之前建立的索引可能不能满足查询需求，需要消耗我们的时间去更新索引\"]},\"1129\":{\"h\":\"分类\",\"t\":[\"单值索引 : 一个索引只包括一个列，一个表可以有多个列\",\"唯一索引 : 索引列的值必须唯一，但允许有空值；主键会自动创建唯一索引\",\"复合索引 : 一个索引同时包括多列\"]},\"1130\":{\"h\":\"使用\"},\"1131\":{\"h\":\"查看索引\",\"t\":[\"SHOW INDEX FROM 表名 \"]},\"1132\":{\"h\":\"创建索引\"},\"1133\":{\"h\":\"创建单值索引\",\"t\":[\"CREATE INDEX 索引名 ON 表名 (字段名); \"]},\"1134\":{\"h\":\"创建唯一索引\",\"t\":[\"CREATE UNIQUE INDEX 索引名 ON 表名(字段名) \"]},\"1135\":{\"h\":\"创建复合索引\",\"t\":[\"CREATE INDEX 索引名 ON 表名(字段名1,字段名2) \",\"不遵循最左原则，可能会出现复合索引失效\",\"最左原则 : 当我们创建一个联合索引（复合索引）的时候。如(k1,k2,k3)，相当于创建了（k1）、(k1,k2)和(k1,k2,k3)三个索引，这就是最左匹配原则，也称为最左特性。\"]},\"1136\":{\"h\":\"删除索引\",\"t\":[\"ALTER TABLE 表名称 DROP INDEX 索引名; \",\"面试题：如何判断一条sql执行的性能是否高效（是否使用索引）？\",\"使用EXPLAIN关键字与SQL语句一起执行查看\"]},\"1137\":{\"h\":\"视图 VIEW\",\"t\":[\"视图是一张特殊的表，里面存放的是上次查询的结果\"]},\"1138\":{\"h\":\"视图的使用\"},\"1139\":{\"h\":\"创建视图\",\"t\":[\"CREATE VIEW 视图名 as SELECT语句 \"]},\"1140\":{\"h\":\"使用视图\",\"t\":[\"SELECT * FROM 视图名 \"]},\"1141\":{\"h\":\"删除视图\",\"t\":[\"DROP VIEW 视图名 \"]},\"1142\":{\"h\":\"视图的优点\",\"t\":[\"提高了SQL的复用性\",\"屏蔽了业务表的复杂性\",\"数据共享\"]},\"1143\":{\"h\":\"视图的缺点\",\"t\":[\"是一张单独的表存了业务表的数据，造成了数据重复\",\"视图无法优化\"]},\"1144\":{\"h\":\"存储过程\"},\"1145\":{\"h\":\"什么是存储过程(Stored Procedure)\",\"t\":[\"通过前面章节的学习，我们已经知道SQL是一种非常便利的语言。从数据库抽取数据，或者对特定的数据集中更新时，都能通过简洁直观的代码实现。\",\"但是这个所谓的“简洁”也是有限制，SQL基本是一个命令实现一个处理，是所谓的非程序语言。\",\"在不能编写流程的情况下，所有的处理只能通过一个个命令来实现。当然，通过使用连接及子查询，即使使用SQL的单一命令也能实现一些高级的处理，但是，其局限性是显而易见的。例如，在SQL中就很难实现针对不同条件进行不同的处理以及循环等功能。\",\"这个时候就出现了存储过程这个概念，简单地说，存储过程就是数据库中保存(Stored)的一系列SQL命令（Procedure）的集合。也可以将其看作相互之间有关系的SQL命令组织在一起形成的一个小程序。\"]},\"1146\":{\"h\":\"存储过程的优点\",\"t\":[\"提高执行性能。存储过程执行效率之所高，在于普通的SQL语句，每次都会对语法分析，编译，执行，而存储过程只是在第一次执行语法分析，编译，执行，以后都是对结果进行调用。\",\"可减轻网络负担。使用存储过程，复杂的数据库操作也可以在数据库服务器中完成。只需要从客户端(或应用程序)传递给数据库必要的参数就行，比起需要多次传递SQL命令本身，这大大减轻了网络负担。\",\"可将数据库的处理黑匣子化。应用程序中完全不用考虑存储过程的内部详细处理，只需要知道调用哪个存储过程就可以了\"]},\"1147\":{\"h\":\"案例\",\"t\":[\"-- 定义一个没有返回值 存储过程 -- 实现：模糊查询操作： select * from emp where ename like '%A%'; create procedure mypro01(name varchar(10)) begin if name is null or name = \\\"\\\" then select * from emp; else select * from emp where ename like concat('%',name,'%'); end if; end; -- 删除存储过程： drop procedure mypro01; -- 调用存储过程： call mypro01(null); call mypro01('R'); -- 定义一个 有返回值的存储过程： -- 实现：模糊查询操作： -- in 参数前面的in可以省略不写 -- found_rows()mysql中定义的一个函数，作用返回查询结果的条数 create procedure mypro02(in name varchar(10),out num int(3)) begin if name is null or name = \\\"\\\" then select * from emp; else select * from emp where ename like concat('%',name,'%'); end if; select found_rows() into num; end; -- -- 调用存储过程： call mypro02(null,@num); select @num; call mypro02('R',@aaa); select @aaa; \"]},\"1148\":{\"h\":\"SQL优化\",\"t\":[\"查询SQL时最好不要用select *， 推荐使用具体的字段名\",\"避免在where子句中使用or， 业务中避免不了的话可以把语句分开写\",\"使用VARCHAR替代CHAR\",\"尽量使用数值来代替字符串类型，例如：0女、1男\",\"查询尽量避免返回大量数据， 可以采用limit分页\",\"使用explain分析你的SQL执行计划\",\"创建name字段的索引\",\"优化lke语句使用'关键字%'避免使用'%关键字%'导致索引失效\",\"字符串要使用单引号或者双引号区分与数字的区别，避免隐式转换导致索引失效\",\"索引不要太多，5个以内\",\"索引不适合建在有大量重复数据的字段上\",\"避免在where中对字段进行表达式操作， 避免使用!=或<>操作符\",\"去重distinct过滤字段要少\",\"where中使用默认值代替null\",\"使用批量插入减少事务触发，提升性能\",\"批量删除优化：大量删除数据时，为避免锁表报错，可以分批操作\",\"伪删除设计：不删除数据只修改数据标识来记录状态\",\"提高group by语句的效率：先过滤， 后分组\",\"where和order by中常出现的字段推荐创建索引\",\"删除冗余和重复的索引\",\"不要有超过5个以上的表连接\",\"inner join、left join、right join， 优先使用inner join， 使用left join左边表尽量小\",\"少用IN子查询\",\"尽量使用union all替代union\"]},\"1149\":{\"h\":\"常见问题解决\"},\"1150\":{\"h\":\"经典问题\"},\"1151\":{\"h\":\"导入和导出数据\"},\"1152\":{\"h\":\"导出数据\",\"t\":[\"C:\\\\Windows\\\\System32> mysqldump -h主机地址 -P端口号 -u用户名 -p密码 --database 数据库名 > 文件路径/文件名.sql \"]},\"1153\":{\"h\":\"导入数据\",\"t\":[\"mysql> source sql脚本路径名.sql \"]},\"1154\":{\"h\":\"编码问题\",\"t\":[\"在路径：mysql的数据存储路径下 找到my.ini文件 修改内容1：找到[mysql]命令，大概在63行左右，在其下一行添加 default-character-set=utf8 修改内容2: 找到[mysqld]命令，大概在76行左右，在其下一行添加character-set-server=utf8 和 collation-server=utf8_general_ci\",\"修改完毕后，重启MySQL57服务\"]},\"1155\":{\"h\":\"忘记root密码\",\"t\":[\"以管理员权限运行cmd :\",\"关闭MYSQL57服务 : net stop MYSQL57\",\"设置mysqld服务不检查权限密码 \",\"mysql5.5 : mysqld --skip-grant-tables\",\"mysql5.7 : 修改my.ini文件,在[mysqld]下方添加skip-grant-tables = true\",\"开启MYSQL57服务 : net start MYSQL57\",\"无密码登陆服务器 : mysql -uroot\",\"修改root账户的密码为\\\"root\\\" \",\"mysql5.5 : update user set authentication\\\\_string=password(\\\"root\\\") where user=\\\"root\\\";\",\"mysql5.7 : update mysql.user set authentication\\\\_string=password('root') where user='root';\",\"刷新: flush privileges;\",\"退出登录的mysql : exit;\",\"修改my.ini文件，删除掉之前添加在[mysqld]下方的那一行\",\"验证无密码登录是否会失败mysql -uroot\",\"以新密码登录: mysql -uroot -proot\"]},\"1156\":{\"h\":\"查看字符集和校验规则\",\"t\":[\"关于SQL的关键字和函数名等不区分大小写，但是对于数据值是否区分大小写，和字符集与校对规则有关。\",\"ci（大小写不敏感）， cs（大小写敏感），_bin（二元，即比较是基于字符编码的值而与language无关）\",\"查看所有字符集和和其默认的校对规则\",\"show character set; \",\"查看GBK和UTF-8字符集的校对规则\",\"show collation like 'gbk%'; show collation like 'utf8%'; //utf8_unicode_ci和utf8_general_ci对中、英文来说没有实质的差别。 //utf8_general_ci 校对速度快，但准确度稍差。 //utf8_unicode_ci 准确度高，但校对速度稍慢。 \",\"如果你的应用有德语、法语或者俄语，请一定使用utf8_unicode_ci。一般用utf8_general_ci就够了。\",\"查看服务器的字符集和校对规则\",\"show variables like '%_server' \",\"查看和修改某个数据库的字符集和校对规则\",\"use ceshi_db; show create database ceshi_db; //修改数据库的字符集和校对规则： ALTER DATABASE 数据库名称 DEFAULT CHARACTER SET 字符集名称 【COLLATE 校对规则名称】; //例如 ALTER DATABASE ceshi_db DEFAULT CHARACTER SET utf8 collate utf8_general_ci; \",\"注意：\",\"修改了数据库的默认字符集和校对规则后，原来已经创建的表格的字符集和校对规则并不会改变，如果需要，那么需要单独修改。\",\"查看某个表格的字符集和校对规则\",\"//查看字符集 show create table users; //查看校对规则 show table status from bookstore like '%users%' ; //修改表的默认字符集 ALTER TABLE 表名称 DEFAULT CHARACTER SET 字符集名称 【COLLATE 校对规则名称】; //把表默认的字符集和所有字符列（CHAR,VARCHAR,TEXT）改为新的字符集： ALTER TABLE 表名称 CONVERT TO CHARACTER SET 字符集名称 【COLLATE 校对规则名称】; 例如：ALTER TABLE ceshi_table DEFAULT CHARACTER SET gbk collate gbk_chinese_ci; \"]},\"1157\":{\"h\":\"认识Obsidian\"},\"1158\":{\"h\":\"关于资料库\",\"t\":[\"我们对于一个项目工程叫做一个资料库,不同的资料库都是相互隔离的,不可以跨库引用 对于Obsidian的设置也都是存储在.obsidian中的,不同的库的配置也是互不通用的\"]},\"1159\":{\"h\":\"常用快捷键\",\"t\":[\"快速打开设置 CTRL+,\\n调整字体大小 CTRL+滚轮\"]},\"1160\":{\"h\":\"Obsidian双向链接\"},\"1161\":{\"h\":\"引入链接\",\"t\":[\" - 链接一个文章 [[02_Markdown语法]] - 链接到文章的标题 [[02_Markdown语法#2. 使用Markdown]] - 链接到文章的块[[02_Markdown语法#^f261c0]] 注意块的编号是不能修改的,需要注意一致性 我们可以手动创建自定义的块编码 - 链接到文章的字 [[02_Markdown语法#^1d499b|使用]] \"]},\"1162\":{\"h\":\"嵌入块\",\"t\":[\" 嵌入内容: ![[02_Markdown语法#^c83780|嵌入]] \",\"创建目录页,将目录页连接到具体的知识页面,这样建立了完整的链接\"]},\"1163\":{\"h\":\"Obsidian技巧与设置\"},\"1164\":{\"h\":\"配置\",\"t\":[\"在核心插件中开启日记选项,并在单独的选项卡中控制\"]},\"1165\":{\"h\":\"简单模板的创建\",\"t\":[\"在 templates目录下创建对应的模板\",\"修改日记模板的位置\",\"在模板中配置基础的模板位置\\n创建模板\\n使用模板\"]},\"1166\":{\"h\":\"02_Markdown语法\"},\"1167\":{\"h\":\"1. 认识Markdown\",\"t\":[\"简单易用的写作语法,目标:易读易写 用简单的符号,定义常用的排版样式\"]},\"1168\":{\"h\":\"2. 使用Markdown\",\"t\":[\"^1d499b\"]},\"1169\":{\"h\":\"标题\",\"t\":[\"# 标题一 ## 标题二 ### 标题三 #### 标题四 ##### 标题五 ###### 标题六 \"]},\"1170\":{\"h\":\"加粗/斜体/删除\",\"t\":[\"加粗斜体删除\",\"**加粗** *斜体* ~~删除~~ \"]},\"1171\":{\"h\":\"列表\",\"t\":[\"aa \",\"aaa \",\"aaaa\",\"bb \",\"bb\",\"cc\",\"11 \",\"111 \",\"1111\",\"22\",\"33\",\" 有序列表: 数字+.+空格 无序列表: *+空格 或者 -+空格 table 键可以控制缩进 \"]},\"1172\":{\"h\":\"引用\",\"t\":[\"使用 > 表示，可以有多个 >，表示层级更深\",\"引用的内容\",\"啊啊啊\",\"^c83780\",\" > + 内容 >> + 内容 \"]},\"1173\":{\"h\":\"分割线\",\"t\":[\"--- \"]},\"1174\":{\"h\":\"链接\"},\"1175\":{\"h\":\"内联超链接\",\"t\":[\"这里是链接\",\"[显示的文字](链接的地址) [链接文字](链接地址+空格+\\\"文字说明\\\") \"]},\"1176\":{\"h\":\"自动超链接\",\"t\":[\"https://www.baidu.com\",\"<超链接地址> <https://www.baiud.com> \"]},\"1177\":{\"h\":\"图片\",\"t\":[\"百度Logo\",\"百度Logo\",\"一般图片的使用: ![图片文字](图片地址+空格+\\\"文字说明\\\") 带链接的图片使用: [![图片文字](图片地址+空格+\\\"文字说明\\\")](链接地址) \"]},\"1178\":{\"h\":\"代码\"},\"1179\":{\"h\":\"代码块\",\"t\":[\"` ` ` 语言格式 \"]},\"1180\":{\"h\":\"行内代码块\",\"t\":[\"这个是行内代码 There is a literal backtick (`) here.\",\" 这个是``行内代码`` `` There is a literal backtick (`) here.`` \"]},\"1181\":{\"h\":\"代办\",\"t\":[\" 待办事项\",\" 已完成\",\"- [ ] 待办事项 - [x] 已完成事项 \"]},\"1182\":{\"h\":\"表格\",\"t\":[\"第一个部分是表格的标题，使用|来作为列的分割\",\"第二个部分是表示列的对齐方式，有左对齐、居中对齐和居右对齐三种类型，直接看例子吧， --- 表示了默认的左对齐， \",\":--- 表示 左对齐\",\"---: 表示 右对齐\",\":---: 表示居中对齐\",\"第三个部分就是内容了，表示方式跟标题一样，可以有多行\",\"左对齐\",\"居中\",\"右对齐\",\"居左\",\"居中\",\"局右\",\"|左对齐|居中|右对齐| |:---|:---:|---:| |居左|居中|局右| \"]},\"1183\":{\"h\":\"脚注\",\"t\":[\"在文档末尾写上[+^+数字+]:+文字内容 声明一个脚注 ^jiaozhu\",\"该方法根据实验证明有效[1]\"]},\"1184\":{\"h\":\"输出公式\",\"t\":[\"使用 $ 表示，其中一个 $ 表示在行内，两个 $ 表示独占一行。参考教程数学公式在线编译\",\"eg:∑i=1nai=0i=1∑n​ai​=0∑i=1nai=0\"]},\"1185\":{\"h\":\"输出流程图\",\"t\":[\"mermaid文档\",\"mermaid在线编辑器\",\"流程图\",\"相关代码：mermaid语言\",\"sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! \"]},\"1186\":{\"h\":\"Html样式\"},\"1187\":{\"h\":\"文字样式\",\"t\":[\"<b>加粗</b> <strong>加粗</strong> <i>倾斜</i> <em>倾斜</em> <u>下划线</u> <ins>下划线</ins> <s>删除线</s> <del>删除线</del> <sub>下标</sub> <sup>上标</sup> \"]},\"1188\":{\"h\":\"style样式\",\"t\":[\"加粗\",\"<b style='font-size:80px; color:red'>加粗</b> \"]},\"1189\":{\"h\":\"超链接\",\"t\":[\"<a href=\\\"https://www.baidu.com\\\">百度</a> \",\"文章链接 ↩︎\"]},\"1190\":{\"h\":\"Obsidian的插件\"},\"1191\":{\"h\":\"安装插件\",\"t\":[\"关闭安全模式\",\"手动安装插件 将插件的目录解压到plugins中\",\"File Explorer Note Count 显示文件数量\",\"Recent Files 显示最近打开的文件\",\"Obsidian Pandoc 转换文件格式输出\",\"Minimal Theme Settings Minimal Theme主题设置\",\"proxy github\",\"Mindmap NextGen 将标题大纲转换成思维导图\",\"Calendar 查找当天的日记,依赖于日历的插件,需要先开启\",\"Tasks 管理我们的代办事项\",\"Obsidian memos 依赖于日历的插件,需要先开启,主要记录当前的想法\",\"Excalidraw 绘制流程图\",\"cMenu 快捷栏\",\"Quick Explorer\\n按照路径打开文件\"]},\"1192\":{\"h\":\"Obsidian的搜索与查询\"},\"1193\":{\"h\":\"快捷键\",\"t\":[\"搜索当前文件: CTRL+F 搜索整个文件夹: CTRL+Shift+F\"]},\"1194\":{\"h\":\"搜索面板\"},\"1195\":{\"h\":\"搜索的技巧\",\"t\":[\"直接搜索\",\"搜索多个关键词 \",\"空格分隔 : 都包含\",\"OR : 只包含其中一个\",\": 非 包含一个但不包含另一个\",\"搜索指定范围 \",\"搜索文件名: file:word\",\"搜索文件内容: content:word\",\"搜索标签: tag:word\",\"搜索同一行的多个关键词: line:word1 word2\",\"搜索同意章节中的多个关键词: section:word1 word2\",\"搜索同一段落(块)中的多个关键词 block:word1 word2\",\"搜索任务 \",\"搜索任务: task:\\\"\\\"\",\"搜索未完成任务: task-todo:\\\"\\\"\",\"搜索已完成任务: task-done:\\\"\\\"\",\"保存查询结果 \",\"代码 query\",\"将你的资料库作为一个数据库,使用语法进行查询\"]},\"1196\":{\"h\":\"定义\",\"t\":[\"Obsidian资料库的查询\",\"查询对象: Obsidian资料库\",\"查询依据: YAML数据/Meatainfo(元数据)\"]},\"1197\":{\"h\":\"场景\",\"t\":[\"什么时候使用搜索 \",\"条件单一\",\"无需保存结果\",\"什么时候使用查询 \",\"条件复杂\",\"需要保存结果\"]},\"1198\":{\"h\":\"YAML\",\"t\":[\"位于Markdown文件开头\",\"首尾三个-\",\"Obsidian支持的YAML字段 \",\"tags: 标签\",\"publish: 出版\",\"cssclass: 分类\",\"aliases: 别名\",\"自定义字段 \",\"category: 范围\",\"date: 日期\",\"time: 时间\",\"title: 标题\",\"raling: 评分\",\"创建模板\",\"行内标记 \",\"One Field:Value\",\"这分文档可以打[rating::5] 分\",\"Obsidian的文件属性 \",\"file.name: 文件标题(字符串)\",\"file.folder: 文件所属文件夹路径\",\"file.path: 文件路径\",\"file.size: (in bytes) 文件大小\",\"file.ctime: 文件的创建时间（包含日期和时间）\",\"file.mtime: 文件的修改时间\",\"file.cday: 文件创建的日期\",\"file.mday: 文件修改的日期\",\"file.tags: 笔记中所有标签数组\",\"file.etags: 除去子标签的数组\",\"file.inlinks: 指向此文件的所有传入链接的数组\",\"file.outlinks: 此文件所有出站的链接数组\",\"file.aliases: 文件别名数组\",\"file.day：如果文件名中有日期，那么会以这个字段显示。比如文 件名中包含 yyyy-mm-dd（年-月-日，例如2021-03-21），那么 就会存在这个 metadata。\",\"任务属性 \",\"Task 会继承所在文件的所有字段，比如 Task 所在的页面中已经包 含了 rating 信息了，那么 task 也会有\",\"completed: 任务是否完成\",\"fullyCompleted: 任务以及所有的子任务是否完成\",\"text: 任务名\",\"line: task 所在行\",\"path: task 所在路径\",\"section: 连接到任务所在区块\",\"link: 连接到距离任务最近的可连接的区块\",\"subtasks: 子任务\",\"real: 如果为\",\"true, 则是一个真正的任务，否则就是一个任务之前 或之后的元素列表\",\"completion: 任务完成的日期\",\"due: 任务到期时间\",\"created: 创建日期\",\"annotated: 如果任务有自定义标记则为 True，否则为 False\",\"DataView \",\"展示方式 \",\"Table\",\"List\",\"Task\"]},\"1199\":{\"h\":\"DataView语法\",\"t\":[\"基本和SQL的语法一致\"]},\"1200\":{\"h\":\"简单的查询语法\"},\"1201\":{\"h\":\"带条件的查询\"},\"1202\":{\"h\":\"进阶查询\"},\"1203\":{\"h\":\"使用建议\",\"t\":[\"可以自动化创建索引 可以根据标签更好的管理自己的页面\",\"注意: Obsidian中使用dataview并不会影响到关系图谱\"]},\"1204\":{\"h\":\"JDBC初识\"},\"1205\":{\"h\":\"什么是JDBC\",\"t\":[\"JDBC(Java DataBase Connectivity, Java数据库连接),是一种用于执行SQL语句的Java API，为多种关系数据库提供统一访问,它由一组用Java语言编写的类和接口组成\",\"有了JDBC，程序员只需用JDBC API写一个程序，就可访问所有数据库。\"]},\"1206\":{\"h\":\"Sun公司、数据库厂商、程序员三方关系\",\"t\":[\"SUN公司是规范制定者，制定了规范JDBC（连接数据库规范） \",\"DriverManager类 作用：管理各种不同的JDBC驱动\",\"Connection接口\",\"Statement接口和PreparedStatement接口\",\"ResultSet接口\",\"数据库厂商微软、甲骨文等分别提供实现JDBC接口的驱动jar包\",\"程序员学习JDBC规范来应用这些jar包里的类。\"]},\"1207\":{\"h\":\"JDBD历史版本及特征\"},\"1208\":{\"h\":\"JDBC 1.0\",\"t\":[\"JDBC 1.0 随JDK1.1一起发布,JDBC操作相关的接口和类位于java.sql包中。\"]},\"1209\":{\"h\":\"JDBC 2.0\",\"t\":[\"JDBC 2.0 API被划分为两部分：核心API和扩展API,有两个包,分别是java.sql包和javax.sql包。\",\"java.sql核心API包 在支持新功能方面：包括结果集可以向后滚动，批量的更新数据。另外，还提供了UNICODE字符集的字符流操作。 在支持SQL的数据类型方面：新增加的BLOB, CLOB,和数组接口能够是应用程序操作大块的数据类型\",\"javax.sql扩展API包\",\"DataSource数据源接口 JDBC1.0是原来是用DriverManager类来产生一个对数据源的连接。JDBC2.0用一种替代的方法，使用DataSource的实现，代码变的更小巧精致，也更容易控制。\",\"Connection pooling 如果DataSource对象实现与一个支持连接池的中间层的服务器一起工作，DataSource对象就会自动的返回连接池中的连接，这个连接也是可以重复利用的。\",\"Distrubute transaction 在一个事务中涉及到了多个数据库服务器。获得一个用来支持分布式事务的连接与获得连接池中的连接是很相似的。同样，不同之处在于DataSource的实现上的不同，而不是在应用程序中获得连接的方式上有什么不同。\",\"Rowsets RowSet接口扩展了ResultSet接口。这样RowSet对象就有了ResultSet对象所有的功能。不可以滚动的ResultSet变成了可以滚动的RowSet。\"]},\"1210\":{\"h\":\"JDBC访问数据库编码步骤\",\"t\":[\"加载一个Driver驱动\",\"创建数据库连接（Connection）\",\"创建SQL命令发送器Statement\",\"通过Statement发送SQL命令并得到结果\",\"处理结果（select语句）\",\"关闭数据库资源ResultSet Statement Connection\"]},\"1211\":{\"h\":\"数据准备\",\"t\":[\"create table DEPT( DEPTNO int(2) not null, DNAME VARCHAR(14), LOC VARCHAR(13) ); alter table DEPT add constraint PK_DEPT primary key (DEPTNO); create table EMP ( EMPNO int(4) primary key, ENAME VARCHAR(10), JOB VARCHAR(9), MGR int(4), HIREDATE DATE, SAL double(7,2), COMM double(7,2), DEPTNO int(2) ); alter table EMP add constraint FK_DEPTNO foreign key (DEPTNO) references DEPT (DEPTNO); create table SALGRADE ( GRADE int primary key, LOSAL double(7,2), HISAL double(7,2) ); create table BONUS ( ENAME VARCHAR(10), JOB VARCHAR(9), SAL double(7,2), COMM double(7,2) ); insert into DEPT (DEPTNO, DNAME, LOC) values (10, 'ACCOUNTING', 'NEW YORK'); insert into DEPT (DEPTNO, DNAME, LOC) values (20, 'RESEARCH', 'DALLAS'); insert into DEPT (DEPTNO, DNAME, LOC) values (30, 'SALES', 'CHICAGO'); insert into DEPT (DEPTNO, DNAME, LOC) values (40, 'OPERATIONS', 'BOSTON'); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7369, 'SMITH', 'CLERK', 7902, '1980-12-17', 800, null, 20); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7499, 'ALLEN', 'SALESMAN', 7698, '1981-02-20', 1600, 300, 30); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7521, 'WARD', 'SALESMAN', 7698, '1981-02-22', 1250, 500, 30); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7566, 'JONES', 'MANAGER', 7839, '1981-04-02', 2975, null, 20); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7654, 'MARTIN', 'SALESMAN', 7698, '1981-09-28', 1250, 1400, 30); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7698, 'BLAKE', 'MANAGER', 7839, '1981-05-01', 2850, null, 30); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7782, 'CLARK', 'MANAGER', 7839, '1981-06-09', 2450, null, 10); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7788, 'SCOTT', 'ANALYST', 7566, '1987-04-19', 3000, null, 20); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7839, 'KING', 'PRESIDENT', null, '1981-11-17', 5000, null, 10); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7844, 'TURNER', 'SALESMAN', 7698, '1981-09-08', 1500, 0, 30); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7876, 'ADAMS', 'CLERK', 7788, '1987-05-23', 1100, null, 20); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7900, 'JAMES', 'CLERK', 7698, '1981-12-03', 950, null, 30); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7902, 'FORD', 'ANALYST', 7566, '1981-12-03', 3000, null, 20); insert into EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) values (7934, 'MILLER', 'CLERK', 7782, '1982-01-23', 1300, null, 10); insert into SALGRADE (GRADE, LOSAL, HISAL) values (1, 700, 1200); insert into SALGRADE (GRADE, LOSAL, HISAL) values (2, 1201, 1400); insert into SALGRADE (GRADE, LOSAL, HISAL) values (3, 1401, 2000); insert into SALGRADE (GRADE, LOSAL, HISAL) values (4, 2001, 3000); insert into SALGRADE (GRADE, LOSAL, HISAL) values (5, 3001, 9999); -- 查看表： select * from dept; -- 部门表：dept:department 部分 ，loc - location 位置 select * from emp; -- 员工表：emp:employee 员工 ,mgr :manager上级领导编号，hiredate 入职日期 firedate 解雇日期 ，common：补助 -- deptno 外键 参考 dept - deptno字段 -- mgr 外键 参考 自身表emp - empno 产生了自关联 select * from salgrade; -- losal - lowsal -- hisal - highsal select * from bonus; \"]},\"1212\":{\"h\":\"简单的JDBCDemo\"},\"1213\":{\"h\":\"简单使用\"},\"1214\":{\"h\":\"创建项目并引入JDBC jar包\",\"t\":[\"创建项目和模块.将jar文件放入项目的lib目录中\",\"给当前项目添加依赖(告诉当前项目/模块可以依赖jar文件中的代码)\",\"点击OK\"]},\"1215\":{\"h\":\"简单使用JDBC\",\"t\":[\"加载一个Driver驱动\",\"创建数据库连接（Connection）\",\"创建SQL命令发送器Statement\",\"通过Statement发送SQL命令并得到结果\",\"处理结果（select语句）\",\"关闭数据库资源ResultSet Statement Connection\",\"import com.mysql.cj.jdbc.Driver; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.sql.Statement; public class TestDemo01 { public static void main(String[] args) throws SQLException { //加载驱动 Driver driver = new Driver(); //注册驱动 DriverManager.registerDriver(driver); //获得链接 String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; String name =\\\"root\\\"; String password = \\\"root\\\"; Connection connection = DriverManager.getConnection(url,name,password); //获得语句对象 Statment Statement statement = connection.createStatement(); //执行SQL 获取返回值 String sql = \\\"insert into dept values(50,'教学部','北京');\\\"; int i = statement.executeUpdate(sql); System.out.println(\\\"受影响的行数:\\\"+i); //释放资源 statement.close(); connection.close(); } } \"]},\"1216\":{\"h\":\"常见问题解决\",\"t\":[\"错误一: Exception in thread \\\"main\\\" java.lang.ClassNotFoundException: com.mysql.jdbc2.Driver 原因：没有添加jar包或者com.mysql.jdbc2.Driver路径错误\",\"错误二: Exception in thread \\\"main\\\" java.sql.SQLException: No suitable driver found for jbdc:mysql://127.0.0.1:3306/stumgr 原因：url错误\",\"错误三: Exception in thread \\\"main\\\" java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES) 原因：用户名或者密码错误\",\"错误四: Exception in thread \\\"main\\\" com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException:Duplicate entry '90' for key 'PRIMARY' 原因：主键冲突\",\"错误五: Public Key Retrieval is not allowed 原因：如果用户使用 sha256_password 认证，密码在传输过程中必须使用 TLS 协议保护，但是如果 RSA 公钥不可用，可以使用服务器提供的公钥；可以在连接中通过 ServerRSAPublicKeyFile 指定服务器的 RSA 公钥，或者AllowPublicKeyRetrieval=True参数以允许客户端从服务器获取公钥；但是需要注意的是 AllowPublicKeyRetrieval=True可能会导致恶意的代理通过中间人攻击(MITM)获取到明文密码，所以默认是关闭的，必须显式开启 在jdbc连接添加上参数allowPublicKeyRetrieval=true即可，注意参数间用&\"]},\"1217\":{\"h\":\"优化驱动注册\",\"t\":[\"我们查看Driver的源代码时,发现: 该类内部有一个静态代码块,在代码块中就是在实例化一个驱动并在驱动中心注册.静态代码块会在类进入内存时执行,也就是说,我们只要让该类字节码进入内存,就会自动完成注册,不需要我们手动去new\",\"所以我们在代码中直接使用反射,通过Class.forName(\\\"com.mysql.jdbc.Driver\\\"),加载该类进入内存即可\",\"public class TestDemo02 { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { Connection connection = null; Statement statement = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); statement = connection.createStatement(); String sql=\\\"insert into dept values('123','助教部门','北京');\\\"; int rows = statement.executeUpdate(sql); System.out.println(\\\"影响数据行数为:\\\"+rows); } catch (Exception e) { e.printStackTrace(); } finally { if (statement!=null){ try { statement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection!=null){ try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } } \"]},\"1218\":{\"h\":\"我的第一个CRUD\"},\"1219\":{\"h\":\"新增\",\"t\":[\"public class TestDemo02 { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { testInster(\\\"123\\\",\\\"助教部门\\\",\\\"北京\\\"); } /** * 添加 * @param id id * @param department 部门 * @param address 地址 */ public static void testInster(String id, String department,String address){ Connection connection = null; Statement statement = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); statement = connection.createStatement(); String sql=\\\"insert into dept values('\\\"+id+\\\"','\\\"+department+\\\"','\\\"+address+\\\"');\\\"; int rows = statement.executeUpdate(sql); System.out.println(\\\"影响数据行数为:\\\"+rows); } catch (Exception e) { e.printStackTrace(); } finally { if (statement!=null){ try { statement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection!=null){ try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } } \"]},\"1220\":{\"h\":\"删除\",\"t\":[\"public class TestDemo02 { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { testDelete(\\\"123\\\"); } /** * 删除 * @param id */ public static void testDelete(String id) { Connection connection = null; Statement statement = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); statement = connection.createStatement(); String sql = \\\"delete from dept where deptno='\\\"+id+\\\"'\\\"; int i = statement.executeUpdate(sql); System.out.println(\\\"受影响的行数:\\\"+i); } catch (Exception e) { e.printStackTrace(); } finally { if (statement != null) { try { statement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection != null) { try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } } \"]},\"1221\":{\"h\":\"修改\",\"t\":[\"public class TestDemo02 { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { testUpdate(\\\"123\\\",\\\"推广部\\\",\\\"上海\\\"); } /** * 更新 * @param id id * @param department 部门 * @param address 地址 */ public static void testUpdate(String id, String department,String address){ Connection connection = null; Statement statement = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); statement = connection.createStatement(); String sql = \\\"update dept set dname='\\\"+department+\\\"',loc='\\\"+address+\\\"' where deptno='\\\"+id+\\\"';\\\"; int i = statement.executeUpdate(sql); System.out.println(\\\"受影响的行数:\\\"+i); } catch (Exception e) { e.printStackTrace(); }finally { if (statement != null) { try { statement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection != null) { try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } } \"]},\"1222\":{\"h\":\"查询\",\"t\":[\"public class TestDemo02 { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { testSelectAll(); } /** * 查询全部 */ public static void testSelectAll(){ Connection connection = null; Statement statement = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); statement = connection.createStatement(); String sql = \\\"Select * from dept\\\"; ResultSet resultSet = statement.executeQuery(sql); while (resultSet.next()) { int deptno = resultSet.getInt(\\\"DEPTNO\\\"); String dname = resultSet.getString(\\\"DNAME\\\"); String loc = resultSet.getString(\\\"LOC\\\"); System.out.println(\\\"[deptno:\\\"+deptno+\\\";dname\\\"+dname+\\\";loc\\\"+loc+\\\"]\\\"); } } catch (Exception e) { e.printStackTrace(); }finally { if (statement != null) { try { statement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection != null) { try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } } \"]},\"1223\":{\"h\":\"关于 ResultSet\",\"t\":[\"ResultSet里的数据一行一行排列，每行有多个字段，且有一个记录指针，指针所指的数据行叫做当前数据行，我们只能来操作当前的数据行。我们如果想要取得某一条记录，就要使用ResultSet的next()方法 ,如果我们想要得到ResultSet里的所有记录，就应该使用while循环。\",\"ResultSet对象自动维护指向当前数据行的游标。每调用一次next()方法，游标向下移动一行。\",\"初始状态下记录指针指向第一条记录的前面，通过next()方法指向第一条记录。循环完毕后指向最后一条记录的后面。\",\"方法名\",\"说明\",\"boolean next()\",\"将光标从当前位置向下移动一行\",\"boolean previous()\",\"游标从当前位置向上移动一行\",\"void close()\",\"关闭ResultSet 对象\",\"int getInt(int colIndex)\",\"以int形式获取结果集当前行指定列号值\",\"int getInt(String colLabel)\",\"以int形式获取结果集当前行指定列名值\",\"float getFloat(int colIndex)\",\"以float形式获取结果集当前行指定列号值\",\"Float getFloat(String colLabel)\",\"以float形式获取结果集当前行指定列名值\",\"String getString(int colIndex)\",\"以String 形式获取结果集当前行指定列号值\",\"String getString(String colLabel)\",\"以String形式获取结果集当前行指定列名值\",\"作为一种好的编程风格，应在不需要Statement对象和Connection对象时显式地关闭它们。关闭Statement对象和Connection对象的语法形式为：用户不必关闭ResultSet。当它的 Statement 关闭、重新执行或用于从多结果序列中获取下一个结果时，该ResultSet将被自动关闭。\"]},\"1224\":{\"h\":\"封装成对象\"},\"1225\":{\"h\":\"为什么将结果封装成对象或者对象集合\",\"t\":[\"java是面向对象的编程语言,java中所有的数据处理都是基于面向对象的编码风格实现的,让数据以符合java风格的形式存在,便于对数据的后续处理\",\"ResultSet 集合虽然可以存放数据,但是它是JDBC中查询数据的一种手段,是一种数据的临时存储方案,使用完毕是要进行释放和关闭\"]},\"1226\":{\"h\":\"怎么封装\",\"t\":[\"准备和数据库表格相对应的一个实体类,用于封装结果集中的每一条数据,数据库表格中的每一个字段就是实体类的一个属性,实体类的一个对象就可以用于存储数据库表中的一条记录.\",\"public class dept implements Serializable { private Integer deptNo; private String dName; private String loc; public dept() {} public dept(Integer deptNo, String dName, String loc) { this.deptNo = deptNo; this.dName = dName; this.loc = loc; } public Integer getDeptNo() { return deptNo; } public void setDeptNo(Integer deptNo) { this.deptNo = deptNo; } public String getdName() { return dName; } public void setdName(String dName) { this.dName = dName; } public String getLoc() { return loc; } public void setLoc(String loc) { this.loc = loc; } @Override public String toString() { return \\\"dept{\\\" + \\\"deptNo=\\\" + deptNo + \\\", dName='\\\" + dName + '\\\\'' + \\\", loc='\\\" + loc + '\\\\'' + '}'; } } \",\"封装实体类的特点:\",\"类名和表名保持一致 (见名知意) \",\"属性个数和数据库的表的列数保持一致 \",\"属性的数据类型和列的数据类型保持一致 \",\"属性名和数据库表格的列名要保持一致 \",\"所有的属性必须都是私有的 (出于安全考虑) \",\"实体类的属性推荐写成包装类 \",\"日期类型推荐写成java.util.Date \",\"所有的属性都要有get和set方法 \",\"必须具备空参构造方法 \",\"实体类应当实现序列化接口 (mybatis缓存 分布式需要 ) \",\"实体类中其他构造方法可选\"]},\"1227\":{\"h\":\"封装后的使用\",\"t\":[\"public class TestDemo03 { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { List<dept> deptsList = getDeptsList(); for (dept dept : deptsList) { System.out.println(dept); } } public static List<dept> getDeptsList() { Connection connection = null; Statement statement = null; List<dept> depts = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); statement = connection.createStatement(); depts = new ArrayList<>(); String sql = \\\"select * from dept\\\"; ResultSet resultSet = statement.executeQuery(sql); while (resultSet.next()) { int deptno = resultSet.getInt(\\\"DEPTNO\\\"); String dname = resultSet.getString(\\\"DNAME\\\"); String loc = resultSet.getString(\\\"LOC\\\"); dept dept = new dept(deptno, dname, loc); depts.add(dept); } } catch (Exception e) { e.printStackTrace(); } finally { if (statement != null){ try { statement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection != null){ try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } return depts; } } \"]},\"1228\":{\"h\":\"批处理与事务\"},\"1229\":{\"h\":\"批处理\"},\"1230\":{\"h\":\"什么是批处理\",\"t\":[\"当我们有多条sql语句需要发送到数据库执行的时候，有两种发送方式，一种是执行一条发送一条sql语句给数据库,另一个种是发送一个sql集合给数据库，也就是发送一个批sql到数据库。\",\"普通的执行过程是：每处理一条数据，就访问一次数据库；而批处理是：累积到一定数量，再一次性提交到数据库，减少了与数据库的交互次数，所以效率会大大提高,很显然两者的数据库执行效率是不同的，我们发送批处理sql的时候数据库执行效率要高\",\"statement语句对象实现批处理有如下问题 缺点：采用硬编码效率低，安全性较差。 原理：硬编码，每次执行时相似SQL都会进行编译 \",\"PreparedStatement+批处理 优点：语句只编译一次，减少编译次数。提高了安全性（阻止了SQL注入） 原理：相似SQL只编译一次，减少编译次数 注意: 需要设置批处理开启&rewriteBatchedStatements=true\"]},\"1231\":{\"h\":\"使用批处理\",\"t\":[\"public class TestBatch { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&rewriteBatchedStatements=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { testBatch(); } public static void testBatch(){ Connection connection = null; PreparedStatement preparedStatement = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); String sql = \\\"insert into dept values (?,?,?)\\\"; preparedStatement = connection.prepareStatement(sql); for (int i = 0; i < 100; i++) { preparedStatement.setInt(1,i); preparedStatement.setString(2, \\\"aa\\\"); preparedStatement.setString(3, \\\"aa\\\"); preparedStatement.addBatch(); if (i%50==0){//每50提交 preparedStatement.executeBatch();//提交 preparedStatement.clearBatch();//清空batch容器 } } //再次提交 preparedStatement.executeBatch();//提交 preparedStatement.clearBatch();//清空batch容器 } catch (Exception e) { e.printStackTrace(); } finally { if (preparedStatement == null) { try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection == null) { try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } } \"]},\"1232\":{\"h\":\"事务\"},\"1233\":{\"h\":\"什么是事务\",\"t\":[\"事务概念: 在逻辑上一组不可分割的操作,由多个sql语句组成,多个sql语句 **要么全都执行成功,要么都不执行 : 原子性 一致性 隔离性 持久性 **\",\"JDBC控制事物主要就是在学习如何让多个数据库操作成为一个整体,实现要么全都执行成功,要么全都不执行\",\"在JDBC中，事务操作是自动提交。一条对数据库的DML(insert、update、delete)代表一项事务操作,操作成功后，系统将自动调用commit()提交，否则自动调用rollback()回滚,在JDBC中，事务操作方法都位于接口java.sql.Connection中,可以通过调用setAutoCommit(false) 来禁止自动提交。之后就可以把多个数据库操作的表达式作为一个事务，在操作完成后调用 commit()来进行整体提交，倘若其中一个表达式操作失败，都不会执行到commit()，并且将产生响应的异常；此时就可以在异常捕获时调用rollback()进行回滚,回复至数据初始状态.事务开始的边界则不是那么明显了，它会开始于组成当前事务的所有statement中的第一个被执行的时候。事务结束的边界是commit或者rollback方法的调用\"]},\"1234\":{\"h\":\"使用事务\",\"t\":[\"public class TestTransaction { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { testTransaction(1,-10); } public static void testTransaction(int aid,int money){ Connection connection = null; PreparedStatement preparedStatement = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); connection.setAutoCommit(false);//设置事务手动提交 String sql=\\\"update account set money =money- ? where aid = ?\\\"; preparedStatement = connection.prepareStatement(sql); preparedStatement.setInt(1, money); preparedStatement.setInt(2, aid); //设置错误 // int a = 1/0; //每条DML都是默认提交事务的,多个preparedStatement.executeUpdate();都会提交一次事务 preparedStatement.executeUpdate(); } catch (Exception e) { //如果出现异常 回滚事务 if (connection!=null){ try { connection.rollback(); } catch (SQLException ex) { ex.printStackTrace(); } } } finally { //最终提交事务 if (connection!=null){ try { connection.commit(); } catch (SQLException ex) { ex.printStackTrace(); } } if (preparedStatement!=null){ try { preparedStatement.close(); } catch (SQLException ex) { ex.printStackTrace(); } } if (connection!=null){ try { connection.close(); } catch (SQLException ex) { ex.printStackTrace(); } } } } } \"]},\"1235\":{\"h\":\"使用回滚点回滚\",\"t\":[\"我们可以在执行SQL的时候,在特定的地方使用** connection.setSavepoint();** 设置回滚点\",\"在回滚的时候,使用**connection.rollback(savepoint);**回滚到指定回滚点\",\"public class TestTransaction02 { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { testBatch(); } public static void testBatch(){ Connection connection = null; PreparedStatement preparedStatement = null; LinkedList<Savepoint> savepoints =new LinkedList<Savepoint>(); try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); connection.setAutoCommit(false);//设置手动提交 String sql = \\\"insert into dept values (?,?,?)\\\"; preparedStatement = connection.prepareStatement(sql); for (int i = 0; i < 100; i++) { preparedStatement.setInt(1,i); preparedStatement.setString(2, \\\"aa\\\"); preparedStatement.setString(3, \\\"aa\\\"); preparedStatement.addBatch(); if (i%50==0){//每50提交 preparedStatement.executeBatch();//提交 preparedStatement.clearBatch();//清空batch容器 //设置回滚点 Savepoint savepoint = connection.setSavepoint(); savepoints.add(savepoint); } // 数据在 51条插入的时候出现异常 if(i ==51){ int x =1/0; } } //再次提交 preparedStatement.executeBatch();//提交 preparedStatement.clearBatch();//清空batch容器 } catch (Exception e) { if (connection != null) { Savepoint last = savepoints.getLast(); try { connection.rollback(last);//回滚到还原点 } catch (SQLException ex) { ex.printStackTrace(); } } } finally { if (connection != null) { savepoints.clear();//清空还原点列表 try { connection.commit();//提交事务 } catch (SQLException ex) { ex.printStackTrace(); } } if (preparedStatement == null) { try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection == null) { try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } } \"]},\"1236\":{\"h\":\"SQL注入和预编译\"},\"1237\":{\"h\":\"什么是SQL注入\",\"t\":[\"SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。\",\"以模拟登录为例:在前台输入用户名和密码，后台判断信息是否正确，并给出前台反馈信息，前台输出反馈信息。\"]},\"1238\":{\"h\":\"模拟SQL注入\"},\"1239\":{\"h\":\"创建表\",\"t\":[\"CREATE TABLE `account` ( `aid` int NOT NULL AUTO_INCREMENT, `username` varchar(100) COLLATE utf8_bin DEFAULT NULL, `password` varchar(100) COLLATE utf8_bin DEFAULT NULL, `money` int DEFAULT NULL, PRIMARY KEY (`aid`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin; INSERT INTO account (username, password, money) VALUES('admin', 'admin', 100); \"]},\"1240\":{\"h\":\"编写登录程序\"},\"1241\":{\"h\":\"封装实体类对象\",\"t\":[\"public class Account implements Serializable { private int aid; private String username; private String password; private int money; public Account() { } public Account(int aid, String username, String password, int money) { this.aid = aid; this.username = username; this.password = password; this.money = money; } public int getAid() { return aid; } public void setAid(int aid) { this.aid = aid; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public int getMoney() { return money; } public void setMoney(int money) { this.money = money; } @Override public String toString() { return \\\"Account{\\\" + \\\"aid=\\\" + aid + \\\", username='\\\" + username + '\\\\'' + \\\", password='\\\" + password + '\\\\'' + \\\", money=\\\" + money + '}'; } } \"]},\"1242\":{\"h\":\"JDBC主程序\",\"t\":[\"public class TestDemo01 { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\\\"请输入用户名:\\\"); String name = scanner.next(); System.out.println(\\\"请输入密码:\\\"); String password = scanner.next(); Account account = getAccount(name, password); System.out.println(null!=account?\\\"登录成功\\\":\\\"登录失败\\\"); scanner.close(); } public static Account getAccount(String username,String pwd){ Connection connection = null; Statement statement = null; Account account= null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); statement = connection.createStatement(); String sql=\\\"select * from account where username ='\\\"+username+\\\"' and password ='\\\"+pwd+\\\"'\\\"; System.out.println(sql); ResultSet resultSet = statement.executeQuery(sql); while (resultSet.next()) { int aid = resultSet.getInt(\\\"aid\\\"); String usernamea = resultSet.getString(\\\"username\\\"); String pwda = resultSet.getString(\\\"password\\\"); int money = resultSet.getInt(\\\"money\\\"); account=new Account(aid,usernamea,pwda,money); System.out.println(account); } } catch (Exception e) { e.printStackTrace(); }finally { if (statement == null) { try { statement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection == null) { try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } return account; } } \"]},\"1243\":{\"h\":\"测试程序\"},\"1244\":{\"h\":\"正常登录\"},\"1245\":{\"h\":\"SQL注入\"},\"1246\":{\"h\":\"注入原理\",\"t\":[\"我们在进行SQL拼接时,由于使用的是String拼接的方式. 攻击者可以通过恶意符号修改我们的SQL语句,达到注入的目的:\",\"select * from account where username ='admin' and password ='admin'\",\"注入后: select * from account where username ='admin' and password ='a'or'1'='1' 由于1=1恒成立,所以SQL执行成功\"]},\"1247\":{\"h\":\"prepareStatment 预编译\",\"t\":[\"正对上述的现象,我们可以使用prepareStatment 对SQL进行预编译处理,防止SQL注入.\"]},\"1248\":{\"h\":\"Statement和PreparedStatment的关系和区别\",\"t\":[\"关系：public interface PreparedStatement extends Statement\",\"区别:\",\"PreparedStatment安全性高,可以避免SQL注入\",\"PreparedStatment简单不繁琐,不用进行字符串拼接\",\"PreparedStatment性能高，用在执行多个相同数据库DML操作时,可以减少sql语句的编译次数\"]},\"1249\":{\"h\":\"原理\",\"t\":[\"prepareStatment对象在set方法上,会对单引号进行转译处理,也就是说, ? 中的数据的单引号 ' 会被转义成 \\\\' 这样就单引号就不会破坏sql语句的结构,\",\"比如: 上述中select * from account where username ='admin' and password ='a'or '1'='1' 使用预编译后\",\"select * from account where username =\\\\'admin\\\\' and password =\\\\'a\\\\'or\\\\'1\\\\'=\\\\'1\\\\' 这样就可以避免SQL注入了\",\"说白了mysql驱动的PreparedStatement实现类的setString();方法内部做了单引号的转义，而Statement不能防止sql注入，就是因为它没有把单引号做转义，而是简单粗暴的直接拼接字符串，所以达不到防止sql注入的目的。\"]},\"1250\":{\"h\":\"流程\",\"t\":[\"当客户端发送一条sql语句给DBMS时,MySQL的执行流程如下图\",\"客户端向服务器端发送SQL命令\",\"服务器端连接模块连接并验证\",\"缓存模块解析SQL为Hash并与缓存中Hash表对应。如果有结果直接返回结果，如果没有对应继续向下执行\",\"解析器解析SQL为解析树，如果出现错误，报SQL解析错误。如果正确，向下传递\",\"预处理器对解析树继续处理，处理成新的解析树。\",\"优化器根据开销自动选择最优执行计划，生成执行计划\",\"执行器执行执行计划，访问存储引擎接口\",\"存储引擎访问物理文件并返回结果\",\"如果开启缓存，缓存管理器把结果放入到查询缓存中。\",\"返回结果给客户端\",\"当客户发送一条SQL语句给DBMS后，DBMS总是需要校验SQL语句的语法格式是否正确，然后把SQL语句编译成可执行的函数，最后才是执行SQL语句。其中校验语法，和编译所花的时间可能比执行SQL语句花的时间还要多。\",\"预编译语句PreparedStatement 是java.sql中的一个接口，它是Statement的子接口。通过Statement对象执行SQL语句时，需要将SQL语句发送给DBMS，由DBMS首先进行编译后再执行。预编译语句和Statement不同，在创建PreparedStatement 对象时就指定了SQL语句，该语句立即发送给DBMS进行编译。当该编译语句被执行时，DBMS直接运行编译后的SQL语句，而不需要像其他SQL语句那样首先将其编译。预编译的SQL语句处理性能稍微高于普通的传递变量的办法。\",\"例如:我们需要执行多次insert语句，但只是每次插入的值不同，MySQL服务器也是需要每次都去校验SQL语句的语法格式，以及编译，这就浪费了太多的时间。如果使用预编译功能，那么只对SQL语句进行一次语法校验和编译，所以效率要高。\",\"注意: 由于使用了PreparedStatement ,与 Statement不同的是并不会自动关闭resultSet对象,所以我们需要手动关闭resultSet\"]},\"1251\":{\"h\":\"开启\",\"t\":[\"我们可以通过设置URL中的参数来控制预编译是否开启\",\"useServerPrepStmts 是否开启预编译\",\"cachePrepStmts 是否启用预编译缓存\",\"例如: \\\"jdbc:mysql://localhost:3306/mydb?*****&useServerPrepStmts=true&cachePrepStmts=true\\\"\",\"值得注意的是,我们的Connector/J 5.0.5及之后useServerPrepStmts默认false,就是默认没有开启预编译,之前默认为true, cachePrepStmts 一直默认为false,需要我们手动设置才可以启用预编译,在开启预编译的同时要同时开启预编译缓存才能带来些许的性能提升\"]},\"1252\":{\"h\":\"使用\",\"t\":[\"public class TestPreparedSstatement { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&useServerPrepStmts=true&cachePrepStmts=true&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\\\"请输入用户名:\\\"); String name = scanner.next(); System.out.println(\\\"请输入密码:\\\"); String password = scanner.next(); Account account = getAccount(name, password); System.out.println(null!=account?\\\"登录成功\\\":\\\"登录失败\\\"); scanner.close(); } public static Account getAccount(String username,String pwd){ Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; Account account= null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); String sql=\\\"select * from account where username = ? and password = ?\\\"; preparedStatement = connection.prepareStatement(sql);//将SQL传入进行预编译 preparedStatement.setString(1, username); preparedStatement.setString(2, pwd); System.out.println(sql); resultSet = preparedStatement.executeQuery();//查询时不用传 while (resultSet.next()) { int aid = resultSet.getInt(\\\"aid\\\"); String usernamea = resultSet.getString(\\\"username\\\"); String pwda = resultSet.getString(\\\"password\\\"); int money = resultSet.getInt(\\\"money\\\"); account=new Account(aid,usernamea,pwda,money); System.out.println(account); } } catch (Exception e) { e.printStackTrace(); }finally { if (resultSet == null) { try { resultSet.close(); } catch (SQLException e) { e.printStackTrace(); } } if (preparedStatement == null) { try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection == null) { try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } return account; } } \",\"尝试SQL注入\"]},\"1253\":{\"h\":\"重构CRUD\",\"t\":[\"public class TestPreparedSstatementCRUD { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; public static void main(String[] args) { testInster(\\\"124\\\",\\\"助教部门\\\",\\\"北京\\\"); // testDelete(\\\"123\\\"); // testUpdate(\\\"123\\\",\\\"推广部\\\",\\\"上海\\\"); // testSelectAll(\\\"123\\\"); } /** * 添加 * @param id id * @param department 部门 * @param address 地址 */ public static void testInster(String id, String department,String address){ Connection connection = null; PreparedStatement preparedStatement = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); String sql=\\\"insert into dept values(?,?,?);\\\"; preparedStatement = connection.prepareStatement(sql); preparedStatement.setString(1, id); preparedStatement.setString(2, department); preparedStatement.setString(3, address); int rows = preparedStatement.executeUpdate(); System.out.println(\\\"影响数据行数为:\\\"+rows); } catch (Exception e) { e.printStackTrace(); } finally { if (preparedStatement!=null){ try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection!=null){ try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } /** * 删除 * @param id */ public static void testDelete(String id) { Connection connection = null; PreparedStatement preparedStatement = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); String sql = \\\"delete from dept where deptno=?\\\"; preparedStatement = connection.prepareStatement(sql); preparedStatement.setString(1, id); int i = preparedStatement.executeUpdate(); System.out.println(\\\"受影响的行数:\\\"+i); } catch (Exception e) { e.printStackTrace(); } finally { if (preparedStatement != null) { try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection != null) { try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } /** * 更新 * @param id id * @param department 部门 * @param address 地址 */ public static void testUpdate(String id, String department,String address){ Connection connection = null; PreparedStatement preparedStatement = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); String sql = \\\"update dept set dname=?,loc=? where deptno=? \\\"; preparedStatement = connection.prepareStatement(sql); preparedStatement.setString(1, department); preparedStatement.setString(2, address); preparedStatement.setString(3, id); int i = preparedStatement.executeUpdate(); System.out.println(\\\"受影响的行数:\\\"+i); } catch (Exception e) { e.printStackTrace(); }finally { if (preparedStatement != null) { try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection != null) { try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } /** * 查询全部 */ public static void testSelectAll(int deptNo){ Connection connection = null; PreparedStatement preparedStatement =null; ResultSet resultSet = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); String sql = \\\"Select * from dept where deptno=?\\\"; preparedStatement = connection.prepareStatement(sql); preparedStatement.setInt(1, deptNo); resultSet = preparedStatement.executeQuery(sql); while (resultSet.next()) { int deptno = resultSet.getInt(\\\"DEPTNO\\\"); String dname = resultSet.getString(\\\"DNAME\\\"); String loc = resultSet.getString(\\\"LOC\\\"); System.out.println(\\\"[deptno:\\\"+deptno+\\\";dname\\\"+dname+\\\";loc\\\"+loc+\\\"]\\\"); } } catch (Exception e) { e.printStackTrace(); }finally { if (resultSet != null) { try { resultSet.close(); } catch (SQLException e) { e.printStackTrace(); } } if (preparedStatement != null) { try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection != null) { try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } } \"]},\"1254\":{\"h\":\"JDBC的API整理\"},\"1255\":{\"h\":\"Connection接口\",\"t\":[\"代表数据库连接\",\"方法\",\"说明\",\"void close ()\",\"立即释放此 Connection 对象的数据库和 JDBC 资源，而不是等待它们被自动释放\",\"void commit ()\",\"使所有上一次提交/回滚后进行的更改成为持久更改，并释放此 Connection 对象当前持有的所有数据库锁。\",\"Statement createStatement ()\",\"创建一个 Statement 对象来将 SQL 语句发送到数据库。\",\"CallableStatement prepareCall (String sql)\",\"创建一个 CallableStatement 对象来调用数据库存储过程。\",\"PreparedStatement prepareStatement (String sql)\",\"创建一个 PreparedStatement 对象来将参数化的 SQL 语句发送到数据库。\",\"PreparedStatement prepareStatement (String sql, int autoGeneratedKeys)\",\"创建一个默认 PreparedStatement 对象，该对象能获取自动生成的键\",\"void rollback ()\",\"取消在当前事务中进行的所有更改，并释放此 Connection 对象当前持有的所有数据库锁。\",\"void setAutoCommit (boolean autoCommit)\",\"将此连接的自动提交模式设置为给定状态。\"]},\"1256\":{\"h\":\"DriverManager类\",\"t\":[\"管理一组 JDBC 驱动程序的基本服务\",\"应用程序不再需要使用 Class.forName() 显式地加载 JDBC 驱动程序。在调用 getConnection 方法时，DriverManager 会试着从初始化时加载的那些驱动程序以及使用与当前 applet 或应用程序相同的类加载器显式加载的那些驱动程序中查找合适的驱动程序。\",\"方法\",\"说明\",\"static Connection getConnection (String url)\",\"试图建立到给定数据库 URL 的连接。\",\"static Connection getConnection (String url, Properties info)\",\"试图建立到给定数据库 URL 的连接。\",\"static Connection getConnection (String url, String user, String password)\",\"试图建立到给定数据库 URL 的连接。\"]},\"1257\":{\"h\":\"Statement接口\",\"t\":[\"用于将 SQL 语句发送到数据库中，或理解为执行sql语句\",\"有三种 Statement对象：\",\"Statement：用于执行不带参数的简单SQL语句；\",\"PreparedStatement（从 Statement 继承）：用于执行带或不带参数的预编译SQL语句；\",\"CallableStatement（从PreparedStatement 继承）：用于执行数据库存储过程的调用。\",\"方法\",\"说明\",\"ResultSet executeQuery(String sql)\",\"执行SQL查询并获取到ResultSet对象\",\"int executeUpdate(String sql)\",\"可以执行插入、删除、更新等操作，返回值是执行该操作所影响的行数\"]},\"1258\":{\"h\":\"PreparedStatement接口\",\"t\":[\"关系：public interface PreparedStatement extends Statement\",\"区别：\",\"PreparedStatment安全性高，可以避免SQL注入\",\"PreparedStatment简单不繁琐，不用进行字符串拼接\",\"PreparedStatment性能高，用在执行多个相同数据库DML操作时\"]},\"1259\":{\"h\":\"ResultSet接口\",\"t\":[\"ResultSet对象是executeQuery()方法的返回值，它被称为结果集，它代表符合SQL语句条件的所有行，并且它通过一套getXXX方法（这些get方法可以访问当前行中的不同列）提供了对这些行中数据的访问。\",\"ResultSet里的数据一行一行排列，每行有多个字段，且有一个记录指针，指针所指的数据行叫做当前数据行，我们只能来操作当前的数据行。我们如果想要取得某一条记录，就要使用ResultSet的next()方法 ,如果我们想要得到ResultSet里的所有记录，就应该使用while循环。\",\"ResultSet对象自动维护指向当前数据行的游标。每调用一次next()方法，游标向下移动一行。\",\"初始状态下记录指针指向第一条记录的前面，通过next()方法指向第一条记录。循环完毕后指向最后一条记录的后面。\",\"方法\",\"说明\",\"boolean next()\",\"将光标从当前位置向下移动一行\",\"boolean previous()\",\"游标从当前位置向上移动一行\",\"void close()\",\"关闭ResultSet 对象\",\"int getInt(int colIndex)\",\"以int形式获取结果集当前行指定列号值\",\"int getInt(String colLabel)\",\"以int形式获取结果集当前行指定列名值\",\"float getFloat(int colIndex)\",\"以float形式获取结果集当前行指定列号值\",\"Float getFloat(String colLabel)\",\"以float形式获取结果集当前行指定列名值\",\"String getString(int colIndex)\",\"以String 形式获取结果集当前行指定列号值\",\"StringgetString(String colLabel)\",\"以String形式获取结果集当前行指定列名值\"]},\"1260\":{\"h\":\"DAO\"},\"1261\":{\"h\":\"DAO模式\"},\"1262\":{\"h\":\"简介\",\"t\":[\"DAO(Data Access Object)是一个数据访问接口，数据访问：顾名思义就是与数据库打交道。夹在业务逻辑与数据库资源中间。\",\"在核心J2EE模式中是这样介绍DAO模式的：\",\"为了建立一个健壮的J2EE应用，应该将所有对数据源的访问操作抽象封装在一个公共API中。用程序设计的语言来说，就是建立一个接口，接口中定义了此应用程序中将会用到的所有事务方法。在这个应用程序中，当需要和数据源进行交互的时候则使用这个接口，并且编写一个单独的类来实现这个接口在逻辑上对应这个特定的数据存储.\",\"简单来说,就是定义一个接口,规定一些增删改查的方法,然后交给实现类去实现, 它介于数据库和业务逻辑代码之间,这样当我们需要操作数据库是,根据接口定义的API去操作数据库就可以了,每个方法都是一个原子性的操作,例如：增加、修改、删除等\"]},\"1263\":{\"h\":\"DAO模式的结构\",\"t\":[\"实体类 和数据库表格一一对应的类,单独放入一个包中,包名往往是 pojo/entity/bean,要操作的每个表格都应该有对应的实体类 emp > class Emp dept > class Dept account > class Account\",\"DAO 层 定义了对数据要执行那些操作的接口和实现类,包名往往是 dao/mapper,要操作的每个表格都应该有对应的接口和实现类 emp > interface EmpDao >EmpDaoImpl dept > interface DeptDao> DeptDaoImpl\",\"注意 : Mybatis/Spring JDBCTemplate 中,对DAO层代码进行了封装,代码编写方式会有其他变化\"]},\"1264\":{\"h\":\"创建一个DAO模式的项目\",\"t\":[\"创建项目 : 导入各个层级的接口和页面之后的项目\",\"添加jar包\",\"创建包\",\"创建实体类Dept\",\"/** * 实体类 */ public class Dept implements Serializable { private Integer deptno; private String dname; private String loc; public Dept() {} public Dept(Integer deptno, String dname, String loc) { this.deptno = deptno; this.dname = dname; this.loc = loc; } public Integer getDeptno() {return deptno;} public void setDeptno(Integer deptno) {this.deptno = deptno;} public String getDname() {return dname;} public void setDname(String dname) {this.dname = dname;} public String getLoc() {return loc;} public void setLoc(String loc) {this.loc = loc;} @Override public String toString() { return \\\"Dept{\\\" + \\\"deptno=\\\" + deptno + \\\", dname='\\\" + dname + '\\\\'' + \\\", loc='\\\" + loc + '\\\\'' + '}'; } } \",\"创建后台的接口DeptDao和实现类DeptDaoImpl\",\"/** * DAO 接口 */ public interface DeptDao { /** * 添加 Dept * @param dept * @return */ int addDept(Dept dept); /** * 删除 Dept * @param dept * @return */ int deleteDept(Dept dept); } \",\"/** * DAO 实现 */ public class DeptDaoImpl implements DeptDao { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; @Override public int addDept(Dept dept) { Connection connection = null; PreparedStatement preparedStatement = null; int rows = 0; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); String sql = \\\"insert into dept values(?,?,?)\\\"; preparedStatement = connection.prepareStatement(sql); preparedStatement.setInt(1, dept.getDeptno()); preparedStatement.setString(2, dept.getDname()); preparedStatement.setString(3, dept.getLoc()); rows = preparedStatement.executeUpdate(); } catch (Exception e) { e.printStackTrace(); }finally { if (preparedStatement != null){ try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection != null){ try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } return rows; } @Override public int deleteDept(Dept dept) { Connection connection = null; PreparedStatement preparedStatement = null; int rows = 0; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); String sql = \\\"delete from dept where deptno=? \\\"; preparedStatement = connection.prepareStatement(sql); preparedStatement.setInt(1, dept.getDeptno()); rows = preparedStatement.executeUpdate(); } catch (Exception e) { e.printStackTrace(); }finally { if (preparedStatement != null){ try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection != null){ try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } return rows; } } \",\"测试代码\",\"public class TestDemo01 { public static void main(String[] args) { DeptDao deptDao = new DeptDaoImpl(); Dept dept = new Dept(888, \\\"张三\\\", \\\"aaa\\\"); int i = deptDao.addDept(dept); System.out.println(\\\"受影响的行数:\\\"+i); Dept dept1 = new Dept(888, \\\"张三\\\", \\\"aaa\\\"); int i1 = deptDao.deleteDept(dept1); System.out.println(\\\"受影响的行数:\\\"+i1); } } \",\"我们发现,使用DAO层结构后,项目代码的层级关系更加的清楚明了. 但是在实现类中仍有大量的JDBC代码重复,我们可以进一步精简\"]},\"1265\":{\"h\":\"提取BaseDAO\"},\"1266\":{\"h\":\"抽取BaseDAO\",\"t\":[\"注意: 在查询方法时,使用了前面学到的反射\",\"public abstract class BaseDao { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; /** * 增删改 * @param sql * @param args * @return */ public int baseUpdate(String sql,Object ... args){ Connection connection = null; PreparedStatement preparedStatement = null; int rows = 0; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); preparedStatement = connection.prepareStatement(sql); for (int i = 0; i < args.length; i++) { preparedStatement.setObject(i+1, args[i]); } rows = preparedStatement.executeUpdate(); } catch (Exception e) { e.printStackTrace(); }finally { if (preparedStatement != null){ try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection != null){ try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } return rows; } /** * 查 * @param clazz 目标类的Class * @param sql 执行的SQL * @param args 参数 * @return */ public List baseQuery(Class clazz, String sql, Object ... args) { Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; List arrayList = null; try { Class.forName(driver); connection = DriverManager.getConnection(url, name, password); preparedStatement = connection.prepareStatement(sql); for (int i = 0; i < args.length; i++) { preparedStatement.setObject(i+1, args[i]); } resultSet = preparedStatement.executeQuery(); arrayList = new ArrayList(); Field[] fields = clazz.getDeclaredFields();//获取全部属性 while (resultSet.next()) { Object obj = clazz.newInstance();//创建对象 for (Field field : fields) { String name = field.getName();//获取字段的名字 field.setAccessible(true);//取消访问权限 Object data = resultSet.getObject(name); field.set(obj,data); } arrayList.add(obj); } } catch (Exception e) { e.printStackTrace(); } finally { if (resultSet == null) { try { resultSet.close(); } catch (SQLException e) { e.printStackTrace(); } } if (preparedStatement == null) { try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } if (connection == null) { try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } return arrayList; } } \"]},\"1267\":{\"h\":\"重写实现类\",\"t\":[\"public class DeptDaoImpl2 extends BaseDao implements DeptDao { @Override public int addDept(Dept dept) { String sql = \\\"insert into dept values(?,?,?)\\\"; return baseUpdate(sql,dept.getDeptno(),dept.getDname(),dept.getLoc()); } @Override public int deleteDept(Dept dept) { String sql = \\\"delete from dept where deptno=? \\\"; return baseUpdate(sql,dept.getDeptno()); } @Override public List<Dept> selectDepts(Dept dept) { String sql = \\\"select * from dept where deptno=? \\\"; return baseQuery(dept.getClass(),sql,dept.getDeptno()); } } \"]},\"1268\":{\"h\":\"连接池的使用\"},\"1269\":{\"h\":\"为什么要使用连接池\"},\"1270\":{\"h\":\"建立数据库连接的两种方式\"},\"1271\":{\"h\":\"传统连接方式\",\"t\":[\"首先调用Class.forName()方法加载数据库驱动，然后调用DriverManager.getConnection()方法建立连接.\",\"存在的问题 : Connection对象在每次执行DML和DQL的过程中都要创建一次,DML和DQL执行完毕后,connection对象都会被销毁. connection对象是可以反复使用的,没有必要每次都创建新的.该对象的创建和销毁都是比较消耗系统资源的,如何实现connection对象的反复使用呢?使用连接池技术实现.\"]},\"1272\":{\"h\":\"连接池连接方式\",\"t\":[\"连接池解决方案是在应用程序启动时就预先建立多个数据库连接对象,然后将连接对象保存到连接池中。当客户请求到来时,从池中取出一个连接对象为客户服务。当请求完成时,客户程序调用close()方法,将连接对象放回池中.对于多于连接池中连接数的请求，排队等待。应用程序还可根据连接池中连接的使用率，动态增加或减少池中的连接数。\",\"优势 : 预先准备一些链接对象,放入连接池中,当多个线程并发执行时,可以避免短时间内一次性大量创建链接对象,减少计算机单位时间内的运算压力,提高程序的响应速度. 实现链接对象的反复使用,可以大大减少链接对象的创建次数,减少资源的消耗\"]},\"1273\":{\"h\":\"具体实现\"},\"1274\":{\"h\":\"创建连接池文件\",\"t\":[\"package com.meturing.dao; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.LinkedList; public class MyConnectionPool { private static String driver = \\\"com.mysql.cj.jdbc.Driver\\\"; private static String url = \\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private static String name =\\\"root\\\"; private static String password = \\\"root\\\"; private static int initSize=5; private static int maxSize=10; private static LinkedList<Connection> pool; //优先加载驱动 static { try { Class.forName(driver); } catch (ClassNotFoundException e) { e.printStackTrace(); } //初始化Pool pool = new LinkedList<Connection>(); // 初始化连接池 for (int i = 0; i < initSize; i++) { Connection connection = initConnection(); if (connection!=null){ pool.add(connection); System.out.println(\\\"初始化连接\\\"+connection.hashCode()+\\\"放入连接池\\\"); } } } /** * 私有的初始化链接方法 * @return */ private static Connection initConnection(){ try { return DriverManager.getConnection(url, name, password); } catch (SQLException e) { e.printStackTrace(); } return null; } /** * 公共的获取链接方法 * @return */ public static Connection getConnection(){ Connection connection =null; if (pool.size()>0){ connection = pool.removeFirst();//从池中拿出第一个 System.out.println(\\\"取出连接:\\\"+connection.hashCode()); }else { connection = initConnection(); System.out.println(\\\"创建连接:\\\"+connection.hashCode()); } return connection; } /** * 公共的向连接池中归还链接 * @param connection */ public static void returnConnection(Connection connection){ if (connection!=null){ try { if (!connection.isClosed()) {//判断链接是否关闭 if (pool.size()<maxSize) {//判断Pool的大小是否超过上限 connection.setAutoCommit(true);//调整链接为自动提交 System.out.println(\\\"设置连接:\\\"+connection.hashCode()+\\\"自动提交为true\\\"); pool.addLast(connection); System.out.println(\\\"连接池未满,归还连接:\\\"+connection.hashCode()); }else { //当前连接池超过设定最大上限,直接关闭链接 无需归还 try { connection.close(); System.out.println(\\\"连接池满了,关闭连接:\\\"+connection.hashCode()); } catch (SQLException e) { e.printStackTrace(); } } }else { System.out.println(\\\"链接已经关闭,无需归还!\\\"); } } catch (SQLException e) { e.printStackTrace(); } }else { System.out.println(\\\"传入的连接为null,不可归还\\\"); } } } \"]},\"1275\":{\"h\":\"修改BaseDAO\",\"t\":[\"package com.meturing.dao; import java.lang.reflect.Field; import java.sql.*; import java.util.ArrayList; import java.util.List; public abstract class BaseDao { /** * 增删改 * @param sql * @param args * @return */ public int baseUpdate(String sql,Object ... args){ Connection connection = null; PreparedStatement preparedStatement = null; int rows = 0; try { connection = MyConnectionPool.getConnection();//从连接池中获取链接 preparedStatement = connection.prepareStatement(sql); for (int i = 0; i < args.length; i++) { preparedStatement.setObject(i+1, args[i]); } rows = preparedStatement.executeUpdate(); } catch (Exception e) { e.printStackTrace(); }finally { if (preparedStatement != null){ try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } MyConnectionPool.returnConnection(connection);//将链接归还给连接池 } return rows; } /** * 查 * @param clazz 目标类的Class * @param sql 执行的SQL * @param args 参数 * @return */ public List baseQuery(Class clazz, String sql, Object ... args) { Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; List arrayList = null; try { connection = MyConnectionPool.getConnection();//从连接池中获取链接 preparedStatement = connection.prepareStatement(sql); for (int i = 0; i < args.length; i++) { preparedStatement.setObject(i+1, args[i]); } resultSet = preparedStatement.executeQuery(); arrayList = new ArrayList(); Field[] fields = clazz.getDeclaredFields();//获取全部属性 while (resultSet.next()) { Object obj = clazz.newInstance();//创建对象 for (Field field : fields) { String name = field.getName();//获取字段的名字 field.setAccessible(true);//取消访问权限 Object data = resultSet.getObject(name); field.set(obj,data); } arrayList.add(obj); } } catch (Exception e) { e.printStackTrace(); } finally { if (resultSet == null) { try { resultSet.close(); } catch (SQLException e) { e.printStackTrace(); } } if (preparedStatement == null) { try { preparedStatement.close(); } catch (SQLException e) { e.printStackTrace(); } } MyConnectionPool.returnConnection(connection);//将链接归还给连接池 } return arrayList; } } \"]},\"1276\":{\"h\":\"效果\"},\"1277\":{\"h\":\"继续优化\",\"t\":[\"我们发现仍有大量的配置化的参数在我们的逻辑代码中,这样是不友好的.不方便我们对于项目的管理与维护\",\"我们尝试使用配置文件来管理参数\"]},\"1278\":{\"h\":\"创建配置文件\",\"t\":[\"driver=com.mysql.cj.jdbc.Driver url=jdbc:mysql://192.168.1.188:3306/test?useSSL=false&autoReconnect=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai name=root password=root initSize=5 maxSize=10 \"]},\"1279\":{\"h\":\"创建PropertiesUtil\",\"t\":[\"public class PropertiesUtil { private Properties properties; //初始化 public PropertiesUtil(String path){ properties=new Properties(); InputStream inputStream = this.getClass().getResourceAsStream(path); try { properties.load(inputStream); } catch (IOException e) { e.printStackTrace(); } } //获取指定Key的值 public String getProperties(String key){ return properties.getProperty(key); } } \"]},\"1280\":{\"h\":\"修改连接池\",\"t\":[\"public class MyConnectionPool { private static String driver; private static String url; private static String name; private static String password; private static int initSize; private static int maxSize; private static LinkedList<Connection> pool; //优先加载驱动 static { //初始化参数 PropertiesUtil propertiesUtil=new PropertiesUtil(\\\"/jdbc.properties\\\"); driver=propertiesUtil.getProperties(\\\"driver\\\"); url=propertiesUtil.getProperties(\\\"url\\\"); name=propertiesUtil.getProperties(\\\"name\\\"); password=propertiesUtil.getProperties(\\\"password\\\"); initSize=Integer.parseInt(propertiesUtil.getProperties(\\\"initSize\\\")); maxSize=Integer.parseInt(propertiesUtil.getProperties(\\\"maxSize\\\")); try { Class.forName(driver); } catch (ClassNotFoundException e) { e.printStackTrace(); } //初始化Pool pool = new LinkedList<Connection>(); // 初始化连接池 for (int i = 0; i < initSize; i++) { Connection connection = initConnection(); if (connection!=null){ pool.add(connection); System.out.println(\\\"初始化连接\\\"+connection.hashCode()+\\\"放入连接池\\\"); } } } /** * 私有的初始化链接方法 * @return */ private static Connection initConnection(){ try { return DriverManager.getConnection(url, name, password); } catch (SQLException e) { e.printStackTrace(); } return null; } /** * 公共的获取链接方法 * @return */ public static Connection getConnection(){ Connection connection =null; if (pool.size()>0){ connection = pool.removeFirst();//从池中拿出第一个 System.out.println(\\\"取出连接:\\\"+connection.hashCode()); }else { connection = initConnection(); System.out.println(\\\"创建连接:\\\"+connection.hashCode()); } return connection; } /** * 公共的向连接池中归还链接 * @param connection */ public static void returnConnection(Connection connection){ if (connection!=null){ try { if (!connection.isClosed()) {//判断链接是否关闭 if (pool.size()<maxSize) {//判断Pool的大小是否超过上限 connection.setAutoCommit(true);//调整链接为自动提交 System.out.println(\\\"设置连接:\\\"+connection.hashCode()+\\\"自动提交为true\\\"); pool.addLast(connection); System.out.println(\\\"连接池未满,归还连接:\\\"+connection.hashCode()); }else { //当前连接池超过设定最大上限,直接关闭链接 无需归还 try { connection.close(); System.out.println(\\\"连接池满了,关闭连接:\\\"+connection.hashCode()); } catch (SQLException e) { e.printStackTrace(); } } }else { System.out.println(\\\"链接已经关闭,无需归还!\\\"); } } catch (SQLException e) { e.printStackTrace(); } }else { System.out.println(\\\"传入的连接为null,不可归还\\\"); } } } \"]},\"1281\":{\"h\":\"Log4j日志框架\"},\"1282\":{\"h\":\"什么是日志log\",\"t\":[\"异常信息 登录成功失败的信息 其他重要操作的信息\",\"日志可以记录程序的运行状态,运行信息,用户的一些常用操作.日志可以帮助我们分析程序的运行状态,帮我们分析用户的操作习惯,进而对程序进行改进\"]},\"1283\":{\"h\":\"如何记录日志\",\"t\":[\"直接打印 : System.out.println(.....) e.printStackTrace();\",\"缺点：不是保存到文件，不能长久存储\",\"IO流 : 将System.out.println(.....) e.printStackTrace();写入文件 \",\"缺点 : 操作繁琐,IO流操作容易阻塞线程,日志没有等级,日志的格式不能很好的定制,要想实行编程复杂\",\"使用现成的日志框架，比如log4j \",\"优点 : 1 长久保存 2 有等级3 格式可以很好的定制 4 代码编写简单\"]},\"1284\":{\"h\":\"log4j日志的级别\",\"t\":[\"FATAL： 指出现非常严重的错误事件，这些错误可能导致应用程序异常中止ERROR： 指虽有错误，但仍允许应用程序继续运行WARN： 指运行环境潜藏着危害INFO： 指报告信息，这些信息在粗粒度级别上突出显示应用程序的进程DEBUG： 指细粒度信息事件，对于应用程序的调试是最有用的\"]},\"1285\":{\"h\":\"使用log4j记录日志\",\"t\":[\"加入jar包 log4j-1.2.8.jar\",\"加入属性文件 src 下 log4j.properties\",\"log4j.rootLogger=error,logfile log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.Target=System.err log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout log4j.appender.logfile=org.apache.log4j.FileAppender log4j.appender.logfile.File=d:/meturing.log log4j.appender.logfile.layout=org.apache.log4j.PatternLayout log4j.appender.logfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %l %F %p %m%n \",\"通过属性文件理解log4j的主要API :\",\"Appender 日志目的地 :ConsoleAppender FileAppender\",\"Layout 日志格式化器 ：SimpleLayout PatternLayout\"]},\"1286\":{\"h\":\"代码中记录日志\",\"t\":[\"//创建一个日志记录器 private static final Logger logger = Logger.getLogger(DBUtil.class.getName()); //在合适的地方添加日志 logger.info(\\\"正确的读取了属性文件：\\\"+prop); logger.debug(\\\"正确的关闭了结果集\\\"); logger.error(\\\"DML操作错误：\\\"+e); \"]},\"1287\":{\"h\":\"理解日志格式化字符的含义\",\"t\":[\"%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。 %d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。 %r：输出自应用程序启动到输出该log信息耗费的毫秒数。 %t：输出产生该日志事件的线程名。 %l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如 test.TestLog4j.main(TestLog4j.java:10)。 %c：输出日志信息所属的类目，通常就是所在类的全名。 %M：输出产生日志信息的方法名。 %F：输出日志消息产生时所在的文件名称。 %L：输出代码中的行号。 %m：输出代码中指定的具体日志信息。 %n：输出一个回车换行符，Windows平台为\\\"rn\\\"，Unix平台为\\\"n\\\"。 %x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。 %%：输出一个\\\"%\\\"字符。 \"]},\"1288\":{\"h\":\"加入到连接池中\",\"t\":[\"public class MyConnectionPool { private static String driver; private static String url; private static String user; private static String password; private static int initSize; private static int maxSize; private static Logger logger; private static LinkedList<Connection> pool; static{ logger=Logger.getLogger(MyConnectionPool.class); // 初始化参数 PropertiesUtil propertiesUtil=new PropertiesUtil(\\\"/jdbc.properties\\\"); driver=propertiesUtil.getProperties(\\\"driver\\\"); url=propertiesUtil.getProperties(\\\"url\\\"); user=propertiesUtil.getProperties(\\\"user\\\"); password=propertiesUtil.getProperties(\\\"password\\\"); initSize=Integer.parseInt(propertiesUtil.getProperties(\\\"initSize\\\")); maxSize=Integer.parseInt(propertiesUtil.getProperties(\\\"maxSize\\\")); // 加载驱动 try { Class.forName(driver); } catch (ClassNotFoundException e) { logger.fatal(\\\"找不到数据库驱动类\\\"+driver,e); } // 初始化pool pool=new LinkedList<Connection>(); // 创建5个链接对象 for (int i = 0; i <initSize ; i++) { Connection connection = initConnection(); if(null != connection){ pool.add(connection); logger.info(\\\"初始化连接\\\"+connection.hashCode()+\\\"放入连接池\\\"); } } } // 私有的初始化一个链接对象的方法 private static Connection initConnection(){ try { return DriverManager.getConnection(url,user,password); } catch (SQLException e) { logger.fatal(\\\"初始化连接异常\\\",e); } return null; } // 共有的向外界提供链接对象的 public static Connection getConnection(){ Connection connection =null; if(pool.size()>0){ connection= pool.removeFirst();// 移除集合中的第一个元素 logger.info(\\\"连接池中还有连接:\\\"+connection.hashCode()); }else{ connection = initConnection(); logger.info(\\\"连接池空,创建新连接:\\\"+connection.hashCode()); } return connection; } // 共有的向连接池归还连接对象的方法 public static void returnConnection(Connection connection){ if(null != connection){ try { if(!connection.isClosed()){ if(pool.size()<maxSize){ try { connection.setAutoCommit(true);// 调整事务状态 logger.debug(\\\"设置连接:\\\"+connection.hashCode()+\\\"自动提交为true\\\"); } catch (SQLException e) { e.printStackTrace(); } pool.addLast(connection); logger.info(\\\"连接池未满,归还连接:\\\"+connection.hashCode()); }else{ try { connection.close(); logger.info(\\\"连接池满了,关闭连接:\\\"+connection.hashCode()); } catch (SQLException e) { e.printStackTrace(); } } }else{ logger.info(\\\"连接:\\\"+connection.hashCode()+\\\"已经关闭,无需归还\\\"); } } catch (SQLException e) { e.printStackTrace(); } }else{ logger.warn(\\\"传入的连接为null,不可归还\\\"); } } } \"]},\"1289\":{\"h\":\"HTML标签\"},\"1290\":{\"h\":\"html标签\",\"t\":[\"定义 HTML 文档，这个元素我们浏览器看到后就明白这是个HTML文档了，所以你的其它元素要包裹在它里面，标签限定了文档的开始点和结束点，在它们之间是文档的头部和主体。\"]},\"1291\":{\"h\":\"head 标签\"},\"1292\":{\"h\":\"说明\",\"t\":[\"head标签用于定义文档的头部，它是所有头部元素的容器。<head> 中的元素可以引用脚本、指示浏览器在哪里找到样式表。文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。\",\"下面这些标签可用在 head 部分：<title>、<meta>、<link>、<style>、 <script>、 <base>。\",\"应该把 <head> 标签放在文档的开始处，紧跟在 <html> 后面，并处于 <body> 标签之前。 文档的头部经常会包含一些 <meta> 标签，用来告诉浏览器关于文档的附加信息。\"]},\"1293\":{\"h\":\"标签中可用标签\",\"t\":[\" <html> <!-- 这是一个注释，注释的快捷键是ctrl+shift+/--> <!-- head标签中：放入：页面的配置信息 head标签中可以加入： <title>、<meta>、<link>、<style>、 <script>、 <base>。 --> <head> <!--页面标题--> <title>百度一下，你就知道</title> <!--设置页面的编码，防止乱码现象 利用meta标签， charset=\\\"utf-8\\\" 这是属性，以键值对的形式给出 k=v a=b 告诉浏览器用utf-8来解析这个html文档 --> <meta charset=\\\"utf-8\\\" /><!--简写--> <!--繁写形式：（了解）--> <!--<meta http-equiv=\\\"content-type\\\" content=\\\"text/html;charset=utf-8\\\" />--> <!--页面刷新效果--> <!--<meta http-equiv=\\\"refresh\\\" content=\\\"3;https://www.baidu.com\\\" />--> <!--页面作者--> <meta name=\\\"author\\\" content=\\\"xxxx@qq.com\\\" /> <!--设置页面搜索的关键字--> <meta name=\\\"keywords\\\" content=\\\"百度;百度搜索;搜索引擎\\\" /> <!--页面描述--> <meta name=\\\"description\\\" content=\\\"百度首页\\\" /> <!--link标签引入外部资源--> <link rel=\\\"shortcut icon\\\" href=\\\"https://www.baidu.com/favicon.ico\\\" type=\\\"image/x-icon\\\" /> </head> <!-- body标签中：放入：页面展示的内容 --> <body> this is a html..你好 </body> </html> \"]},\"1294\":{\"h\":\"body 标签中可用标签\"},\"1295\":{\"h\":\"说明\",\"t\":[\"body 元素是定义文档的主体。body 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。）body是用在网页中的一种HTML标签，标签是用在网页中的一种HTML标签，表示网页的主体部分，也就是用户可以看到的内容，可以包含文本、图片、音频、视频等各种内容！\"]},\"1296\":{\"h\":\"标签中可用标签\"},\"1297\":{\"h\":\"文本标签\"},\"1298\":{\"h\":\"普通文本\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>文本标签</title> </head> <body> <!-- 下面的文字就是普通的文本 文本编辑器中的任何效果：比如空格，换行 都不影响页面，页面想要实现效果 必须通过标签来实现 --> 媒体：为人父母， 要不要“持证上岗”？ 媒体：为人父母，要不要“持证上岗”？ 媒体：为人父母，要不要“持证上岗”？ 媒体：为人父母，要不要“持证上岗”？ </body> </html> \"]},\"1299\":{\"h\":\"标题标签\",\"t\":[\"<h1></h1>~<h7></h7>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>文本标签</title> </head> <body> <!-- 标题标签 h1-h6 字号逐渐变小，每个标题独占一行，自带换行效果 h7之后都属于无效标签，但是浏览器也不会报错，而是以普通文本的形式进行展现 --> <h1>媒体：为人父母，要不要“持证上岗”？</h1> <h2>媒体：为人父母，要不要“持证上岗”？</h2> <h3>媒体：为人父母，要不要“持证上岗”？</h3> <h4>媒体：为人父母，要不要“持证上岗”？</h4> <h5>媒体：为人父母，要不要“持证上岗”？</h5> <h6>媒体：为人父母，要不要“持证上岗”？</h6> <h7>媒体：为人父母，要不要“持证上岗”？</h7> <h8>媒体：为人父母，要不要“持证上岗”？</h8> </body> </html> \"]},\"1300\":{\"h\":\"横线标签\",\"t\":[\"<hr/>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>文本标签</title> </head> <body> <!-- 横线标签 width:设置宽度 300px ：固定宽度 30%：页面宽度的百分比，会随着页面宽度的变化而变化 align：设置位置 left ,center,right 默认不写的话就是center居中效果 --> <hr width=\\\"300px\\\" align=\\\"center\\\" /> <hr width=\\\"30%\\\" align=\\\"center\\\" /> </body> </html> \"]},\"1301\":{\"h\":\"段落标签\",\"t\":[\"<p></p>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>文本标签</title> </head> <body> <!-- 段落标签： 段落效果：段落中文字自动换行，段落和段落之间有空行 --> <p>&nbsp;&nbsp;&nbsp;&nbsp;5月&emsp;26日，“建议父母持合格&lt;父母证&gt;上岗&copy;”冲上微博热搜，迅速引发热议。在正在召开的全国两会上，全国政协委员许洪玲建议在社区举办家长课堂，建立“家长教育指导工作室”。针对准备入小学的家长开展相关课程教育，颁发“合格父母”上岗证随学生档案入学。5月26日，“建议父母持合格父母证上岗”冲上微博热搜，迅速引发热议。在正在召开的全国两会上，全国政协委员许洪玲建议在社区举办家长课堂，建立“家长教育指导工作室”。针对准备入小学的家长开展相关课程教育，颁发“合格父母”上岗证随学生档案入学。5月26日，“建议父母持合格父母证上岗”冲上微博热搜，迅速引发热议。在正在召开的全国两会上，全国政协委员许洪玲建议在社区举办家长课堂，建立“家长教育指导工作室”。针对准备入小学的家长开展相关课程教育，颁发“合格父母”上岗证随学生档案入学。 </p> <p>5月26日，“建议父母持合格父母证上岗”冲上微博热搜，迅速引发热议。在正在召开的全国两会上，全国政协委员许洪玲建议在社区举办家长课堂，建立“家长教育指导工作室”。针对准备入小学的家长开展相关课程教育，颁发“合格父母”上岗证随学生档案入学。5月26日，“建议父母持合格父母证上岗”冲上微博热搜，迅速引发热议。在正在召开的全国两会上，全国政协委员许洪玲建议在社区举办家长课堂，建立“家长教育指导工作室”。针对准备入小学的家长开展相关课程教育，颁发“合格父母”上岗证随学生档案入学。5月26日，“建议父母持合格父母证上岗”冲上微博热搜，迅速引发热议。在正在召开的全国两会上，全国政协委员许洪玲建议在社区举办家长课堂，建立“家长教育指导工作室”。针对准备入小学的家长开展相关课程教育，颁发“合格父母”上岗证随学生档案入学。 </p> <p>5月26日，“建议父母持合格父母证上岗”冲上微博热搜，迅速引发热议。在正在召开的全国两会上，全国政协委员许洪玲建议在社区举办家长课堂，建立“家长教育指导工作室”。针对准备入小学的家长开展相关课程教育，颁发“合格父母”上岗证随学生档案入学。5月26日，“建议父母持合格父母证上岗”冲上微博热搜，迅速引发热议。在正在召开的全国两会上，全国政协委员许洪玲建议在社区举办家长课堂，建立“家长教育指导工作室”。针对准备入小学的家长开展相关课程教育，颁发“合格父母”上岗证随学生档案入学。5月26日，“建议父母持合格父母证上岗”冲上微博热搜，迅速引发热议。在正在召开的全国两会上，全国政协委员许洪玲建议在社区举办家长课堂，建立“家长教育指导工作室”。针对准备入小学的家长开展相关课程教育，颁发“合格父母”上岗证随学生档案入学。 </p> </body> </html> \"]},\"1302\":{\"h\":\"加粗/倾斜/下划线\",\"t\":[\"<i></i><u></u><b></b>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>文本标签</title> </head> <body> <!--加粗倾斜下划线--> <b>加粗</b> <i>倾斜</i> <u>下划线</u> <i><u><b>加粗倾斜下划线</b></u></i> </body> </html> \"]},\"1303\":{\"h\":\"删除线\",\"t\":[\"<del></del>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>文本标签</title> </head> <body> <!--删除线--> <del>你好 你不好</del> </body> </html> \"]},\"1304\":{\"h\":\"预编译标签\",\"t\":[\"<pre></pre>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>文本标签</title> </head> <body> <!--预编译标签：在页面上显示原样效果--> <pre> public static void main(String[] args){ System.out.println(\\\"hello world....\\\"); } </pre> </body> </html> \"]},\"1305\":{\"h\":\"换行\",\"t\":[\"<br />\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>文本标签</title> </head> <body> <!--换行--> 5月26日，“建议父母持合格父母证上岗”冲上微博<br />热搜，迅速引发热议。在正在召开的全国两会上，全国政 </body> </html> \"]},\"1306\":{\"h\":\"字体标签\",\"t\":[\"<font></font>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>文本标签</title> </head> <body> <!--字体标签--> <font color=\\\"#397655\\\" size=\\\"7\\\" face=\\\"萝莉体 第二版\\\">建议父母持合格父母证上岗</font> </body> </html> \"]},\"1307\":{\"h\":\"特殊字符\"},\"1308\":{\"h\":\"多媒体标签\"},\"1309\":{\"h\":\"图片\",\"t\":[\"<img />\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--图片 src:引入图片的位置 引入本地资源 引入网络资源 width:设置宽度 height:设置高度 注意:一般高度和宽度只设置一个即可，另一个会按照比例自动适应 title:鼠标悬浮在图片上的时候的提示语，默认情况下（没有设置alt属性） 图片如果加载失败那么提示语也是title的内容 alt:图片加载失败的提示语 --> <img src=\\\"img/ss6.jpg\\\" width=\\\"300px\\\" title=\\\"这是一个美女小姐姐\\\" alt=\\\"图片加载失败\\\" /> <img src=\\\"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1833909874,761626004&fm=26&gp=0.jpg\\\" /> </body> </html> \"]},\"1310\":{\"h\":\"音频视频\",\"t\":[\"<embed />\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--音频--> <embed src=\\\"music/我要你.mp3\\\"></embed> <br /> <!--视频--> <embed src=\\\"video/周杰伦 - 说好的幸福呢.mp4\\\" width=\\\"500px\\\" height=\\\"500px\\\"></embed> <embed src=\\\"//player.video.iqiyi.com/38913f9ed7358c0933e82a03d9b26ec1/0/0/v_19rv8qeokk.swf-albumId=9194699400-tvId=9194699400-isPurchase=0-cnId=undefined\\\" allowFullScreen=\\\"true\\\" quality=\\\"high\\\" width=\\\"480\\\" height=\\\"350\\\" align=\\\"middle\\\" allowScriptAccess=\\\"always\\\" type=\\\"application/x-shockwave-flash\\\"></embed> </body> </html> \"]},\"1311\":{\"h\":\"超链接标签\"},\"1312\":{\"h\":\"超链接标签\",\"t\":[\"<a href=\\\"\\\"></a>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--超链接标签：作用：实现页面的跳转功能 href:控制跳转的目标位置 target:_self 在自身页面打开 （默认效果也是在自身页面打开） _blank 在空白页面打开 --> <a href=\\\"文本标签.html\\\">这是一个超链接01</a> <!--跳转到本地资源--> <a href=\\\"\\\">这是一个超链接02</a> <!--跳转到自身页面--> <a href=\\\"abc\\\">这是一个超链接03</a> <!--跳转的目标找不到，提示找不到资源--> <a href=\\\"https://www.baidu.com\\\" target=\\\"_self\\\">这是一个超链接04</a> <!--跳转到网络资源--> <a href=\\\"https://www.baidu.com\\\" target=\\\"_blank\\\">这是一个超链接05</a> <!--跳转到网络资源--> <a href=\\\"https://www.baidu.com\\\" target=\\\"_blank\\\"><img src=\\\"img/ss.jpg\\\" /></a> </body> </html> \"]},\"1313\":{\"h\":\"设置锚点\"},\"1314\":{\"h\":\"当前页面锚点跳转\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <a name=\\\"1F\\\"></a> <h1>手机</h1> <p>华为p40</p> <p>华为p40</p> <p>华为p40</p> <a name=\\\"2F\\\"></a> <h1>化妆品</h1> <p>大宝</p> <p>大宝</p> <p>大宝</p> <a name=\\\"3F\\\"></a> <h1>母婴产品</h1> <p>奶粉</p> <p>奶粉</p> <p>奶粉</p> <a name=\\\"4F\\\"></a> <h1>图书</h1> <p>thinking in java</p> <p>thinking in java</p> <p>thinking in java</p> <a href=\\\"#1F\\\">手机</a> <a href=\\\"#2F\\\">化妆品</a> <a href=\\\"#3F\\\">母婴产品</a> <a href=\\\"#4F\\\">书籍</a> </body> </html> \"]},\"1315\":{\"h\":\"其他页面锚点跳转\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <a href=\\\"设置锚点.html#3F\\\">超链接</a> </body> </html> \"]},\"1316\":{\"h\":\"列表标签\"},\"1317\":{\"h\":\"无序列表\",\"t\":[\"<ul><li></li></ul>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--无序列表: type:可以设置列表前图标的样式 type=\\\"square\\\" 如果想要更换图标样式，需要借助css技术： style=\\\"list-style:url(img/act.jpg) ;\\\" --> <h1>起床以后需要做的事</h1> <ul type=\\\"square\\\"> <li>睁眼</li> <li>穿衣服</li> <li>上厕所</li> <li>吃早饭</li> <li>洗漱</li> <li>出门</li> </ul> <!--有序列表: type:可以设置列表的标号：1,a,A,i,I start:设置起始标号 --> <h1>学习java的顺序</h1> <ol type=\\\"A\\\" start=\\\"3\\\"> <li>JAVASE</li> <li>ORACLE</li> <li>MYSQL</li> <li>HTML</li> <li>CSS</li> <li>JS</li> </ol> </body> </html \"]},\"1318\":{\"h\":\"有序列表\",\"t\":[\"<ol><li></li></ol>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--有序列表: type:可以设置列表的标号：1,a,A,i,I start:设置起始标号 --> <h1>学习java的顺序</h1> <ol type=\\\"A\\\" start=\\\"3\\\"> <li>JAVASE</li> <li>ORACLE</li> <li>MYSQL</li> <li>HTML</li> <li>CSS</li> <li>JS</li> </ol> </body> </html \"]},\"1319\":{\"h\":\"表格标签\",\"t\":[\"应用场景：在页面布局很规整的时候，可能利用的就是表格。 合并原理：\",\"表格 : <table><tr><th></th></tr><tr><td></td></tr></table>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--表格：4行4列 table:表格 tr:行 td:单元格 th:特殊单元格：表头效果：加粗，居中 默认情况下表格是没有边框的，通过属性来增加表框： border:设置边框大小 cellspacing：设置单元格和边框之间的空隙 align=\\\"center\\\" 设置居中 background 设置背景图片 background=\\\"img/ss.jpg\\\" bgcolor :设置背景颜色 rowspan:行合并 colspan：列合并 --> <table border=\\\"1px\\\" cellspacing=\\\"0px\\\" width=\\\"400px\\\" height=\\\"300px\\\" bgcolor=\\\"darkseagreen\\\"> <tr bgcolor=\\\"bisque\\\"> <th>学号</th> <th>姓名</th> <th>年纪</th> <th>成绩</th> </tr> <tr> <td align=\\\"center\\\">1001</td> <td>丽丽</td> <td>19</td> <td rowspan=\\\"3\\\">90.5</td> </tr> <tr> <td colspan=\\\"2\\\" align=\\\"center\\\">2006</td> <td>30</td> </tr> <tr> <td>3007</td> <td>小明</td> <td>18</td> </tr> </table> </body> </html> \"]},\"1320\":{\"h\":\"框架\",\"t\":[\"应用场景：内嵌框架是用于在网页中嵌入一个网页并让它在网页中显示.\"]},\"1321\":{\"h\":\"内嵌框架\",\"t\":[\" <iframe src=\\\" URL \\\"></iframe>\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <iframe src=\\\"书籍导航页面.html\\\" height=\\\"700px\\\" width=\\\"30%\\\"></iframe> <!--内嵌框架--> <iframe name=\\\"iframe_my\\\" width=\\\"67%\\\" height=\\\"700px\\\" src=\\\"main.html\\\"></iframe> </body> </html> \"]},\"1322\":{\"h\":\"框架集合\",\"t\":[\"<frameset></frameset>\",\"注意 : 和body是并列的概念，不要将框架集合放入body中\",\"frameset 元素可定义一个框架集。它被用来组织多个窗口（框架）。每个框架存有独立的文档。在其最简单的应用中，frameset 元素仅仅会规定在框架集中存在多少列或多少行。您必须使用 cols 或 rows 属性。\",\"里面如果只有一个框架用frame标签 ,如果多个框架用frameset标签用cols 或 rows进行行，列的切割\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <!--框架集合：和body是并列的概念，不要将框架集合放入body中--> <frameset rows=\\\"20%,*,30%\\\"> <frame /> <frameset cols=\\\"30%,40%,*\\\"> <frame /> <frame src=\\\"index.html\\\" /> <frame /> </frameset> <frameset cols=\\\"50%,*\\\"> <frame /> <frame /> </frameset> </frameset> </html> \"]},\"1323\":{\"h\":\"初识HTML\"},\"1324\":{\"h\":\"网络传输的三大基石\",\"t\":[\"三大基石: URL ,HTML协议, HTML\",\"URL 在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫URL（Uniform Resource Locator,统一资源定位符），它是WWW的统一资源定位标志，就是指网络地址。 \",\"HTTP协议 http是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII码形式给出；而消息内容则具有一个类似MIME的格式。这个简单模型是早期Web成功的有功之臣，因为它使得开发和部署是那么的直截了当。\",\"HTML HTML称为超文本标记语言。\"]},\"1325\":{\"h\":\"什么是HTML\",\"t\":[\"HTML 指的是 超文本标记语言: HyperText Markup Language \",\"超文本: 比普通文本更加厉害标记: 标签<html> <body> <head> 由尖括号包围起来的关键词语言：HTML是一个描述网页的语言\",\"作用 : 学习HTML就是学习各种各样的标签，然后组成一个页面，这个页面可以被浏览器解析，解析完以后可以在浏览器中将页面进行展示。\"]},\"1326\":{\"h\":\"HTML的标准结构\",\"t\":[\"<html> <head></head> <body> this is my first html.... </body> </html> \"]},\"1327\":{\"h\":\"安装开发工具 HBuilder\",\"t\":[\"官网: https://www.dcloud.io/hbuilderx.html\"]},\"1328\":{\"h\":\"from表单\"},\"1329\":{\"h\":\"概述\",\"t\":[\"表单在 Web 网页中用来给访问者填写信息，从而能采集客户端信息，使网页具有交互的功能。一般是将表单设计在一个Html 文档中，当用户填写完信息后做提交(submit)操作，于是表单的内容就从客户端的浏览器传送到服务器上，经过服务器上程序处理后，再将用户所需信息传送回客户端的浏览器上，这样网页就具有了交互性。这里我们只讲怎样使用Html 标志来设计表单。\",\"所有的用户输入内容的地方都用表单来写，如登录注册、搜索框。\",\"一个表单一般应该包含用户填写信息的输入框,提交按钮等，这些输入框,按钮叫做控件,表单很像容器,它能够容纳各种各样的控件。\"]},\"1330\":{\"h\":\"语法\",\"t\":[\"<form action＝\\\"url\\\" method=get|post name=\\\"myform\\\" ></form> -name：表单提交时的名称 -action：提交到的地址 -method：提交方式，有get和post两种，默认为get \",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--定义form表单:form表单会采集包含的有效数据，提交到后端，进行交互--> <!-- 【1】action属性 地址栏信息：http://127.0.0.1:8020/Form%E8%A1%A8%E5%8D%95/aaa?username=nana&pwd=123123 ?之前是提交的资源的目标地址 ?之后是提交的具体的数据 http ： 信息交互遵照协议 http协议 127.0.0.1 ：代表本机的IP地址 8020 ：Hbuilder内置服务器的端口号 Form%E8%A1%A8%E5%8D%95：指的是你的项目名字：Form表单 PS：浏览器的地址栏是不支持中文的，都会转成编码传送，如果你在地址栏看到中文，只是当前的那个浏览器给你一个友好的显示 PS:可以使用在线解析工具查看：urlencode aaa:目标资源 --》去当前项目下找aaa了 ?后的内容： username=nana&pwd=123123 我们写的文本框，密码框等必须要加入一个属性：name 然后name属性和具体录入的信息会拼成一个键值对的形式 多个键值对之间 ，用&符号进行拼接 PS：只有放在form表单中的内容才会被收集并提交 【2】method属性：默认情况下不写method属性的时候就相当于method=\\\"get\\\" get方式：提交数据可见，不安全，提交数据长度有限制，效率高 post方式 ：提交数据不可见，安全，提交数据长度没有限制，效率低 --> <form action=\\\"aaa\\\" method=\\\"post\\\"> 用户名：<input type=\\\"text\\\" name=\\\"username\\\" /><br /> 密码：<input type=\\\"password\\\" name=\\\"pwd\\\" /><br /> <!--提交按钮--> <input type=\\\"submit\\\" /> </form> 用户名2：<input type=\\\"text\\\" name=\\\"username2\\\" /> </body> </html> \"]},\"1331\":{\"h\":\"模仿百度搜索\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>百度一下，你就知道</title> <link rel=\\\"shortcut icon\\\" href=\\\"https://www.baidu.com/favicon.ico\\\" type=\\\"image/x-icon\\\" /> </head> <body> <form action=\\\"https://www.baidu.com/s\\\" method=\\\"get\\\"> <!--文本框--> <input type=\\\"text\\\" name=\\\"wd\\\" /> <!--提交按钮--> <input type=\\\"submit\\\" value=\\\"百度一下\\\" /> </form> </body> </html> \"]},\"1332\":{\"h\":\"表单元素\"},\"1333\":{\"h\":\"文本框 text\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--表单元素--> <!--文本框: input标签使用很广泛，通过type属性的不同值，来表现不同的形态。 type=\\\"text\\\" 文本框，里面文字可见 表单元素必须有一个属性：name 有了name才可以提交数据,才可以采集数据 然后提交的时候会以键值对的形式拼到一起。 value:就是文本框中的具体内容 键值对：name=value的形式 如果value提前写好，那么默认效果就是value中内容。 一般默认提示语：用placeholder属性，不会用value--》value只是文本框中的值。 readonly只读：只是不能修改，但是其他操作都可以，可以正常提交 disabled禁用：完全不用，不能正常提交 写法： readonly=\\\"readonly\\\" readonly readonly = \\\"true\\\" --> <input type=\\\"text\\\" name=\\\"uname\\\" placeholder=\\\"请录入身份证信息\\\" /> <input type=\\\"text\\\" name=\\\"uname2\\\" value=\\\"123123\\\" readonly=\\\"true\\\" /> <input type=\\\"text\\\" name=\\\"uname3\\\" value=\\\"456456\\\" disabled=\\\"disabled\\\" /> </form> </body> </html> \"]},\"1334\":{\"h\":\"密码框 password\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--密码框:效果录入信息不可见--> <input type=\\\"password\\\" name=\\\"pwd\\\" /> </form> </body> </html> \"]},\"1335\":{\"h\":\"单选框 radio\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--单选按钮： 注意：一组单选按钮，必须通过name属性来控制，让它们在一个分组中，然后在一个分组里只能选择一个 正常状态下，提交数据为：gender=on ，后台不能区分你提交的数据 不同的选项的value值要控制为不同，这样后台接收就可以区分了 默认选中：checked=\\\"checked\\\" --> 性别： <input type=\\\"radio\\\" name=\\\"gender\\\" value=\\\"1\\\" checked=\\\"checked\\\" />男 <input type=\\\"radio\\\" name=\\\"gender\\\" value=\\\"0\\\" />女 </form> </body> </html> \"]},\"1336\":{\"h\":\"多选框 checkbox\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--多选按钮: 必须通过name属性来控制，让它们在一个分组中，然后在一个分组里可以选择多个 不同的选项的value值要控制为不同，这样后台接收就可以区分了 多个选项提交的时候，键值对用&符号进行拼接：例如下： favlan=1&favlan=3 --> 你喜欢的语言： <input type=\\\"checkbox\\\" name=\\\"favlan\\\" value=\\\"1\\\" checked=\\\"checked\\\" />java <input type=\\\"checkbox\\\" name=\\\"favlan\\\" value=\\\"2\\\" checked=\\\"checked\\\" />python <input type=\\\"checkbox\\\" name=\\\"favlan\\\" value=\\\"3\\\" />php <input type=\\\"checkbox\\\" name=\\\"favlan\\\" value=\\\"4\\\" />c# </form> </body> </html> \"]},\"1337\":{\"h\":\"文件 file\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--文件--> <input type=\\\"file\\\" /> </form> </body> </html> \"]},\"1338\":{\"h\":\"隐藏域 hidden\",\"t\":[\"不显示出来\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--隐藏域--> <input type=\\\"hidden\\\" name=\\\"uname6\\\" value=\\\"123123\\\" /> </form> </body> </html> \"]},\"1339\":{\"h\":\"按钮组 button\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--普通按钮：普通按钮没有什么效果，就是可以点击，以后学了js，可以加入事件--> <input type=\\\"button\\\" value=\\\"普通按钮\\\" /> <!--特殊按钮：重置按钮将页面恢复到初始状态--> <input type=\\\"reset\\\" /> <!--特殊按钮：图片按钮--> <img src=\\\"img/java核心技术.jpg\\\" /> <input type=\\\"image\\\" src=\\\"img/java核心技术.jpg\\\" /> </form> </body> </html> \"]},\"1340\":{\"h\":\"下拉框 select\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--下拉列表 默认选中：selected=\\\"selected\\\" 多选：multiple=\\\"multiple\\\" --> 你喜欢的城市： <select name=\\\"city\\\" multiple=\\\"multiple\\\"> <option value=\\\"0\\\">---请选择---</option> <option value=\\\"1\\\">哈尔滨市</option> <option value=\\\"2\\\" selected=\\\"selected\\\">青岛市</option> <option value=\\\"3\\\">郑州市</option> <option value=\\\"4\\\">西安市</option> <option value=\\\"5\\\">天津市</option> </select> </form> </body> </html> \"]},\"1341\":{\"h\":\"多行文本框 textarea\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--多行文本框 利用css样式来控制大小不可变：style=\\\"resize: none;\\\" --> 自我介绍： <textarea style=\\\"resize: none;\\\" rows=\\\"10\\\" cols=\\\"30\\\">请在这里填写信息。。</textarea> <br /> <!--label标签 一般会在想要获得焦点的标签上加入一个id属性，然后label中的for属性跟id配合使用。 --> <label for=\\\"uname\\\">用户名：</label><input type=\\\"text\\\" name=\\\"uername\\\" id=\\\"uname\\\" /> <!--特殊按钮：提交按钮：具备提交功能--> <input type=\\\"submit\\\" /> </form> </body> </html> \"]},\"1342\":{\"h\":\"标签 label\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--label标签 一般会在想要获得焦点的标签上加入一个id属性，然后label中的for属性跟id配合使用。 --> <label for=\\\"uname\\\">用户名：</label><input type=\\\"text\\\" name=\\\"uername\\\" id=\\\"uname\\\" /> <!--特殊按钮：提交按钮：具备提交功能--> <input type=\\\"submit\\\" /> </form> </body> </html> \"]},\"1343\":{\"h\":\"提交按钮 submit\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--特殊按钮：提交按钮：具备提交功能--> <input type=\\\"submit\\\" /> </form> </body> </html> \"]},\"1344\":{\"h\":\"HTML5新特性\",\"t\":[\"html5版本新增了很多类型，我们挑一些常用的进行展示： 详细学习地址可以参照w3c进行学习： https://www.w3school.com.cn/html5/att_input_type.asp\"]},\"1345\":{\"h\":\"类型校验\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--email: html5的类型可以增加校验 --> <input type=\\\"email\\\" name=\\\"email\\\" /> <!--url--> <input type=\\\"url\\\" /> </form> </body> </html> \"]},\"1346\":{\"h\":\"颜色选择\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--color--> <input type=\\\"color\\\" /> </form> </body> </html> \"]},\"1347\":{\"h\":\"数值选择\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--number: min:最小值 max:最大值 step:步长 value:默认值：一定在步长的范围中，否则不能提交 --> <input type=\\\"number\\\" min=\\\"1\\\" max=\\\"10\\\" step=\\\"3\\\" value=\\\"4\\\" /> </form> </body> </html> \"]},\"1348\":{\"h\":\"滑动选择\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--range--> 1<input type=\\\"range\\\" min=\\\"1\\\" max=\\\"10\\\" name=\\\"range\\\" step=\\\"3\\\" />10 </form> </body> </html> \"]},\"1349\":{\"h\":\"日期选择\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <form action=\\\"\\\" method=\\\"get\\\"> <!--date--> <input type=\\\"date\\\" /> <!--month--> <input type=\\\"month\\\" /> <!--week--> <input type=\\\"week\\\" /> <!--提交按钮--> <input type=\\\"submit\\\" /> </form> </body> </html> \"]},\"1350\":{\"h\":\"新增属性\",\"t\":[\" <!-- HTML5新增属性： multiple：多选 placehoder:默认提示 autofocus:自动获取焦点 required:必填项 --> <input type=\\\"text\\\" autofocus=\\\"autofocus\\\" /> <input type=\\\"text\\\" required=\\\"required\\\" \"]},\"1351\":{\"h\":\"数据类型和运算符\"},\"1352\":{\"h\":\"变量的声明\",\"t\":[\"JS是弱类型的脚本语言,所有的变量 对象 的数据类型的声明统统是var \",\"变量声明时没有确定具体的数据类型,在变量赋值时确定变量具体的数据类型\",\"JS中的变量可以反复声明,后声明的会覆盖之前声明的同名变量\",\"JS中的得代码可以不用以;作为结尾 每一行代码都是一个独立的语句(建议写)\",\"JS中字符串一般不区分 \\\"\\\"''只要不混用即可\",\"可以用不同的类型的数据给变量赋值,变量会自动改变自身的数据类型\",\"当给一个变量赋值为**null时,变量的类型为 object **\",\"变量只声明不赋值的情况下,数据和数据类型都显示 undefined\",\"对象 数组其他类型可以叫做复合数据类型 object\",\"JS中的标识符命名规则和JAVA中的保持一致即可 尽量避免 使用$ 会和jQuery冲突\"]},\"1353\":{\"h\":\"数据类型\"},\"1354\":{\"h\":\"数值型\",\"t\":[\"number整数和浮点数统称为数值。例如85或3.1415926等。\",\"var i =3.14; alert(i); \"]},\"1355\":{\"h\":\"字符串型\",\"t\":[\"String由0个,1个或多个字符组成的序列。在JavaScript中，用双引号或单引号括起来表示，如\\\"您好\\\"、&apos; 学习JavaScript&apos; 等。\",\"var j=\\\"你好\\\"; var z ='hello js'; alert(j) alert(z) alert(typeof j) \"]},\"1356\":{\"h\":\"逻辑（布尔）型\",\"t\":[\"boolean 用true或false来表示。\",\"var b=2>1; alert(b); \"]},\"1357\":{\"h\":\"空（null）值\",\"t\":[\"表示没有值，用于定义空的或不存在的引用。要注意，空值不等同于空字符串\\\"\\\"或0\",\"var i= null; alert(i); \"]},\"1358\":{\"h\":\"未定义（undefined）值\",\"t\":[\"undefined它也是一个保留字。表示变量虽然已经声明，但却没有赋值。\",\"var i; alert(i) \"]},\"1359\":{\"h\":\"复合数据类型Object\",\"t\":[\"复合数据类型包括对象和数组两种。\",\"var i=[1,2,3]; alert(i); var i=new Date(); alert(typeof i); \"]},\"1360\":{\"h\":\"运算符\",\"t\":[\"JS中运算符号大部分和java中的运算符一样,我们在这里分析一下特殊的运算符号\",\"类型\",\"运算符\",\"算术运算符\",\"+ - * / % ++ --\",\"赋值运算符\",\"=\",\"比较运算符\",\"> < >= <= == === !=\",\"逻辑运算符\",\"&& || !\"]},\"1361\":{\"h\":\"关于 / 和 %\",\"t\":[\"JS中,数字类型都是number,除法的结果中如果没有小数位,直接就是一个整数,如有小数位,才是浮点数\",\"JS中如果出现除零,那么结果是 infinity,而不是报错\",\" <script> /* * 能除尽,则默认结果就是一个整数,不能除尽,结果默认就是浮点数 * 除零不会出现异常,而是出现 Infinity * 和0取余数,出现NaN not a number 不是一个数字 * */ alert(10 / 3); alert(10 / 0); alert(10 % 3); alert(10 % 0); </script> \",\"JS取余数运算对于浮点数仍然有效,如果和0取余数,结果是NaN(not a number)\"]},\"1362\":{\"h\":\"关于 +\",\"t\":[\"+ 同时也是连接运算符,看两端的变量类型 :\",\"如果都是number那么就是算数中的加法\",\"如果有字符串,那么就是连接符号,\",\"如果是布尔类型和number相加,那么会将true转化为1 将false 转化为0\",\"<script> /* * +号中 如果一段是字符串,就变成了文字拼接 * 数字和 boolean类型相加 true会转变成1 false会转变成0 再做数学运算 * */ var i = 1; alert(i + 1); alert(1 + \\\"1\\\"); alert(1 + true); </script> \"]},\"1363\":{\"h\":\"关于 ==\",\"t\":[\"先比较类型,如果类型一致,再比较内容,如果类型不一致,会强制转换为number再比较内容\",\"<script> /* * == 等值符 * 先比较类型,如果类型一致,则比较值是否相同 * 如果类型不一致,会将数据尝试转换number 再比较内容 * */ var a = 1; var b = \\\"1\\\"; var c = true; var d = \\\"true\\\"; alert(a == b) // t alert(a == c) // t alert(a == d) // f alert(b == c) // t alert(b == d) // f alert(c == d) // f </script> \"]},\"1364\":{\"h\":\"关于 ===\",\"t\":[\"数据类型不同 直接返回false如果类型相同 才会比较内容\",\"<script> /* * === 等同符 * 如果数据类型不同,直接返回false 如果类型相同,才会继续比较内容 * * */ var a = 1; var b = \\\"1\\\"; var c = true; var d = \\\"true\\\"; alert(a === b) //f alert(a === c) //f alert(a === d) //f alert(b === c) //f alert(b === d) //f alert(c === d) //f alert(\\\"asdf\\\" === \\\"asdf\\\") //t </script> \"]},\"1365\":{\"h\":\"流程控制\",\"t\":[\"基本和JAVA中的一致\"]},\"1366\":{\"h\":\"分支结构 if switch\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> /* * 定义变量表示月份 * 根据月份输出该月的季节和应季活动 * */ var i = 10; if (i == 12 || i == 1 || i == 2) { alert(\\\"大约在冬季: 冬天吃火锅\\\"); } else if (i >= 3 && i <= 5) { alert(\\\"春天来了: 春天吃青菜\\\"); } else if (i >= 6 && i <= 8) { alert(\\\"夏天到了: 吃烧烤喝啤酒\\\"); } else if (i >= 9 && i <= 11) { alert(\\\"秋天到了: 贴秋膘\\\"); } else { alert(\\\"月份有误\\\") } switch (i) { case 3: case 4: case 5: alert(\\\"春眠不觉晓\\\"); break; case 6: case 7: case 8: alert(\\\"夏天蚊子咬\\\"); break; case 9: case 10: case 11: alert(\\\"秋天一身包\\\"); break; case 1: case 2: case 12: alert(\\\"冬天蚊子死翘翘\\\"); break; default: alert(\\\"月份有误\\\") } </script> </head> <body> </body> </html> \"]},\"1367\":{\"h\":\"循环结构 while do_while for\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> var i = 1; while (i <= 10) { alert(i) i++; } /* * 考试,直到分数过线为止 * 求1-10整数和 1+10*(10/2) */ var sum = 0; var j = 1; do { sum += j; j++; } while (j <= 10); alert(sum) var sum2 = 0; for (var z = 1; z <= 10; z++) { sum2 += z; } alert(sum2) </script> </head> <body> </body> </html> \"]},\"1368\":{\"h\":\"函数的使用\",\"t\":[\"类似于java中的方法,JS中也可以定义一些函数,\",\"java中的方法签名包含访问: 修饰符,返回值类型,方法名,参数列表,异常列表,但是JS中定义函数的语法相对简单很多,主要以function作为函数关键字,具备函数名和参数列表,但是没有访问修饰符也没有返回值类型关键字和异常列表\"]},\"1369\":{\"h\":\"函数定义的三种方式\",\"t\":[\"方式一： 常见\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> /* * 第一种语法格式 常见 * function 函数名(参数列表){js代码} * */ function fun1() { alert(\\\"你好\\\"); } // 调用方法 fun1(); </script> </head> <body> </body> </html> \",\"方式二： 常见\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> /* * 第二种语法 * var 函数名=function(参数列表){JS代码} * * */ var fun2 = function() { alert(\\\"你很好\\\") } // 调用方法 fun2(); </script> </head> <body> </body> </html> \",\"方式三： 不常用\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> /* * 第三种语法 不常用 了解 * var 函数名=new Function('js代码') * * */ var fun3 = new Function('alert(\\\"你非常好\\\");'); // 调用方法 fun3(); </script> </head> <body> </body> </html> \"]},\"1370\":{\"h\":\"函数参数和返回值\",\"t\":[\"传入的实参可以和形参个数不一致\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> /* * * 传入的实参可以和形参个数不一致 * */ function fun1(a, b, c) { alert(\\\"a:\\\" + a); alert(\\\"b:\\\" + b); alert(\\\"c:\\\" + c); } fun1(10,\\\"hello js\\\",false); // 少传参数 OK fun1(1,2); // 多传参数 OK 多出来的参数相当于没传 fun1(10,\\\"hello js\\\",false,new Date()); </script> </head> <body> </body> </html> \",\"如果函数中有返回值,那么直接用return关键字返回即可\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun2(a, b) { var c = a * b; return c; } var x =fun2(10,20); alert(x) </script> </head> <body> </body> </html> \",\"方法本身作为参数(了解)\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> // 方法本身作为参数(了解) function funa(i, j) { return i + j; } function funb(a) { return a(10, 20); } var sum = funb(funa) alert(sum) </script> </head> <body> </body> </html> \"]},\"1371\":{\"h\":\"初识JavaScript\"},\"1372\":{\"h\":\"什么是JavaScrip\",\"t\":[\"Javascript是一种由Netscape(网景)的LiveScript发展而来的. 原型化继承的面向对象的动态类型的区分大小写的客户端脚本语言，主要目的是为了解决服务器端语言.比如Perl遗留的速度问题，为客户提供更流畅的浏览效果。\",\"当时服务端需要对数据进行验证，由于网络速度相当缓慢,只有28.8kbps，验证步骤浪费的时间太多。于是Netscape的浏览器Navigator加入了Javascript，提供了数据验证的基本功能。\",\"JavaScript 的正式名称是 \\\"ECMAScript\\\"。这个标准由 ECMA 组织发展和维护。ECMA-262 是正式的 JavaScript 标准。这个标准基于 JavaScript (Netscape) 和 JScript (Microsoft)。Netscape (Navigator 2.0) 的 Brendan Eich 发明了这门语言，从 1996 年开始，已经出现在所有的 Netscape 和 Microsoft 浏览器中。ECMA-262 的开发始于 1996 年，在 1997 年 7 月，ECMA 会员大会采纳了它的首个版本。JavaScript的组成包含ECMAScript、DOM、BOM。JS是一种运行于浏览器端上的小脚本语句,可以实现网页如文本内容动,数据动态变化和动画特效等 .\",\"ECMAScript 是一种由欧洲计算机制造商协会（ECMA）通过ECMA-262标准化的脚本程序语言,简单点说，ECMAScript描述了语法、类型、语句、关键字、保留字、运算符和对象。它就是定义了脚本语言的所有属性、方法和对象。\",\"DOM 把整个页面规划成由节点层构成的文档，它不与浏览器、平台、语言相关，为web开发者提供一个标准可以访问站点中的数据、脚本和表现层对象.DOM编程可以实现网页内容校验和动态变化的效果 \",\"BOM 是浏览器的一种特性，它可以对浏览器窗口进行访问和操作，例如移动、关闭窗口，调整窗口的大小，支持cookie等。BOM编程可以实现动态控制浏览器本身行为的效果 \",\"通俗来讲:ECMAScript可以理解为JS的基础语法部分, DOM可以简单理解为,使用document对象操作文档内容的编程,BOM可以理解为,使用window对象操作浏览器行为的编程\"]},\"1373\":{\"h\":\"JavaScript 的特点\"},\"1374\":{\"h\":\"优点\",\"t\":[\"脚本语言 脚本语言是一种简单的程序，规模小,不需要编译,运行快, 是由一些ASCII字符构成，可以使用任何一种文本编辑器编写。脚本语言是指在web浏览器内有解释器解释执行的编程语言，每次运行程序的时候，解释器会把程序代码翻译成可执行的格式。一些程序语言（如C、C++、Java等）都必须经过编译，将源代码编译成二进制的可执行文件之后才能运行，而脚本语言不需要事先编译，只要有一个与其相适应的解释器就可以执行。\",\"基于对象的语言 脚本语言是一种简单的程序，规模小,不需要编译,运行快, 是由一些ASCII字符构成，可以使用任何一种文本编辑器编写。脚本语言是指在web浏览器内有解释器解释执行的编程语言，每次运行程序的时候，解释器会把程序代码翻译成可执行的格式。一些程序语言（如C、C++、Java等）都必须经过编译，将源代码编译成二进制的可执行文件之后才能运行，而脚本语言不需要事先编译，只要有一个与其相适应的解释器就可以执行。\",\"事件驱动 在网页中执行了某种操作的动作，被称为\\\"事件\\\"(Event)，比如按下鼠标、移动窗口、选择菜单等都可以视为事件。当事件发生后，可能会引起相应的事件响应。\",\"简单性 变量类型是采用弱类型，并未使用严格的数据类型。var a,b,c; a=123; b=\\\"abc\\\"; a=b;\",\"安全性 JavaScript不能访问本地的硬盘，不能将数据存入到服务器上，不能对网络文档进行修改和删除，只能通过浏览器实现信息浏览或动态交互\",\"跨平台性 JavaScript依赖于浏览器本身，与操作平台无关， 只要计算机安装了支持JavaScript的浏览器（装有JavaScript解释器），JavaScript程序就可以正确执行。\"]},\"1375\":{\"h\":\"缺点\",\"t\":[\"📌缺点 各种浏览器支持JavaScript的程度是不一样的，支持和不完全支持JavaScript的 浏览器在浏览同一个带有JavaScript脚本的网页时，效果会有一定的差距，有时甚至会显示不出来。\"]},\"1376\":{\"h\":\"JavaScript 与 Java的区别\",\"t\":[\"区别1：公司不同，前身不同JavaScript是Netscape公司的产品，是为了扩展Netscape Navigator功能而开发的一种可以嵌入Web页面中的基于对象和事件驱动的解释性语言，它的前身是Live Script；Java是SUN公司推出的新一代面向对象的程序设计语言，特别适合于Internet应用程序开发； Java的前身是Oak语言。\",\"区别2：基于对象和面向对象JavaScript是脚本语言，是一种基于对象的语言。本身提供了非常丰富的内部对象供设计人员使用，但不支持继承和多态。Java是面向对象的，是一种真正的面向对象的语言，支持封装、继承和多态。\",\"区别3: 变量类型强弱不同Java采用强类型变量检查， 即所有变量在编译之前必须声明为某一指定类型。如: int x=1234;JavaScript中是弱类型变量。统一采用var声明，可赋各种数据类型值。\",\"区别4: 变运行的位置不同Java运行与服务器端的,大型编程语言, JS运行于客户端(浏览器) 一种小规模脚本语言\"]},\"1377\":{\"h\":\"JavaScript 与 CSS的关系\",\"t\":[\"HTML和CSS和JS都是前端的主要技术,三者各有分工.\",\"HTML : 可以用于制作网页的主体结构\",\"CSS : 用于给网页做美化\",\"JS : 用于在网页上添加动态效果\"]},\"1378\":{\"h\":\"JavaScript 的引入方式\"},\"1379\":{\"h\":\"内嵌式\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\" /> <title></title> <!--内嵌式引入方式 1在head标签中,用一对script标签,嵌入JS代码 2type属性可以省略不写 --> <script type=\\\"text/javascript\\\"> /*定义一个函数(方法)*/ function fun1() { /*弹窗提示一点信息 */ alert(\\\"你好\\\") } </script> </head> <body> <input type=\\\"button\\\" value=\\\"点我呀\\\" onclick=\\\"fun1()\\\" /> </body> </html> \",\"📌缺点\",\"我们定义的JS代码只能在当前一个网页中使用,代码复用度低,可维护性低\",\"JS代码和HTML代码混合在一个文件中,可阅读性差\"]},\"1380\":{\"h\":\"链接式\",\"t\":[\"function fun1(){ alert(\\\"总能见到你\\\") } function fun2(){ alert(\\\"总能见到你\\\") } \",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <!--链接式 引入外部JS文件 提高的代码复用度 降低了代码维护的难度 1 一个页面可以同时引入多个不同的JS文件 2 script标签一点用于引入外部JS文件,就不能在中间定义内嵌式代码 3 一个页面上可以用多个script标签 位置也不是非得放到head标签中不可 4src属性可以指向一个网络路径,就是第三种引入方式 --> <script type=\\\"text/javascript\\\" src=\\\"js/myjs.js\\\"></script> <!--<script type=\\\"text/javascript\\\" src=\\\"URL网络路径\\\"></script>--> </head> <body> <input type=\\\"button\\\" value=\\\"点我呀\\\" onclick=\\\"fun1()\\\" /> <input type=\\\"button\\\" value=\\\"点我呀2\\\" onclick=\\\"fun2()\\\" /> <input type=\\\"button\\\" value=\\\"点我呀3\\\" onclick=\\\"fun3()\\\" /> <script > function fun3(){ alert(\\\"总能见到你\\\") } </script> </body> </html> \",\"📌优点 : 代码复用度高,更易于维护代码\",\"注意事项:\",\"在一个页面上可以同时引入多个JS文件\",\"每个JS文件的引入都要使用一个独立的script标签\",\"内嵌式和链接式的引入不能使用同一标签\"]},\"1381\":{\"h\":\"数组的使用\"},\"1382\":{\"h\":\"创建数组方式\"},\"1383\":{\"h\":\"直接创建空数组\",\"t\":[\"/*第一种 *创建了一个空数组 new Array(); * */ var arr = new Array(); arr[0] = 1; console.log(arr); \"]},\"1384\":{\"h\":\"直接创建指定长度\",\"t\":[\"/* *第二种 * 创建定长数组 new Array(5); * */ var arr2 = new Array(5); arr2[0] = \\\"x\\\"; arr2[4] = true; console.log(arr2) \"]},\"1385\":{\"h\":\"直接创建指定元素\",\"t\":[\"/* * 第三种创建语法 * 创建时,直接指定元素值 * */ var arr3 = new Array(\\\"asdf\\\", 10, 20.3, true); console.log(arr3) var arr4 = [\\\"asdf\\\", 10, 20.3, true]; console.log(arr4) \"]},\"1386\":{\"h\":\"数组元素和长度\",\"t\":[\"JS中数组元素和长度使用时的特征:\",\"当我们修改数组长度属性时,也会直接更改数组的长度 当我们直接资指定索引插入值时,也会动态修改数组的长度\",\" var arr = [11, 22, 33]; console.log(arr)//[11, 22, 33] console.log(arr[0]);//11 console.log(arr.length)//3 /* * JS中的数组是可以通过修改length属性来改变数组长度的 * */ arr.length = 5; console.log(arr)//[11, 22, 33, empty × 2] /* * JS的数组可以通过索引改变数组的长度 * */ arr[9] = 99; console.log(arr);//[11, 22, 33, empty × 6, 99] \"]},\"1387\":{\"h\":\"数组遍历\"},\"1388\":{\"h\":\"普通For循环\",\"t\":[\"var arr = [5, 7, 3, 1, 6, 2, 4, 9, 8]; /* * 普通for循环遍历数组 * */ for (var i = 0; i < arr.length; i++) { console.log(arr[i]) } \"]},\"1389\":{\"h\":\"增强For循环\",\"t\":[\"var arr = [5, 7, 3, 1, 6, 2, 4, 9, 8]; /* *foreach循环遍历数组 * JS 中foreach写法为 for( var i in 数组) * i 不是元素 是索引 * */ for (var i in arr) { console.log(arr[i]) } \"]},\"1390\":{\"h\":\"数组的常用方法\"},\"1391\":{\"h\":\"查询指定索引元素:indexOf\",\"t\":[\"var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]; var index = arr.indexOf(7); //查询元素索引的方法 console.log(index)//6 \"]},\"1392\":{\"h\":\"合并数组元素:concat\",\"t\":[\"// 合并两个数组 var hege = [\\\"Cecilie\\\", \\\"Lone\\\"]; var stale = [\\\"Emil\\\", \\\"Tobias\\\", \\\"Linus\\\"]; var children = hege.concat(stale); console.log(children)//[\\\"Cecilie\\\", \\\"Lone\\\", \\\"Emil\\\", \\\"Tobias\\\", \\\"Linus\\\"] // 合并三个数组 var parents = [\\\"Jani\\\", \\\"Tove\\\"]; var brothers = [\\\"Stale\\\", \\\"Kai Jim\\\", \\\"Borge\\\"]; var children = [\\\"Cecilie\\\", \\\"Lone\\\"]; var family = parents.concat(brothers, children); console.log(family)//[\\\"Jani\\\", \\\"Tove\\\", \\\"Stale\\\", \\\"Kai Jim\\\", \\\"Borge\\\", \\\"Cecilie\\\", \\\"Lone\\\"] \"]},\"1393\":{\"h\":\"合并字符串:concat\",\"t\":[\"// 合并字符串 var fruits = [\\\"Banana\\\", \\\"Orange\\\", \\\"Apple\\\", \\\"Mango\\\"]; var fs = fruits.join(); console.log(fs)//Banana,Orange,Apple,Mango \"]},\"1394\":{\"h\":\"移除最后一个元素:pop\",\"t\":[\"var fruits = [\\\"Banana\\\", \\\"Orange\\\", \\\"Apple\\\", \\\"Mango\\\"]; // 移除最后一个元素 var fruit = fruits.pop(); console.log(fruits) console.log(fruit)//[\\\"Banana\\\", \\\"Orange\\\", \\\"Apple\\\"] \"]},\"1395\":{\"h\":\"结尾添加元素:push\",\"t\":[\"var fruits = [\\\"Banana\\\", \\\"Orange\\\", \\\"Apple\\\", \\\"Mango\\\"]; // 想结尾增加元素 fruits.push(\\\"Grape\\\"); console.log(fruits)//[\\\"Banana\\\", \\\"Orange\\\", \\\"Apple\\\",\\\"Mango\\\",\\\"Grape\\\"] \"]},\"1396\":{\"h\":\"结尾添加元素:reverse\",\"t\":[\"var fruits = [\\\"Banana\\\", \\\"Orange\\\", \\\"Apple\\\",\\\"Grape\\\"]; //反转数组 fruits.reverse(); console.log(fruits)//[\\\"Grape\\\", \\\"Apple\\\", \\\"Orange\\\", \\\"Banana\\\"] \"]},\"1397\":{\"h\":\"删除第一个元素:shift\",\"t\":[\"var fruits = [\\\"Banana\\\", \\\"Orange\\\", \\\"Apple\\\",\\\"Grape\\\"]; //删除数组第一个元素 var ss = fruits.shift(); console.log(fruits);//[\\\"Apple\\\", \\\"Orange\\\", \\\"Banana\\\"] console.log(ss)//Grape \"]},\"1398\":{\"h\":\"向第一个位置添加元素:unshift\",\"t\":[\"var fruits = [\\\"Apple\\\", \\\"Orange\\\", \\\"Banana\\\"]; //向第一个位置添加元素 fruits.unshift(\\\"火龙果\\\"); console.log(fruits);//[\\\"火龙果\\\", \\\"Apple\\\", \\\"Orange\\\", \\\"Banana\\\"] \"]},\"1399\":{\"h\":\"截取数组:slice\",\"t\":[\"var fruits = [\\\"火龙果\\\", \\\"Apple\\\", \\\"Orange\\\", \\\"Banana\\\"]; // 截取子数组 从哪个索引开始,到哪个索引结束 包头不包尾 var citrus = fruits.slice(1, 3); console.log(citrus)//[\\\"Apple\\\", \\\"Orange\\\"] \"]},\"1400\":{\"h\":\"删除数组中的元素:splice\",\"t\":[\"var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] /* * 删除数组中的某些元素 * 2 从哪个索引开始删除 * 3 删除多个少个元素 * */ numbers.splice(2,3); console.log(numbers)//[1, 2, 6, 7, 8, 9] /* * 如果第二个参数是0 那么就变成了在指定索引位置增加元素 * */ numbers.splice(2, 0, 100); console.log(numbers)//[1, 2, 100, 3, 4, 5, 6, 7, 8, 9] \"]},\"1401\":{\"h\":\"数组排序:sort\",\"t\":[\"var fruits = [\\\"Banana\\\", \\\"Orange\\\", \\\"Apple\\\", \\\"Mango\\\"]; fruits.sort(); console.log(fruits)//[\\\"Apple\\\", \\\"Banana\\\", \\\"Mango\\\", \\\"Orange\\\"] var numbers = [5, 7, 9, 6, 1, 8, 3, 4, 2]; //自定义排序规则:类似比较器 numbers.sort(function(a, b) { return b - a }); console.log(numbers)//[9, 8, 7, 6, 5, 4, 3, 2, 1] \"]},\"1402\":{\"h\":\"对象和原型\"},\"1403\":{\"h\":\"常用对象\",\"t\":[\"JS基于对象的脚本语言 ,有类和对象,但是没有封装,继承,多态,\",\"Java script 中有一些浏览器直接识别并使用的对象,常见的对象有Array,String对象,Math对象,Number对象,Date对象等等.\"]},\"1404\":{\"h\":\"String对象\"},\"1405\":{\"h\":\"常用API\",\"t\":[\"方法\",\"描述\",\"charAt()\",\"返回在指定位置的字符。\",\"charCodeAt()\",\"返回在指定的位置的字符的 Unicode 编码。\",\"concat()\",\"连接两个或更多字符串，并返回新的字符串。\",\"fromCharCode()\",\"将 Unicode 编码转为字符。\",\"indexOf()\",\"返回某个指定的字符串值在字符串中首次出现的位置。\",\"includes()\",\"查找字符串中是否包含指定的子字符串。\",\"lastIndexOf()\",\"从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置。\",\"match()\",\"查找找到一个或多个正则表达式的匹配。\",\"repeat()\",\"复制字符串指定次数，并将它们连接在一起返回。\",\"replace()\",\"在字符串中查找匹配的子串， 并替换与正则表达式匹配的子串。\",\"search()\",\"查找与正则表达式相匹配的值。\",\"slice()\",\"提取字符串的片断，并在新的字符串中返回被提取的部分。\",\"split()\",\"把字符串分割为字符串数组。\",\"startsWith()\",\"查看字符串是否以指定的子字符串开头。\",\"substr()\",\"从起始索引号提取字符串中指定数目的字符。\",\"substring()\",\"提取字符串中两个指定的索引号之间的字符。\",\"toLowerCase()\",\"把字符串转换为小写。\",\"toUpperCase()\",\"把字符串转换为大写。\",\"trim()\",\"去除字符串两边的空白\",\"toLocaleLowerCase()\",\"根据本地主机的语言环境把字符串转换为小写。\",\"toLocaleUpperCase()\",\"根据本地主机的语言环境把字符串转换为大写。\",\"valueOf()\",\"返回某个字符串对象的原始值。\",\"toString()\",\"返回一个字符串。\"]},\"1406\":{\"h\":\"案例\",\"t\":[\"// 根据索引获取字符 var str =\\\"hello js\\\"; var c =str.charAt(6); console.log(c)//j // 拼接字符串 var a = \\\"hi\\\"; var b = \\\"good\\\"; var c = \\\"China\\\"; var d = c.concat(a, b); console.log(d)//Chinahigood //复制字符串指定次数 var e = \\\"adsf\\\"; var f = e.repeat(3); console.log(f)//adsfadsfadsf // 截取字符串 var g = \\\"helloJhon\\\"; var h = g.substr(1, 5); // 从哪里开始,连续截取多少个字符 console.log(h)//elloJ // 包头不包尾 var i = g.substring(1, 7); // 从哪里开始,到哪里结束 console.log(i)//elloJh // 获取长度 console.log(g.length) // length属性 9 // JS中非常特殊的一个函数,可以将一段字符串当做JS代码来执行 // 将字符串内容解析称JS代码并运行 var testStr = \\\" var x =10 \\\"; eval(testStr); console.log(x)//10 \"]},\"1407\":{\"h\":\"Number对象\"},\"1408\":{\"h\":\"常用API\",\"t\":[\"属性\",\"描述\",\"Number.MAX_VALUE\",\"最大值\",\"Number.MIN_VALUE\",\"最小值\",\"Number.NaN\",\"非数字\",\"Number.NEGATIVE_INFINITY\",\"负无穷，在溢出时返回\",\"Number.POSITIVE_INFINITY\",\"正无穷，在溢出时返回\",\"Number.EPSILON\",\"表示 1 和比最接近 1 且大于 1 的最小 Number 之间的差别\",\"Number.MIN_SAFE_INTEGER\",\"最小安全整数。\",\"Number.MAX_SAFE_INTEGER\",\"最大安全整数。\",\"方法\",\"描述\",\"Number.parseFloat()\",\"将字符串转换成浮点数，和全局方法 parseFloat() 作用一致。\",\"Number.parseInt()\",\"将字符串转换成整型数字，和全局方法 parseInt() 作用一致。\",\"Number.isFinite()\",\"判断传递的参数是否为有限数字。\",\"Number.isInteger()\",\"判断传递的参数是否为整数。\",\"Number.isNaN()\",\"判断传递的参数是否为 isNaN()。\",\"Number.isSafeInteger()\",\"判断传递的参数是否为安全整数。\"]},\"1409\":{\"h\":\"案例\",\"t\":[\"console.log(Number.MAX_VALUE)//1.7976931348623157e+308 console.log(Number.MIN_VALUE)//5e-324 console.log(Number.MAX_SAFE_INTEGER)//9007199254740991 console.log(Number.MIN_SAFE_INTEGER)//-9007199254740991 console.log(Number.parseFloat(\\\"10.123\\\") + 20);//30.122999999999998 console.log(Number.parseInt(\\\"30\\\") + 20);//50 var i = 10 % 0; var j = 10 / 0; console.log(i)//NaN console.log(j)//Infinity console.log(Number.isNaN(i)) // is not a number 是不是NAN true console.log(Number.isFinite(j))//false console.log(Number.isSafeInteger(Number.MAX_VALUE))//false console.log(Number.isSafeInteger(Number.MAX_SAFE_INTEGER))//true \"]},\"1410\":{\"h\":\"Match对象\"},\"1411\":{\"h\":\"常用API\",\"t\":[\"属性\",\"描述\",\"E\",\"返回算术常量 e，即自然对数的底数（约等于2.718）。\",\"LN2\",\"返回 2 的自然对数（约等于0.693）。\",\"LN10\",\"返回 10 的自然对数（约等于2.302）。\",\"LOG2E\",\"返回以 2 为底的 e 的对数（约等于 1.4426950408889634）。\",\"LOG10E\",\"返回以 10 为底的 e 的对数（约等于0.434）。\",\"PI\",\"返回圆周率（约等于3.14159）。\",\"SQRT1_2\",\"返回 2 的平方根的倒数（约等于 0.707）。\",\"SQRT2\",\"返回 2 的平方根（约等于 1.414）。\",\"方法\",\"描述\",\"abs(x)\",\"返回 x 的绝对值。\",\"acos(x)\",\"返回 x 的反余弦值。\",\"asin(x)\",\"返回 x 的反正弦值。\",\"atan(x)\",\"以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。\",\"atan2(y,x)\",\"返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。\",\"ceil(x)\",\"对数进行上舍入。\",\"cos(x)\",\"返回数的余弦。\",\"exp(x)\",\"返回 Ex 的指数。\",\"floor(x)\",\"对 x 进行下舍入。\",\"log(x)\",\"返回数的自然对数（底为e）。\",\"max(x,y,z,...,n)\",\"返回 x,y,z,...,n 中的最高值。\",\"min(x,y,z,...,n)\",\"返回 x,y,z,...,n中的最低值。\",\"pow(x,y)\",\"返回 x 的 y 次幂。\",\"random()\",\"返回 0 ~ 1 之间的随机数。\",\"round(x)\",\"四舍五入。\",\"sin(x)\",\"返回数的正弦。\",\"sqrt(x)\",\"返回数的平方根。\",\"tan(x)\",\"返回角的正切。\",\"tanh(x)\",\"返回一个数的双曲正切函数值。\",\"trunc(x)\",\"将数字的小数部分去掉，只保留整数部分。\"]},\"1412\":{\"h\":\"案例\",\"t\":[\"console.log(Number.MAX_VALUE)//1.7976931348623157e+308 console.log(Number.MIN_VALUE)//5e-324 console.log(Number.MAX_SAFE_INTEGER)//9007199254740991 console.log(Number.MIN_SAFE_INTEGER)//-9007199254740991 console.log(Number.parseFloat(\\\"10.123\\\") + 20);//30.122999999999998 console.log(Number.parseInt(\\\"30\\\") + 20);//50 var i = 10 % 0; var j = 10 / 0; console.log(i)//NaN console.log(j)//Infinity console.log(Number.isNaN(i)) // is not a number 是不是NAN true console.log(Number.isFinite(j))//false console.log(Number.isSafeInteger(Number.MAX_VALUE))//false console.log(Number.isSafeInteger(Number.MAX_SAFE_INTEGER))//true \"]},\"1413\":{\"h\":\"Date对象\"},\"1414\":{\"h\":\"创建Date对象\",\"t\":[\"var d = new Date(); var d = new Date(milliseconds); var d = new Date(dateString); var d = new Date(year, month, day, hours, minutes, seconds, milliseconds); \"]},\"1415\":{\"h\":\"常用API\",\"t\":[\"方法名\",\"方法描述\",\"getDate()\",\"从 Date 对象返回一个月中的某一天 (1 ~ 31)。\",\"getDay()\",\"从 Date 对象返回一周中的某一天 (0 ~ 6)。\",\"getFullYear()\",\"从 Date 对象以四位数字返回年份。\",\"getHours()\",\"返回 Date 对象的小时 (0 ~ 23)。\",\"getMilliseconds()\",\"返回 Date 对象的毫秒(0 ~ 999)。\",\"getMinutes()\",\"返回 Date 对象的分钟 (0 ~ 59)。\",\"getMonth()\",\"从 Date 对象返回月份 (0 ~ 11)。\",\"getSeconds()\",\"返回 Date 对象的秒数 (0 ~ 59)。\",\"getTime()\",\"返回 1970 年 1 月 1 日至今的毫秒数。\",\"getTimezoneOffset()\",\"返回本地时间与格林威治标准时间 (GMT) 的分钟差。\",\"getUTCDate()\",\"根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。\",\"getUTCDay()\",\"根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。\",\"getUTCFullYear()\",\"根据世界时从 Date 对象返回四位数的年份。\",\"getUTCHours()\",\"根据世界时返回 Date 对象的小时 (0 ~ 23)。\",\"getUTCMilliseconds()\",\"根据世界时返回 Date 对象的毫秒(0 ~ 999)。\",\"getUTCMinutes()\",\"根据世界时返回 Date 对象的分钟 (0 ~ 59)。\",\"getUTCMonth()\",\"根据世界时从 Date 对象返回月份 (0 ~ 11)。\",\"getUTCSeconds()\",\"根据世界时返回 Date 对象的秒钟 (0 ~ 59)。\",\"getYear()\",\"已废弃。 请使用 getFullYear() 方法代替。\",\"parse()\",\"返回1970年1月1日午夜到指定日期（字符串）的毫秒数。\",\"setDate()\",\"设置 Date 对象中月的某一天 (1 ~ 31)。\",\"setFullYear()\",\"设置 Date 对象中的年份（四位数字）。\",\"setHours()\",\"设置 Date 对象中的小时 (0 ~ 23)。\",\"setMilliseconds()\",\"设置 Date 对象中的毫秒 (0 ~ 999)。\",\"setMinutes()\",\"设置 Date 对象中的分钟 (0 ~ 59)。\",\"setMonth()\",\"设置 Date 对象中月份 (0 ~ 11)。\",\"setSeconds()\",\"设置 Date 对象中的秒钟 (0 ~ 59)。\",\"setTime()\",\"setTime() 方法以毫秒设置 Date 对象。\",\"setUTCDate()\",\"根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。\",\"setUTCFullYear()\",\"根据世界时设置 Date 对象中的年份（四位数字）。\",\"setUTCHours()\",\"根据世界时设置 Date 对象中的小时 (0 ~ 23)。\",\"setUTCMilliseconds()\",\"根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。\",\"setUTCMinutes()\",\"根据世界时设置 Date 对象中的分钟 (0 ~ 59)。\",\"setUTCMonth()\",\"根据世界时设置 Date 对象中的月份 (0 ~ 11)。\",\"setUTCSeconds()\",\"setUTCSeconds() 方法用于根据世界时 (UTC) 设置指定时间的秒字段。\",\"setYear()\",\"已废弃。请使用 setFullYear() 方法代替。\",\"toDateString()\",\"把 Date 对象的日期部分转换为字符串。\",\"toGMTString()\",\"已废弃。请使用 toUTCString() 方法代替。\",\"toISOString()\",\"使用 ISO 标准返回字符串的日期格式。\",\"toJSON()\",\"以 JSON 数据格式返回日期字符串。\",\"toLocaleDateString()\",\"根据本地时间格式，把 Date 对象的日期部分转换为字符串。\",\"toLocaleTimeString()\",\"根据本地时间格式，把 Date 对象的时间部分转换为字符串。\",\"toLocaleString()\",\"根据本地时间格式，把 Date 对象转换为字符串。\",\"toString()\",\"把 Date 对象转换为字符串。\",\"toTimeString()\",\"把 Date 对象的时间部分转换为字符串。\",\"toUTCString()\",\"根据世界时，把 Date 对象转换为字符串。 实例： var today = new Date(); var UTCstring = today.toUTCString();\",\"UTC()\",\"根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。\",\"valueOf()\",\"返回 Date 对象的原始值。\"]},\"1416\":{\"h\":\"案例\",\"t\":[\"/* * 在程序中 西方的月份编号从0开始 * 1 2 3 4 5 6 * 0 1 2 3 4 5 * */ var today = new Date() var d1 = new Date(\\\"October 13, 1975 11:13:00\\\") var d2 = new Date(79, 5, 24) var d3 = new Date(79, 5, 24, 11, 33, 0) console.log(d1);//Mon Oct 13 1975 11:13:00 GMT+0800 (中国标准时间) console.log(d2);//Sun Jun 24 1979 00:00:00 GMT+0800 (中国标准时间) console.log(d3);//Sun Jun 24 1979 11:33:00 GMT+0800 (中国标准时间) var d4 = new Date(2048, 0, 13, 16, 51, 20, 123) console.log(d4)//Mon Jan 13 2048 16:51:20 GMT+0800 (中国标准时间) // set*** 略自己尝试一下 console.log(d4.getYear()); // 148 console.log(d4.getFullYear()); // 2048 console.log(d4.getMonth());//0 console.log(d4.getDate());//13 console.log(d4.getHours());//16 console.log(d4.getMinutes());//51 console.log(d4.getSeconds());//20 console.log(d4.getMilliseconds());//123 var d5 = new Date(2048, 0, 13, 16, 51, 20, 456) console.log(d4 < d5)//true \"]},\"1417\":{\"h\":\"日期对象格式化处理\",\"t\":[\"// 关于日期对象格式化处理 /*date对象的格式化方法*/ /*修改Date原型,添加一个format格式化的方法*/ Date.prototype.format = function(fmt) { var o = { \\\"M+\\\": this.getMonth() + 1, //月份 \\\"d+\\\": this.getDate(), //日 \\\"h+\\\": this.getHours(), //小时 \\\"m+\\\": this.getMinutes(), //分 \\\"s+\\\": this.getSeconds(), //秒 \\\"q+\\\": Math.floor((this.getMonth() + 3) / 3), //季度 \\\"S\\\": this.getMilliseconds() //毫秒 }; if (/(y+)/.test(fmt)) { fmt = fmt.replace(RegExp.$1, (this.getFullYear() + \\\"\\\").substr(4 - RegExp.$1.length)); } for (var k in o) { if (new RegExp(\\\"(\\\" + k + \\\")\\\").test(fmt)) { fmt = fmt.replace( RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\\\"00\\\" + o[k]).substr((\\\"\\\" + o[k]).length))); } } return fmt; } var fmt = d4.format(\\\"yyyy-MM-dd hh:mm:ss\\\"); console.log(fmt)//2048-01-13 16:51:20 \"]},\"1418\":{\"h\":\"自定义对象\",\"t\":[\"JS除了一些常用方法和类以外,允许我们自己定义对象,在JS中自定义对象有三种可用的语法格式,分别为:\"]},\"1419\":{\"h\":\"第一种语法:调用系统的构造函数创建对象(Object)\",\"t\":[\"// 实例化对象 var obj = new Object(); // 给对象添加属性 obj.name = \\\"张三\\\"; obj.age = 35; obj.gender = \\\"男\\\"; // 给对象添加方法 obj.eat = function(food) { console.log(this.name + \\\"正在吃\\\" + food) } // 查看对象属性 console.log(obj.name);//张三 console.log(obj.age);//35 console.log(obj.gender);//男 // 调用对象方法 obj.eat(\\\"蛋糕\\\");//张三正在吃蛋糕 \"]},\"1420\":{\"h\":\"第二种语法: 自定义构造函数创建对象(function)\",\"t\":[\"// 准备一个构造方法 function Person(pname, page) { this.pname = pname; this.page = page; this.eat = function(food) { console.log(this.page + \\\"岁的\\\" + this.pname + \\\"正在吃\\\" + food); } } var p1 = new Person(\\\"张三\\\", 10); // 查看对象属性 console.log(p1.pname);//张三 console.log(p1.page);//10 // 调用对象方法 p1.eat(\\\"油条\\\");//10岁的张三正在吃油条 \"]},\"1421\":{\"h\":\"第三种语法: 字面量的方式创建对象(JSON)\",\"t\":[\"/* JSON var 对象名 ={属性名:属性值,属性名:属性值, ... ... ,方法名:方法声明,方法名:方法声明} */ var person = { name: \\\"晓明\\\", gender: \\\"男\\\", age: 10, eat: function(food) { console.log(this.age + \\\"岁的\\\" + this.gender + \\\"孩儿\\\" + this.name + \\\"正在吃\\\" + food) } }; // 查看对象属性 // 调用对象方法 console.log(person.name) console.log(person.gender) console.log(person.age) person.eat(\\\"馒头\\\") \"]},\"1422\":{\"h\":\"原型\"},\"1423\":{\"h\":\"获取原型对象\",\"t\":[\"当我们用构造方法创建一个类时,在内存会预先调用构造方法创建一个对象,这对象我们称之为原型对象,构造方法对象中有一个prototype属性指向该对象,原型对象中有一个constructor属性指向构造方法.获得一个类的原型对象可以通过类名.prototype的方式获得.\",\" // 准备一个构造方法 function Person(pname, page) { this.pname = pname; this.page = page; this.eat = function(food) { console.log(this.page + \\\"岁的\\\" + this.pname + \\\"正在吃\\\" + food); } } console.log(Person) // Constructor对象 构造方法对象 console.log(Person.prototype) \"]},\"1424\":{\"h\":\"当前类对象和原型的关系\",\"t\":[\"当前类的每一个对象内部有一个 _proto_的一个属性,指向他们的原型, 当我们用对象获取属性和调用方法时,如果当前对象中没有,那么会去他们所对应的原型对象中去找,也就是说,我们通过对原型的操作可以实现为一个类所有的对象添加属性和方法.\",\" // 准备一个构造方法 function Person(pname, page) { this.pname = pname; this.page = page; this.eat = function(food) { console.log(this.page + \\\"岁的\\\" + this.pname + \\\"正在吃\\\" + food); } } console.log(Person) // Constructor对象 构造方法对象 console.log(Person.prototype) // 给Person所有的对象增加属性和方法 //给Person的原型增加属性 Person.prototype.gender = \\\"男\\\"; //给Person的原型增加一个方法 Person.prototype.sleep = function() { console.log(this.page + \\\"岁的\\\" + this.gender + \\\"孩儿\\\" + this.pname + \\\"正在睡觉\\\"); } var p1 = new Person(\\\"张三\\\", 10); p1.eat(\\\"蛋挞\\\")//10岁的张三正在吃蛋挞 p1.sleep();//10岁的男孩儿张三正在睡觉 var p2 = new Person(\\\"李四\\\", 8); p2.eat(\\\"牛角面包\\\")//8岁的李四正在吃牛角面包 p2.sleep()//8岁的男孩儿李四正在睡觉 console.log(p1); console.log(p2); \"]},\"1425\":{\"h\":\"原型链\",\"t\":[\"一个类的原型是一个Object类的对象,也就是说 ,原型也有一个_proto_属性,指向Object的原型对象,那么也就是说Person.prototype中没有的属性和方法会继续向Object .prototype去找,也就是说,我们在Object原型中添加的属性和方法,我们在person1和person2中也可以使用.那么这种连续的 _proto_属性指向就形成了原型链\",\" // 准备一个构造方法 function Person(pname, page) { this.pname = pname; this.page = page; this.eat = function(food) { console.log(this.page + \\\"岁的\\\" + this.pname + \\\"正在吃\\\" + food); } } // 给所有的对象增加属性和方法 //给最终原型增加属性 Object.prototype.gender = \\\"男\\\"; //给Person的原型增加一个方法 Object.prototype.sleep = function() { console.log(this.page + \\\"岁的\\\" + this.gender + \\\"孩儿\\\" + this.pname + \\\"正在睡觉\\\"); } var p1 = new Person(\\\"张三\\\", 10); p1.eat(\\\"蛋挞\\\")//10岁的张三正在吃蛋挞 p1.sleep();//10岁的男孩儿张三正在睡觉 var p2 = new Person(\\\"李四\\\", 8); p2.eat(\\\"牛角面包\\\")//8岁的李四正在吃牛角面包 p2.sleep()//8岁的男孩儿李四正在睡觉 console.log(p1); console.log(p2); \"]},\"1426\":{\"h\":\"事件\"},\"1427\":{\"h\":\"概念\"},\"1428\":{\"h\":\"什么是事件\",\"t\":[\"可以被浏览器侦测到的人或者浏览器本身的行为,人对浏览器或者浏览器对网页做了什么事,JS可以根据不同行为.绑定一些不同的响应代码处理,让浏览器和人的行为之间有一个交互\"]},\"1429\":{\"h\":\"事件的绑定和触发\",\"t\":[\"给页面上的元素先绑定事件 然后通过行为去触发\"]},\"1430\":{\"h\":\"常见的事件\"},\"1431\":{\"h\":\"鼠标事件\"},\"1432\":{\"h\":\"常用API\",\"t\":[\"属性\",\"描述\",\"DOM\",\"onclick\",\"当用户点击某个对象时调用的事件句柄。\",\"2\",\"oncontextmenu\",\"在用户点击鼠标右键打开上下文菜单时触发\",\"ondblclick\",\"当用户双击某个对象时调用的事件句柄。\",\"2\",\"onmousedown\",\"鼠标按钮被按下。\",\"2\",\"onmouseenter\",\"当鼠标指针移动到元素上时触发。\",\"2\",\"onmouseleave\",\"当鼠标指针移出元素时触发\",\"2\",\"onmousemove\",\"鼠标被移动。\",\"2\",\"onmouseover\",\"鼠标移到某元素之上。\",\"2\",\"onmouseout\",\"鼠标从某元素移开。\",\"2\",\"onmouseup\",\"鼠标按键被松开。\",\"2\"]},\"1433\":{\"h\":\"案例\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style> .d1 { width: 100px; height: 100px; background-color: greenyellow; } </style> <script> function fun1() { console.log(\\\"双击666\\\") } function fun2() { console.log(\\\"鼠标按下\\\") } function fun3() { console.log(\\\"鼠标抬起\\\") } function fun4() { console.log(\\\"鼠标进入\\\") } function fun5() { console.log(\\\"鼠标离开\\\") } function fun6() { console.log(\\\"鼠标移动\\\") } </script> </head> <body> <div class=\\\"d1\\\" ondblclick=\\\"fun1()\\\" onmousedown=\\\"fun2()\\\" onmouseup=\\\"fun3()\\\" onmouseenter=\\\"fun4()\\\" onmouseleave=\\\"fun5()\\\" onmousemove=\\\"fun6()\\\"> </div> </body> </html> \"]},\"1434\":{\"h\":\"键盘事件\"},\"1435\":{\"h\":\"常用API\",\"t\":[\"属性\",\"描述\",\"DOM\",\"onkeydown\",\"某个键盘按键被按下。\",\"2\",\"onkeypress\",\"某个键盘按键被按下并松开。\",\"2\",\"onkeyup\",\"某个键盘按键被松开。\",\"2\"]},\"1436\":{\"h\":\"案例\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun1() { console.info(\\\"按钮按下\\\") } function fun2() { console.info(\\\"按钮抬起\\\") } function fun3() { console.info(\\\"按钮按下并抬起\\\") } </script> </head> <body> <input type=\\\"text\\\" onkeydown=\\\"fun1()\\\" onkeyup=\\\"fun2()\\\" onkeypress=\\\"fun3()\\\" /> </body> </html> \"]},\"1437\":{\"h\":\"表单事件\"},\"1438\":{\"h\":\"常用API\",\"t\":[\"属性\",\"描述\",\"DOM\",\"onblur\",\"元素失去焦点时触发\",\"2\",\"onchange\",\"该事件在表单元素的内容改变时触发( <input>, <keygen>, <select>, 和 <textarea>)\",\"2\",\"onfocus\",\"元素获取焦点时触发\",\"2\",\"onfocusin\",\"元素即将获取焦点时触发\",\"2\",\"onfocusout\",\"元素即将失去焦点时触发\",\"2\",\"oninput\",\"元素获取用户输入时触发\",\"3\",\"onreset\",\"表单重置时触发\",\"2\",\"onsearch\",\"用户向搜索域输入文本时触发 ( <input=\\\"search\\\">)\",\"onselect\",\"用户选取文本时触发 ( <input> 和 <textarea>)\",\"2\",\"onsubmit\",\"表单提交时触发\",\"2\"]},\"1439\":{\"h\":\"案例\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun1() { console.log(\\\"获得焦点\\\"); } function fun2() { console.log(\\\"失去焦点\\\"); } function fun3() { console.log(\\\"正在输入\\\"); } // 只要输入了,就会触发 function fun4() { console.log(\\\"内容改变\\\"); } // 内部信息发生变化的同时,要失去焦点 function fun5(sel) { console.log(\\\"内容发生改变了\\\" + sel.value) } function fun6() { alert(\\\"发生了提交事件\\\"); // 做了一些运算之后 动态决定表单能否提交 return false; } function fun7() { console.log(\\\"发生了重置事件\\\"); return true; } </script> </head> <body> <form method=\\\"get\\\" action=\\\"https://www.baidu.com\\\" onsubmit=\\\"return fun6()\\\" onreset=\\\"return fun7()\\\"> <input name=\\\"\\\" value=\\\"\\\" type=\\\"text\\\" onfocus=\\\"fun1()\\\" onblur=\\\"fun2()\\\" oninput=\\\"fun3()\\\" onchange=\\\"fun4()\\\" /><br /> <select name=\\\"city\\\" onchange=\\\"fun5(this)\\\"> <option selected>-请选择城市-</option> <option value=\\\"1\\\">北京</option> <option value=\\\"2\\\">天津</option> <option value=\\\"3\\\">上海</option> <option value=\\\"4\\\">重庆</option> </select> <br /> <input type=\\\"submit\\\" value=\\\"提交数据\\\" /> <input type=\\\"reset\\\" value=\\\"重置数据\\\" /> </form> </body> </html> \"]},\"1440\":{\"h\":\"页面加载事件\"},\"1441\":{\"h\":\"常用API\",\"t\":[\"属性\",\"描述\",\"DOM\",\"onload\",\"页面加载时执行\"]},\"1442\":{\"h\":\"案例\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function testFun() { var in1 = document.getElementById(\\\"i1\\\"); var v1 = in1.value; console.log(v1) } </script> </head> <body onload=\\\"testFun()\\\"> <input type=\\\"text\\\" value=\\\"测试文字\\\" id=\\\"i1\\\" /> </body> </html> \"]},\"1443\":{\"h\":\"BOM编程\"},\"1444\":{\"h\":\"概述\"},\"1445\":{\"h\":\"认识BOM和DOM\"},\"1446\":{\"h\":\"什么是BOM\",\"t\":[\"BOM是BrowserObject Model的简写，即浏览器对象模型。\",\"BOM有一系列对象组成，是访问、控制、修改浏览器的属性的方法 BOM没有统一的标准(每种客户端都可以自定标准)。 BOM的顶层是window对象\"]},\"1447\":{\"h\":\"什么是DOM\",\"t\":[\"DOM是DocumentObject Model的简写，即文档对象模型。\",\"DOM用于XHTML、XML文档的应用程序接口(API)。 DOM提供一种结构化的文档描述方式，从而使HTML内容使用结构化的方式显示。 DOM由一系列对象组成，是访问、检索、修改XHTML文档内容与结构的标准方法。 DOM标准是由w3c制定与维护。DOM是跨平台与跨语言的。 DOM的顶层是document对象\",\"在上图中 , 红色框内是归DOM，绿色框内归BOM；也可以说DOM也是归BOM管的\"]},\"1448\":{\"h\":\"BOM与DOM的关系\",\"t\":[\"BOM编程 就是把整个浏览器抽象成一个对象(window),这个对象中有很多的属性和方法,访问这些属性或者调用这些方法就可以控制浏览器作出指定的行为 ; BOM 是为了操作浏览器出现的 API，window 是其根对象\",\"DOM编程` 就是把浏览器当前页面对应的文档抽象成一个对象(document),这个对象中有很多关于操作文档的一些属性和方法,访问这些属性和方法的时候,我们就可以通过代码动态控制页面上显示的内容; DOM 是为了操作文档出现的 API，document 是其根对象\"]},\"1449\":{\"h\":\"Window对象及常用方法\"},\"1450\":{\"h\":\"什么是Window对象\",\"t\":[\"Window 对象简单理解就是把浏览器抽象成一个对象,它表示一个浏览器窗口或一个框架。\",\"在客户端 JavaScript中 ，Window 对象是全局对象，所有的表达式都在当前的环境中计算。也就是说，要引用当前窗口根本不需要特殊的语法，可以把那个窗口的属性作为全局变量来使用。例如，可以只写document，而不必写 window.document。同样，可以把当前窗口对象的方法当作函数来使用，如只写alert()，而不必写 Window.alert()\",\"除了上面列出的属性和方法，Window 对象还实现了核心 JavaScript 所定义的所有全局属性和方法。Window 对象的 window 属性和 self 属性引用的都是它自己。当你想明确地引用当前窗口，而不仅仅是隐式地引用它时，可以使用这两个属性。除了这两个属性之外，parent 属性、top 属性以及frame[]数组都引用了与当前 Window 对象相关的其他 Window对象。\"]},\"1451\":{\"h\":\"Window对象属性\",\"t\":[\"属性\",\"描述\",\"closed\",\"返回窗口是否已被关闭。\",\"defaultStatus\",\"设置或返回窗口状态栏中的默认文本。\",\"document\",\"对 Document 对象的只读引用。(请参阅对象)\",\"frames\",\"返回窗口中所有命名的框架。该集合是 Window 对象的数组，每个 Window 对象在窗口中含有一个框架。\",\"history\",\"对 History 对象的只读引用。请参数 History 对象。\",\"innerHeight\",\"返回窗口的文档显示区的高度。\",\"innerWidth\",\"返回窗口的文档显示区的宽度。\",\"localStorage\",\"在浏览器中存储 key/value 对。没有过期时间。\",\"length\",\"设置或返回窗口中的框架数量。\",\"location\",\"用于窗口或框架的 Location 对象。请参阅 Location 对象。\",\"name\",\"设置或返回窗口的名称。\",\"navigator\",\"对 Navigator 对象的只读引用。请参数 Navigator 对象。\",\"opener\",\"返回对创建此窗口的窗口的引用。\",\"outerHeight\",\"返回窗口的外部高度，包含工具条与滚动条。\",\"outerWidth\",\"返回窗口的外部宽度，包含工具条与滚动条。\",\"pageXOffset\",\"设置或返回当前页面相对于窗口显示区左上角的 X 位置。\",\"pageYOffset\",\"设置或返回当前页面相对于窗口显示区左上角的 Y 位置。\",\"parent\",\"返回父窗口。\",\"screen\",\"对 Screen 对象的只读引用。请参数 Screen 对象。\",\"screenLeft\",\"返回相对于屏幕窗口的x坐标\",\"screenTop\",\"返回相对于屏幕窗口的y坐标\",\"screenX\",\"返回相对于屏幕窗口的x坐标\",\"sessionStorage\",\"在浏览器中存储 key/value 对。 在关闭窗口或标签页之后将会删除这些数据。\",\"screenY\",\"返回相对于屏幕窗口的y坐标\",\"self\",\"返回对当前窗口的引用。等价于 Window 属性。\",\"status\",\"设置窗口状态栏的文本。\",\"top\",\"返回最顶层的父窗口。\"]},\"1452\":{\"h\":\"Window对象方法\",\"t\":[\"方法\",\"描述\",\"alert()\",\"显示带有一段消息和一个确认按钮的警告框。\",\"atob()\",\"解码一个 base-64 编码的字符串。\",\"btoa()\",\"创建一个 base-64 编码的字符串。\",\"blur()\",\"把键盘焦点从顶层窗口移开。\",\"clearInterval()\",\"取消由 setInterval() 设置的 timeout。\",\"clearTimeout()\",\"取消由 setTimeout() 方法设置的 timeout。\",\"close()\",\"关闭浏览器窗口。\",\"confirm()\",\"显示带有一段消息以及确认按钮和取消按钮的对话框。\",\"createPopup()\",\"创建一个 pop-up 窗口。\",\"focus()\",\"把键盘焦点给予一个窗口。\",\"getSelection()\",\"返回一个 Selection 对象，表示用户选择的文本范围或光标的当前位置。\",\"getComputedStyle()\",\"获取指定元素的 CSS 样式。\",\"matchMedia()\",\"该方法用来检查 media query 语句，它返回一个 MediaQueryList对象。\",\"moveBy()\",\"可相对窗口的当前坐标把它移动指定的像素。\",\"moveTo()\",\"把窗口的左上角移动到一个指定的坐标。\",\"open()\",\"打开一个新的浏览器窗口或查找一个已命名的窗口。\",\"print()\",\"打印当前窗口的内容。\",\"prompt()\",\"显示可提示用户输入的对话框。\",\"resizeBy()\",\"按照指定的像素调整窗口的大小。\",\"resizeTo()\",\"把窗口的大小调整到指定的宽度和高度。\",\"scroll()\",\"已废弃。 该方法已经使用了 scrollTo() 方法来替代。\",\"scrollBy()\",\"按照指定的像素值来滚动内容。\",\"scrollTo()\",\"把内容滚动到指定的坐标。\",\"setInterval()\",\"按照指定的周期（以毫秒计）来调用函数或计算表达式。\",\"setTimeout()\",\"在指定的毫秒数后调用函数或计算表达式。\",\"stop()\",\"停止页面载入。\"]},\"1453\":{\"h\":\"Window弹窗\"},\"1454\":{\"h\":\"普通弹窗\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun1() { /* * 如果是使用window对象调用的方法和访问的属性 那么window对象都可以省略不写 * * */ window.alert(\\\"你好呀\\\"); //普通信息提示框 } </script> </head> <body> <input type=\\\"button\\\" value=\\\"测试按钮\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1455\":{\"h\":\"确认弹窗\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun1() { /* * 如果是使用window对象调用的方法和访问的属性 那么window对象都可以省略不写 * * */ var con = window.confirm(\\\"确定要删除***女友吗?\\\"); // 确认框 console.log(con); } </script> </head> <body> <input type=\\\"button\\\" value=\\\"测试按钮\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1456\":{\"h\":\"消息输入弹窗\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun1() { /* * 如果是使用window对象调用的方法和访问的属性 那么window对象都可以省略不写 * * */ var message = window.prompt(\\\"请输入3号女友的名字\\\", \\\"例如:小刚\\\"); // 信息输入框 console.log(message) } </script> </head> <body> <input type=\\\"button\\\" value=\\\"测试按钮\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1457\":{\"h\":\"定时器\"},\"1458\":{\"h\":\"循环执行任务\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> var intervalIDS = new Array(); // [1,2,3 ] // 循环执行的定时器任务 function startInterval() { // 2 var intervalID = window.setInterval( function() { var today = new Date(); var hours = today.getHours(); var minutes = today.getMinutes(); var seconds = today.getSeconds(); var str = hours + \\\"点\\\" + minutes + \\\"分\\\" + seconds + \\\"秒\\\"; var ta = document.getElementById(\\\"timeArea\\\"); ta.value = str; }, 1000 ); intervalIDS.push(intervalID); } function stopInterval() { while (intervalIDS.length > 0) { window.clearInterval(intervalIDS.shift()); } } </script> </head> <body> <input type=\\\"text\\\" id=\\\"timeArea\\\" /> <br /> <input type=\\\"button\\\" value=\\\"开始Interval\\\" onclick=\\\"startInterval()\\\" /> <input type=\\\"button\\\" value=\\\"结束Interval\\\" onclick=\\\"stopInterval()\\\" /> </body> </html> \"]},\"1459\":{\"h\":\"执行一次任务\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> var timeoutIDS = new Array(); // 执行一次的定时器任务 function startTimeout() { var timeoutID = window.setTimeout( function() { var today = new Date(); var hours = today.getHours(); var minutes = today.getMinutes(); var seconds = today.getSeconds(); var str = hours + \\\"点\\\" + minutes + \\\"分\\\" + seconds + \\\"秒\\\"; console.log(str) }, 5000 ); timeoutIDS.push(timeoutID); } function stopTimeout() { while (timeoutIDS.length > 0) { window.clearTimeout(timeoutIDS.shift()); } } </script> </head> <body> <input type=\\\"text\\\" id=\\\"timeArea\\\" /> <br /> <input type=\\\"button\\\" value=\\\"开始timeout\\\" onclick=\\\"startTimeout()\\\" /> <input type=\\\"button\\\" value=\\\"结束timeout\\\" onclick=\\\"stopTimeout()\\\" /> </body> </html> \"]},\"1460\":{\"h\":\"open与 close 方法\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun1() { window.open(\\\"https://www.baidu.com\\\") } function fun2() { window.close(); } </script> </head> <body> <input type=\\\"button\\\" value=\\\"打开百度\\\" onclick=\\\"fun1()\\\" /> <input type=\\\"button\\\" value=\\\"关闭页面\\\" onclick=\\\"fun2()\\\" /> </body> </html> \"]},\"1461\":{\"h\":\"BOM中其他对象\"},\"1462\":{\"h\":\"location对象\",\"t\":[\"location对象,是window对象的一个属性,代表浏览器上URL地址栏,使用location对象可以操作地址栏 \",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun1() { console.log(location.host); // 当前地址栏中的:服务器的IP+端口号 console.log(location.hostname); // 当前地址栏中的:IP console.log(location.port); // 当前地址栏中的:端口号 console.log(location.href); // 当前地址栏中的:地址栏中具体的文字 location.href = \\\"https://www.baidu.com\\\" //跳转到指定地址 } </script> </head> <body> <input type=\\\"button\\\" value=\\\"测试location\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1463\":{\"h\":\"history对象\",\"t\":[\"history对象是window对象的一个属性,代表浏览器访问历史记录,通过history的操作我们可以实现翻阅浏览器历史网页 \",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> //上一页 function fun1() { window.history.forward(); } //下一页 function fun2() { history.back(); } //跳转 function fun3() { history.go(2); // 正整数 向前跳转 * 页 负整数 向后跳转*页 } </script> </head> <body> <a href=\\\"a.html\\\" target=\\\"_self\\\">pageA</a> <input type=\\\"button\\\" value=\\\"向前\\\" onclick=\\\"fun1()\\\" /> <input type=\\\"button\\\" value=\\\"向后\\\" onclick=\\\"fun2()\\\" /> <input type=\\\"button\\\" value=\\\"go\\\" onclick=\\\"fun3()\\\" /> </body> </html> \"]},\"1464\":{\"h\":\"screen对象和navigator对象\",\"t\":[\"screen代表屏幕 , navigator代表浏览器软件本身,通过这两个对象可以获得屏幕和浏览器软件的一些信息\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun1() { console.info(window.screen.width)//当前屏幕宽度 console.info(window.screen.height)//当前屏幕高度 console.info(navigator.userAgent)//浏览器信息 console.info(navigator.appName)//浏览器名称 } </script> </head> <body onload=\\\"fun1()\\\"> </body> </html> \"]},\"1465\":{\"h\":\"初识CSS\"},\"1466\":{\"h\":\"引入\",\"t\":[\"CSS：cascading style sheets (层叠样式表) 层叠：样式的叠加 样式表：各种各样样式的集合\"]},\"1467\":{\"h\":\"为什么要学CSS\",\"t\":[\"CSS的作用：修饰HTML页面 用了CSS之后，样式和元素本身做到了分离的效果。\"]},\"1468\":{\"h\":\"HTML和CSS的关系\",\"t\":[\"先有HTML，先有页面，修饰页面\"]},\"1469\":{\"h\":\"CSS的语法格式\"},\"1470\":{\"h\":\"内联样式\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!-- 书写方式：内联样式（行内样式） 在标签中加入一个style属性，CSS的样式作为属性值 多个属性值之间用;进行拼接 --> <h1 style=\\\"color: deeppink;font-family: '宋体';\\\">这是一个h1标题</h1> </body> </html> \"]},\"1471\":{\"h\":\"内部样式\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <!-- 书写方式：内部样式： head标签中加入一个style标签，在里面定位到你需要修饰的元素，然后在{}中加入你要修饰的样式。 --> <style type=\\\"text/css\\\"> h1 { color: royalblue; font-family: 宋体; } </style> </head> <body> <h1>这是一个标题</h1> </body> </html> \"]},\"1472\":{\"h\":\"外部样式\",\"t\":[\"h1 { color: red; font-family: 宋体; } \",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <!--引入外部CSS资源：link--> <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"css/mystyle.css\\\" /> </head> <body> <h1>这是一个标题</h1> </body> </html> \"]},\"1473\":{\"h\":\"优先级\",\"t\":[\"CSS样式遵循就近原则: 即离元素越近的样式优先级越高\",\"所以: 内联样式 > 内部样式 > 外部样式\",\"在实际开发中我们常常使用的是外部样式,因为从莫种意义上来讲这种方式真正做到了 元素页面和样式 分离 \"]},\"1474\":{\"h\":\"DOM编程\"},\"1475\":{\"h\":\"概述\"},\"1476\":{\"h\":\"什么是DOM编程\",\"t\":[\"简单来说: DOM编程就是使用document对象的API完成对网页HTML文档进行动态修改,以实现网页数据和样式动态变化效果的编程.\"]},\"1477\":{\"h\":\"什么是Document\",\"t\":[\"document对象代表整个html文档，可用来访问页面中的所有元素，是最复杂的一个dom对象，可以说是学习好dom编程的关键所在。\"]},\"1478\":{\"h\":\"Document对象如何获取\",\"t\":[\"document对象是window对象的一个成员属性，通过window.document来访问，当然也可以直接使用document,根据HTML代码结构特点,document对象本身是一种树形结构的文档对象。\"]},\"1479\":{\"h\":\"DOM节点分类node\",\"t\":[\"结点对象: Node, document对象中的每一个分支点都是一个node对象,它有三个子类\",\"元素节点Element -> 如:<a href=\\\"链接地址\\\">我的链接</a>\",\"属性节点Attribute -> 如: href=\\\"链接地址\\\"\",\"文本节点Text -> 如 : 我的链接\"]},\"1480\":{\"h\":\"DOM操作的内容\",\"t\":[\"查询元素（获取元素,进而操作元素,或者元素的属性,文本）\",\"操作文本\",\"操作属性\",\"操作元素\",\"操作CSS样式（一个特殊的属性style）\"]},\"1481\":{\"h\":\"页面元素分析\"},\"1482\":{\"h\":\"页面代码\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title>页面分析</title> </head> <body> x <div id=\\\"d1\\\" style=\\\"width: 100px;height: 100px; border: 1px solid red;\\\"> 1a <span>hello</span> 2b <span>thank you</span> 3c <span>thank you very much</span> 4d </div> y </body> </html> \"]},\"1483\":{\"h\":\"树状图分析\"},\"1484\":{\"h\":\"Node节点常用属性和方法\"},\"1485\":{\"h\":\"属性\",\"t\":[\"属性名称\",\"类型\",\"说明\",\"nodeName\",\"String\",\"节点名称\",\"nodeValue\",\"String\",\"节点值\",\"nodeType\",\"Number\",\"节点类型\",\"parentNode\",\"Node\",\"父节点\",\"firstChild\",\"Node\",\"第一个子节点\",\"lastChild\",\"Node\",\"最后一个子节点\",\"childNodes\",\"NodeList\",\"所有子节点\",\"previousSibling\",\"Node\",\"前一个节点\",\"nextSibling\",\"Node\",\"后一个节点\",\"ownerDocument\",\"Document\",\"获得该节点所属的文档对象\",\"attributes\",\"Map\",\"代表一个节点的属性对象\"]},\"1486\":{\"h\":\"方法\",\"t\":[\"方法名称\",\"返回值\",\"说明\",\"hasChildNodes()\",\"Boolean\",\"当前节点是否有子节点\",\"appendChild(node)\",\"Node\",\"往当前节点上添加子节点\",\"removeChild(node)\",\"Node\",\"删除子节点\",\"replaceChild(oldNode, newNode)\",\"Node\",\"替换子节点\",\"insertBefore(newNode, refNode)\",\"Node\",\"在指定节点的前面插入新节点\"]},\"1487\":{\"h\":\"直接获取节点\"},\"1488\":{\"h\":\"根据ID获取:getElementById\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun1() { // 获得document对象 var element1 = document.getElementById(\\\"d1\\\"); console.log(element1); element1.innerText = \\\"这是我的div\\\"; } </script> </head> <body> <div id='d1' class=\\\"a\\\">这是第一个div</div> <div id='d2' class=\\\"a\\\">这是第二个div</div> <div id='d3' class=\\\"a\\\">这是第三个div</div> <hr /> <input type=\\\"button\\\" value=\\\"id值获取\\\" onclick='fun1()' /> </body> </html> \"]},\"1489\":{\"h\":\"根据Class获取:getElementsByClassName\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun2(className) { var elements = document.getElementsByClassName(className); console.log(elements) for (var i = 0; i < elements.length; i++) { console.log(elements[i]) } } </script> </head> <body> <div id='d1' class=\\\"a\\\">这是第一个div</div> <div id='d2' class=\\\"a\\\">这是第二个div</div> <div id='d3' class=\\\"a\\\">这是第三个div</div> <input id='i1' class=\\\"a\\\" name='name1' /> <div id='d4' class=\\\"b\\\" name='name1'>这是第四个div</div> <div id='d5' class=\\\"b\\\">这是第五个div</div> <hr /> <input type=\\\"button\\\" value=\\\"class属性值获取\\\" onclick='fun2(\\\"b\\\")' /> </body> </html> \"]},\"1490\":{\"h\":\"根据标签获取:getElementsByTagName\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun3() { var elements = document.getElementsByTagName(\\\"input\\\"); console.log(elements); for (var i = 0; i < elements.length; i++) { console.log(elements[i]) } } </script> </head> <body> 爱好: <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"1\\\" />篮球 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"2\\\" />足球 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"3\\\" />羽毛球 <hr /> <input type=\\\"button\\\" value=\\\"标签名获取\\\" onclick='fun3()' /> </body> </html> \"]},\"1491\":{\"h\":\"根据name获取:getElementsByName\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun4() { var elements = document.getElementsByName(\\\"hobby\\\"); console.log(elements); for (var i = 0; i < elements.length; i++) { console.log(elements[i]) } } </script> </head> <body> 爱好: <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"1\\\" />篮球 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"2\\\" />足球 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"3\\\" />羽毛球 <hr /> <input type=\\\"button\\\" value=\\\"name属性值获取\\\" onclick='fun4()' /> </body> </html> \"]},\"1492\":{\"h\":\"操作节点的属性\"},\"1493\":{\"h\":\"方式一: 直接操作\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun1() { //获得属性值 var node = document.getElementById(\\\"in1\\\"); // 语法1 获得 节点.属性名 修改 节点.属性名 =属性值 console.log(node.type); console.log(node.value); //改变属性值 node.type = \\\"button\\\"; node.value = \\\"你好我也好\\\"; } </script> </head> <body> <input type=\\\"text\\\" value=\\\"你好呀\\\" id=\\\"in1\\\" /> <hr /> <input type=\\\"button\\\" value=\\\"变\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1494\":{\"h\":\"方式二: getAttribute/setAttribute\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script> function fun1() { //获得属性值 var node = document.getElementById(\\\"in1\\\"); // 语法2 getAttribute setAttribute console.log(node.getAttribute(\\\"type\\\")); console.log(node.getAttribute(\\\"value\\\")); node.setAttribute(\\\"type\\\", \\\"button\\\"); node.setAttribute(\\\"value\\\", \\\"大家好\\\"); } </script> </head> <body> <input type=\\\"text\\\" value=\\\"你好呀\\\" id=\\\"in1\\\" /> <hr /> <input type=\\\"button\\\" value=\\\"变\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1495\":{\"h\":\"操作节点的样式\"},\"1496\":{\"h\":\"方式一: 节点.style.样式名=样式值\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style> #div1 { width: 100px; height: 100px; border: 1px solid red; } .a { background-color: lightblue; color: blue; font-size: 40px; } </style> <script> function fun1() { // 节点.style.样式名=样式值 var element = document.getElementById(\\\"div1\\\"); element.style.width = \\\"200px\\\"; element.style.height = \\\"200px\\\"; element.style.border = \\\"10px solid green\\\"; } </script> </head> <body> <div id=\\\"div1\\\"> 你好呀 </div> <hr /> <input type=\\\"button\\\" value=\\\"测试\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1497\":{\"h\":\"方式二: 修改class属性,影响div的样式\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style> #div1 { width: 100px; height: 100px; border: 1px solid red; } .a { background-color: lightblue; color: blue; font-size: 40px; } </style> <script> function fun1() { // 节点.style.样式名=样式值 var element = document.getElementById(\\\"div1\\\"); // css样式在更多的时候是以class选择器的形式作用到元素上 // 可以通过修改class属性,影响div的样式 element.setAttribute(\\\"class\\\", \\\"a\\\") } </script> </head> <body> <div id=\\\"div1\\\"> 你好呀 </div> <hr /> <input type=\\\"button\\\" value=\\\"测试\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1498\":{\"h\":\"操作标签文本\"},\"1499\":{\"h\":\"innerHTML : 操作标签中的所有代码\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style> div { border: 1px solid red; width: 200px; height: 200px; } </style> <script> function fun1() { var element1 = document.getElementById(\\\"d1\\\"); element1.innerHTML = \\\"<h1>一刻也不能分割</h1>\\\" var element2 = document.getElementById(\\\"i1\\\"); element2.value = \\\"无论我走到哪里\\\"; } </script> </head> <body> <div id='d1'> a <span>文字</span> b </div> <input type=\\\"text\\\" value=\\\"我和我的祖国\\\" id='i1' /> <input type=\\\"button\\\" value=\\\"修改内容\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1500\":{\"h\":\"innerText: 操作标签中的Text\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style> div { border: 1px solid red; width: 200px; height: 200px; } </style> <script> function fun1() { var element1 = document.getElementById(\\\"d1\\\"); element1.innerText=\\\"<h1>一刻也不能分割</h1>\\\" var element2 = document.getElementById(\\\"i1\\\"); element2.value = \\\"无论我走到哪里\\\"; } </script> </head> <body> <div id='d1'> a <span>文字</span> b </div> <input type=\\\"text\\\" value=\\\"我和我的祖国\\\" id='i1' /> <input type=\\\"button\\\" value=\\\"修改内容\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1501\":{\"h\":\"value : 操作表单的值\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style> div { border: 1px solid red; width: 200px; height: 200px; } </style> <script> function fun1() { var element2 = document.getElementById(\\\"i1\\\"); element2.value = \\\"无论我走到哪里\\\"; } </script> </head> <body> <input type=\\\"text\\\" value=\\\"我和我的祖国\\\" id='i1' /> <input type=\\\"button\\\" value=\\\"修改内容\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1502\":{\"h\":\"增加删除节点\"},\"1503\":{\"h\":\"创建元素: createElement()\"},\"1504\":{\"h\":\"增加元素: appendChild()\"},\"1505\":{\"h\":\"删除元素: removeChild()\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> <style> #d1 { border: 1px solid red; width: 80%; height: 200px; } </style> <script> function fun1() { var div1 = document.getElementById(\\\"d1\\\"); // 通过JS创建标签 var in1 = document.createElement(\\\"input\\\"); in1.setAttribute(\\\"type\\\", \\\"text\\\"); in1.setAttribute(\\\"value\\\", \\\"请输入内容\\\"); var in2 = document.createElement(\\\"input\\\"); in2.setAttribute(\\\"type\\\", \\\"password\\\"); in2.setAttribute(\\\"value\\\", \\\"123456789\\\"); var in3 = document.createElement(\\\"input\\\"); in3.setAttribute(\\\"type\\\", \\\"button\\\"); in3.setAttribute(\\\"value\\\", \\\"删除\\\"); var br = document.createElement(\\\"br\\\"); in3.onclick = function() { div1.removeChild(in1) div1.removeChild(in2) div1.removeChild(in3) div1.removeChild(br) } div1.appendChild(in1); div1.appendChild(in2); div1.appendChild(in3); div1.appendChild(br); } </script> </head> <body> <div id=\\\"d1\\\"> </div> <input type=\\\"button\\\" value=\\\"增加\\\" onclick=\\\"fun1()\\\" /> </body> </html> \"]},\"1506\":{\"h\":\"选择器\"},\"1507\":{\"h\":\"基本选择器\",\"t\":[\"优先级: id选择器>class选择器>元素选择器\"]},\"1508\":{\"h\":\"元素选择器\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> /* 【1】基本选择器：元素选择器： 通过元素的名字进行定位，它会获取页面上所有这个元素，无论藏的多深都可以获取到 格式： 元素名字{ css样式; } * */ h1 { color: red; } i { color: blue; } </style> </head> <body> <h1>我是<i>一个</i>标题</h1> <h1>我是一个标题</h1> <h1 class=\\\"mycls\\\">我是一个标题</h1> <h1>我是一个标题</h1> <h2 class=\\\"mycls\\\">我是h2标题</h2> <h2>我是h2标题</h2> <h2 id=\\\"myid\\\">我是h2标题</h2> </body> </html> \"]},\"1509\":{\"h\":\"类选择器\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> /* 【2】基本选择器：类选择器 应用场合：不同类型的标签使用相同的类型 格式： .class的名字{ css样式; } */ .mycls { color: green; } </style> </head> <body> <h1>我是<i>一个</i>标题</h1> <h1>我是一个标题</h1> <h1 class=\\\"mycls\\\">我是一个标题</h1> <h1>我是一个标题</h1> <h2 class=\\\"mycls\\\">我是h2标题</h2> <h2>我是h2标题</h2> <h2 id=\\\"myid\\\">我是h2标题</h2> </body> </html> \"]},\"1510\":{\"h\":\"ID选择器\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> /* 【3】基本选择器：id选择器： 应用场合：可以定位唯一的一个元素 不同的标签确实可以使用相同的id，但是一般我们会进行人为的控制，让id是可以唯一定位到一个元素。 格式： #id名字{ css样式; } */ #myid { color: yellow; } </style> </head> <body> <h1>我是<i>一个</i>标题</h1> <h1>我是一个标题</h1> <h1 class=\\\"mycls\\\">我是一个标题</h1> <h1>我是一个标题</h1> <h2 class=\\\"mycls\\\">我是h2标题</h2> <h2>我是h2标题</h2> <h2 id=\\\"myid\\\">我是h2标题</h2> </body> </html> \"]},\"1511\":{\"h\":\"关系选择器\"},\"1512\":{\"h\":\"行元素与块元素\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> /* 我们可以通俗的理解，把div理解为一个“塑料袋” div属于块级元素--》换行 span属于行内元素--》没有换行效果 span:里面的内容占多大，span包裹的区域就多大 */ div { border: 1px red solid; } span { border: 1px greenyellow solid; } </style> </head> <body> <div>啊啊啊啊啊<br />啊啊啊啊啊</div> <div>啊啊啊啊啊</div> <span>啊啊啊啊啊</span> <span>啊啊啊啊啊</span> <span>啊啊啊啊啊</span> </body> </html> \"]},\"1513\":{\"h\":\"关系选择器\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> /*关系选择器: * 后代选择器：只要是这个元素的后代，样式都会发生变化 * div下面的所有h1标签样式都会改变 */ /*div h1{ color: red; }*/ /*关系选择器：子代选择器只改变子标签的样式*/ div>h1 { color: royalblue; } span>h1 { color: yellow; } </style> </head> <body> <div> <h1>这是标题</h1> <h1>这是标题</h1> <h1>这是标题</h1> <h1>这是标题</h1> <h1>这是标题</h1> <span> <h1>这是标题</h1> <h1>这是标题</h1> <h1>这是标题</h1> <h1>这是标题</h1> <h1>这是标题</h1> </span> </div> </body> </html> \"]},\"1514\":{\"h\":\"属性选择器\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> /*属性选择器*/ input[type=\\\"password\\\"] { background-color: red; } input[type=\\\"text\\\"][value=\\\"zhaoss1\\\"] { background-color: yellow; } </style> </head> <body> <form> 用户名：<input type=\\\"text\\\" value=\\\"zhaoss1\\\" /> 用户名2：<input type=\\\"text\\\" value=\\\"zhaoss2\\\" /> 密码：<input type=\\\"password\\\" value=\\\"123123\\\" /> <input type=\\\"submit\\\" value=\\\"登录\\\" /> </form> </body> </html> \"]},\"1515\":{\"h\":\"伪类选择器\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> .mycls:hover { color: red; } </style> </head> <body> <h1 class=\\\"mycls\\\">我是标题</h1> </body> </html> \",\"一般伪类选择器都使用在超链接上:\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> /*设置静止状态*/ a:link { color: yellow; } /*设置鼠标悬浮状态*/ a:hover { color: red; } /*设置触发状态*/ a:active { color: blue; } /*设置完成状态*/ a:visited { color: green; } </style> </head> <body> <a href=\\\"index.html\\\">超链接</a> </body> </html> \"]},\"1516\":{\"h\":\"浮动\"},\"1517\":{\"h\":\"什么是浮动\",\"t\":[\"浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。\",\"CSS的 Float（浮动）使元素脱离文档流，按照指定的方向（左或右发生移动），直到它的外边缘碰到包含框或另一个浮动框的边框为止。\",\"说到脱离文档流要说一下什么是文档流，文档流是是文档中可显示对象在排列时所占用的位置/空间，而脱离文档流就是在页面中不占位置了。\"]},\"1518\":{\"h\":\"浮动演示\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> img { float: left; } </style> </head> <body> <img src=\\\"img/1.png\\\" /> 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷，不能违背的。 </body> </html> \"]},\"1519\":{\"h\":\"浮动原理\",\"t\":[\"请看下图，当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘：\",\"再请看下图，当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失\",\"如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。\",\"如下图所示，如果包含框太窄，无法容纳水平排列的三个浮动元素，那么其它浮动块向下移动，直到有足够的空间。如果浮动元素的高度不同，那么当它们向下移动时可能被其它浮动元素“卡住”：\"]},\"1520\":{\"h\":\"浮动语法\"},\"1521\":{\"h\":\"感受浮动\",\"t\":[\"初始化3个div\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--外层div--> <div style=\\\"background-color: pink;\\\"> <div style=\\\"width: 100px;height: 100px;background-color: chartreuse;\\\">11</div> <div style=\\\"width: 200px;height: 200px;background-color: coral;\\\">22</div> <div style=\\\"width: 300px;height: 300px;background-color: yellow\\\">33</div> </div> </body> </html> \",\"然后先给绿色div加上浮动\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--外层div--> <div style=\\\"background-color: pink;\\\"> <div style=\\\"width: 100px;height: 100px;background-color: chartreuse;float: left;\\\">11</div> <div style=\\\"width: 200px;height: 200px;background-color: coral;\\\">22</div> <div style=\\\"width: 300px;height: 300px;background-color: yellow\\\">33</div> </div> </body> </html> \",\"再给橙色div添加浮动\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--外层div--> <div style=\\\"background-color: pink;\\\"> <div style=\\\"width: 100px;height: 100px;background-color: chartreuse;float: left;\\\">11</div> <div style=\\\"width: 200px;height: 200px;background-color: coral;float: left;\\\">22</div> <div style=\\\"width: 300px;height: 300px;background-color: yellow\\\">33</div> </div> </body> </html> \",\"再给黄色div设置浮动\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--外层div--> <div style=\\\"background-color: pink;\\\"> <div style=\\\"width: 100px;height: 100px;background-color: chartreuse;float: left;\\\">11</div> <div style=\\\"width: 200px;height: 200px;background-color: coral;float: left;\\\">22</div> <div style=\\\"width: 300px;height: 300px;background-color: yellow;float: left;\\\">33</div> </div> </body> </html> \"]},\"1522\":{\"h\":\"清除浮动\"},\"1523\":{\"h\":\"方式一 : overflow:hidden\",\"t\":[\"给浮动的父节点加入一个属性overflow:hidden\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--外层div--> <div style=\\\"background-color: pink;overflow:hidden;\\\"> <div style=\\\"width: 100px;height: 100px;background-color: chartreuse;float: left;\\\">11</div> <div style=\\\"width: 200px;height: 200px;background-color: coral;float: left;\\\">22</div> <div style=\\\"width: 300px;height: 300px;background-color: yellow;float: left;\\\">33</div> </div> </body> </html> \"]},\"1524\":{\"h\":\"方式二: 改变父节点高度\",\"t\":[\"给浮动的父节点加入高度,将他撑起来\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--外层div--> <div style=\\\"background-color: pink;height: 400px;\\\"> <div style=\\\"width: 100px;height: 100px;background-color: chartreuse;float: left;\\\">11</div> <div style=\\\"width: 200px;height: 200px;background-color: coral;float: left;\\\">22</div> <div style=\\\"width: 300px;height: 300px;background-color: yellow;float: left;\\\">33</div> </div> </body> </html> \"]},\"1525\":{\"h\":\"方式三: clear: both\",\"t\":[\"受影响的元素加入 clear: both; 元素\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--外层div--> <div style=\\\"background-color: pink;\\\"> <div style=\\\"width: 100px;height: 100px;background-color: chartreuse;float: left;\\\">11</div> <div style=\\\"width: 200px;height: 200px;background-color: coral;float: left;\\\">22</div> <div style=\\\"width: 300px;height: 300px;background-color: yellow;float: left;\\\">33</div> </div> <div style=\\\"width: 500px;height: 500px;background-color: blueviolet;clear: both;\\\"></div> </body> </html> \"]},\"1526\":{\"h\":\"盒子模型\"},\"1527\":{\"h\":\"概述\",\"t\":[\"页面上也有很多元素，元素之间的布局/设计 依靠 盒子模型：\",\"所有HTML元素可以看作盒子，在CSS中，\\\"box model\\\"这一术语是用来设计和布局时使用。 CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。 盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。\",\"下面的图片说明了盒子模型(Box Model)：\",\"不同部分的说明：\",\"Margin(外边距)-清除边框外的区域，外边距是透明的。Border(边框)-围绕在内边距和内容外的边框。Padding(内边距)-清除内容周围的区域，内边距是透明的。Content(内容)-盒子的内容，显示文本和图像。\"]},\"1528\":{\"h\":\"简单的盒子模型\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> div { width: 100px; height: 100px; background-color: yellowgreen; margin-left: 100px; border: 4px red solid; } </style> </head> <body> <div>我是div</div> </body> </html> \"]},\"1529\":{\"h\":\"Demo\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> /*将所有元素的样式：外边距，边框，内边距全部设置为0*/ * { margin: 0px; border: 0px; padding: 0px; } #outer { width: 440px; height: 450px; background-color: lightskyblue; margin-left: 100px; margin-top: 100px; padding-top: 50px; padding-left: 60px; } #mydiv { width: 170px; height: 150px; background-color: pink; padding-top: 50px; padding-left: 30px; } </style> </head> <body> <div id=\\\"outer\\\"> <div id=\\\"mydiv\\\">我是div</div> </div> </body> </html> \"]},\"1530\":{\"h\":\"定位\"},\"1531\":{\"h\":\"概述\",\"t\":[\"position 属性指定了元素的定位类型\"]},\"1532\":{\"h\":\"静态定位（static）\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--静态定位： 如果我们不写position属性的话，相当于默认效果就是静态定位。 静态效果：就是元素出现在它本该出现的位置。一般使用静态定位可以直接省略不写。 --> <img src=\\\"img/1.png\\\" style=\\\"position:static;\\\" /> </body> </html> \"]},\"1533\":{\"h\":\"相对定位（relative）\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--相对定位： 相对元素自身所在的原来的位置进行定位。 可以设置 left,right,top,bottom四个属性 效果：在进行相对定位以后，元素原来所在的位置被保留了，被占用了--》保留站位其他元素的位置不会发生移动 一般情况下，left和right不会同时使用 ,选择一个方向即可.top和bottom不会同时使用,选择一个方向即可 优先级：左上>右下 --> <div style=\\\"width: 500px;height: 500px;background-color: pink;\\\"> <div style=\\\"width: 100px;height: 100px;background-color: bisque;\\\"></div> <div style=\\\"width: 100px;height: 100px;background-color: yellow;position: relative;bottom: 10px;right: 20px;\\\"> </div> <div style=\\\"width: 100px;height: 100px;background-color: green;\\\"></div> </div> </body> </html> \",\"应用场合 :\",\"元素在小范围移动的时候\",\"结合绝对定位使用\"]},\"1534\":{\"h\":\"堆叠顺序（z-index）\",\"t\":[\"设置堆叠顺序，设置元素谁在上谁在下\",\"注意 ：z-index属性要设置在定位的元素上,z-index值越大,层级越高,显示在上面\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> </head> <body> <!--相对定位： 相对元素自身所在的原来的位置进行定位。 可以设置 left,right,top,bottom四个属性 效果：在进行相对定位以后，元素原来所在的位置被保留了，被占用了--》保留站位其他元素的位置不会发生移动 一般情况下，left和right不会同时使用 ,选择一个方向即可.top和bottom不会同时使用,选择一个方向即可 优先级：左上>右下 --> <div style=\\\"width: 500px;height: 500px;background-color: pink;\\\"> <div style=\\\"width: 100px;height: 100px;background-color: bisque;position: relative;left: 10px;z-index: 10;\\\"> </div> <div style=\\\"width: 100px;height: 100px;background-color: yellow;position: relative;bottom: 10px;right: 20px;z-index: 90;\\\"> </div> <div style=\\\"width: 100px;height: 100px;background-color: green;\\\"></div> </div> </body> </html> \"]},\"1535\":{\"h\":\"绝对定位（absolute）\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> #outer { width: 500px; height: 500px; background-color: pink; margin-left: 300px; } #div01 { width: 100px; height: 100px; background-color: cornflowerblue; position: absolute; left: 30px; top: 50px; } #div02 { width: 100px; height: 100px; background-color: coral; } </style> </head> <body> <div id=\\\"outer\\\"> <div id=\\\"div01\\\">111</div> <div id=\\\"div02\\\">222</div> </div> </body> </html> \",\"暂时来说看到的效果：蓝色div相对body产生的位移，相对body进行位置的改变，然后蓝色div发生位移以后，原位置得到了释放。橙色div移动上去了！\",\"实际开发中，我们往往让蓝色div在粉色div中发生位移效果：\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> #outer { width: 500px; height: 500px; background-color: pink; margin-left: 300px; position: relative; /*直接设置一个相对定位*/ } #div01 { width: 100px; height: 100px; background-color: cornflowerblue; position: absolute; left: 30px; top: 50px; } #div02 { width: 100px; height: 100px; background-color: coral; } </style> </head> <body> <div id=\\\"outer\\\"> <div id=\\\"div01\\\">111</div> <div id=\\\"div02\\\">222</div> </div> </body> </html> \",\"当给一个元素设置了绝对定位的时候，它相对谁变化呢？\",\"它会向上一层一层的找父级节点是否有定位，如果直到找到body了也没有定位，那么就相对body进行变化，如果父级节点有定位（绝对定位，相对定位，固定定位），但是一般我们会配合使用父级为相对定位，当前元素为绝对定位，这样这个元素就会相对父级位置产生变化。无论是上面的哪一种，都会释放原来的位置，然后其他元素会占用那个位置。\",\"开发中建议使用：**父级节点relative定位，子级节点使用绝对定位 **\"]},\"1536\":{\"h\":\"固定定位（fixed）\",\"t\":[\"应用场合：在页面过长的时候，将某个元素固定在浏览器的某个位置上，当拉动滚动条的时候，这个元素位置不动。 \",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style type=\\\"text/css\\\"> #mydiv { width: 50px; height: 400px; background-color: cadetblue; /*固定定位*/ position: fixed; right: 0px; top: 300px; } </style> </head> <body> <div id=\\\"mydiv\\\"></div> <p>你好</p> <p>你好</p> <p>你好</p> <p>你好</p> <p>你好</p> <p>你好</p> <p>你好</p> </body> </html> \"]},\"1537\":{\"h\":\"初识JQuery\"},\"1538\":{\"h\":\"为什么要使用JQuery\"},\"1539\":{\"h\":\"使用原生JavaScript编码存在问题\",\"t\":[\"选择器功能弱 \",\"DOM操作繁琐之极\",\"浏览器兼容性不好\",\"动画功能弱\"]},\"1540\":{\"h\":\"JQuery的优点\",\"t\":[\"强大的选择器\",\"出色的DOM封装\",\"出色的浏览器兼容性\",\"强大的动画功能\",\"体积小，压缩后只有100KB左右\",\"可靠的事件处理机制\",\"使用隐式迭代简化编程\",\"丰富的插件支持\"]},\"1541\":{\"h\":\"什么是JQuery\",\"t\":[\"目前最流行的JavaScript函数库之一，对JavaScript进行了封装。并不是一门新语言。将常用的、复杂的操作进行函数化封装，直接调用，大大降低了使用JavaScript的难度，改变了使用JavaScript的习惯。jQuery能做的JavaScript也能做，但使用jQuery能大幅提高开发效率,由美国人JohnResig在2006年推出，目前最新版本是v3.5.1。宗旨：Write less，do more（写更少代码，做更多事情）。官方网址http://jquery.com/\"]},\"1542\":{\"h\":\"JQuery的版本\",\"t\":[\"1.x 兼容ie678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了，最终版本：1.12.4\",\"2.x 不兼容ie678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x\",\"3.x 不兼容ie678，只支持最新的浏览器。除非特殊要求，一般不会使用3.x版本的，很多老的jQuery插件不支持这个版本。目前该版本是官方主要更新维护的版本。\"]},\"1543\":{\"h\":\"JQuery的尝试\",\"t\":[\"实现隔行变色的效果，在使用jQuery实现效果之前，先使用在HTML中使用class属性直接标记、使用JavaScript来实现动态隔行变色，然后再采用jQuery来实现，可以明显体现到jQuery的方便和简单。\",\"jquery-3.5.1.min.js\"]},\"1544\":{\"h\":\"原生JavaScript方式实现\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> <style type=\\\"text/css\\\"> .a { background-color: greenyellow; } .b { background-color: yellowgreen; } .c { background-color: yellow; } </style> <script type=\\\"text/javascript\\\"> //页面加载后调用一个匿名函数 window.onload = function() { //获取所有的行 var arr = document.getElementsByTagName(\\\"tr\\\"); //对所有的行动态实现隔行变色 for (var i = 0; i < arr.length; i++) { if (i == 0) { arr[i].className = \\\"a\\\"; } else if (i % 2 == 1) { arr[i].className = \\\"b\\\"; } else { arr[i].className = \\\"c\\\"; } } } </script> </head> <body> <table class=\\\"datalist\\\"> <tr> <th scope=\\\"col\\\">Name</th> <th scope=\\\"col\\\">Class</th> <th scope=\\\"col\\\">Birthday</th> <th scope=\\\"col\\\">Constellation</th> <th scope=\\\"col\\\">Mobile</th> </tr> <tr> <td>isaac</td> <td>W13</td> <td>Jun 24th</td> <td>Can</td> <td>1118159</td> </tr> <tr> <td>fresheggs</td> <td>W610</td> <td>Nov 5th</td> <td>Scorpio</td> <td>1038818</td> </tr> <tr> <td>girlwing</td> <td>W210</td> <td>Sep 16th</td> <td>Virgo</td> <td>1307994</td> </tr> <tr> <td>tastestory</td> <td>W15</td> <td>Nov 29th</td> <td>Sagittarius</td> <td>1095245</td> </tr> </table> </body> </html> \"]},\"1545\":{\"h\":\"使用JQuery方式实现\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> <!--引入jQuery文件--> <script src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script> $(function() { $(\\\"tr:odd\\\").css(\\\"backgroundColor\\\", \\\"yellowgreen\\\") $(\\\"tr:even\\\").css(\\\"backgroundColor\\\", \\\"lightyellow\\\") $(\\\"tr:first\\\").css(\\\"backgroundColor\\\", \\\"greenyellow\\\") }) </script> </head> <body> <table class=\\\"datalist\\\" summary=\\\"list of members in EE Studay\\\" id=\\\"oTable\\\"> <tr> <th scope=\\\"col\\\">Name</th> <th scope=\\\"col\\\">Class</th> <th scope=\\\"col\\\">Birthday</th> <th scope=\\\"col\\\">Constellation</th> <th scope=\\\"col\\\">Mobile</th> </tr> <tr> <td>isaac</td> <td>W13</td> <td>Jun 24th</td> <td>Cancer</td> <td>1118159</td> </tr> <tr> <td>fresheggs</td> <td>W610</td> <td>Nov 5th</td> <td>Scorpio</td> <td>1038818</td> </tr> <tr> <td>girlwing</td> <td>W210</td> <td>Sep 16th</td> <td>Virgo</td> <td>1307994</td> </tr> <tr> <td>tastestory</td> <td>W15</td> <td>Nov 29th</td> <td>Sagittarius</td> <td>1095245</td> </tr> </table> </body> </html> \"]},\"1546\":{\"h\":\"总结\",\"t\":[\"关于jQuery的使用需要先导入jQuery的js文件,jQuery本身就是一个JS文件。\",\"jquery-3.5.1.min.js是jQuery文件的压缩版,生产环境下推荐压缩版\",\"$是jQuery是使用最多的符号，它有多个作用。这个示例中就使用了的两个作用: \",\"作用1：页面加载函数jQuery(document).ready(function(){});和$(document).ready(function({}));简写为$(function(){}) , 相当于​window.onload=function(){}但是功能比window.onload更强大window.onload一个页面只能写一个,但是可以写多个$() 而不冲突, ​window.onload要等整个页面加载完后再执行(包括图片、超链接、音视频等)，但是$()的执行时间要早\",\"作用2：选择器标志 $(selector)\\n选择器。jQuery具有强大的选择器功能\"]},\"1547\":{\"h\":\"JQuery选择器\",\"t\":[\"jQuery提供了丰富的选择器功能，这个是jQuery相比JavaScript的一大优势。我们先来看一下jQuery API。可以看到提供了众多的选择器，可以非常方便简单的获取要选择的内容。\"]},\"1548\":{\"h\":\"基本选择器\",\"t\":[\"语法\",\"说明\",\"$(\\\"a\\\")\",\"标签选择器\",\"$(\\\"#id\\\")\",\"ID选择器\",\"$(\\\".class\\\")\",\"类选择器\",\"$(\\\" *\\\")\",\"统配选择器\",\"$(\\\"elem1,elem2,elem3\\\")\",\"并集选择器\",\"$(ul li)\",\"后代选择器\",\"$(ul>li)\",\"父子选择器\",\"$(prev + next)\",\"后面的第一个兄弟元素\",\"$(prev ~ next)\",\"后面所有的兄弟元素\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title>基本选择器</title> <style type=\\\"text/css\\\"> .myClass { background-color: aqua; } </style> <script type=\\\"text/javascript\\\" src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script type=\\\"text/javascript\\\"> // 必须自己会使用的选择器 id选择器 $(\\\"#id\\\") 类选择器 $('.class属性值') 标签选择器 $(\\\"标签名\\\") $(function() { //标签选择器 $(\\\"a\\\") $(\\\"h3\\\").addClass(\\\"myClass\\\"); $(\\\"p\\\").addClass(\\\"myClass\\\"); //ID选择器 $(\\\"#id\\\") $(\\\"p#id\\\") //$(\\\"#h31\\\").addClass(\\\"myClass\\\"); //$(\\\"h3#h31\\\").addClass(\\\"myClass\\\"); //类选择器 $(\\\".class\\\") $(\\\"h2.class\\\") //$(\\\".red1\\\").addClass(\\\"myClass\\\"); //通配选择器 $(\\\"*\\\") //$(\\\"*\\\").addClass(\\\"myClass\\\"); //并集选择器$(\\\"elem1,elem2,elem3\\\") //$(\\\"#h31,span,div\\\").addClass(\\\"myClass\\\"); //后代选择器$(ul li) //$(\\\"p span\\\").addClass(\\\"myClass\\\"); //父子选择器 $(ul>li) //$(\\\"p>span\\\").addClass(\\\"myClass\\\"); //后面第一个兄弟元素 prev + next //$(\\\"h3+p\\\").addClass(\\\"myClass\\\"); //后面所有的兄弟元素 prev ~ next // $(\\\"h3~p\\\").addClass(\\\"myClass\\\"); }); </script> </head> <body> <h3 id=\\\"h31\\\">JSP</h3> <p> JSP全名为Java Server Pages，中文名叫java服务器页面， 其根本是一个简化的<span>Servlet</span>设计， 它[1] 是 由Sun Microsystems公司倡导、许多公司参与一起建立的一种 动态网页技术标准。JSP技术有点类似ASP技术，它是在传统的网 页<em><span>HTML</span></em>（标准通用标记语言的子集） 文件(*.htm,*.html) 中插入Java程序段(Scriptlet)和JSP 标记(tag)，从而形成JSP文件，后缀名为(*.jsp)。 用JSP开发 的Web应用是跨平台的，既能在Linux下运行，也能在其他操作系 统上运行。 </p> <h3 id=\\\"h32\\\" class=\\\"red1\\\">Servlet</h3> <p> Servlet（Server Applet）是Java Servlet的简称，是为小服 务程序或服务连接器，用Java编写的服务器端程序，主要功能在于 交互式地浏览和修改数据，生成动态Web内容。 </p> <p class=\\\"red1\\\"> 狭义的Servlet是指Java语言实现的一个接口，广义的Servlet 是指任何实现了这个Servlet接口的类，一般情况下，人们将 Servlet理解为后者。Servlet运行于支持Java的应用服务器中。 从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情 况下Servlet只用来扩展基于HTTP协议的Web服务器。 </p> <div> <p>div p</p> </div> <span>span</span> <p class=\\\"red1\\\"> 狭义的Servlet是指Java语言实现的一个接口，广义的Servlet 是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet 理解为后者。Servlet运行于支持Java的应用服务器中。从原理上讲， Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用 来扩展基于HTTP协议的Web服务器。 </p> </body> </html> \"]},\"1549\":{\"h\":\"属性选择器\",\"t\":[\"语法\",\"说明\",\"[attribute]\",\"匹配包含给定属性的元素\",\"[attribute1][attribute2]\",\"复合属性选择器，需要同时满足多个属性\",\"[attribute=value]\",\"匹配给定的属性是某个特定值的元素\",\"[attribute!=value]\",\"匹配所有属性不等于特定值的元素\",\"[attribute^=value]\",\"匹配给定的属性是以某些值开始的元素\",\"[attribute$=value]\",\"匹配给定的属性是以某些值结尾的元素\",\"[attribute *=value]\",\"匹配给定的属性是以包含某些值的元素\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title>属性选择器</title> <style type=\\\"text/css\\\"> .myClass { background-color: aqua; } </style> <script src=\\\"js/jquery-3.5.1.min.js\\\" type=\\\"text/javascript\\\" charset=\\\"utf-8\\\"></script> <script type=\\\"text/javascript\\\"> $(function() { //[attribute] // $(\\\"a\\\").addClass(\\\"myClass\\\"); // $(\\\"a[href]\\\").addClass(\\\"myClass\\\"); //[attribute1][attribute2] // $(\\\"a[href][title]\\\").addClass(\\\"myClass\\\"); //[attribute=value] //$(\\\"a[href='film-2.html']\\\").addClass(\\\"myClass\\\"); //[attribute!=value] //$(\\\"a[href][href!='film-2.html']\\\").addClass(\\\"myClass\\\"); //[attribute^=value] //$(\\\"a[href^='http']\\\").addClass(\\\"myClass\\\"); //[attribute$=value //$(\\\"a[href$='htm']\\\").addClass(\\\"myClass\\\"); //[attribute*=value] // $(\\\"a[href*='mashibing']\\\").addClass(\\\"myClass\\\"); }); </script> </head> <body> <ul id=\\\"meturing\\\"> <li> <a href=\\\"http://www.baidu.com\\\">青花瓷</a> </li> <li> <a href=\\\"http://www.baidu.com\\\">小朋友,你是否有很多问号</a> </li> <li> <a href=\\\"http://www.baidu.com\\\">羞答答的玫瑰静悄悄的开</a> </li> <li> <a href=\\\"http://www.baidu.com\\\">月半小夜曲</a> </li> <li> <a href=\\\"http://www.baidu.com\\\">单恋一枝花</a> <ul id=\\\"film\\\"> <li> <a href=\\\"film-1.html\\\">乱世佳人</a> </li> <li> <a href=\\\"film-2.html\\\" title=\\\"阿郎的故事\\\">阿郎的故事</a> </li> <li id=\\\"film3\\\"> <a href=\\\"film-3.html\\\">阿甘正传</a> </li> <li> <a href=\\\"http://www.mashibing.com/film/film-4.htm\\\" title=\\\"鲁冰花\\\">鲁冰花</a> </li> <li> <a name=\\\"film-5.htm\\\" title=\\\"太行山上\\\">太行山上</a> </li> <li>无问西东</li> </ul> </li> </ul> </body> </html> \"]},\"1550\":{\"h\":\"位置选择器\"},\"1551\":{\"h\":\"针对整个页面而言\",\"t\":[\"语法\",\"说明\",\":first\",\"获取第一个元素\",\":last\",\"获取最后一个元素\",\":odd\",\"匹配所有索引值为奇数的元素，从0 开始计数\",\":even\",\"匹配所有索引值为偶数的元素，从0 开始计数\",\":eq(n)\",\"匹配一个给定索引值的元素\",\":gt(n)\",\"匹配所有大于给定索引值的元素\",\":lt(n)\",\"匹配所有小于给定索引值的元素\"]},\"1552\":{\"h\":\"针对上级标签而言\",\"t\":[\"语法\",\"说明\",\":first-child\",\"匹配第一个子元素\",\":last-child\",\"匹配最后一个子元素\",\":only-child\",\"如果某个元素是父元素中唯一的子元素，将会被匹配\",\":nth-child(n)\",\"匹配其父元素下的第N个子\",\":nth-child(odd)\",\"匹配其父元素下的奇元素\",\":nth-child(even)\",\"匹配其父元素下的偶元素\",\"注意：nth-child()选择器编号是从1开始，而其他选择器从0开始\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title>位置选择器</title> <style type=\\\"text/css\\\"> div { border: 1px solid red; } .myClass { background-color: aqua; } </style> <script src=\\\"js/jquery-3.5.1.min.js\\\" type=\\\"text/javascript\\\" charset=\\\"utf-8\\\"></script> <script type=\\\"text/javascript\\\"> $(function() { //位置针对整个页面 //:first :last :odd :even //$(\\\"p:first\\\").addClass(\\\"myClass\\\"); //$(\\\"p:last\\\").addClass(\\\"myClass\\\"); //$(\\\"p:odd\\\").addClass(\\\"myClass\\\");//索引从0开始 奇数的索引 1 3 5 第偶数的元素 //$(\\\"p:even\\\").addClass(\\\"myClass\\\"); // //:eq(n) :gt(n) :lt(n) //$(\\\"p:eq(4)\\\").addClass(\\\"myClass\\\"); //equals //$(\\\"p:lt(4)\\\").addClass(\\\"myClass\\\");//less than //$(\\\"p:gt(4)\\\").addClass(\\\"myClass\\\");//greater than //位置针对上级标签 //:first-child :last-child :only-child //$(\\\"p:first-child\\\").addClass(\\\"myClass\\\"); //$(\\\"p:last-child\\\").addClass(\\\"myClass\\\"); //$(\\\"p:only-child\\\").addClass(\\\"myClass\\\"); //:nth-child(n) :nth-child(odd|even) :nth-child(xn+y) //索引从0开始 只有此处从1开始 //$(\\\"p:nth-child(2)\\\").addClass(\\\"myClass\\\"); //$(\\\"p:nth-child(odd)\\\").addClass(\\\"myClass\\\"); //$(\\\"p:nth-child(even)\\\").addClass(\\\"myClass\\\"); //$(\\\"p:nth-child(3n+1)\\\").addClass(\\\"myClass\\\");//n=0,1,2,3 }); </script> </head> <body> <div> <p>1. JavaSE</p> <p>2. Oracle</p> </div> <div> <p>3. HTML/CSS/JS</p> <p>4. jQuery/EasyUI</p> <p>5. JSP/Servlet/Ajax</p> </div> <div> <p>6. SSM</p> <p>7. SpringBoot/SpringCloud/SpringData</p> <p>8. Maven/Linux/p> <p>9. Redis/Solr/Nginx</p> <p>10. SpringBoot/SpringCloud/SpringData</p> <p>11. SpringBoot/SpringCloud/SpringData</p> <p>12. SpringBoot/SpringCloud/SpringData</p> </div> <div> <p>13. 就业指导</p> </div> </body> </html> \"]},\"1553\":{\"h\":\"表单选择器\"},\"1554\":{\"h\":\"关于表单项选择\",\"t\":[\"语法\",\"说明\",\":text\",\"匹配所有的text\",\":password\",\"匹配所有的password\",\":radio\",\"匹配所有的radio\",\":checkbox\",\"匹配所有的checkbox\",\":hidden\",\"匹配所有的hidden\",\":file\",\"匹配所有的file\",\":submit\",\"匹配所有的submit\",\":input\",\"匹配所有的input\"]},\"1555\":{\"h\":\"关于表单状态选择\",\"t\":[\"语法\",\"说明\",\":selected\",\"选择状态\",\":checked\",\"选中状态\",\":enabled\",\"启用状态\",\":disabled\",\"禁用状态\",\":hidden\",\"隐藏状态\",\":visible\",\"可见状态\",\"注意$(\\\"input\\\")和$(\\\":input\\\")的区别\",\"$(\\\"input\\\")标签选择器，只匹配input标签$(\\\":input\\\")匹配所有 input, textarea, select 和 button 元素\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title>表单选择器</title> <style type=\\\"text/css\\\"> .myClass { background-color: aqua; } </style> <script src=\\\"js/jquery-3.5.1.min.js\\\" type=\\\"text/javascript\\\" charset=\\\"utf-8\\\"></script> <script type=\\\"text/javascript\\\"> $(function() { //:text :password :radio :checkbox :hidden :file :submit //var arr =$(\\\"input\\\"); // 标签名选择器 //var arr = $(\\\"input[type=hidden]\\\"); //var arr = $(\\\"input:hidden\\\"); //:input 匹配所有 input, textarea, select 和 button 元素 //var arr = $(\\\"input,select,textarea,button\\\"); //var arr = $(\\\":input\\\"); //:selected :checked :enabled :disabled //var arr = $(\\\":disabled\\\"); //var arr = $(\\\":enabled\\\"); //var arr = $(\\\":input:not(:disabled)\\\"); //var arr = $(\\\":checked\\\"); //var arr = $(\\\":selected\\\"); //:hidden :visible //var arr = $(\\\"input:hidden\\\") /* var arr = $(\\\":input:visible\\\") for(var i = 0; i < arr.length; i++) { console.info(arr[i]); }*/ }); </script> </head> <body> <h3>注册用户</h3> <form action=\\\"\\\" method=\\\"get\\\"> <table border=\\\"1\\\" width=\\\"40%\\\"> <tr> <td>用户名</td> <td> <input type=\\\"text\\\" name=\\\"username\\\" value=\\\"请输入姓名\\\" /> <input type=\\\"hidden\\\" name=\\\"username\\\" id=\\\"username\\\" value=\\\"请输入姓名\\\" /> </td> </tr> <tr> <td>密 码</td> <td><input type=\\\"password\\\" name=\\\"pwd\\\" id=\\\"pwd\\\" disabled=\\\"disabled\\\" /></td> </tr> <tr> <td>确认密码</td> <td><input type=\\\"color\\\" name=\\\"repwd\\\" id=\\\"repwd\\\" /></td> </tr> <tr> <td>性别</td> <td> <input type=\\\"radio\\\" name=\\\"sex\\\" value=\\\"男\\\" />男 <input type=\\\"radio\\\" name=\\\"sex\\\" checked=\\\"checked\\\" value=\\\"女\\\" />女 </td> </tr> <tr> <td>年龄</td> <td><input type=\\\"text\\\" min=\\\"6\\\" max=\\\"30\\\" name=\\\"age\\\" id=\\\"age\\\" value=\\\"18\\\" /></td> </tr> <tr> <td>电子邮箱</td> <td><input type=\\\"text\\\" name=\\\"email\\\" id=\\\"email\\\" /></td> </tr> <tr> <td>籍贯</td> <td> <select name=\\\"pro\\\"> <option value=\\\"1\\\">京</option> <option value=\\\"2\\\" selected=\\\"selected\\\">津</option> <option value=\\\"3\\\">冀</option> </select> </td> </tr> <tr> <td>自我介绍</td> <td> <textarea name=\\\"intro\\\"></textarea> </td> </tr> <tr> <td colspan=\\\"2\\\"> <input type=\\\"submit\\\" /> <input type=\\\"reset\\\" /> </td> </tr> </table> </form> </body> </html> \"]},\"1556\":{\"h\":\"初识BootStrap\"},\"1557\":{\"h\":\"BootStrap简介\",\"t\":[\"Bootstrap是美国Twitter公司的设计师Mark Otto和Jacob Thornton合作基于HTML、CSS、JavaScript开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。国内一些移动开发者较为熟悉的框架，如WeX5前端开源框架等，也是基于Bootstrap源码进行性能优化而来.\"]},\"1558\":{\"h\":\"版本\",\"t\":[\"目前使用较广的是版本2、3和4，其中2的最新版本的是2.3.2，3的最新版本是3.4.1，4的最新版本是4.5.1,在2018年1月下旬，Bootstrap团队发布了Bootstrap 4 正式版，4的最主要变化包括以下方面:\",\"从 Less 迁移到Sass\",\"改进网格系统\",\"缺省弹性框支持\",\"Dropped wells, thumbnails, andpanels for cards\",\"合并所有 HTML resets 到一个新的模块中：Reboot\",\"全新自定义选项\",\"不再支持 IE8\",\"重写所有的 JavaScript 插件\",\"改进工具提示和 popovers 的自动定位\",\"改进文档\",\"其他大量改进\"]},\"1559\":{\"h\":\"优点\",\"t\":[\"移动设备优先 自 Bootstrap 3 起，框架包含了贯穿于整个库的移动设备优先的样式。 \",\"浏览器支持 IE/火狐/Open/Chrome/Safari 所有的主流浏览器都支持 Bootstrap。 \",\"容易上手 只要您具备 HTML 和CSS 的基础知识，您就可以开始学习 Bootstrap\",\"快速开发bootstrap给我提供了大量的样式,布局解决方案和插件库,可以让程序员从基本的样式设计和调试上解放,快速搭建项目.同时bootstrap还给我们提供了大量的常用网页组件,可以让我们直接复制代码后,简单修改即可使用.ctrl-c ctrl-v\",\"响应式设计 Bootstrap的响应式 CSS 能够自适应于台式机、平板电脑和手机\",\"为开发人员创建接口提供了一个简洁统一的解决方案\",\"包含了功能强大的内置组件，易于定制\",\"提供了基于 Web 的定制\",\"开源\"]},\"1560\":{\"h\":\"搭建BootStrap\"},\"1561\":{\"h\":\"下载BootStrap文件\",\"t\":[\"boostrap中文网 : https://www.bootcss.com/ boostrap4下载地址 : https://v4.bootcss.com/docs/getting-started/download/\"]},\"1562\":{\"h\":\"引入工程目录\"},\"1563\":{\"h\":\"创建HTML文件\",\"t\":[\"在HTML文件中引入bootstrap中的css样式文件和JS文件\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <!-- 引入CSS文件 --> <link rel=\\\"stylesheet\\\" href=\\\"css/bootstrap.min.css\\\" /> <!-- 导入顺序:JQuery文件\\\\bootstrap.bundle.min.js\\\\bootstrap.min.js --> <script src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script src=\\\"js/bootstrap.bundle.min.js\\\"></script> <script src=\\\"js/bootstrap.min.js\\\"></script> <title></title> </head> <body> </body> </html> \"]},\"1564\":{\"h\":\"参考文档快速开发\",\"t\":[\"在HTML文件中引入bootstrap中的css样式文件和JS文件\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <!-- 引入CSS文件 --> <link rel=\\\"stylesheet\\\" href=\\\"css/bootstrap.min.css\\\" /> <!-- 导入顺序:JQuery文件\\\\bootstrap.bundle.min.js\\\\bootstrap.min.js --> <script src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script src=\\\"js/bootstrap.bundle.min.js\\\"></script> <script src=\\\"js/bootstrap.min.js\\\"></script> <title></title> </head> <body> <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Primary</button> <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\">Secondary</button> <button type=\\\"button\\\" class=\\\"btn btn-success\\\">Success</button> <button type=\\\"button\\\" class=\\\"btn btn-danger\\\">Danger</button> <button type=\\\"button\\\" class=\\\"btn btn-warning\\\">Warning</button> <button type=\\\"button\\\" class=\\\"btn btn-info\\\">Info</button> <button type=\\\"button\\\" class=\\\"btn btn-light\\\">Light</button> <button type=\\\"button\\\" class=\\\"btn btn-dark\\\">Dark</button> <button type=\\\"button\\\" class=\\\"btn btn-link\\\">Link</button> </body> </html> \"]},\"1565\":{\"h\":\"JQuery中的DOM编程\"},\"1566\":{\"h\":\"操作属性和样式\"},\"1567\":{\"h\":\"操作属性\",\"t\":[\"原生js 中的通过元素.属性名或者元素.setAttribute()方式操作元素属性,jQuery给我们封装了attr() 和removeAttr(),更加便捷的操作属性\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style> .a { background-color: aqua; } </style> <script type=\\\"text/javascript\\\" src=\\\"js/jquery.min.js\\\"></script> <script> /* *attr() * * */ function fun1() { console.log($(\\\"#f1\\\").attr(\\\"color\\\")) console.log($(\\\"#f1\\\").attr(\\\"id\\\")) console.log($(\\\"#f1\\\").attr(\\\"size\\\")) } function fun2() { $(\\\"#f1\\\").attr(\\\"color\\\", \\\"green\\\") $(\\\"#f1\\\").attr(\\\"size\\\", \\\"5\\\") } function fun3() { $(\\\"#f1\\\").removeAttr(\\\"color\\\") } function fun4() { $(\\\"#f1\\\").attr(\\\"class\\\", \\\"a\\\") } </script> </head> <body> <font id='f1' color=\\\"red\\\" size=\\\"7\\\">牛气冲天</font> <hr /> <input type=\\\"button\\\" value=\\\"获得属性\\\" onclick=\\\"fun1()\\\" /> <input type=\\\"button\\\" value=\\\"修改属性\\\" onclick=\\\"fun2()\\\" /> <input type=\\\"button\\\" value=\\\"删除属性\\\" onclick=\\\"fun3()\\\" /> <input type=\\\"button\\\" value=\\\"添加属性\\\" onclick=\\\"fun4()\\\" /> </body> </html> \"]},\"1568\":{\"h\":\"操作样式\",\"t\":[\"原生js 中的通过元素.style.样式名=’样式值’的方式操作元素样式,jQuery给我们封装了css()方法,便于我们操作样式,多数情况样式选择器使用类选择器,所以jQuery针对于这一情况,给我们封装了addClassremoveClasstoggleClass 三个方法\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style> .a { width: 100px; height: 100px; background-color: pink; } .b { border: 10px solid green; border-radius: 20px; } </style> <script type=\\\"text/javascript\\\" src=\\\"js/jquery.min.js\\\"></script> <!-- 元素.style.样式名= css() --> <script> function fun1() { //获得d1的css样式 console.log($(\\\"#d1\\\").css(\\\"width\\\")); console.log($(\\\"#d1\\\").css(\\\"height\\\")); console.log($(\\\"#d1\\\").css(\\\"background-color\\\")); //修改d1的css样式 $(\\\"#d1\\\").css(\\\"width\\\", \\\"200px\\\") $(\\\"#d1\\\").css(\\\"height\\\", \\\"300px\\\") $(\\\"#d1\\\").css(\\\"background-color\\\", \\\"yellow\\\"); } /* * CSS 样式在实际的研发中,往往通过类选择器作用到元素上 * jQuery就专门的封装了操作class属性值的方法 * */ function fun2() { $(\\\"#d2\\\").addClass(\\\"b\\\") } function fun3() { $(\\\"#d2\\\").removeClass(\\\"b\\\") } function fun4() { $(\\\"#d2\\\").toggleClass(\\\"b\\\") // 原来有b 则删除,如果没有,则增加b } </script> </head> <body> <div id=\\\"d1\\\" class=\\\"a\\\"> </div> <input type=\\\"button\\\" value=\\\"修改样式\\\" onclick=\\\"fun1()\\\" /> <div id=\\\"d2\\\" class=\\\"a\\\"> d2 </div> <input type=\\\"button\\\" value=\\\"添加class值\\\" onclick=\\\"fun2()\\\" /> <input type=\\\"button\\\" value=\\\"删除class值\\\" onclick=\\\"fun3()\\\" /> <input type=\\\"button\\\" value=\\\"切换class值\\\" onclick=\\\"fun4()\\\" /> </body> </html> \"]},\"1569\":{\"h\":\"操作文本和增删元素\"},\"1570\":{\"h\":\"操作文本\",\"t\":[\"原生js 中的通过元素.innerText和innerHTML和.value属性操作标签内部文本和内容,jQuery给我们封装了text(),html()和val()三个方法\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> <style> #d1 { width: 200px; height: 200px; border: 1px solid green; } </style> <script type=\\\"text/javascript\\\" src=\\\"js/jquery.min.js\\\"></script> <script> function fun1() { /* * innerText >>>> text(); * innerHTML >>>> html(); * value >>>> val(); * * */ console.log($(\\\"#d1\\\").text()) console.log($(\\\"#d1\\\").html()) console.log($(\\\"#i1\\\").val()) } function fun2() { //$(\\\"#d1\\\").text(\\\"<h1>牛气冲天</h1>\\\"); $(\\\"#d1\\\").html(\\\"<h1>牛气冲天</h1>\\\"); $(\\\"#i1\\\").val(\\\"你好\\\"); } function fun3() { //$(\\\"#d1\\\").html(\\\"\\\"); $(\\\"#d1\\\").empty(); // 清空内容 $(\\\"#i1\\\").val(\\\"\\\"); } </script> </head> <body> <input type=\\\"text\\\" value=\\\"这里是文字\\\" id='i1' /> <div id='d1'> a <span>xxx</span> b </div> <input type=\\\"button\\\" value=\\\"获得标签内容\\\" onclick=\\\"fun1()\\\" /> <input type=\\\"button\\\" value=\\\"修改标签内容\\\" onclick=\\\"fun2()\\\" /> <input type=\\\"button\\\" value=\\\"删除标签中的内容\\\" onclick=\\\"fun3()\\\" /> </body> </html> \"]},\"1571\":{\"h\":\"增删元素\",\"t\":[\"创建元素: $(&apos;<span>text<span>&apos;)\",\"追加元素: \",\"append()appendTo() 添加内部标签\",\"before()insertBefore() 向前增加标签\",\"after()insertAfter() 向后增加标签\",\"删除元素: \",\"empty() 清空字标签remove() 移除当前标签\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> <style> #d1 { width: 200px; height: 200px; border: 1px solid red; } </style> <script type=\\\"text/javascript\\\" src=\\\"js/jquery.min.js\\\"></script> <script> function fun1() { // 创建元素 var span1 = $(\\\"<span></span>\\\"); // 设置样式 span1.css(\\\"color\\\", \\\"green\\\"); span1.css(\\\"border\\\", \\\"1px solid blue\\\"); span1.css(\\\"background-color\\\", \\\"lightgray\\\") // 设置文字 span1.text(\\\"今天天气很好\\\"); $('#d1').append(span1) } function fun2() { var h = $(\\\"<h3>测试文字</h3>\\\").css(\\\"color\\\", \\\"red\\\").css(\\\"border\\\", \\\"1px solid green\\\") h.appendTo($('#d1')) } function fun3() { var span1 = $('<span style=\\\"color: red; border: 1px solid orangered;\\\">测试文字</span>') $(\\\"#d1\\\").before(span1); } function fun4() { var span1 = $('<span style=\\\"color: red; border: 1px solid orangered;\\\">测试文字</span>') span1.insertBefore($(\\\"#d1\\\")); } function fun5() { var span1 = $('<span style=\\\"color: red; border: 1px solid orangered;\\\">测试文字</span>') $(\\\"#d1\\\").after(span1); } function fun6() { var span1 = $('<span style=\\\"color: red; border: 1px solid orangered;\\\">测试文字</span>') span1.insertAfter($(\\\"#d1\\\")); } function fun7() { $(\\\"#d1\\\").empty() } function fun8() { $(\\\"#d1\\\").remove(); // 移除当前元素本身 } </script> </head> <body> <div id='d1'> </div> <input type=\\\"button\\\" value=\\\"testAppend\\\" onclick=\\\"fun1()\\\" /> <input type=\\\"button\\\" value=\\\"testAppendTo\\\" onclick=\\\"fun2()\\\" /> <input type=\\\"button\\\" value=\\\"testbefore\\\" onclick=\\\"fun3()\\\" /> <input type=\\\"button\\\" value=\\\"testinsertBefore\\\" onclick=\\\"fun4()\\\" /> <input type=\\\"button\\\" value=\\\"testafter\\\" onclick=\\\"fun5()\\\" /> <input type=\\\"button\\\" value=\\\"testInsertAfter\\\" onclick=\\\"fun6()\\\" /> <input type=\\\"button\\\" value=\\\"empty\\\" onclick=\\\"fun7()\\\" /> <input type=\\\"button\\\" value=\\\"remove\\\" onclick=\\\"fun8()\\\" /> </body> </html> \"]},\"1572\":{\"h\":\"操作事件\",\"t\":[\"无非就是绑定事件,触发事件,解绑定事件.原生js中的通过DOM编程和在标签上的事件属性绑定事件, jQuery中,我们可以使用 事件的绑定:bind(),live()(1.8及之前可用),on()(1.9之后推荐使用),one() . 事件解绑定:unbind() . 事件的触发:行为触发,jQuery方法触发\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <style> #d1 { width: 200px; height: 200px; border: 1px solid red; } </style> <script type=\\\"text/javascript\\\" src=\\\"js/jquery.min.js\\\"></script> <script> function fun1() { //给元素绑定事件 //原生JS /*var div1=document.getElementById(\\\"d1\\\") div1.onmouseover=function (){ alert(\\\"悬停\\\") }*/ /* bind 方法绑定事件 * 在jQuery中,事件的名称= 原始名称去掉 on * onclick click * onmouseover mouseover * * */ $(\\\"#d1\\\").bind('mouseover', function() { $('#d1').css(\\\"background-color\\\", 'yellow') }); /*事件名作为方法*/ $(\\\"#d1\\\").mouseleave(function() { $('#d1').css(\\\"background-color\\\", 'lightgreen') }); /* * one 绑定事件一次 * * */ /*$(\\\"#d1\\\").one('mouseover',function(){ $('#d1').css(\\\"background-color\\\",'yellow') }); $(\\\"#d1\\\").one('mouseleave',function(){ $('#d1').css(\\\"background-color\\\",'lightgreen') });*/ } function fun2() { //$(\\\"#d1\\\").unbind(); 接触绑定的所有事件 $(\\\"#d1\\\").unbind(\\\"mouseover\\\") // 接触绑定的指定事件 } function fun3() { // 相当于发生了获得焦点事件 $(\\\"#i1\\\").focus() } function fun4() { console.log(\\\"获得焦点了\\\") } </script> </head> <body> <div id='d1'> </div> <input type=\\\"button\\\" value=\\\"添加事件\\\" onclick=\\\"fun1()\\\" /> <input type=\\\"button\\\" value=\\\"解除绑定\\\" onclick=\\\"fun2()\\\" /> <br /> <input type=\\\"text\\\" id='i1' onfocus=\\\"fun4()\\\" /> <input type=\\\"button\\\" value=\\\"触发事件\\\" onclick=\\\"fun3()\\\" /> </body> </html> \"]},\"1573\":{\"h\":\"DOM对象和jQuery对象转换\",\"t\":[\"使用原生JS方式获得的页面结点对象我们可以简称为DOM对象,使用jQuery核心函数获得的对象我们可以简称为jQuery对象,这两种方式获得的对象即是是页面上同一个元素,那么也是不一样的,二者之间的API是不通用的.而在某些情况下,我们往往无法选择接收的对象,只能被动使用,那么这个时候我们可以让二者实现转换,以达到**可以调用API实现功能的目的\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> <script type=\\\"text/javascript\\\" src=\\\"js/jquery.min.js\\\"></script> <script> $(function() { //1 原生JS获取页面元素 原生DOM对象 var div1 = document.getElementById(\\\"d1\\\"); //2 jQuery方式获取页面元素 jQuery对象 var div2 = $(\\\"#d1\\\"); /* * DOM对象和jQuery对象之间的方法和属性是不通用 * * */ console.log(div1.innerText); console.log(div2.text()); console.log(div1) console.log(div2) // DOM对象如何调用jQuery函数 DOM对象转换为jQuery $(DOM) console.log($(div1).text()); // jQuery对象如何调用DOM对象的属性和方法 jQuery转换为DOM对象 get(0) [0] console.log(div2.get(0).innerText) console.log(div2[0].innerText) }) </script> </head> <body> <div id=\\\"d1\\\">测试文字</div> </body> </html> \",\"使用原生JSDOM对象转换成jQuery对象方式是$(dom对象),jQuery对象转换成DOM对象的方式是jQuery对象[0]/jQuery对象.get(0) \"]},\"1574\":{\"h\":\"迭代遍历方式\",\"t\":[\"jQuery给我们封装了一个快捷遍历元素的方法,接下来我们就使用一下jQuery中新的遍历方式 \",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> <script type=\\\"text/javascript\\\" src=\\\"js/jquery.min.js\\\"></script> <script> $(function() { var $lis = $('li') console.info($lis) for (var i = 0; i < $lis.length; i++) { /*遍历出的每个元素是DOM对象*/ console.info($lis[i].innerText) } for (var i in $lis) { console.info($lis[i].innerText) } /*遍历所有元素的方法*/ /* each每拿出一个元素 都会执行一次内部的function i 当前元素的所有 e 当前元素 DOM对象 * * */ $lis.each(function(i, e) { console.info(i + '>>>' + $(e).text()) }) $.each($lis, function(i, e) { console.info(i + '>>>' + $(e).text()) }) }) </script> </head> <body> <ul> <li>AI</li> <li>Python</li> <li>大数据</li> <li>JAVA</li> <li>前端</li> </ul> </body> </html> \"]},\"1575\":{\"h\":\"表单验证与正则表达式\"},\"1576\":{\"h\":\"一个简单的登录Demo\"},\"1577\":{\"h\":\"实现效果\"},\"1578\":{\"h\":\"验证要求\",\"t\":[\"用户名不能为空\",\"用户名长度大于等于6\",\"用户名中不能有数字\",\"密码不少于5位\",\"两次密码必须一致\",\"邮箱格式正确必须有@和. 例如:123456789@qq.com\"]},\"1579\":{\"h\":\"实现代码\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script type=\\\"text/javascript\\\" src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script> function checkUsername() { var username = $(\\\"#user\\\").val(); if (username == \\\"\\\") { // 不能为空字符串 $(\\\"#usertip\\\").html(\\\"<font color='red'>不能为空</font>\\\"); return false; } if (username.length <= 6) { // 长度不能少于6位 $(\\\"#usertip\\\").html(\\\"<font color='red'>长度必须在6位之上</font>\\\"); return false; } for (var i = 0; i < username.length; i++) { // zhangsan var c = username.charAt(i); if (c <= '9' && c >= '0') { $(\\\"#usertip\\\").html(\\\"<font color='red'>不能使用数字</font>\\\"); return false; } } // 提示OK $(\\\"#usertip\\\").html(\\\"<font color='green'>OK</font>\\\") return true; } function checkPassword() { var pwd = $(\\\"#pwd\\\").val(); if (pwd.length < 5) { $(\\\"#pwdtip\\\").html(\\\"<font color='red'>长度不能少于5位</font>\\\"); return false; } $(\\\"#pwdtip\\\").html(\\\"<font color='green'>OK</font>\\\"); return true; } function checkRepwd() { var p1 = $(\\\"#pwd\\\").val(); var p2 = $(\\\"#repwd\\\").val(); if (p1.length < 5 || p1 != p2) { $(\\\"#repwdtip\\\").html(\\\"<font color='red'>两次密码不一致</font>\\\"); return false; } $(\\\"#repwdtip\\\").html(\\\"<font color='green'>OK</font>\\\"); return true; } function checkEmail() { var em = $(\\\"#email\\\").val(); var index1 = em.indexOf(\\\"@\\\"); var index2 = em.indexOf(\\\".\\\"); if (index1 < 1 || index2 < 1) { $(\\\"#emailtip\\\").html(\\\"<font color='red'>邮箱格式有误</font>\\\"); return false; } $(\\\"#emailtip\\\").html(\\\"<font color='green'>OK</font>\\\"); return true; } function checkForm() { return checkUsername() && checkPassword() && checkRepwd() && checkEmail(); } </script> </head> <body> <table id=\\\"center\\\" border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"0\\\"> <form action=\\\"http://www.baidu.com\\\" method=\\\"get\\\" onsubmit=\\\"return checkForm()\\\"> <tr> <td>您的姓名：</td> <td> <input id=\\\"user\\\" type=\\\"text\\\" name=\\\"username\\\" onblur=\\\"checkUsername()\\\" /> <div id=\\\"usertip\\\" style=\\\"display: inline;\\\"></div> </td> </tr> <tr> <td>输入密码：</td> <td> <input id=\\\"pwd\\\" name=\\\"pwd\\\" type=\\\"password\\\" onblur=\\\"checkPassword()\\\" /> <div id=\\\"pwdtip\\\" style=\\\"display: inline;\\\"></div> </td> </tr> <tr> <td>再输入一遍密码：</td> <td> <input id=\\\"repwd\\\" type=\\\"password\\\" onblur=\\\"checkRepwd()\\\" /> <div id=\\\"repwdtip\\\" style=\\\"display: inline;\\\"></div> </td> </tr> <tr> <td>您的Email：</td> <td> <input id=\\\"email\\\" type=\\\"text\\\" onblur=\\\"checkEmail()\\\" /> <span id=\\\"emailtip\\\"></span> </td> </tr> <tr> <td colspan=\\\"2\\\"> <input type=\\\"submit\\\" value=\\\"注册\\\" class=\\\"rb1\\\" /> </td> </tr> </form> </table> </body> </html> \"]},\"1580\":{\"h\":\"注意事项\",\"t\":[\"对于表单的提交，要给form标签绑定onSubmit事件，而不是给submit按钮绑定onClick事件 ,onsubmit绑定的方法时要有return关键字,绑定的方法要返回true/false\",\"表单项内容不管输入的是字符串、数字、日期，js、jQuery、JSP接收后都是String类型\",\"表单的验证和String对象有密切关系 lengthcharAt(i) indexOf(\\\"@\\\")\",\"如果表单项内容为空，js收到的不是null，而是空字符串。判断条件不能写 username == null，而要写username==\\\"\\\"或username.length ==0\",\"验证出错要return false，验证无错要return true，并且 onsubmit=\\\"returncheckForm()\",\"该示例的缺点主要在于对于邮箱如果采用传统方式进行验证，代码繁琐并且不能保证严谨性,过度依赖String的API。对于邮箱、手机号码、邮政编码等验证，可以使用正则表达式进行验证，严谨而且简单。\"]},\"1581\":{\"h\":\"正则表达式\"},\"1582\":{\"h\":\"什么是正则表达式\",\"t\":[\"Regular Expression，在代码中常简写为regex,正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，该模式描述在搜索文本时要匹配的一个或多个字符串。\"]},\"1583\":{\"h\":\"为什么使用正则表达式\",\"t\":[\"正则表达式可以使文本的校验的代码更加简洁 正则表达式可以实现更加严谨细致的校验\"]},\"1584\":{\"h\":\"正则表达式举例\",\"t\":[\"匹配国内电话号码：\\\\d{3}-\\\\d{8}|\\\\d{4}-\\\\d{7} 匹配腾讯QQ号：[1-9][0-9]{4,} 匹配中国邮政编码：\\\\d{6} 匹配身份证：\\\\d{15}|\\\\d{18} 匹配由数字和26个英文字母组成的字符串 ^[A-Za-z0-9]+$ 匹配Email地址：[\\\\w]+(\\\\.[\\\\w]+)*@[\\\\w]+(\\\\.[\\\\w])+ 匹配中文字符的正则表达式： [\\\\u4e00-\\\\u9fa5][a-zA-Z]\"]},\"1585\":{\"h\":\"正则表达式的使用\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script type=\\\"text/javascript\\\" src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script> /* * 正则表达式不依赖jQuery * 正则表达式本身就是一个字符串 只不过该字符串用于表述一种规则 * * */ var reg = /^\\\\w?$/ var words = \\\"a\\\"; console.log(reg.test(words)) var regex1 = /^\\\\d{6}$/; var regex2 = /^1[3456789]\\\\d{9}$/; var regex3 = /^\\\\w{6,}@[0-9A-Za-z]{2,}(\\\\.[a-zA-Z]{2,3}){1,2}$/; </script> </head> <body> </body> </html> \"]},\"1586\":{\"h\":\"使用正则优化表单\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"> <title></title> <script type=\\\"text/javascript\\\" src=\\\"js/jquery.min.js\\\"></script> <script> function checkUsername() { var reg1 = /^\\\\D{6,}$/ var username = $(\\\"#user\\\").val(); if (!reg1.test(username)) { $(\\\"#usertip\\\").html(\\\"<font color='red'>格式必须是至少六位的非数字</font>\\\"); return false; } // 提示OK $(\\\"#usertip\\\").html(\\\"<font color='green'>OK</font>\\\") return true; } function checkPassword() { var reg2 = /^\\\\S{5,}$/ var pwd = $(\\\"#pwd\\\").val(); if (!reg2.test(pwd)) { $(\\\"#pwdtip\\\").html(\\\"<font color='red'>至少为5位非空格</font>\\\"); return false; } $(\\\"#pwdtip\\\").html(\\\"<font color='green'>OK</font>\\\"); return true; } function checkRepwd() { var p1 = $(\\\"#pwd\\\").val(); var p2 = $(\\\"#repwd\\\").val(); if (p1.length < 5 || p1 != p2) { $(\\\"#repwdtip\\\").html(\\\"<font color='red'>两次密码不一致</font>\\\"); return false; } $(\\\"#repwdtip\\\").html(\\\"<font color='green'>OK</font>\\\"); return true; } function checkEmail() { var em = $(\\\"#email\\\").val(); var regex3 = /^\\\\w{6,}@[0-9A-Za-z]{2,}(\\\\.[a-zA-Z]{2,3}){1,2}$/; if (!regex3.test(em)) { $(\\\"#emailtip\\\").html(\\\"<font color='red'>邮箱格式有误</font>\\\"); return false; } $(\\\"#emailtip\\\").html(\\\"<font color='green'>OK</font>\\\"); return true; } function checkForm() { return checkUsername() && checkPassword() && checkRepwd() && checkEmail(); } </script> </head> <body> <table id=\\\"center\\\" border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"0\\\"> <form action=\\\"http://www.baidu.com\\\" method=\\\"get\\\" onsubmit=\\\"return checkForm()\\\"> <tr> <td>您的姓名：</td> <td> <input id=\\\"user\\\" type=\\\"text\\\" name=\\\"username\\\" onblur=\\\"checkUsername()\\\" /> <div id=\\\"usertip\\\" style=\\\"display: inline;\\\"></div> </td> </tr> <tr> <td>输入密码：</td> <td> <input id=\\\"pwd\\\" name=\\\"pwd\\\" type=\\\"password\\\" onblur=\\\"checkPassword()\\\" /> <div id=\\\"pwdtip\\\" style=\\\"display: inline;\\\"></div> </td> </tr> <tr> <td>再输入一遍密码：</td> <td> <input id=\\\"repwd\\\" type=\\\"password\\\" onblur=\\\"checkRepwd()\\\" /> <div id=\\\"repwdtip\\\" style=\\\"display: inline;\\\"></div> </td> </tr> <tr> <td>您的Email：</td> <td> <input id=\\\"email\\\" type=\\\"text\\\" onblur=\\\"checkEmail()\\\" /> <span id=\\\"emailtip\\\"></span> </td> </tr> <tr> <td colspan=\\\"2\\\"> <input type=\\\"submit\\\" value=\\\"注册\\\" class=\\\"rb1\\\" /> </td> </tr> </form> </table> </body> </html> \"]},\"1587\":{\"h\":\"动画效果的使用\"},\"1588\":{\"h\":\"显示与隐藏\",\"t\":[\"实现简单显示动画效果方法show() 实现简单隐藏动画效果方法hide() 实现切换简单显示和隐藏动画效果方法toggle()\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\" /> <title></title> <style> #d1 { width: 200px; height: 200px; background-color: yellow; display: none; } </style> <script type=\\\"text/javascript\\\" src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script> function fun1() { /*$(\\\"#d1\\\").show(2000,'swing',function(){ alert(\\\"动画执行结束\\\") })*/ $(\\\"#d1\\\").show(2000); } function fun2() { $(\\\"#d1\\\").hide(3000) } function fun3() { $(\\\"#d1\\\").toggle(5000); // } </script> </head> <body> <div id=\\\"d1\\\"></div> <input type=\\\"button\\\" value=\\\"show\\\" onclick=\\\"fun1()\\\" /> <input type=\\\"button\\\" value=\\\"hide\\\" onclick=\\\"fun2()\\\" /> <input type=\\\"button\\\" value=\\\"toggle\\\" onclick=\\\"fun3()\\\" /> </body> </html> \"]},\"1589\":{\"h\":\"上下滑动\",\"t\":[\"实现向下滑动动画效果slideDown() 实现向上滑动动画效果slideUp() 实现滑动切换动画效果slideToggle()\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\" /> <title></title> <style> #d1 { width: 200px; height: 200px; background-color: yellow; display: none; } </style> <script type=\\\"text/javascript\\\" src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script> function fun1() { $(\\\"#d1\\\").slideDown(2000); } function fun2() { $(\\\"#d1\\\").slideUp(3000) } function fun3() { $(\\\"#d1\\\").slideToggle(5000); // } </script> </head> <body> <div id=\\\"d1\\\"></div> <input type=\\\"button\\\" value=\\\"slideDown\\\" onclick=\\\"fun1()\\\" /> <input type=\\\"button\\\" value=\\\"slideUp\\\" onclick=\\\"fun2()\\\" /> <input type=\\\"button\\\" value=\\\"slideToggle\\\" onclick=\\\"fun3()\\\" /> </body> </html> \"]},\"1590\":{\"h\":\"淡入淡出\",\"t\":[\"实现淡入动画效果方法fadeIn() 实现淡出动画效果方法fadeOut() 实现淡入淡出切换效果方法fadeToggle() 实现淡入之指定透明度效果方法fadeTo()\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\" /> <title></title> <style> #d1 { width: 200px; height: 200px; background-color: green; display: none; } </style> <script type=\\\"text/javascript\\\" src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script> function fun1() { $(\\\"#d1\\\").fadeIn(2000); } function fun2() { $(\\\"#d1\\\").fadeOut(3000) } function fun3() { $(\\\"#d1\\\").fadeToggle(5000); } function fun4() { $(\\\"#d1\\\").fadeTo(5000, 0.2); // 0-1 } </script> </head> <body> <div id=\\\"d1\\\"></div> <input type=\\\"button\\\" value=\\\"fadeIn\\\" onclick=\\\"fun1()\\\" /> <input type=\\\"button\\\" value=\\\"fadeOut\\\" onclick=\\\"fun2()\\\" /> <input type=\\\"button\\\" value=\\\"fadeToggle\\\" onclick=\\\"fun3()\\\" /> <input type=\\\"button\\\" value=\\\"fadeTo\\\" onclick=\\\"fun4()\\\" /> </body> </html> \"]},\"1591\":{\"h\":\"自定义动画\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> <style> #d1 { width: 200px; height: 200px; background-color: yellow; } </style> <script type=\\\"text/javascript\\\" src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script> $(function() { //$(\\\"\\\").animate({动画内容},执行时间,动画结束后要执行的方法) $(\\\"#d1\\\").animate({ width: \\\"100px\\\", height: \\\"100px\\\", opcity: 0.5, borderRadius: \\\"50px\\\" }, 2000, function() { alert(\\\"动画执行结束了\\\") }) }) </script> </head> <body> <div id=\\\"d1\\\"></div> </body> </html> \"]},\"1592\":{\"h\":\"BootStrap容器与栅格系统\"},\"1593\":{\"h\":\"容器\"},\"1594\":{\"h\":\"什么是容器\",\"t\":[\"Bootstrap 4 需要一个容器元素来包裹网站的内容,说白了就是要用一些标签来装其他的标签,这样便于我们对网页做整体的布局设计,一般我们选择用div来做容器,对应的容器类有两个,一个是固定容器 .container 一个是流容器 .container-fluid。\"]},\"1595\":{\"h\":\"容器类\",\"t\":[\".container 类用于固定宽度并支持响应式布局的容器。.container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。\"]},\"1596\":{\"h\":\"案例\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <!-- 引入CSS文件 --> <link rel=\\\"stylesheet\\\" href=\\\"css/bootstrap.min.css\\\" /> <!-- 导入顺序:JQuery文件\\\\bootstrap.bundle.min.js\\\\bootstrap.min.js --> <script src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script src=\\\"js/bootstrap.bundle.min.js\\\"></script> <script src=\\\"js/bootstrap.min.js\\\"></script> <title></title> </head> <body> <div class=\\\"container\\\"> <h1 style=\\\"background-color: gainsboro;\\\">我的第一个 Bootstrap 页面</h1> <p>这是一些文本。</p> </div> <div class=\\\"container-fluid\\\"> <h1 style=\\\"background-color: gainsboro;\\\">我的第一个 Bootstrap 页面</h1> <p>使用了 .container-fluid，100% 宽度，占据全部视口（viewport）的容器。</p> </div> </body> </html> \"]},\"1597\":{\"h\":\"二者区别\",\"t\":[\"固定容器的响应式布局规则是当窗口大小变化时,在指定的宽度范围内使用固定的宽度, 流容器的响应式布局规则是随着窗口大小的变化一同变化,横向全部占满\"]},\"1598\":{\"h\":\"固定容器的阈值\"},\"1599\":{\"h\":\"栅格系统\",\"t\":[\"Bootstrap 提供了一套响应式、移动设备优先的流式网格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多 12 列。我们也可以根据自己的需要定义列数. \"]},\"1600\":{\"h\":\"网格分类\",\"t\":[\".col -> 针对所有设备\",\".col-sm - > 平板 : 屏幕宽度等于或大于 576px\",\".col-md -> 桌面显示器 : 屏幕宽度等于或大于 768px\",\".col-lg -> 大桌面显示器 : 屏幕宽度等于或大于 992px\",\".col-xl -> 超大桌面显示器 - 屏幕宽度等于或大于 1200px\"]},\"1601\":{\"h\":\"网格系统规则\",\"t\":[\"网格每一行需要放在设置了.container (固定宽度) 或.container-fluid (全屏宽度) 类的容器中，这样就可以自动设置一些外边距与内边距。\",\"使用行来创建水平的列组class=row\",\"内容需要放置在列中，并且只有列可以是行的直接子节点。\",\"预定义的类如 .row 和 .col-sm-4 可用于快速制作网格布局。\",\"列通过填充创建列内容之间的间隙。这个间隙是通过 .rows 类上的负边距设置第一行和最后一列的偏移。\",\"网格列是通过跨越指定的 12 个列来创建。 例如，设置三个相等的列，需要使用三个.col-sm-4 来设置。\",\"Bootstrap 3 和 Bootstrap 4 最大的区别在于 Bootstrap4 现在使用 flexbox（弹性盒子） 而不是浮动。Flexbox 的一大优势是，没有指定宽度的网格列将自动设置为等宽与等高列 。 如果您想了解有关Flexbox的更多信息，可以阅读我们的CSS Flexbox教程。\"]},\"1602\":{\"h\":\"案例\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <!-- 引入CSS文件 --> <link rel=\\\"stylesheet\\\" href=\\\"css/bootstrap.min.css\\\" /> <!-- 导入顺序:JQuery文件\\\\bootstrap.bundle.min.js\\\\bootstrap.min.js --> <script src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script src=\\\"js/bootstrap.bundle.min.js\\\"></script> <script src=\\\"js/bootstrap.min.js\\\"></script> <title></title> </head> <body> <div class=\\\"container\\\"> <div class=\\\"row\\\"> <div class=\\\"col-sm-2\\\" style=\\\"background-color: lavender;border:1px solid #117A8B;\\\"> One of three columns </div> <div class=\\\"col-sm-8\\\" style=\\\"background-color: lavender;border:1px solid #117A8B;\\\"> One of three columns </div> <div class=\\\"col-sm-2\\\" style=\\\"background-color: lavender;border:1px solid #117A8B;\\\"> One of three columns </div> </div> <div class=\\\"row\\\"> <div class=\\\"col-sm-1\\\" style=\\\"background-color: lavender;border:1px solid #117A8B;\\\"> One of three columns </div> <div class=\\\"col-sm-4\\\" style=\\\"background-color: lavender;border:1px solid #117A8B;\\\"> One of three columns </div> <div class=\\\"col-sm-7\\\" style=\\\"background-color: lavender;border:1px solid #117A8B;\\\"> One of three columns </div> </div> </div> </body> </html> \"]},\"1603\":{\"h\":\"BootStrap开发案例\"},\"1604\":{\"h\":\"导航栏\"},\"1605\":{\"h\":\"效果图\"},\"1606\":{\"h\":\"相关代码\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <!-- 引入CSS文件 --> <link rel=\\\"stylesheet\\\" href=\\\"css/bootstrap.min.css\\\" /> <!-- 导入顺序:JQuery文件\\\\bootstrap.bundle.min.js\\\\bootstrap.min.js --> <script src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script src=\\\"js/bootstrap.bundle.min.js\\\"></script> <script src=\\\"js/bootstrap.min.js\\\"></script> <title></title> </head> <body> <div class=\\\"container\\\"> <h2>欢迎进入</h2> <br> <!-- Nav pills --> <ul class=\\\"nav nav-pills\\\" role=\\\"tablist\\\"> <li class=\\\"nav-item\\\"> <a class=\\\"nav-link active\\\" data-toggle=\\\"pill\\\" href=\\\"#home\\\">主页</a> </li> <li class=\\\"nav-item\\\"> <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#menu1\\\">讲师介绍</a> </li> <li class=\\\"nav-item\\\"> <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#menu2\\\">课程介绍</a> </li> <li class=\\\"nav-item\\\"> <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#menu3\\\">优秀学员</a> </li> </ul> <!-- Tab panes --> <div class=\\\"tab-content\\\"> <div id=\\\"home\\\" class=\\\"container tab-pane active\\\" style=\\\"border: 10px solid red;\\\"><br> <h3>我们公司</h3> <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p> </div> <div id=\\\"menu1\\\" class=\\\"container tab-pane fade\\\" style=\\\"border: 10px solid green;\\\"><br> <h3>我们的优秀讲师</h3> <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p> </div> <div id=\\\"menu2\\\" class=\\\"container tab-pane fade\\\" style=\\\"border: 10px solid yellow;\\\"><br> <h3>我们的课程</h3> <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam.</p> </div> <div id=\\\"menu3\\\" class=\\\"container tab-pane fade\\\" style=\\\"border: 10px solid blueviolet;\\\"><br> <h3>优秀学员</h3> <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam.</p> </div> </div> </div> </body> </html> \"]},\"1607\":{\"h\":\"轮播图\"},\"1608\":{\"h\":\"效果图\"},\"1609\":{\"h\":\"相关代码\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <!-- 引入CSS文件 --> <link rel=\\\"stylesheet\\\" href=\\\"css/bootstrap.min.css\\\" /> <!-- 导入顺序:JQuery文件\\\\bootstrap.bundle.min.js\\\\bootstrap.min.js --> <script src=\\\"js/jquery-3.5.1.min.js\\\"></script> <script src=\\\"js/bootstrap.bundle.min.js\\\"></script> <script src=\\\"js/bootstrap.min.js\\\"></script> <title></title> </head> <body> <div id=\\\"carouselExampleCaptions\\\" class=\\\"carousel slide\\\" data-ride=\\\"carousel\\\"> <ol class=\\\"carousel-indicators\\\"> <li data-target=\\\"#carouselExampleCaptions\\\" data-slide-to=\\\"0\\\" class=\\\"active\\\"></li> <li data-target=\\\"#carouselExampleCaptions\\\" data-slide-to=\\\"1\\\"></li> <li data-target=\\\"#carouselExampleCaptions\\\" data-slide-to=\\\"2\\\"></li> <li data-target=\\\"#carouselExampleCaptions\\\" data-slide-to=\\\"3\\\"></li> </ol> <div class=\\\"carousel-inner\\\"> <div class=\\\"carousel-item active\\\"> <img src=\\\"https://static.runoob.com/images/mix/img_fjords_wide.jpg\\\" class=\\\"d-block w-100\\\" alt=\\\"...\\\"> <div class=\\\"carousel-caption d-none d-md-block\\\"> <h5>江河</h5> <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p> </div> </div> <div class=\\\"carousel-item\\\"> <img src=\\\"https://static.runoob.com/images/mix/img_nature_wide.jpg\\\" class=\\\"d-block w-100\\\" alt=\\\"...\\\"> <div class=\\\"carousel-caption d-none d-md-block\\\"> <h5>山川</h5> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p> </div> </div> <div class=\\\"carousel-item\\\"> <img src=\\\"https://static.runoob.com/images/mix/img_mountains_wide.jpg\\\" class=\\\"d-block w-100\\\" alt=\\\"...\\\"> <div class=\\\"carousel-caption d-none d-md-block\\\"> <h5>公路</h5> <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p> </div> </div> <div class=\\\"carousel-item\\\"> <img src=\\\"https://www.12306.cn/index/images/pic/banner0619.jpg\\\" class=\\\"d-block w-100\\\" alt=\\\"...\\\"> <div class=\\\"carousel-caption d-none d-md-block\\\"> <h5>火车</h5> <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p> </div> </div> </div> <a class=\\\"carousel-control-prev\\\" href=\\\"#carouselExampleCaptions\\\" role=\\\"button\\\" data-slide=\\\"prev\\\"> <span class=\\\"carousel-control-prev-icon\\\" aria-hidden=\\\"true\\\"></span> <span class=\\\"sr-only\\\">Previous</span> </a> <a class=\\\"carousel-control-next\\\" href=\\\"#carouselExampleCaptions\\\" role=\\\"button\\\" data-slide=\\\"next\\\"> <span class=\\\"carousel-control-next-icon\\\" aria-hidden=\\\"true\\\"></span> <span class=\\\"sr-only\\\">Next</span> </a> </div> </body> </html> \"]},\"1610\":{\"h\":\"初识Vue\"},\"1611\":{\"h\":\"了解Vue\",\"t\":[\"Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动\",\"相关网站https://cn.vuejs.org/ 官方网站https://github.com/vuejs Github网站\"]},\"1612\":{\"h\":\"Vue的好处\",\"t\":[\"实际上vue框架就是一个MVVM框架，它是渐进式框架，它是初创公司的首选框架，它是轻量级的，有很多根据Vue拓展的独立的功能或库\",\"通过下面的例子我们来了解Vue的好处\"]},\"1613\":{\"h\":\"传统方式操作元素\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> </head> <body> <h1>点击操作的元素</h1> <button id=\\\"add\\\">点击加1</button> <button id=\\\"reduce\\\">点击减1</button> </body> <script> var elNubmer = document.getElementsByTagName('h1')[0];//获取到H1中的元素 var nubler = 0; elNubmer.innerHTML = nubler;//初始化值 var elAdd = document.getElementById('add');//获取到加1的按钮 elAdd.onclick = function(){//注册点击事件 nubler++; elNubmer.innerHTML = nubler;//重新绘制视图 } var elReduce = document.getElementById('reduce');//获取到减1的按钮 elReduce.onclick = function(){//注册点击事件 nubler--; elNubmer.innerHTML = nubler;//重新绘制视图 } </script> </html> \",\"在传统方式操作数据中,我们每次改变数据的值,都需要冲洗向视图中绘制\"]},\"1614\":{\"h\":\"使用Vue操作元素\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> </head> <script src=\\\"js/vue.js\\\"></script> <body> <div id=\\\"app\\\"> <h1>{{number}}</h1> <button id=\\\"add\\\" @click=\\\"add\\\">点击加1</button> <button id=\\\"reduce\\\" @click=\\\"reduce\\\">点击减1</button> </div> </body> <script> new Vue({ //挂载点 el:'#app', //数据 data:{ number:0 }, //方法 methods:{ add(){ this.number++; }, reduce(){ this.number--; } } }) </script> </html> \",\"使用Vue操作时,我们无需关注视图模型,仅仅需要修该数据,视图的渲染都交给Vue来执行\"]},\"1615\":{\"h\":\"Vue的使用\"},\"1616\":{\"h\":\"引入Vue\",\"t\":[\"Vue2文件 在Vue的起步中，区分开发环境和生产环境，两者的不同，开发环境可以清晰的看清源码，生产环境就是将源码进行压缩，占比大小更小，我们学习过程中使用生产环境 开发环境版本，包含了有帮助的命令行警告vue_dev.js 生产环境版本，优化了尺寸和速度vue_uat.js\",\"文件中引入\",\"简单的语法格式\",\"<body> <div id=\\\"app\\\"> {{a}} </div> <script src=\\\"js/vue.js\\\"></script> <script> var vue = new Vue({ // 挂载点，所有的Vue的方法和属性都必须在对应的挂载根标签内部使用 el: '#app', // 数据管理中心，所有的Vue的数据都在data对象中 data:{ a: 100 }, // 方法，对应的Vue事件方法清单 methods:{ } }) </script> </body> \"]},\"1617\":{\"h\":\"插值语法\",\"t\":[\"插值语法是通过一对{{}}进行书写，内部是对data数据管理中心的属性进行渲染，也可以是表达式moustache（胡子）是双大括号学名，也叫（胡子语法）\",\"内部也可以存放表达式: {{a >= 100 ? 20 : 10}} , 注意，表达式支持简单，比如简单判断，比如三元表达式，不可以使用if等等复杂判断{{if(a>200){a=100}else{a=300}}}\",\"我们需要注意的是，所有的对象中的清单内容，都是Vue规定，内置的，不可以自由发挥\",\"<body> <div id=\\\"app\\\"> {{b}} </div> <script src=\\\"js/vue.js\\\"></script> <script> var vue = new Vue({ // 挂载点，所有的Vue的方法和属性都必须在对应的挂载根标签内部使用 el: '#app', // 数据管理中心，所有的Vue的数据都在data对象中 data:{ a: 100 }, // 方法，对应的Vue事件方法清单 methods:{ }, content:{ b: 200 } }) </script> </body> \",\"上面代码中content对象是我们自己随意创建的，所以是不支持在Vue中使用的\"]},\"1618\":{\"h\":\"Vue指令\"},\"1619\":{\"h\":\"v-if\",\"t\":[\"v-if 的作用是通过一个布尔表达式进行对dom的上树和下树的渲染\"]},\"1620\":{\"h\":\"基本使用\",\"t\":[\"<p v-if=\\\"false\\\">我是第一行dom元素</p> <p v-if=\\\"true\\\">我是第二行dom元素</p> \",\"我们工作中不是使用布尔值直接进行渲染，而是通过data带有布尔值的进行渲染\",\"<body> <div id=\\\"app\\\"> <h1>{{number}}</h1> <!-- 基本使用 --> <p v-if=\\\"number\\\">我是第一行dom元素</p> <p v-if=\\\"number\\\">我是第二行dom元素</p> </div> </body> <script> new Vue({ el: '#app', data: { number:true }, methods:{ } }) </script> \"]},\"1621\":{\"h\":\"使用表达式\",\"t\":[\"v-if的显示根本原理一个是通过对值的隐式转换，一个就是通过对表达式的判断得出的布尔值得来的\",\"<body> <div id=\\\"app\\\"> <h1>{{number}}</h1> <!-- 逻辑判断 --> <p v-if=\\\"number<5\\\">当前数值小于5</p> <p v-if=\\\"number>5 && number<10\\\">当前数值大于5,小于10</p> <p v-if=\\\"number>10 && number<15\\\">当前数值大于10,小于15</p> <p v-if=\\\"number>15\\\">当前数值大于15</p> <button @click=\\\"add()\\\">加1</button> <button @click=\\\"reduce()\\\">减1</button> </div> </body> <script> new Vue({ el: '#app', data: { number:0 }, methods:{ add(){ this.number++; }, reduce(){ this.number--; } } }) </script> \"]},\"1622\":{\"h\":\"使用v-else-if 和 v-else\",\"t\":[\"<body> <div id=\\\"app\\\"> <h1>{{number}}</h1> <!-- v-if - v-else-if - v-else --> <p v-if=\\\"number<5\\\">当前数值小于5</p> <p v-else-if=\\\"number>5 && number<10\\\">当前数值大于5,小于10</p> <p v-else-if=\\\"number>10 && number<15\\\">当前数值大于10,小于15</p> <p v-else>当前数值大于15</p> <button @click=\\\"add()\\\">加1</button> <button @click=\\\"reduce()\\\">减1</button> </div> </body> <script> new Vue({ el: '#app', data: { number:0 }, methods:{ add(){ this.number++; }, reduce(){ this.number--; } } }) </script> \",\"需要注意的是v-else的使用前提是必须先有v-if并且中间不允许有任何的元素间隔\",\"<p v-if='boo >= 0 && boo <= 5'>我是5</p> <div></div> <p v-else=\\\"boo > 20\\\">我是大于20</p> \",\"上述是错误的写法\"]},\"1623\":{\"h\":\"v-show\"},\"1624\":{\"h\":\"基本使用\",\"t\":[\"v-show和v-if的显示情况类似，但是原理不一样，v-show是通过控制元素的display属性，对元素的显示和隐藏进行逻辑判断，并没有实现元素的删除\",\" <body> <div id=\\\"app\\\"> <p v-show=\\\"flag\\\">测试</p> </div> </body> <script> new Vue({ el:'#app', data:{ flag:false } }) </script> \"]},\"1625\":{\"h\":\"v-show和v-if的使用场景区分\",\"t\":[\"如果页面切换的特别频繁使用v-show\",\"如果页面的涉及范围特别大并且不是特别频繁的切换使用v-if，因为主要区分是涉及到页面的加载性能\"]},\"1626\":{\"h\":\"v-for\",\"t\":[\"v-for是vue 的循环指令，作用是遍历数组（对象）的每一个值\"]},\"1627\":{\"h\":\"基本使用\",\"t\":[\"<body> <div id=\\\"app\\\"> <li v-for=\\\"item in arr\\\">{{item}}</li> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ arr:[ '苹果', '橘子', '香蕉', '草莓' ] } }) </script> \"]},\"1628\":{\"h\":\"index和key属性\",\"t\":[\"item指的是被遍历的数组（对象）的每一个值，item的命名不是规定的，可以自定义命名\",\"index指的是每一项被遍历的值的下标索引值\",\"key是用来给每一项值加元素标识，作用是为了区分元素，为了实现最小量的更新\",\"<body> <div id=\\\"app\\\"> <li v-for=\\\"(item,index) in arr\\\" :key=\\\"index\\\">{{item}}-{{index}}</li> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ arr:[ '苹果', '橘子', '香蕉', '草莓' ] } }) </script> \"]},\"1629\":{\"h\":\"遍历对象\",\"t\":[\"item表示对象的内容，\",\"key表示的是对象key键值名称\",\"index表示的是当前obj的下标索引值\",\"<body> <div id=\\\"app\\\"> <li v-for=\\\"(item,key,index) in obj\\\" :key=\\\"index\\\">{{index}}-{{key}}:{{item}}</li> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ obj:{ name: '小明', age: '17岁', height: '175cm', sex: '男', hobby: '打篮球' } } }) </script> \"]},\"1630\":{\"h\":\"遍历Json\",\"t\":[\"实际工作中我们使用v-for遍历JSON更多一点\",\"item指的是被遍历的Json（对象）的每一个对象\",\"index指的是每一项被遍历的值的下标索引值\",\"<body> <div id=\\\"app\\\"> <table border=\\\"1px\\\"> <th>序号</th> <th>姓名</th> <th>年龄</th> <th>性别</th> <th>身高</th> <tr v-for=\\\"(item,index) in student\\\"> <td>{{index}}</td> <td>{{item.name}}</td> <td>{{item.age}}</td> <td>{{item.sex}}</td> <td>{{item.height}}</td> </tr> </table> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ student: [ {name:'小明',age: '17',sex:'男',height: '168'}, {name:'小红',age: '18',sex:'女',height: '165'}, {name:'小周',age: '19',sex:'男',height: '178'}, {name:'小刚',age: '20',sex:'男',height: '167'} ] } }) </script> \"]},\"1631\":{\"h\":\"多层嵌套\",\"t\":[\"实际工作中我们使用v-for遍历JSON更多一点\",\"item指的是被遍历的Json（对象）的每一个对象\",\"index指的是每一项被遍历的值的下标索引值\",\"<body> <div id=\\\"app\\\"> <table border=\\\"1px\\\"> <tr v-for=\\\"i in number\\\" :key=\\\"i\\\"> <td v-for=\\\"j in i\\\" :key=\\\"j\\\">{{i}}*{{j}}={{i*j}}</td> </tr> </table> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ number:[1,2,3,4,5,6,7,8,9] } }) </script> \"]},\"1632\":{\"h\":\"注意事项\",\"t\":[\"v-for遍历的出来的不是数据，而是元素\",\"如果使用item和index的时候一定要使用括号包裹起来 (item,index) in arr\"]},\"1633\":{\"h\":\"v-html和v-text\",\"t\":[\"v-html和v-text都是渲染文本的指令，使用场景会有不同\"]},\"1634\":{\"h\":\"v-text\",\"t\":[\"双大括号{{}}和v-text渲染结果类似，都是会以文本类型进行渲染\",\"<div id=\\\"app\\\"> <p>----{{name}}----</p> <p v-text=\\\"name\\\">-------</p> </div> <body> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ name:'张三' } }) </script> \",\"双大括号在渲染结果之前，会有编译之前的文本显示，v-text是没有这种现象的\",\"双大括号更灵活，中间是可以添加内容的，v-text是只能渲染data中的数据，中间不允许插入内容\"]},\"1635\":{\"h\":\"v-html\",\"t\":[\"双大括号和v-text它俩的渲染方式和v-html有本质不同，v-html会识别模板\",\"<div id=\\\"app\\\"> <p v-text=\\\"code\\\"></p> <p v-html=\\\"code\\\"></p> <p v-html=\\\"code\\\">---</p> </div> <body> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ code:'<h1>aaa</h1>' } }) </script> \",\"和v-text类似的是v-html也不允许在元素中间随意插值\"]},\"1636\":{\"h\":\"v-cloak\",\"t\":[\"v-cloak指令的作用是vue示例渲染后关联结束\"]},\"1637\":{\"h\":\"为什么使用v-cloak\",\"t\":[\"双大括号插值语法在遇到网络延迟的时候会显示编译之前的文本\",\"<body> <div id=\\\"app\\\"> <p>{{a}}</p> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ a:'我是渲染的指令-v-cloak' } }) </script> \",\"我们可以使用v-cloak结合CSS解决双大括号渲染的难题\"]},\"1638\":{\"h\":\"基本使用\",\"t\":[\"我们可以使用v-cloak结合CSS解决双大括号渲染的难题\",\"<style> [v-cloak]{ display: none; } </style> <body> <div id=\\\"app\\\" v-cloak> <p>{{a}}</p> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{a a:'我是渲染的指令-v-cloak' } }) </script> \",\"[v-cloak] css选择器选择的是html结构中有v-cloak的属性，有这个属性的元素设置display为none，又由于v-cloak这个属性在vue的实例加载完之后关联结束，所以就需要了这个元素的隐藏状态，元素就会显示，这样造成的结果就是要么空白，要么显示编译后的文本\"]},\"1639\":{\"h\":\"v-once\",\"t\":[\"v-once的作用是只会渲染对应元素一次，数据更新不会引起视图的更新，目的是为了优化页面的性能\"]},\"1640\":{\"h\":\"基本使用\",\"t\":[\" <body> <div id=\\\"app\\\"> <p v-once>{{number}}</p> <button @click=\\\"add()\\\">+1</button> <button @click=\\\"reduce()\\\">-1</button> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ number:0 }, methods:{ add(){ this.number++; console.log(this.number); }, reduce(){ this.number--; console.log(this.number); } } }) </script> \"]},\"1641\":{\"h\":\"使用场景\",\"t\":[\"通常是没有动态的元素内容，比如一些文章，一些固定标题\"]},\"1642\":{\"h\":\"v-pre\",\"t\":[\"v-pre属性的作用是跳过该元素编译过程，直接显示元素内部的文本，特点就是跳过大量的没有指令的节点\"]},\"1643\":{\"h\":\"基本使用\",\"t\":[\" <body> <div id=\\\"app\\\"> <p v-pre>{{title}}</p> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ title:'文章' } }) </script> \"]},\"1644\":{\"h\":\"使用场景\",\"t\":[\"优化页面的加载性能\"]},\"1645\":{\"h\":\"v-on\",\"t\":[\"v-on的作用是给元素添加事件监听，可以简写为@\",\"我们学习的JavaScript的元素的事件监听都可以在vue中使用: 事件\",\"对于原生的JavaScript的事件,我们在Vue中使用都是一律去除on，然后 添加v-on：或者@\",\"例如: \",\"<button onclick=\\\"add()\\\">点击加1</button> <button @click=\\\"add\\\">点击加1</button> <button v-on:click=\\\"minus\\\">点击减1</button> \"]},\"1646\":{\"h\":\"基本使用\",\"t\":[\" <body> <div id=\\\"app\\\"> <button @click=\\\"say\\\">点我Say Hello</button> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ }, methods:{ say(){ alert(\\\"你好\\\") } } }) </script> \"]},\"1647\":{\"h\":\"注意事项\",\"t\":[\"需要注意的是所有的方法都 必须写在vue的methods中，不允许在外部罗列方法名称\",\"原生的JavaScript的事件方法是不能和vue混用的\",\"同名方法会有覆盖情况，后写方法会覆盖先写的方法\",\"方法中是可以传入参数的,如果方法中没有传入值，默认输入会有该方法的事件参数\"]},\"1648\":{\"h\":\"v-bind\",\"t\":[\"v-bind属性的作用是将普通的w3c属性变为动态属性，让属性具有动态能力\"]},\"1649\":{\"h\":\"基本使用\",\"t\":[\"<body> <div id=\\\"app\\\"> <!-- 使用动态属性之前 --> <img src=\\\"'./img/'+name+'.png'\\\" border=\\\"1px\\\"> <br /> <!-- 使用动态属性 --> <img v-bind:src=\\\"'./img/'+name+'.png'\\\" border=\\\"1px\\\"> <br /> <img :src=\\\"'./img/'+name+'.png'\\\" border=\\\"1px\\\"> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ name:'java' }, methods:{ } }) </script> \",\"我们发现:上面的图片是加载不出来的，因为如果没有使用动态属性，会将编译之前的属性参数直接抛出.使用动态属性后,此时vue会编译带有v-bind的属性，然后返回编译后结果\"]},\"1650\":{\"h\":\"动态Class\",\"t\":[\" <style type=\\\"text/css\\\"> p { height: 50px; width: 50px; background-color: #1E7E34; } .red { background-color: red; } .pink { background-color: pink; } </style> <body> <div id=\\\"app\\\"> <p :class=\\\"{red: number>=5&& number<10,pink: number>=10}\\\">{{number}}</p> <button @click=\\\"add()\\\">+1</button> <button @click='reduce()'>-1</button> <P :style=\\\"{width:100+number+'px'}\\\"></p> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ number:0 }, methods:{ add(){ this.number++; }, reduce(){ this.number--; } } }) </script> \"]},\"1651\":{\"h\":\"动态Style\",\"t\":[\"<body> <div id=\\\"app\\\"> <!-- 使用动态属性之前 --> <img src=\\\"'./img/'+name+'.png'\\\" border=\\\"1px\\\"> <br /> <!-- 使用动态属性 --> <img v-bind:src=\\\"'./img/'+name+'.png'\\\" border=\\\"1px\\\"> <br /> <img :src=\\\"'./img/'+name+'.png'\\\" border=\\\"1px\\\"> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ name:'java' }, methods:{ } }) </script> \"]},\"1652\":{\"h\":\"v-model\",\"t\":[\"v-model属性是使用在表单元素中的，作用是实现表单和数据的双向绑定. 我们说过vue是mvvm框架，vue的核心之一就是双向数据绑定\"]},\"1653\":{\"h\":\"基本使用\",\"t\":[\"<body> <div id=\\\"app\\\"> <input type=\\\"text\\\" v-model=\\\"name\\\" /> <p>我的名字是:{{name}}</p> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ name:'张三' } }) </script> \"]},\"1654\":{\"h\":\"修饰符\"},\"1655\":{\"h\":\"事件修饰符\"},\"1656\":{\"h\":\"为什么使用事件修饰符\",\"t\":[\"在日常开发中,我们经常会遇到多层盒子嵌套的情况,但是如果每个盒子都有自己的点击事件,当我们点击触发内部的盒子的时候,会发现外层的盒子也会被触发.这也就是我们说的事件冒泡\",\"例如,在下列代码中:\",\"<body> <div class=\\\"outerlayer\\\" onclick=\\\"outerlayer()\\\"> <div class=\\\"middle\\\" onclick=\\\"middle()\\\"> <div class=\\\"inside\\\" onclick=\\\"inside()\\\"> </div> </div> </div> </body> <script type=\\\"text/javascript\\\"> function outerlayer(){ console.log(\\\"外层点击\\\") } function middle(){ console.log(\\\"中间点击\\\") } function inside(){ console.log(\\\"内层点击\\\") } </script> \",\"当我们点击内部的盒子时,同时触发了所有盒子的事件\",\"为了阻止事件冒泡的情况,Vue提供了事件修饰符\"]},\"1657\":{\"h\":\"常用的事件修饰符\"},\"1658\":{\"h\":\"stop修饰符\",\"t\":[\".stop修饰符的作用就是阻止事件的一个冒泡\",\"<body> <div id=\\\"app\\\"> <!-- .stop修饰符的作用就是阻止事件的一个冒泡 --> <div class=\\\"outerlayer\\\" @click=\\\"outerlayer()\\\"> <div class=\\\"middle\\\" @click=\\\"middle()\\\"> <div class=\\\"inside\\\" @click.stop=\\\"inside()\\\"> </div> </div> </div> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:\\\"#app\\\", methods:{ outerlayer(){ console.log(\\\"外层点击\\\") }, middle(){ console.log(\\\"中间点击\\\") }, inside(){ console.log(\\\"内层点击\\\") } } }) </script> \"]},\"1659\":{\"h\":\"self修饰符\",\"t\":[\".self修饰符的作用是只有点击元素本身的时候才能触发事件，不接受冒泡上来的事件，同时也不能阻止事件的冒泡\",\"<body> <div id=\\\"app\\\"> <!-- .self修饰符的作用是只有点击元素本身的时候才能触发事件，不接受冒泡上来的事件，同时也不能阻止事件的冒泡 --> <div class=\\\"outerlayer\\\" @click=\\\"outerlayer()\\\"> <div class=\\\"middle\\\" @click.self=\\\"middle()\\\"> <div class=\\\"inside\\\" @click.self=\\\"inside()\\\"> </div> </div> </div> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:\\\"#app\\\", methods:{ outerlayer(){ console.log(\\\"外层点击\\\") }, middle(){ console.log(\\\"中间点击\\\") }, inside(){ console.log(\\\"内层点击\\\") } } }) </script> \"]},\"1660\":{\"h\":\"prevent修饰符\",\"t\":[\".prevent修饰符可以屏蔽标签原有的执行效果,仅仅执行监听事件\",\"<body> <div id=\\\"app\\\"> <a href=\\\"https://www.baidu.com\\\" @click.prevent=\\\"hello()\\\">百度</a> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', methods:{ hello(){ alert(\\\"你好!\\\") } } }) </script> \"]},\"1661\":{\"h\":\"capture修饰符\",\"t\":[\".capture修饰符是对事件捕获的监听，vue的事件监听，默认都是获取冒泡阶段的，所以使用capture去监听捕获阶段的事件\",\" <body> <div id=\\\"app\\\"> <div class=\\\"outerlayer\\\" @click.capture=\\\"outerlayer()\\\"> <div class=\\\"middle\\\" @click.capture=\\\"middle()\\\"> <div class=\\\"inside\\\" @click=\\\"inside()\\\"> </div> </div> </div> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:\\\"#app\\\", methods:{ outerlayer(){ console.log(\\\"外层点击\\\") }, middle(){ console.log(\\\"中间点击\\\") }, inside(){ console.log(\\\"内层点击\\\") } } }) </script> \"]},\"1662\":{\"h\":\"once修饰符\",\"t\":[\".once修饰符的作用就是使事件只触发一次\",\"<body> <div id=\\\"app\\\"> <p>{{number}}</p> <button @click.once=\\\"add()\\\">+1</button> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:\\\"#app\\\", data:{ number:0 }, methods:{ add(){ this.number++; } } }) </script> \"]},\"1663\":{\"h\":\"按键修饰符\",\"t\":[\"我们之前在JavaScript的课程中接触过onkeydown和onokeyup，这两个是键盘的事件监听，在vue中有对应的事件修饰符\"]},\"1664\":{\"h\":\"基本用法\",\"t\":[\"<body> <div id=\\\"app\\\"> <p>{{numbers}}</p> <button @click=\\\"add()\\\" @keyup.left=\\\"add()\\\">+1</button> <!-- <button @click=\\\"add()\\\" @keyup.37=\\\"add()\\\">+1</button> --> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ numbers:0 }, methods:{ add(){ this.numbers++ } } }) </script> \"]},\"1665\":{\"h\":\"常用keyCode\",\"t\":[\"keyCode值\",\"别名\",\"键盘按键\",\"13\",\".enter\",\"回车\",\"32\",\".space\",\"空格\",\"37\",\".left\",\"键盘左键\",\"38\",\".up\",\"键盘上键\",\"39\",\".right\",\"键盘右键\",\"40\",\".down\",\"键盘下键\",\"9\",\".tab\",\"键盘tab\",\"46或者8\",\".delete\",\"delete或者backspace\"]},\"1666\":{\"h\":\"系统修饰符\",\"t\":[\"系统修饰符指的是通过一些指定的按键配合鼠标点击或者键盘事件进行事件监听\"]},\"1667\":{\"h\":\"基本用法\",\"t\":[\"<body> <div id=\\\"app\\\"> <p>{{numbers}}</p> <!-- 此时按住键盘ctrl键然后鼠标点击才能实现add加1 --> <button @click.ctrl=\\\"add()\\\">+1</button> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ numbers:0 }, methods:{ add(){ this.numbers++ } } }) </script> \"]},\"1668\":{\"h\":\"常见系统修饰符\",\"t\":[\"修饰符名称\",\"对应的键盘键名称\",\".ctrl\",\"ctrl\",\".alt\",\"alt\",\".shfit\",\"shift\",\".meta\",\"如果是windows系统代表的是键盘的徽标键，如果是IOS系统，单表的是common键\",\"此时有一个问题，如果我们设置了系统修饰符，并不希望有其他的按键组合，比如我们设置ctrl修饰符，此时如果按住ctrl和其他键，然后再点击鼠标，此时也会触发事件监听，\",\"所以我需要使用其他的修饰符来设置精确匹配事件 exact\"]},\"1669\":{\"h\":\"exact修饰符\",\"t\":[\"exact修饰符的作用是辅助其他修饰符进行精确匹配的\"]},\"1670\":{\"h\":\"基本用法\",\"t\":[\" <body> <div id=\\\"app\\\"> <p>{{numbers}}</p> <button @click.ctrl.exact=\\\"add()\\\">+1</button> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ numbers:0 }, methods:{ add(){ this.numbers++ } } }) </script> \"]},\"1671\":{\"h\":\"鼠标按键修饰符\",\"t\":[\"鼠标按键修饰符修饰的是鼠标的左、滚轮、右键\",\"如果我们需要点击某个事件，但是我们可以需要使用鼠标右键\"]},\"1672\":{\"h\":\"基本用法\",\"t\":[\" <body> <div id=\\\"app\\\"> <p>{{numbers}}</p> <button @click.right.prevent=\\\"add()\\\">+1</button> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ numbers:0 }, methods:{ add(){ this.numbers++ } } }) </script> \"]},\"1673\":{\"h\":\"注意事项\",\"t\":[\"如果只使用鼠标修饰符,此时我们发现使用右键时也会出现弹窗:\",\"所以我们推荐结合prevent修饰符实现右键的事件监听, 需要注意的是，prevent修饰符必须在鼠标修饰符的后面，否则会失效\"]},\"1674\":{\"h\":\"表单修饰符\",\"t\":[\"表单修饰符 一 共有三个，分别是.lazy，.number，.trim, 表单修饰符都是用来修饰v-model属性的\"]},\"1675\":{\"h\":\".lazy 修饰符\",\"t\":[\".lazy修饰符是将Input输入框的数据绑定v-model从实时监听的状态变为change状态\",\" <body> <div id=\\\"app\\\"> <!-- 修改双向绑定为 change事件同步 --> <input type=\\\"text\\\" v-model.lazy=\\\"text\\\" /> <p>{{text}}</p> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ text:'' } }) </script> \"]},\"1676\":{\"h\":\".number 修饰符\",\"t\":[\".number修饰符的作用是将内容转化为数字类型, 如果没有使用number修饰符，得到的输入框的数字都是string类型\",\" <body> <div id=\\\"app\\\"> <!-- 将内容转换为数字,否则都为字符串 --> <input type=\\\"text\\\" v-model.number='number' /> <p>{{number+100}}</p> <hr > </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ number:0 } }) </script> \"]},\"1677\":{\"h\":\".trim 修饰符\",\"t\":[\".trim修饰符的作用是过滤用户输入的收尾空格\",\" <body> <div id=\\\"app\\\"> <!-- 去除两端空格 --> <input type=\\\"text\\\" v-model.trim='name' /> <p>{{name}}</p> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ name:'' } }) </script> \"]},\"1678\":{\"h\":\"脚手架\"},\"1679\":{\"h\":\"准备工作\"},\"1680\":{\"h\":\"安装nodejs并验证\",\"t\":[\"安装nodejs,下一步下一步就可以,可以安装最新的15版本,win7的话可以安装14版本.使用以下dos命令提示符下执行：\",\"node -v # v8.11.3，至少8以上,最新的是v15.11.0 \"]},\"1681\":{\"h\":\"配置npm\",\"t\":[\"Nodejs下的包管理器,Nodejs中包含了npm,无需单独安装.默认去官网下载资源,可以换成国内的镜像\",\"npm config get registry # 查看当前配置的镜像，结果是默认的国外网址https://registry.npmjs.org/ npm config set registry https://registry.npm.taobao.org #设置成淘宝镜像 npm config get registry #再获取查看,结果是修改后的https://registry.npm.taobao.org/ \"]},\"1682\":{\"h\":\"脚手架安装\",\"t\":[\"vue-cli: 用户生成Vue工程模板（帮你快速构建一个vue的项目，也就是给你一套vue的结构，包含基础的依赖库） vue-cli: 脚手架工具安装与配置（需要几分钟）\",\"npm install vue-cli -g #安装vue-cli脚手架---可能比较慢,要等几分钟 npm install -g @vue/cli npm uninstall vue-cli -g #卸载vue-cli脚手架 --- 大可不必 vue –V #查看版本 where vue #vue安装在哪里 \"]},\"1683\":{\"h\":\"创建Vue项目\",\"t\":[\"在DOS进入指定工作空间\",\"vue init webpack jt01 #此处项目名不能使用大写---可能比较慢,要等 ?Project name xxxx //项目名称，直接回车 ?Project description xxxxx //项目描述，直接回车 ?Author xxxxxxxx //作者，直接回车 ?Vue build xxxxx //编译，直接回车 ?Install vue-router?Yes //是否安装路由， 选Yes!!! ?Use ESLint to lint your code?No //是否使用规则引擎， No!!! ?Set up unit tests No //单元测试，选No!!! ?Set up e2e tests with Nightwatch?No //测试框架，选No!!! ?Should we run install for you after'the project has beecommended) npm //默认安装方式就是npm， 直接回车 \"]},\"1684\":{\"h\":\"启动项目&停止项目\",\"t\":[\"cd jt01 # 进入项目目录 npm run dev # 自动启动服务，ctrl+c 停止,可能要等几分钟 \"]},\"1685\":{\"h\":\"Vue-Cli 脚手架的使用\"},\"1686\":{\"h\":\"cli目录结构\",\"t\":[\"node_modules 项目的依赖中心\",\"public 静态资源文件夹,和assets不同的是public不会被webopack进行打包,使用路径的时候要使用绝对路径\",\"src 项目的核心区域,所有的开发文件的核心内容区域,包括组件\\\\静态资源等等\",\"asstet 静态资源文件,和public不同的是assets文件夹会被webpack打包,所以要使用相对路径\",\"components Vue功能组件的存放位置，内部存放的是公用的组件\",\"views 公共文件，主要以各个独立页面为主\",\"APP.vue 整个vue的根组件，所有的vue组件都是从这个组件中拓展的，App根组件最后通过编译后将内容渲染到.html文件中\",\"main.js vue的入口文件，vue文件初始化位置\",\".gitignore GitHub相关配置文件，作用是git再提交代码的时候指定相关忽略格式文件\",\"babel.config.js babel的配置文件\",\"package.json 配置（记录了）项目的相关模块，项目相关配置信息等等\",\"package-lock.json 作用是记录的当前项目安装的相关依赖版本，并且记住了当前所有依赖的关联关系，如果下次vue进行编译的时候会按照这个文件进行编译\",\"README.md 文件的作用是项目相关的使用方法，和使用说明\"]},\"1687\":{\"h\":\"cli文件的编译过程\",\"t\":[\"我们知道vue-cli的起步命令是npm run serve，那么这个命令干了一些什么?\",\"首先我们要知道npm run 执行一个命令或者是一个文件内容\",\"我们看package.json文件中\",\"{ \\\"name\\\": \\\"my-project\\\", \\\"version\\\": \\\"0.1.0\\\", \\\"private\\\": true, \\\"scripts\\\": { \\\"serve\\\": \\\"vue-cli-service serve\\\", \\\"build\\\": \\\"vue-cli-service build\\\", \\\"lint\\\": \\\"vue-cli-service lint\\\", }, \\\"dependencies\\\": { \\\"core-js\\\": \\\"^3.6.5\\\", \\\"vue\\\": \\\"^2.6.11\\\" }, \\\"devDependencies\\\": { .... }, \\\"eslintConfig\\\": { ... }, \\\"browserslist\\\": [ ... ] } \",\"我们知道scripts是npm执行目录，也就是在scripts这个对象中的key就是npm run的命令值\",\"vue-cli提供了三个命令\",\"serve 这个是我们开发使用的命令，执行编译和热更新（ctrl+s的时候浏览器会实时更新）\",\"build 工作中如果我们本地调试完后需要部署代码前，进行打包的命令\",\"lint 命令的作用是检验文件代码的合格性（对eslint的校验）\",\"我们以npm run serve为例:\",\"第一步命令会找到node_modules文件夹中.bin文件夹内部的vue-cli-service文件\",\"然后我们根据路径查找到了相关文件\",\"核心代码路径\",\"severice.js文件是整个编译过程的核心文件\"]},\"1688\":{\"h\":\"vue-cli的起步文件\"},\"1689\":{\"h\":\"main.js 文件\",\"t\":[\"import Vue from 'vue' // 相对路径引入的App.vue文件 import App from './App.vue' // 这行命令的作用是给生产环境配置的提示消息，如果为true或者默认不配置，会有相关提示语 Vue.config.productionTip = false new Vue({ // 渲染节点 render: h => h(App), // 挂载函数，内部#app是vue的根节点 }).$mount('#app') \"]},\"1690\":{\"h\":\"public>index.html 根文件\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"utf-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1.0\\\"> <title></title> </head> <body> <noscript> <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong> </noscript> <div id=\\\"app\\\"></div> <!-- built files will be auto injected --> </body> </html> \",\"noscript标签的作用是当script标签加载不出来或者抛出错误的时候替换内容，目的是在浏览器中提供友好提示<div id=\\\"app\\\"></div>是整个vue项目的根标签，vue需要挂载的标签\"]},\"1691\":{\"h\":\"App.vue 文件\",\"t\":[\"App.vue文件是整个项目的根组件，项目中所有的页面切换页面显示都是在这个组件基础上渲染的.基本结构如下:\",\"<template> <div id=\\\"app\\\"> </div> </template> <script> export default { components: { } } </script> <style> \",\"<template> 元素的作用是搭建vue文件的结构\",\"<script> 元素的作用是对当前文件逻辑进行交互\",\"<style> 元素的作用是对当前文件的样式进行修饰\",\"我们之前开发中.js文件只有逻辑.css文件只有样式.html文件只有结构，但是.vue的组建就是将视图和逻辑进行了一个整合\"]},\"1692\":{\"h\":\"VueDemo\"},\"1693\":{\"h\":\"选项卡\"},\"1694\":{\"h\":\"效果\"},\"1695\":{\"h\":\"代码\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> <script src=\\\"js/vue.js\\\"></script> </head> <style type=\\\"text/css\\\"> #app{ display: block; width: 166px; border: 1px solid black; } .head{ width: 156px; height: 50px; font-size: 18px; line-height: 50px; background-color: #008cff; } .head span{ display: block; float: left; color: white; text-align: center; width: 50px; border: 1px solid white; } .cur { color: black; background-color: #0017ff; } .content p{ display: block; width: 156px; border-bottom: 1px solid #ccc; } </style> <body> <div id=\\\"app\\\"> <div class=\\\"head\\\"> <span :class=\\\"{cur:curState == index}\\\" v-for=\\\"(item,index) in title\\\" @mouseenter=\\\"displayState(index)\\\">{{item}}</span> </div> <div class=\\\"content\\\" v-show=\\\"curState == 0\\\"> <p>aaaaaaaaaaaaaaaaaa</p> <p>aaaaaaaaaaaaaaaaaa</p> <p>aaaaaaaaaaaaaaaaaa</p> <p>aaaaaaaaaaaaaaaaaa</p> </div> <div class=\\\"content\\\" v-show=\\\"curState == 1\\\"> <p>bbbbbbbbbbbbbbbb</p> <p>bbbbbbbbbbbbbbbb</p> <p>bbbbbbbbbbbbbbbb</p> <p>bbbbbbbbbbbbbbbb</p> </div> <div class=\\\"content\\\" v-show=\\\"curState == 2\\\"> <p>ccccccccccccccccccc</p> <p>ccccccccccccccccccc</p> <p>ccccccccccccccccccc</p> <p>ccccccccccccccccccc</p> </div> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ title:['aa','bb','cc'], curState:0 }, methods:{ displayState(index){ this.curState = index } } }) </script> </html> \"]},\"1696\":{\"h\":\"调色板\"},\"1697\":{\"h\":\"效果\"},\"1698\":{\"h\":\"代码\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> <script src=\\\"js/vue.js\\\"></script> </head> <style type=\\\"text/css\\\"> .pickers{ display: block; width: 100px; height: 100px; border: 1px black; } </style> <body> <div id=\\\"app\\\"> <div class=\\\"pickers\\\" :style=\\\"{background:'rgb('+r+','+g+','+b+')'}\\\"></div> r:<input max=\\\"255\\\" min=\\\"0\\\" type=\\\"range\\\" v-model=\\\"r\\\"/><input max=\\\"255\\\" min=\\\"0\\\" type=\\\"text\\\" v-model=\\\"r\\\"/> <br /> g:<input max=\\\"255\\\" min=\\\"0\\\" type=\\\"range\\\" v-model=\\\"g\\\"/><input max=\\\"255\\\" min=\\\"0\\\" type=\\\"text\\\" v-model=\\\"g\\\"/> <br /> b:<input max=\\\"255\\\" min=\\\"0\\\" type=\\\"range\\\" v-model=\\\"b\\\"/><input max=\\\"255\\\" min=\\\"0\\\" type=\\\"text\\\" v-model=\\\"b\\\"/> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ r:0, g:0, b:0 } }) </script> </html> \"]},\"1699\":{\"h\":\"消息框\"},\"1700\":{\"h\":\"效果\"},\"1701\":{\"h\":\"代码\",\"t\":[\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\"> <title></title> <script src=\\\"js/vue.js\\\"></script> <style type=\\\"text/css\\\"> .warn{ color: red; } </style> </head> <body> <div id=\\\"app\\\"> <textarea v-model='content' cols=\\\"30\\\" rows=\\\"10\\\" placeholder=\\\"请发表你今天的心情。。。。\\\"></textarea> <!-- warn生效机制：当内容的数量大于100的时候，渲染文字为红色 --> <p :class=\\\"{warn: content.length > 100}\\\">{{content.length}}/100</p> <p> <!-- disabled生效机制：当内容的数量大于100的时候，不能点击 --> <button :disabled=\\\"content.length > 100\\\">发布</button> <!-- disabled生效机制：当内容的小于等于0的时候，不能点击 --> <button @click=\\\"clear\\\" :disabled=\\\"content.length <= 0\\\">清空</button> </p> </div> </body> <script type=\\\"text/javascript\\\"> new Vue({ el:'#app', data:{ content:\\\"\\\" }, methods:{ clear(){ this.content=\\\"\\\" } } }) </script> </html> \"]},\"1702\":{\"h\":\"组件\"},\"1703\":{\"h\":\"组件的概述\",\"t\":[\"组件（Component）是 Vue.js 最强大的功能之一。 组件可以扩展 HTML 元素，封装可重用的代码。 组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树\"]},\"1704\":{\"h\":\"什么是组件\",\"t\":[\"所有的vue组件都是以.vue格式结尾的文件,我们看到的vue-cli中的App.vue文件就是整个vue的根组件\",\"<template> <div> </div> </template> <script> export default { data(){ } } </script> <style></style> \",\"一个vue文件就是一个类,需要注意的地方就是data必须是一个函数,最外层必须有默认暴露\",\"<script> export default { data(){ return { } } } </script> \",\"我们后面写的所有的vue的对象清单都必须在export default里面罗列. data是一个函数，返回的是一个对象，目的是为了让每个组件数据隔离，这个是JavaScript的原理，并不是vue去设计的\"]},\"1705\":{\"h\":\"为什么组件中data是函数\",\"t\":[\"我们先查看一个javaScript的代码案例\",\"我们看到左边的代码中:创建的是一个对象,在使用的过程中,赋值只是将引用地址的值进行赋值传递,当一个声明改变时,将直接影响对象本身的值,所以导致所有的赋值的引用一起改变\",\"在右边的代码中,我们将需要的值放到一个函数中进行返回,这样在使用时拿到的都是独立的对象以及新的地址,在修改时所有的声明时相互隔离互不影响的.\",\"所以,Vue的组件中data是一个函数,而不是一个data对象.\"]},\"1706\":{\"h\":\"自定义组件\"},\"1707\":{\"h\":\"创建组件.vue文件\",\"t\":[\"<template> <div> <h1>{{number}}</h1> <button @click=\\\"add\\\">+1</button> </div> </template> <script> export default{ data(){ return{ number:100 } }, methods:{ add(){ this.number++; } } } </script> <style> </style> \"]},\"1708\":{\"h\":\"引入组件/注册组件\",\"t\":[\"<template> <div id=\\\"app\\\"> <HelloVue></HelloVue> </div> </template> <script> // 引入组件 import HelloVue from './components/HelloVue.vue' export default { //注册组件 components: { HelloVue } } </script> <style> </style> \",\"注意:组件是可以重复使用的,且数据相互隔离!\"]},\"1709\":{\"h\":\"父子组件传值\",\"t\":[\"我们使用组件一定是依托在某一个父组件的身上，比如我们上面写的HelloVue.vue文件就是依托在App.vue文件中，此时我们如果要使用App.vue文件中的值怎么办\"]},\"1710\":{\"h\":\"父组件传值给子组件\",\"t\":[\"vue提供了一个props的入口，也是父子组件之间唯一的传值方式，父组件通过v-bind自定义属性传入值，子组件通过props接受对应的参数\"]},\"1711\":{\"h\":\"基本语法-单个参数\",\"t\":[\"父组件\",\"<template> <div> <h1>{{number}}</h1> <button @click=\\\"add\\\">+1</button> <sayVue :father-number='number'></sayVue> </div> </template> <script> //引入组件 import sayVue from '../components/SayVue.vue' export default{ //注册组件 components: { sayVue }, data(){ return{ number:100 } }, methods:{ add(){ this.number++; } } } </script> <style> </style> \",\"子组件\",\"<template> <div> <h1>父组件的值:{{fatherNumber}}</h1> </div> </template> <script> export default{ // 罗列父组件传进的属性值 props:['fatherNumber'], data(){ return{ } } } </script> <style> </style> \"]},\"1712\":{\"h\":\"基本语法-多个参数\",\"t\":[\"父组件\",\"<template> <div> <h1>{{number}}</h1> <button @click=\\\"add\\\">+1</button> <sayVue1 :number-a='number' :number-b='number' :number-c='number'></SayVue1> </div> </template> <script> //引入组件 import sayVue1 from '../components/SayVue1.vue' export default{ //注册组件 components: { sayVue1 }, data(){ return{ number:100 } }, methods:{ add(){ this.number++; } } } </script> <style> </style> \",\"子组件\",\"<template> <div> <h1>父组件的值:number-a :{{numberA}}/number-b :{{numberB}}/number-c :{{numberC}}</h1> </div> </template> <script> export default{ // 罗列父组件传进的属性值 props:['numberA','numberB','numberC'], data(){ return{ } } } </script> <style> </style> \"]},\"1713\":{\"h\":\"基本语法-对象\",\"t\":[\"父组件\",\"<template> <div> <sayVue2 :student-name='zhangsan.name' :student-age='zhangsan.age'></sayVue2> </div> </template> <script> //引入组件 import sayVue2 from '../components/SayVue2.vue' export default{ //注册组件 components: { sayVue2 }, data(){ return{ zhangsan:{ name:'张三', age:110 } } } } </script> <style> </style> \",\"子组件\",\"<template> <div> <h1>父组件的值:name :{{studentName}}/age :{{studentAge}}</h1> </div> </template> <script> export default{ // 罗列父组件传进的属性值 props:{ studentName:{ //传值类型 type:String, //默认值 default:'李四', //是否必须 required: true }, studentAge:{ type:Number, required: true, //校验 validator: function(value){ return value>100; } }, studenObj:{ type: Object, //默认值 default: ()=>{ return{ name:'王五', age:10 } } } }, data(){ return{ } } } </script> <style> </style> \"]},\"1714\":{\"h\":\"子组件修改父组件参数\",\"t\":[\"子组件不可以直接修改父组件的值，只能传出一个自定义事件，父组件通过调用这个自定义事件后，然后在外部修改值\"]},\"1715\":{\"h\":\"基本语法\",\"t\":[\"子组件\",\"<template> <div> <h1>父组件传递过来的值:{{fatherNumber}}</h1> <button @click=\\\"addNumber\\\">+1</button> </div> </template> <script> export default { props:{ fatherNumber:Number }, data() { return { }; }, methods:{ addNumber(){ this.$emit(\\\"addNumber\\\") } } } </script> <style> </style> \",\"父组件\",\"<template> <div> <h1>{{number}}</h1> <button @click=\\\"add\\\">+1</button> <sayVue3 :father-number='number' @addNumber=\\\"add\\\"></sayVue3> </div> </template> <script> //引入组件 import sayVue3 from '../components/SayVue3.vue' export default{ //注册组件 components: { sayVue3 }, data(){ return{ number:100 } }, methods:{ add(){ this.number++; } } } </script> <style> </style> \",\"@add自定义事件是子组件通过$emit传出来的自定义事件，父组件通过这个事件设置事件方法addNumber，然后修改自己的值，从而时间子组件修改父组件的值\",\"这么做的目的就是为了让数据可观察性更强，可维护性更高，有一个更清晰的清单\"]},\"1716\":{\"h\":\"路由\"},\"1717\":{\"h\":\"路由的概念\",\"t\":[\"用户发起一个请求,在互联网中经过多个站点的跳转.最终获取服务器端的数据，我们把互联网中网络的链路称之为路由。 (网络用语)VUE中的路由: 根据用户的请求URL地址,展现特定的组件(页面)信息. (控制用户程序跳转过程)\"]},\"1718\":{\"h\":\"路由的使用\",\"t\":[\"一、引入JS文件 : vue-router.js一定要注意引入顺序：Vue路由是基于vue.js的扩展，所以要先引用vue.js 再引用vue-router.js 文件\",\"二、定义组件 : var 组件名 = {template:\\\"组件HTML代码\\\"}\",\"三、创建路由的实例VueRouter,routes指定每个路由path映射的一个组件\",\"var 路由名 = new VueRouter({ routes:[ {path:\\\"/路径1\\\",component:组件名1}, {path:\\\"/路径2\\\",component:组件名2}, ............ ] }) \",\"四、在Vue对象代码中，通过 路由名 注入路由,从而让整个应用都有路由功能\",\" new Vue({ el:\\\"作用域\\\", ........ **router：路由名 //此处如果路由器也是router，可以简写 router即可** }) \",\"五、在HTML的渲染域中使用路由\",\"<div id=\\\"作用域\\\"> <!-- 将被解析成a标签,还有href属性 --> <router-link to=\\\"/路径1\\\">文字1</router-link> <router-link to=\\\"/路径2\\\">文字2</router-link> <!-- 路由出口,匹配成功后,在下面区域展示 --> <router-view></router-view> </div> \",\"演示代码\"]},\"1719\":{\"h\":\"Vue中的Ajax\"},\"1720\":{\"h\":\"Axios的概念\",\"t\":[\"Ajax 即Asynchronous Javascript And XML( 异步的 ) ，不是一种新的编程语言，而是多种技术的综合应用。是客户端的技术，它可以实现局部刷新网页(一种在无需重新加载整个网页的情况下，能够更新部分网页的技术)。Vue中封装了ajax并增强了它，在异步并发处理优于原生ajax。称为：axios（ajax input output system）\"]},\"1721\":{\"h\":\"使用\",\"t\":[\"一、引入JS文件 : axios.min.js一定要注意引入顺序：Vue路由是基于vue.js的扩展，所以要先引用vue.js 再引用vue-router.js 文件\",\"二、使用语法\",\"vur提供的对象，get函数是指即将发起一个get请求 参数是一段java程序的访问方式 当程序访问成功时，then函数是vue自动调用的函数 axios.get(\\\"url地址信息\\\",\\\"参数信息\\\").then(res=>{ //res记录程序返回值return => 箭头函数后处理返回结果res console.log(res.data); }) then：访问成功再运行 res：表示返回的数据 \"]},\"1722\":{\"h\":\"演示\",\"t\":[\"then() ：表示执行成功catch() : 请求失败执行finally() : 总会执行\"]},\"1723\":{\"h\":\"参数的拼接\"},\"1724\":{\"h\":\"普通参数\"},\"1725\":{\"h\":\"使用params\"},\"1726\":{\"h\":\"发送Json\",\"t\":[\"对JSON的处理\"]},\"1727\":{\"h\":\"生命周期\"},\"1728\":{\"h\":\"概念\",\"t\":[\"在我们各种语言的编程领域中，『生命周期』都是一个非常常见的概念。一个对象从创建、初始化、工作再到释放、清理和销毁，会经历很多环节的演变。比如我们在JavaSE阶段学习过线程的生命周期，今天学习Vue对象的生命周期，将来还要学习Servlet、Filter等Web组件的生命周期。\"]},\"1729\":{\"h\":\"Vue对象的生命周期\"},\"1730\":{\"h\":\"生命周期钩子函数\",\"t\":[\"Vue允许我们在特定的生命周期环节中通过钩子函数来加入我们的代码。\",\"<div id=\\\"app\\\"> <p id=\\\"content\\\">{{message}}</p> <button @click=\\\"changeValue\\\">点我</button> </div> \",\"new Vue({ \\\"el\\\":\\\"#app\\\", \\\"data\\\":{ \\\"message\\\":\\\"hello\\\" }, \\\"methods\\\":{ \\\"changeValue\\\":function(){ this.message = \\\"new hello\\\"; } }, // 1.实例创建之前 \\\"beforeCreate\\\":function(){ console.log(\\\"beforeCreate:\\\"+this.message); }, // 2.实例创建完成 \\\"created\\\":function(){ console.log(\\\"created:\\\"+this.message); }, // 3.数据挂载前 \\\"beforeMount\\\":function(){ console.log(\\\"beforeMount:\\\"+document.getElementById(\\\"content\\\").innerText); }, // 4.数据已经挂载 \\\"mounted\\\":function(){ console.log(\\\"mounted:\\\"+document.getElementById(\\\"content\\\").innerText); }, // 5.数据更新前 \\\"beforeUpdate\\\":function(){ console.log(\\\"beforeUpdate:\\\"+document.getElementById(\\\"content\\\").innerText); }, // 6.数据更新之后 \\\"updated\\\":function(){ console.log(\\\"updated:\\\"+document.getElementById(\\\"content\\\").innerText); } }); \"]},\"1731\":{\"h\":\"JavaEE简介\"},\"1732\":{\"h\":\"什么是JavaEE\",\"t\":[\"JavaEE（Java Enterprise Edition），Java企业版，是一个用于企业级web开发平台。最早由Sun公司定制并发布，后由Oracle负责维护。JavaEE平台规范了在开发企业级web应用中的技术标准.\",\"在JavaEE平台共包含了13个技术规范（随着JavaEE版本的变化所包含的技术点的数量会有增多）。它们分别是：JDBC、JNDI、EJB、RMI、Servlet、JSP、XML、JMS、Java IDL、JPA、JTA、JavaMail和JAF。 \"]},\"1733\":{\"h\":\"JavaEE的技术分布\"},\"1734\":{\"h\":\"JavaEE的版本变化\"},\"1735\":{\"h\":\"JavaEE应用服务器（JavaEE Application Server）\",\"t\":[\"应用服务器是Java EE规范的具体实现, 可以执行/驱动基于JavaEE平台开发的web项目。绝大部分的应用服务器都是付费产品。\",\"常见的应用服务：\",\"Weblogic（BEA Oracle 收费）\",\"Webshpere（IBM 收费）\",\"JBoss（RedHad 收费）\",\"Resin（Caucho 收费）\",\"JRun（Macromedia 收费）\"]},\"1736\":{\"h\":\"Web容器（Web Server）\",\"t\":[\"Geronimo（Apache 免费）\",\"只实现了JavaEE平台下部分技术标准，如Servlet，Jsp，JNDI，JavaMail。Web容器是开源免费的。\",\"Tomcat（Apache 开源免费）\",\"Jetty（Jetty 开源免费）\"]},\"1737\":{\"h\":\"Tomcat的安装与结构\"},\"1738\":{\"h\":\"Tomcat的安装\"},\"1739\":{\"h\":\"下载\",\"t\":[\"官方网址: http://tomcat.apache.org/\"]},\"1740\":{\"h\":\"安装\",\"t\":[\"tomcat由apache开源组织使用java开发的一款web容器,在使用之前需要安装JDK及配置JAVA_HOME.\",\"Tomcat是绿色软解，解压就可使用。如果之前已经安装了其他tomcat并且还配置了CATALINA_HOME 不要忘记修改CATALINA_HOME指向我们现在使用的这个tomcat\"]},\"1741\":{\"h\":\"启动\",\"t\":[\"运行startup.bat文件\",\"注意: 一定要配置JAVA_HOME, 部分电脑需要配置CATALINA_HOME\"]},\"1742\":{\"h\":\"关闭\",\"t\":[\"运行shutdown.bat文件或者直接关闭掉启动窗口\"]},\"1743\":{\"h\":\"访问\",\"t\":[\"访问Tomcat的URL格式：http://ip:port 访问本机Tomcat的URL格式：http://localhost:8080\"]},\"1744\":{\"h\":\"Tomcat目录结构\",\"t\":[\"目录\",\"说明\",\"bin\",\"主要是用来存放tomcat的命令文件，主要有两大类， 一类是以.sh结尾的（linux命令），另一类是以.bat结尾的（windows命令）\",\"conf\",\"conf目录主要是用来存放tomcat的一些配置文件\",\"lib\",\"lib目录主要用来存放tomcat运行需要加载的jar包\",\"logs\",\"logs目录用来存放tomcat在运行过程中产生的日志文件\",\"temp\",\"temp目录用户存放tomcat在运行过程中产生的临时文件。（清空不会对tomcat运行带来影响）\",\"webapps\",\"webapps目录用来存放应用程序，当tomcat启动时会去加载webapps目录下的应用程序。可以以文件夹、war包的形式发布应用\",\"work\",\"work目录用来存放tomcat在运行时的编译后文件，例如JSP编译后的文件\"]},\"1745\":{\"h\":\"Tomcat部署项目\"},\"1746\":{\"h\":\"方式一 : 在webapps目录中\",\"t\":[\"在Tomcat的webapps中创建一个我们自己的项目目录\",\"在自己的myProject中放入一下静态资源\",\"启动Tomcat,访问对应的资源\",\"运行原理\"]},\"1747\":{\"h\":\"方式二 : 在其他目录中\",\"t\":[\"在localhost中添加配置文件\",\"<Context path=\\\"/myProject\\\" docBase=\\\"d:/myProject\\\"/> \",\"建议配置文件名和项目名相同\",\"运行原理\"]},\"1748\":{\"h\":\"Tomcat的配置与组件\"},\"1749\":{\"h\":\"Tomcat的配置文件\",\"t\":[\"Tomcat 的配置文件由4个xml组成，分别是 context.xml、web.xml、server.xml、tomcat-users.xml。每个文件都有自己的功能与配置方法。\"]},\"1750\":{\"h\":\"context.xml\",\"t\":[\"Context.xml 是 Tomcat 公用的环境配置。 Tomcat 服务器会定时去扫描这个文件。一旦发现文件被修改（时间戳改变了），就会自动重新加载这个文件，而不需要重启服务器\"]},\"1751\":{\"h\":\"web.xml\",\"t\":[\"Web应用程序描述文件，都是关于是Web应用程序的配置文件。所有Web应用的 web.xml 文件的父文件\"]},\"1752\":{\"h\":\"server.xml\",\"t\":[\"是 tomcat 服务器的核心配置文件，server.xml的每一个元素都对应了 tomcat中的一个组件，通过对xml中元素的配置，实现对 tomcat中的各个组件和端口的配置\"]},\"1753\":{\"h\":\"tomcat-users.xml\",\"t\":[\"配置访问Tomcat的用户以及角色的配置文件\"]},\"1754\":{\"h\":\"Tomcat的配置\"},\"1755\":{\"h\":\"解决控制台乱码\",\"t\":[\"控制台产生乱码的原因是在Tomcat在输出日志中使用的是UTF-8编码，而我们中文的Windows操作系统使用的是GBK编码。由于编码格式不统一，所以出现了乱码。\",\"解决方式\",\"修改conf目录中的logging.properties文件重新指定的编码方式。如果还是不行,那么 就删除该行即可\",\"java.util.logging.ConsoleHandler.encoding = GBK \"]},\"1756\":{\"h\":\"修改Tomcat监听端口\",\"t\":[\"Tomcat默认监听端口为8080。可以通过修改server.xml文件来改变Tomcat的监听端口。\",\"<Connector port=\\\"8080\\\" protocol=\\\"HTTP/1.1\\\" connectionTimeout=\\\"20000\\\" redirectPort=\\\"8443\\\" /> \"]},\"1757\":{\"h\":\"配置Tomcat并发数\",\"t\":[\"Tomcat的最大并发数是可以配置的，实际运用中，最大并发数与硬件性能和CPU数量都有很大关系的。更好的硬件，更多的处理器都会使Tomcat支持更多的并发。\",\"这个并发能力还与应用的逻辑密切相关，如果逻辑很复杂需要大量的计算，那并发能力势必会下降。如果每个请求都含有很多的数据库操作，那么对于数据库的性能也是非常高的。\",\"对于单台数据库服务器来说，允许客户端的连接数量是有限制的。并发能力问题涉及整个系统架构和业务逻辑、系统环境不同、Tomcat版本不同、JDK版本不同、以及修改的设定参数不同。并发量的差异还是满大的。并发数设置参数有如下几个\",\"参数\",\"说明\",\"maxThreads\",\"最大并发数\",\"minSpareThreads\",\"初始化时创建的线程数\",\"maxSpareThreads\",\"一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程\",\"acceptCount\",\"指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理\",\"<Connector port=\\\"8080\\\" protocol=\\\"HTTP/1.1\\\" minSpareThreads=\\\"100\\\" maxSpareThreads=\\\"500\\\" maxThreads=\\\"1000\\\" acceptCount=\\\"700\\\" connectionTimeout=\\\"20000\\\" redirectPort=\\\"8443\\\" /> \"]},\"1758\":{\"h\":\"配置Tomcat Manager\",\"t\":[\"Tomcat Manager是Tomcat自带的、用于对Tomcat自身以及部署在Tomcat上的应用进行管理的web应用。默认情况下，Tomcat Manager是处于禁用状态的。准确的说，Tomcat Manager需要以用户角色进行登录并授权才能使用相应的功能，不过Tomcat并没有配置任何默认的用户，因此我们需要先进行用户配置后才能使用Tomcat Manager\"]},\"1759\":{\"h\":\"配置访问用户\",\"t\":[\"Tomcat Manager中没有默认用户，我们需要在tomcat-users.xml文件配置。Tomcat Manager的用户配置需要配置两个部分：角色配置、用户名及密码配置\",\"Tomcat Manager中的角色分类\",\"manager-gui角色 : 允许访问HTML GUI和状态页面(即URL路径为/manager/html/*)\",\"manager-script角色 : 允许访问文本界面和状态页面(即URL路径为/manager/text/*)\",\"manager-jmx角色 : 允许访问JMX代理和状态页面(即URL路为/manager/jmxproxy/*)\",\"manager- status角色 : 仅允许访问状态页面(即URL路径为/manager/status/*)\",\"配置用户即角色\",\" <role rolename=\\\"manager-gui\\\"/> <role rolename=\\\"manager-script\\\"/> <role rolename=\\\"manager-jmx\\\"/> <role rolename=\\\"manager-status\\\"/> <role rolename=\\\"admin-gui\\\"/> <role rolename=\\\"admin-script\\\"/> <user username=\\\"tomcat\\\" password=\\\"tomcat\\\" roles=\\\"manager-gui,manager-script,manager-jmx,manager-status,admin-gui,admin-script\\\"/> \"]},\"1760\":{\"h\":\"Tomcat的组件\"},\"1761\":{\"h\":\"Tomcat体系结构图\"},\"1762\":{\"h\":\"核心组件\"},\"1763\":{\"h\":\"Server组件\",\"t\":[\"启动一个server实例（即一个JVM），它监听在8005端口以接收shutdown命令。Server的定义不能使用同一个端口，这意味着如果在同一个物理机上启动了多个Server实例，必须配置它们使用不同的端口。\",\"<Server port=\\\"8005\\\" shutdown=\\\"SHUTDOWN\\\"> \",\"port : 接收shutdown指令的端口，默认为8005；shutdown: 发往此Server用于实现关闭tomcat实例的命令字符串，默认为SHUTDOWN；\"]},\"1764\":{\"h\":\"Service组件\",\"t\":[\"Service主要用于关联一个引擎和与此引擎相关的连接器，每个连接器通过一个特定的端口和协议接收请求并将其转发至关联的引擎进行处理。困此，Service要包含一个引擎、一个或多个连接器。\",\"<Service name=\\\"Catalina\\\"> \",\"name: 此服务的名称，默认为Catalina；\"]},\"1765\":{\"h\":\"Connector组件\",\"t\":[\"支持处理不同请求的组件，一个引擎可以有一个或多个连接器，以适应多种请求方式。默认只开启了处理Http协议的连接器。如果需要使用其他协议，需要在Tomcat中配置该协议的连接器。\",\"在Tomcat中连接器类型通常有4种：\",\"HTTP连接器\",\"SSL连接器\",\"AJP 1.3连接器\",\"proxy连接器\",\"<Connector port=\\\"8888\\\" protocol=\\\"HTTP/1.1\\\" connectionTimeout=\\\"20000\\\" redirectPort=\\\"8443\\\" /> \",\"port: 监听的端口protocol: 连接器使用的协议，默认为HTTP/1.1;connectionTimeout: 等待客户端发送请求的超时时间，单位为毫秒;redirectPort: 如果某连接器支持的协议是HTTP，当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口;maxThreads: 支持的最大并发连接数，默认为200个;\"]},\"1766\":{\"h\":\"Engine组件\",\"t\":[\"Engine是Servlet处理器的一个实例，即servlet引擎，定义在server.xml中的Service标记中。Engine需要defaultHost属性来为其定义一个接收所有发往非明确定义虚拟主机的请求的host组件。\",\"<Engine name=\\\"Catalina\\\" defaultHost=\\\"localhost\\\"> \",\"name: Engine组件的名称;defaultHost: Tomcat支持基于FQDN(Fully Qualified Domain Name 全限定域名)的虚拟主机，这些虚拟主机可以通过在Engine容器中定义多个不同的Host组件来实现；但如果此引擎的连接器收到一个发往非非明确定义虚拟主机的请求时则需要将此请求发往一个默认的虚拟主机进行处理，因此，在Engine中定义的多个虚拟主机的主机名称中至少要有一个跟defaultHost定义的主机名称同名；\"]},\"1767\":{\"h\":\"Host组件\",\"t\":[\"位于Engine容器中用于接收请求并进行相应处理的虚拟主机。通过该容器可以运行Servlet或者JSP来处理请求。\",\"<Host name=\\\"localhost\\\" appBase=\\\"webapps\\\" unpackWARs=\\\"true\\\" autoDeploy=\\\"true\\\"> \",\"name: 虚拟主机的名称，Tomcat通过在请求URL中的域名与name中的值匹配，用于查找能够处理该请求的虚拟主机。如果未找到则交给在Engine中defaultHost指定的主机处理；appBase: 此Host的webapps目录，即指定存放web应用程序的目录的路径；name: 在Tomcat处于运行状态时放置于appBase目录中的应用程序文件是否自动进行deploy；默认为true；name: 在启用此webapps时是否对WAR格式的归档文件先进行展开；默认为true；\"]},\"1768\":{\"h\":\"Context组件\",\"t\":[\"Context是Host的子标签，代表指定一个Web应用，它运行在某个指定的虚拟主机（Host）上；每个Web应用都是一个WAR文件，或文件的目录；\",\"<Context path=\\\"/test\\\" docBase=\\\"D:\\\\mashibing.war\\\" /> \",\"path: context path既浏览器访问项目的访问路径。docBase: 相应的Web应用程序的存放位置；也可以使用相对路径，起始路径为此Context所属Host中appBase定义的路径；\"]},\"1769\":{\"h\":\"Tomcat处理请求过程\",\"t\":[\"简单来说:\",\"Connector获得请求 → 所在Service的Engine组件拿到请求 → Host组件匹配主机 → 匹配到的Context获得请求 → JspServlet执行业务 → Context组件 → Host组件 → Engine组件 → Connector组件 → Browser\",\"详细流程\",\"用户访问localhost:8080/test/index.jsp，请求被发送到Tomcat，被监听8080端口并处理HTTP/1.1 协议的Connector获得。\",\"Connector把该请求交给它所在的Service的Engine来处理，并等待Engine的回应。\",\"Engine获得请求localhost/test/index.jsp，匹配所有的虚拟主机Host。\",\"Engine匹配到名为localhost的Host虚拟主机来处理/test/index.jsp请求（即使匹配不到会请求交给默认Host处理），Host会根据/test匹配它所拥有的所有的Context\",\"匹配到的Context获得请求/index.jsp。\",\"构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet（）或doPost（）.执行业务逻辑、数据存储等程序。\",\"Context把执行完之后的结果通过HttpServletResponse对象返回给Host。\",\"Host把HttpServletResponse返回给Engine。\",\"Engine把HttpServletResponse对象返回Connector。\",\"Connector把HttpServletResponse对象返回给客户Browser。\"]},\"1770\":{\"h\":\"JavaWeb项目的开发与部署\"},\"1771\":{\"h\":\"初识JavaWeb目录结构\"},\"1772\":{\"h\":\"基本结构\",\"t\":[\"project项目的根目录\",\"静态资源文件/jsp \",\"lib jar包目录\",\"classes java字节码目录\",\"web.xml项目的配置文件\",\"其他资源\"]},\"1773\":{\"h\":\"层级关系\",\"t\":[\"层级关系一\",\"层级关系二\"]},\"1774\":{\"h\":\"使用IDEA开发JavaWeb\"},\"1775\":{\"h\":\"创建工程\",\"t\":[\"选择Java Enterprise \",\"Project SDK选项 推荐 1.8 如果没有SDK 可以通过后面的 NEW按钮选择自己的JDK安装路径即可 (注意选择的是bin的上一层)\",\"Java EE version 推荐JAVA EE 8\",\"Application Server 关联Tomcat容器,如果没有, NEW按钮选择自己的Tomcat安装路径即可 (注意选择的是bin的上一层)\",\"Additional Libraries and Freameworks 中 必须勾选 Web Applicaiton(4.0)选项 同时注意 create web.xml勾选上\",\"自定义项目名,项目存放路径中注意不要出现 双 \\\\ 和特殊符号中文空格等\"]},\"1776\":{\"h\":\"目录结构\",\"t\":[\"src目录 : 用于定义Java源代码web目录 : 中用于存放一些页面资源( 如果上一步没有勾选Web Applicaiton(4.0)选项),则不会出现web目录External Libraries : 中要出现 JDK1.8 和Tomcat jsp-api和servlet-api 才可以正常编写JAVAWEB项目\"]},\"1777\":{\"h\":\"使用IDEA运行项目\",\"t\":[\"启动项目之前,先对项目进行配置\",\"点击Edit Configurations 对项目进行启动之前的配置\",\"检查项目配置 Deployment选项\",\"在Deployment中, Deployed at the server startup里确认要部署的项目是不是我们要运行的项目 在Application context中指定我们项目访问的路径名 idea默认是 项目名+\\\"_war_exploded\\\",在这里我们可以对项目的访问名进行修改,如果不修改,也OK,可以一样使用 Server选项\",\"勾选Open browser中的After launch选项. 这样idea在启动项目之后可以自动帮助我们打开浏览器并访问URL中的资源On Update action : 当代码改变的时候，需要IDEA为你做什么；选项选为 Update classes and resources ,意义为:更新字节码和其他资源On Frame deactivation : 当失去焦点（比如你最小化了IDEA窗口），需要IDEA为你做什么。选项. 选为 Update resources ,意义为:更新其他资源 HTTP port 默认为8080 不用修改 JMX port 默认为 1099 不用修改\",\"然后点击运行启动即可\"]},\"1778\":{\"h\":\"使用IDEA部署项目\"},\"1779\":{\"h\":\"第一种[默认]\",\"t\":[\"在Idea中默认的并不会把web项目真正的部署到Tomcat的webapps目录中，而是通过为每个web项目创建一个独立的Tomcat副本并在Tomcat副本中通过的Tomcat的Context组件完成项目的目录指定，在Context组件的docBase属性中会指定Idea对web项目编译后的目录out/artifacts/.....。\",\"默认部署方式: Idea会在C:\\\\Users\\\\Administrator\\\\.IntelliJIdea2019.2\\\\system\\\\tomcat中为每个Web项目创建一个独立的Tomcat副本。\",\"C:\\\\Users\\\\Administrator\\\\.IntelliJIdea2019.2\\\\system\\\\tomcat\\\\Tomcat_9_0_34_demo_4\\\\conf\\\\Catalina\\\\localhost目录中生成一个该项目的xml文件名称为：”项目名.xml”\",\"Idea通过执行Tomcat的catalina.bat启动脚本启动Tomcat，通过启动参数来指定启动Tomcat副本运行指定目录中的web项目\",\"Idea在启动Tomcat之前会先在操作系统中设置一些临时环境变量，这些变量会被Tomcat的启动脚本所读取\",\"CATALINA_BASE：是Tomcat副本的工作目录CATALINA_HOME：是Tomcat的安装目录\",\"在Catalina.bat启动脚本运行时，会先去判断脚本中的CATALINA_HOME以及CATALINA_BASE是否有默认值，如果没有则直接读取系统环境变量中的值作为他们的默认值。由于Idea在启动Tomcat之前已经设置了临时环境变量，所以tomcat在启动后就会运行部署在Tomcat副本中的web项目\"]},\"1780\":{\"h\":\"第二种\",\"t\":[\"将web项目部署到Tomcat的webapps中\",\"点击项目结构选项 指定输出artifacts的目录为Tomcat的webapps中的demo目录\",\"在tomcat的webapps中创建一个目录\",\"启动Tomcat，查看demo目录中的内容\"]},\"1781\":{\"h\":\"初识Servlet\"},\"1782\":{\"h\":\"Servlet简介\",\"t\":[\"Servlet是Server Applet的简称，称为服务端小程序，是JavaEE平台下的技术标准，基于Java语言编写的服务端程序。Web容器或应用服务器实现了Servlet标准所以Servlet需运行在Web容器或应用服务器中。Servlet主要功能在于能在服务器中执行并生成数据。\"]},\"1783\":{\"h\":\"Servlet技术特点\",\"t\":[\"Servlet使用单进程多线程方式运行\"]},\"1784\":{\"h\":\"Servlet在应用程序中的位置\"},\"1785\":{\"h\":\"静态资源和动态资源区分\",\"t\":[\"静态资源 每次访问都不需要运算,直接就可以返回的资源, 如HTML CSS JS 多媒体文件等等,每次访问获得的资源都是一样的\",\"动态资源 每次访问都需要运算代码生成的资源,如Servlet JSP ,每次访问获得的结果可能都是不一样的\"]},\"1786\":{\"h\":\"Servlet在程序中地位\",\"t\":[\"Servlet是可以接受Http请求并作出相应的一种技术,是JAVA语言编写的一种动态资源\",\"Servlet是前后端衔接的一种技术,不是所有的JAVA类都可以接收请求和作出相应,Servlet可以在MVC模式中,Servlet作为Controller层(控制层)主要技术,用于和浏览器完成数据交互,控制交互逻辑\"]},\"1787\":{\"h\":\"快速开发\",\"t\":[\"在后台随机生成一个整数, 当浏览器请求一个Servlet时, 如果生成的是奇数,返回\\\"happy new year\\\", 如果生成的是偶数,返回\\\"happy birthday\\\"\"]},\"1788\":{\"h\":\"开发步骤\"},\"1789\":{\"h\":\"继承HttpServlet 类,重写service方法\",\"t\":[\"public class MyServlet extends HttpServlet { @Override public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException { super.service(req, res); } } \"]},\"1790\":{\"h\":\"编写功能性代码\",\"t\":[\"public class MyServlet extends HttpServlet { /** * 重写service * @param req * @param resp * @throws ServletException * @throws IOException */ @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 动态生成数据 int num = new Random().nextInt(); String message = num%2==0?\\\"happy birthday\\\":\\\"happy new year\\\"; // 对浏览器作出响应 PrintWriter writer = resp.getWriter(); writer.write(message); } } \"]},\"1791\":{\"h\":\"在web.xml中配置Servlet的映射路径\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <!-- 声明一个servlet --> <servlet> <servlet-name>myServlet</servlet-name> <servlet-class>com.meturing.servlet.MyServlet</servlet-class> </servlet> <!-- 给Servlet配置映射路径--> <servlet-mapping> <servlet-name>myServlet</servlet-name> <url-pattern>/myServlet.do</url-pattern> </servlet-mapping> </web-app> \"]},\"1792\":{\"h\":\"一个简单的登录Demo\",\"t\":[\"准备一个登录页,可以输入用户名和密码, 输入完毕后向后台Servlet提交用户名和密码. Servlet接收到用户名和密码之后,校验是否正确,如果正确响应Success,如果正确响应Success.\"]},\"1793\":{\"h\":\"创建登录页面\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> </head> <body> <form method=\\\"get\\\" action=\\\"login.do\\\"> <table style=\\\"margin: 0px auto\\\" width=\\\"300px\\\" cellpadding=\\\"0px\\\" cellspacing=\\\"0px\\\" border=\\\"1px\\\"> <tr> <td>用户名</td> <td> <input type=\\\"text\\\" name=\\\"username\\\" > </td> </tr> <tr> <td>密码</td> <td> <input type=\\\"password\\\" name=\\\"pwd\\\"> </td> </tr> <tr align=\\\"center\\\"> <td colspan=\\\"2\\\"> <input type=\\\"submit\\\" value=\\\"登录\\\"> </td> </tr> </table> </form> </body> </html> \"]},\"1794\":{\"h\":\"创建Servlet\",\"t\":[\"public class LoginServlet extends HttpServlet { @Override public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException { String sUsername = req.getParameter(\\\"username\\\"); String sPwd = req.getParameter(\\\"pwd\\\"); String message = null; if (\\\"admin\\\".equals(sUsername)&&\\\"admin\\\".equals(sPwd)){ message=\\\"Success\\\"; }else { message=\\\"Fail\\\"; } res.getWriter().write(message); } } \"]},\"1795\":{\"h\":\"配置web.xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <!-- 声明一个servlet --> <servlet> <servlet-name>login</servlet-name> <servlet-class>com.meturing.servlet.LoginServlet</servlet-class> </servlet> <!-- 给Servlet配置映射路径--> <servlet-mapping> <servlet-name>login</servlet-name> <url-pattern>/login.do</url-pattern> </servlet-mapping> <!-- 配置首页 --> <welcome-file-list> <welcome-file>login.html</welcome-file> </welcome-file-list> </web-app> \"]},\"1796\":{\"h\":\"HttpServletRequest和HttpServletResponse\"},\"1797\":{\"h\":\"HttpServletRequest\",\"t\":[\"HttpServletRequest对象代表客户端浏览器的请求，当客户端浏览器通过HTTP协议访问服务器时，HTTP请求中的所有信息都会被Tomcat所解析并封装在这个对象中，通过这个对象提供的方法，可以获得客户端请求的所有信息。\"]},\"1798\":{\"h\":\"了解请求结构\",\"t\":[\"请求的主要组成部分\"]},\"1799\":{\"h\":\"获取请求行\",\"t\":[\"API\",\"说明\",\"getRequestURL()\",\"返回客户端浏览器发出请求时的完整URL\",\"getRequestURI()\",\"返回请求行中指定资源部分\",\"getRemoteAddr()\",\"返回发出请求的客户机的IP地址\",\"getLocalAddr()\",\"返回WEB服务器的IP地址\",\"getLocalPort()\",\"返回WEB服务器处理Http协议的连接器所监听的端口\",\"public class Servlet3 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(req.getRequestURL());//返回客户端浏览器发出请求时的完整URL。 System.out.println(req.getRequestURI());//返回请求行中指定资源部分。 System.out.println(req.getRemoteAddr());//返回发出请求的客户机的IP地址。 System.out.println(req.getLocalAddr());//返回WEB服务器的IP地址。 System.out.println(req.getLocalPort());//返回WEB服务器处理Http协议的连接器所监听的端口。 System.out.println(\\\"主机名: \\\" + req.getLocalName()); System.out.println(\\\"客户端PORT: \\\" + req.getRemotePort()); System.out.println(\\\"当前项目部署名: \\\" + req.getContextPath()); System.out.println(\\\"协议名:\\\"+req.getScheme()); System.out.println(\\\"请求方式:\\\"+req.getMethod()); } } \"]},\"1800\":{\"h\":\"获取请求头信息\",\"t\":[\"API\",\"说明\",\"getHeader(\\\"headerKey\\\")\",\"根据请求头中的key获取对应的value\",\"getHeaderNames()\",\"获取请求头中所有的key，该方法返回枚举类型\",\"public class Servlet3 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 根据请求头名或者请求头对应的值 System.out.println(req.getHeader(\\\"Accept\\\")); // 获得全部的请求头名 Enumeration<String> headerNames = req.getHeaderNames(); while (headerNames.hasMoreElements()){ String headername = headerNames.nextElement(); System.out.println(headername+\\\":\\\"+req.getHeader(headername)); } } } \"]},\"1801\":{\"h\":\"获取请求体信息\",\"t\":[\"API\",\"说明\",\"getParameter(\\\"key\\\")\",\"根据key获取指定value\",\"getParameterValues(\\\"checkboxkey\\\")\",\"获取复选框(checkbox组件)中的值，返回一个String[]\",\"getParameterNames()\",\"获取请求中所有数据的key，该方法返回一个枚举类型\",\"getParameterMap()\",\"获取请求中所有的数据并存放到一个Map结构中，该方法返回一个Map，其中key为String类型value为String[]类型\",\"setCharacterEncoding(\\\"utf-8\\\")\",\"设置请求编码\",\"请求的数据包基于字节在网络上传输，Tomcat接收到请求的数据包后会将数据包中的字节转换为字符。\",\"在Tomcat中使用的是ISO-8859-1的单字节编码完成字节与字符的转换，所以数据中含有中文就会出现乱码，可以通过req.setCharacterEncoding(\\\"utf-8\\\")方法来对提交的数据根据指定的编码方式重新做编码处理。\",\"public class Servlet3 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 根据请求头名或者请求头对应的值 System.out.println(req.getHeader(\\\"Accept\\\")); // 获得全部的请求头名 Enumeration<String> headerNames = req.getHeaderNames(); while (headerNames.hasMoreElements()){ String headername = headerNames.nextElement(); System.out.println(headername+\\\":\\\"+req.getHeader(headername)); } System.out.println(\\\"________________________________\\\"); Map<String, String[]> pmap = req.getParameterMap(); Set<Map.Entry<String, String[]>> entries = pmap.entrySet(); for (Map.Entry<String, String[]> entry : entries) { System.out.println(entry.getKey()+\\\":\\\"+Arrays.toString(entry.getValue())); } } } \"]},\"1802\":{\"h\":\"HttpServletResponse\",\"t\":[\"HttpServletResponse对象代表服务器的响应。这个对象中封装了响应客户端浏览器的流对象，以及向客户端浏览器响应的响应头、响应数据、响应状态码等信息。\"]},\"1803\":{\"h\":\"了解响应\",\"t\":[\"HTTP响应\"]},\"1804\":{\"h\":\"响应状态\",\"t\":[\"API\",\"说明\",\"setStatus(状态码)\",\"设置响应码\",\"设置响应状态\",\"更多类型详见: HTTP状态码分类\"]},\"1805\":{\"h\":\"响应类型设置\",\"t\":[\"API\",\"说明\",\"setContentType(\\\"Type\\\")\",\"通过MIME-Type设置响应类型\",\"MIME的全称是Multipurpose Internet Mail Extensions，即多用途互联网邮件扩展类型。这是HTTP协议中用来定义文档性质及格式的标准。对HTTP传输内容类型进行了全面定义。服务器通过MIME告知响应内容类型，而浏览器则通过MIME类型来确定如何处理文档。\",\"更多类型详见: Content-Type\"]},\"1806\":{\"h\":\"设置字符型响应\",\"t\":[\"API\",\"说明\",\"setContentType(\\\"image/jpeg\\\")\",\"设置响应类型为图片类型，图片类型为jpeg或jpg格式\",\"setContentType(\\\"image/gif\\\")\",\"设置响应类型为图片类型，图片类型为gif格式\",\"setCharacterEncoding(\\\"utf-8\\\")\",\"设置服务端为浏览器产生响应的响应编码，服务端会根据此编码将响应内容的字符转换为字节\",\"setContentType(\\\"text/html;charset=utf-8\\\")\",\"设置服务端为浏览器产生响应的响应编码，服务端会根据此编码将响应内容的字符转换为字节。同时客户端浏览器会根据此编码方式显示响应内容。\"]},\"1807\":{\"h\":\"设置文件下载\",\"t\":[\"API\",\"说明\",\"setHeader(\\\"Content-Disposition\\\", \\\"attachment; filename=\\\"+文件名)\",\"该附加信息表示作为对下载文件的一个标识字段。不会在浏览器中显示而是直接做下载处理\",\"Content-Disposition:attachment : 该附加信息表示作为对下载文件的一个标识字段。不会在浏览器中显示而是直接做下载处理\",\"filename=文件名 : 表示指定下载文件的文件名\"]},\"1808\":{\"h\":\"Demo\",\"t\":[\"public class MyServlet2 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 设置响应码 //resp.setStatus(500); //resp.setStatus(405, \\\"request method not supported\\\"); // 设置响应头 //resp.setHeader(\\\"Date\\\",\\\"2022-11-11\\\"); // 自定义头 // resp.setHeader(\\\"aaa\\\", \\\"bbb\\\"); // 高速浏览器响应的数据是什么? 浏览器根据此头决定 数据如何应用 // 设置MIME类型 json xml 文件下载 ... ... // resp.setHeader(\\\"content-type\\\", \\\"text/css\\\"); resp.setContentType(\\\"text/html\\\");// 专门用于设置Content-Type 响应头 resp.getWriter().write(\\\"<h1>this is tag h1</h1>\\\"); } } \"]},\"1809\":{\"h\":\"乱码的处理\"},\"1810\":{\"h\":\"控制台乱码\",\"t\":[\"设置Tomcat中 conf下logging.properties中所有的UTF-8编码为GBK即可\",\"详见: 解决控制台乱码\"]},\"1811\":{\"h\":\"post请求乱码\",\"t\":[\"通过HttpServletRequest设置请求编码\",\" /*处理post请求乱码*/ req.setCharacterEncoding(\\\"UTF-8\\\"); \"]},\"1812\":{\"h\":\"get请求乱码\",\"t\":[\"需要手动进行编码解码,或者设置tomcat中的server.xml中的URI编码. tomcat9已经解决了该问题\",\"<Connector port=\\\"8080\\\" protocol=\\\"HTTP/1.1\\\" connectionTimeout=\\\"20000\\\" redirectPort=\\\"8443\\\" URIEncoding=\\\"utf-8\\\" /> \"]},\"1813\":{\"h\":\"响应乱码\",\"t\":[\"通过HttpServletResponse设置响应编码\",\"//以UTF-8编码处理数据 resp.setContentType(\\\"UTF-8\\\"); //设置响应头,以便浏览器知道以何种编码解析数据 resp.setContentType(\\\"text/html;charset=UTF-8\\\"); \"]},\"1814\":{\"h\":\"下载文件名乱码\",\"t\":[\"resp.addHeader(\\\"Content-Disposition\\\",\\\"attachment;filename=\\\"+new String (file.getName().getBytes(\\\"gbk\\\"),\\\"iso-8859-1\\\")); \"]},\"1815\":{\"h\":\"继承结构与生命周期\"},\"1816\":{\"h\":\"Servlet的继承结构\"},\"1817\":{\"h\":\"Servlet接口\",\"t\":[\"API\",\"说明\",\"init()\",\"创建Servlet对象后立即调用该方法完成其他初始化工作\",\"service()\",\"处理客户端请求，执行业务操作，利用响应对象响应客户端请求\",\"destroy()\",\"在销毁Servlet对象之前调用该方法，释放资源\",\"getServletConfig()\",\"ServletConfig是容器向servlet传递参数的载体\",\"getServletInfo()\",\"获取servlet相关信息\"]},\"1818\":{\"h\":\"ServletConfig接口\",\"t\":[\"Servlet运行期间，需要一些辅助信息，这些信息可以在web.xml文件中，使用一个或多个元素，进行配置。\",\"当Tomcat初始化一个Servlet时，会将该Servlet的配置信息，封装到一个ServletConfig对象中，通过调用init(ServletConfig config)方法，将ServletConfig对称传递给Servlet\"]},\"1819\":{\"h\":\"GenericServlet抽象类\",\"t\":[\"GenericServlet是实现了Servlet接口的抽象类。\",\"在GenericServlet中进一步的定义了Servlet接口的具体实现，其设计的目的是为了和应用层协议解耦，在GenericServlet中包含一个Service抽象方法。\",\"我们也可以通过继承GenericServlet并实现Service方法实现请求的处理，但是需要将ServletReuqest 和 ServletResponse 转为 HttpServletRequest 和 HttpServletResponse。\"]},\"1820\":{\"h\":\"HttpServlet\",\"t\":[\"继承自GenericServlet. 针对于处理 HTTP 协议的请求所定制。\",\"在 HttpServlet的service() 方法中已经把 ServletReuqest 和 ServletResponse 转为 HttpServletRequest 和 HttpServletResponse。 \",\"直接使用 HttpServletRequest 和HttpServletResponse, 不再需要强转。实际开发中, 直接继承 HttpServlet, 并根据请求方式复写 doXxx() 方法即可。\",\"在我们自定义的Servlet中,如果想区分请求方式,不同的请求方式使用不同的代码处理,那么我么重写 doGet doPost 即可\",\"如果我们没有必要区分请求方式的差异,那么我们直接重写service方法即可\",\"要么重写doGet doPost 要么重写 service,必须二选一,而且必须进行重写\"]},\"1821\":{\"h\":\"Servlet的生命周期\"},\"1822\":{\"h\":\"容器管理阶段\",\"t\":[\"Servlet的生命周期是由容器管理的，分别经历四个阶段\",\"阶段\",\"次数\",\"时机\",\"创建 new\",\"1次\",\"第一次请求\",\"初始化 init()\",\"1次\",\"实例化之后\",\"执行服务 service()\",\"多次\",\"每次请求\",\"销毁 destroy()\",\"1次\",\"停止服务\"]},\"1823\":{\"h\":\"执行流程\",\"t\":[\"当客户端浏览器第一次请求Servlet时，容器会实例化这个Servlet，然后调用一次init方法，并在新的线程中执行service方法处理请求。\",\"service方法执行完毕后容器不会销毁这个Servlet而是做缓存处理，当客户端浏览器再次请求这个Servlet时，容器会从缓存中直接找到这个Servlet对象，并再一次在新的线程中执行Service方法。\",\"当容器在销毁Servlet之前会调用一次destory方法\"]},\"1824\":{\"h\":\"线程的安全性问题\",\"t\":[\"在Servlet中我们一般不要轻易使用成员变量!!!! 可能会造成线程安全问题\",\"如果要使用的话,应该尽量避免对成员变量产生修改,如果要产生修改我们应该注意线程安全问题,但是要知道,添加线程安全编码处理,会严重影响效率.\",\"综上所述: 原则,能不用成员变量就不用!!!\"]},\"1825\":{\"h\":\"简单的应用实例\",\"t\":[\"public class MyServlet4 extends HttpServlet { // 成员变量 public MyServlet4() {// 构造一个Servlet对象的方法 System.out.println(\\\"MyServlet4 Constructor invoked\\\"); try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); } } @Override public void init() throws ServletException {// 初始化 System.out.println(\\\"MyServlet4 init invoked\\\"); try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); } } @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 执行服务 System.out.println(\\\"MyServlet4 service invoked\\\"); } @Override public void destroy() {// 销毁 System.out.println(\\\"MyServlet4 destory invoked\\\"); } } \",\"多次请求servlet并查看控制台输出即可印证上述结论,值得注意的是:\",\"如果需要Servlet在服务启动时就实例化并初始化,我们可以在servlet的配置中添加load-on-startup配置启动顺序,配置的数字为启动顺序,应避免冲突且应>6\"]},\"1826\":{\"h\":\"Servlet处理请求的过程\",\"t\":[\"当浏览器基于get方式请求我们创建Servlet时，我们自定义的Servlet中的doGet方法会被执行。 doGet方法能够被执行并处理get请求的原因是，容器在启动时会解析web工程中WEB-INF目录中的web.xml文件，在该文件中我们配置了Servlet与URI的绑定，容器通过对请求的解析可以获取请求资源的URI，然后找到与该URI绑定的Servlet并做实例化处理 注意：只实例化一次，如果在缓存中能够找到这个Servlet就不会再做次实例化处理\",\"在实例化时会使用Servlet接口类型作为引用类型的定义，并调用一次init方法，由于HttpServlet中重写了该方法所以最终执行的是HttpServlet中init方法 HttpServlet中的Init方法是一个空的方法体\",\"然后在新的线程中调用service方法 由于在HttpServlet中重写了Service方法所以最终执行的是HttpServlet中的service方法\",\"在service方法中通过request.getMethod()获取到请求方式进行判断如果是Get方式请求就执行doGet方法，如果是POST请求就执行doPost方法\",\"如果是基于GET方式提交的，并且在我们自定义的Servlet中又重写了HttpServlet中的doGet方法，那么最终会根据Java的多态特性转而执行我们自定义的Servlet中的doGet方法\"]},\"1827\":{\"h\":\"ServletContext和ServlectConfig\"},\"1828\":{\"h\":\"ServletContext对象\",\"t\":[\"ServletContext官方叫Servlet上下文。服务器会为每一个Web应用创建一个ServletContext对象。这个对象全局唯一，而且Web应用中的所有Servlet都共享这个对象。所以叫全局应用程序共享对象\"]},\"1829\":{\"h\":\"作用与API\",\"t\":[\"相对路径转绝对路径\",\"获取容器的附加信息\",\"读取配置信息\",\"全局容器\",\"API\",\"说明\",\"getContextPath()\",\"获取项目的部署名\",\"getRealPath(\\\"path\\\")\",\"相对路径转绝对路径(文件上传下载时需要注意) 该方法可以将一个相对路径转换为绝对路径，在文件上传与下载时需要用到该方法做路径的转换。\",\"getServerInfo()\",\"获取容器的附加信息 返回Servlet容器的名称和版本号\",\"getMajorVersion()\",\"返回Servlet容器的名称和版本号\",\"getMinorVersion()\",\"返回Servlet容器所支持Servlet的主版本号\",\"getInitParameter(\\\"key\\\")\",\"该方法可以读取web.xml文件中<context-param>标签中的配置信息\",\"getInitParameterNames()\",\"该方法可以读取web.xml文件中所有param-name标签中的值\",\"setAttribute(\\\"key\\\",ObjectValue)\",\"向全局容器中存放数据\",\"getAttribute(\\\"key\\\")\",\"从全局容器中获取数据\",\"removeAttribute(\\\"key\\\")\",\"根据key删除全局容器中的value\"]},\"1830\":{\"h\":\"生命周期\",\"t\":[\"当容器启动时会创建ServletContext对象并一直缓存该对象,直到容器关闭后该对象生命周期结束.\",\"ServletContext对象的生命周期非常长，所以在使用全局容器时不建议存放业务数据。\"]},\"1831\":{\"h\":\"使用案例\",\"t\":[\"案例一\",\"public class Servlet1 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //获取Servlet对象的方式 // 通过req对象 ServletContext servletContext1 = req.getServletContext(); // 通过继承的方法 ServletContext servletContext2 = this.getServletContext(); System.out.println(servletContext1 == servletContext2); // 获取当前项目的部署名 String contextPath = servletContext1.getContextPath(); System.out.println(\\\"contextPath\\\"+contextPath); // 将一个相对路径转化为项目的绝对路径 String fileUpload = servletContext1.getRealPath(\\\"fileUpload\\\"); System.out.println(fileUpload); String serverInfo = servletContext1.getServerInfo(); System.out.println(\\\"servletInfo\\\"+serverInfo); int majorVersion = servletContext1.getMajorVersion(); int minorVersion = servletContext1.getMinorVersion(); System.out.println(majorVersion+\\\":\\\"+minorVersion); // 获取web.xml中配置的全局的初始信息 String username = servletContext1.getInitParameter(\\\"username\\\"); String password = servletContext1.getInitParameter(\\\"password\\\"); System.out.println(username+\\\":\\\"+password); //向ServletContext对象中增加数据 域对象 List<String> data=new ArrayList<>(); Collections.addAll(data,\\\"张三\\\",\\\"李四\\\",\\\"王五\\\"); servletContext1.setAttribute(\\\"list\\\",data); servletContext1.setAttribute(\\\"gender\\\",\\\"boy\\\"); } } \",\"案例二\",\"public class Servlet2 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { ServletContext servletContext = this.getServletContext(); // 获取web.xml中配置的全局的初始信息 Enumeration<String> pnames = servletContext.getInitParameterNames(); while(pnames.hasMoreElements()){ String e = pnames.nextElement(); System.out.println(e+\\\":\\\"+servletContext.getInitParameter(e)); } List<String> list = (List<String>) servletContext.getAttribute(\\\"list\\\"); System.out.println(list); String gender = (String)servletContext.getAttribute(\\\"gender\\\"); System.out.println(gender); } } \",\"XML\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <servlet> <servlet-name>servlet1</servlet-name> <servlet-class>com.meturing.testServlet.Servlet1</servlet-class> </servlet> <servlet> <servlet-name>servlet2</servlet-name> <servlet-class>com.meturing.testServlet.Servlet2</servlet-class> </servlet> <servlet-mapping> <servlet-name>servlet1</servlet-name> <url-pattern>/servlet1.do</url-pattern> </servlet-mapping> <servlet-mapping> <servlet-name>servlet2</servlet-name> <url-pattern>/servlet2.do</url-pattern> </servlet-mapping> <context-param> <param-name>username</param-name> <param-value>mashibing</param-value> </context-param> <context-param> <param-name>password</param-name> <param-value>123456</param-value> </context-param> </web-app> \"]},\"1832\":{\"h\":\"ServletConfig对象\",\"t\":[\"ServletConfig对象对应web.xml文件中的<servlet>节点。当Tomcat初始化一个Servlet时，会将该Servlet的配置信息，封装到一个ServletConfig对象中。\"]},\"1833\":{\"h\":\"作用与API\",\"t\":[\"我们可以通过该对象读取<servlet>节点中的配置信息\",\"API\",\"说明\",\"getInitParameter(\\\"key\\\")\",\"该方法可以读取web.xml文件中<servlet>标签中<init-param>标签中的配置信息\",\"getInitParameterNames()\",\"该方法可以读取web.xml文件中当前<servlet>标签中所有<init-param>标签中的值\"]},\"1834\":{\"h\":\"使用案例\",\"t\":[\"案例一\",\"public class Servlet3 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { ServletConfig servletConfig = this.getServletConfig(); System.out.println(servletConfig.getInitParameter(\\\"brand\\\")); System.out.println(servletConfig.getInitParameter(\\\"screen\\\")); } } \",\"案例二\",\"public class Servlet4 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { ServletConfig servletConfig = this.getServletConfig(); System.out.println(servletConfig.getInitParameter(\\\"pinpai\\\")); System.out.println(servletConfig.getInitParameter(\\\"pingmu\\\")); } } \",\"XML\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <servlet> <servlet-name>servlet1</servlet-name> <servlet-class>com.meturing.testServlet.Servlet1</servlet-class> </servlet> <servlet> <servlet-name>servlet2</servlet-name> <servlet-class>com.meturing.testServlet.Servlet2</servlet-class> </servlet> <servlet-mapping> <servlet-name>servlet1</servlet-name> <url-pattern>/servlet1.do</url-pattern> </servlet-mapping> <servlet-mapping> <servlet-name>servlet2</servlet-name> <url-pattern>/servlet2.do</url-pattern> </servlet-mapping> <servlet> <servlet-name>servlet3</servlet-name> <servlet-class>com.meturing.testServlet.Servlet3</servlet-class> <init-param> <param-name>brand</param-name> <param-value>ASUS</param-value> </init-param> <init-param> <param-name>screen</param-name> <param-value>三星</param-value> </init-param> </servlet> <servlet> <servlet-name>servlet4</servlet-name> <servlet-class>com.meturing.testServlet.Servlet4</servlet-class> <init-param> <param-name>pinpai</param-name> <param-value>联想</param-value> </init-param> <init-param> <param-name>pingmu</param-name> <param-value>京东方</param-value> </init-param> </servlet> </web-app> \"]},\"1835\":{\"h\":\"url-pattern的匹配规则与注解模式\"},\"1836\":{\"h\":\"url-pattern\"},\"1837\":{\"h\":\"匹配类型\"},\"1838\":{\"h\":\"精确匹配\",\"t\":[\"精确匹配是指<url-pattern>中配置的值必须与url完全精确匹配\",\"<servlet-mapping> <servlet-name>demoServlet</servlet-name> <url-pattern>/demo.do</url-pattern> </servlet-mapping> \",\"路径\",\"结果\",\"http://localhost:8888/demo/demo.do\",\"匹配\",\"http://localhost:8888/demo/suibian/demo.do\",\"不匹配\"]},\"1839\":{\"h\":\"拓展名匹配\",\"t\":[\"在<url-pattern>允许使用统配符*作为匹配规则，*表示匹配任意字符。\",\"在扩展名匹配中只要扩展名相同都会被匹配和路径无关。注意，在使用扩展名匹配时在<url-pattern>中不能使用/,否则容器启动就会抛出异常。\",\"<servlet-mapping> <servlet-name>demoServlet</servlet-name> <url-pattern>*.do</url-pattern> </servlet-mapping> \",\"路径\",\"结果\",\"http://localhost:8888/demo/demo.do \",\"匹配\",\"http://localhost:8888/demo/suibian/haha.do\",\"匹配\",\"http://localhost:8888/demo/abc\",\"不匹配\"]},\"1840\":{\"h\":\"路径匹配\",\"t\":[\"根据请求路径进行匹配，在请求中只要包含该路径都匹配。* 表示任意路径以及子路径\",\"<servlet-mapping> <servlet-name>demoServlet</servlet-name> <url-pattern>/suibian/*</url-pattern> </servlet-mapping> \",\"路径\",\"结果\",\"http://localhost:8888/demo/suibian/haha.do \",\"匹配\",\"http://localhost:8888/demo/suibian/hehe/haha.do\",\"匹配\",\"http://localhost:8888/demo/hehe/heihei.do\",\"不匹配\"]},\"1841\":{\"h\":\"任意匹配\",\"t\":[\"匹配/。匹配所有但不包含JSP页面\",\"<servlet-mapping> <servlet-name>demoServlet</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> \",\"路径\",\"结果\",\"http://localhost:8888/demo/suibian/haha.do\",\"匹配\",\"http://localhost:8888/demo/suibian/hehe/haha.do\",\"匹配\",\"http://localhost:8888/demo/hehe/addUser.jsp\",\"不匹配\",\"http://localhost:8888/demo/suibian/hehe/ddUser.jsp\",\"不匹配\"]},\"1842\":{\"h\":\"匹配所有\",\"t\":[\"匹配所有\",\"<servlet-mapping> <servlet-name>demoServlet</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> \",\"路径\",\"结果\",\"http://localhost:8888/demo/suibian/haha.do\",\"匹配\",\"http://localhost:8888/demo/suibian/hehe/haha.do\",\"匹配\",\"http://localhost:8888/demo/hehe/addUser.jsp\",\"匹配\",\"http://localhost:8888/demo/suibian/hehe/ddUser.html\",\"匹配\"]},\"1843\":{\"h\":\"匹配优先顺序\",\"t\":[\"当一个url与多个Servlet的匹配规则可以匹配时，则按照: 精确路径 > 最长路径 >扩展名 这样的优先级匹配到对应的Servlet\"]},\"1844\":{\"h\":\"案例\",\"t\":[\"<servlet-mapping> <servlet-name>Servlet1</servlet-name> <url-pattern>/abc/*</url-pattern> </servlet-mapping> <servlet-mapping> <servlet-name>Servlet2</servlet-name> <url-pattern>/*</url-pattern> </servlet-mapping> <servlet-mapping> <servlet-name>Servlet3</servlet-name> <url-pattern>/abc</url-pattern> </servlet-mapping> <servlet-mapping> <servlet-name>Servlet4</servlet-name> <url-pattern>*.do</url-pattern> </servlet-mapping> \",\"URL\",\"匹配\",\"优先\",\"/abc/a.html\",\"Servlet1,Servlet2\",\"Servlet1\",\"/abc\",\"Servlet1,Servlet3\",\"Servlet3\",\"/abc/a.do\",\"Servlet1,Servlet4\",\"Servlet1\",\"/a.do\",\"Servlet2,Servlet4\",\"Servlet2\",\"/xxx/yyy/a.do\",\"Servlet2,Servlet4\",\"Servlet2\"]},\"1845\":{\"h\":\"URL映射方式\",\"t\":[\"在web.xml文件中支持将多个URL映射到一个Servlet中，但是相同的URL不能同时映射到两个Servlet中。\"]},\"1846\":{\"h\":\"方式一\",\"t\":[\"<servlet-mapping> <servlet-name>demoServlet</servlet-name> <url-pattern>/suibian/*</url-pattern> <url-pattern>*.do</url-pattern> </servlet-mapping> \"]},\"1847\":{\"h\":\"方式二\",\"t\":[\"<servlet-mapping> <servlet-name>demoServlet</servlet-name> <url-pattern>/suibian/*</url-pattern> </servlet-mapping> <servlet-mapping> <servlet-name>demoServlet</servlet-name> <url-pattern>*.do</url-pattern> </servlet-mapping> \"]},\"1848\":{\"h\":\"注解模式\",\"t\":[\"在Servlet3.0以及之后的版本中支持注解式开发Servlet\",\"对于Servlet的配置不在依赖于web.xml配置文件而是使用@WebServlet将一个继承于javax.servlet.http.HttpServlet的类定义为Servlet组件\"]},\"1849\":{\"h\":\"@WebServlet注解中属性\",\"t\":[\"属性名\",\"类型\",\"作用\",\"initParams\",\"WebInitParam[]\",\"Servlet的init参数\",\"name\",\"String\",\"Servlet的名称\",\"urlPatterns\",\"String[]\",\"Servlet的访问URL，支持多个\",\"value\",\"String[]\",\"Servlet的访问URL，支持多个\",\"loadOnStartup\",\"int\",\"自启动Servlet\",\"description\",\"String\",\"Servlet的描述\",\"displayName\",\"String\",\"Servlet的显示名称\",\"asyncSupported\",\"boolean\",\"声明Servlet是否支持异步操作模式\"]},\"1850\":{\"h\":\"使用案例\"},\"1851\":{\"h\":\"请求转发和响应重定向\"},\"1852\":{\"h\":\"请求转发\"},\"1853\":{\"h\":\"forword转发\"},\"1854\":{\"h\":\"处理流程\",\"t\":[\"清空Response存放响应正文数据的缓冲区\",\"如果目标资源为Servlet或JSP，就调用它们的service()方法，把该方法产生的响应结果发送到客户端; 如果目标资源文件系统中的静态HTML文档，就读取文档中的数据把它发送到客户端\"]},\"1855\":{\"h\":\"处理特点\",\"t\":[\"由于forword()方法先清空用于存放响应正文的缓冲区，因此源Servlet生成的响应结果不会被发送到客户端，只有目标资源生成的响应结果才会被发送到客户端\",\"如果源Servlet在进行请求转发之前，已经提交了响应结（flushBuffer(),close()方法），那么forward()方法抛出IllegalStateException。为了避免该异常，不应该在源Servlet中提交响应结果。\"]},\"1856\":{\"h\":\"测试代码\",\"t\":[\"servlet1 请求转发至servlet2\",\"servlet1\",\"@WebServlet(urlPatterns = \\\"/servlet1.do\\\") public class Servlet1 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"servlet1 service invoked\\\"); String money = req.getParameter(\\\"money\\\"); System.out.println(\\\"money:\\\"+money); // 设置响应类型和编码(include模式下) /* resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\");*/ // 增加响应内容 //resp.getWriter().println(\\\"servlet1在转发之前增加的响应内容\\\"); // 请求转发给另一个组件 // 获得一个请求转发器 //RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"servlet2.do\\\"); //RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"aaa.html\\\"); //RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"index.jsp\\\"); //RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"WEB-INF/bbb.html\\\"); RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"https://www.baidu.com\\\"); // 由请求转发器作出转发动作 requestDispatcher.forward(req,resp);// 托管给目标资源(forward多一些) // 在forward转发模式下,请求应该完全交给目标资源去处理,我们在源组件中,不要作出任何的响应处理 // 在forward方法调用之后,也不要在使用req和resp对象做其他操作了 } } \",\"servlet2\",\"@WebServlet(urlPatterns = \\\"/servlet2.do\\\") public class Servlet2 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"servlet2 service invoked\\\"); // 接收参数 String money = req.getParameter(\\\"money\\\"); System.out.println(\\\"money:\\\"+money); // 作出响应 (在forWord模式下) resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); PrintWriter writer = resp.getWriter(); writer.println(\\\"支付宝到账:\\\"+money+\\\"元\\\"); } } \"]},\"1857\":{\"h\":\"include转发\"},\"1858\":{\"h\":\"处理流程\",\"t\":[\"如果目标资源为Servlet或JSP，就调用他们的相应的service()方法，把该方法产生的响应正文添加到源Servlet的响应结果中；如果目标组件为HTML文档，就直接把文档的内容添加到源Servlet的响应结果中\",\"返回到源Servlet的服务方法中，继续执行后续代码块\"]},\"1859\":{\"h\":\"处理特点\",\"t\":[\"include与forward转发相比，包含有以下特点\",\"源Servlet与被包含的目标资源的输出数据都会被添加到响应结果中\",\"在目标资源中对响应状态码或者响应头所做的修改都会被忽略\"]},\"1860\":{\"h\":\"测试代码\",\"t\":[\"servlet1 请求转发至servlet2\",\"servlet1\",\"@WebServlet(urlPatterns = \\\"/servlet1.do\\\") public class Servlet1 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"servlet1 service invoked\\\"); String money = req.getParameter(\\\"money\\\"); System.out.println(\\\"money:\\\"+money); // 设置响应类型和编码(include模式下) /* resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\");*/ // 增加响应内容 //resp.getWriter().println(\\\"servlet1在转发之前增加的响应内容\\\"); // 请求转发给另一个组件 // 获得一个请求转发器 //RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"servlet2.do\\\"); //RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"aaa.html\\\"); //RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"index.jsp\\\"); //RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"WEB-INF/bbb.html\\\"); RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"https://www.baidu.com\\\"); // 由请求转发器作出转发动作 requestDispatcher.include(req,resp); // 让目标资源完成部分工作 // 继续增加响应信息 (include模式) resp.getWriter().println(\\\"servlet1在转发之后增加的响应内容\\\"); // 在include转发模式下,设置响应可以在转发之前,也可以在转发之后 } } \",\"servlet2\",\"@WebServlet(urlPatterns = \\\"/servlet2.do\\\") public class Servlet2 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"servlet2 service invoked\\\"); // 接收参数 String money = req.getParameter(\\\"money\\\"); System.out.println(\\\"money:\\\"+money); // 作出响应 (在forWord模式下) resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); PrintWriter writer = resp.getWriter(); writer.println(\\\"支付宝到账:\\\"+money+\\\"元\\\"); } } \"]},\"1861\":{\"h\":\"注意事项\",\"t\":[\"请求转发是一种服务器的行为,是对浏览器屏蔽\",\"浏览器的地址栏不会发生变化\",\"请求的参数是可以从源组件传递到目标组件的\",\"请求对象和响应对象没有重新创建,而是传递给了目标组件\",\"请求转发可以帮助我们完成页面的跳转\",\"请求转发可以转发至WEB-INF里\",\"请求转发只能转发给当前项目的内部资源,不能转发至外部资源\",\"常用forward\"]},\"1862\":{\"h\":\"响应重定向\",\"t\":[\"响应重定向是通过HttpServletResponse对象.sendRedirect(“路径”)的方式实现,是服务器通知浏览器,让浏览器去自主请求其他资源的一种方式\"]},\"1863\":{\"h\":\"处理流程\",\"t\":[\"用户在浏览器端输入特定URL，请求访问服务器端的某个Servlet\",\"服务器端的Servlet返回一个状态码为302的响应结果，该响应结果的含义为：让浏览器端再请求访问另一个Web资源，在响应结果中提供了另一个Web资源的URL. 另一个Web资源有可能在同一个Web服务器上，也有可能不再同一个Web服务器上\",\"当浏览器端接收到这种响应结果后，再立即自动请求访问另一个Web资源\",\"浏览器端接收到另一个Web资源的响应结果\"]},\"1864\":{\"h\":\"测试代码\",\"t\":[\"servlet1 请求转发至servlet2\",\"@WebServlet(urlPatterns = \\\"/servlet3.do\\\") public class Servlet3 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"servlet3 service invoked\\\"); String money = req.getParameter(\\\"money\\\"); System.out.println(\\\"money:\\\"+money); // 响应重定向 resp.sendRedirect(\\\"servlet4.do?money=\\\"+money); //resp.sendRedirect(\\\"WEB-INF/bbb.html\\\"); //resp.sendRedirect(\\\"https://www.baidu.com\\\"); } } \",\"@WebServlet(urlPatterns = \\\"/servlet4.do\\\") public class Servlet4 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"servlet4 service invoked\\\"); String money = req.getParameter(\\\"money\\\"); System.out.println(\\\"money:\\\"+money); } } \"]},\"1865\":{\"h\":\"注意事项\",\"t\":[\"重定向是服务器给浏览器重新指定请求方向 是一种浏览器行为 地址栏会发生变化\",\"重定向时,请求对象和响应对象都会再次产生,请求中的参数是不会携带\",\"重定向也可以帮助我们完成页面跳转\",\"重定向不能帮助我们访问WEB-INF中的资源\",\"重定向可以定向到外部资源\"]},\"1866\":{\"h\":\"路径问题\"},\"1867\":{\"h\":\"前端路径问题\"},\"1868\":{\"h\":\"相对路径与绝对路径\",\"t\":[\"相对路径 : 不以/开头,就是相对路径 ,..代表向上一层\",\"绝对路径 : 以/开头,在页面上 /代表从项目的部署目录开始找(从webapps中开始找),页面的绝对路径要有项目名,除非我们的项目没有设置项目名\"]},\"1869\":{\"h\":\"Base基准路径\",\"t\":[\"base标签可以简化相对路径,当使用相对路径时,默认会在相对路径之前补充 base中的内容,如果base标签不写,那么默认就是当前文件所在的路径\",\"<base href=\\\"http://127.0.0.1:8080/testServlet4_war_exploded/\\\"> \",\"相对(基准)路径 : 以当前文件本身的位置去定位其他文件,相对自己的路径,以当前文件所在的位置为基准位置绝对(基准)路径 : 以一个固定的位置去定位其他文文件,以一个固定的路径作为定位文件的基准位置,和文件本身位置无关\"]},\"1870\":{\"h\":\"演示案例\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> <!-- base标签的作用是在相对路径之前自动补充base[href]中的值 如果base标签不写,那么默认就是当前文件所在的路径 --> <base href=\\\"http://127.0.0.1:8080/testServlet4_war_exploded/\\\"> </head> <body> this is page a1 <br/> <a href=\\\"a2.html\\\" TARGET=\\\"_self\\\">相对路径跳转至A2</a> <a href=\\\"../../b/b2/b1.html\\\" TARGET=\\\"_self\\\">相对路径跳转至b1</a> <br/> <a href=\\\"a/a2/a2.html\\\" TARGET=\\\"_self\\\">base相对路径跳转至A2</a> <a href=\\\"b/b2/b1.html\\\" TARGET=\\\"_self\\\">base相对路径跳转至b1</a> <br/> <a href=\\\"/testServlet4_war_exploded/a/a2/a2.html\\\" TARGET=\\\"_self\\\">绝对路径跳转至A2</a> <a href=\\\"/testServlet4_war_exploded/b/b2/b1.html\\\" TARGET=\\\"_self\\\">绝对路径跳转至b1</a> </body> </html> \"]},\"1871\":{\"h\":\"请求转发路径\"},\"1872\":{\"h\":\"相对路径与绝对路径\",\"t\":[\"对基准路径 : 相对于当前Servlet本身的位置,urlPattern决定了位置绝对基准路径 : 永远是以项目为基准路径(不允许跨服务,所以绝对路径只能是本服务内的资源)\"]},\"1873\":{\"h\":\"注意事项\",\"t\":[\"以/开头的路径是绝对路径,不以/开头是相对路径\",\"绝对路径以当前项目名部署名为根路径,绝对路径后不需要写当前项目部署名\",\"../代表向上一层的路径\",\"servlet的相对路径是相对于url-pattern中的路径,是虚拟的路径\"]},\"1874\":{\"h\":\"演示代码\",\"t\":[\"@WebServlet(urlPatterns = \\\"/c/c2/servlet1.do\\\") public class Servlet1 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { /*相对路径访问a1.html*/ //RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"a/a2/a1.html\\\"); /*urlpatterns影响相对路径*/ //RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"../../a/a2/a1.html\\\"); /*绝对路径访问a1*/ RequestDispatcher requestDispatcher = req.getRequestDispatcher(\\\"/a/a2/a1.html\\\"); requestDispatcher.forward(req,resp); } } \"]},\"1875\":{\"h\":\"响应重定向路径\",\"t\":[\"响应重定向和请求转发中的路径略有不同\"]},\"1876\":{\"h\":\"相对路径与绝对路径\",\"t\":[\"相对路径 : 相对于urlPatterns定义的路径绝对路径 : 以项目部署路径为基准路径 (webapps), 响应重定向的绝对路径中,要加项目部署名,除非当前项目没有给定部署名\"]},\"1877\":{\"h\":\"注意事项\",\"t\":[\"以/开头的路径是绝对路径,不以/开头是相对路径\",\"绝对路径以当前项目所在目录为跟路径,绝对路径后需要写当前项目部署名\",\"../代表向上一层的路径\",\"servlet的相对路径是相对于url-pattern中的路径,是虚拟的路径\"]},\"1878\":{\"h\":\"演示代码\",\"t\":[\"@WebServlet(urlPatterns = \\\"/servlet2.do\\\") public class Servlet2 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 响应重定向到a1.html // resp.sendRedirect(\\\"../../a/a2/a1.html\\\"); //resp.sendRedirect(\\\"a/a2/a1.html\\\"); ServletContext servletContext = this.getServletContext(); String contextPath = servletContext.getContextPath();// /testServlet4_war_exploded resp.sendRedirect(contextPath+\\\"/a/a2/a1.html\\\"); } } \"]},\"1879\":{\"h\":\"路径的使用和记忆建议\",\"t\":[\"建议在url-pattern中,不要书写没有必要的多层次路径 /c/c2,因为这会影响请求转发和响应重定向的相对路径写法\",\"绝对路径在书写时,只有请求转发不需要写项目部署名,页面上和响应重定向的绝对路径都需要些项目的部署名​\",\"相对路径在使用时,无论是页面还是请求转发还是响应重定向都不需要项目名\"]},\"1880\":{\"h\":\"会话管理Cookie和Session\"},\"1881\":{\"h\":\"初识Cookie和Session\"},\"1882\":{\"h\":\"相关概念\",\"t\":[\"Cookie对象与HttpSession对象的作用是维护客户端浏览器与服务端的会话状态的两个对象。\",\"由于HTTP协议是一个无状态的协议，所以服务端并不会记录当前客户端浏览器的访问状态，但是在有些时候我们是需要服务端能够记录客户端浏览器的访问状态的，如获取当前客户端浏览器的访问服务端的次数时就需要会话状态的维持。\",\"在Servlet中提供了Cookie对象与HttpSession对象用于维护客户端与服务端的会话状态的维持。二者不同的是Cookie是通过客户端浏览器实现会话的维持，而HttpSession是通过服务端来实现会话状态的维持。\"]},\"1883\":{\"h\":\"执行流程\",\"t\":[\"相当于去银行取钱:\",\"先向银行提出开户申请,银行开通账户并给银行卡(Cookie)\",\"携带银行卡去银行取钱,银行根据银行卡卡号找到对应的账户给你操作(Session)\"]},\"1884\":{\"h\":\"Cookie的使用\",\"t\":[\"Cookie是一种保存少量信息至浏览器的一种技术,第一请求时,服务器可以响应给浏览器一些Cookie信息,第二次请求,浏览器会携带之前的cookie发送给服务器,通过这种机制可以实现在浏览器端保留一些用户信息.为服务端获取用户状态获得依据\"]},\"1885\":{\"h\":\"Cookie对象的特点\",\"t\":[\"Cookie使用字符串存储数据\",\"Cookie使用Key与Value结构存储数据\",\"单个Cookie存储数据大小限制在4097个字节\",\"Cookie存储的数据中不支持中文，Servlet4.0中支持\",\"Cookie是与域名绑定所以不支持跨一级域名访问\",\"Cookie对象保存在客户端浏览器内存上或系统磁盘中\",\"Cookie分为持久化Cookie(保存在磁盘上)与状态Cookie(保存在内存上)\",\"浏览器在保存同一域名所返回Cookie的数量是有限的。不同浏览器支持的数量不同，Chrome浏览器为50个\",\"浏览器每次请求时都会把与当前访问的域名相关的Cookie在请求中提交到服务端。\"]},\"1886\":{\"h\":\"Cookie对象的API\"},\"1887\":{\"h\":\"Cookie对象的创建\",\"t\":[\"//通过new关键字创建Cookie对象 Cookie cookie = new Cookie(\\\"key\\\",\\\"value\\\"); //通过HttpServletResponse对象将Cookie写回给客户端浏览器 response.addCookie(cookie) \"]},\"1888\":{\"h\":\"Cookie对象的获取\",\"t\":[\"//通过HttpServletRequest对象获取Cookie，返回Cookie数组。 Cookie[] cookies = request.getCookies(); \"]},\"1889\":{\"h\":\"Cookie不支持中文的解决方案\",\"t\":[\"在Servlet4.0版本之前的Cookie中是不支持中文存储的，如果存储的数据中含有中文，代码会直接出现异常。\",\"java.lang.IllegalArgumentException: Control character in cookie value or attribute.\",\"我们可以通过对含有中文的数据重新进行编码来解决该问题。在Servlet4.0中的Cookie是支持中文存储的。\",\"//将内容按照指定的编码方式做URL编码处理 URLEncoder.encode(\\\"content\\\",\\\"code\\\"); //将内容按照指定的编码方式做URL解码处理 URLDecoder.decode(\\\"content\\\",\\\"code\\\") \"]},\"1890\":{\"h\":\"Cookie持久化和状态Cookie\",\"t\":[\"状态Cookie当Cookie对象创建后默认为状态Cookie 浏览器会缓存Cookie对象。浏览器关闭后Cookie对象销毁\",\"持久化Cookie使用Cookie对象下的cookie.setMaxAge(60)方法设置失效时间，单位为秒。一旦设置了失效时间，那么该Cookie为持久化Cookie 浏览器会对Cookie做持久化处理，基于文件形式保存在系统的指定目录中. 在Windows10系统中为了安全问题不会显示Cookie中的内容.\"]},\"1891\":{\"h\":\"Cookie跨越\",\"t\":[\"Cookie不支持一级域名的跨域，支持二级域名的跨域.\",\"一级域名比二级域名更高级，二级域名是依附于一级域名之下的附属分区域名，即二级域名是一级域名的细化分级。例如：baidu.com 为一级域名，news.baidu.com为二级域名\"]},\"1892\":{\"h\":\"综合Demo\",\"t\":[\"写入Cookie\",\"public class Servlet2 extends HttpServlet { @Override public void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { Cookie age = new Cookie(\\\"age\\\", \\\"10\\\"); Cookie sex = new Cookie(\\\"sex\\\", \\\"男\\\"); String encodeName = URLEncoder.encode(\\\"张三\\\", \\\"UTF-8\\\");//对中文进行编码 Cookie name = new Cookie(\\\"name\\\", encodeName); name.setMaxAge(60);//秒钟 持久化Cookie 让浏览器保留1分钟 resp.addCookie(name); resp.addCookie(sex); resp.addCookie(age); } } \",\"读取Cookie\",\"public class Servlet3 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { Cookie[] cookies = req.getCookies(); if (cookies != null) { for (Cookie cookie : cookies) { String name = cookie.getName(); String value = cookie.getValue(); if (\\\"name\\\".equals(cookie.getName())){ value = URLDecoder.decode(value, \\\"UTF-8\\\"); } System.out.println(name + \\\"=\\\" + value); } } } } \"]},\"1893\":{\"h\":\"Cookie案例\",\"t\":[\"当客户端浏览器第一次访问Servlet时返回“您好，欢迎您第一次访问！”，第二次访问时返回“欢迎您回来！”\",\"/** * 当客户端浏览器第一次访问Servlet时返回“您好，欢迎您第一次访问！” * 第二次访问时返回“欢迎您回来！” */ public class Servlet4 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String strMessage = \\\"\\\"; //尝试获取Cookie中的计数器 Cookie[] cookies = req.getCookies(); Cookie count = null; //如果Cookie不为空切计数器不为0 表示重复访问 计数器++ if (cookies!=null){ Integer integerCount = 0; for (Cookie cookie : cookies) { if (\\\"count\\\".equals(cookie.getName())){ integerCount = Integer.valueOf(cookie.getValue()); integerCount++; cookie.setValue(integerCount.toString()); count = cookie; strMessage = \\\"欢迎您回来！这是您第\\\"+integerCount+\\\"次访问！\\\"; } } //如果For循环走还没有取到计数器 if (integerCount==0){ count = new Cookie(\\\"count\\\", \\\"1\\\"); strMessage = \\\"您好，欢迎您第1次访问！\\\"; } }else{ //如果计数器为0或者Cookie为空则表明初次访问 需要颁发Cookie 计数器++ count = new Cookie(\\\"count\\\", \\\"1\\\"); strMessage = \\\"您好，欢迎您第1次访问！\\\"; } //设置响应头,以便浏览器知道以何种编码解析数据 resp.setContentType(\\\"text/html;charset=UTF-8\\\"); if (count!=null){ resp.addCookie(count); } resp.getWriter().write(strMessage); } } \"]},\"1894\":{\"h\":\"Session的使用\",\"t\":[\"HttpSession是一种保存少量信息至服务器端的一种技术,第一请求时,服务器会创建HttpSession,我们可以在HttpSession对象中保存一些关于用户的状态信息,并将HttpSession的JSESSIONID以Cookie形式响应给浏览器 . 第二次请求,浏览器会携带之前的JSESSIONID的Cookie,发送给服务器,服务器根据JSESSIONID获取对应的HttpSession对象.通过这种技术可以解决HTTP协议本身无法记录用户状态情况.\"]},\"1895\":{\"h\":\"Session特点\",\"t\":[\"HttpSession保存在服务端\",\"HttpSession可以存储任何类型的数据\",\"HttpSession使用Key与Value结构存储数据 value是Object类型\",\"HttpSession存储数据大小无限制\"]},\"1896\":{\"h\":\"HttpSession对象\"},\"1897\":{\"h\":\"对象的创建\",\"t\":[\"HttpSession对象的创建是通过request.getSession()方法来创建的。客户端浏览器在请求服务端资源时，如果在请求中没有JSESSIONID，getSession()方法将会为这个客户端浏览器创建一个新的HttpSession对象，并为这个HttpSession对象生成一个JSESSIONID，在响应中通过Cookie写回给客户端浏览器，如果在请求中包含了JSESSIONID，getSession()方法则根据这个ID返回与这个客户端浏览器对应的HttpSession对象。\",\"getSession()方法还有一个重载方法getSession(true|false)。 当参数为true时与getSession()方法作用相同。当参数为false时则只去根据SessionID查找是否有与这个客户端浏览器对应的HttpSession，如果有则返回，如果没有SessionID则不会创建新的HttpSession对象。\",\"/** * 向Session中写入 * @author sqTan * @description servlet5 * @date 2023/03/20 */ public class Servlet5 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //获取当前的Session对象 HttpSession session = req.getSession(); //向Session中写入数据 session.setAttribute(\\\"userName\\\",\\\"admin\\\"); session.setAttribute(\\\"passWord\\\",\\\"1234\\\"); session.setAttribute(\\\"level\\\",\\\"A\\\"); //session.invalidate(); //手动使Session失效 } } \"]},\"1898\":{\"h\":\"数据的获取\",\"t\":[\"API\",\"说明\",\"session.setAttribute(\\\"key\\\",value)\",\"将数据存储到HttpSession对象中\",\"session.getAttribute(\\\"key\\\")\",\"根据key获取HttpSession中的数据，返回Object\",\"session.getAttributeNames()\",\"获取HttpSession中所有的key，返回枚举类型\",\"session.removeAttribute(\\\"key\\\")\",\"根据key删除HttpSession中的数据\",\"session.getId()\",\"根据获取当前HttpSession的SessionID，返回字符串类型\",\"/** * 获取Session中的数据 * @author sqTan * @description servlet6 * @date 2023/03/20 */ public class Servlet6 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { HttpSession session = req.getSession(); //获取Session String userName = (String) session.getAttribute(\\\"userName\\\"); String passWord = (String) session.getAttribute(\\\"passWord\\\"); String level = (String) session.getAttribute(\\\"level\\\"); System.out.println(userName); System.out.println(passWord); System.out.println(level); //获取Session对象的其他属性 System.out.println(\\\"创建时间: \\\"+session.getCreationTime()); System.out.println(\\\"最后一次访问时间: \\\"+session.getLastAccessedTime()); System.out.println(\\\"最大不活动时间: \\\"+session.getMaxInactiveInterval()); } } \"]},\"1899\":{\"h\":\"销毁方式\",\"t\":[\"方式一: 通过web.xml文件指定超时时间(最大不活动时间) 我们可以在web.xml文件中指定HttpSession的超时时间，当到达指定的超时时间后，容器就会销该HttpSession对象，单位为分钟。该时间对整个web项目中的所有HttpSession对象有效。时间的计算方式是根据最后一次请求时间作为起始时间。如果有哪个客户端浏览器对应的HttpSession的失效时间已到，那么与该客户端浏览器对应的HttpSession对象就会被销毁。其他客户端浏览器对应的HttpSession对象会继续保存不会被销毁。\",\"<session-config> <session-timeout>1</session-timeout> </session-config> \",\"我们也可以在Tomcat的web.xml文件中配置HttpSession的销毁时间。如果在Tomcat的web.xml文件中配置了HttpSession的超时时间对应的是Tomcat中所有的Web项目都有效。相当于配置了全局的HttpSession超时时间。如果我们在Web项目中配置了超时时间，那么会以Web项目中的超时时间为准。\",\"方式二: 通过HttpSession对象中的invalidate()方法销毁当前HttpSession对象 invalidate()方法是HttpSession对象中所提供的用于销毁当前HttpSession的方法。我们通过调用该方法可以销毁当前HttpSession对象。\"]},\"1900\":{\"h\":\"生命周期\",\"t\":[\"在HttpSession对象生命周期中没有固定的创建时间与销毁时间。何时创建取决于我们什么时候第一次调用了getSession()或getSession(true)的方法。HttpSession对象的销毁时间取决于超时时间的到达以及调用了invalidate()方法。如果没有超时或者没有调用invalidate()方法，那么HttpSession会一直存储。默认超时时间为30分钟(Tomcat的web.xml文件配置的时间就是默认超时时间)。\"]},\"1901\":{\"h\":\"Session和Cookie的总结\"},\"1902\":{\"h\":\"区别\",\"t\":[\"cookie数据存放在客户的浏览器或系统的文件中，而HttpSession中的数据存放在服务器中。\",\"cookie不安全，而HttpSession是安全的。\",\"单个cookie保存的数据不能超过4K，很多浏览器都限制一个域名保存cookie的数量。而HttpSession没有容量以及数量的限制。\"]},\"1903\":{\"h\":\"建议\",\"t\":[\"HttpSession对象是保存在服务端的，所以安全性较高。我们可以在HttpSession对象中存储数据，但是由于HttpSession对象的生命周期不固定，所以不建议存放业务数据。一般情况下我们只是存放用户登录信息。\"]},\"1904\":{\"h\":\"Session和Cookie的综合案例\",\"t\":[\"需求:实现登录一次即可,在一次会话内,可以反复多次访问WEB-INF/ welcome.html,如果没有登录过,跳转到登录页,登录成功后,可以访问\"]},\"1905\":{\"h\":\"目录结构\"},\"1906\":{\"h\":\"组件\"},\"1907\":{\"h\":\"login.html\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> </head> <body> <form method=\\\"get\\\" action=\\\"loginServlet.do\\\"> 用户名:<input type=\\\"text\\\" name=\\\"username\\\" ><br/> 密码:<input type=\\\"password\\\" name=\\\"password\\\" ><br/> <input type=\\\"submit\\\" > </form> </body> </html> \"]},\"1908\":{\"h\":\"main.html\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> </head> <body> this is main page </body> </html> \"]},\"1909\":{\"h\":\"LoginServlet.Java\",\"t\":[\"用来校验登录的,登录成功将用户信息存户HttpSession,否则回到登录页\",\"@WebServlet(urlPatterns = \\\"/loginServlet.do\\\") public class LoginServlet extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 获取用户名和密码 String username = req.getParameter(\\\"username\\\"); String password = req.getParameter(\\\"password\\\"); // 如果用户名和密码为 admin 1234 if(\\\"admin\\\".equals(username) && \\\"1234\\\".equals(password)){ // 将用户信息放在HTTPSession中 User user =new User(\\\"admin\\\", \\\"1234\\\"); HttpSession session = req.getSession(); session.setAttribute(\\\"user\\\", user); // 登录成功 跳转至 main.html resp.sendRedirect(req.getContextPath()+\\\"/mainServlet.do\\\"); }else{ // 登录失败 回到login.html resp.sendRedirect(req.getContextPath()+\\\"/login.html\\\"); } } } \"]},\"1910\":{\"h\":\"MainServlet.Java\",\"t\":[\"用来向main.html中跳转的,同时验证登录,登录过,可以直接跳转,否则回到登录页\",\"@WebServlet(urlPatterns = \\\"/mainServlet.do\\\") public class MainServlet extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //跳转至main.html HttpSession session = req.getSession(); User user = (User)session.getAttribute(\\\"user\\\"); if(null != user){ // 判断如果登录过 允许跳转 HTTPSession中如果有登陆过的信息 req.getRequestDispatcher(\\\"/WEB-INF/main.html\\\").forward(req,resp); }else{ // 如果没有登录过 回到登录去登录 HTTPSession中如果有登陆过的信息 resp.sendRedirect(\\\"login.html\\\"); } } } \"]},\"1911\":{\"h\":\"User.Java\",\"t\":[\"用来存储一个用户的信息的实体类对象\",\"public class User implements Serializable { private String username; private String pasword; .... } \"]},\"1912\":{\"h\":\"域对象\"},\"1913\":{\"h\":\"概念\",\"t\":[\"域对象指的是: 那些能放数据并存储传递数据作为数据存放区域的对象\"]},\"1914\":{\"h\":\"Request域\"},\"1915\":{\"h\":\"有效范围\",\"t\":[\"一次请求内有效,请求转发时数据可以传递,除此之外该域没有办法实现数据共享\"]},\"1916\":{\"h\":\"生命周期\",\"t\":[\"-创建: 每发生一次请求创建一个独立的请求域 -使用: service方法中或者请求转发有效 -销毁: 请求结束,已经向浏览器响应数据\"]},\"1917\":{\"h\":\"演示代码\",\"t\":[\"写入域\",\"@WebServlet(urlPatterns = \\\"/addToRequest.do\\\") public class Servlet1 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 向request域中添加数据 List<String> x=new ArrayList<>(); Collections.addAll(x, \\\"a\\\",\\\"b\\\",\\\"c\\\"); req.setAttribute(\\\"list\\\", x); req.setAttribute(\\\"gender\\\",\\\"boy\\\"); req.setAttribute(\\\"gender\\\",\\\"girl\\\"); req.setAttribute(\\\"name\\\",\\\"晓明\\\"); // 请求转发 req.getRequestDispatcher(\\\"/readFromRequest.do\\\").forward(req,resp); // 重定向 //resp.sendRedirect(\\\"readFromRequest.do\\\"); } } \",\"读取域\",\"@WebServlet(urlPatterns=\\\"/readFromRequest.do\\\") public class Servlet2 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 移除域中的互数据 req.removeAttribute(\\\"gender\\\"); // 从request域中读取数据 List<String> list =(List<String>) req.getAttribute(\\\"list\\\"); System.out.println(list); System.out.println(req.getAttribute(\\\"gender\\\")); System.out.println(req.getAttribute(\\\"name\\\")); //获取Request中的请求参数 System.out.println(req.getParameter(\\\"username\\\")); System.out.println(req.getParameter(\\\"password\\\")); } } \"]},\"1918\":{\"h\":\"Session域\"},\"1919\":{\"h\":\"有效范围\",\"t\":[\"单次会话内有效,可以跨多个请求\"]},\"1920\":{\"h\":\"生命周期\",\"t\":[\"创建: 会话的产生,第一次发生请求,会话的开始\",\"使用: 本次会话之内,浏览器和服务器之间发生多次请求和响应有效\",\"销毁: 会话结束,如:浏览器失去JSESSIONID、到达最大不活动时间、手动清除\"]},\"1921\":{\"h\":\"演示代码\",\"t\":[\"写入域\",\"@WebServlet(urlPatterns = \\\"/addToSession.do\\\") public class Servlet1 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 向Session域中添加数据 HttpSession session = req.getSession(); List<String> x=new ArrayList<>(); Collections.addAll(x, \\\"a\\\",\\\"b\\\",\\\"c\\\"); session.setAttribute(\\\"list\\\", x); session.setAttribute(\\\"gender\\\",\\\"boy\\\"); session.setAttribute(\\\"gender\\\",\\\"girl\\\"); session.setAttribute(\\\"name\\\",\\\"晓明\\\"); // 重定向 resp.sendRedirect(\\\"readFromSession.do\\\"); } } \",\"读取域\",\"@WebServlet(urlPatterns=\\\"/readFromSession.do\\\") public class Servlet2 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { HttpSession session = req.getSession(); // 移除域中的互数据 //session.removeAttribute(\\\"gender\\\"); // 从request域中读取数据 List<String> list =(List<String>) session.getAttribute(\\\"list\\\"); System.out.println(list); System.out.println(session.getAttribute(\\\"gender\\\")); System.out.println(session.getAttribute(\\\"name\\\")); //获取Request中的请求参数 System.out.println(req.getParameter(\\\"username\\\")); System.out.println(req.getParameter(\\\"password\\\")); } } \"]},\"1922\":{\"h\":\"Application域\"},\"1923\":{\"h\":\"有效范围\",\"t\":[\"当前web服务内,跨请求,跨会话\"]},\"1924\":{\"h\":\"生命周期\",\"t\":[\"创建: 项目启动\",\"使用: 项目运行任何时间有效\",\"销毁: 项目关闭\"]},\"1925\":{\"h\":\"演示代码\",\"t\":[\"写入域\",\"@WebServlet(urlPatterns = \\\"/addToApplication.do\\\") public class Servlet1 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 向Application域中添加数据 ServletContext application = req.getServletContext(); List<String> x=new ArrayList<>(); Collections.addAll(x, \\\"a\\\",\\\"b\\\",\\\"c\\\"); application.setAttribute(\\\"list\\\", x); application.setAttribute(\\\"gender\\\",\\\"girl\\\"); application.setAttribute(\\\"name\\\",\\\"晓明\\\"); } } \",\"读取域\",\"@WebServlet(urlPatterns=\\\"/readFromApplication.do\\\") public class Servlet2 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { ServletContext application = this.getServletContext(); // 从application域中读取数据 List<String> list =(List<String>) application.getAttribute(\\\"list\\\"); System.out.println(list); System.out.println(application.getAttribute(\\\"gender\\\")); System.out.println(application.getAttribute(\\\"name\\\")); } } \"]},\"1926\":{\"h\":\"JSP入门\"},\"1927\":{\"h\":\"JSP 简介\",\"t\":[\"JSP（全称Java Server Pages）是由Sun公司主导创建的一种动态网页技术标准。 JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成HTML、XML或其他格式文档的WEB网页，然后返回给请求者。\",\"简单来说: JSP(JavaServer Pages)是一种动态页面技术，它的主要目的是将表示逻辑从Servlet中分离出来 它实现了Html语法中可以嵌入java编码的扩展（以 <%, %>形式）。JSP与Servlet一样，是在服务器端执行的。通常返回给客户端的就是一个HTML文本，因此客户端只要有浏览器就能浏览。\",\"Java Servlet是JSP的技术基础，而且大型的Web应用程序的开发需要Java Servlet和JSP配合才能完成。JSP具备了Java技术的简单易用，完全的面向对象，具有平台无关性且安全可靠.\",\"例如: 使用Servlet向页面动态响应HTML页面资源\",\"@WebServlet(\\\"/servlet1.do\\\") public class Servlet1 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { int h = Integer.parseInt(req.getParameter(\\\"h\\\")); int l = Integer.parseInt(req.getParameter(\\\"l\\\")); StringBuilder sbd=new StringBuilder(); sbd.append(\\\"<html lang='en'><head><meta charset='UTF-8'><title>Title</title><style>\\\"); sbd.append(\\\"table{border: 1px solid green;width: 50%;margin: 0px auto;}\\\"); sbd.append(\\\"table td{border: 1px solid blue;}</style></head><body><table>\\\"); for (int i = 1; i <=h ; i++) { sbd.append(\\\"<tr>\\\"); for (int j = 1; j <=l ; j++) { sbd.append(\\\"<td>\\\"); sbd.append(String.valueOf(i)); sbd.append(String.valueOf(j)); sbd.append(\\\"</td>\\\"); } sbd.append(\\\"</tr>\\\"); } sbd.append(\\\"</table></body></html>\\\"); // 设置响应内容和编码 resp.setContentType(\\\"text/html;charset=UTF-8\\\"); resp.setCharacterEncoding(\\\"UTF-8\\\"); // 响应内容给浏览器 PrintWriter writer = resp.getWriter(); writer.print(sbd.toString()); } } \",\"总结: Servlet作为动态资源,在JAVA代码中通过字符串形式响应数据,通过字符串拼接HTML文档特别繁琐,不利于后期的维护,容易出现问题,如果用于向浏览器响应页面资源操作非常繁琐,且非常不利于页面的更新和维护,所以Servlet不可以作为页面资源,一般专门用接收用户端数据,向用户端响应数据,控制前后端页面跳转,交互逻辑等.在MVC模式下,作为控制层使用\"]},\"1928\":{\"h\":\"JSP做动态显示Demo\",\"t\":[\"Servlet同样也可以向浏览器动态响应HTML,但是需要大量的字符串拼接处理,在JAVA代码上大量拼接HTML字符串是非常繁琐耗时的一件事,它涉及到HTML本身的字符串处理,还涉及到css样式代码和文件,以及js脚本代码和文件,HTML中的各种外部引入路径等等,处理起来相当的麻烦\",\"直接在JSP中使用Java代码\",\"<%@ page import=\\\"java.io.PrintWriter\\\" %> <%-- Created by IntelliJ IDEA. User: Mark70 Date: 2021/1/11 Time: 13:16 To change this template use File | Settings | File Templates. --%> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> <style> table{border: 1px solid green;width: 50%;margin: 0px auto;} table td{border: 1px solid blue;} </style> </head> <body> <% int h = Integer.parseInt(request.getParameter(\\\"h\\\")); int l = Integer.parseInt(request.getParameter(\\\"l\\\")); StringBuilder sbd=new StringBuilder(); sbd.append(\\\"<table>\\\"); for (int i = 1; i <=h ; i++) { sbd.append(\\\"<tr>\\\"); for (int j = 1; j <=l ; j++) { sbd.append(\\\"<td>\\\"); sbd.append(String.valueOf(i)); sbd.append(String.valueOf(j)); sbd.append(\\\"</td>\\\"); } sbd.append(\\\"</tr>\\\"); } sbd.append(\\\"</table>\\\"); out.print(sbd.toString()); %> </body> </html> \"]},\"1929\":{\"h\":\"JSP运行原理\",\"t\":[\"JSP看似是HTML代码,看似是页面,但是事实上是一种后台技术,当我们第一发送请求一个JSP资源时,JSP加载引擎会帮助我们将一个.JSP文件转换成一个.java文件,相当于自动的给我们生成了一个Servlet并将页面上HTML代码编入到这个Servlet中,然后运行这个Servlet,将数据响应给浏览器.\",\".JSP的本质其实就是一个Servlet, .JSP中的HTML代码相当于是我们向浏览器响应的HTML内容的模板\"]},\"1930\":{\"h\":\"JSP执行过程\",\"t\":[\"JSP的执行过程大致可以分为两个时期:转译时期和请求时期\",\"转译时期（Translation Time） JSP网页转译成Servlet,生成.java文件,然后进行编译生成.class字节码文件\",\"请求时期（Request Time） 运行.class字节码文件,处理请求。\"]},\"1931\":{\"h\":\"具体过程\",\"t\":[\"客户端发出Request请求\",\"JSP Container 将JSP转译成Servlet的源代码.java文件\",\"将产生的Servlet源代码经过编译后.生成字节码.class文件\",\"将.class字节码文件加载进入内存并执行,其实就是在运行一个Servlet\",\"通过Response对象将数据响应给浏览器\"]},\"1932\":{\"h\":\"继承结构\",\"t\":[\"JSP文件转换成JAVA代码之后,它默认继承了HttpJSPBase,实现了JSPSourceDependent,和JSPSourceImports两个接口\",\"其中HttpJSPBase又继承了HttpServlet ,也就是说,JSP本质上就是一个Servlet\"]},\"1933\":{\"h\":\"HttpJSPBase\",\"t\":[\"HttpJSPBase重写了init,service和destory方法,并且自定义了 _jspInit,_ jspService,_ jspDestory. 然后在重写的init方法中调用了_JSPInit,在重写的service方法中调用了_jspService,在重写的destory方法中调用了_jspDestory.\",\"那么我们JSP文件编译成JAVA代码后,继承HttpJspBase重写的方法是_jspInit,_ jspService,_ jspService\",\"通过查看代码我们发现,我们页面上所有HTML相关的代码全部被转化成了字符串,并在_JSPService方法中,通过输出流的形式响应给了浏览器,<%%>中的代码也在该方法中穿插执行.\",\"当JSP网页在执行时，JSP Container 会做检查工作，如果发现JSP网页有更新修改时，JSP Container 才会再次编译JSP成 Servlet; 如果JSP没有更新时，就直接执行前面所产生的Servlet. 也就是说,当我们在JSP上修改了代码时,不需要频繁的更新和重启项目,直接访问就可以完成更新\"]},\"1934\":{\"h\":\"JSP加载引擎\",\"t\":[\"查看tomcat web.xml 我们发现,这里默认配置了一个JSP的加载引擎 — JSPServlet\",\"JSP加载引擎的匹配路径规则如下\",\"通过上述代码查看我们发现, 请求JSP是都会被JSP加载引擎所匹配,\"]},\"1935\":{\"h\":\"作用\",\"t\":[\"转译JSP页面 将JSP页面翻译成一个Servlet，这个Servlet是一个java文件，同时也是一个完整的java程序\",\"编译JSP对应java文件 JSP引擎调用java编译器对这个Servlet进行编译，得到可执行文件class\",\"请求处理阶段 JSP引擎调用java虚拟机来解释执行class文件，生成向客户端发送的应答，然后发送给客户端\"]},\"1936\":{\"h\":\"JSP的性能问题\",\"t\":[\"有人都会认为JSP的执行性能会和Servlet相差很多，其实执行性能上的差别只在第一次的执行。因为JSP在执行第一次后，会被编译成Servlet的类文件，即.class，当再重复调用执行时，就直接执行第一次所产生的Servlet,而不再重新把JSP编译成Servelt。除了第一次的编译会花较久的时间之外，之后JSP和同等功能的Servlet的执行速度就几乎相同了。\",\"JSP慢的原因不仅仅是第一次请求需要进行转译和编译,而是因为JSP作为一种动态资源,本质上就是Servlet,它是需要运行代码才会生成资源,和HTML本身资源已经存在,直接返回,着本质上的差异,另外,JSP转译之后,内部通过大量IO流形式发送页面内容,IO流本身是一种重量级操作,是比较消耗资源的\"]},\"1937\":{\"h\":\"前后端分离\",\"t\":[\"前后端分离属于软件架构的一种。其核心思想是把前端项目（Node.js实现的）和后端项目独立部署到不同的服务器上，前端项目在通过Ajax请求服务器端项目Restful接口实现数据交互。\",\"使用前后端分离架构的项目在项目组中往往配备前端工程师和后端工程师。后端工程师就是我们，对于我们我们来说，不需要在项目中编写页面了，写到控制器返回数据即可，最后把项目部署到服务器上。而前端项目中主要是一些HTML、JavaScript、图片等资源，如果希望能够独立运行就需要借助基于Node.js的一些前端框架。\"]},\"1938\":{\"h\":\"交互形式\",\"t\":[\"在前后端分离架构中，后端只需要负责按照约定的数据格式向前端提供可调用的API服务即可。前后端之间通过HTTP请求进行交互，前端获取到数据后，进行页面的组装和渲染，最终返回给浏览器。\"]},\"1939\":{\"h\":\"代码组织形式\",\"t\":[\"在传统架构模式中，前后端代码存放于同一个代码库中，甚至是同一工程目录下。页面中还夹杂着后端代码。前后端工程师进行开发时，都必须把整个项目导入到开发工具中。而前后端分离模式在代码组织形式上有以下两种:\"]},\"1940\":{\"h\":\"半分离\",\"t\":[\"前后端共用一个代码库，但是代码分别存放在两个工程中。后端不关心或很少关心前端元素的输出情况，前端不能独立进行开发和测试，项目中缺乏前后端 交互的测试用例。\"]},\"1941\":{\"h\":\"分离\",\"t\":[\"前后端代码库分离，前端代码中有可以进行Mock测试(通过构造虚拟测试对 象以简化测试环境的方法)的伪后端，能支持前端的独立开发和测试。而后端代码中除了功能实现外，还有着详细的测试用例，以保证API的可用性，降低 集成风险\"]},\"1942\":{\"h\":\"数据接口规范流程\",\"t\":[\"在开发期间前后端共同商定好数据接口的交互形式和数据格式。然后实现前后端的并行开发，其中前端工程师再开发完成之后可以独自进行mock测试，而后端也可以使用接口测试平台进行接口自测，然后前后端一起进行功能联调并校验格式，最终进行自动化测试。\"]},\"1943\":{\"h\":\"前后端分离常用框架\",\"t\":[\"对于前端工程师来说常用的就是Vue.js和React.js和angularJS。他们是前端工程师常用的三大框架。\",\"Vue.js 小巧，灵活，功能却很强大。在市场上占有率更高，属于成熟稳定的框架。在课程中讲解此框架，后面的项目的前端页面也是基于Vue实现\",\"React相比Vue.js更新一些，近几年有追赶Vue.js的架势。更适合做移动项目。\",\"AngularJS相比Vue更加大量一些。只有在一些大型项目中才可能被使用。\",\"Vue是一个渐进式的JavaScript框架与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，与现代化的工具以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\"]},\"1944\":{\"h\":\"前后端分离的好处\"},\"1945\":{\"h\":\"前后端明确的工作职责\",\"t\":[\"通过将开发团队前后端分离化，让前后端工程师只需要专注于前端或后端的开发工作，使得前后端工程师实现自治，培养其独特的技术特性，然后构建出一个全栈式的精益开发团队。\"]},\"1946\":{\"h\":\"提升开发效率\",\"t\":[\"前后端分离以后，可以实现前后端代码的解耦，只要前后端沟通约定好应用所需接口以及接口参数，便可以开始并行开发，无需等待对方的开发工作结束。与此同时，即使需求发生变更，只要接口与数据格式不变，后端开发人员就不需要修改代码，只要前端进行变动即可。如此一来整个应用的开发效率必然会有质的提升。\"]},\"1947\":{\"h\":\"完美应对复杂多变的前端需求\",\"t\":[\"如果开发团队能完成前后端分离的转型，打造优秀的前后端团队，开发独立化，让开发人员做到专注专精，开发能力必然会有所提升，能够完美应对各种复杂多变的前端需求。\"]},\"1948\":{\"h\":\"增强代码可维护性\",\"t\":[\"前后端分离后，应用的代码不再是前后端混合，只有在运行期才会有调用依赖关系。\"]},\"1949\":{\"h\":\"JSP注意事项\"},\"1950\":{\"h\":\"JSP得性能问题\",\"t\":[\"有人都会认为JSP的执行性能会和Servlet相差很多，其实执行性能上的差别只在第一次的执行。因为JSP在执行第一次后，会被编译成Servlet的类文件，即.class，当再重复调用执行时，就直接执行第一次所产生的Servlet,而不再重新把JSP编译成Servelt。除了第一次的编译会花较久的时间之外，之后JSP和同等功能的Servlet的执行速度就几乎相同了。\",\"JSP慢的原因不仅仅是第一次请求需要进行转译和编译,而是因为JSP作为一种动态资源,本质上就是Servlet,它是需要运行代码才会生成资源,和HTML本身资源已经存在,直接返回,着本质上的差异,另外,JSP转译之后,内部通过大量IO流形式发送页面内容,IO流本身是一种重量级操作,是比较消耗资源的\",\"在前后端分离时代,JSP作为一种前后端混合技术就不在适用了,但是JSP和Servlet关联比较紧密,所以学习Servlet技术一定要了解一些JSP技术.作为一种软件行业的从业人员,JSP技术是一种基础性技术,是我们学习后面的知识的一种知识积累.JSP技术在某些独特的领域和在一些特定的需求下,还是有存在的必要的,如很多政府和事业单位的项目中就存在大量的JSP应用情况.在我们没有学习更加多的页面静态化和前后端分离技术之前,我们还是要借助JSP技术作为数据展现的一种处理手段,从学习JSP到从JSP中向更高的技术进化需要一个过程.\"]},\"1951\":{\"h\":\"JSP中的变量问题\",\"t\":[\"在JSP上可以通过<% %> 和<%! %>两种方式书写代码,那么两种方式中书写的java代码在转译之后生成的java文件中的位置是不一样,一个在_JSPService方法中,一个作为类的成员,以定义变量举例\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>$Title$</title> </head> <body> <%--局部变量--%> <% int a =10; %> <%--成员变量--%> <%! int b =10; %> </body> </html> \",\"转译之后的结果如下\",\"因为JSP本质就是Servlet,在servlet中我们是不推荐定义一些成员变量的,所以我们也不推荐在JSP中定义局部变量\"]},\"1952\":{\"h\":\"JSP中的注释问题\",\"t\":[\"JSP允许在HTML编码中嵌入java代码,那么在JSP上除了HTML中可以简单的注释以外,还有自己的注释方式\",\"在JSP中的注释格式为<%-- --%>,不同的注释方式之间时有差异的,接下来我们就对比一下这些差异\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> <style> /*4css样式的注释*/ </style> <script> /*5js中的注释*/ </script> </head> <body> <%-- 1JSP中的注释 --%> <!-- 2html注释 --> <% for (int i = 0; i <10 ; i++) { } /*3java中的注释*/ %> index2 <%-- 1JSP注释 仅仅存在于JSP页面 不会被编入java代码 不会响应给浏览器 2html注释 不仅仅存在于JSP页面 编入java代码 会响应给浏览器 3java注释 不仅仅存在于JSP页面 编入java代码 不会响应给浏览器 4css js注释 不仅仅存在于JSP 编入java代码 会响应给浏览器 推荐在JSP 页面使用JSP注释 尤其是在注释 html代码的时候 --%> <ol> <!--</ol> --> <li>1</li> </ol> </body> </html> \",\"经过我们查看转译之后的文件和通过浏览器查看源代码发现\",\"所以我们推荐在JSP中使用JSP专用注释<%-- --%>\"]},\"1953\":{\"h\":\"JSP的使用建议\",\"t\":[\"JSP和Servlet本质上是相同的,JSP页面功能和Servlet后台功能是完全能够互换的,但是JSP的编码风格是在HTML中嵌入少量JAVA代码,它用于显示数据比较方便,如果Servlet上嵌入HTML字符串处理就比较麻烦\",\"Servlet更适合专门编写JAVA代码,JSP更擅长展示数据,Servlet更适合做后台程序,所以在分层上,我们往往将Servlet作为控制层Controller使用,JSP作为视图层view使用,可以让Servlet将数据发送给JSP,然后在JSP上展示数据\"]},\"1954\":{\"h\":\"JSP指令标签\"},\"1955\":{\"h\":\"Page指令标签\"},\"1956\":{\"h\":\"什么是指令标签\",\"t\":[\"指令标签是JSP页面上的一种特殊标签,JSP指令可以用来设置整个JSP页面相关的属性，如网页的编码方式,脚本语言,导包等等。\"]},\"1957\":{\"h\":\"指令标签的语法\",\"t\":[\"<%@ directive attribute=\\\"value\\\" %> \"]},\"1958\":{\"h\":\"JSP中的三种指令标签\",\"t\":[\"指令\",\"描述\",\"<%@ page %>\",\"定义网页依赖属性，如脚本语言、error页面、缓存需求等等\",\"<%@ include %>\",\"包含其他文件\",\"<%@ taglib %>\",\"引入标签库的定义\"]},\"1959\":{\"h\":\"Page指令标签\",\"t\":[\"属性\",\"描述\",\"buffer\",\"指定out对象使用缓冲区的大小\",\"autoFlush\",\"控制out对象的缓冲区\",\"contentType\",\"指定当前JSP页面的MIME类型和字符编码\",\"errorPage\",\"指定当JSP页面发生异常时需要转向的错误处理页面\",\"isErrorPage\",\"指定当前页面是否可以作为另一个JSP页面的错误处理页\",\"extends\",\"指定servlet从哪一个类继承\",\"import\",\"导入要使用的Java类\",\"info\",\"定义JSP页面的描述信息\",\"isThreadSafe\",\"isThreadSafe\",\"language\",\"定义JSP页面所用的脚本语言，默认是Java\",\"session\",\"指定JSP页面是否使用session\",\"isELIgnored\",\"指定是否执行EL表达式\",\"isScriptingEnabled\",\"确定脚本元素能否被使用\"]},\"1960\":{\"h\":\"Page指令的使用\",\"t\":[\"<%--告知浏览器以什么格式和编码解析 响应的数据--%> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" %> <%--设置JSP页面转换的语言--%> <%@ page language=\\\"java\\\"%> <%--导包--%> <%@ page import=\\\"com.meturing.entity.User\\\" %> <%--在转换成java代码时使用的编码 一般不用设置--%> <%@ page pageEncoding=\\\"UTF-8\\\" %> <%--指定错误页 当页面发生错误时 指定跳转的页面--%> <%@ page errorPage=\\\"error500.JSP\\\" %> <%--指定当前页为异常提示页 当前页面可以接收异常对象 --%> <%@page isErrorPage=\\\"true\\\" %> \",\"errorPage 是一种处理错误提示页的功能除了JSP有的错误提示页功能 javaEE中自带其他错误提示页处理功能,具体配置如下\",\"在web.xml 配置各种错误的提示页\",\"<error-page> <error-code>500</error-code> <location>/error500.JSP</location> </error-page> <error-page> <error-code>404</error-code> <location>/error404.JSP</location> </error-page> \",\"当JSP中发生了异常时,如果JSP中配置的错误页和web.xml 中配置的错误页冲突了,JSP page指令的 errorPage优先级更高\"]},\"1961\":{\"h\":\"Include指令标签\",\"t\":[\"JSP可以通过include指令来包含其他文件. 被包含的文件可以是JSP文件、HTML文件或文本文件. 包含的文件就好像是该JSP文件的一部分，会被同时编译执行。\",\"除了include指令标签可以实现引入以外,使用 jsp:include 也可以实现引入\"]},\"1962\":{\"h\":\"静态引入和动态引入\",\"t\":[\"<%--静态引入使用的是 include 指令标签 被引入的JSP页面不会生成java代码 被引入的网页和当前页生成代码后形成了一个java文件--%> <%@include file=\\\"head.JSP\\\"%> <%--动态引入 JSP标签中的 include选项 被引入的JSP页面会生成独立的java代码 在生成的java代码中 使用JSPRuntimeLibrary.include(request, response, \\\"head.JSP\\\", out, false);引入其他页面 --%> <jsp:include page=\\\"head.JSP\\\"/> \",\"查看转译之后的java源代码文件中的区别\",\"静态引入: @include 被引入的网页和当前页生成代码后形成了一个java文件\",\"动态引入: jsp:include 被引入的JSP页面会生成\"]},\"1963\":{\"h\":\"Taglib指令标签\",\"t\":[\"JSP API允许用户自定义标签，一个自定义标签库就是自定义标签的集合。\",\"Taglib指令引入一个自定义标签集合的定义，包括库路径、自定义标签。\"]},\"1964\":{\"h\":\"Taglib指令的语法\",\"t\":[\"<%@ taglib uri=\\\"uri\\\" prefix=\\\"prefixOfTag\\\" %> \"]},\"1965\":{\"h\":\"JSP的内置对象\"},\"1966\":{\"h\":\"什么是内置对象\",\"t\":[\"因为JSP的本质是Servlet,在JSP文件经过转译之后,生成JAVA代码,在运行时,JSP给我们准备好了九个可以直接使用而不用我们自己去new的对象,这九个对象我们称之为内置对象.内置对象完全有JSP自行去维护,我们直接使用即可\"]},\"1967\":{\"h\":\"JSP的九大内置对象\"},\"1968\":{\"h\":\"四个域对象\",\"t\":[\"内置对象\",\"说明\",\"范围\",\"pageContext\",\"page域\",\"当前页面内可用\",\"request\",\"request域\",\"单次请求\",\"session\",\"session域\",\"单次会话\",\"application\",\"application域\",\"项目运行\"]},\"1969\":{\"h\":\"响应对象\",\"t\":[\"内置对象\",\"说明\",\"response\",\"响应对象\"]},\"1970\":{\"h\":\"输出流对象\",\"t\":[\"内置对象\",\"说明\",\"out\",\"打印对象\"]},\"1971\":{\"h\":\"其他三个对象\",\"t\":[\"内置对象\",\"说明\",\"servletConfig\",\"由于JSP本身也是一个Servlet,所以容器也会给我们准备一个ServletConfig\",\"page\",\"就是他this对象 当前JSP对象本身\",\"exception\",\"异常对象,在错误提示页上使用,当isErrorpage=true 才具有该对象\"]},\"1972\":{\"h\":\"九大内置对象的使用\",\"t\":[\"实体类\",\"public class User implements Serializable { private Integer uid; private String name; private String password; .... \",\"Servlet代码\",\"@WebServlet(\\\"/servlet1.do\\\") public class Servlet1 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 向三个域中放入数据 /*向请求域中放入数据*/ User user=new User(1,\\\"李雷\\\",\\\"123456\\\"); req.setAttribute(\\\"user\\\",user); req.setAttribute(\\\"msg\\\",\\\"requestMessage\\\"); /*向session域中放入数据*/ List<User> users =new ArrayList<>(); User user1=new User(1,\\\"韩梅梅\\\",\\\"123456\\\"); User user2=new User(1,\\\"小明\\\",\\\"123456\\\"); User user3=new User(1,\\\"小红\\\",\\\"123456\\\"); Collections.addAll(users,user1,user2,user3); HttpSession session = req.getSession(); session.setAttribute(\\\"users\\\",users); session.setAttribute(\\\"msg\\\",\\\"sessionMessage\\\"); /*向application域中放入数据*/ ServletContext application = getServletContext(); Map<String,User> map =new HashMap<>(); map.put(\\\"a\\\",user1); map.put(\\\"b\\\",user2); map.put(\\\"c\\\",user3); application.setAttribute(\\\"userMap\\\",map); application.setAttribute(\\\"msg\\\",\\\"applicationMessage\\\"); // 跳转至jsp req.getRequestDispatcher(\\\"showInfo.jsp\\\").forward(req,resp); } } \",\"JSP代码\",\"<%@ page import=\\\"com.meturing.pojo.User\\\" %> <%@ page import=\\\"java.util.List\\\" %> <%@ page import=\\\"java.util.Map\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <%--向pageContext域中放数据--%> <% pageContext.setAttribute(\\\"msg\\\", \\\"pageContextMessage\\\"); pageContext.setAttribute(\\\"user\\\", new User(1,\\\"大黄\\\",\\\"abcdefg\\\")); %> <%--从域中取出数据--%> pageContext:<br/> msg:<%=pageContext.getAttribute(\\\"msg\\\")%><br/> username:<%=((User)pageContext.getAttribute(\\\"user\\\")).getName()%><br/> request域中的数据:<br/> msg:<%=request.getAttribute(\\\"msg\\\")%><br/> username:<%=((User)request.getAttribute(\\\"user\\\")).getName()%><br/> session域中的数据:<br/> msg:<%=session.getAttribute(\\\"msg\\\")%><br/> username:<%=((List<User>)session.getAttribute(\\\"users\\\")).get(0).getName()%><br/> application域中的数据:<br/> msg:<%=application.getAttribute(\\\"msg\\\")%><br/> username:<%=((Map<String,User>)application.getAttribute(\\\"userMap\\\")).get(\\\"a\\\").getName()%><br/> </body> </html> \"]},\"1973\":{\"h\":\"综合案例开发\",\"t\":[\"链接数据库显示所有员工信息到JSP页面,表格如下\"]},\"1974\":{\"h\":\"构建项目结构\"},\"1975\":{\"h\":\"匹配规则\",\"t\":[\"0-500 A 501-1000 B 1001-1500 C 1501-2000 D 2001-3000 E 3001-4000 F 4000+ G\"]},\"1976\":{\"h\":\"相关代码\",\"t\":[\"实体类\",\"public class Emp implements Serializable { private Integer empno; private String ename; private String job; private Integer mgr; private Date hiredate; private Double sal; private Double comm; private Integer deptno; ... \",\"dao层\",\"public class EmpDaoImpl implements EmpDao { private String url=\\\"jdbc:mysql://127.0.0.1:3306/mydb?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\"; private String username=\\\"root\\\"; private String password=\\\"root\\\"; @Override public List<Emp> findAll() { List<Emp> list =new ArrayList<>(); Connection connection =null; PreparedStatement pstat=null; ResultSet resultSet=null; try { Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\"); connection = DriverManager.getConnection(url, username, password); pstat = connection.prepareStatement(\\\"select * from emp\\\"); resultSet = pstat.executeQuery(); while(resultSet.next()){ Integer empno=resultSet.getInt(\\\"empno\\\"); Integer deptno=resultSet.getInt(\\\"deptno\\\"); Integer mgr=resultSet.getInt(\\\"mgr\\\"); String ename=resultSet.getString(\\\"ename\\\"); String job=resultSet.getString(\\\"job\\\"); Double sal=resultSet.getDouble(\\\"sal\\\"); Double comm=resultSet.getDouble(\\\"comm\\\"); Date hiredate=resultSet.getDate(\\\"hiredate\\\"); Emp emp =new Emp( empno, ename, job, mgr, hiredate, sal, comm, deptno); list.add(emp); } } catch (Exception e) { e.printStackTrace(); }finally { if(null!=resultSet){ try { resultSet.close(); } catch (SQLException e) { e.printStackTrace(); } } if(null!=pstat){ try { pstat.close(); } catch (SQLException e) { e.printStackTrace(); } } if(null!=connection){ try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } return list; } } \",\"servlet代码\",\"@WebServlet(\\\"/empServlet.do\\\") public class EmpServlet extends HttpServlet { // dao对象 EmpDao empDao=new EmpDaoImpl(); @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 获取数据 List<Emp> list = empDao.findAll(); // 将数据放入请求域 req.setAttribute(\\\"emps\\\", list); // 请求转发给JSP req.getRequestDispatcher(\\\"showEmp.jsp\\\").forward(req,resp); } } \",\"JSP代码\",\"<%@ page import=\\\"java.util.List\\\" %> <%@ page import=\\\"com.meturing.pojo.Emp\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> <style> table{ border: 3px solid blue; width: 80%; margin: 0px auto; } td,th{ border: 2px solid green; } </style> </head> <body> <table cellspacing=\\\"0px\\\" cellpadding=\\\"0px\\\"> <tr> <th>编号</th> <th>姓名</th> <th>上级编号</th> <th>职务</th> <th>入职日期</th> <th>薪资</th> <th>补助</th> <th>部门号</th> <th>薪资等级</th> </tr> <% List<Emp> emps = (List<Emp>) request.getAttribute(\\\"emps\\\"); for (Emp emp : emps) { %> <tr> <td><%=emp.getEmpno()%></td> <td><%=emp.getEname()%></td> <td><%=emp.getMgr()%></td> <td><%=emp.getJob()%></td> <td><%=emp.getHiredate()%></td> <td><%=emp.getSal()%></td> <td><%=emp.getComm()%></td> <td><%=emp.getDeptno()%></td> <td><%--out.print(\\\"<td>\\\")--%> <% Double sal = emp.getSal(); if(sal<=500){ out.print(\\\"A\\\"); }else if( sal <=1000){ out.print(\\\"B\\\"); }else if( sal <=1500){ out.print(\\\"C\\\"); }else if( sal <=2000){ out.print(\\\"D\\\"); }else if( sal <=3000){ out.print(\\\"E\\\"); }else if( sal <=4000){ out.print(\\\"F\\\"); }else { out.print(\\\"G\\\"); } %> </td> </tr> <% } %> </table> </body> </html> \"]},\"1977\":{\"h\":\"EL表达式的使用\"},\"1978\":{\"h\":\"什么是EL表达式\",\"t\":[\"EL表达式中定义了一些可以帮助我们快捷从域对象中取出数据的写法,基本语法为\",\"${域标志.数据名.属性名(可选)} \",\"四个域标志关键字分别为\",\"requestScope - request域\",\"sessionScope - session域\",\"applicationScope - application域\",\"pageScope - page域\"]},\"1979\":{\"h\":\"EL表达式取出域中的数据\"},\"1980\":{\"h\":\"指定域中取出数据\",\"t\":[\"<%@ page import=\\\"com.meturing.pojo.User\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <title>Title</title> </head> <body> <%--向pageContext域中放数据--%> <% pageContext.setAttribute(\\\"msg\\\", \\\"pageContextMessage\\\"); pageContext.setAttribute(\\\"userx\\\", new User(1,\\\"大黄\\\",\\\"abcdefg\\\")); %> <%-- 从域中取出数据 El表达式在获取对象属性值得时候,是通过对象的属性的get方法获取的 保证对象的要获取的属性必须有对应get方法才可以 EL表达式在使用时是不需要import其他类的 El如果获取的是NULL值,是不展示任何信息的 --%> pageContext域中的数据:<br/> msg:${pageScope.msg}<br/> username:${pageScope.userx.name}<br/> <hr/> request域中的数据:<br/> msg:${requestScope.msg}<br/> username:${requestScope.user.name}<br/> <hr/> session域中的数据:<br/> msg:${sessionScope.msg}<br/> username:${sessionScope.users[1].name}<br/> <hr/> application域中的数据:<br/> msg:${applicationScope.msg}<br/> username:${applicationScope.userMap.a.name}<br/> <hr/> </body> </html> \"]},\"1981\":{\"h\":\"省略域取数据\",\"t\":[\"<%@ page import=\\\"com.meturing.pojo.User\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <title>Title</title> </head> <body> <%--向pageContext域中放数据--%> <% pageContext.setAttribute(\\\"msg\\\", \\\"pageContextMessage\\\"); pageContext.setAttribute(\\\"userx\\\", new User(1,\\\"大黄\\\",\\\"abcdefg\\\")); %> <%-- EL表达式在取出数据的时候是可以省略域标志的 EL表达式会自动依次到四个域中去找数据 --%> PageContext username:${userx.name}<br/> Request username:${user.name}<br/> Session username:${users[1].name}<br/> Application username:${userMap.a.name}<br/> <hr/> <%-- ${数据的名字}如果省略域标志,取数据的顺序如下 pageContext -> pagecontextMsg:${pageScope.msg} request -> requestMsg:${requestScope.msg} session -> sessionMsg:${sessionScope.msg} application -> applicationMsg:${applicationScope.msg} --%> ${msg} </body> </html> \"]},\"1982\":{\"h\":\"取请求中的参数\",\"t\":[\"<%@ page import=\\\"com.meturing.pojo.User\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <title>Title</title> </head> <body> <%-- EL表达式获取请求中的参数 --%> username:${param.username}<br/> hobby:${paramValues.hobby[0]} hobby:${paramValues.hobby[1]} </body> </html> \"]},\"1983\":{\"h\":\"总结\",\"t\":[\"EL表达式定义在JSP页面上,在转译之后的java文件中,会被转化成java代码\",\"EL表达式是一种后台技术,服务器上运行,不是在浏览器上运行,不能用于HTML页面\",\"EL表达式底层是通过反射实现的,在获取对象属性值时是通过对象的get方法实现的\"]},\"1984\":{\"h\":\"EL表达式对运算符的支持\",\"t\":[\"在EL表达式中, 支持运算符的使用\"]},\"1985\":{\"h\":\"运算符的分类\",\"t\":[\"算数运算符 \",\"+-*/%\",\"比较运算符 \",\"== eqequals\",\">gtgreaterthen\",\"<ltlowerthen\",\">=gegreaterthen or equals\",\"<=lelower then or equals\",\"!=nenot equals\",\"逻辑运算符 \",\"||or\",\"&& and\",\"三目运算符 \",\"${条件 ?表达式1 : 表达式2}\",\"判空运算符 \",\"empty\"]},\"1986\":{\"h\":\"EL表达式运算符的使用\"},\"1987\":{\"h\":\"算数运算符\",\"t\":[\"+ 在EL表达式中的‘+’只有数学运算的功能，没有连接符的功能，它会试着把运算符两边的操作数转换为数值类型，进而进行数学加法运算，最后把结果输出。若出现 ${'a'+'b'}则会出现异常。/如果除以0 结果为Infinity 而不是出现异常% 如果和0取余数,那么会出现异常\",\"<%@ page import=\\\"java.util.List\\\" %> <%@ page import=\\\"java.util.ArrayList\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> 算数运算符： <hr/> ${10 + 10}<br/><%-- 20 --%> ${\\\"10\\\" + 10}<br/><%-- 20 --%> ${\\\"10\\\" + \\\"10\\\"}<br/><%-- 20 --%> <%--${\\\"10a\\\" + 10}<br/>--%><%-- 异常 --%> ${10/0}<br/><%-- Infinity --%> <%-- ${10%0}<br/>--%><%-- 异常 --%> </body> </html> \"]},\"1988\":{\"h\":\"关系运算符/比较运算符\",\"t\":[\"比较运算符推荐写成字母形式,不推荐使用 == >= <=\",\"<%@ page import=\\\"java.util.List\\\" %> <%@ page import=\\\"java.util.ArrayList\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> 关系运算符/比较运算符 <hr/> ${10 == 10}<br/> ${10 eq 10}<br/> ${10 gt 8}<br/> </body> </html> \"]},\"1989\":{\"h\":\"逻辑运算符\",\"t\":[\"<%@ page import=\\\"java.util.List\\\" %> <%@ page import=\\\"java.util.ArrayList\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> 逻辑运算符 <hr/> ${ true || false}<br/> ${ true or false}<br/> ${ true && false}<br/> ${ true and false}<br/> </body> </html> \"]},\"1990\":{\"h\":\"条件运算符/三目运算符\",\"t\":[\"<%@ page import=\\\"java.util.List\\\" %> <%@ page import=\\\"java.util.ArrayList\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> 条件运算符/三目运算符 <hr/> ${(100-1)%3==0?10+1:10-1}<br/> </body> </html> \"]},\"1991\":{\"h\":\"判断空运算符\",\"t\":[\"<%@ page import=\\\"java.util.List\\\" %> <%@ page import=\\\"java.util.ArrayList\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> 判断空运算符 <%--empty 为null 则为true--%> <% //向域中放入数据 pageContext.setAttribute(\\\"a\\\",null); pageContext.setAttribute(\\\"b\\\",\\\"\\\"); int[] arr ={}; pageContext.setAttribute(\\\"arr\\\",arr); List list =new ArrayList(); pageContext.setAttribute(\\\"list\\\",list); %> <hr/> ${empty a}<br/> ${empty b}<br/><%--字符串长度为0 则认为是空--%> ${empty arr}<br/><%--数组长度为0 认为不是空--%> ${empty list}<br/><%--集合长度为0 认为是空--%> ${list.size() eq 0}<br/><%--集合长度为0 认为是空--%> </body> </html> \"]},\"1992\":{\"h\":\"初识过滤器\"},\"1993\":{\"h\":\"引入过滤器\"},\"1994\":{\"h\":\"什么是过滤器\",\"t\":[\"Filter也称之为过滤器，它是Servlet技术中最实用的技术.\",\"Web开发人员通过Filter技术，对web服务器管理的所有web资源：例如Jsp, Servlet, 静态图片文件或静态 html 文件等进行拦截，从而实现一些特殊的功能。\",\"例如实现URL级别的权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能 处理编码。\",\"它主要用于对用户请求进行预处理，也可以对HttpServletResponse进行后处理。\",\"使用Filter的完整流程： \",\"Filter对用户请求进行预处理\",\"接着将请求交给Servlet进行处理并生成响应\",\"最后Filter再对服务器响应进行后处理。\"]},\"1995\":{\"h\":\"过滤器如何实现功能\",\"t\":[\"在HttpServletRequest到达 Servlet 之前，拦截客户的HttpServletRequest 。 根据需要检查HttpServletRequest，也可以修改HttpServletRequest 头和数据。\",\"在HttpServletResponse到达客户端之前，拦截HttpServletResponse 。 根据需要检查HttpServletResponse，也可以修改HttpServletResponse头和数据。\",\"Filter接口中有一个doFilter方法，当开发人员编写好Filter，并配置对哪个web资源进行拦截后，Web服务器每次在调用web资源的service方法之前，都会先调用一下filter的doFilter方法.doFilter方法中有一个filterChain对象,用于继续传递给下一个filter,在传递之前我们可以定义过滤请求的功能,在传递之后,我们可以定义过滤响应的功能\"]},\"1996\":{\"h\":\"过滤器的定义与配置\",\"t\":[\"采用三步走策略使用filter\",\"开发后台资源 静态资源(html,css … …)或者动态资源(Servlet,Jsp)\",\"开发Filter\",\"在web.xml中配置Filter拦截哪些资源\"]},\"1997\":{\"h\":\"开发Servlet\",\"t\":[\"public class MyServlet1 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"myServlet1 执行了sevice方法\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.getWriter().print(\\\"myServlet1响应的数据\\\"); } } \",\"public class MyServlet2 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"myServlet2 执行了sevice方法\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.getWriter().print(\\\"myServlet2响应的数据\\\"); } } \"]},\"1998\":{\"h\":\"开发Filter\",\"t\":[\"public class MyFilter implements Filter { // 初始化方法 @Override public void init(FilterConfig filterConfig) throws ServletException { } // 作出过滤的方法 @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { System.out.println(\\\"Filter doFilter 对请求作出过滤\\\"); // 通过一行代码 放行请求 // 放行请求,交给过滤器链继续进行过滤 最后到达资源 filterChain.doFilter(servletRequest, servletResponse); System.out.println(\\\"Filter doFilter 对响应作出过滤\\\"); servletResponse.getWriter().print(\\\"filter 追加一些数据\\\"); } // 销毁方法 @Override public void destroy() { } } \"]},\"1999\":{\"h\":\"配置Filter\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <servlet> <servlet-name>myServlet1</servlet-name> <servlet-class>com.meturing.servlet.MyServlet1</servlet-class> </servlet> <servlet-mapping> <servlet-name>myServlet1</servlet-name> <url-pattern>/myServlet1.do</url-pattern> </servlet-mapping> <servlet> <servlet-name>myServlet2</servlet-name> <servlet-class>com.meturing.servlet.MyServlet2</servlet-class> </servlet> <servlet-mapping> <servlet-name>myServlet2</servlet-name> <url-pattern>/myServlet2.do</url-pattern> </servlet-mapping> <filter> <filter-name>filter1</filter-name> <filter-class>com.meturing.filter.MyFilter</filter-class> </filter> <filter-mapping> <filter-name>filter1</filter-name> <!--对那个/些资源的请求和响应进行过滤--> <!--<url-pattern>/myServlet1.do</url-pattern>--> <servlet-name>myServlet1</servlet-name> <servlet-name>myServlet2</servlet-name> <!--<url-pattern>/</url-pattern> <url-pattern>/*</url-pattern>--> </filter-mapping> </web-app> \"]},\"2000\":{\"h\":\"过滤器的生命周期\",\"t\":[\"同servlet对象一样,Filter对象的创建也是交给web服务器完成的,在web服务器创建和使用及最后销毁filter时,会调用filter对应的方法\"]},\"2001\":{\"h\":\"过滤器的结构\",\"t\":[\"public class MyFilter implements Filter { //构造方法 public MyFilter(){ System.out.println(\\\"MyFilter constructor invoked\\\"); } // 初始化方法 @Override public void init(FilterConfig filterConfig) throws ServletException { System.out.println(\\\"MyFilter init invoked\\\"); } // 作出过滤的方法 @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { System.out.println(\\\"Filter doFilter 对请求作出过滤\\\"); // 通过一行代码 放行请求 // 放行请求,交给过滤器链继续进行过滤 最后到达资源 filterChain.doFilter(servletRequest, servletResponse); System.out.println(\\\"Filter doFilter 对响应作出过滤\\\"); servletResponse.getWriter().print(\\\"filter 追加一些数据\\\"); } // 销毁方法 @Override public void destroy() { System.out.println(\\\"MyFilter destory invoked\\\"); } } \"]},\"2002\":{\"h\":\"构造方法\",\"t\":[\"实例化一个Filter对象的方法\"]},\"2003\":{\"h\":\"初始化方法\",\"t\":[\"public void init(FilterConfig filterConfig);\",\"和我们编写的Servlet程序一样，Filter的创建和销毁由WEB服务器负责。 web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。\",\"开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。\"]},\"2004\":{\"h\":\"拦截请求方法\",\"t\":[\"public void doFilter\",\"这个方法完成实际的过滤操作。当客户请求访问与过滤器关联的URL的时候，Servlet过滤器将先执行doFilter方法。FilterChain参数用于访问后续过滤器。\"]},\"2005\":{\"h\":\"销毁方法\",\"t\":[\"public void destroy();\",\"Filter对象创建后会驻留在内存，当web应用移除或服务器停止时才销毁。在Web容器卸载 Filter 对象之前被调用。该方法在Filter的生命周期中仅执行一次。在这个方法中，可以释放过滤器使用的资源。\"]},\"2006\":{\"h\":\"生命周期\",\"t\":[\"WEB 容器启动时,会对Filter进行构造并初始化 一次\",\"每次请求目标资源时,都会执行doFilter的方法\",\"WEB容器关闭是,会销毁Filter对象\"]},\"2007\":{\"h\":\"JSTL\"},\"2008\":{\"h\":\"JSTL核心标签库\"},\"2009\":{\"h\":\"认识JSTL\"},\"2010\":{\"h\":\"为什么要学习JSTL\",\"t\":[\"通过之前的案例我们发现,就算在JSP中可以使用EL表达式取出域对象中的数据,但是仍然避免不了还是要在页面中书写一些java代码.这种嵌入JAVA代码的处理比较繁琐,容易出错,且代码不容易维护.\"]},\"2011\":{\"h\":\"什么是JSTL\",\"t\":[\"JSTL（Java server pages standarded tag library，即JSP标准标签库）是由JCP（Java community Proces）所制定的标准规范，它主要提供给Java Web开发人员一个标准通用的标签库，并由Apache的Jakarta小组来维护。\"]},\"2012\":{\"h\":\"使用JSTL的好处\",\"t\":[\"开发人员可以利用JSTL和EL来开发Web程序，取代传统直接在页面上嵌入Java程序的做法，以提高程序的阅读性、维护性和方便性。在jstl中, 提供了多套标签库, 用于方便在jsp中完成或简化相关操作.\"]},\"2013\":{\"h\":\"JSTL标签库的组成部分\",\"t\":[\"核心标签库: core, 简称c\",\"格式化标签库: format, 简称fmt\",\"函数标签库: function, 简称fn\"]},\"2014\":{\"h\":\"JSTL的使用前提\",\"t\":[\"需要在项目中导入jstl-1.2.jar ,jstl在后台由java代码编写, jsp页面中通过标签进行使用, 使用标签时, 会自动调用后台的java方法,\",\"标签和方法之间的映射关系在对应的tld文件中描述. 需要在页面中通过taglib指令引入对应的标签库, uri可以在对应的tld文件中找到\",\"<%@ taglib uri=\\\"标签库的定位\\\" prefix=\\\"前缀(简称)\\\" %> \"]},\"2015\":{\"h\":\"JSTL的使用\"},\"2016\":{\"h\":\"导入核心标签库\",\"t\":[\"<%@ taglib prefix=\\\"c\\\" uri=\\\"http://java.sun.com/jsp/jstl/core\\\"%> \"]},\"2017\":{\"h\":\"操作域对象的标签\",\"t\":[\"<c:set>\",\"向域对象中放入数据\",\"setAttribute\",\"<c:out>\",\"从域对象中取出数据\",\"getAttribute\",\"<c:remove>\",\"从域对象中移除数据\",\"removeAttribute\"]},\"2018\":{\"h\":\"向域对象放入值\",\"t\":[\"<%@ taglib prefix=\\\"c\\\" uri=\\\"http://java.sun.com/jsp/jstl/core\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <%--分别向四个域中放入数据--%> <%-- 历史写法 <% request.setAttribute(\\\"msg\\\", \\\"requestMessage\\\"); %> --%> <%-- c:set scope 指定放数据的域 可选值 page request session application var 数据的名称 value 数据 --%> <c:set scope=\\\"page\\\" var=\\\"msg\\\" value=\\\"pageMessage\\\"></c:set> <c:set scope=\\\"request\\\" var=\\\"msg\\\" value=\\\"requestMessage\\\"></c:set> <c:set scope=\\\"session\\\" var=\\\"msg\\\" value=\\\"sessionMessage\\\"></c:set> <c:set scope=\\\"application\\\" var=\\\"msg\\\" value=\\\"applicationMessage\\\"></c:set> </body> </html> \"]},\"2019\":{\"h\":\"移除对象中的值\",\"t\":[\"<%@ taglib prefix=\\\"c\\\" uri=\\\"http://java.sun.com/jsp/jstl/core\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <%--移除指定域中的值--%> <c:remove var=\\\"msg\\\" scope=\\\"page\\\"></c:remove> <c:remove var=\\\"msg\\\" scope=\\\"request\\\"></c:remove> <c:remove var=\\\"msg\\\" scope=\\\"session\\\"></c:remove> <c:remove var=\\\"msg\\\" scope=\\\"application\\\"></c:remove> </body> </html> \"]},\"2020\":{\"h\":\"获取域对象中的值\",\"t\":[\"<%@ taglib prefix=\\\"c\\\" uri=\\\"http://java.sun.com/jsp/jstl/core\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <%--通过EL表达式取出域中的值--%> <hr/> ${pageScope.msg}<br/> ${requestScope.msg}<br/> ${sessionScope.msg}<br/> ${applicationScope.msg }<br/> <hr/> <%--通过c:out标签获取域中的值--%> <c:out value=\\\"${pageScope.msg}\\\" default=\\\"page msg not found\\\"/> <c:out value=\\\"${requestScope.msg}\\\" default=\\\"request msg not found\\\"/> <c:out value=\\\"${sessionScope.msg}\\\" default=\\\"session msg not found\\\"/> <c:out value=\\\"${applicationScope.msg}\\\" default=\\\"application msg not found\\\"/> </body> </html> \"]},\"2021\":{\"h\":\"多条件分支标签\"},\"2022\":{\"h\":\"c:if 标签\",\"t\":[\"<%@ page import=\\\"java.util.Random\\\" %> <%@ taglib prefix=\\\"c\\\" uri=\\\"http://java.sun.com/jsp/jstl/core\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <%-- 随机生成一个分数 0-100 >=90 A >=80 B >=70 C >=60 D <60 E --%> <% int score =new Random().nextInt(101); pageContext.setAttribute(\\\"score\\\", score); %> <%-- test 判断条件 c:if可以将test的结果放入指定的域中 scope 指定存放的域 var 数据名 --%> 分数:${score}<br/> 等级: <c:if test=\\\"${score ge 90}\\\" scope=\\\"page\\\" var=\\\"f1\\\">A</c:if> <c:if test=\\\"${score ge 80 and score lt 90}\\\" scope=\\\"page\\\" var=\\\"f2\\\">B</c:if> <c:if test=\\\"${score ge 70 and score lt 80}\\\" scope=\\\"page\\\" var=\\\"f3\\\">C</c:if> <c:if test=\\\"${score ge 60 and score lt 70}\\\" scope=\\\"page\\\" var=\\\"f4\\\">D</c:if> <c:if test=\\\"${score lt 60}\\\" scope=\\\"page\\\" var=\\\"f5\\\">E</c:if> <hr/> ${f1} ${f2} ${f3} ${f4} ${f5} <hr/> <%--输出分数是否及格--%> <c:if test=\\\"${score ge 60}\\\" scope=\\\"page\\\" var=\\\"flag\\\">及格</c:if> <c:if test=\\\"${!pageScope.flag}\\\">不及格</c:if> <hr/> </body> </html> \"]},\"2023\":{\"h\":\"c:choose标签\",\"t\":[\"<%@ page import=\\\"java.util.Random\\\" %> <%@ taglib prefix=\\\"c\\\" uri=\\\"http://java.sun.com/jsp/jstl/core\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <%-- 随机生成一个分数 0-100 >=90 A >=80 B >=70 C >=60 D <60 E --%> <% int score =new Random().nextInt(101); pageContext.setAttribute(\\\"score\\\", score); %> <c:choose> <c:when test=\\\"${score ge 90}\\\">A</c:when> <c:when test=\\\"${score ge 80}\\\">B</c:when> <c:when test=\\\"${score ge 70}\\\">C</c:when> <c:when test=\\\"${score ge 60}\\\">D</c:when> <c:otherwise>E</c:otherwise> </c:choose> </body> </html> \"]},\"2024\":{\"h\":\"迭代标签\"},\"2025\":{\"h\":\"c:foreach标签\",\"t\":[\"遍历指定次数: 打印九九乘法表\",\"<%@ taglib prefix=\\\"c\\\" uri=\\\"http://java.sun.com/jsp/jstl/core\\\" %> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <%-- for ( int i =1;i<=9 ;i+=2){ pageContext.setAttribute(\\\"i\\\",i) } c:foreach 每次执时都会向page域中放入一个名为 i 值为当前值这样的一个操作 c:forEach中的属性 var: 迭代变量, 存放在pageContext作用域 begin: 迭代起始值 end: 迭代结束值 step: 迭代变量变化的步长 --%> <c:forEach var=\\\"i\\\" begin=\\\"1\\\" end=\\\"9\\\" step=\\\"1\\\"> <c:forEach var=\\\"j\\\" begin=\\\"1\\\" end=\\\"${i}\\\" step=\\\"1\\\"> ${j} * ${i} = ${i*j} &nbsp; </c:forEach> <br/> </c:forEach> </body> </html> \",\"便利对象数组/List\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <%@ taglib prefix=\\\"c\\\" uri=\\\"http://java.sun.com/jsp/jstl/core\\\" %> <html> <head> <title>Title</title> <style> table{ border: 3px solid blue; width: 90%; margin: 0px auto; } td,th{ border: 2px solid green; } </style> </head> <body> <table cellspacing=\\\"0px\\\" cellpadding=\\\"0px\\\"> <tr> <th>序号</th> <th>索引</th> <th>isFirst</th> <th>isLast</th> <th>工号</th> <th>姓名</th> <th>姓名</th> <th>上级编号</th> <th>职务</th> <th>入职日期</th> <th>薪资</th> <th>补助</th> <th>部门号</th> <th>薪资等级</th> </tr> <%--<% List<Emp> emps = (List<Emp>) request.getAttribute(\\\"emps\\\"); for (Emp emp : emps) { pageContext.setAttribute(\\\"emp\\\", emp);//将员工对象放入PageContext 域 %> c:foreach items 要遍历的数组/List 可以通过EL表达式取出集合之后给改属性赋值 var 中间变量的名称 varStatus 记录每一个对象状态的设置 count 个数 index 索引 first 如果当前元素是迭代的第一个元素 true 否则为false last 如果当前元素是迭代的最后一个元素 true 否则为false current 当前迭代的元素本身 --%> <c:forEach items=\\\"${emps}\\\" var=\\\"emp\\\" varStatus=\\\"empStatus\\\"> <tr> <td>${empStatus.count}</td> <td>${empStatus.index}</td> <td>${empStatus.first}</td> <td>${empStatus.last}</td> <td>${emp.empno}</td> <td>${emp.ename}</td> <td>${empStatus.current.ename}</td> <td>${emp.mgr}</td> <td>${emp.job}</td> <td>${emp.hiredate}</td> <td>${emp.sal}</td> <td>${emp.comm}</td> <td>${emp.deptno}</td> <td> <c:choose> <c:when test=\\\"${emp.sal le 500}\\\">A</c:when> <c:when test=\\\"${emp.sal le 1000}\\\">B</c:when> <c:when test=\\\"${emp.sal le 1500}\\\">C</c:when> <c:when test=\\\"${emp.sal le 2000}\\\">D</c:when> <c:when test=\\\"${emp.sal le 3000}\\\">E</c:when> <c:when test=\\\"${emp.sal le 4000}\\\">F</c:when> <c:when test=\\\"${emp.sal gt 4000}\\\">G</c:when> </c:choose> </td> </tr> </c:forEach> </table> </body> </html> \"]},\"2026\":{\"h\":\"JSTL格式化标签\"},\"2027\":{\"h\":\"格式化标签库\",\"t\":[\"格式化标签库,也叫作fmt标签,是JTSL中的第二大组成部分,主要解决数据显示格式问题,让JSP页面的数据格式更加规范\"]},\"2028\":{\"h\":\"导入语句\",\"t\":[\"<%@ taglib prefix=\\\"fmt\\\" uri=\\\"http://java.sun.com/jsp/jstl/fmt\\\"%> \"]},\"2029\":{\"h\":\"fmt标签属性\",\"t\":[\"属性\",\"描述\",\"是否必要\",\"默认值\",\"value\",\"要显示的数字\",\"是\",\"无\",\"type\",\"NUMBER，CURRENCY，或 PERCENT类型\",\"否\",\"Number\",\"pattern\",\"指定一个自定义的格式化模式用与输出 \",\"否\",\"无\",\"currencyCode\",\"货币码（当type=\\\"currency\\\"时）\",\"否\",\"取决于默认区域\",\"currencySymbol\",\"货币符号 (当 type=\\\"currency\\\"时)\",\"否\",\"取决于默认区域\",\"groupingUsed\",\"是否对数字分组 (TRUE 或 FALSE)\",\"否\",\"true\",\"groupingUsed\",\"整型数最大的位数\",\"否\",\"无\",\"maxIntegerDigits\",\"整型数最大的位数\",\"否\",\"无\",\"minIntegerDigits\",\"整型数最小的位数\",\"否\",\"无\",\"maxFractionDigits\",\"小数点后最大的位数\",\"否\",\"无\",\"minFractionDigits\",\"小数点后最小的位数\",\"否\",\"无\",\"var\",\"存储格式化数字的变量\",\"否\",\"Print to page\",\"scope\",\"var属性的作用域\",\"否\",\"page\",\"如果type属性为percent或number，那么您就可以使用其它几个格式化数字属性。maxIntegerDigits属性和minIntegerDigits属性允许您指定整数的长度。若实际数字超过了maxIntegerDigits所指定的最大值，则数字将会被截断\",\"有一些属性允许您指定小数点后的位数。minFractionalDigits属性和maxFractionalDigits属性允许您指定小数点后的位数。若实际的数字超出了所指定的范围，则这个数字会被截断。\",\"数字分组可以用来在每三个数字中插入一个逗号。groupingIsUsed属性用来指定是否使用数字分组。当与minIntegerDigits属性一同使用时，就必须要很小心地来获取预期的结果了。\",\"您或许会使用pattern属性。这个属性可以让您在对数字编码时包含指定的字符。接下来的表格中列出了这些字符。\",\"符号\",\"描述\",\"0\",\"代表一位数字\",\"E\",\"使用指数格式\",\"#\",\"代表一位数字，若没有则显示 0，前导 0 和追尾 0 不显示\",\".\",\"小数点\",\",\",\"数字分组分隔符\",\";\",\"分隔格式\",\";\",\"使用默认负数前缀\",\"%\",\"百分数\",\"?\",\"千分数\",\"¤\",\"货币符号，使用实际的货币符号代替\",\"X\",\"指定可以作为前缀或后缀的字符\",\"&apos;\",\"在前缀或后缀中引用特殊字符\"]},\"2030\":{\"h\":\"日期格式化\",\"t\":[\"日期格式化标签是fmt标签中专门用于处理日期格式的标签\",\"<fmt:formatDate>标签有如下属性：\",\"属性\",\"描述\",\"是否必要\",\"默认值\",\"value\",\"要显示的日期\",\"是\",\"无\",\"type\",\"DATE, TIME, 或 BOTH\",\"否\",\"date\",\"dateStyle\",\"FULL, LONG, MEDIUM, SHORT, 或 DEFAULT\",\"否\",\"default\",\"timeStyle\",\"FULL, LONG, MEDIUM, SHORT, 或 DEFAULT\",\"否\",\"default\",\"pattern\",\"自定义格式模式\",\"否\",\"无\",\"timeZone\",\"显示日期的时区\",\"否\",\"默认时区\",\"var\",\"存储格式化日期的变量名\",\"否\",\"显示在页面\",\"scope\",\"存储格式化日志变量的范围\",\"否\",\"页面\",\"<fmt:formatDate>标签格式模式\",\"代码\",\"描述\",\"实例\",\"G\",\"时代标志\",\"AD\",\"y\",\"不包含纪元的年份。如果不包含纪元的年份小于 10，则显示不具有前导零的年份。\",\"2023\",\"M\",\"月份数字。一位数的月份没有前导零。\",\"April & 04\",\"d\",\"月中的某一天。一位数的日期没有前导零。\",\"20\",\"h\",\"12 小时制的小时。一位数的小时数没有前导零。\",\"12\",\"H\",\"24 小时制的小时。一位数的小时数没有前导零。\",\"0\",\"m\",\"分钟。一位数的分钟数没有前导零。\",\"45\",\"s\",\"秒。一位数的秒数没有前导零。\",\"52\",\"S\",\"毫秒\",\"970\",\"E\",\"周几\",\"Tuesday\",\"D\",\"一年中的第几天\",\"180\",\"F\",\"一个月中的第几个周几\",\"2 (一个月中的第二个星期三)\",\"w\",\"一年中的第几周r\",\"27\",\"W\",\"一个月中的第几周\",\"2\",\"a\",\"a.m./p.m. 指示符\",\"PM\",\"k\",\"小时(12 小时制的小时)\",\"24\",\"K\",\"小时(24 小时制的小时)\",\"0\",\"z\",\"时区\",\"中部标准时间\",\"&apos;\",\"转义文本\",\"&apos;&apos;\",\"单引号\"]},\"2031\":{\"h\":\"格式化标签案例开发\",\"t\":[\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <%@ taglib prefix=\\\"c\\\" uri=\\\"http://java.sun.com/jsp/jstl/core\\\" %> <%@ taglib prefix=\\\"fmt\\\" uri=\\\"http://java.sun.com/jsp/jstl/fmt\\\" %> <html> <head> <title>Title</title> <style> table{ border: 3px solid blue; width: 90%; margin: 0px auto; } td,th{ border: 2px solid green; } </style> </head> <body> <table cellspacing=\\\"0px\\\" cellpadding=\\\"0px\\\"> <tr> <th>序号</th> <th>索引</th> <th>isFirst</th> <th>isLast</th> <th>工号</th> <th>姓名</th> <th>姓名</th> <th>上级编号</th> <th>职务</th> <th>入职日期</th> <th>薪资</th> <th>补助</th> <th>部门号</th> <th>薪资等级</th> </tr> <%--<% List<Emp> emps = (List<Emp>) request.getAttribute(\\\"emps\\\"); for (Emp emp : emps) { pageContext.setAttribute(\\\"emp\\\", emp);//将员工对象放入PageContext 域 %> c:foreach items 要遍历的数组/List 可以通过EL表达式取出集合之后给改属性赋值 var 中间变量的名称 varStatus 记录每一个对象状态的设置 count 个数 index 索引 first 如果当前元素是迭代的第一个元素 true 否则为false last 如果当前元素是迭代的最后一个元素 true 否则为false current 当前迭代的元素本身 --%> <c:forEach items=\\\"${emps}\\\" var=\\\"emp\\\" varStatus=\\\"empStatus\\\"> <tr> <td>${empStatus.count}</td> <td>${empStatus.index}</td> <td>${empStatus.first}</td> <td>${empStatus.last}</td> <td>${emp.empno}</td> <td>${emp.ename}</td> <td>${empStatus.current.ename}</td> <td>${emp.mgr}</td> <td>${emp.job}</td> <td> <fmt:formatDate value=\\\"${emp.hiredate}\\\" pattern=\\\"yyyy年MM月dd日 HH:mm:ss\\\"/> </td> <td> <%-- 0 代表必须有一位数字,如果对应的位置没有值怎么办?自动补充0 # 代表有一位数字,开头和结尾的所有的0不保留 --%> &yen;<fmt:formatNumber value=\\\"${emp.sal}\\\" pattern=\\\"###,##0.00\\\"/> </td> <td>${emp.comm}</td> <td>${emp.deptno}</td> <td> <c:choose> <c:when test=\\\"${emp.sal le 500}\\\">A</c:when> <c:when test=\\\"${emp.sal le 1000}\\\">B</c:when> <c:when test=\\\"${emp.sal le 1500}\\\">C</c:when> <c:when test=\\\"${emp.sal le 2000}\\\">D</c:when> <c:when test=\\\"${emp.sal le 3000}\\\">E</c:when> <c:when test=\\\"${emp.sal le 4000}\\\">F</c:when> <c:when test=\\\"${emp.sal gt 4000}\\\">G</c:when> </c:choose> </td> </tr> </c:forEach> </table> </body> </html> \"]},\"2032\":{\"h\":\"MVC模式的引入\"},\"2033\":{\"h\":\"MVC模式介绍\"},\"2034\":{\"h\":\"什么是MVC模式\",\"t\":[\"MVC是一种项目架构型模式，它本身并不引入新的功能，只是用来指导我们改善应用程序的架构，使得应用的模型和视图相分离，从而得到更好的开发和维护效率。\",\"在MVC模式中，应用程序被划分成了模型（Model）、 视图（View） 和 控制器（Controller） 三个部分。其中，模型部分包含了应用程序的业务逻辑和业务数据；视图部分封装了应用程序的输出形式，也就是通常所说的页面或者是界面；而控制器部分负责协调模型和视图，根据用户请求来选择要调用哪个模型来处理业务，以及最终由哪个视图为用户做出应答。\",\"MVC模式的这三个部分的职责非常明确，而且相互分离，因此每个部分都可以独立的改变而不影响其他部分，从而大大提高了应用的灵活性和重用性。\"]},\"2035\":{\"h\":\"MVC的优势\"},\"2036\":{\"h\":\"耦合性低\",\"t\":[\"视图层和业务层分离，这样就允许更改视图层代码而不用重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变只需要改动MVC的模型层即可。因为模型与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。\"]},\"2037\":{\"h\":\"重用性高\",\"t\":[\"MVC模式允许使用各种不同样式的视图来访问同一个服务器端的代码，因为多个视图能共享一个模型，它包括任何WEB（HTTP）浏览器或者无线浏览器（wap），比如，用户可以通过电脑也可通过手机来订购某样产品，虽然订购的方式不一样，但处理订购产品的方式是一样的。由于模型返回的数据没有进行格式化，所以同样的构件能被不同的界面使用。\",\"MVC使开发和维护用户接口的技术含量降低。\"]},\"2038\":{\"h\":\"开发效率提高,人员职责明确\",\"t\":[\"使用MVC模式使开发时间得到较大的缩减，它使程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HTML和JSP开发人员）集中精力于表现形式上。\"]},\"2039\":{\"h\":\"耦合度低,可维护性高\",\"t\":[\"分离视图层和业务逻辑层也使得WEB应用更易于维护和修改。每层代码修改可以达到无损替换的效果\"]},\"2040\":{\"h\":\"有利软件工程化管理\",\"t\":[\"由于不同的层各司其职，每一层不同的应用具有某些相同的特征，有利于通过工程化、工具化管理程序代码。控制器也提供了一个好处，就是可以使用控制器来联接不同的模型和视图去完成用户的需求，这样控制器可以为构造应用程序提供强有力的手段。给定一些可重用的模型和视图，控制器可以根据用户的需求选择模型进行处理，然后选择视图将处理结果显示给用户。\"]},\"2041\":{\"h\":\"MVC分层及责任划分\"},\"2042\":{\"h\":\"项目分层结构设计\"},\"2043\":{\"h\":\"层次之间的特点\",\"t\":[\"下层不知道上层的存在,仅完成自身的功能,不关心结果如何使用\",\"每一层仅知道下层的存在，而忽略其他层的存在,只关心结果的取得,不关心结果的实现过程\"]},\"2044\":{\"h\":\"过滤器的使用\"},\"2045\":{\"h\":\"过滤器链的使用\"},\"2046\":{\"h\":\"什么是过滤链\",\"t\":[\"在一个web应用中，可以开发编写多个Filter，这些Filter组合起来称之为一个Filter链。\",\"web服务器根据Filter在web.xml文件中的注册顺序，决定先调用哪个Filter.\",\"当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法。在doFilter方法中，开发人员如果调用了FilterChain对象的doFilter方法，则web服务器会检查FilterChain对象中是否还有filter，如果有，则调用第2个filter，如果没有，则调用目标资源。\",\"使用过滤器链的好处是我们可以将不同的过滤功能分散到多个过滤器中,分工明确,避免一个过滤器做太多的业务处理,降低了代码的耦合度,这体现了单一职责的设计原则,应用了责任链的代码设计模式.\"]},\"2047\":{\"h\":\"代码案例\",\"t\":[\"public class MyFilter1 implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { } @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { System.out.println(\\\"MyFilter1 在过滤请求 \\\"); filterChain.doFilter(servletRequest,servletResponse); System.out.println(\\\"MyFilter1 在过滤响应\\\"); } @Override public void destroy() { } } \",\"public class MyFilter2 implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { } @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { System.out.println(\\\"MyFilter2 在过滤请求 \\\"); filterChain.doFilter(servletRequest,servletResponse); System.out.println(\\\"MyFilter2 在过滤响应\\\"); } @Override public void destroy() { } } \",\"配置过滤链\",\"决定过滤器的执行顺序是由filter-mapping标签的顺序决定\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <filter> <filter-name>filter1</filter-name> <filter-class>com.meturing.filter.MyFilter1</filter-class> </filter> <filter> <filter-name>filter2</filter-name> <filter-class>com.meturing.filter.MyFilter2</filter-class> </filter> <!--这里的顺序决定了过滤器的顺序--> <filter-mapping> <filter-name>filter2</filter-name> <url-pattern>/myServlet1.do</url-pattern> </filter-mapping> <filter-mapping> <filter-name>filter1</filter-name> <url-pattern>/myServlet1.do</url-pattern> </filter-mapping> </web-app> \"]},\"2048\":{\"h\":\"过滤器初始化参数\",\"t\":[\"同servlet一样,filter也可以通过web.xml进行初始化配置,在初始化时,将参数封装进入FilterConfig并在调用init方法时作为实参传入,我们可以在init方法中获取参数.FilterConfig接口为我们提供了如下功能\",\"String getFilterName();//得到filter的名称。 String getInitParameter(String name);//返回定名称的初始化参数的值。如果不存在返回null. Enumeration getInitParameterNames();//返回过滤器的所有初始化参数的名字的枚举集合。 public ServletContext getServletContext();//返回Servlet上下文对象的引用。 \"]},\"2049\":{\"h\":\"使用案例\",\"t\":[\"配置Filter初始化参数\",\"<filter> <filter-name>filter1</filter-name> <filter-class>com.meturing.filter.MyFilter1</filter-class> <init-param> <param-name>realname</param-name> <param-value>xiaoming</param-value> </init-param> <init-param> <param-name>gender</param-name> <param-value>boy</param-value> </init-param> <init-param> <param-name>age</param-name> <param-value>10</param-value> </init-param> <init-param> <param-name>charset</param-name> <param-value>UTF-8</param-value> </init-param> </filter> \",\"读取初始化参数\",\"public class MyFilter1 implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { // 获取初始化的一些参数 String realname = filterConfig.getInitParameter(\\\"realname\\\"); System.out.println(\\\"realname:\\\"+realname); Enumeration<String> pNames = filterConfig.getInitParameterNames(); while(pNames.hasMoreElements()){ String pName = pNames.nextElement(); System.out.println(pName+\\\":\\\"+filterConfig.getInitParameter(pName)); } } \"]},\"2050\":{\"h\":\"过滤器注解的应用\",\"t\":[\"过滤器注解可以使用 @WebFilter\"]},\"2051\":{\"h\":\"注解的属性\"},\"2052\":{\"h\":\"注解的使用\",\"t\":[\"@WebFilter(urlPatterns = \\\"/myServlet1.do\\\") public class Filter0_MyFilter implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { } @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { System.out.println(\\\"MyFilter0 在过滤请求 \\\"); filterChain.doFilter(servletRequest,servletResponse); System.out.println(\\\"MyFilter0 在过滤响应\\\"); } @Override public void destroy() { } } \",\"@WebFilter(urlPatterns = \\\"/myServlet1.do\\\",initParams = {@WebInitParam(name=\\\"realname\\\",value =\\\"zhangsan\\\"),@WebInitParam(name=\\\"charset\\\",value =\\\"utf-8\\\")}) public class Filter1_MyFilter implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { // 获取初始化的一些参数 String realname = filterConfig.getInitParameter(\\\"realname\\\"); System.out.println(\\\"realname:\\\"+realname); Enumeration<String> pNames = filterConfig.getInitParameterNames(); while(pNames.hasMoreElements()){ String pName = pNames.nextElement(); System.out.println(pName+\\\":\\\"+filterConfig.getInitParameter(pName)); } } @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { System.out.println(\\\"MyFilter1 在过滤请求 \\\"); filterChain.doFilter(servletRequest,servletResponse); System.out.println(\\\"MyFilter1 在过滤响应\\\"); } @Override public void destroy() { } } \"]},\"2053\":{\"h\":\"过滤器的应用案例\"},\"2054\":{\"h\":\"POST乱码处理\",\"t\":[\"我们使用过滤器的特性,对所有的请求进行过滤,统一设置他的编码格式\"]},\"2055\":{\"h\":\"前端资源 - login.jsp\",\"t\":[\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>$Title%sSourceCode%lt;/title> </head> <body> please login ... ... <br/> <form action=\\\"loginController.do\\\" method=\\\"post\\\"> 用户名:<input type=\\\"text\\\" name=\\\"user\\\"> <br/> 密码:<input type=\\\"password\\\" name=\\\"pwd\\\"><br/> <input type=\\\"submit\\\" value=\\\"提交\\\"> </form> </body> </html> \"]},\"2056\":{\"h\":\"准备servlet - LoginController\",\"t\":[\"@WebServlet(urlPatterns = \\\"/loginController.do\\\") public class LoginController extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 获取用户名和密码 String user = req.getParameter(\\\"user\\\"); String pwd = req.getParameter(\\\"pwd\\\"); System.out.println(user); System.out.println(pwd); } } \"]},\"2057\":{\"h\":\"准备过滤器\",\"t\":[\"public class Filter0_EncodingFilter implements Filter { private String charset; @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { servletRequest.setCharacterEncoding(charset); // 放行 filterChain.doFilter(servletRequest, servletResponse); } @Override public void init(FilterConfig filterConfig) throws ServletException { charset = filterConfig.getInitParameter(\\\"charset\\\"); } @Override public void destroy() { } } \"]},\"2058\":{\"h\":\"配置过滤器\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <filter> <filter-name>encodingFilter</filter-name> <filter-class>com.meturing.filter.Filter0_EncodingFilter</filter-class> <init-param> <param-name>charset</param-name> <param-value>UTF-8</param-value> </init-param> </filter> <filter-mapping> <filter-name>encodingFilter</filter-name> <url-pattern>*.do</url-pattern> </filter-mapping> </web-app> \"]},\"2059\":{\"h\":\"登录验证\",\"t\":[\"通过过滤器控制,只有登录过之后可以反复进入welcome.jsp欢迎页,如果没有登录,提示用户进入登录页进行登录操作\"]},\"2060\":{\"h\":\"准备静态资源\",\"t\":[\"login.jsp\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>$Title%sSourceCode%lt;/title> </head> <body> <img src=\\\"static/img/logo.png\\\"> please login ... ... <br/> <form action=\\\"loginController.do\\\" method=\\\"post\\\"> 用户名:<input type=\\\"text\\\" name=\\\"user\\\"> <br/> 密码:<input type=\\\"password\\\" name=\\\"pwd\\\"><br/> <input type=\\\"submit\\\" value=\\\"提交\\\"> </form> </body> </html> \",\"welcome.jsp\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <img src=\\\"static/img/logo.png\\\"> 欢迎${user.username}登陆!!! </body> </html> \",\"aaa.jsp\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> this is page aaa </body> </html> \"]},\"2061\":{\"h\":\"准备实体类\",\"t\":[\"public class User implements Serializable { private String username; private String password; @Override public String toString() { return \\\"User{\\\" + \\\"username='\\\" + username + '\\\\'' + \\\", password='\\\" + password + '\\\\'' + '}'; } public User() { } public User(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } \"]},\"2062\":{\"h\":\"准备Servlet\",\"t\":[\"@WebServlet(urlPatterns = \\\"/loginController.do\\\") public class LoginController extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 获取用户名和密码 String username = req.getParameter(\\\"user\\\"); String password = req.getParameter(\\\"pwd\\\"); System.out.println(username); System.out.println(password); // 链接数据库校验登录 // 登录成功,将用户信息放入Session域 User user =new User(username,password); req.getSession().setAttribute(\\\"user\\\", user); // 跳转到欢迎页 resp.sendRedirect(\\\"welcome.jsp\\\"); } } \"]},\"2063\":{\"h\":\"准备过滤器\",\"t\":[\"@WebFilter(urlPatterns = \\\"/*\\\")// 任何资源都要进行过滤, public class Filter1_LoginFilter implements Filter { @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { HttpServletRequest req=(HttpServletRequest)servletRequest; HttpServletResponse resp=(HttpServletResponse) servletResponse; //无论是否登录过,都要放行的资源 登录页 登录校验Controller 和一些静态资源 String requestURI = req.getRequestURI(); System.out.println(requestURI); if(requestURI.contains(\\\"login.jsp\\\")|| requestURI.contains(\\\"loginController.do\\\")|| requestURI.contains(\\\"/static/\\\")){ // 直接放行 filterChain.doFilter(req,resp); // 后续代码不再执行 return; } // 需要登录之后才能访问的资源,如果没登录,重定向到login.jsp上,提示用户进行登录 HttpSession session = req.getSession(); Object user = session.getAttribute(\\\"user\\\"); if(null != user){// 如果登录过 放行 filterChain.doFilter(req,resp); }else{// 没有登录过,跳转至登录页 resp.sendRedirect(\\\"login.jsp\\\"); } } @Override public void init(FilterConfig filterConfig) throws ServletException { } @Override public void destroy() { } } \"]},\"2064\":{\"h\":\"初识监听器\"},\"2065\":{\"h\":\"了解监听器\"},\"2066\":{\"h\":\"什么是监听器\",\"t\":[\"类似于前端的事件绑定,java中的监听器用于监听web应用中某些对象、信息的创建、销毁、增加，修改，删除等动作的发生，然后作出相应的响应处理。\",\"当范围对象的状态发生变化的时候，服务器自动调用监听器对象中的方法。常用于统计在线人数和在线用户，系统加载时进行信息初始化，统计网站的访问量等等。\"]},\"2067\":{\"h\":\"监听器的分类\"},\"2068\":{\"h\":\"按监听的对象划分\",\"t\":[\"ServletContext对象监听器\",\"HttpSession对象监听器\",\"ServletRequest对象监听器\"]},\"2069\":{\"h\":\"按监听的事件划分\",\"t\":[\"对象自身的创建和销毁的监听器\",\"对象中属性的创建和消除的监听器\",\"session中的某个对象的状态变化的监听器\"]},\"2070\":{\"h\":\"监听器有哪些\",\"t\":[\"java中一共给我们提供了八个监听器接口,分别用于监听三个域对象,每个监听器都有专门监听的事件\"]},\"2071\":{\"h\":\"Reqest域监听器\",\"t\":[\"ServletRequestListener (处理request对象创建和销毁) ServleRequestAttributeListener (处理域对象中的数据添加 替换 删除) \"]},\"2072\":{\"h\":\"Session域监听器\",\"t\":[\"HttpSessionListener (处理session对象创建和销毁) HttpSessionAttributeListener (处理session域对象中的数据添加 修改 删除) HttpSessionBindingListener (处理session对象监听器绑定和解绑定接口) HttpSessionActivationListener (处理session对象钝化和活化状态接口) \"]},\"2073\":{\"h\":\"Application 域监听器\",\"t\":[\"ServletContextListener (处理application对象创建和销毁) ServletContextAttributeListener (处理application域对象中的数据添加 修改 删除) \"]},\"2074\":{\"h\":\"监听器的使用\",\"t\":[\"定义监听器,根据需求实现对应接口\",\"在web.xml中配置监听器,让监听器工作\"]},\"2075\":{\"h\":\"Requet域监听器\",\"t\":[\"Requet域共有两个监听器接口,分别是 : ServletRequestListenerServleRequestAttributeListener\",\"配置监听器,使用web.xml 或者通过@WebListener注解都可以\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <listener> <listener-class>com.meturing.listener.MyRequestListener</listener-class> </listener> </web-app> \",\"准备Servlet\",\"@WebServlet(urlPatterns = \\\"/myServlet3.do\\\") public class MyServlet3 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { req.setAttribute(\\\"name\\\", \\\"zhangsan\\\"); req.setAttribute(\\\"name\\\", \\\"lisi\\\"); req.removeAttribute(\\\"name\\\"); } } \"]},\"2076\":{\"h\":\"ServletRequestListener\",\"t\":[\"requestDestroyed: 监听HttpServletRequest对象的销毁 项目中任何一个Request对象的销毁都会触发该方法的执行requestInitialized:监听HttpServletRequest对象的创建并初始化 项目中任何一个Request对象的创建并初始化都会触发该方法的执行\",\"public class MyRequestListener implements ServletRequestListener{ @Override public void requestDestroyed(ServletRequestEvent sre) { // 监听HttpServletRequest对象的销毁 项目中任何一个Request对象的销毁都会触发该方法的执行 ServletRequest servletRequest = sre.getServletRequest(); System.out.println(\\\"request\\\"+servletRequest.hashCode()+\\\"对象销毁了\\\"); } @Override public void requestInitialized(ServletRequestEvent sre) { // 监听HttpServletRequest对象的创建并初始化 项目中任何一个Request对象的创建并初始化都会触发该方法的执行 ServletRequest servletRequest = sre.getServletRequest(); System.out.println(\\\"request\\\"+servletRequest.hashCode()+\\\"对象初始化\\\"); } } \"]},\"2077\":{\"h\":\"ServleRequestAttributeListener\",\"t\":[\"attributeAdded:任何一个Request对象中调用 setAttribute方法增加了数据都会触发该方法attributeRemoved:任何一个Request对象中调用 removeAttribute方法移除了数据都会触发该方法attributeReplaced:任何一个Request对象中调用 setAttribute方法修改了数据都会触发该方法\",\"public class MyRequestListener implements ServletRequestAttributeListener { @Override public void attributeAdded(ServletRequestAttributeEvent srae) { // 任何一个Request对象中调用 setAttribute方法增加了数据都会触发该方法 ServletRequest servletRequest = srae.getServletRequest(); String name = srae.getName(); Object value = srae.getValue(); System.out.println(\\\"request\\\"+servletRequest.hashCode()+\\\"对象增加了数据:\\\"+name+\\\"=\\\"+value); } @Override public void attributeRemoved(ServletRequestAttributeEvent srae) { // 任何一个Request对象中调用 removeAttribute方法移除了数据都会触发该方法 ServletRequest servletRequest = srae.getServletRequest(); String name = srae.getName(); Object value = srae.getValue(); System.out.println(\\\"request\\\"+servletRequest.hashCode()+\\\"对象删除了数据:\\\"+name+\\\"=\\\"+value); } @Override public void attributeReplaced(ServletRequestAttributeEvent srae) { // 任何一个Request对象中调用 setAttribute方法修改了数据都会触发该方法 ServletRequest servletRequest = srae.getServletRequest(); String name = srae.getName(); Object value = srae.getValue(); Object newValue=servletRequest.getAttribute(name); System.out.println(\\\"request\\\"+servletRequest.hashCode()+\\\"对象增修改了数据:\\\"+name+\\\"=\\\"+value+\\\"设置为:\\\"+newValue); } } \"]},\"2078\":{\"h\":\"Session域监听器\",\"t\":[\"Session域共有四个监听器接口,分别是: HttpSessionListenerHttpSessionAttributeListenerHttpSessionBindingListenerHttpSessionActivationListener\"]},\"2079\":{\"h\":\"HttpSessionListener\",\"t\":[\"处理session对象创建和销毁\",\"@WebListener public class MySessionListener implements HttpSessionListener{ @Override public void sessionCreated(HttpSessionEvent se) { System.out.println(\\\"任何一个Session对象创建\\\"); } @Override public void sessionDestroyed(HttpSessionEvent se) { System.out.println(\\\"任何一个Session对象的销毁\\\"); } } \"]},\"2080\":{\"h\":\"HttpSessionAttributeListener\",\"t\":[\"处理session域对象中的数据添加 修改 删除\",\"@WebListener public class MySessionListener implements HttpSessionAttributeListener { @Override public void attributeAdded(HttpSessionBindingEvent se) { System.out.println(\\\"任何一个Session对象中添加了数据\\\"); } @Override public void attributeRemoved(HttpSessionBindingEvent se) { System.out.println(\\\"任何一个Session对象中移除了数据\\\"); } @Override public void attributeReplaced(HttpSessionBindingEvent se) { System.out.println(\\\"任何一个Session对象中修改了数据\\\"); } } \"]},\"2081\":{\"h\":\"HttpSessionBindingListener\",\"t\":[\"处理session对象监听器绑定和解绑定接口\",\"HttpSessionListener 只要在web.xml中配置或者通过@WebListener注解就可以注册监听所有的Session对象. HttpSessionBindingListener 必须要通过setAttribute方法和某个session对象绑定之后,监听单独的某个Session对象\",\"绑定方法\",\"session.setAttribute(\\\"mySessionBindingListener\\\",new MySessionBindingListener()) \",\"手动解绑\",\"session.removeAttribute(\\\"mySessionBindingListener\\\"); \",\"监听器代码\",\"public class MySessionBindingListener implements HttpSessionBindingListener { //绑定后监听 @Override public void valueBound(HttpSessionBindingEvent event) { System.out.println(\\\"监听器和某个session对象绑定了\\\"); } // 解除绑定时触发 @Override public void valueUnbound(HttpSessionBindingEvent event) { } } \",\": 如果发生如下情况,会触发valueUnbound()解绑方法的运行:\",\"session.invalidate(); 让session不可用\",\"session到达最大不活动时间,session对象回收 ;\",\"session.removeAttribute(\\\"mySessionBindingListener\\\");手动解除绑定\"]},\"2082\":{\"h\":\"HttpSessionActivationListener\",\"t\":[\"处理session对象钝化和活化状态接口\",\"public class MySessionActivationListener implements HttpSessionActivationListener { @Override public void sessionWillPassivate(HttpSessionEvent se) { System.out.println(\\\"session即将钝化\\\"); } @Override public void sessionDidActivate(HttpSessionEvent se) { System.out.println(\\\"session活化完毕\\\"); } } \"]},\"2083\":{\"h\":\"Application域监听器\",\"t\":[\"Application域共有两个监听器接口,分别是: ServletContextListenerServletContextAttributeListener\"]},\"2084\":{\"h\":\"ServletContextListener\",\"t\":[\"处理application对象创建和销毁\",\"public class MyApplicationListener implements ServletContextListener { @Override public void contextInitialized(ServletContextEvent sce) { System.out.println(\\\"ServletContext创建并初始化了\\\"); } @Override public void contextDestroyed(ServletContextEvent sce) { System.out.println(\\\"ServletContext销毁了\\\"); } } \"]},\"2085\":{\"h\":\"ServletContextAttributeListener\",\"t\":[\"处理application域对象中的数据添加 修改 删除\",\"public class MyApplicationListener implements ServletContextAttributeListener { @Override public void attributeAdded(ServletContextAttributeEvent scae) { System.out.println(\\\"ServletContext增加了数据\\\"); } @Override public void attributeRemoved(ServletContextAttributeEvent scae) { System.out.println(\\\"ServletContext删除了数据\\\"); } @Override public void attributeReplaced(ServletContextAttributeEvent scae) { System.out.println(\\\"ServletContext修改了数据\\\"); } } \"]},\"2086\":{\"h\":\"监听器开发案例\"},\"2087\":{\"h\":\"记录请求日志\",\"t\":[\"记录每次请求中如下的信息并存储进入日志文件\",\"@WebListener public class RequestLogListener implements ServletRequestListener { private SimpleDateFormat simpleDateFormat=new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); @Override public void requestDestroyed(ServletRequestEvent sre) { } @Override public void requestInitialized(ServletRequestEvent sre) { // 获得请求发出的IP // 获得请求的URL // 获得请求产生的时间 HttpServletRequest request = (HttpServletRequest)sre.getServletRequest(); String remoteHost = request.getRemoteHost(); String requestURL = request.getRequestURL().toString(); String reqquestDate = simpleDateFormat.format(new Date()); // 准备输出流 try { PrintWriter pw =new PrintWriter(new FileOutputStream(new File(\\\"d:/meturing.txt\\\"),true)); pw.println(remoteHost+\\\" \\\"+requestURL+\\\" \\\"+reqquestDate ); pw.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } } } \"]},\"2088\":{\"h\":\"统计实时在线人数\",\"t\":[\"当任何一个账户处于登录状态时,在线统计总数+1,离线时-1 通过session监听器实现计数,但是在线人数要保存在Application域中\",\"监听器代码\",\"@WebListener public class OnLineNumberListener implements HttpSessionListener { @Override public void sessionCreated(HttpSessionEvent se) { // 向application域中 增加一个数字 HttpSession session = se.getSession(); ServletContext application = session.getServletContext(); Object attribute = application.getAttribute(\\\"count\\\"); if(null == attribute){// 第一次放数据 application.setAttribute(\\\"count\\\", 1); }else{ int count =(int)attribute; application.setAttribute(\\\"count\\\", ++count); } } @Override public void sessionDestroyed(HttpSessionEvent se) { // 向application域中 减少一个数字 HttpSession session = se.getSession(); ServletContext application = session.getServletContext(); int count =(int)application.getAttribute(\\\"count\\\"); application.setAttribute(\\\"count\\\", --count); } } \",\"Servlet代码\",\"//登出销毁Session @WebServlet(urlPatterns = \\\"/logout.do\\\") public class Logout extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { HttpSession session = req.getSession(); session.invalidate(); } } \",\"index.jsp\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>$Title%sSourceCode%lt;/title> </head> <body> 当前在线人数为:${applicationScope.count} </body> </html> \"]},\"2089\":{\"h\":\"项目重启免登录\",\"t\":[\"实现重启免登录的关键要素是对于Session的序列化\"]},\"2090\":{\"h\":\"相关概念\",\"t\":[\"首先明白这几个概念:\",\"序列化与反序列 \",\"把对象转化为字节序列的过程称为序列化（保存到硬盘，持久化）\",\"把字节序列转化为对象的过程称为反序列化（存放于内存）\",\"序列化的用途 \",\"把对象的字节序列永久保存到硬盘上，通常放到一个文件中。\",\"把网络传输的对象通过字节序列化，方便传输本节作业\"]},\"2091\":{\"h\":\"实现步骤\"},\"2092\":{\"h\":\"准备工作\",\"t\":[\"在META-INF下创建Context.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <Context> <Manager className=\\\"org.apache.catalina.session.PersistentManager\\\"> <Store className=\\\"org.apache.catalina.session.FileStore\\\" directory=\\\"d:/session\\\"/> </Manager> </Context> \"]},\"2093\":{\"h\":\"准备实体类\",\"t\":[\"对于实体类中必须实现serializable 接口\",\"public class User implements Serializable { private String username; private String pwd; ... \"]},\"2094\":{\"h\":\"登陆页面\",\"t\":[\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>$Title%sSourceCode%lt;/title> </head> <body> <form action=\\\"loginController.do\\\" method=\\\"post\\\"> 用户名:<input type=\\\"text\\\" name=\\\"user\\\"> <br/> 密码:<input type=\\\"password\\\" name=\\\"pwd\\\"><br/> <input type=\\\"submit\\\" value=\\\"提交\\\"> </form> </body> </html> \"]},\"2095\":{\"h\":\"验证登录信息\",\"t\":[\"@WebServlet(\\\"/loginController.do\\\") public class LoginController extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String username = req.getParameter(\\\"user\\\"); String pwd = req.getParameter(\\\"pwd\\\"); // user User user =new User(username,pwd); // session HttpSession session = req.getSession(); session.setAttribute(\\\"user\\\", user); // 绑定监听器 session.setAttribute(\\\"listener\\\", new MySessionActivationListener()); } } \"]},\"2096\":{\"h\":\"校验登录信息\",\"t\":[\"@WebServlet(urlPatterns = \\\"/loginCheckController.do\\\") public class LoginCheckController extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // 判断是否登录 HttpSession session = req.getSession(); Object user = session.getAttribute(\\\"user\\\"); Object listener = session.getAttribute(\\\"listener\\\");// 获得对应的监听器 String message =\\\"\\\"; if(null != user){ message=\\\"您已经登录过\\\"; }else{ message=\\\"您还未登录\\\"; } resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); resp.getWriter().println(message); } } \"]},\"2097\":{\"h\":\"监听钝化和活化\",\"t\":[\"public class MySessionActivationListener implements HttpSessionActivationListener, Serializable { @Override public void sessionWillPassivate(HttpSessionEvent se) { System.out.println(se.getSession().hashCode()+\\\"即将钝化\\\"); } @Override public void sessionDidActivate(HttpSessionEvent se) { System.out.println(se.getSession().hashCode()+\\\"已经活化\\\"); } } \"]},\"2098\":{\"h\":\"测试\",\"t\":[\"先登录,然后请求loginCheckController.do 校验是否登录过\",\"然后重启项目,再起请求loginCheckController.do 校验是否登录过,发现重启后,仍然是登录过的\"]},\"2099\":{\"h\":\"初识Ajax\"},\"2100\":{\"h\":\"同步交互与异步交互\"},\"2101\":{\"h\":\"什么是同步交互\",\"t\":[\"首先用户向HTTP服务器提交一个处理请求。\",\"接着服务器端接收到请求后，按照预先编写好的程序中的业务逻辑进行处理，比如和数据库服务器进行数据信息交换。\",\"最后，服务器对请求进行响应，将结果返回给客户端，返回一个HTML在浏览器中显示，通常会有CSS样式丰富页面的显示效果。\"]},\"2102\":{\"h\":\"优点\",\"t\":[\"可以保留浏览器后退按钮的正常功能。在动态更新页面的情况下，用户可以回到前一个页面状态，浏览器能记下历史记录中的静态页面,用户通常都希望单击后退按钮时，就能够取消他们的前一次操作，同步交互可以实现这个需求.\"]},\"2103\":{\"h\":\"缺点\",\"t\":[\"同步交互的不足之处，会给用户一种不连贯的体验，当服务器处理请求时，用户只能等待状态，页面中的显示内容只能是空白。\",\"因为已经跳转到新的页面,原本在页面上的信息无法保存,好多信息需要重新填写\"]},\"2104\":{\"h\":\"什么是异步交互\",\"t\":[\"指发送一个请求,不需要等待返回,随时可以再发送下一个请求，即不需要等待。\",\"在部分情况下，我们的项目开发中都会优先选择不需要等待的异步交互方式。将用户请求放入消息队列，并反馈给用户，系统迁移程序已经启动，你可以关闭浏览器了。然后程序再慢慢地去写入数据库去。这就是异步。异步不用等所有操作等做完，就响应用户请求。即先响应用户请求，然后慢慢去写数据库，用户体验较好\"]},\"2105\":{\"h\":\"优点\",\"t\":[\"前端用户操作和后台服务器运算可以同时进行,可以充分利用用户操作的间隔时间完成运算\",\"页面没有跳转,响应回来的数据直接就在原页面上,页面原有信息得以保留\"]},\"2106\":{\"h\":\"缺点\",\"t\":[\"可能破坏浏览器后退按钮的正常行为。在动态更新页面的情况下，用户无法回到前一个页面状态，这是因为浏览器仅能记录的始终是当前一个的静态页面。\",\"用户通常都希望单击后退按钮，就能够取消他们的前一次操作，但是在AJAX这样异步的程序，却无法这样做。\"]},\"2107\":{\"h\":\"AJAX\"},\"2108\":{\"h\":\"什么是AJAX\",\"t\":[\"AJAX 即 Asynchronous Javascript And XML （异步 JavaScript和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\"]},\"2109\":{\"h\":\"AJAX关键技术\",\"t\":[\"使用CSS构建用户界面样式,负责页面排版和美工\",\"使用DOM进行动态显示和交互,对页面进行局部修改\",\"使用XMLHttpRequest异步获取数据\",\"使用JavaScript将所有的元素绑定在一起\"]},\"2110\":{\"h\":\"AJAX的特点\",\"t\":[\"异步访问,局部刷新\"]},\"2111\":{\"h\":\"体验原生异步\",\"t\":[\"JS表单验证只能校验格式是否正确,但是无法验证用户名是否已经存在,这个就需要后台程序接受到数据后通过查询才能够完成的,那么这里就非常适用于使用异步方式校验,保证用于数据提交后,业务完成的成功率.提升用于体验感\"]},\"2112\":{\"h\":\"实现步骤\",\"t\":[\"获取XMLHTTPRequest对象 xhr=new XMLHttpRequest(); 打开链接 xhr.open(\\\"GET\\\",\\\"loginServlet?uname=\\\"+uname,true); 设置回调函数 xhr.onreadystatechange=showRnturnInfo; 提交数据 xhr.send(data)\"]},\"2113\":{\"h\":\"相关代码\"},\"2114\":{\"h\":\"页面代码\",\"t\":[\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>$Title%sSourceCode%lt;/title> <script> var xhr ; function checkUname(){ // 获取输入框中的内容 var unameDOM=document.getElementById(\\\"unameI\\\"); var unameText =unameDOM.value; var unameInfoDom =document.getElementById(\\\"unameInfo\\\"); if(null == unameText || unameText == ''){ unameInfoDom.innerText=\\\"用户名不能为空\\\"; return; } unameInfoDom.innerText=\\\"\\\"; // 发送异步请求 // 获取一个 XMLHttpRequest对象 ,对象可以帮助我们发送异步请求 xhr =new XMLHttpRequest(); // 使用xhr对象设置打开链接,设置请求方式和参数xhr.open(\\\"请求方式\\\",\\\"请求的URL\\\",是否使用异步方式); xhr.open(\\\"GET\\\",\\\"unameCheckServlet.do?uname=\\\"+unameText,true); // 设置回调函数 xhr.onreadystatechange=showReturnInfo; // 正式发送请求 xhr.send(null); } function showReturnInfo(){ if(xhr.readyState==4 && xhr.status==200){ var returnInfo =xhr.responseText; var unameInfoDom =document.getElementById(\\\"unameInfo\\\"); unameInfoDom.innerText=returnInfo; } } </script> </head> <body> <form action=\\\"myServlet1.do\\\" > 用户名:<input id=\\\"unameI\\\" type=\\\"text\\\" name=\\\"uname\\\" onblur=\\\"checkUname()\\\"><span id=\\\"unameInfo\\\" style=\\\"color: red\\\"></span><br/> 密码:<input type=\\\"password\\\" name=\\\"pwd\\\"><br/> <input type=\\\"submit\\\"> </form> </body> </html> \"]},\"2115\":{\"h\":\"Servlet代码\",\"t\":[\"@WebServlet(\\\"/unameCheckServlet.do\\\") public class UnameCheckServlet extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String uname = req.getParameter(\\\"uname\\\"); String info=\\\"\\\"; if(\\\"meturing\\\".equals(uname)){ info=\\\"用户名已经占用\\\"; }else{ info=\\\"用户名可用\\\"; } // 向浏览器响应数据 resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); resp.getWriter().print(info); } } \"]},\"2116\":{\"h\":\"存在问题\",\"t\":[\"原生js提交AJAX异步请求代码比较繁琐,处理复杂数据比较麻烦, 后续可以使用jQuery解决\"]},\"2117\":{\"h\":\"数据格式\"},\"2118\":{\"h\":\"AJAX数据格式处理\"},\"2119\":{\"h\":\"响应普通文本数据\",\"t\":[\"如果服务器给我们响应的数据非常简答,那么使用字符串就好了,不需要我们做复杂的处理,后台编码也简单.\"]},\"2120\":{\"h\":\"前端代码\",\"t\":[\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>AJAX数据响应格式</title> <script> var xhr; function getData(){ xhr =new XMLHttpRequest(); xhr.open(\\\"GET\\\",\\\"testDataServlet\\\",true) xhr.onreadystatechange=showData xhr.send(null) } function showData(){ if(xhr.readyState==4&&xhr.status==200) { var text =xhr.responseText; console.info(text) } } </script> </head> <body> <button type=\\\"button\\\" onclick=\\\"getData()\\\" >触发</button> </body> </html> \"]},\"2121\":{\"h\":\"后台代码\",\"t\":[\"@WebServlet(\\\"/testDataServlet\\\") public class TestDataServlet extends HttpServlet { @Override public void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { resp.setContentType(\\\"text/html;charset=UTF-8\\\"); resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.getWriter().print(\\\"普通文本数据\\\"); } } \"]},\"2122\":{\"h\":\"总结\",\"t\":[\"如果响应的数据是一个对象或者对象集合,数据处理起来会非常麻烦,可以使用JSON格式处理\"]},\"2123\":{\"h\":\"JSON的介绍和应用\",\"t\":[\"JSON(JavaScriptObject Notation, JS 对象简谱)是一种轻量级的数据交换格式。它基于ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。\"]},\"2124\":{\"h\":\"优点\",\"t\":[\"轻量级,在这里用它不是为了厉害的功能代码,而是为了实现数据转换\",\"Json 格式既能考虑到前端对象的特点 同时也能兼顾后台对象信息的特点\",\"Json 格式可以被前端直接识别并解析成对象\",\"jQuery形式实现AJAX默认前后端传递数据的格式就是JSON\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> <script> /* * JSON格式创建对象 * {\\\"属性名\\\":\\\"属性值\\\",\\\"属性名\\\":属性值 ... ... } * */ var person ={\\\"name\\\":\\\"zhangsan\\\",\\\"age\\\":10} alert(person.name) alert(person.age) var persons =[{\\\"name\\\":\\\"zhangsan\\\",\\\"age\\\":10},{\\\"name\\\":\\\"lisi\\\",\\\"age\\\":10},{\\\"name\\\":\\\"wangwu\\\",\\\"age\\\":10}]; for (var i = 0; i <persons.length ; i++) { var person =persons[i]; console.log(person.name) console.log(person.age) } var personStr='{\\\"name\\\":\\\"zhangsan\\\",\\\"age\\\":10}';// 是一个字符串 // 可以直接把上面这种格式的字符串直接转换成对象 var p =JSON.parse(personStr); console.log(p.name) console.log(p.age) </script> </head> <body> </body> </html> \"]},\"2125\":{\"h\":\"JSON 与 JS 对象的关系\",\"t\":[\"很多人搞不清楚 JSON 和 JS 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。\",\"var obj = {a: 'Hello', b: 'World'}; //这是一个对象，注意键名也是可以使用引号包裹的 var json = '{\\\"a\\\": \\\"Hello\\\", \\\"b\\\": \\\"World\\\"}'; //这是一个 JSON 字符串，本质是一个字符串 \"]},\"2126\":{\"h\":\"JSON和JS对象互转\",\"t\":[\"要实现从JSON字符串转换为JS对象，使用 JSON.parse()\",\"var obj = JSON.parse('{\\\"a\\\": \\\"Hello\\\", \\\"b\\\": \\\"World\\\"}'); //结果是 {a: 'Hello', b: 'World'} \",\"要实现从JS对象转换为JSON字符串，使用JSON.stringify() 方法\",\"var json = JSON.stringify({a: 'Hello', b: 'World'}); //结果是 '{\\\"a\\\": \\\"Hello\\\", \\\"b\\\": \\\"World\\\"}' \",\"JSON格式字符串,拼接比较麻烦,可以修改toString方法但是就破坏了toString原有的格式,而且一旦字段如果太多修改工作量大,后面可以使用JSON工具类转换\"]},\"2127\":{\"h\":\"GSON工具类的使用\",\"t\":[\"gson工具类中已经给我们封装好了json格式和java对象之间转换的API,我们直接使用即可,再也不用手动去转换项目中\"]},\"2128\":{\"h\":\"使用案例\",\"t\":[\"添加gson-2.2.4.jar\",\"页面代码\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>$Title%sSourceCode%lt;/title> <script> var xhr ; function testData(){ xhr =new XMLHttpRequest(); xhr.open(\\\"GET\\\",\\\"testServlet.do\\\",true); xhr.onreadystatechange=showReturnInfo; xhr.send(null); } function showReturnInfo(){ if(xhr.readyState==4 && xhr.status==200){ var info =xhr.responseText; var users=JSON.parse(info) for (var i = 0; i <users.length ; i++) { var user =users[i]; console.log(user.uname) console.log(user.age) console.log(user.gender) console.log(user.birthday) } } } </script> </head> <body> <input type=\\\"button\\\" value=\\\"测试\\\" onclick=\\\"testData()\\\"> </body> </html> \",\"后台代码\",\"@WebServlet(\\\"/testServlet.do\\\") public class TestServlet extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { User user1 =new User(\\\"晓明1\\\",10,\\\"男\\\",new Date()); User user2 =new User(\\\"晓明2\\\",10,\\\"男\\\",new Date()); User user3 =new User(\\\"晓明3\\\",10,\\\"男\\\",new Date()); User user4 =new User(\\\"晓明4\\\",10,\\\"男\\\",new Date()); User user5 =new User(\\\"晓明5\\\",10,\\\"男\\\",new Date()); ArrayList<User> list =new ArrayList<>(); Collections.addAll(list,user1,user2,user3,user4,user5); // 响应普通文本数据 resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); GsonBuilder gsonBuilder = new GsonBuilder().setDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); Gson gson = gsonBuilder.create(); String str = gson.toJson(list); System.out.println(str); resp.getWriter().print(str); } } \"]},\"2129\":{\"h\":\"JQuery与Ajax实现\",\"t\":[\"每次书写AJAX代码比较繁琐 步骤都是一样的,数据回显使用原生js代码也比较繁琐,可以使用jQuery对上述问题进行优化,jQuery不仅仅对dom操作进行了封装 同时也对AJAX提交和回显已经进行了封装,可大大简化AJAX的操作步骤\"]},\"2130\":{\"h\":\"JQuery.ajax()的简单使用\"},\"2131\":{\"h\":\"经典使用方法\",\"t\":[\"前端代码\",\"<html> <head> <title>$Title%sSourceCode%lt;/title> <meta charset=\\\"UTF-8\\\"/> <script src=\\\"js/jquery.min.js\\\"></script> <script> function checkUname(){ // 获取输入框中的内容 if(null == $(\\\"#unameI\\\").val() || '' == $(\\\"#unameI\\\").val()){ $(\\\"#unameInfo\\\").text(\\\"用户名不能为空\\\"); return; } $(\\\"#unameInfo\\\").text(\\\"\\\"); // 通过jQuery.ajax() 发送异步请求 $.ajax( { type:\\\"GET\\\",// 请求的方式 GET POST url:\\\"unameCheckServlet.do?\\\", // 请求的后台服务的路径 data:\\\"uname=\\\"+$(\\\"#unameI\\\").val(),// 提交的参数 success:function(info){ // 响应成功执行的函数 $(\\\"#unameInfo\\\").text(info) } } ) } </script> </head> <body> <form action=\\\"myServlet1.do\\\" > 用户名:<input id=\\\"unameI\\\" type=\\\"text\\\" name=\\\"uname\\\" onblur=\\\"checkUname()\\\"> <span id=\\\"unameInfo\\\" style=\\\"color: red\\\"></span><br/> 密码:<input type=\\\"password\\\" name=\\\"pwd\\\"><br/> <input type=\\\"submit\\\" value=\\\"提交按钮\\\"> </form> </body> </html> \",\"后端代码\",\"@WebServlet(\\\"/unameCheckServlet.do\\\") public class UnameCheckServlet extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String uname = req.getParameter(\\\"uname\\\"); String info=\\\"\\\"; if(\\\"meturing\\\".equals(uname)){ info=\\\"用户名已经占用\\\"; }else{ info=\\\"用户名可用\\\"; } // 向浏览器响应数据 resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); resp.getWriter().print(info); } } \"]},\"2132\":{\"h\":\"获取JSON格式\",\"t\":[\"前端代码\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> <script src=\\\"js/jquery.min.js\\\"></script> <script> function testAjax(){ // 向后台发送一个ajax异步请求 // 接收响应的数据 $.ajax( { type:\\\"GET\\\", url:\\\"servlet1.do\\\", data:{\\\"username\\\":\\\"zhangsan\\\",\\\"password\\\":\\\"123456\\\"},// key=value&key=value {\\\"属性名\\\":\\\"属性值\\\"} dataType:\\\"json\\\",//以什么格式接收后端响应给我们的信息 success:function(list){ $.each(list,function(i,e){ console.log(e) }) } } ) } </script> </head> <body> <input type=\\\"button\\\" value=\\\"测试\\\" onclick=\\\"testAjax()\\\"> </body> </html> \",\"后端代码\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> <script src=\\\"js/jquery.min.js\\\"></script> <script> function testAjax(){ // 向后台发送一个ajax异步请求 // 接收响应的数据 $.ajax( { type:\\\"GET\\\", url:\\\"servlet1.do\\\", data:{\\\"username\\\":\\\"zhangsan\\\",\\\"password\\\":\\\"123456\\\"},// key=value&key=value {\\\"属性名\\\":\\\"属性值\\\"} dataType:\\\"json\\\",//以什么格式接收后端响应给我们的信息 success:function(list){ $.each(list,function(i,e){ console.log(e) }) } } ) } </script> </head> <body> <input type=\\\"button\\\" value=\\\"测试\\\" onclick=\\\"testAjax()\\\"> </body> </html> \"]},\"2133\":{\"h\":\"JQuery.Ajax()属性说明\"},\"2134\":{\"h\":\"说明\"},\"2135\":{\"h\":\"url\",\"t\":[\"要求为String类型的参数，（默认为当前页地址）发送请求的地址\"]},\"2136\":{\"h\":\"type\",\"t\":[\"要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。\"]},\"2137\":{\"h\":\"timeout\",\"t\":[\"要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。\"]},\"2138\":{\"h\":\"async\",\"t\":[\"要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。\"]},\"2139\":{\"h\":\"cache\",\"t\":[\"要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。\"]},\"2140\":{\"h\":\"data\",\"t\":[\"要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。\",\"防止这种自动转换，可以查看processData选项。对象必须为key/value格式，例如{foo1:\\\"bar1\\\",foo2:\\\"bar2\\\"}转换为&foo1=bar1&foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[\\\"bar1\\\",\\\"bar2\\\"]}转换为&foo=bar1&foo=bar2。\"]},\"2141\":{\"h\":\"dataType\",\"t\":[\"要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：\",\"XML: 返回XML文档，可用JQuery处理。html: 返回纯文本HTML信息；包含的script标签会在插入DOM时执行。script: 返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。json: 返回JSON数据。jsonp: JSONP格式。使用JSONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。text：返回纯文本字符串。\"]},\"2142\":{\"h\":\"beforeSend\",\"t\":[\"要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。\",\"/* XMLHttpRequest对象是惟一的参数。*/ function(XMLHttpRequest){ this; //调用本次ajax请求时传递的options参数 } \"]},\"2143\":{\"h\":\"complete\",\"t\":[\"要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。\",\"function(XMLHttpRequest, textStatus){ this; //调用本次ajax请求时传递的options参数 } \"]},\"2144\":{\"h\":\"success\",\"t\":[\"要求为Function类型的参数，请求成功后调用的回调函数，有两个参数:\",\"由服务器返回，并根据dataType参数进行处理后的数据\",\"描述状态的字符串\",\"function(data, textStatus){ //data可能是xmlDoc、jsonObj、html、text等等 this; //调用本次ajax请求时传递的options参数 } \"]},\"2145\":{\"h\":\"error\",\"t\":[\"要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下：\",\"function(XMLHttpRequest, textStatus, errorThrown){ //通常情况下textStatus和errorThrown只有其中一个包含信息 this; //调用本次ajax请求时传递的options参数 } \"]},\"2146\":{\"h\":\"contentType\",\"t\":[\"要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为\\\"application/x-www-form-urlencoded\\\"。该默认值适合大多数应用场合。\"]},\"2147\":{\"h\":\"dataFilter\",\"t\":[\"要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。\",\"function(data, type){ //返回处理后的数据 return data; } \"]},\"2148\":{\"h\":\"global\",\"t\":[\"要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件。\"]},\"2149\":{\"h\":\"ifModified\",\"t\":[\"要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。\"]},\"2150\":{\"h\":\"jsonp\",\"t\":[\"要求为String类型的参数，在一个jsonp请求中重写回调函数的名字。该值用来替代在\\\"callback=?\\\"这种GET或POST请求中URL参数里的\\\"callback\\\"部分，例如{jsonp:'onJsonPLoad'}会导致将\\\"onJsonPLoad=?\\\"传给服务器。\"]},\"2151\":{\"h\":\"username\",\"t\":[\"要求为String类型的参数，用于响应HTTP访问认证请求的用户名。\"]},\"2152\":{\"h\":\"password\",\"t\":[\"要求为String类型的参数，用于响应HTTP访问认证请求的密码\"]},\"2153\":{\"h\":\"processData\",\"t\":[\"要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型\\\"application/x-www-form-urlencoded\\\"。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。\"]},\"2154\":{\"h\":\"scriptCharset\",\"t\":[\"要求为String类型的参数，只有当请求时dataType为\\\"jsonp\\\"或者\\\"script\\\"，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。\"]},\"2155\":{\"h\":\"具体代码说明\",\"t\":[\"<script> function testAjax(){ $.ajax({ url:\\\"servlet1\\\", /*post get 部分浏览器可使用put delete*/ type:\\\"get\\\", /*请求超时的时间设置*/ timeout:2000, /*是否发送异步请求,默认值为true,如需同步请求,改为false*/ async:true, /*是否从浏览器的缓存中加载信息,默认为true,false则不读取浏览器缓存*/ cache:true, /*向服务器发送的数据,可以是key/value格式,也可以是对象格式 * get方式下,会将信息附加在url后,如果数据不是字符串,会转换成字符串格式 * */ data:{username:\\\"bjmeturing\\\",password:\\\"bjmeturing\\\"}, /* * 默认值为true 默认情况下,发送的数据将被转换为对象以配合 * content-type:application/x-www-form-urlencoded * 如果发送信息不希望被转换,设置为false即可 * */ proccessData:true, /*发送到服务器的数据为String类型时,默认值为 * application/x-www-form-urlencoded * 该值适合大多数应用场景 * */ contentType:\\\"application/x-www-form-urlencoded\\\", /* * 预期服务器返回值类型, * 如果不指定 jQuery根据http响应mime信息返回xml或者text * 并作为返回值传递,可选类型如下 * xml 返回xml数据(基本淘汰) * html:返回纯文本HTML信息 * script:返回JS脚本, * json:返回json数据 * jsonp:jsonp格式 * text:返回纯文本,也是默认格式 * */ dataType:\\\"json\\\", /* * 指定跨域回调函数名 * */ //jsonp:\\\"fun1\\\", /*只有当请求参数为dataType为jsonp或者script,并且是get方式请求时 * 才能强制修改字符集,通常在跨域编码不同时使用 * */ // scriptCharset:\\\"utf-8\\\", beforeSend:function(XMLHttpRequest){ /* * 请求发送前可以通过该方法修改XMLHttpRequest对象函数 * 如听见请求头 * 如果该方法返回false,则会取消ajax请求 * */ }, success:function(data,textStatus){ /* *一般请求成功后会调用的函数,有两个可选参数 * data,数据 根据dataType的配置处理之后的数据 可能是xml text json 等 * testStatus ,描述响应状态的字符串 * */ }, error:function(XMLHttpRequest,textStatus,errorThrown){ /* * 请求失败时调用的函数,可选参数有 * XMLHttpRequest对象 * 错误信息 * 捕获的异常对象 * */ }, complete:function(XMLHttpRequest,textStatus){ /* * 无论请求是否成功都睡调用的回调函数 * 可选参数有 * XMLHttpRequest对象 * textStatus 描述成功请求的类型的字符串 * */ }, dataFilter:function(data,type){ /* * 数据过滤方法 * 给Ajax返回的原始数据进行预处理的函数。 * 提供data和type两个参数。 * data是Ajax返回的原始数据， * type是调用jQuery.ajax时提供的dataType参数。 * 函数返回的值将由jQuery进一步处理 * */ } }) } </script> \",\"ajax异步提交的可选属性和方法较多,实际研发我们没必要写这么多,一般可以使用默认值的属性就可以省略不写,一些业务逻辑或者功能上不需要的方法也可以省略不写,由于属性太多,针对于一些特殊情况,jQuery也给我们提供了一些专用的方法,这样可以简化$.ajax的写法,每一种简化写法都相当于已经指定了$.ajax一些属性的值.\"]},\"2156\":{\"h\":\"jQuery实现AJAX的其他写法\"},\"2157\":{\"h\":\"$.load()\",\"t\":[\"jQuery load() 方法是简单但强大的 AJAX 方法，load() 方法从服务器加载数据，并把返回的数据放入被选元素中。默认使用 GET 方式 - 传递附加参数时自动转换为 POST 方式,\"]},\"2158\":{\"h\":\"语法\",\"t\":[\"$(selector).load(URL,data,callback); //url: URL地址 //data:待发送参数 //callback:载入成功时回调函数。 \"]},\"2159\":{\"h\":\"测试代码\",\"t\":[\"第一个页面\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> <script src=\\\"js/jquery.min.js\\\"></script> <script> function testLoad(){ //$(\\\"#d1\\\").load(\\\"servlet2.do\\\",\\\"username=aaa&password=bbb\\\",function(){alert(\\\"响应结束\\\")}) $(\\\"#d1\\\").load(\\\"loadPage.html #a\\\") } </script> </head> <body> <div id=\\\"d1\\\" style=\\\"width: 100px;height: 100px;border: 1px solid black\\\"> </div> <input type=\\\"button\\\" value=\\\"测试\\\" onclick=\\\"testLoad()\\\"> </body> </html> \",\"第二个页面\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> </head> <body> <div id=\\\"a\\\"> <li>JAVA</li> <li>HTML</li> <li>CSS</li> <li>Mysql</li> <li>python</li> </div> </body> </html> \",\"后端代码\",\"@WebServlet(\\\"/servlet2.do\\\") public class Servlet2 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String username = req.getParameter(\\\"username\\\"); String password = req.getParameter(\\\"password\\\"); System.out.println(username); System.out.println(password); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.getWriter().print(\\\"<h1>hello</h1>\\\"); } } \"]},\"2160\":{\"h\":\"$.get()\",\"t\":[\"这是一个简单的 GET 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用$.ajax。\"]},\"2161\":{\"h\":\"语法\",\"t\":[\"$.get(url,[data],[callback],[type]) //url: URL地址 //data:待发送参数 //callback:载入成功时回调函数 //type:返回内容格式，xml, html, script, json, text, _default \",\"该函数是简写的 Ajax 函数，等价于\",\"$.ajax({ type: 'GET', url: url, data: data, success: success, dataType: dataType }); \"]},\"2162\":{\"h\":\"$.getJSON()\",\"t\":[\"JSON是一种较为理想的数据传输格式，它能够很好的融合与JavaScript或其他宿主语言，并且可以被JS直接使用。使用JSON相比传统的通过 GET、POST直接发送“裸体”数据，在结构上更为合理，也更为安全。至于jQuery的getJSON()函数，只是设置了JSON参数的ajax()函数的一个简化版本。\"]},\"2163\":{\"h\":\"语法\",\"t\":[\"$.getJSON( url, //请求URL [data], //传参，可选参数 [callback] //回调函数，可选参数 ); \",\"该函数是简写的 Ajax 函数，等价于\",\"$.ajax({ url: url, data: data, success: callback, dataType: json }); \",\"仅仅是等效于上述函数,但是除此之外这个函数也是可以跨域使用的，相比get()、post()有一定优势。另外这个函数可以通过把请求url写 成\\\"myurl?callback=X\\\"这种格式，让程序执行回调函数X。\",\"注意:$.getJSON是以GET方式提交数据，如果需要提交很大的数据量，可选$.post\"]},\"2164\":{\"h\":\"$.post()\",\"t\":[\"这是一个简单的 POST 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用$.ajax。\"]},\"2165\":{\"h\":\"语法\",\"t\":[\"$.post(url,[data],[callback],[type]) //url: URL地址 //data:待发送参数 //callback:载入成功时回调函数 //type:返回内容格式，xml, html, script, json, text, _default \",\"该函数是简写的 Ajax 函数，等价于\",\"$.ajax({ type:'POST', url: url, data: data, success: success, dataType: dataType }); \"]},\"2166\":{\"h\":\"测试代码\",\"t\":[\"前端代码\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> <script src=\\\"js/jquery.min.js\\\"></script> <script> function testAjax(){ $.get( \\\"servlet1.do\\\", {\\\"username\\\":\\\"zhangsan\\\",\\\"password\\\":\\\"123456\\\"}, function(list){ $.each(list,function(i,e){ console.log(e) }) }, \\\"json\\\") console.log(\\\"------------------------------\\\") $.getJSON( \\\"servlet1.do\\\", {\\\"username\\\":\\\"zhangsan\\\",\\\"password\\\":\\\"123456\\\"}, function(list){ $.each(list,function(i,e){ console.log(e) }) }) console.log(\\\"------------------------------\\\") $.post( \\\"servlet1.do\\\", {\\\"username\\\":\\\"zhangsan\\\",\\\"password\\\":\\\"123456\\\"}, function(list){ $.each(list,function(i,e){ console.log(e) }) }, \\\"json\\\") } </script> </head> <body> <input type=\\\"button\\\" value=\\\"测试\\\" onclick=\\\"testAjax()\\\"> </body> </html> \",\"后端代码\",\"@WebServlet(\\\"/servlet1.do\\\") public class Servlet1 extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String username = req.getParameter(\\\"username\\\"); String password = req.getParameter(\\\"password\\\"); System.out.println(username); System.out.println(password); Student stu1=new Student(\\\"小黑\\\",\\\"男\\\",10,new Date()); Student stu2=new Student(\\\"小白\\\",\\\"男\\\",10,new Date()); Student stu3=new Student(\\\"小黄\\\",\\\"男\\\",10,new Date()); Student stu4=new Student(\\\"小花\\\",\\\"男\\\",10,new Date()); ArrayList<Student> list =new ArrayList<>(); Collections.addAll(list,stu1,stu2,stu3,stu4); GsonBuilder gb =new GsonBuilder(); gb.setDateFormat(\\\"yyyy-MM-dd\\\"); Gson gson = gb.create(); String json = gson.toJson(list); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.getWriter().print(json); } } \"]},\"2167\":{\"h\":\"Jsonp跨域处理\"},\"2168\":{\"h\":\"什么是跨域\",\"t\":[\"出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）\",\"本地路径地址：http://127.0.0.1:8080/meturing/index.jsp\",\"https://127.0.0.1:8080/meturing/index.jsp 协议不一样http://192.168.24.11:8080/meturing/index.jsp IP不一致http://127.0.0.1:8888/meturing/index.jsp端口不一致http://localhost:8080/meturing/index.jsp IP不一致\"]},\"2169\":{\"h\":\"测试跨域限制\",\"t\":[\"前端代码\",\"<html> <head> <title>$Title%sSourceCode%lt;/title> <meta charset=\\\"UTF-8\\\"/> <script src=\\\"js/jquery.min.js\\\"></script> <script> function checkUname(){ // 获取输入框中的内容 if(null == $(\\\"#unameI\\\").val() || '' == $(\\\"#unameI\\\").val()){ $(\\\"#unameInfo\\\").text(\\\"用户名不能为空\\\"); return; } $(\\\"#unameInfo\\\").text(\\\"\\\"); // 通过jQuery.ajax() 发送异步请求 $.ajax( { type:\\\"GET\\\",// 请求的方式 GET POST url:\\\"http://localhost:8080/ajaxDemo3_war_exploded/unameCheckServlet.do?\\\", // 请求的后台服务的路径 data:\\\"uname=\\\"+$(\\\"#unameI\\\").val(),// 提交的参数 success:function(info){ // 响应成功执行的函数 $(\\\"#unameInfo\\\").text(info) } } ) } </script> </head> <body> <form action=\\\"myServlet1.do\\\" > 用户名:<input id=\\\"unameI\\\" type=\\\"text\\\" name=\\\"uname\\\" onblur=\\\"checkUname()\\\"> <span id=\\\"unameInfo\\\" style=\\\"color: red\\\"></span><br/> 密码:<input type=\\\"password\\\" name=\\\"pwd\\\"><br/> <input type=\\\"submit\\\" value=\\\"提交按钮\\\"> </form> </body> </html> \",\"浏览器请求该资源的地址是:http://127.0.0.1:8020/testa/index.html 但是其内部ajax请求的资源的是:http://localhost:8080/ajaxDemo3_war_exploded/unameCheckServlet.do? \",\"二者端口号和IP其实是不一致的,这就受到同源策略的控制\"]},\"2170\":{\"h\":\"jsonp实现跨域请求\",\"t\":[\"我们发现Web页面上调用js文件时则不受是否跨域的影响,拥有”src”这个属性的标签都却拥有跨域的能力，比如<\\\\script>、<\\\\img>、<\\\\iframe>。那么跨域访问数据就有了一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理。就好比使用一个<script>,让其src属性指向我们要访问的跨域资源,然后以接收js文件的形式接收数据\",\"通过:dataType:'jsonp'属性实现跨域请求通过 jsonp:'callback',属性简化回调函数处理\",\"通过 jsonp:’callback’,实现自动处理回调函数名,相当于在url地址栏最后后拼接一个callback=函数名,后台自动根据这个函数名处理JS脚本,jQuery也会根据这函数名自动在前端处理回调函数,这样我们直接在success方法中接收返回的数据即可,可以不用自己去自己定义回调函数.后台获取参数时,参数名要要和jsonp:后面的函数名保持一致\",\"<html> <head> <title>$Title%sSourceCode%lt;/title> <meta charset=\\\"UTF-8\\\"/> <script src=\\\"http://localhost:8080/ajaxDemo3_war_exploded/js/jquery.min.js\\\"></script> <script> function checkUname(){ // 获取输入框中的内容 if(null == $(\\\"#unameI\\\").val() || '' == $(\\\"#unameI\\\").val()){ $(\\\"#unameInfo\\\").text(\\\"用户名不能为空\\\"); return; } $(\\\"#unameInfo\\\").text(\\\"\\\"); // 通过jQuery.ajax() 发送异步请求 $.ajax( { type:\\\"GET\\\",// 请求的方式 GET POST url:\\\"http://localhost:8080/ajaxDemo3_war_exploded/unameCheckServlet.do?\\\", // 请求的后台服务的路径 data:{uname:$(\\\"#unameI\\\").val()},// 提交的参数 dataType:\\\"jsonp\\\", jsonp:\\\"aaa\\\", success:function(info){ $(\\\"#unameInfo\\\").text(info) } } ) } </script> </head> <body> <form action=\\\"myServlet1.do\\\" > 用户名:<input id=\\\"unameI\\\" type=\\\"text\\\" name=\\\"uname\\\" onblur=\\\"checkUname()\\\"> <span id=\\\"unameInfo\\\" style=\\\"color: red\\\"></span><br/> 密码:<input type=\\\"password\\\" name=\\\"pwd\\\"><br/> <input type=\\\"submit\\\" value=\\\"提交按钮\\\"> </form> </body> </html> \",\"后端代码\",\"@WebServlet(\\\"/unameCheckServlet.do\\\") public class UnameCheckServlet extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String uname = req.getParameter(\\\"uname\\\"); String callBack = req.getParameter(\\\"aaa\\\"); System.out.println(uname); String info=\\\"\\\"; if(\\\"meturing\\\".equals(uname)){ info=\\\"用户名已经占用\\\"; }else{ info=\\\"用户名可用\\\"; } // 向浏览器响应数据 resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/javaScript;charset=UTF-8\\\"); resp.getWriter().print(callBack+\\\"('\\\"+info+\\\"')\\\"); } } \"]},\"2171\":{\"h\":\"通过getJson方实现跨域请求\",\"t\":[\"getJSON方法是可以实现跨域请求的,在用该方法实现跨域请求时,在传递参数上应该注意在url后拼接一个jsoncallback=?,jQuery会自动替换?为正确的回调函数名,我们就可以不用单独定义回调函数了\",\"前端代码\",\"<html> <head> <title>$Title%sSourceCode%lt;/title> <meta charset=\\\"UTF-8\\\"/> <script src=\\\"http://localhost:8080/ajaxDemo3_war_exploded/js/jquery.min.js\\\"></script> <script> function checkUname(){ // 获取输入框中的内容 if(null == $(\\\"#unameI\\\").val() || '' == $(\\\"#unameI\\\").val()){ $(\\\"#unameInfo\\\").text(\\\"用户名不能为空\\\"); return; } $(\\\"#unameInfo\\\").text(\\\"\\\"); $.getJSON( \\\"http://localhost:8080/ajaxDemo3_war_exploded/unameCheckServlet.do?jsoncallback=?\\\", {uname:$(\\\"#unameI\\\").val()}, function(info){ $(\\\"#unameInfo\\\").text(info) } ) } </script> </head> <body> <form action=\\\"myServlet1.do\\\" > 用户名:<input id=\\\"unameI\\\" type=\\\"text\\\" name=\\\"uname\\\" onblur=\\\"checkUname()\\\"> <span id=\\\"unameInfo\\\" style=\\\"color: red\\\"></span><br/> 密码:<input type=\\\"password\\\" name=\\\"pwd\\\"><br/> <input type=\\\"submit\\\" value=\\\"提交按钮\\\"> </form> </body> </html> \",\"后端代码\",\"@WebServlet(\\\"/unameCheckServlet.do\\\") public class UnameCheckServlet extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String uname = req.getParameter(\\\"uname\\\"); String callBack = req.getParameter(\\\"jsoncallback\\\"); System.out.println(uname); String info=\\\"\\\"; if(\\\"meturing\\\".equals(uname)){ info=\\\"用户名已经占用\\\"; }else{ info=\\\"用户名可用\\\"; } // 向浏览器响应数据 resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/javaScript;charset=UTF-8\\\"); resp.getWriter().print(callBack+\\\"('\\\"+info+\\\"')\\\"); } } \"]},\"2172\":{\"h\":\"通过过滤器跨域\",\"t\":[\"通过后台代码也可以实现跨域,一般在过滤器中添加如下代码,那么前端在请求时就不用考虑跨域问题了\",\"/*请求地址白名单 *代表所有*/ resp.setHeader(\\\"Access-Control-Allow-Origin\\\", \\\"*\\\"); /*请求方式白名单*/ resp.setHeader(\\\"Access-Control-Allow-Methods\\\", \\\"POST, GET, OPTIONS, DELETE\\\"); resp.setHeader(\\\"Access-Control-Max-Age\\\", \\\"3600\\\"); resp.setHeader(\\\"Access-Control-Allow-Headers\\\", \\\"x-requested-with\\\"); \"]},\"2173\":{\"h\":\"三级联动案例开发\"},\"2174\":{\"h\":\"数据准备\",\"t\":[\"使用china.sql生成area表格\"]},\"2175\":{\"h\":\"项目搭建\"},\"2176\":{\"h\":\"项目代码\",\"t\":[\"前端代码\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>$Title%sSourceCode%lt;/title> <script src=\\\"js/jquery.min.js\\\"></script> <script> $(function(){ // 获取所有的省份信息 showArea(0,\\\"#provience\\\") }) function showArea(val,selectID){ $.ajax({ type:\\\"GET\\\", url:\\\"areaController.do\\\", data:{parentID:val}, dataType:\\\"json\\\", success:function(areas){ // 清除上一次选择省份时,遗留的城市 $(selectID).html('<option>-请选择-</option>'); $.each(areas,function(i,e){ $(selectID).append('<option value=\\\"'+e.areaid+'\\\">'+e.areaname+'</option>') }) if(selectID== \\\"#city\\\"){ $(\\\"#qu\\\").html('<option>-请选择-</option>'); } } }) } </script> </head> <body> 籍贯: <select id=\\\"provience\\\" onchange=\\\"showArea(this.value,'#city')\\\"> <option>-请选择-</option> </select> <select id=\\\"city\\\" onchange=\\\"showArea(this.value,'#qu')\\\"> <option>-请选择-</option> </select> <select id=\\\"qu\\\"> <option>-请选择-</option> </select> </body> </html> \",\"AreaController代码\",\"@WebServlet(\\\"/areaController.do\\\") public class AreaController extends HttpServlet { private AreaService areaService=new AreaServiceImpl(); @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { Integer parentID=0; try { parentID= Integer.parseInt(req.getParameter(\\\"parentID\\\")); } catch (NumberFormatException e) { e.printStackTrace(); } List<Area> areas=areaService.findByParentID(parentID); String json = new Gson().toJson(areas); resp.setCharacterEncoding(\\\"UTF-8\\\"); resp.setContentType(\\\"text/html;charset=UTF-8\\\"); resp.getWriter().print(json); } } \",\"AreaService代码\",\"public class AreaServiceImpl implements AreaService { private AreaDao areaDao =new AreaDaoImpl(); @Override public List<Area> findByParentID(Integer parentID) { List<Area> areas = areaDao.findByParentID(parentID); return areas; } } \",\"AreaDao代码\",\"public class AreaDaoImpl extends BaseDao implements AreaDao { @Override public List<Area> findByParentID(int parentID) { String sql=\\\"select * from area where parentid= ?\\\"; return baseQuery(Area.class, sql, parentID); } } \",\"测试效果\"]},\"2177\":{\"h\":\"MyBatisPlus快速上手\"},\"2178\":{\"h\":\"了解MybatisPlus\",\"t\":[\"MyBatis-Plus (opens new window)（简称 MP）是一个 MyBatis (opens new window) 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。\"]},\"2179\":{\"h\":\"特点\",\"t\":[\"无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑\",\"损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作\",\"强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求\",\"支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错\",\"支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库\",\"支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题\",\"支持 XML 热加载：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动\",\"支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作\",\"支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）\",\"支持关键词自动转义：支持数据库关键词（order、key......）自动转义，还可自定义关键词\",\"内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用\",\"内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询\",\"内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询\",\"内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作\",\"内置 Sql 注入剥离器：支持 Sql 注入剥离，有效预防 Sql 注入攻击\"]},\"2180\":{\"h\":\"入门案例\"},\"2181\":{\"h\":\"准备数据\"},\"2182\":{\"h\":\"表结构\",\"t\":[\"DROP TABLE IF EXISTS user; CREATE TABLE user ( id BIGINT(20) NOT NULL COMMENT '主键ID', name VARCHAR(30) NULL DEFAULT NULL COMMENT '姓名', age INT(11) NULL DEFAULT NULL COMMENT '年龄', email VARCHAR(50) NULL DEFAULT NULL COMMENT '邮箱', PRIMARY KEY (id) ); \"]},\"2183\":{\"h\":\"初始化数据\",\"t\":[\"DELETE FROM user; INSERT INTO user (id, name, age, email) VALUES (1, 'Jone', 18, 'test1@baomidou.com'), (2, 'Jack', 20, 'test2@baomidou.com'), (3, 'Tom', 28, 'test3@baomidou.com'), (4, 'Sandy', 21, 'test4@baomidou.com'), (5, 'Billie', 24, 'test5@baomidou.com'); \"]},\"2184\":{\"h\":\"创建项目环境\"},\"2185\":{\"h\":\"创建SpringBoot项目\",\"t\":[\"使用Spring Initializr快速创建项目\",\"初始化Lombok依赖 与 Spring Web 依赖\"]},\"2186\":{\"h\":\"调整Pom.xml依赖\",\"t\":[\"分别引入:MyBatisPlus的依赖MySQL数据库数据库连接池 Druid\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.6.6</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>com.meturing</groupId> <artifactId>MybatisPlusDemo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>MybatisPlusDemo</name> <description>MybatisPlusDemo</description> <packaging>jar</packaging> <properties> <java.version>8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <!-- 引入MyBatisPlus的依赖 --> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.1</version> </dependency> <!-- 数据库使用MySQL数据库 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> </dependency> <!-- 数据库连接池 Druid --> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.1.14</version> </dependency> <!-- lombok依赖 --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> \"]},\"2187\":{\"h\":\"修改链接文件\",\"t\":[\"然后我们需要在application.properties中配置数据源的相关信息\",\"spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://192.168.1.188:3306/test?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai spring.datasource.username=root spring.datasource.password=root spring.datasource.type=com.alibaba.druid.pool.DruidDataSource \"]},\"2188\":{\"h\":\"修改包扫面路径\",\"t\":[\"们需要在SpringBoot项目的启动类上配置Mapper接口的扫描路径\"]},\"2189\":{\"h\":\"创建案例所需文件\"},\"2190\":{\"h\":\"添加User实体类\",\"t\":[\"@ToString @Data @AllArgsConstructor @NoArgsConstructor public class User { private Long id; private String name; private Integer age; private String email; } \"]},\"2191\":{\"h\":\"创建Mapper接口\",\"t\":[\"在MyBatisPlus中的Mapper接口需要继承BaseMapper.\",\"/** * MyBatisPlus中的Mapper接口继承自BaseMapper，同时指定对应的实体类 */ @Mapper public interface UserMapper extends BaseMapper<User> { } \"]},\"2192\":{\"h\":\"创建测试类\",\"t\":[\"@SpringBootTest class MybatisPlusDemoApplicationTests { @Autowired private UserMapper userMapper; /** * 查询所有 * * @author sqTan * @date 2023/04/18 * */ @Test public void selectUser1() { List<User> users = userMapper.selectList(null); users.forEach(System.out::println); } } \"]},\"2193\":{\"h\":\"指定日志输出\",\"t\":[\"为了便于学习我们可以指定日志的实现StdOutImpl来处理\",\"# 指定日志输出 mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl \"]},\"2194\":{\"h\":\"Mybatis初识\"},\"2195\":{\"h\":\"为什么要使用Mybatis\",\"t\":[\"原生的JDBC使用中,我们存在以下痛点:\",\"编码繁琐\",\"需要我们自己将结果集映射成对象\",\"性能不太好 : 连接池 及 缓存 需要我们自己管理\",\"SQL语句和java代码的耦合度特别高\"]},\"2196\":{\"h\":\"了解Mybatis\",\"t\":[\"MyBatis 本是Apache的一个开源项目iBatis, 2010年这个项目由Apache Software Foundation 迁移到了Google Code，且改名为MyBatis 。2013年11月迁移到GitHub。iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。\",\"MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。 MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。\",\"精简解释：MyBatis是一个半自动ORM框架，其本质是对JDBC的封装。使用MyBatis重点需要程序员编写SQL命令，不需要写一行JDBC代码。\"]},\"2197\":{\"h\":\"什么是框架\",\"t\":[\"框架（Framework）是一个框子——指其约束性，也是一个架子——指其支撑性。是一个基本概念上的结构，用于去解决或者处理复杂的问题。框架这个广泛的定义使用的十分流行，尤其在软件概念。\",\"框架( Framework ) 对于java来说,就是一系列为了解决特定问题而定义的一系列接口和实现类,在组织框架代码时,使用了一系列优秀的设计模式,使代码无论在性能上还是API操作上得到很大提升.框架可以看做是项目开发的半成品,基本的底层操作已经封装完毕,通过框架,程序员可以从底层代码中解脱出来,专注于业务逻辑的完成和性能的优化。 框架规定了你的应用的体系结构。它定义了整体结构，类和对象的分割，各部分的主要责任，类和对象怎么协作，以及控制流程。框架预定义了这些设计参数，以便于应用设计者或实现者能集中精力于应用本身的特定细节。\",\"如果将开发完成的软件比作是一套已经装修完毕的新房，那框架就好比是一套已经修建好的毛坯房。用户直接购买毛坯房，建筑质量和户型合理有保证，还省去了自己建造房屋的时间，一举多得。\",\"在开发过程是使用框架，同样可以保证减少开发时间、降低开发难度，并且还保证设计质量。好比和世界上最优秀的软件工程师是一个项目的，并且他们完成的还是基础、全局的工作。想想是不是很嗨的一件事情。\",\"框架还有一个作用是。莎士比亚说,\\\"一千个观众眼中有一千个哈姆雷特\\\" 即仁者见仁,智者见智.说每个人都会对作品有不同的理解，每个人对待任何事物都有自己的看法，一千个人就有可能有一千种不同的看法1000人心中有1000个哈姆雷特。同样的技术解决同样的问题会产生不同流程和风格的解决方案，而采用一种框架其实就是限制用户必须使用其规定的方案来实现，可以降低程序员之间沟通以及日后维护的成本。\",\"常用的基于JavaEE的三大开源框架，已经从SSH、SSH2过渡到了SSM：SpringMVC、Spring、MyBatis >>> springBoot\",\"总之，框架是一个半成品，已经对基础的代码进行了封装并提供相应的API，开发者在使用框架是直接调用封装好的API可以省去很多代码编写，从而提高工作效率和开发速度。\"]},\"2198\":{\"h\":\"什么是ORM\",\"t\":[\"：需要手动的完成面向对象的Java语言、面向关系的数据库之间数据的转换，代码繁琐无技术含量，影响了开发效率. (查询是需要手动的将结果集的列数据转换为Java对象的属性；而添加操作时需要手动将Java对象的属性转换为数据库表的列字段)\",\"关于面向对象的Java语言、面向关系的数据库之间数据的转换必须要做，问题在于这个转换是否可以不由开发者来做。ORM框架就是专门来做这个问题的，相当于在面向对象语言和关系数据库之间搭建一个桥梁。\",\"ORM，Object-Relationl Mapping，对象关系映射，它的作用是在关系型数据库和对象之间作一个映射，这样我们在具体的操作数据库的时候，只要像平时操作对象一样操作它就可以了，ORM框架会根据映射完成对数据库的操作，就不需要再去和复杂的SQL语句打交道了。\"]},\"2199\":{\"h\":\"什么是持久层\",\"t\":[\"持久（Persistence），即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的数据存储在关系型的数据库中，当然也可以存储在磁盘文件中、XML数据文件中等等。\",\"持久层（Persistence Layer），即专注于实现数据持久化应用领域的某个特定系统的一个逻辑层面，将数据使用者和数据实体相关联。之前使用JDBC访问数据库的DAO层，后面采用MyBatis访问数据库的mapper层，就是持久层。\"]},\"2200\":{\"h\":\"BaseMapper与IService\"},\"2201\":{\"h\":\"BaseMapper简单的CRUD\"},\"2202\":{\"h\":\"查询用户\"},\"2203\":{\"h\":\"查询所有:selectList\",\"t\":[\"@Test public void selectUser1() { List<User> users = userMapper.selectList(null); users.forEach(System.out::println); } \"]},\"2204\":{\"h\":\"根据ID查询:selectById\",\"t\":[\"@Test public void selectUser2() { User user = userMapper.selectById(5L); System.out.println(user); } \"]},\"2205\":{\"h\":\"根据Map查询:selectByMap\",\"t\":[\"@Test public void selectUser3() { HashMap<String, Object> userMap = new HashMap<>(); userMap.put(\\\"age\\\",24); userMap.put(\\\"name\\\",\\\"Billie\\\"); List<User> users = userMapper.selectByMap(userMap); users.forEach(System.out::println); } \"]},\"2206\":{\"h\":\"新增用户 : insert\",\"t\":[\"@Test public void addUser(){ User user = new User(6L,\\\"张三\\\",28,\\\"xxxx@xx.com\\\"); int insertRows = userMapper.insert(user); System.out.println(insertRows); } \"]},\"2207\":{\"h\":\"删除用户\"},\"2208\":{\"h\":\"根据ID单一删除 : deleteById\",\"t\":[\"@Test public void deleteUser1(){ User user = new User(6L,\\\"李四\\\",15,\\\"xxxx@xx.com\\\"); int deleteRows = userMapper.deleteById(user); System.out.println(deleteRows); } \"]},\"2209\":{\"h\":\"根据ID批量删除 : deleteBatchIds\",\"t\":[\"@Test public void deleteUser2(){ int deleteRows = userMapper.deleteBatchIds(Arrays.asList(6L,1648197837407772673L,1648197837445521409L)); System.out.println(deleteRows); } \"]},\"2210\":{\"h\":\"根据Map删除 : deleteByMap\",\"t\":[\"@Test public void deleteUser3(){ HashMap<String, Object> userMap = new HashMap<>(); userMap.put(\\\"age\\\",15); userMap.put(\\\"name\\\",\\\"张三\\\"); int deleteRows = userMapper.deleteByMap(userMap); System.out.println(deleteRows); } \"]},\"2211\":{\"h\":\"修改用户 : updateById\",\"t\":[\"@Test public void updateUser1(){ User user = new User(6L,\\\"李四\\\",15,\\\"xxxx@xx.com\\\"); int updateRows = userMapper.updateById(user); System.out.println(updateRows); } \"]},\"2212\":{\"h\":\"IService接口\"},\"2213\":{\"h\":\"了解IService接口\",\"t\":[\"官网地址：https://baomidou.com/pages/49cc81/#service-crud-%E6%8E%A5%E5%8F%A3\"]},\"2214\":{\"h\":\"为什么要使用IService接口\",\"t\":[\"官网说明：\",\"通用 Service CRUD 封装IService(opens new window)接口，进一步封装 CRUD 采用 get 查询单行 remove 删除 list 查询集合 page 分页 前缀命名方式区分 Mapper 层避免混淆，\",\"泛型 T 为任意实体对象\",\"建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService 继承 Mybatis-Plus 提供的基类\",\"对象 Wrapper 为 条件构造器\",\"在MyBatis-Plus中有一个接口 IService和其实现类 ServiceImpl，封装了常见的业务层逻辑,在使用上更加的灵活\"]},\"2215\":{\"h\":\"构建IService接口环境\"},\"2216\":{\"h\":\"创建UserService接口 继承 IService\",\"t\":[\"要使用MyBatisPlus的Service完成CRUD操作，得继承IService\",\"public interface UserService extends IService<User> { } \"]},\"2217\":{\"h\":\"创建接口实现类 继承 ServiceImpl 实现UserService接口\",\"t\":[\"必须继承ServiceImpl 并且在泛型中指定 对应的Mapper和实体对象\",\"@Service public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService { } \"]},\"2218\":{\"h\":\"IService接口实现的CRUD\",\"t\":[\"通过Service中提供的count方法可以查询总的记录数。get方法，List方法等\"]},\"2219\":{\"h\":\"查询操作\",\"t\":[\"@Autowired @Qualifier(\\\"userServiceImpl\\\") public UserService iUserService; @Test public void testCount(){ long count = iUserService.count(); System.out.println(count); } \"]},\"2220\":{\"h\":\"批量插入\",\"t\":[\"@Autowired @Qualifier(\\\"userServiceImpl\\\") public UserService iUserService; @Test public void batchInserts(){ List<User> users = Arrays.asList(new User(null, \\\"王五\\\", 22, \\\"111@111.com\\\"), new User(null, \\\"赵六\\\", 33, \\\"222@222.com\\\")); boolean b = iUserService.saveBatch(users); System.out.println(b); } \"]},\"2221\":{\"h\":\"常用注解与条件构造器\"},\"2222\":{\"h\":\"常用注解\"},\"2223\":{\"h\":\"指定表名 : @TableName\",\"t\":[\"经过以上的测试，在使用MyBatis-Plus实现基本的CRUD时，我们并没有指定要操作的表，只是在 Mapper接口继承BaseMapper时，设置了泛型User，而操作的表为user表 由此得出结论，MyBatis-Plus在确定操作的表时，由BaseMapper的泛型决定，即实体类型决 定，且默认操作的表名和实体类型的类名一致\",\"如果表名和我们的实体类的名称不一致的话，在执行相关操作的时候会抛出对应的异常，比如数据库的表我们该为T_USER,然后执行查询操作。\"]},\"2224\":{\"h\":\"直接配置\",\"t\":[\"这时我们就可以通过@TableName来解决这个问题。\",\"@ToString @Data @AllArgsConstructor @NoArgsConstructor @TableName(\\\"t_user\\\") public class User { private Long uid; private String uname; private Integer age; private String email; } \"]},\"2225\":{\"h\":\"全局配置\",\"t\":[\"# 配置MyBatis-Plus操作表的默认前缀 mybatis-plus.global-config.db-config.table-prefix=t_ \"]},\"2226\":{\"h\":\"指定主键 : @TableId\",\"t\":[\"我们可以通过@TableId注解来显示的指定哪个属性为主键对应的属性，在前面的例子中默认id就是，如果我们的主键字段不是id，比如uid的话，把实体user中的id改为uid，同时表结构中的id字段也修改为uid字段。我们来看看效果。执行插入操作。\",\"可以看到抛出了一个 Field 'uid' doesn't 的异常，这时我们可以在User实体的uid属性上添加@TableId即可。\",\"@TableId中的value值在实体类中的字段和表结构的字段一致的情况下我们不用添加，但如果不一致，@TableId中的value我们需要设置表结构中的主键字段。 @TableId中还有一个比较重要的属性是Type。Type是用来定义主键的生成策略的。\"]},\"2227\":{\"h\":\"主键策略\",\"t\":[\"配置主键自增得在表结构中的字段要设置自动增长才行\"]},\"2228\":{\"h\":\"直接配置\",\"t\":[\"如果实体类中的字段与数据库一致\",\"@ToString @Data @AllArgsConstructor @NoArgsConstructor @TableName(\\\"t_user\\\") public class User { @TableId(type = IdType.AUTO)//表示主键 分配主键自增 private Long uid; private String uname; private Integer age; private String email; } \",\"如果实体类中的字段与数据库不一致\",\"@ToString @Data @AllArgsConstructor @NoArgsConstructor @TableName(\\\"t_user\\\") public class User { @TableId(value = \\\"id\\\",type = IdType.AUTO)//表示主键 并重新映射到Id字段,分配主键自增 private Long uid; private String uname; private Integer age; private String email; } \"]},\"2229\":{\"h\":\"全局配置\",\"t\":[\"# 主键生成策略 mybatis-plus.global-config.db-config.id-type=auto \"]},\"2230\":{\"h\":\"指定字段 : @TableField\",\"t\":[\"@TableField注解的作用是当实体类中的属性和表结构中的字段名称不一致的情况下来设置对应关系的， 当然，在MyBatis-Plus中针对实体中是userName而表结构中是user_name这种情况会自动帮助我们完成驼峰命名法的转换。\",\"@ToString @Data @AllArgsConstructor @NoArgsConstructor @TableName(\\\"t_user\\\") public class User { @TableId(value = \\\"id\\\",type = IdType.AUTO)//表示主键 并重新映射到Id字段,分配主键自增 private Long uid; @TableField(value = \\\"name\\\")// 表结构中的name属性和name属性对应 private String uname; private Integer age; private String email; } \"]},\"2231\":{\"h\":\"逻辑删除 : @TableLogic\",\"t\":[\"@TableLogic是用来完成 逻辑删除操作的\",\"删除类型\",\"描述\",\"逻辑删除\",\"假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，<br />之后在数据库中仍旧能看到此条数据记录\",\"物理删除\",\"真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据\"]},\"2232\":{\"h\":\"直接配置\"},\"2233\":{\"h\":\"创建逻辑删除字段\",\"t\":[\"先在表中创建一个isDel字段\"]},\"2234\":{\"h\":\"修改实体类\",\"t\":[\"对应的在实体类中添加一个isdel属性\",\"@ToString @Data @AllArgsConstructor @NoArgsConstructor @TableName(\\\"t_user\\\") public class User { @TableId(value = \\\"id\\\",type = IdType.AUTO)//表示主键 并重新映射到Id字段,分配主键自增 private Long uid; @TableField(value = \\\"name\\\")// 表结构中的name属性和name属性对应 private String uname; private Integer age; private String email; @TableLogic(value = \\\"0\\\",delval = \\\"1\\\")//逻辑删除,默认为0 删除后为1 private Integer isdel; } \",\"此时我们发现,Mybatis对于所有的查询都会再条件中拼接: Where isdel = 0\",\"所有的删除都变成了Update语言:\"]},\"2235\":{\"h\":\"全局配置\",\"t\":[\"# 配置逻辑删除 mybatis-plus.global-config.db-config.logic-delete-field=isdel mybatis-plus.global-config.db-config.logic-delete-value=1 mybatis-plus.global-config.db-config.logic-not-delete-value=0 \"]},\"2236\":{\"h\":\"条件构造器\",\"t\":[\"当我们需要对单表的CURD做复杂条件处理的时候我们就需要借助Wrapper接口来处理，也就是通过条件构造器来处理。\"]},\"2237\":{\"h\":\"Wrapper接口\",\"t\":[\"Wrapper接口是条件构造的抽象类，是最顶级的类\",\"对应动作\"]},\"2238\":{\"h\":\"Wrapper的常用API\"},\"2239\":{\"h\":\"ge、gt、le、lt、isNull、isNotNull\",\"t\":[\"UPDATE user SET deleted=1 WHERE deleted=0 AND name IS NULL AND age >= ? AND email IS NOT NULL\",\"@Test public void testDelete() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper .isNull(\\\"name\\\") .ge(\\\"age\\\", 12) .isNotNull(\\\"email\\\"); int result = userMapper.delete(queryWrapper); System.out.println(\\\"delete return count = \\\" + result); } \"]},\"2240\":{\"h\":\"eq、ne\",\"t\":[\"注意：seletOne返回的是一条实体记录，当出现多条时会报错\",\"SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 AND name = ?\",\"@Test public void testSelectOne() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.eq(\\\"name\\\", \\\"Tom\\\"); User user = userMapper.selectOne(queryWrapper); System.out.println(user); } \"]},\"2241\":{\"h\":\"between、notBetween\",\"t\":[\"包含大小边界\",\"SELECT COUNT(1) FROM user WHERE deleted=0 AND age BETWEEN ? AND ?\",\"@Test public void testSelectCount() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.between(\\\"age\\\", 20, 30); Integer count = userMapper.selectCount(queryWrapper); System.out.println(count); } \"]},\"2242\":{\"h\":\"allEq\",\"t\":[\"包含大小边界\",\"SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 AND name = ? AND id = ? AND age = ?\",\"@Test public void testSelectList() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); Map<String, Object> map = new HashMap<>(); map.put(\\\"id\\\", 2); map.put(\\\"name\\\", \\\"Jack\\\"); map.put(\\\"age\\\", 20); queryWrapper.allEq(map); List<User> users = userMapper.selectList(queryWrapper); users.forEach(System.out::println); } \"]},\"2243\":{\"h\":\"like、notLike、likeLeft、likeRight\",\"t\":[\"包含大小边界\",\"SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 AND name NOT LIKE ? AND email LIKE ?\",\"@Test public void testSelectMaps() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper .notLike(\\\"name\\\", \\\"e\\\") .likeRight(\\\"email\\\", \\\"t\\\"); List<Map<String, Object>> maps = userMapper.selectMaps(queryWrapper);//返回值是Map列表 maps.forEach(System.out::println); } \"]},\"2244\":{\"h\":\"in、notIn、inSql、notinSql、exists、notExists\",\"t\":[\"in、notIn：\",\"notIn(\\\"age\\\",{1,2,3})--->age not in (1,2,3)\",\"notIn(\\\"age\\\", 1, 2, 3)--->age not in (1,2,3)\",\"inSql、notinSql：可以实现子查询\",\"例: inSql(\\\"age\\\", \\\"1,2,3,4,5,6\\\")--->age in (1,2,3,4,5,6)\",\"例: inSql(\\\"id\\\", \\\"select id from table where id < 3\\\")--->id in (select id from table where id < 3)\",\"SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 AND id IN (select id from user where id < 3)\",\"@Test public void testSelectObjs() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); //queryWrapper.in(\\\"id\\\", 1, 2, 3); queryWrapper.inSql(\\\"id\\\", \\\"select id from user where id < 3\\\"); List<Object> objects = userMapper.selectObjs(queryWrapper);//返回值是Object列表 objects.forEach(System.out::println); } \"]},\"2245\":{\"h\":\"or、and\",\"t\":[\"不调用or则默认为使用 and 连\",\"UPDATE user SET name=?, age=?, update_time=? WHERE deleted=0 AND name LIKE ? OR age BETWEEN ? AND ?\",\"@Test public void testUpdate1() { //修改值 User user = new User(); user.setAge(99); user.setName(\\\"Andy\\\"); //修改条件 UpdateWrapper<User> userUpdateWrapper = new UpdateWrapper<>(); userUpdateWrapper .like(\\\"name\\\", \\\"h\\\") .or() .between(\\\"age\\\", 20, 30); int result = userMapper.update(user, userUpdateWrapper); System.out.println(result); } \"]},\"2246\":{\"h\":\"嵌套or、嵌套and\",\"t\":[\"这里使用了lambda表达式，or中的表达式最后翻译成sql时会被加上圆括号\",\"UPDATE user SET name=?, age=?, update_time=? WHERE deleted=0 AND name LIKE ? OR ( name = ? AND age <> ? )\",\"@Test public void testUpdate2() { //修改值 User user = new User(); user.setAge(99); user.setName(\\\"Andy\\\"); //修改条件 UpdateWrapper<User> userUpdateWrapper = new UpdateWrapper<>(); userUpdateWrapper .like(\\\"name\\\", \\\"h\\\") .or(i -> i.eq(\\\"name\\\", \\\"李白\\\").ne(\\\"age\\\", 20)); int result = userMapper.update(user, userUpdateWrapper); System.out.println(result); } \"]},\"2247\":{\"h\":\"orderBy、orderByDesc、orderByAsc\",\"t\":[\"这里使用了lambda表达式，or中的表达式最后翻译成sql时会被加上圆括号\",\"SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 ORDER BY id DESC\",\"@Test public void testSelectListOrderBy() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.orderByDesc(\\\"id\\\"); List<User> users = userMapper.selectList(queryWrapper); users.forEach(System.out::println); } \"]},\"2248\":{\"h\":\"last\",\"t\":[\"直接拼接到 sql 的最后注意：只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用\",\"SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 limit 1\",\"@Test public void testSelectListLast() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.last(\\\"limit 1\\\"); List<User> users = userMapper.selectList(queryWrapper); users.forEach(System.out::println); } \"]},\"2249\":{\"h\":\"select\",\"t\":[\"SELECT id,name,age FROM user WHERE deleted=0\",\"@Test public void testSelectListColumn() { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.select(\\\"id\\\", \\\"name\\\", \\\"age\\\"); List<User> users = userMapper.selectList(queryWrapper); users.forEach(System.out::println); } \"]},\"2250\":{\"h\":\"set、setSql\",\"t\":[\"最终的sql会合并 user.setAge()，以及 userUpdateWrapper.set() 和 setSql() 中 的字段\",\"UPDATE user SET age=?, update_time=?, name=?, email = '123@qq.com' WHERE deleted=0 AND name LIKE ?\",\"@Test public void testUpdateSet() { //修改值 User user = new User(); user.setAge(99); //修改条件 UpdateWrapper<User> userUpdateWrapper = new UpdateWrapper<>(); userUpdateWrapper .like(\\\"name\\\", \\\"h\\\") .set(\\\"name\\\", \\\"老李头\\\")//除了可以查询还可以使用set设置修改的字段 .setSql(\\\" email = '123@qq.com'\\\");//可以有子查询 int result = userMapper.update(user, userUpdateWrapper); } \"]},\"2251\":{\"h\":\"接口的使用\"},\"2252\":{\"h\":\"QueryWrapper\",\"t\":[\"首先来看看QueryWrapper的使用，针对where后的条件封装。\"]},\"2253\":{\"h\":\"查询条件\",\"t\":[\"SELECT id AS uid,name AS uname,age,email,isdel FROM t_user WHERE isdel=0 AND (name LIKE ? AND age > ? AND email IS NOT NULL)\",\"@Test public void test1(){ QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.like(\\\"name\\\", \\\"J\\\").gt(\\\"age\\\",18).isNotNull(\\\"email\\\"); List<User> list = userService.list(userQueryWrapper); list.forEach(System.out::println); } \"]},\"2254\":{\"h\":\"排序查询\",\"t\":[\"SELECT id AS uid,name AS uname,age,email,isdel FROM t_user WHERE isdel=0 ORDER BY age ASC,uid DESC\",\"@Test public void test2(){ QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.orderByAsc(\\\"age\\\").orderByDesc(\\\"uid\\\"); List<User> list = userService.list(userQueryWrapper); list.forEach(System.out::println); } \"]},\"2255\":{\"h\":\"删除条件\",\"t\":[\"由于开启了逻辑删除 UPDATE t_user SET isdel=1 WHERE isdel=0 AND (age >= ?)\",\"@Test public void test3(){ QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.ge(\\\"age\\\",28); boolean remove = userService.remove(userQueryWrapper); } \"]},\"2256\":{\"h\":\"组合条件\",\"t\":[\"在封装条件的时候我们可以同时有多个条件组合，类似于 and 和 or的操作，这时QueryWrapper也能很轻松的处理。\",\"SELECT id AS uid,name AS uname,age,email,isdel FROM t_user WHERE isdel=0 AND ((age >= ? AND name LIKE ?) OR (email IS NULL))\",\"@Test public void test4(){ QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.ge(\\\"age\\\", 20).like(\\\"name\\\", \\\"o\\\").or().isNull(\\\"email\\\"); List<User> list = userService.list(userQueryWrapper); list.forEach(System.out::println); } \",\"可以使用and() 和 or()\",\"@Test public void test5(){ QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.and((s)->{s.ge(\\\"age\\\", 20).like(\\\"name\\\", \\\"o\\\");}) .or((s)->{s.isNull(\\\"email\\\");}); List<User> list = userService.list(userQueryWrapper); list.forEach(System.out::println); } \"]},\"2257\":{\"h\":\"查询特定的字段\",\"t\":[\"特殊情况我们需要查询特定的字段，这时可以通过select方法来处理\",\"SELECT name,age FROM t_user WHERE isdel=0 AND (name LIKE ?)\",\"@Test public void test6(){ QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.like(\\\"name\\\", \\\"J\\\").select(\\\"name\\\",\\\"age\\\"); //返回Map集合列表，通常配合select()使用，避免User对象中没有被查询到的列值为null List<Map<String, Object>> maps = userService.listMaps(userQueryWrapper); maps.forEach(System.out::println); } \"]},\"2258\":{\"h\":\"实现子查询\",\"t\":[\"单表查询中对子查询的需求也是有的，我们来看看如何实现。\",\"SELECT id AS uid,name AS uname,age,email,isdel FROM t_user WHERE isdel=0 AND (id IN (select id from t_user where id < 5))\",\"@Test public void test7(){ QueryWrapper<User> userQueryWrapper = new QueryWrapper<>(); userQueryWrapper.inSql(\\\"id\\\",\\\"select id from t_user where id < 5\\\"); List<User> list = userService.list(userQueryWrapper); list.forEach(System.out::println); } \"]},\"2259\":{\"h\":\"UpdateWrapper\",\"t\":[\"当我们需要组装更新的字段数据的时候，可以通过UpdateWrapper来实现。\",\"@Test public void test8(){ UpdateWrapper<User> wrapper = new UpdateWrapper<>(); //将年龄为33的用户更改 wrapper.set(\\\"age\\\",25).set(\\\"name\\\", \\\"2333\\\").set(\\\"email\\\",\\\"xx@xx.xx\\\").set(\\\"isdel\\\", \\\"0\\\").and(s->{s.eq(\\\"age\\\",33);}); boolean update = userService.update(null, wrapper); } \"]},\"2260\":{\"h\":\"动态SQL\",\"t\":[\"实际开发中，用户的查询条件都是动态的，我们需要根据不同的输入条件来动态的生成对应的SQL语句，这时我们来看看在MyBatisPlus中是如何处理的。\",\"@Test public void test9(){ String name = \\\"Tom\\\"; Integer age = null; String email = null; QueryWrapper<User> wrapper = new QueryWrapper<>(); if(!StringUtils.isEmpty(name)){ wrapper.eq(\\\"name\\\",name); } if(age != null && age > 0){ wrapper.eq(\\\"age\\\",age); } if(!StringUtils.isEmpty(email)){ wrapper.eq(\\\"email\\\",email); } List<User> users = userService.list(wrapper); users.forEach(System.out::println); } \",\"上面的代码是通过if来一个个判断的，看起来代码比较复杂，其实大家在前面看相关的API的时候会注意到都会有一个Condition参数\",\"@Test public void test10(){ String name = \\\"Tom\\\"; Integer age = null; String email = null; QueryWrapper<User> wrapper = new QueryWrapper<>(); wrapper.eq(!StringUtils.isEmpty(name),\\\"name\\\",name) .eq(age != null && age > 0,\\\"age\\\",age) .eq(!StringUtils.isEmpty(email),\\\"email\\\",email); List<User> users = userService.list(wrapper); users.forEach(System.out::println); } \"]},\"2261\":{\"h\":\"搭建Mybatis项目环境\"},\"2262\":{\"h\":\"创建Maven项目\"},\"2263\":{\"h\":\"创建项目\",\"t\":[\"创建Maven项目 -> Next\",\"配置Maven信息 -> Finish\"]},\"2264\":{\"h\":\"配置项目环境\"},\"2265\":{\"h\":\"配置Maven包\"},\"2266\":{\"h\":\"修改使用的Maven\"},\"2267\":{\"h\":\"修改Maven的Pom.xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.meturing</groupId> <artifactId>MybatisTest02</artifactId> <version>1.0-SNAPSHOT</version> <!--指定编译类型--> <packaging>jar</packaging> <!--指定编译JDK版本--> <properties> <maven.compiler.source>8</maven.compiler.source> <maven.compiler.target>8</maven.compiler.target> </properties> <dependencies> <!--mysqlConnector--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.16</version> </dependency> <!--mybatis 核心jar包--> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.3</version> </dependency> <!--junit--> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13.1</version> <scope>test</scope> </dependency> <!--lombok --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.12</version> <scope>provided</scope> </dependency> </dependencies> </project> \",\"点击图标 或 Compile导包\"]},\"2268\":{\"h\":\"配置编译环境\"},\"2269\":{\"h\":\"修改项目编译版本\",\"t\":[\"统一使用JDK1.8编译开发\",\"File -> Settings\",\"File -> Project Structure\"]},\"2270\":{\"h\":\"安装插件\"},\"2271\":{\"h\":\"安装Lombok\",\"t\":[\"使用Lombok需要在项目中开启注解编译\"]},\"2272\":{\"h\":\"安装MybatisX\"},\"2273\":{\"h\":\"准备项目结构与数据\"},\"2274\":{\"h\":\"导入数据库\",\"t\":[\"![[dump-test-202304141121.sql]]\"]},\"2275\":{\"h\":\"创建项目结构\",\"t\":[\"在创建结构时需要注意:\",\"sqlMapConfig.xml需要放到resources根目录下\",\"DeptMapper.xml文件需要与代码层中com.meturing.mapper的层级结构一致\"]},\"2276\":{\"h\":\"创建实体类\",\"t\":[\"创建实体类Dept.java\",\"/** * @author sqTan * @description 部门 * @date 2023/04/09 */ @Data //所有参数构造Get/Set方法 @AllArgsConstructor //导入全参构造函数 @NoArgsConstructor //导入无参构造函数 public class Dept implements Serializable { private Integer deptno; private String dname; private String loc; } \"]},\"2277\":{\"h\":\"准备Mybatis的配置\"},\"2278\":{\"h\":\"sqlMapConfig.xml 配置文件\",\"t\":[\"注意: 注意在使用配置文件时分号在XML中需要写成&amp; 否则报错\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <environments default=\\\"development\\\"> <environment id=\\\"development\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"root\\\"/> </dataSource> </environment> </environments> <!-- 需要指向需要Mapping的XMl文件(注册) --> <mappers> <mapper resource=\\\"com/meturing/mapper/DeptMapper.xml\\\"/> </mappers> </configuration> \"]},\"2279\":{\"h\":\"DeptMapper.xml映射文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTDMapper3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"deptMapper\\\"> <!-- public List<Dept> findAll(){ } --> <select id=\\\"findAll\\\" resultType=\\\"com.meturing.pojo.Dept\\\" > select * from dept </select> </mapper> \",\"namespace 表示当前Mapper的名字.可以随意id 表示当前SQL语句的名字resultType 表示当前SQL执行后需要存储的对象位置,需要填写全类路径\"]},\"2280\":{\"h\":\"测试代码\"},\"2281\":{\"h\":\"基础写法思路\",\"t\":[\"创建一个SqlSessionFactoryBuilder对象\",\"通过Resources类获取指定配置文件的InputStream流\",\"通过SqlSessionFactoryBuilder对象使用配置文件的InputStream流构建一个SqlSessionFactory对象\",\"使用SqlSessionFactory对象打开数据库链接\",\"执行SQL\",\"关闭SqlSessionFactory对象\"]},\"2282\":{\"h\":\"相关测试代码\",\"t\":[\"package com.meturing.test; import com.meturing.pojo.Dept; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import org.junit.After; import org.junit.Before; import org.junit.Test; import java.io.IOException; import java.io.InputStream; import java.util.List; public class Test1 { private static SqlSession sqlSession = null; /** * 初始化 * Before注解会使方法在执行测试单元前执行 * @author sqTan * @date 2023/04/09 */ @Before public void init() { //创建一个SqlSessionFactoryBuilder对象 SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); InputStream resourceAsStream = null; try { //通过Resources类获取指定配置文件的InputStream流 resourceAsStream = Resources.getResourceAsStream(\\\"sqlMapConfig.xml\\\"); } catch (IOException e) { e.printStackTrace(); } //通过SqlSessionFactoryBuilder对象使用配置文件的InputStream流构建一个SqlSessionFactory对象 SqlSessionFactory build = sqlSessionFactoryBuilder.build(resourceAsStream); //使用SqlSessionFactory对象打开数据库链接 sqlSession = build.openSession(); } @Test public void test1(){ //执行查询方法 List<Dept> deptList = sqlSession.selectList(\\\"findAll\\\"); //deptList.stream().forEach(System.out::println); for (Dept dept : deptList) { System.out.println(dept); } } /** * 释放 * After注解会使方法在执行测试单元后执行 * @author sqTan * @date 2023/04/09 */ @After public void release(){ //关闭链接 sqlSession.close(); } } \"]},\"2283\":{\"h\":\"常用插件\"},\"2284\":{\"h\":\"分页插件\"},\"2285\":{\"h\":\"创建插件配置类\",\"t\":[\"在MyBatisPlus中集成了分页插件，我们不需要单独的引入，只需要添加对应的配置类\",\"@Configuration @MapperScan(\\\"com.meturing.mybatisplusdemo.mapper\\\") public class MyBatisPlusConfig { /** * 新的分页插件,一缓和二缓遵循mybatis的规则, * 需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除) */ @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); return interceptor; } } \",\"注意:MapperScan需要指向Mapper层的包,此时由于@Configuration的导入,所以可以给启动类上的包扫描删除掉\",\"然后就可以测试操作了\"]},\"2286\":{\"h\":\"使用插件\",\"t\":[\"@Test void queryPage() { Page<User> page = new Page<>(1,5); Page<User> userPage = userService.page(page,null); System.out.println(\\\"userPage.getCurrent() = \\\" + userPage.getCurrent()); System.out.println(\\\"userPage.getSize() = \\\" + userPage.getSize()); System.out.println(\\\"userPage.getTotal() = \\\" + userPage.getTotal()); System.out.println(\\\"userPage.getPages() = \\\" + userPage.getPages()); System.out.println(\\\"userPage.hasPrevious() = \\\" + userPage.hasPrevious()); System.out.println(\\\"userPage.hasNext() = \\\" + userPage.hasNext()); } \",\"运行效果\"]},\"2287\":{\"h\":\"乐观锁\",\"t\":[\"当要更新一条记录的时候，希望这条记录没有被别人更新\",\"乐观锁实现方式：\",\"取出记录时，获取当前 version\",\"更新时，带上这个 version\",\"执行更新时， set version = newVersion where version = oldVersion\",\"如果 version 不对，就更新失败\"]},\"2288\":{\"h\":\"配置插件\",\"t\":[\"在MyBatisPlusConfig类中导入\",\"@Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor()); return interceptor; } \"]},\"2289\":{\"h\":\"在实体类的字段上加上 @Version 注解\",\"t\":[\"@Version private Integer version; \",\"说明:\",\"支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime\",\"整数类型下 newVersion = oldVersion + 1\",\"newVersion 会回写到 entity 中\",\"仅支持 updateById(id) 与 update(entity, wrapper) 方法\",\"在 update(entity, wrapper) 方法下, wrapper 不能复用!!!\"]},\"2290\":{\"h\":\"案例\",\"t\":[\"// Spring Boot 方式 @Configuration @MapperScan(\\\"按需修改\\\") public class MybatisPlusConfig { /** * 旧版 */ @Bean public OptimisticLockerInterceptor optimisticLockerInterceptor() { return new OptimisticLockerInterceptor(); } /** * 新版 */ @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor(); mybatisPlusInterceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor()); return mybatisPlusInterceptor; } } \"]},\"2291\":{\"h\":\"代码生成器\"},\"2292\":{\"h\":\"添加依赖\",\"t\":[\"<!-- 代码生成器 --> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-generator</artifactId> <version>3.5.2</version> </dependency> <dependency> <groupId>org.freemarker</groupId> <artifactId>freemarker</artifactId> </dependency> \"]},\"2293\":{\"h\":\"运行代码\",\"t\":[\"public class MyFastAutoGenerator { public static void main(String[] args) { FastAutoGenerator.create(\\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\\\" , \\\"root\\\", \\\"root\\\")//数据源 .globalConfig(builder -> { builder.author(\\\"meturing\\\") // 设置作者 //.enableSwagger() // 开启 swagger 模式 .fileOverride() // 覆盖已生成文件 .outputDir(\\\"D://MyBatisPlus\\\"); // 指定输出目录 }) .packageConfig(builder -> { builder.parent(\\\"com.meturing.mp\\\") // 设置父包名 .moduleName(\\\"system\\\") // 设置父包模块名 .pathInfo(Collections.singletonMap(OutputFile.xml, \\\"D://\\\")); // 设置mapperXml生成路径 }) .strategyConfig(builder -> { builder.addInclude(\\\"t_user\\\") // 设置需要生成的表名 .addTablePrefix(\\\"t_\\\", \\\"c_\\\"); // 设置过滤表前缀 }) .templateEngine(new FreemarkerTemplateEngine()) // 使用Freemarker引擎模板，默认的是Velocity引擎模板 .execute(); } \"]},\"2294\":{\"h\":\"性能分析\",\"t\":[\"性能分析拦截器，用于输出每条 SQL 语句及其执行时间\",\"SQL 性能执行分析,开发环境使用，超过指定时间，停止运行。有助于发现问题\"]},\"2295\":{\"h\":\"配置插件\"},\"2296\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>p6spy</groupId> <artifactId>p6spy</artifactId> <version>3.9.1</version> </dependency> \"]},\"2297\":{\"h\":\"配置文件修改\",\"t\":[\"替换你的JDBC Driver为com.p6spy.engine.spy.P6SpyDriver\",\"在原来urljdbc：后面添加p6spy：。如：jdbc:p6spy:mysql://127.0.0.1:3306或jdbc:p6spy:oracle:thin:@localhost:1521:ORCL\",\"添加p6spy的配置文件spy.properties\"]},\"2298\":{\"h\":\"spy.properties\",\"t\":[\"module.log=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory # 自定义日志打印 logMessageFormat=com.p6spy.engine.spy.appender.SingleLineFormat #logMessageFormat=com.p6spy.engine.spy.appender.CustomLineFormat #customLogMessageFormat=%(currentTime) | SQL耗时： %(executionTime) ms | 连接信息： %(category)-%(connectionId) | 执行语句： %(sql) # 使用控制台记录sql appender=com.p6spy.engine.spy.appender.StdoutLogger ## 配置记录Log例外 excludecategories=info,debug,result,batc,resultset # 设置使用p6spy driver来做代理 deregisterdrivers=true # 日期格式 dateformat=yyyy-MM-dd HH:mm:ss # 实际驱动 driverlist=com.mysql.jdbc.Driver # 是否开启慢SQL记录 outagedetection=true # 慢SQL记录标准 秒 outagedetectioninterval=2 \"]},\"2299\":{\"h\":\"自定义格式化\",\"t\":[\"上面的的logMessageFormat是打印的格式SingleLineFormat最基础的配置是不会打印sql的。如果修改有两种方式：\",\"使用内置自定义格式化器（CustomLineFormat）手动配置打印格式\",\"修改配置文件的格式化为自定义格式化 logMessageFormat=com.p6spy.engine.spy.appender.CustomLineFormat\",\"配置文件中添加手动配置打印的格式，推荐示例：customLogMessageFormat=%(currentTime) | SQL耗时： %(executionTime) ms | 连接信息： %(category)-%(connectionId) | 执行语句： %(sql)\",\"自己创建类实现MessageFormattingStrategy接口重写formatMessage方法即可\",\"创建类P6SpyLogger\",\"public class P6SpyLogger implements MessageFormattingStrategy { /** * @Desc: 重写日志格式方法 * now:当前时间 * elapsed:执行耗时 * category：执行分组 * prepared：预编译sql语句 * sql:执行的真实SQL语句，已替换占位 */ @Override public String formatMessage(int connectionId, String now, long elapsed, String category, String prepared, String sql) { return !\\\"\\\".equals(sql.trim()) ? \\\"[ \\\" + LocalDateTime.now() + \\\" ] --- | took \\\" + elapsed + \\\"ms | \\\" + category + \\\" | connection \\\" + connectionId + \\\"\\\\n \\\" + sql + \\\";\\\" : \\\"\\\"; } } \",\"将配置文件中的格式化器属性改为自己的类logMessageFormat=com.xxx.xxx.P6SpyLogger\"]},\"2300\":{\"h\":\"p6spy有3中日志输出方式\",\"t\":[\"#（推荐）使用Slf4j输出 配合SpringBoot使用日志门面 #appender=com.p6spy.engine.spy.appender.Slf4JLogger # 仅控制台输出 #appender=com.p6spy.engine.spy.appender.StdoutLogger # 文件输出，使用内置日志输出到文件 #appender=com.p6spy.engine.spy.appender.FileLogger \"]},\"2301\":{\"h\":\"spy.properties详细说明\",\"t\":[\"# 指定应用的日志拦截模块,默认为com.p6spy.engine.spy.P6SpyFactory #modulelist=com.p6spy.engine.spy.P6SpyFactory,com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory # 真实JDBC driver , 多个以 逗号 分割 默认为空 #driverlist= # 是否自动刷新 默认 flase #autoflush=false # 配置SimpleDateFormat日期格式 默认为空 #dateformat= # 打印堆栈跟踪信息 默认flase #stacktrace=false # 如果 stacktrace=true，则可以指定具体的类名来进行过滤。 #stacktraceclass= # 监测属性配置文件是否进行重新加载 #reloadproperties=false # 属性配置文件重新加载的时间间隔，单位:秒 默认60s #reloadpropertiesinterval=60 # 指定 Log 的 appender，取值： #appender=com.p6spy.engine.spy.appender.Slf4JLogger #appender=com.p6spy.engine.spy.appender.StdoutLogger #appender=com.p6spy.engine.spy.appender.FileLogger # 指定 Log 的文件名 默认 spy.log #logfile=spy.log # 指定是否每次是增加 Log，设置为 false 则每次都会先进行清空 默认true #append=true # 指定日志输出样式 默认为com.p6spy.engine.spy.appender.SingleLineFormat , 单行输出 不格式化语句 #logMessageFormat=com.p6spy.engine.spy.appender.SingleLineFormat # 也可以采用 com.p6spy.engine.spy.appender.CustomLineFormat 来自定义输出样式, 默认值是%(currentTime)|%(executionTime)|%(category)|connection%(connectionId)|%(sqlSingleLine) # 可用的变量为: # %(connectionId) connection id # %(currentTime) 当前时间 # %(executionTime) 执行耗时 # %(category) 执行分组 # %(effectiveSql) 提交的SQL 换行 # %(effectiveSqlSingleLine) 提交的SQL 不换行显示 # %(sql) 执行的真实SQL语句，已替换占位 # %(sqlSingleLine) 执行的真实SQL语句，已替换占位 不换行显示 #customLogMessageFormat=%(currentTime)|%(executionTime)|%(category)|connection%(connectionId)|%(sqlSingleLine) # date类型字段记录日志时使用的日期格式 默认dd-MMM-yy #databaseDialectDateFormat=dd-MMM-yy # boolean类型字段记录日志时使用的日期格式 默认boolean 可选值numeric #databaseDialectBooleanFormat=boolean # 是否通过jmx暴露属性 默认true #jmx=true # 如果jmx设置为true 指定通过jmx暴露属性时的前缀 默认为空 # com.p6spy(.<jmxPrefix>)?:name=<optionsClassName> #jmxPrefix= # 是否显示纳秒 默认false #useNanoTime=false # 实际数据源 JNDI #realdatasource=/RealMySqlDS # 实际数据源 datasource class #realdatasourceclass=com.mysql.jdbc.jdbc2.optional.MysqlDataSource # 实际数据源所携带的配置参数 以 k=v 方式指定 以 分号 分割 #realdatasourceproperties=port;3306,serverName;myhost,databaseName;jbossdb,foo;bar # jndi数据源配置 # 设置 JNDI 数据源的 NamingContextFactory。 #jndicontextfactory=org.jnp.interfaces.NamingContextFactory # 设置 JNDI 数据源的提供者的 URL。 #jndicontextproviderurl=localhost:1099 # 设置 JNDI 数据源的一些定制信息，以分号分隔。 #jndicontextcustom=java.naming.factory.url.pkgs;org.jboss.naming:org.jnp.interfaces # 是否开启日志过滤 默认false， 这项配置是否生效前提是配置了 include/exclude/sqlexpression #filter=false # 过滤 Log 时所包含的表名列表，以逗号分隔 默认为空 #include= # 过滤 Log 时所排除的表名列表，以逗号分隔 默认为空 #exclude= # 过滤 Log 时的 SQL 正则表达式名称 默认为空 #sqlexpression= #显示指定过滤 Log 时排队的分类列表，取值: error, info, batch, debug, statement, #commit, rollback, result and resultset are valid values # (默认 info,debug,result,resultset,batch) #excludecategories=info,debug,result,resultset,batch # 是否过滤二进制字段 # (default is false) #excludebinary=false # P6Log 模块执行时间设置，整数值 (以毫秒为单位)，只有当超过这个时间才进行记录 Log。 默认为0 #executionThreshold= # P6Outage 模块是否记录较长时间运行的语句 默认false # outagedetection=true|false # P6Outage 模块执行时间设置，整数值 （以秒为单位)），只有当超过这个时间才进行记录 Log。 默认30s # outagedetectioninterval=integer time (seconds) \"]},\"2302\":{\"h\":\"Mybatis配置\"},\"2303\":{\"h\":\"导入Log4j日志框架\"},\"2304\":{\"h\":\"回顾之前在JDBC中的使用\",\"t\":[\"什么是日志log\",\"log4j日志的级别\",\"使用log4j记录日志\",\"代码中记录日志\",\"理解日志格式化字符的含义\"]},\"2305\":{\"h\":\"在Maven中使用Log4j\",\"t\":[\"目前位置Log4j分为Log4j1和Log4j2 两个版本,在配置上有所不同\"]},\"2306\":{\"h\":\"导入Log4j1\",\"t\":[\"将log4j.properties文件复制到resources下。另外在其中可以将全局的日志级别调高，避免大量debug信息的干扰。同时将对映射文件的操作调低，可以用来显示SQL语句的调试信息。开发阶段，建议启动控制的日志。\"]},\"2307\":{\"h\":\"配置Pom文件\",\"t\":[\"<dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> <version>1.2.17</version> </dependency> \"]},\"2308\":{\"h\":\"配置loj4g.properties文件\",\"t\":[\"#定义全局日志级别调试阶段推荐debug #log4j.rootLogger=debug,stdout,logfile #及打印到控制台又输出到文件 log4j.rootLogger=debug,stdout #stdout 输出到控制台 log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.Target=System.err log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout #logfile 输出到文件 log4j.appender.logfile=org.apache.log4j.FileAppender log4j.appender.logfile.File=d:/meturing.log log4j.appender.logfile.layout=org.apache.log4j.PatternLayout log4j.appender.logfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %l %F %p %m%n \"]},\"2309\":{\"h\":\"效果\"},\"2310\":{\"h\":\"导入Log4j2\",\"t\":[\"将log4j2.xml文件负责到resources下\"]},\"2311\":{\"h\":\"配置Pom文件\",\"t\":[\"<dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-core</artifactId> <version>2.12.1</version> </dependency> \"]},\"2312\":{\"h\":\"配置log4j2.xml文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <Configuration status=\\\"DEBUG\\\"> <Appenders> <Console name=\\\"Console\\\" target=\\\"SYSTEM_ERR\\\"> <PatternLayout pattern=\\\"%d{YYYY-MM-dd HH:mm:ss} [%t] %-5p %c{1}:%L - %msg%n\\\" /> </Console> <RollingFile name=\\\"RollingFile\\\" filename=\\\"log/test.log\\\" filepattern=\\\"${logPath}/%d{YYYYMMddHHmmss}-fargo.log\\\"> <PatternLayout pattern=\\\"%d{YYYY-MM-dd HH:mm:ss} [%t] %-5p %c{1}:%L - %msg%n\\\" /> <Policies> <SizeBasedTriggeringPolicy size=\\\"10 MB\\\" /> </Policies> <DefaultRolloverStrategy max=\\\"20\\\" /> </RollingFile> </Appenders> <Loggers> <Root level=\\\"DEBUG\\\"> <AppenderRef ref=\\\"Console\\\" /> <!-- <AppenderRef ref=\\\"RollingFile\\\" />--> </Root> </Loggers> </Configuration> \",\"使用多个配置在Root中使用多行\"]},\"2313\":{\"h\":\"效果\",\"t\":[\"我们发现Log4j2的日志打印的更加详细\"]},\"2314\":{\"h\":\"配置Mybatis使用的日志\",\"t\":[\"我们在Mybatis官网可以看到: https://mybatis.net.cn/configuration.html#settingslogImpl参数可以指定使用的日志实现,默认是没有配置的,会按照顺序依次查找\"]},\"2315\":{\"h\":\"修改sqlMapConfig.xml文件\",\"t\":[\"注意Mybatis.xml配置文件编辑时需要注意标签的先后顺序,否则会报错,标签的先后顺序需要遵守左侧的层级\",\"我们看到官方说明文档中,在settings配置中可以指定log框架,所以我们新增logImpl属性配置 如果没有配置,默认情况下Mybatis会自动按照顺序寻找使用的log框架\",\"<settings> <setting name=\\\"logImpl\\\" value=\\\"LOG4J\\\"/> </settings> \"]},\"2316\":{\"h\":\"事务配置\",\"t\":[\"在 MyBatis 中有两种类型的事务管理器（也就是 type=\\\"[JDBC|MANAGED]\\\"）：\"]},\"2317\":{\"h\":\"JDBC\",\"t\":[\"JDBC – 这个配置直接使用了 JDBC 的提交和回滚功能，它依赖从数据源获得的连接来管理事务作用域。默认情况下，为了与某些驱动程序兼容，它在关闭连接时启用自动提交。然而，对于某些驱动程序来说，启用自动提交不仅是不必要的，而且是一个代价高昂的操作。因此，从 3.5.10 版本开始，你可以通过将 \\\"skipSetAutoCommitOnClose\\\" 属性设置为 \\\"true\\\" 来跳过这个步骤。例如：\",\"<transactionManager type=\\\"JDBC\\\"> <property name=\\\"skipSetAutoCommitOnClose\\\" value=\\\"true\\\"/> </transactionManager> \"]},\"2318\":{\"h\":\"MANAGED\",\"t\":[\"MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（(比如 Spring 或 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。mybatis本身并不做事务的处理,交给其他框架去处理事务,如spring , 例如:\",\"<transactionManager type=\\\"MANAGED\\\"> <property name=\\\"closeConnection\\\" value=\\\"false\\\"/> </transactionManager> \"]},\"2319\":{\"h\":\"映射文件的加载方式\",\"t\":[\"既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:/// 形式的 URL），或类名和包名等。例如：\"]},\"2320\":{\"h\":\"使用类路径的资源引用\",\"t\":[\"mapper映射文件的文件路径导入 使用的mapper标签的resource属性\",\"<!-- 使用相对于类路径的资源引用 --> <mappers> <mapper resource=\\\"org/mybatis/builder/AuthorMapper.xml\\\"/> <mapper resource=\\\"org/mybatis/builder/BlogMapper.xml\\\"/> <mapper resource=\\\"org/mybatis/builder/PostMapper.xml\\\"/> </mappers> \"]},\"2321\":{\"h\":\"使用接口的全限定名导入\",\"t\":[\"接口的全限定名导入 使用的是mapper标签的class属性 (基于接口的代理模式开发)\",\"<!-- 使用相对于类路径的资源引用 --> <mappers> <mapper class=\\\"org.mybatis.builder.AuthorMapper\\\"/> <mapper class=\\\"org.mybatis.builder.BlogMapper\\\"/> <mapper class=\\\"org.mybatis.builder.PostMapper\\\"/> </mappers> \"]},\"2322\":{\"h\":\"使用完全限定资源定位符（URL）\",\"t\":[\"网络资源路径 使用的mapper标签的url属性\",\"<!-- 使用完全限定资源定位符（URL） --> <mappers> <mapper url=\\\"file:///var/mappers/AuthorMapper.xml\\\"/> <mapper url=\\\"file:///var/mappers/BlogMapper.xml\\\"/> <mapper url=\\\"file:///var/mappers/PostMapper.xml\\\"/> </mappers> \"]},\"2323\":{\"h\":\"将包内的映射器接口全部注册为映射器\",\"t\":[\"包扫描形式加载所有的mapper映射文件 使用的是 package标签\",\"<!-- 将包内的映射器接口全部注册为映射器 --> <mappers> <package name=\\\"org.mybatis.builder\\\"/> </mappers> \"]},\"2324\":{\"h\":\"实体类别名处理\",\"t\":[\"类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：\"]},\"2325\":{\"h\":\"手动指定 typeAlias\"},\"2326\":{\"h\":\"配置文件代码\",\"t\":[\"<typeAliases> <typeAlias alias=\\\"dept\\\" type=\\\"com.meturing.pojo.Dept\\\"/> </typeAliases> \"]},\"2327\":{\"h\":\"使用\",\"t\":[\"我们可以直接使用指定的别名,就不用再写包的全类路径了\"]},\"2328\":{\"h\":\"包扫描 package\"},\"2329\":{\"h\":\"配置文件代码\",\"t\":[\"<!-- 别名 --> <typeAliases> <package name=\\\"com.meturing.pojo\\\" /> </typeAliases> \"]},\"2330\":{\"h\":\"使用\",\"t\":[\"在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；\",\"若有注解@Alias ，则别名为其注解值。见下面的例子：\"]},\"2331\":{\"h\":\"外部属性配置文件存储数据库链接信息\"},\"2332\":{\"h\":\"创建外部properties文件\",\"t\":[\"jdbc_driver=com.mysql.cj.jdbc.Driver jdbc_url=jdbc:mysql://192.168.1.188:3306/test?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai jdbc_username=root jdbc_password=root \",\"注意:\",\"properties文件是Key=value的形式\",\"注意末尾空格也会被当作Value的字符\",\"key最好不要使用常用类型,比如:name / userName / type , 推荐使用下划线区分用途,如:jdbc_username\",\"properties属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：\",\"<!-- 属性 --> <properties resource=\\\"jdbc_config.properties\\\"> <property name=\\\"username\\\" value=\\\"dev_user\\\"/> <property name=\\\"password\\\" value=\\\"F2Fa3!33TYyg\\\"/> </properties> \",\"设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:\",\"<dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"${driver}\\\"/> <property name=\\\"url\\\" value=\\\"${url}\\\"/> <property name=\\\"username\\\" value=\\\"${username}\\\"/> <property name=\\\"password\\\" value=\\\"${password}\\\"/> </dataSource> \"]},\"2333\":{\"h\":\"优先级\",\"t\":[\"如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载:\",\"首先读取在 properties 元素体内指定的属性。\",\"然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。\",\"最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。\",\"因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性\"]},\"2334\":{\"h\":\"设置默认值\",\"t\":[\"从 MyBatis 3.4.2 开始，你可以为占位符指定一个默认值。例如：\",\"<dataSource type=\\\"POOLED\\\"> <!-- ... --> <property name=\\\"username\\\" value=\\\"${username:ut_user}\\\"/> <!-- 如果属性 'username' 没有被配置，'username' 属性的值将为 'ut_user' --> </dataSource> \",\"这个特性默认是关闭的。要启用这个特性，需要添加一个特定的属性来开启这个特性。例如：\",\"<properties resource=\\\"org/mybatis/example/config.properties\\\"> <!-- ... --> <property name=\\\"org.apache.ibatis.parsing.PropertyParser.enable-default-value\\\" value=\\\"true\\\"/> <!-- 启用默认值特性 --> </properties> \",\"如果你在属性名中使用了 \\\":\\\" 字符（如：db:username），或者在 SQL 映射中使用了 OGNL 表达式的三元运算符（如： ${tableName != null ? tableName : 'global_constants'}），就需要设置特定的属性来修改分隔属性名和默认值的字符。 例如：\",\"<properties resource=\\\"org/mybatis/example/config.properties\\\"> <!-- ... --> <property name=\\\"org.apache.ibatis.parsing.PropertyParser.default-value-separator\\\" value=\\\"?:\\\"/> <!-- 修改默认值的分隔符 --> </properties> \",\"<dataSource type=\\\"POOLED\\\"> <!-- ... --> <property name=\\\"username\\\" value=\\\"${db:username?:ut_user}\\\"/> </dataSource> \"]},\"2335\":{\"h\":\"补充\",\"t\":[\"在使用Mapper设置返回值类型时,我们对于基础类型无需写他的全类路径,Mybatis底层已经帮我们实现了别名\",\"下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。\",\"总结来说:\",\"原当初是大驼峰的,首字母全部转小写,如: ArrayList -> arraylist\\n原单词首字母是小写的个体单词,首字母前面加下划线,如:int -> _int\"]},\"2336\":{\"h\":\"MyBatis普通模式的开发\",\"t\":[\"在前面的学习中,我们简单搭建了一个Mybatis的项目环境\",\"基础写法思路\",\"基于普通模式的开发,也成为传统DAO模式. 简单来讲就是创建对应的接口,然后在接口的实现类中使用SQLSession对象调用select insert delete update 等方法实现. 目前我们能开发中不再使用这种方式,但是我们仍需要了解SQLSession的基本API实现CRUD的功能以及参数的传递\"]},\"2337\":{\"h\":\"构建环境\",\"t\":[\"本次我们尝试对Emp表进行操作,所以需要执行以下操作:\"]},\"2338\":{\"h\":\"新增Emp实体类\"},\"2339\":{\"h\":\"新增EmpMapper.xml\"},\"2340\":{\"h\":\"新增XML文件映射\",\"t\":[\"由于当前使用的是非接口式开发,所以Mappers标签中不可以使用Package标签进行扫描,只能一个一个mapper标签的对XML进行注册\"]},\"2341\":{\"h\":\"新增测试类\"},\"2342\":{\"h\":\"SQLSession 查询的三种方式\",\"t\":[\"SQLSession对象本身的API中存在三个查询方法,能够实现如下查询方式:\",\"返回单个对象 : selectOne\",\"返回对象的List集合 : selectList\",\"返回对象的Map集合 : selectMap\"]},\"2343\":{\"h\":\"返回单个对象\"},\"2344\":{\"h\":\"Mapper层\",\"t\":[\"正常情况下我们查询单个对象的Java代码如下\",\"public emp findOne(){ ...... } \",\"所以EmpMapper.xml\",\"<select id=\\\"findOne\\\" resultType=\\\"emp\\\" > select * from emp where EMPNO = '7499' </select> \"]},\"2345\":{\"h\":\"测试代码\",\"t\":[\"Test2.Java\",\"@Test public void test2(){ //执行查询方法 Emp emp = sqlSession.selectOne(\\\"findOne\\\"); System.out.println(emp); } \",\"如果多个Mapper.xml中出现相同的ID,则Mybatis会出现错误提示,找不到具体方法. 所以我们可以使用Mapper名字.id名字\",\"@Test public void test2(){ //执行查询方法 Emp emp = sqlSession.selectOne(\\\"empMapper.findOne\\\"); System.out.println(emp); } \"]},\"2346\":{\"h\":\"返回对象的List集合\"},\"2347\":{\"h\":\"Mapper层\",\"t\":[\"正常情况下我们查询多个对象集合的Java代码如下\",\"public List<emp> findAll(){ ...... } \",\"所以EmpMapper.xml\",\"<select id=\\\"findAll\\\" resultType=\\\"emp\\\" > select * from emp </select> \"]},\"2348\":{\"h\":\"测试代码\",\"t\":[\"Test2.Java\",\"@Test public void test2(){ //执行查询方法 List<Emp> deptList = sqlSession.selectList(\\\"empMapper.findAll\\\"); deptList.stream().forEach(System.out::println); } \"]},\"2349\":{\"h\":\"返回对象的Map集合\"},\"2350\":{\"h\":\"Mapper层\",\"t\":[\"正常情况下我们查询多个对象Map集合的Java代码如下\",\"public Map<emp> findAll(){ ...... } \",\"所以EmpMapper.xml\",\"<select id=\\\"findMap\\\" resultType=\\\"map\\\" > select * from emp </select> \"]},\"2351\":{\"h\":\"测试代码\",\"t\":[\"Test2.Java\",\"selectMap(\\\"Id名字\\\",\\\"作为Key的字段\\\") 注意:作为Key的字段大小写需要完全和DB中保持一致\",\"@Test public void test3(){ //执行查询方法 Map<Object, Object> objectObjectMap = sqlSession.selectMap(\\\"findMap\\\", \\\"EMPNO\\\"); for (Map.Entry<Object, Object> objectObjectEntry : objectObjectMap.entrySet()) { System.out.println(objectObjectEntry.getKey()+\\\":\\\"+objectObjectEntry.getValue()); } } \"]},\"2352\":{\"h\":\"SQLSession的参数传递\",\"t\":[\"Mapper中通过parameterType属性来控制参数的类型及数量 通常情况下parameterType属性可以不写,Mybatis可以根据自己的情况进行判断,但是如果写就要写对\",\"使用${} 或 #{} 来进行参数的占位,两者区别如下: - ${} 代表mybatis底层使用Statment语句对象,参数是以字符串拼接的形式设置 - #{} 代表mybatis底层使用的preparedStatment语句对象,参数使用?作为占位符处理\"]},\"2353\":{\"h\":\"单一参数传递\"},\"2354\":{\"h\":\"Mapper层\",\"t\":[\"Java伪代码\",\"public emp findByEmpno(int empno){ ...... } \",\"所以EmpMapper.xml\",\"<select id=\\\"findByEmpno\\\" resultType=\\\"emp\\\" parameterType=\\\"int\\\"> select * from emp where empno = #{empno} </select> \"]},\"2355\":{\"h\":\"测试代码\",\"t\":[\"Test2.Java\",\"@Test public void test1(){ //执行查询方法 Emp emp = sqlSession.selectOne(\\\"findByEmpno\\\", 7499); System.out.println(emp); } \"]},\"2356\":{\"h\":\"多参数Map传递\",\"t\":[\"Java伪代码\",\"public List<Emp> findByEmpno(Map<String,String> empMap){ ...... } \",\"所以EmpMapper.xml\",\"<select id=\\\"findEmpByDeptnoAndSal\\\" resultType=\\\"emp\\\" parameterType=\\\"map\\\"> select * from emp where deptno = #{deptno} and sal &gt;= #{sal} </select> \",\"注意:对于SQL中的敏感符号,如<> 通常参考HTML转义,w3school在线文档中有转译符号对应规则\"]},\"2357\":{\"h\":\"测试代码\",\"t\":[\"Test2.Java\",\"@Test public void test2(){ //执行查询方法 HashMap<String, Object> parameterMap = new HashMap<>(); parameterMap.put(\\\"deptno\\\",\\\"30\\\"); parameterMap.put(\\\"sal\\\",1500.0); List<Object> findEmp = sqlSession.selectList(\\\"findEmpByDeptnoAndSal\\\", parameterMap); findEmp.stream().forEach(System.out::println); } \"]},\"2358\":{\"h\":\"多参数实体类对象传递\",\"t\":[\"Java伪代码\",\"public List<Emp> findByEmpno(emp){ ...... } \",\"所以EmpMapper.xml\",\"<select id=\\\"findEmpByDeptnoAndSal2\\\" resultType=\\\"emp\\\" parameterType=\\\"emp\\\"> select * from emp where deptno = #{deptno} and sal &gt;= #{sal} </select> \",\"注意:对于SQL中的敏感符号,如<> 通常参考HTML转义,w3school在线文档中有转译符号对应规则\"]},\"2359\":{\"h\":\"测试代码\",\"t\":[\"Test2.Java\",\"@Test public void test3(){ //执行查询方法 Emp emp = new Emp(); emp.setDeptno(30); emp.setSal(1500.0); List<Object> findEmp = sqlSession.selectList(\\\"findEmpByDeptnoAndSal2\\\", emp); findEmp.stream().forEach(System.out::println); } \"]},\"2360\":{\"h\":\"SQLSession实现DML全部操作\",\"t\":[\"在上面的案例中,我们实现了对数据查询的简场景和复杂场景,接下来我们继续学习对数据的增删改功能\",\"由于增删 改 方法都会返回受影响的行数,所以标签中没有resultType,默认会返回int类型数据\",\"需要注意的是,由于对数据实行DML数据会涉及到数据的事务问题. 默认情况下sqlSession = build.openSession();是开启的手动提交,我们需要在执行操作后再次执行sqlSession.commit(); 提交 或者 sqlSession.rollback(); 回滚数据. 当然我们可以sqlSession = build.openSession(true);设置事务的自动提交\"]},\"2361\":{\"h\":\"增加\",\"t\":[\"Java伪代码\",\"pubilc int addEmp(Emp emp){ ... } \"]},\"2362\":{\"h\":\"Mapper层\",\"t\":[\"<insert id=\\\"insertEmp\\\" parameterType=\\\"emp\\\"> INSERT INTO emp VALUES(#{empno},#{ename},#{job},#{mgr},#{hiredate},#{sal},#{comm},#{deptno}); </insert> \"]},\"2363\":{\"h\":\"测试代码\",\"t\":[\"@Test public void testInsert(){ Emp emp = new Emp(8899,\\\"张三\\\",\\\"SALESMAN\\\",7839,new Date(),3100.0, 200.0,10 ); sqlSession.insert(\\\"insertEmp\\\", emp); } \"]},\"2364\":{\"h\":\"修改\",\"t\":[\"Java伪代码\",\"pubilc int updateEmp(Emp emp){ ... } \"]},\"2365\":{\"h\":\"Mapper层\",\"t\":[\"<update id=\\\"updateEmp\\\" parameterType=\\\"emp\\\"> UPDATE emp SET ENAME=#{ename} WHERE EMPNO=#{empno}</update> \"]},\"2366\":{\"h\":\"测试代码\",\"t\":[\"@Test public void testUpdate(){ Emp emp = new Emp(); emp.setEmpno(8899); emp.setEname(\\\"李四\\\"); sqlSession.insert(\\\"updateEmp\\\", emp); } \"]},\"2367\":{\"h\":\"删除\",\"t\":[\"Java伪代码\",\"pubilc int deleteEmp(Emp emp){ ... } \"]},\"2368\":{\"h\":\"Mapper层\",\"t\":[\"<delete id=\\\"deleteEmp\\\" parameterType=\\\"int\\\"> DELETE FROM emp WHERE EMPNO=#{empno} </delete> \"]},\"2369\":{\"h\":\"测试代码\",\"t\":[\"@Test public void testDelete(){ sqlSession.delete(\\\"deleteEmp\\\", 8899); } \"]},\"2370\":{\"h\":\"Mybatis代理模式的开发\"},\"2371\":{\"h\":\"为什么要基于代理模式开发\",\"t\":[\"前面已经使用MyBatis完成了对Emp表的CRUD操作，都是由SqlSession调用自身方法发送SQL命令并得到结果的，实现了MyBatis的入门.\",\"但是这种开发形式存在以下缺点:\",\"不管是selectList()、selectOne()、selectMap()，都是通过SQLSession对象的API完成增删改查,都只能提供一个查询参数。如果要多个参数，需要封装到JavaBean或者Map中，并不一定永远是一个好办法。\",\"返回值类型较固定\",\"只提供了映射文件，没有提供数据库操作的接口，不利于后期的维护扩展。\",\"在MyBatis中提供了另外一种成为Mapper代理（或称为接口绑定）的操作方式 , 在实际开发中也使用该方式. 相较于SQLSession的基本开发模式,基于代理的开发存在以下优点:\",\"有接口 模块之间有规范了\",\"参数的处理多样了,接口中的方法参数列表由我们自己决定\",\"通过代理模式由mybatis提供接口的实现类对象 我们不用写实现类了\"]},\"2372\":{\"h\":\"构建项目结构\"},\"2373\":{\"h\":\"项目环境\"},\"2374\":{\"h\":\"构建步骤\",\"t\":[\"创建一个Maven工程项目\",\"修改pom.xml文件\",\" <groupId>com.meturing</groupId> <artifactId>MybatisTest02</artifactId> <version>1.0-SNAPSHOT</version> <packaging>jar</packaging> <properties> <maven.compiler.source>8</maven.compiler.source> <maven.compiler.target>8</maven.compiler.target> </properties> <dependencies> <!--mysqlConnector--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.16</version> </dependency> <!--mybatis 核心jar包--> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.3</version> </dependency> <!--junit--> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13.1</version> <scope>test</scope> </dependency> <!--lombok --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.12</version> <scope>provided</scope> </dependency> <!-- log4j1 --> <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> <version>1.2.17</version> </dependency> </dependencies> \",\"创建sqlMapConfig.xml文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <!-- 属性 --> <properties resource=\\\"jdbc_config.properties\\\"> <property name=\\\"username\\\" value=\\\"dev_user\\\"/> <property name=\\\"password\\\" value=\\\"F2Fa3!33TYyg\\\"/> </properties> <!-- 设置 --> <settings> <!-- 指定使用的日志框架 --> <setting name=\\\"logImpl\\\" value=\\\"LOG4J\\\"/> </settings> <!-- 别名 --> <typeAliases> <package name=\\\"com.meturing.pojo\\\" /> </typeAliases> <!-- 环境变量 --> <environments default=\\\"development\\\"> <environment id=\\\"development\\\"> <!-- 事务 --> <transactionManager type=\\\"JDBC\\\"/> <!-- 数据源 --> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"${jdbc_driver}\\\"/> <property name=\\\"url\\\" value=\\\"${jdbc_url}\\\"/> <property name=\\\"username\\\" value=\\\"${jdbc_username}\\\"/> <property name=\\\"password\\\" value=\\\"${jdbc_password}\\\"/> </dataSource> </environment> </environments> <!-- 映射器 --> <mappers> <!-- 扫描指定目录下的Mapper接口 --> <package name=\\\"com.meturing.mapper\\\"/> <!-- <mapper class=\\\"com.meturing.mapper.EmpMapper\\\" />--> </mappers> </configuration> \",\"注意:由于我们本次使用了代理模式的开发,所以对于Mapper映射器的配置需要我们指向接口所在的位置. 所以我们可以使用<mapper class=\\\"com.meturing.mapper.EmpMapper\\\" /> 指向具体的接口 或者 <package name=\\\"com.meturing.mapper\\\"/> 扫描指定包下所有的接口\",\"创建数据源和Log4j配置文件\",\"#定义全局日志级别调试阶段推荐debug #log4j.rootLogger=debug,stdout,logfile #及打印到控制台又输出到文件 log4j.rootLogger=debug,stdout #stdout 输出到控制台 log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.Target=System.err log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout #logfile 输出到文件 log4j.appender.logfile=org.apache.log4j.FileAppender log4j.appender.logfile.File=d:/meturing.log log4j.appender.logfile.layout=org.apache.log4j.PatternLayout log4j.appender.logfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %l %F %p %m%n \",\"jdbc_driver=com.mysql.cj.jdbc.Driver jdbc_url=jdbc:mysql://192.168.1.188:3306/test?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai jdbc_username=root jdbc_password=root \",\"创建实体类Emp.java\",\"@Data @AllArgsConstructor @NoArgsConstructor public class Emp { private Integer empno; private String ename; private String job; private Integer mgr; private Date hiredate; private Double sal; private Double comm; private Integer deptno; } \",\"创建EmpMapper接口\",\"/** * @author meturing * @description emp映射器 * @date 2023/04/13 */ public interface EmpMapper { } \",\"创建EmpMapper.xml文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTDMapper3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"com.meturing.mapper.EmpMapper\\\"> </mapper> \",\"注意:此时的namespace中需要填写EmpMapper接口的全类路径\",\"创建测试单元类Test1.java\",\"public class Test1 { private static SqlSession sqlSession = null; /** * 初始化 * Before注解会使方法在执行测试单元前执行 * @author sqTan * @date 2023/04/09 * */ @Before public void init() { //创建一个SqlSessionFactoryBuilder对象 SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); InputStream resourceAsStream = null; try { //通过Resources类获取指定配置文件的InputStream流 resourceAsStream = Resources.getResourceAsStream(\\\"sqlMapConfig.xml\\\"); } catch (IOException e) { e.printStackTrace(); } //通过SqlSessionFactoryBuilder对象使用配置文件的InputStream流构建一个SqlSessionFactory对象 SqlSessionFactory build = sqlSessionFactoryBuilder.build(resourceAsStream); //使用SqlSessionFactory对象打开数据库链接 sqlSession = build.openSession(); } /** * 释放 * After注解会使方法在执行测试单元后执行 * @author sqTan * @date 2023/04/09 * */ @After public void release(){ //关闭链接 sqlSession.close(); } } \",\"基本结构见下图:\"]},\"2375\":{\"h\":\"注意事项\",\"t\":[\"特别注意: 在代理模式开发下,:\",\"XML文件放到resources目录下,与接口的层级保持一致\"]},\"2376\":{\"h\":\"简单的Demo\",\"t\":[\"接下来我们创建一个查询所有数据的方法,此时还需要注意:接口中的抽象方法的名字需要与Mapper.xml中的id属性保持一致!!\"]},\"2377\":{\"h\":\"创建接口中的抽象方法\",\"t\":[\"/** * 找到所有 * * @return {@link List }<{@link Emp }> * @author sqTan * @date 2023/04/13 * */ List<Emp> findAll(); \"]},\"2378\":{\"h\":\"创建Mapper.xml中的查询语句\",\"t\":[\"<select id=\\\"findAll\\\" resultType=\\\"emp\\\"> select * from emp </select> \"]},\"2379\":{\"h\":\"使用测试类测试\",\"t\":[\"我们通过sqlSession.getMapper(Class<T> var1)方法获取接口的代理对象,然后直接执行代理对象的方法 构建接口的实现类以及处理查询的操作全部交给Mybatis来处理\",\"@Test public void testFindAll() { EmpMapper mapper = sqlSession.getMapper(EmpMapper.class); List<Emp> empList = mapper.findAll(); empList.stream().forEach(System.out::println); } \"]},\"2380\":{\"h\":\"代理模式浅析\",\"t\":[\"为什么我们通过接口,无需实现类就可以实现对数据库的操作? 简单来讲,在我们使用sqlSession.getMapper(Class<T> var1)方法时,Maybatis底层为我们做了以下事情:\",\"通过该方法在映射器中找到这个接口的字节码文件\",\"在底层动态为我们生成了这个接口的实现类(返回null/无任何意义)\",\"对这个生成的实现类采用动态代理的形式,通过Mapper.xml中的namespace路径匹配,用方法名与标签中的ID配对生成增强的代理对象\",\"将这个增强的类的对象返回给我们使用\"]},\"2381\":{\"h\":\"代理模式基本开发\"},\"2382\":{\"h\":\"参数传递问题\"},\"2383\":{\"h\":\"单一参数\"},\"2384\":{\"h\":\"EmpMapper接口\",\"t\":[\"Emp findByEmpno(int empno); \"]},\"2385\":{\"h\":\"EmpMapper.xml\",\"t\":[\"#{}中可以随便写,遵循见名知意\",\"<select id=\\\"findByEmpno\\\" parameterType=\\\"int\\\" resultType=\\\"emp\\\"> select * from emp where empno=#{empno} </select> \"]},\"2386\":{\"h\":\"测试类\",\"t\":[\"@Test public void testFindByEmpno() { EmpMapper mapper = sqlSession.getMapper(EmpMapper.class); Emp byEmpno = mapper.findByEmpno(7499); System.out.println(byEmpno); } \"]},\"2387\":{\"h\":\"多参数\"},\"2388\":{\"h\":\"方式一 : arg*\",\"t\":[\"arg相当于通过数组获取参数结果,所以下标从0开始\",\"EmpMapper接口\",\"List<Emp> findByDeptnoAndSal(int deptno,double sal); \",\"EmpMapper.xml\",\"<select id=\\\"findByEmpno\\\" resultType=\\\"emp\\\"> select * from emp where deptno =#{arg0} and sal &gt;= #{arg1} </select> \"]},\"2389\":{\"h\":\"方式二 : param*\",\"t\":[\"arg相当于通过参数位置获取参数结果,所以下标从1开始\",\"EmpMapper接口\",\"List<Emp> findByDeptnoAndSal(int deptno,double sal); \",\"EmpMapper.xml\",\"<select id=\\\"findByEmpno\\\" resultType=\\\"emp\\\"> select * from emp where deptno =#{param1} and sal &gt;= #{param2} </select> \"]},\"2390\":{\"h\":\"方式三 : @Param别名\",\"t\":[\"通过@Param注解使用别名之后,就不能再使用arg* 但是可以继续使用param*\",\"EmpMapper接口\",\"List<Emp> findByDeptnoAndSal(@Param(\\\"deptno\\\") int deptno, @Param(\\\"sal\\\") double sal); \",\"EmpMapper.xml\",\"<select id=\\\"findByEmpno\\\" resultType=\\\"emp\\\"> select * from emp where deptno =#{deptno} and sal &gt;= #{sal} </select> \"]},\"2391\":{\"h\":\"测试类\",\"t\":[\"@Test public void testFindByDeptnoAndSal() { EmpMapper mapper = sqlSession.getMapper(EmpMapper.class); List<Emp> byDeptnoAndSal = mapper.findByDeptnoAndSal(20, 1500.0); byDeptnoAndSal.stream().forEach(System.out::println); } \"]},\"2392\":{\"h\":\"集合\",\"t\":[\"参数是map,{}写键的名字\"]},\"2393\":{\"h\":\"EmpMapper接口\",\"t\":[\"List<Emp> findMapByDeptnoAndSal(Map<String, Object> map); \"]},\"2394\":{\"h\":\"EmpMapper.xml\",\"t\":[\"#{}中可以随便写,遵循见名知意\",\"<select id=\\\"findMapByDeptnoAndSal\\\" parameterType=\\\"map\\\" resultType=\\\"emp\\\"> select * from emp where deptno =#{deptno} and sal &gt;= #{sal} </select> \"]},\"2395\":{\"h\":\"测试类\",\"t\":[\"@Test public void findMapByDeptnoAndSal() { EmpMapper mapper = sqlSession.getMapper(EmpMapper.class); HashMap<String, Object> map = new HashMap<>(); map.put(\\\"deptno\\\",20); map.put(\\\"sal\\\",1500.0); List<Emp> byDeptnoAndSal = mapper.findMapByDeptnoAndSal(map); byDeptnoAndSal.stream().forEach(System.out::println); } \"]},\"2396\":{\"h\":\"单个引用对象\",\"t\":[\"单个引用类型,{}中写的使用对象的属性名\"]},\"2397\":{\"h\":\"EmpMapper接口\",\"t\":[\"List<Emp> findObjectByDeptnoAndSal1 (Emp emp); \"]},\"2398\":{\"h\":\"EmpMapper.xml\",\"t\":[\"#{}中可以随便写,遵循见名知意\",\"<select id=\\\"findObjectByDeptnoAndSal1\\\" parameterType=\\\"emp\\\" resultType=\\\"emp\\\"> select * from emp where deptno =#{deptno} and sal &gt;= #{sal} </select> \"]},\"2399\":{\"h\":\"测试类\",\"t\":[\"@Test public void findObjectByDeptnoAndSal1() { EmpMapper mapper = sqlSession.getMapper(EmpMapper.class); Emp emp = new Emp(); emp.setDeptno(20); emp.setSal(1500.0); List<Emp> byDeptnoAndSal = mapper.findObjectByDeptnoAndSal1(emp); byDeptnoAndSal.stream().forEach(System.out::println); } \"]},\"2400\":{\"h\":\"多个引用对象\"},\"2401\":{\"h\":\"方式一 : arg*\",\"t\":[\"arg相当于通过数组获取参数结果,所以下标从0开始\",\"EmpMapper接口\",\"List<Emp> findObjectByDeptnoAndSal2 (Emp emp1,Emp emp2); \",\"EmpMapper.xml\",\"<select id=\\\"findObjectByDeptnoAndSal2\\\" resultType=\\\"emp\\\"> select * from emp where deptno =#{arg0.deptno} and sal &gt;= #{arg1.sal} </select> \"]},\"2402\":{\"h\":\"方式二 : param*\",\"t\":[\"arg相当于通过参数位置获取参数结果,所以下标从1开始\",\"EmpMapper接口\",\"List<Emp> findObjectByDeptnoAndSal2 (Emp emp1,Emp emp2); \",\"EmpMapper.xml\",\"<select id=\\\"findObjectByDeptnoAndSal2\\\" resultType=\\\"emp\\\"> select * from emp where deptno =#{param1.deptno} and sal &gt;= #{param2.sal} </select> \"]},\"2403\":{\"h\":\"方式三 : @Param别名\",\"t\":[\"通过@Param注解使用别名之后,就不能再使用arg* 但是可以继续使用param*\",\"EmpMapper接口\",\"List<Emp> findObjectByDeptnoAndSal2 (@Param(\\\"emp1\\\") Emp emp1,@Param(\\\"emp2\\\") Emp emp2); \",\"EmpMapper.xml\",\"<select id=\\\"findByEmpno\\\" resultType=\\\"emp\\\"> select * from emp where deptno =#{emp1.deptno} and sal &gt;= #{emp2.sal} </select> \"]},\"2404\":{\"h\":\"测试类\",\"t\":[\"@Test public void findObjectByDeptnoAndSal2() { EmpMapper mapper = sqlSession.getMapper(EmpMapper.class); Emp emp1 = new Emp(); emp1.setDeptno(20); Emp emp2 = new Emp(); emp2.setSal(1500.0); List<Emp> byDeptnoAndSal = mapper.findObjectByDeptnoAndSal2(emp1,emp2); byDeptnoAndSal.stream().forEach(System.out::println); } \"]},\"2405\":{\"h\":\"模糊查询\"},\"2406\":{\"h\":\"方式一:直接在参数中处理\",\"t\":[\"EmpMapper.java 接口\",\"List<Emp> findObjectByName(String ename); \",\"EmpMapper.xml\",\"<select id=\\\"findObjectByName\\\" parameterType=\\\"string\\\" resultType=\\\"emp\\\"> select * from emp where ename like #{ename} </select> \",\"测试单元\",\"public void findObjectByName(){ EmpMapper mapper = sqlSession.getMapper(EmpMapper.class); List<Emp> empList = mapper.findObjectByName(\\\"%a%\\\"); empList.stream().forEach(System.out::println); } \"]},\"2407\":{\"h\":\"方式二: 使用concat()函数拼接 - 推荐\",\"t\":[\"在进行模糊查询时，在映射文件中可以使用concat()函数来连接参数和通配符。另外注意对于特殊字符，比如<，不能直接书写，应该使用字符实体替换。\",\"EmpMapper.java 接口\",\"List<Emp> findObjectByName(String ename); \",\"EmpMapper.xml\",\"<select id=\\\"findObjectByName\\\" parameterType=\\\"string\\\" resultType=\\\"emp\\\"> select * from emp where ename like concat('%',#{ename},'%') </select> \",\"测试单元\",\"@Test public void findObjectByName(){ EmpMapper mapper = sqlSession.getMapper(EmpMapper.class); List<Emp> empList = mapper.findObjectByName(\\\"a\\\"); empList.stream().forEach(System.out::println); } \"]},\"2408\":{\"h\":\"自增主键回填\",\"t\":[\"MySQL支持主键自增。有时候完成添加后需要立刻获取刚刚自增的主键，由下一个操作来使用。比如结算构造车后，主订单的主键确定后，需要作为后续订单明细项的外键存在。如何拿到主键呢，MyBatis提供了支持，可以非常简单的获取。\",\"在很多应用场景中需要新增数据后获取到新增数据的主键值，针对这样的需求一般由三种解决方式：\",\"主键自定义，用户通过UUID或时间戳等方式生成唯一主键，把这个值当做主键值。在分布式场景中应用较多\",\"查询后通过select max(主键) from 表获取主键最大值。这种方式在多线程访问情况下可能出现问题\",\"查询后通过select @@identity获取最新生成主键。要求这条SQL必须在insert操作之后，且数据库连接没有关闭\"]},\"2409\":{\"h\":\"方式一 : useGeneratedKeys - 推荐\",\"t\":[\"DeptMapper.java接口\",\"int insterDept(Dept dept); \",\"DeptMapper.xml - useGeneratedKeys=\\\"true\\\" 返回数据库帮我们生成的主键_ - keyProperty=\\\"deptno\\\" 生成的主键值用我们dept对象那个属性存储_\",\"<insert id=\\\"insterDept\\\" parameterType=\\\"dept\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"deptno\\\"> INSERT INTO dept VALUES(#{deptno},#{dname},#{loc}) </insert> \",\"测试单元\",\"@Test public void insterDept() { DeptMapper deptMapper = sqlSession.getMapper(DeptMapper.class); Dept dept = new Dept(null, \\\"Java\\\", \\\"北京\\\"); deptMapper.insterDept(dept); System.out.println(dept); } \",\"我们看到,当我们执行成功后,插入生成的主键将会重新回填到原有的对象中\"]},\"2410\":{\"h\":\"方式二 : selectKey标签\",\"t\":[\"参数详解 order：取值AFTER|BEFORE，表示在新增之后|之前执行<selectKey>中的SQL命令 keyProperty：执行select @@identity后结果填充到哪个属性中\",\"DeptMapper.java接口\",\"int insterDept(Dept dept); \",\"DeptMapper.xml 使用selectKey标签检索,order=\\\"AFTER\\\"表示插入之后,keyProperty=\\\"deptno\\\"设置主键字段, resultType=\\\"int\\\"表示主键类型, select @@identity 得到上一次插入记录时自动产生的ID\",\"<insert id=\\\"insterDept2\\\" parameterType=\\\"dept\\\"> <selectKey order=\\\"AFTER\\\" keyProperty=\\\"deptno\\\" resultType=\\\"int\\\"> select @@identity </selectKey> insert into dept values(null,#{dname},#{loc}) </insert> \",\"测试单元\",\"@Test public void insterDept() { DeptMapper deptMapper = sqlSession.getMapper(DeptMapper.class); Dept dept = new Dept(null, \\\"Java\\\", \\\"北京\\\"); deptMapper.insterDept(dept); System.out.println(dept); } \",\"我们看到,当我们执行成功后,插入生成的主键将会重新回填到原有的对象中\"]},\"2411\":{\"h\":\"实现DML操作\"},\"2412\":{\"h\":\"新增\",\"t\":[\"见 [[Mybatis代理模式的开发#自增主键回填]]]\"]},\"2413\":{\"h\":\"查询\",\"t\":[\"DeptMapper.java接口\",\"Dept findDeptById(int deptId); \",\"DeptMapper.xml\",\"<select id=\\\"findDeptById\\\" parameterType=\\\"int\\\" resultType=\\\"dept\\\"> select * from dept where deptno =#{deptno} </select> \",\"测试单元\",\"@Test public void updateDept(){ DeptMapper deptMapper = sqlSession.getMapper(DeptMapper.class); Dept deptById = deptMapper.findDeptById(43); } \"]},\"2414\":{\"h\":\"修改\",\"t\":[\"DeptMapper.java接口\",\"int updateDept(Dept dept); \",\"DeptMapper.xml\",\"<update id=\\\"updateDept\\\" parameterType=\\\"dept\\\"> UPDATE dept SET DNAME=#{dname}, LOC=#{loc} WHERE DEPTNO=#{deptno} </update> \",\"测试单元\",\"@Test public void updateDept(){ DeptMapper deptMapper = sqlSession.getMapper(DeptMapper.class); Dept deptById = deptMapper.findDeptById(43); deptById.setLoc(\\\"上海\\\"); deptMapper.updateDept(deptById); } \"]},\"2415\":{\"h\":\"删除\",\"t\":[\"DeptMapper.java接口\",\"int deleteDept(int deptNo); \",\"DeptMapper.xml\",\"<delete id=\\\"deleteDept\\\" parameterType=\\\"int\\\"> DELETE FROM dept WHERE DEPTNO=#{deptno} </delete> \",\"测试单元\",\"@Test public void deleteDept(){ DeptMapper deptMapper = sqlSession.getMapper(DeptMapper.class); deptMapper.deleteDept(43); } \"]},\"2416\":{\"h\":\"Mybatis多表查询\"},\"2417\":{\"h\":\"数据准备\",\"t\":[\"CREATE TABLE `projects` ( `pid` int(2) NOT NULL AUTO_INCREMENT, `pname` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL, `money` int(11) NULL DEFAULT NULL, PRIMARY KEY (`pid`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic; INSERT INTO `projects` VALUES (1, ' ***大学OA', 500000); INSERT INTO `projects` VALUES (2, '学生选课系统', 100000); INSERT INTO `projects` VALUES (3, '讲师测评系统', 20000); INSERT INTO `projects` VALUES (4, '线上问答系统 ', 20000); CREATE TABLE `projectrecord` ( `empno` int(4) NOT NULL, `pid` int(2) NOT NULL, PRIMARY KEY (`empno`, `pid`) USING BTREE, INDEX `fk_project_pro`(`pid`) USING BTREE, CONSTRAINT `fk_emp_pro` FOREIGN KEY (`empno`) REFERENCES `emp` (`EMPNO`) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_project_pro` FOREIGN KEY (`pid`) REFERENCES `projects` (`pid`) ON DELETE CASCADE ON UPDATE CASCADE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic; INSERT INTO `projectrecord` VALUES (7369, 1); INSERT INTO `projectrecord` VALUES (7521, 1); INSERT INTO `projectrecord` VALUES (7369, 2); INSERT INTO `projectrecord` VALUES (7499, 2); INSERT INTO `projectrecord` VALUES (7521, 2); INSERT INTO `projectrecord` VALUES (7369, 3); INSERT INTO `projectrecord` VALUES (7499, 3); INSERT INTO `projectrecord` VALUES (7521, 3); INSERT INTO `projectrecord` VALUES (7369, 4); INSERT INTO `projectrecord` VALUES (7499, 4); \"]},\"2418\":{\"h\":\"resultMap标签\"},\"2419\":{\"h\":\"resultType和resultMap\",\"t\":[\"resultType \",\"resultType可以把查询结果封装到pojo类型中，但必须pojo类的属性名和查询到的数据库表的字段名一致。如果sql查询到的字段与pojo的属性名不一致，则需要使用resultMap将字段名和属性名对应起来，进行手动配置封装，将结果映射到pojo中\",\"resultMap \",\"resultMap可以实现将查询结果映射为复杂类型的pojo，比如在查询结果映射对象中包括pojo和list实现一对一查询和一对多查询。\"]},\"2420\":{\"h\":\"resultMap标签解析\",\"t\":[\"resultMap元素属性\",\"id:映射规则集的唯一标识，可以被select元素的resultMap属性应用\",\"type:映射的结果类型，这里指定封装成userList实例\",\"resultMap元素包含以下子元素\",\" id:指定和数据表主键字段对应的标识属性。设置此项可以提升MyBatis框架的性能，特别是应用缓存和嵌套结果映射的时候。\",\"result:指定结果集字段和实体类属性的映射关系。\",\"association:映射到JavaBean某个“复杂类型”属性，比如JavaBean类\",\"collection:映射到JavaBean某个“复杂类型”属性，比如集合\"]},\"2421\":{\"h\":\"关联查询\"},\"2422\":{\"h\":\"手动映射\",\"t\":[\"如果实体类中的字段名字与数据库中的字段名字不符的话,我们可以通过resultMap标签进行手动映射\",\"例如: Dept在数据库中存在dname字段,但在实体类中叫做name\",\"DeptMapper.Java接口\",\"List<Dept> findDepts(); \",\"DeptMapper.XML\",\"<!--手动处理字段之间的映射关系--> <resultMap id=\\\"deptMap\\\" type=\\\"dept\\\"> <!--id标识当前字段为主键--> <id column=\\\"deptno\\\" property=\\\"deptno\\\"></id> <!--当属性名和查询出的数据表字段名相同 可以不写映射关系--> <!--column表示数据库中的字段名 property表示实体类中的字段名--> <result column=\\\"dname\\\" property=\\\"name\\\"></result> <result column=\\\"loc\\\" property=\\\"loc\\\"></result> </resultMap> <select id=\\\"findDepts\\\" resultMap=\\\"deptMap\\\"> select * from dept </select> \",\"测试代码\",\"@Test public void findDepts(){ DeptMapper deptMapper = sqlSession.getMapper(DeptMapper.class); List<Dept> deptList = deptMapper.findDepts(); deptList.stream().forEach(System.out::println); } \"]},\"2423\":{\"h\":\"一对一查询 : association子属性\",\"t\":[\"根据编号查询员工信息及所在的部门信息\",\"执行的SQL:\",\"select * from emp e left join dept d on e.deptno =d.deptno where empno = '7499' \"]},\"2424\":{\"h\":\"分析\",\"t\":[\"我们看到emp表与dept表存在一对一的关系,所以在构建实体类的时候可以为emp表中创建一个dept的私有属性\"]},\"2425\":{\"h\":\"代码\",\"t\":[\"构建实体类\",\"@Data @AllArgsConstructor @NoArgsConstructor public class Emp implements Serializable { private Integer empno; private String ename; private String job; private Integer mgr; private Date hiredate; private Double sal; private Double comm; private Integer deptno; private Dept dept; } \",\"@Data //所有参数构造Get/Set方法 @AllArgsConstructor //导入全参构造函数 @NoArgsConstructor //导入无参构造函数 public class Dept implements Serializable { private Integer deptno; private String name; private String loc; } \",\"接口\",\"List<Emp> findEmpJoinDeptByEmpno(String empno); \",\"Mapper\",\"<resultMap id=\\\"empMap\\\" type=\\\"emp\\\"> <!--设置emp本身的八个属性的映射关系--> <id column=\\\"empno\\\" property=\\\"empno\\\"></id> <result column=\\\"ename\\\" property=\\\"ename\\\"></result> <result column=\\\"job\\\" property=\\\"job\\\"></result> <result column=\\\"mgr\\\" property=\\\"mgr\\\"></result> <result column=\\\"hiredate\\\" property=\\\"hiredate\\\"></result> <result column=\\\"sal\\\" property=\\\"sal\\\"></result> <result column=\\\"comm\\\" property=\\\"comm\\\"></result> <result column=\\\"deptno\\\" property=\\\"deptno\\\"></result> <!-- association 处理一对一 封装一对一信息关系的标签 property emp类的属性名 javaType 用哪个类的对象给属性赋值 --> <association property=\\\"dept\\\" javaType=\\\"dept\\\"> <id column=\\\"deptno\\\" property=\\\"deptno\\\"></id> <result column=\\\"dname\\\" property=\\\"name\\\"></result> <result column=\\\"loc\\\" property=\\\"loc\\\"></result> </association> </resultMap> <select id=\\\"findEmpJoinDeptByEmpno\\\" resultMap=\\\"empMap\\\"> select * from emp e left join dept d on e.deptno =d.deptno where empno = #{empno} </select> \",\"测试\",\"@Test public void findEmpJoinDeptByEmpno(){ EmpMapper empMapper = sqlSession.getMapper(EmpMapper.class); List<Emp> empList = empMapper.findEmpJoinDeptByEmpno(\\\"7499\\\"); empList.stream().forEach(System.out::println); } \"]},\"2426\":{\"h\":\"一对多查询 : collection子属性\",\"t\":[\"根据部门号查询部门信息及该部门的所有员工信息\",\"执行的SQL:\",\"select * from dept d left join emp e on d.deptno =e.deptno where d.deptno = 20 \"]},\"2427\":{\"h\":\"分析\",\"t\":[\"我们看到emp表与dept表存在多对一的关系,所以在构建实体类的时候可以为dept表中创建一个emp集合的私有属性\"]},\"2428\":{\"h\":\"代码\",\"t\":[\"构建实体类\",\"@Data //所有参数构造Get/Set方法 @AllArgsConstructor //导入全参构造函数 @NoArgsConstructor //导入无参构造函数 public class Dept1 implements Serializable { private Integer deptno; private String name; private String loc; private List<Emp1> emp1List; } \",\"@Data @AllArgsConstructor @NoArgsConstructor public class Emp1 implements Serializable { private Integer empno; private String ename; private String job; private Integer mgr; private Date hiredate; private Double sal; private Double comm; private Integer deptno; } \",\"接口\",\"List<Dept1> findDeptLeftEmp(Integer deptno); \",\"Mapper\",\"<resultMap id=\\\"findDeptLeftEmp\\\" type=\\\"dept1\\\"> <!--id标识当前字段为主键--> <id column=\\\"deptno\\\" property=\\\"deptno\\\"></id> <!--当属性名和查询出的数据表字段名相同 可以不写映射关系--> <!--column表示数据库中的字段名 property表示实体类中的字段名--> <result column=\\\"dname\\\" property=\\\"name\\\"></result> <result column=\\\"loc\\\" property=\\\"loc\\\"></result> <collection property=\\\"emp1List\\\" ofType=\\\"emp1\\\"> <id column=\\\"empno\\\" property=\\\"empno\\\"></id> <result column=\\\"ename\\\" property=\\\"ename\\\"></result> <result column=\\\"job\\\" property=\\\"job\\\"></result> <result column=\\\"mgr\\\" property=\\\"mgr\\\"></result> <result column=\\\"hiredate\\\" property=\\\"hiredate\\\"></result> <result column=\\\"sal\\\" property=\\\"sal\\\"></result> <result column=\\\"comm\\\" property=\\\"comm\\\"></result> <result column=\\\"deptno\\\" property=\\\"deptno\\\"></result> </collection> </resultMap> <select id=\\\"findDeptLeftEmp\\\" resultMap=\\\"findDeptLeftEmp\\\"> select * from dept d left join emp e on d.deptno =e.deptno where d.deptno =#{deptno} </select> \",\"测试\",\"@Test public void findDeptLeftEmp(){ DeptMapper mapper = sqlSession.getMapper(DeptMapper.class); List<Dept1> dept1s = mapper.findDeptLeftEmp(20); dept1s.stream().forEach(System.out::println); } \"]},\"2429\":{\"h\":\"多对多查询 : 组合使用\",\"t\":[\"根据项目编号查询项目信息,以及参与到该项目之中的所有的员工信息\",\"执行的SQL:\",\"select * from projects p left join projectrecord pr on p.pid = pr.pidleft join emp e on e.empno = pr.empno where p.pid= 2 \"]},\"2430\":{\"h\":\"分析\",\"t\":[\"projects表 对应多个 projectrecord表 ,同时projectrecord表中又通过empno与emp表关联\",\"所以我们可以在projects实体类中创建projectrecord实体类的集合,并在projectrecord实体类中创建emp的属性\"]},\"2431\":{\"h\":\"代码\",\"t\":[\"构建实体类\",\"@Data @NoArgsConstructor @AllArgsConstructor public class Projects implements Serializable { private Integer pid; private String pname; private Integer money; private List<Projectrecord> projectrecordList; } \",\"@Data @NoArgsConstructor @AllArgsConstructor public class Projectrecord implements Serializable { private Integer empno; private Integer pid; private Emp emp; } \",\"接口\",\"List<Projects> findProjectsInfo(Integer pid); \",\"Mapper\",\"<resultMap id=\\\"findProjectsInfo\\\" type=\\\"projects\\\"> <!--projects的属性--> <id column=\\\"pid\\\" property=\\\"pid\\\"></id> <result column=\\\"pname\\\" property=\\\"pname\\\"></result> <result column=\\\"money\\\" property=\\\"money\\\"></result> <!-- 一对多: projectrecord的集合--> <collection property=\\\"projectrecordList\\\" ofType=\\\"projectrecord\\\"> <id column=\\\"empno\\\" property=\\\"empno\\\"></id> <id column=\\\"pid\\\" property=\\\"pid\\\"></id> <!-- 一对一: pemp的实体对象--> <association property=\\\"emp\\\" javaType=\\\"emp\\\"> <id column=\\\"empno\\\" property=\\\"empno\\\"></id> <result column=\\\"ename\\\" property=\\\"ename\\\"></result> <result column=\\\"job\\\" property=\\\"job\\\"></result> <result column=\\\"mgr\\\" property=\\\"mgr\\\"></result> <result column=\\\"hiredate\\\" property=\\\"hiredate\\\"></result> <result column=\\\"sal\\\" property=\\\"sal\\\"></result> <result column=\\\"comm\\\" property=\\\"comm\\\"></result> <result column=\\\"deptno\\\" property=\\\"deptno\\\"></result> </association> </collection> </resultMap> <select id=\\\"findProjectsInfo\\\" parameterType=\\\"integer\\\" resultMap=\\\"findProjectsInfo\\\"> select * from projects p left join projectrecord pr on p.pid = pr.pid left join emp e on e.empno = pr.empno where p.pid= #{pid} </select> \",\"测试\",\"@Test public void findProjectsInfo(){ ProjectsMapper mapper = sqlSession.getMapper(ProjectsMapper.class); List<Projects> dept1s = mapper.findProjectsInfo(2); dept1s.stream().forEach(System.out::println); } \"]},\"2432\":{\"h\":\"级联查询\",\"t\":[\"级联查询，顾名思义，就是利于数据库表间的外键关联关系进行自动的级联查询操作。使用MyBatis实现级联查询，除了实体类增加关联属性外，还需要在映射文件中进行配置。\"]},\"2433\":{\"h\":\"语法\",\"t\":[\"主要是对于: fetchType=\\\"eager\\\" 的配置,默认不配置则为积极加载\",\"<collection property=\\\"需要保存到的字段名\\\" select=\\\"需要执行的Mapper方法全类路径名\\\" javaType=\\\"返回的类型\\\" column=\\\"传入的参数\\\" jdbcType=\\\"参数的类型[可不写]\\\" fetchType=\\\"eager\\\"></collection> \",\"fetchType=\\\"lazy\\\" 表示懒加载,延迟加载\"]},\"2434\":{\"h\":\"积极加载与懒加载\",\"t\":[\"默认为积极加载则无论是否使用,则都将级联中的方法进行执行\",\"延迟加载，又称按需加载。延迟加载的内容等到真正使用时才去进行加载（查询）。多用在关联对象或集合中。\",\"延迟加载的好处：先从单表查询、需要时再从关联表去关联查询，大大降低数据库在单位时间内的查询工作量,将工作在时间上的分配更加均匀，而且单表要比关联查询多张表速度要快。\",\"懒加载的配置:\",\"全局开关：在sqlMapConfig.xml中打开延迟加载的开关。配置完成后所有的association和collection元素都生效\",\"<settings> <setting name=\\\"lazyLoadingEnabled\\\" value=\\\"true\\\"/> <setting name=\\\"aggressiveLazyLoading\\\" value=\\\"true\\\"/> </settings> \",\"lazyLoadingEnabled:是否开启延迟加载。是Mybatis是否启用懒加载的全局开关。当开启时，所有关联对象都会延迟加载。特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态aggressiveLazyLoading：当开启时，任何方法的调用都会懒加载对象的所有属性。否则，每个属性会按需加载, 2. 指定的association和collection元素中配置fetchType属性(eager：表示立刻加载；lazy：表示延迟加载)。将覆盖全局延迟设置\"]},\"2435\":{\"h\":\"案例\",\"t\":[\"Dept.Java\",\"@Data //所有参数构造Get/Set方法 @AllArgsConstructor //导入全参构造函数 @NoArgsConstructor //导入无参构造函数 public class Dept implements Serializable { private Integer deptno; private String dname; private String loc; private List<Emp> empList; } \",\"Emp.Java\",\"@Data @AllArgsConstructor @NoArgsConstructor public class Emp implements Serializable { private Integer empno; private String ename; private String job; private Integer mgr; private Date hiredate; private Double sal; private Double comm; private Integer deptno; } \",\"Dept.java接口\",\"Dept findeDept(Integer deptno); \",\"Emp.java接口\",\"Emp findEmp(Integer deptno); \",\"DeptMapper.XML\",\"<resultMap id=\\\"findDeptAndEmp\\\" type=\\\"dept\\\"> <id column=\\\"deptno\\\" property=\\\"deptno\\\"></id> <result column=\\\"dname\\\" property=\\\"dname\\\"></result> <result column=\\\"loc\\\" property=\\\"loc\\\"></result> <!-- select=\\\"com.meturing.mapper.EmpMapper.findEmp\\\" 表示调用该Mapper的findEmp方法 javaType=\\\"list\\\" 表示返回值是一个list类型 column=\\\"deptno\\\" 表示需要传递的参数 jdbcType=\\\"INTEGER\\\" 表示参数的类型 fetchType=\\\"lazy\\\" 表示懒加载 --> <collection property=\\\"empList\\\" select=\\\"com.meturing.mapper.EmpMapper.findEmp\\\" javaType=\\\"list\\\" column=\\\"deptno\\\" jdbcType=\\\"INTEGER\\\" fetchType=\\\"lazy\\\"></collection> </resultMap> <select id=\\\"findeDept\\\" parameterType=\\\"integer\\\" resultMap=\\\"findDeptAndEmp\\\"> select * from dept where deptno=#{deptno} </select> \",\"EmpMapper.XML\",\"<select id=\\\"findEmp\\\" parameterType=\\\"integer\\\" resultType=\\\"emp\\\"> select * from emp where DEPTNO =#{deptno} </select> \",\"测试方法:\",\"@Test public void Test01(){ DeptMapper mapper = sqlSession.getMapper(DeptMapper.class); Dept dept = mapper.findeDept(20); //System.out.println(dept); } \",\"上述案例,当我们直接执行测试后,我们发现:\",\"由于使用了延迟加载,只会执行一次查询,将Dept中的结果搜索出来,Dept.Java中的empList为null\",\"当我们使用Dept属性时,则会通过级联的方法给empList中调用com.meturing.mapper.EmpMapper.findEmp赋值\"]},\"2436\":{\"h\":\"总结\"},\"2437\":{\"h\":\"resultMap中的常见属性\",\"t\":[\"属性\",\"描述\",\"property\",\"需要映射到JavaBean 的属性名称\",\"javaType\",\"property的类型，一个完整的类名，或者是一个类型别名。如果你匹配的是一个JavaBean，那MyBatis 通常会自行检测到\",\"column\",\"数据表的列名或者列别名\",\"jdbcType\",\"column在数据库表中的类型。这个属性只在insert,update 或delete 的时候针对允许空的列有用。JDBC 需要这项，但MyBatis 不需要\",\"typeHandler\",\"使用这个属性可以覆写类型处理器，实现javaType、jdbcType之间的相互转换。一般可以省略，会探测到使用的什么类型的typeHandler进行处理\",\"fetchType\",\"自动延迟加载\",\"select\",\"association、collection的属性，使用哪个查询查询属性的值，要求指定namespace+id的全名称\",\"ofType\",\"collection的属性，指明集合中元素的类型（即泛型类型）\"]},\"2438\":{\"h\":\"级联查询和多表查询的比较及其选择\",\"t\":[\"级联查询\",\"多表查询\",\"SQL语句数量\",\"多条\",\"一条\",\"性能\",\"性能低\",\"性能高\",\"延迟加载\",\"立即加载、延迟加载\",\"只有立即加载\",\"灵活性\",\"更灵活\",\"不灵活\",\"SQL难易度\",\"简单\",\"复杂\",\"选择依据\",\"简单、灵活\",\"高性能\"]},\"2439\":{\"h\":\"ResultType和ResultMap使用场景\",\"t\":[\"如果你做的是单表的查询并且封装的实体和数据库的字段一一对应 resultType\",\"如果实体封装的属性和数据库的字段不一致 resultMap\",\"使用N+1级联查询的时候 resultMap\",\"使用的是多表的连接查询 resultMap\"]},\"2440\":{\"h\":\"多表之间的实现步骤\",\"t\":[\"一对一关联映射的实现\",\"实例：学生和学生证、雇员和工牌\",\"数据库层次：主键关联或者外键关联\",\"MyBatis层次：在映射文件的设置双方均使用association即可，用法相同\",\"多对多映射的实现\",\"实例：学生和课程、用户和角色\",\"数据库层次：引入一个中间表将一个多对多转为两个一对多\",\"MyBatis层次 方法1：在映射文件的设置双方均使用collection即可，不用引入中间类 方法2：引入中间类和中间类的映射文件，按照两个一对多处理\",\"自关联映射\",\"实例：Emp表中的员工和上级。一般是一对多关联\",\"数据库层次：外键参考当前表的主键（比如mgr参考empno）\",\"MyBatis层次：按照一对多处理，但是增加的属性都写到一个实体类中，增加的映射也都写到一个映射文件中\"]},\"2441\":{\"h\":\"Mybatis动态SQL\",\"t\":[\"MyBatis在简化操作方法提出了动态SQL功能，将使用Java代码拼接SQL语句，改变为在XML映射文件中截止标签拼接SQL语句。相比而言，大大减少了代码量，更灵活、高度可配置、利于后期维护。\",\"MyBatis中动态SQL是编写在mapper.xml中的，其语法和JSTL类似，但是却是基于强大的OGNL表达式实现的。\",\"MyBatis也可以在注解中配置SQL，但是由于注解功能受限，尤其是对于复杂的SQL语句，可读性很差，所以较少使用。\"]},\"2442\":{\"h\":\"IF标签\"},\"2443\":{\"h\":\"语法\",\"t\":[\"<if test=\\\"条件1\\\">语句1</if> \",\"如果满足条件1,则会拼接语句1\"]},\"2444\":{\"h\":\"案例\",\"t\":[\"EmpMapper.Java接口\",\"List<Emp> findByCondition(Emp emp); \",\"EmpMapper.XML\",\"<select id=\\\"findByCondition\\\" resultType=\\\"emp\\\" parameterType=\\\"emp\\\"> select * from emp where 1=1 <if test=\\\"empno!=null\\\"> and empno = #{empno} </if> <if test=\\\"ename!=null and ename!='' \\\"> and ename = #{ename} </if> <if test=\\\"job!=null and job!='' \\\"> and job = #{job} </if> <if test=\\\"mgr!=null\\\"> and mgr = #{mgr} </if> <if test=\\\"hiredate!=null and hiredate!='' \\\"> and hiredate = #{hiredate} </if> <if test=\\\"sal!=null\\\"> and sal = #{sal} </if> <if test=\\\"comm!=null\\\"> and comm = #{comm} </if> <if test=\\\"deptno!=null\\\"> and deptno = #{deptno} </if> </select> \",\"测试代码一:\",\"@Test public void findByCondition(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); Emp emp = new Emp(); List<Emp> empList = mapper.findByCondition(emp); empList.stream().forEach(System.out::println); } \",\"上述测试文件最终执行的语句是 : select * from emp where 1=1\",\"测试代码二:\",\"@Test public void findByCondition(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); Emp emp = new Emp(); emp.setEmpno(7499); List<Emp> empList = mapper.findByCondition(emp); empList.stream().forEach(System.out::println); } \",\"上述测试文件最终执行的语句是 : select * from emp where 1=1 and empno = ?\"]},\"2445\":{\"h\":\"WHERE标签\"},\"2446\":{\"h\":\"语法\",\"t\":[\"<where>语句块</where> \",\"用于处理where和and:\",\"当语句块中存在语句时,会自动拼接Where\",\"当第一个条件前带有and时,会自动处理多余的and\"]},\"2447\":{\"h\":\"案例\",\"t\":[\"EmpMapper.Java接口\",\"List<Emp> findByCondition(Emp emp); \",\"EmpMapper.XML\",\"<select id=\\\"findByCondition\\\" resultType=\\\"emp\\\" parameterType=\\\"emp\\\"> select * from emp <where> <if test=\\\"empno!=null\\\"> and empno = #{empno} </if> <if test=\\\"ename!=null and ename!='' \\\"> and ename = #{ename} </if> <if test=\\\"job!=null and job!='' \\\"> and job = #{job} </if> <if test=\\\"mgr!=null\\\"> and mgr = #{mgr} </if> <if test=\\\"hiredate!=null and hiredate!='' \\\"> and hiredate = #{hiredate} </if> <if test=\\\"sal!=null\\\"> and sal = #{sal} </if> <if test=\\\"comm!=null\\\"> and comm = #{comm} </if> <if test=\\\"deptno!=null\\\"> and deptno = #{deptno} </if> </where> </select> \",\"测试代码一:\",\"@Test public void findByCondition(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); Emp emp = new Emp(); List<Emp> empList = mapper.findByCondition(emp); empList.stream().forEach(System.out::println); } \",\"上述测试文件最终执行的语句是 : select * from emp\",\"测试代码二:\",\"@Test public void findByCondition(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); Emp emp = new Emp(); emp.setEmpno(7499); List<Emp> empList = mapper.findByCondition(emp); empList.stream().forEach(System.out::println); } \",\"上述测试文件最终执行的语句是 : select * from emp where empno = ?\"]},\"2448\":{\"h\":\"CHOOSE标签\"},\"2449\":{\"h\":\"语法\",\"t\":[\"<choose> <when test='条件1'>语句1</when> <when test='条件2'>语句2</when> </choose> \",\"相当于Java代码中的switch:case,满足条件后执行指定的语句,但是后续判断的语句将不再执行\"]},\"2450\":{\"h\":\"案例\",\"t\":[\"EmpMapper.Java接口\",\"List<Emp> findByCondition(Emp emp); \",\"EmpMapper.XML\",\"<select id=\\\"findByCondition\\\" resultType=\\\"emp\\\" parameterType=\\\"emp\\\"> select * from emp <where> <choose> <when test=\\\"empno!=null\\\"> and empno = #{empno} </when> <when test=\\\"ename!=null and ename!='' \\\"> and ename = #{ename} </when> <when test=\\\"job!=null and job!='' \\\"> and job = #{job} </when> <when test=\\\"mgr!=null\\\"> and mgr = #{mgr} </when> <when test=\\\"hiredate!=null and hiredate!='' \\\"> and hiredate = #{hiredate} </when> <when test=\\\"sal!=null\\\"> and sal = #{sal} </when> <when test=\\\"comm!=null\\\"> and comm = #{comm} </when> <when test=\\\"deptno!=null\\\"> and deptno = #{deptno} </when> </choose> </where> </select> \",\"测试代码一:\",\"@Test public void findByCondition(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); Emp emp = new Emp(); List<Emp> empList = mapper.findByCondition(emp); empList.stream().forEach(System.out::println); } \",\"上述测试文件最终执行的语句是 : select * from emp\",\"测试代码二:\",\"@Test public void findByCondition(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); Emp emp = new Emp(); emp.setEmpno(7499); List<Emp> empList = mapper.findByCondition(emp); empList.stream().forEach(System.out::println); } \",\"上述测试文件最终执行的语句是 : select * from emp where empno = ?\",\"测试代码三:\",\"@Test public void findByCondition(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); Emp emp = new Emp(); emp.setEmpno(7499); emp.setEmpname(\\\"SMITH\\\"); List<Emp> empList = mapper.findByCondition(emp); empList.stream().forEach(System.out::println); } \",\"上述测试文件最终执行的语句是 : select * from emp WHERE empno = ?,因为满足了一个条件后,后续的语句都不在执行\"]},\"2451\":{\"h\":\"SET标签\"},\"2452\":{\"h\":\"语法\",\"t\":[\"<set>语句块</set> \",\"用于处理set和,:\",\"当语句块中存在语句时,会自动拼接set\",\"当第一个条件前带有,时,会自动处理多余的,\"]},\"2453\":{\"h\":\"案例\",\"t\":[\"EmpMapper.Java接口\",\"int updateEmpByCondtion(Emp emp); \",\"EmpMapper.XML\",\"<update id=\\\"updateEmpByCondtion\\\" parameterType=\\\"emp\\\"> update emp <set> <if test=\\\"ename!=null and ename!='' \\\"> , ename = #{ename} </if> <if test=\\\"job!=null and job!='' \\\"> , job = #{job} </if> <if test=\\\"mgr!=null\\\"> , mgr = #{mgr} </if> <if test=\\\"hiredate!=null and hiredate!='' \\\"> , hiredate = #{hiredate} </if> <if test=\\\"sal!=null\\\"> , sal = #{sal} </if> <if test=\\\"comm!=null\\\"> , comm = #{comm} </if> <if test=\\\"deptno!=null\\\"> , deptno = #{deptno} </if> </set> <where> empno =#{empno} </where> </update> \",\"测试代码一:\",\"@Test public void updateEmpByCondtion(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); Emp emp = new Emp(); emp.setEmpno(8899); emp.setEname(\\\"LISI\\\"); emp.setMgr(1500); emp.setSal(1500.0); mapper.updateEmpByCondtion(emp); } \",\"上述测试文件最终执行的语句是 : update emp SET ename = ? , mgr = ? , sal = ? WHERE empno =? \"]},\"2454\":{\"h\":\"TRIM标签\",\"t\":[\"trim标签一般用于去除sql语句中多余的and关键字，逗号，或者给sql语句前拼接 “where“、“set“以及“values(“ 等前缀，或者添加“)“等后缀，可用于选择性插入、更新、删除或者条件查询等操作。\"]},\"2455\":{\"h\":\"语法\",\"t\":[\"<trim prefix='拼接前缀' prefixOverrides='去除前缀' suffix='拼接后缀' suffixOverrides='去除后缀'>语句块</trim> \",\"prefix 要增加什么前缀\",\"prefixOverrides 要去除什么前缀\",\"suffix 要增加什么后缀\",\"suffixOverrides 要去除什么后缀\"]},\"2456\":{\"h\":\"案例\",\"t\":[\"EmpMapper.Java接口\",\"int updateEmpByCondtion(Emp emp); \",\"EmpMapper.XML\",\"<update id=\\\"updateEmpByCondtion\\\" parameterType=\\\"emp\\\"> update emp <trim prefix=\\\"set\\\" suffixOverrides=\\\",\\\"> <if test=\\\"ename!=null and ename!='' \\\"> ename = #{ename} , </if> <if test=\\\"job!=null and job!='' \\\"> job = #{job} , </if> <if test=\\\"mgr!=null\\\"> mgr = #{mgr} , </if> <if test=\\\"hiredate!=null and hiredate!='' \\\"> hiredate = #{hiredate} ,</if> <if test=\\\"sal!=null\\\"> sal = #{sal} , </if> <if test=\\\"comm!=null\\\"> comm = #{comm} ,</if> <if test=\\\"deptno!=null\\\"> deptno = #{deptno}, </if> </trim> <where> empno =#{empno} </where> </update> \",\"测试代码一:\",\"@Test public void updateEmpByCondtion(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); Emp emp = new Emp(); emp.setEmpno(8899); emp.setEname(\\\"LISI\\\"); emp.setMgr(1500); emp.setSal(1500.0); mapper.updateEmpByCondtion(emp); } \",\"上述测试文件最终执行的语句是 : update emp SET ename = ? , mgr = ? , sal = ? WHERE empno =? \"]},\"2457\":{\"h\":\"BIND标签\",\"t\":[\"一般用于处理模糊查询的模板\",\"在之前的处理中,我们是这样处理模糊查询的: ![[Mybatis代理模式的开发#模糊查询#方式二: 使用concat()函数拼接 - 推荐]]\",\"这样使用并不优雅,我们可以使用 BIND标签 来处理.\"]},\"2458\":{\"h\":\"语法\",\"t\":[\"<bind name=\\\"名字1\\\" value=\\\"参数1\\\"/> \",\"bind 标签可以让我们在SQL中对参数1进行动态的处理,然后保存到名字1中,方便后续的SQL使用\"]},\"2459\":{\"h\":\"案例\",\"t\":[\"EmpMapper.XML\",\"<select id=\\\"findObjectByName\\\" parameterType=\\\"string\\\" resultType=\\\"emp\\\"> <bind name=\\\"findEname\\\" value=\\\"'%'+ename+'%'\\\"/> select * from emp where ename like concat('%',#{findEname},'%') </select> \",\"测试单元\",\"@Test public void findObjectByName(){ EmpMapper mapper = sqlSession.getMapper(EmpMapper.class); List<Emp> empList = mapper.findObjectByName(\\\"a\\\"); empList.stream().forEach(System.out::println); } \",\"上述测试文件最终执行的语句是 :select * from emp where ename like concat('%',?,'%') \"]},\"2460\":{\"h\":\"SQL标签与include标签\",\"t\":[\"SQL标签可以对一些复用性比较高的代码段进行包裹,方便其他地方快速的调用\"]},\"2461\":{\"h\":\"语法\",\"t\":[\"<!-- 创建 --> <sql id=\\\"名字\\\">代码段</sql> <!-- 引用 --> <include refid=\\\"名字\\\"></include> \",\"注意: SQL标签可以多层嵌套,例如:\",\"<sql id=\\\"名字1\\\">代码段1</sql> <sql id=\\\"名字2\\\"><include refid=\\\"名字1\\\"></include>代码段2</sql> \",\"那么在使用名字2时,则会依次查找然后拼接最后的代码: 代码段1代码段2\"]},\"2462\":{\"h\":\"案例\",\"t\":[\"EmpMapper.java接口\",\"List<Emp> findObject(); \",\"EmpMapper.xml\",\"<sql id=\\\"empColumn\\\">empno,ename,job,mgr,hiredate,sal,comm,deptno</sql> <select id=\\\"findObject\\\" resultType=\\\"emp\\\"> select <include refid=\\\"empColumn\\\"></include> from emp </select> \",\"测试代码\",\"@Test public void findObject(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); List<Emp> empList = mapper.findObject(); empList.stream().forEach(System.out::println); } \",\"上述测试文件最终执行的语句是 : select empno,ename,job,mgr,hiredate,sal,comm,deptno from emp\"]},\"2463\":{\"h\":\"FOREACH标签\",\"t\":[\"用来遍历集合或者数组,通常是用来处理In中的参数\"]},\"2464\":{\"h\":\"语法\",\"t\":[\"<foreach collection=\\\"array\\\" separator=\\\",\\\" open=\\\"(\\\" close=\\\")\\\" item=\\\"empNo\\\"> 代码块 </foreach> \",\"用于遍历数组或集合:\",\"collection : 遍历的集合或者是数组 (数组为array/集合为list)\",\"separator : 多个元素取出的时候 用什么文字分隔\",\"open : 以什么开头\",\"close : 以什么结尾\",\"item : 中间变量名\"]},\"2465\":{\"h\":\"案例\"},\"2466\":{\"h\":\"测试数组\",\"t\":[\"EmpMapper.Java接口\",\"List<Emp> findObjectsByEmpNo1(int[] empno); \",\"EmpMapper.XML\",\"<select id=\\\"findObjectsByEmpNo1\\\" resultType=\\\"emp\\\"> select * from emp where empno in <foreach collection=\\\"array\\\" separator=\\\",\\\" open=\\\"(\\\" close=\\\")\\\" item=\\\"empNo\\\"> #{empNo} </foreach> </select> \",\"测试代码一:\",\"@Test public void findObjectsByEmpNo1(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); int[] arr = new int[]{7369,7499,7521}; List<Emp> empList = mapper.findObjectsByEmpNo1(arr); empList.stream().forEach(System.out::println); } \",\"上述测试文件最终执行的语句是 : select * from emp where empno in ( ? , ? , ? ) \"]},\"2467\":{\"h\":\"测试集合\",\"t\":[\"EmpMapper.Java接口\",\"List<Emp> findObjectsByEmpNo(List<Integer> empno); \",\"EmpMapper.XML\",\"<select id=\\\"findObjectsByEmpNo\\\" resultType=\\\"emp\\\"> select * from emp where empno in <foreach collection=\\\"list\\\" separator=\\\",\\\" open=\\\"(\\\" close=\\\")\\\" item=\\\"empNo\\\"> #{empNo} </foreach> </select> \",\"测试代码一:\",\"@Test public void findObjectsByEmpNo2(){ EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class); List<Integer> integers = Arrays.asList(7369, 7499, 7521); List<Emp> empList = mapper.findObjectsByEmpNo2(integers); empList.stream().forEach(System.out::println); } \",\"上述测试文件最终执行的语句是 : select * from emp where empno in ( ? , ? , ? ) \"]},\"2468\":{\"h\":\"Mybatis缓存\"},\"2469\":{\"h\":\"了解缓存\"},\"2470\":{\"h\":\"什么时缓存\",\"t\":[\"缓存 : 是一种临时存储少量数据至内存或者是磁盘的一种技术.减少数据的加载次数,可以降低工作量,提高程序响应速度\",\"缓存的重要性是不言而喻的。mybatis的缓存将相同查询条件的SQL语句执行一遍后所得到的结果存在内存或者某种缓存介质当中，当下次遇到一模一样的查询SQL时候不在执行SQL与数据库交互，而是直接从缓存中获取结果，减少服务器的压力；尤其是在查询越多、缓存命中率越高的情况下，使用缓存对性能的提高更明显。\",\"MyBatis允许使用缓存，缓存一般放置在高速读/写的存储器上，比如服务器的内存，能够有效的提供系统性能。MyBatis分为一级缓存和二级缓存，同时也可配置关于缓存设置。\"]},\"2471\":{\"h\":\"缓存的使用顺序\",\"t\":[\"查询的顺序是：\",\"先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。\",\"如果二级缓存没有命中，再查询一级缓存\",\"如果一级缓存也没有命中，则查询数据库\",\"SqlSession关闭之前，一级缓存中的数据会写入二级缓存\"]},\"2472\":{\"h\":\"缓存的效力范围\",\"t\":[\"一级存储是SqlSession上的缓存，二级缓存是在SqlSessionFactory(namespace)上的缓存。默认情况下，MyBatis开启一级缓存，没有开启二级缓存。当数据量大的时候可以借助一些第三方缓存框架或Redis缓存来协助保存Mybatis的二级缓存数据。\"]},\"2473\":{\"h\":\"一级缓存\",\"t\":[\"一级存储是SqlSession上的缓存，默认开启，是一种内存型缓存,不要求实体类对象实现Serializable接口。\",\"当我们获得一次请求后,缓存中的数据使用键值对形式存储数据. 通常是通过namespace+sqlid+args+offset 计算哈希值作为Key,将返回的对象作为value\"]},\"2474\":{\"h\":\"开启缓存\",\"t\":[\"默认开启!\"]},\"2475\":{\"h\":\"案例\",\"t\":[\"@Test public void Testcache1(){ DeptMapper mapper1 = sqlSession.getMapper(DeptMapper.class); Dept dept1 = mapper1.findeDept(20); DeptMapper mapper2 = sqlSession.getMapper(DeptMapper.class); Dept dept2 = mapper2.findeDept(20); System.out.println(mapper1==mapper2); //false System.out.println(dept1==dept2); //true } \",\"我们查看控制台发现,两次查询调用实际上只请求了一次数据库,第二次使用的是缓存,且返回的实体对象是同一个对象\"]},\"2476\":{\"h\":\"注意事项\",\"t\":[\"以下操作会导致一级缓存失效:\",\"不是同一个SqlSession\",\"同一个SqlSession但是查询条件发生了变化\",\"同一个SqlSession两次查询期间执行了任何一次增删改操作\",\"同一个SqlSession两次查询期间手动清空了缓存\",\"同一个SqlSession两次查询期间提交了事务\"]},\"2477\":{\"h\":\"二级缓存\",\"t\":[\"二级缓存是以namespace为标记的缓存，可以是由一个SqlSessionFactory创建的SqlSession之间共享缓存数据。默认并不开启。\"]},\"2478\":{\"h\":\"开启缓存\",\"t\":[\"配置Mybatis配置文件 : 在sqlMapConfig.xml文件中的<settings>标签配置开启二级缓存 cacheEnabled的默认值就是true，所以这步的设置可以省略\",\"配置Mapper文件 : 在要开启二级缓存的mapper文件中开启缓存\",\"设置实体类 : 实体类必须序列化!\",\"经过设置后，查询结果如图所示。发现第一个SqlSession会首先去二级缓存中查找，如果不存在，就查询数据库，在commit()或者close()的时候将数据放入到二级缓存。第二个SqlSession执行相同SQL语句查询时就直接从二级缓存中获取了。\"]},\"2479\":{\"h\":\"案例\",\"t\":[\"下面的代码中创建了两个SqlSession，执行相同的SQL语句，尝试让第二个SqlSession使用第一个SqlSession查询后缓存的数据。要求实体类必须实现序列化接口\",\"@Test public void Testcache2(){ EmpMapper mapper1 = sqlSession.getMapper(EmpMapper.class); List<Emp> emp1 = mapper1.findEmp(20); sqlSession.commit(); EmpMapper mapper2 = sqlSession.getMapper(EmpMapper.class); List<Emp> emp2 = mapper2.findEmp(20); System.out.println(mapper1==mapper2); System.out.println(emp1==emp2); } \",\"我们看到,此时仍是只查询了一次数据库,且返回的对象不是同一个,但出现了缓存命中的提示:Cache Hit Ratio [com.meturing.mapper.EmpMapper]: 0.5\",\"缓存命中率的计算 : 缓存命中率 = 命中缓存的次数 / 查询的总次数\"]},\"2480\":{\"h\":\"注意事项\",\"t\":[\"MyBatis的二级缓存的缓存介质有多种多样，而并不一定是在内存中，所以需要对JavaBean对象实现序列化接口。\",\"二级缓存是以 namespace 为单位的，不同 namespace 下的操作互不影响\",\"加入Cache元素后，会对相应命名空间所有的select元素查询结果进行缓存，而其中的insert、update、delete在操作是会清空整个namespace的缓存\",\"如果在加入Cache元素的前提下让个别select 元素不使用缓存，可以使用useCache属性，设置为false。(useCache控制当前sql语句是否启用缓存 flushCache控制当前sql执行一次后是否刷新缓存)<select id=\\\"findByEmpno\\\" resultType=\\\"emp\\\" useCache=\\\"true\\\" flushCache=\\\"false\\\">\"]},\"2481\":{\"h\":\"缓存中的其他参数\",\"t\":[\"<cache type=\\\"\\\" readOnly=\\\"\\\" eviction=\\\"\\\" flushInterval=\\\"\\\" size=\\\"\\\" blocking=\\\"\\\"/> \",\"属性\",\"含义\",\"默认值\",\"type\",\"自定义缓存类，要求实现org.apache.ibatis.cache.Cache接口\",\"null\",\"readOnly\",\"是否只读\",\"true:给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。\",\"false:会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全\",\"false\",\"eviction\",\"缓存策略\",\"LRU（默认） – 最近最少使用：移除最长时间不被使用的对象。\",\"FIFO – 先进先出：按对象进入缓存的顺序来移除它们。\",\"SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。\",\"WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。\",\"LRU\",\"flushInterval\",\"刷新间隔，毫秒为单位。默认为null，也就是没有刷新间隔，只有执行update、insert、delete语句才会刷新\",\"null\",\"size\",\"缓存对象个数\",\"1024\",\"blocking\",\"是否使用阻塞性缓存BlockingCache\",\"true：在查询缓存时锁住对应的Key，如果缓存命中了则会释放对应的锁，否则会在查询数据库以后再释放锁，保证只有一个线程到数据库中查找指定key对应的数据\",\"false：不使用阻塞性缓存，性能更好\",\"false\"]},\"2482\":{\"h\":\"三方缓存 - Ehcache\",\"t\":[\"分布式缓存框架：我们系统为了提高系统并发 和性能，一般对系统进行分布式部署（集群部署方式）不适用分布缓存， 缓存的数据在各个服务单独存储，不方便系统开发。所以要使用分布式缓存对缓存数据进行集中管理.ehcache,redis ,memcache缓存框架。\",\"Ehcache：是一种广泛使用的开源java分布式缓存。主要面向通用缓存，javaEE 和 轻量级容器。它具有内存和磁盘存储功能。被用于大型复杂分布式web application的\"]},\"2483\":{\"h\":\"配置Ehcache的环境\"},\"2484\":{\"h\":\"导入Pom.xml依赖\",\"t\":[\"<!-- Mybatis EHCache整合包 --> <dependency> <groupId>org.mybatis.caches</groupId> <artifactId>mybatis-ehcache</artifactId> <version>1.2.1</version> </dependency> <!-- slf4j日志门面的一个具体实现 --> <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-classic</artifactId> <version>1.2.3</version> </dependency> \"]},\"2485\":{\"h\":\"创建EHCache配置文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?> <ehcache xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:noNamespaceSchemaLocation=\\\"../config/ehcache.xsd\\\"> <!-- 磁盘保存路径 --> <diskStore path=\\\"D:\\\\atguigu\\\\ehcache\\\"/> <defaultCache maxElementsInMemory=\\\"1000\\\" maxElementsOnDisk=\\\"10000000\\\" eternal=\\\"false\\\" overflowToDisk=\\\"true\\\" timeToIdleSeconds=\\\"120\\\" timeToLiveSeconds=\\\"120\\\" diskExpiryThreadIntervalSeconds=\\\"120\\\" memoryStoreEvictionPolicy=\\\"LRU\\\"> </defaultCache> </ehcache> \",\"defaultCache标签各属性说明 当借助CacheManager.add(\\\"缓存名称\\\")创建Cache时，EhCache便会采用\"]},\"2486\":{\"h\":\"指定缓存管理器的具体类型\",\"t\":[\"<cache type=\\\"org.mybatis.caches.ehcache.EhcacheCache\\\"/> \"]},\"2487\":{\"h\":\"加入logback日志\",\"t\":[\"存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。\",\"将原有的log4j文件及依赖清除后,再导入SLF4J的具体实现logback日志\",\"logback.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration debug=\\\"true\\\"> <!-- 指定日志输出的位置 --> <appender name=\\\"STDOUT\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <encoder> <!-- 日志输出的格式 --> <!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --> <pattern>[%d{HH:mm:ss.SSS}] [%-5level] [%thread] [%logger] [%msg]%n</pattern> </encoder> </appender> <!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --> <!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --> <root level=\\\"DEBUG\\\"> <!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --> <appender-ref ref=\\\"STDOUT\\\" /> </root> <!-- 根据特殊需求指定局部日志级别 --> <logger name=\\\"com.atguigu.crowd.mapper\\\" level=\\\"DEBUG\\\"/> </configuration> \",\"如果再Mybatis中配置了具体的日志指向,则需要修改\",\"此处可以删除,让Mybatis自己选择,详情见 [[Mybatis配置#导入Log4j日志框架]]\"]},\"2488\":{\"h\":\"测试\",\"t\":[\"@Test public void Testcache2(){ EmpMapper mapper1 = sqlSession.getMapper(EmpMapper.class); List<Emp> emp1 = mapper1.findEmp(20); sqlSession.commit(); EmpMapper mapper2 = sqlSession.getMapper(EmpMapper.class); List<Emp> emp2 = mapper2.findEmp(20); System.out.println(mapper1==mapper2); System.out.println(emp1==emp2); } \",\" 我们发现,此时以及成功使用了Ehcache缓存,且成功命中\"]},\"2489\":{\"h\":\"缓存的基本原理\",\"t\":[\"根据Cache接口中方法的声明我们能够看到，缓存的本质是一个Map。\"]},\"2490\":{\"h\":\"Cache接口\",\"t\":[\"org.apache.ibatis.cache.Cache接口：所有缓存都必须实现的顶级接口\"]},\"2491\":{\"h\":\"Cache接口的方法\"},\"2492\":{\"h\":\"PerpetualCache 实现类\",\"t\":[\"org.apache.ibatis.cache.impl.PerpetualCache是Mybatis的默认缓存，也是Cache接口的默认实现。Mybatis一级缓存和自带的二级缓存都是通过PerpetualCache来操作缓存数据的。但是这就奇怪了，同样是PerpetualCache这个类，怎么能区分出来两种不同级别的缓存呢？\",\"一级缓存与二级缓存的调用者不同\",\"一级缓存：由BaseExecutor调用PerpetualCache\",\"二级缓存：由CachingExecutor调用PerpetualCache，而CachingExecutor可以看做是对BaseExecutor的装饰\"]},\"2493\":{\"h\":\"一级缓存机制\",\"t\":[\"org.apache.ibatis.executor.BaseExecutor类中的关键方法：\",\"query( )方法\",\"public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException { ErrorContext.instance().resource(ms.getResource()).activity(\\\"executing a query\\\").object(ms.getId()); if (closed) { throw new ExecutorException(\\\"Executor was closed.\\\"); } if (queryStack == 0 && ms.isFlushCacheRequired()) { clearLocalCache(); } List<E> list; try { queryStack++; // 尝试从本地缓存中获取数据 list = resultHandler == null ? (List<E>) localCache.getObject(key) : null; if (list != null) { handleLocallyCachedOutputParameters(ms, key, parameter, boundSql); } else { // 如果本地缓存中没有查询到数据，则查询数据库 list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql); } } finally { queryStack--; } if (queryStack == 0) { for (org.apache.ibatis.executor.BaseExecutor.DeferredLoad deferredLoad : deferredLoads) { deferredLoad.load(); } // issue #601 deferredLoads.clear(); if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) { // issue #482 clearLocalCache(); } } return list; } \",\"queryFromDatabase()方法\",\"private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException { List<E> list; localCache.putObject(key, EXECUTION_PLACEHOLDER); try { // 从数据库中查询数据 list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql); } finally { localCache.removeObject(key); } // 将数据存入本地缓存 localCache.putObject(key, list); if (ms.getStatementType() == StatementType.CALLABLE) { localOutputParameterCache.putObject(key, parameter); } return list; } \"]},\"2494\":{\"h\":\"二级缓存机制\",\"t\":[\"下面我们来看看CachingExecutor类中的query()方法在不同情况下使用的具体缓存对象\\n①未开启二级缓存\\n②使用自带二级缓存\\n③使用EHCache\"]},\"2495\":{\"h\":\"Mybatis逆向工程与其他配置\"},\"2496\":{\"h\":\"逆向工程\"},\"2497\":{\"h\":\"概念\",\"t\":[\"MyBatis的一个主要的特点就是需要程序员自己编写SQL，那么如果表太多的话，难免会很麻烦，所以MyBatis官方提供了一个逆向工程，可以针对单表自动生成MyBatis执行所需要的代码（包括mapper.xml，mapper.java，pojo）。一般在开发中，常用的逆向工程方式是通过数据库的表生成代码。\",\"正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的。\",\"逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：（包括mapper.xml，mapper.java，pojo）\"]},\"2498\":{\"h\":\"基本原理\"},\"2499\":{\"h\":\"配置环境\"},\"2500\":{\"h\":\"导入Pom.xml依赖\",\"t\":[\"<!-- 依赖MyBatis核心包 --> <dependencies> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.3</version> </dependency> </dependencies> <!-- 控制Maven在构建过程中相关配置 --> <build> <!-- 构建过程中用到的插件 --> <plugins> <!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --> <plugin> <groupId>org.mybatis.generator</groupId> <artifactId>mybatis-generator-maven-plugin</artifactId> <version>1.3.0</version> <!-- 插件的依赖 --> <dependencies> <!-- 逆向工程的核心依赖 --> <dependency> <groupId>org.mybatis.generator</groupId> <artifactId>mybatis-generator-core</artifactId> <version>1.3.2</version> </dependency> <!-- 数据库连接池 --> <dependency> <groupId>com.mchange</groupId> <artifactId>c3p0</artifactId> <version>0.9.2</version> </dependency> <!-- MySQL驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.16</version> </dependency> </dependencies> </plugin> </plugins> </build> \"]},\"2501\":{\"h\":\"配置MBG\",\"t\":[\"文件名必须是：generatorConfig.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!DOCTYPE generatorConfiguration PUBLIC \\\"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\\\"> <generatorConfiguration> <!-- targetRuntime: 执行生成的逆向工程的版本 MyBatis3Simple: 生成基本的CRUD（清新简洁版） MyBatis3: 生成带条件的CRUD（奢华尊享版） --> <context id=\\\"DB2Tables\\\" targetRuntime=\\\"MyBatis3\\\"> <!-- 数据库的连接信息 --> <jdbcConnection driverClass=\\\"com.mysql.cj.jdbc.Driver\\\" connectionURL=\\\"jdbc:mysql://192.168.1.188:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai\\\" userId=\\\"root\\\" password=\\\"root\\\"> </jdbcConnection> <!-- javaBean的生成策略--> <javaModelGenerator targetPackage=\\\"com.meturing.pojo\\\" targetProject=\\\".\\\\src\\\\main\\\\java\\\"> <property name=\\\"enableSubPackages\\\" value=\\\"true\\\" /> <property name=\\\"trimStrings\\\" value=\\\"true\\\" /> </javaModelGenerator> <!-- SQL映射文件的生成策略 --> <sqlMapGenerator targetPackage=\\\"com.meturing.mapper\\\" targetProject=\\\".\\\\src\\\\main\\\\resources\\\"> <property name=\\\"enableSubPackages\\\" value=\\\"true\\\" /> </sqlMapGenerator> <!-- Mapper接口的生成策略 --> <javaClientGenerator type=\\\"XMLMAPPER\\\" targetPackage=\\\"com.meturing.mapper\\\" targetProject=\\\".\\\\src\\\\main\\\\java\\\"> <property name=\\\"enableSubPackages\\\" value=\\\"true\\\" /> </javaClientGenerator> <!-- 逆向分析的表 --> <!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --> <!-- domainObjectName属性指定生成出来的实体类的类名 --> <table tableName=\\\"dept\\\" domainObjectName=\\\"Dept\\\"/> </context> </generatorConfiguration> \"]},\"2502\":{\"h\":\"执行MBG插件\"},\"2503\":{\"h\":\"QBC查询\",\"t\":[\"QBC：Query By Criteria QBC查询最大的特点就是将SQL语句中的WHERE子句进行了组件化的封装，让我们可以通过调用Criteria对象的方法自由的拼装查询条件。\",\"@Test public void tetsQBC(){ //目标:组装查询条件 where (xxx) or (xxx) //1. 创建Example对象 DeptExample example = new DeptExample(); //2. Example对象创建Criteria对象 DeptExample.Criteria criteria01 = example.createCriteria(); DeptExample.Criteria criteria02 = example.or(); //3. 在Criteria对象添加查询条件 // 封装的第一个 dname like '%S%' criteria01.andDnameLike(\\\"%S%\\\"); // 封装的第二个 Deptno >= 20 criteria02.andDeptnoGreaterThan(20); //4.根据 Example对象执行查询 // select * from Dept WHERE // ( dname like '%S%' ) or ( Deptno >= 20) DeptMapper mapper = sqlSession.getMapper(DeptMapper.class); List<Dept> deptList = mapper.selectByExample(example); deptList.stream().forEach(System.out::println); } \"]},\"2504\":{\"h\":\"Mybatis其他配置\"},\"2505\":{\"h\":\"main目录下XML文件编译问题\",\"t\":[\"Maven项目默认对于Java文件下只处理.java文件,在打包后才将Resources目录下的文件进行合并 所以对于Java目录下的其他的配置文件,我们需要在Pom.xml中进行配置\",\"Pom.xml的配置如下\",\"<build> <!--告诉maven将项目源码中的xml文件也进行编译，并放到编译目录中--> <resources> <resource> <directory>src/main/java</directory> <includes> <include>**/*.xml</include> </includes> <filtering>true</filtering> </resource> <resource> <directory>src/main/resources</directory> <filtering>true</filtering> </resource> </resources> </build> \"]},\"2506\":{\"h\":\"类型处理器\"},\"2507\":{\"h\":\"Mybatis内置类型处理器\",\"t\":[\"无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成 Java 类型。\"]},\"2508\":{\"h\":\"日期处理\",\"t\":[\"日期和时间的处理，JDK1.8以前一直是个头疼的问题。我们通常使用 JSR310 规范领导者 Stephen Colebourne 创建的 Joda-Time 来操作。JDK1.8已经实现全部的JSR310 规范了。\",\"Mybatis在日期时间处理的问题上，提供了基于 JSR310（Date and Time API）编写的各种日期时间类型处理器。 MyBatis3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册的。\",\"如需注册，需要下载mybatistypehandlers-jsr310，并通过如下方式注册\"]},\"2509\":{\"h\":\"自定义类型处理\",\"t\":[\"当某个具体类型Mybatis靠内置的类型处理器无法识别时，可以使用Mybatis提供的自定义类型处理器机制。\",\"第一步：实现 org.apache.ibatis.type.TypeHandler 接口或者继承 org.apache.ibatis.type.BaseTypeHandler 类。\",\"@MappedTypes(value = Address.class) @MappedJdbcTypes(JdbcType.CHAR) public class AddressTypeHandler extends BaseTypeHandler<Address> { @Override public void setNonNullParameter(PreparedStatement preparedStatement, int i, Address address, JdbcType jdbcType) throws SQLException { } @Override public Address getNullableResult(ResultSet resultSet, String columnName) throws SQLException { // 1.从结果集中获取原始的地址数据 String addressOriginalValue = resultSet.getString(columnName); // 2.判断原始数据是否有效 if (addressOriginalValue == null || \\\"\\\".equals(addressOriginalValue)) return null; // 3.如果原始数据有效则执行拆分 String[] split = addressOriginalValue.split(\\\",\\\"); String province = split[0]; String city = split[1]; String street = split[2]; // 4.创建Address对象 Address address = new Address(); address.setCity(city); address.setProvince(province); address.setStreet(street); return address; } @Override public Address getNullableResult(ResultSet resultSet, int i) throws SQLException { return null; } @Override public Address getNullableResult(CallableStatement callableStatement, int i) throws SQLException { return null; } } \",\"第二步：指定其映射某个JDBC类型（可选操作）。\",\"第三步：在Mybatis全局配置文件中注册。\",\"<!-- 注册自定义类型转换器 --> <typeHandlers> <typeHandler jdbcType=\\\"CHAR\\\" javaType=\\\"com.atguigu.mybatis.entity.Address\\\" handler=\\\"com.atguigu.mybatis.type.handler.AddressTypeHandler\\\"/> </typeHandlers> \"]},\"2510\":{\"h\":\"插件机制\"},\"2511\":{\"h\":\"Mybatis四大对象\"},\"2512\":{\"h\":\"Executor\"},\"2513\":{\"h\":\"ParameterHandler\"},\"2514\":{\"h\":\"ResultSetHandler\"},\"2515\":{\"h\":\"StatementHandler\"},\"2516\":{\"h\":\"Mybatis插件机制\",\"t\":[\"插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过动态代理机制，可以介入四大对象的任何一个方法的执行。著名的Mybatis插件包括 PageHelper（分页插件）、通用 Mapper（SQL生成插件）等。\",\"如果想编写自己的Mybatis插件可以通过实现org.apache.ibatis.plugin.Interceptor接口来完成，表示对Mybatis常规操作进行拦截，加入自定义逻辑。\"]},\"2517\":{\"h\":\"Mybatis底层的JDBC封装\",\"t\":[\"org.apache.ibatis.executor.statement.PreparedStatementHandler类：\",\"查找上面目标时，Debug查看源码的切入点是：\\norg.apache.ibatis.session.defaults.DefaultSqlSession类的update()方法\"]},\"2518\":{\"h\":\"初识Spring\"},\"2519\":{\"h\":\"Spring的概念介绍\"},\"2520\":{\"h\":\"简介\",\"t\":[\"Spring 框架是由于软件开发的复杂性而创建的. Spring 使用的是基本的 JavaBean 来完成以前只可能由 EJB 完成的事情 。 然而 ， Spring 的用途不仅仅限于服务器端的开发 。 从简单性 、 可测试性和松耦合性角度而言 ， 绝大部分 Java 应用都可以从 Spring 中.\",\"Spring 是一个轻量级控制反转(IOC)和面向切面(AOP)的容器框架,是分层的全栈式的轻量级开发框架.基本上任何其他 Spring 项目都是以 Spring Framework 为基础的。\",\"官网是 https://spring.io\"]},\"2521\":{\"h\":\"优势\"},\"2522\":{\"h\":\"方便解耦,简化开发\",\"t\":[\"Spring通过容器,将对象的创建从代码中剥离出来,交给Spring控制,避免直接编码造成模块之间的耦合度高,用户也不必自己编码处理对象的单例和多例控制,主要关注接口功能即可,不用关注具体使用哪个实现类和实现细节问题\"]},\"2523\":{\"h\":\"AOP切面编程\",\"t\":[\"AOP切面编程是程序设计的一种概念,Spring对该概念实现的比较好,通过切面编程我们可以在不修改原有代码的情况下实现功能的增加,通常用于 事务控制,日志记录,性能检测,权限控制等等\"]},\"2524\":{\"h\":\"声明式事务\",\"t\":[\"事务的控制可以托管给Spring,我们通过注解或者配置文件声明事务的处理方式即可,不用我们自己去编码处理\"]},\"2525\":{\"h\":\"整合JUNIT,方便测试\",\"t\":[\"spring整合JUNIT单元测试,对于项目的功能都可以进行轻松快速的测试,便于我们调试程序\"]},\"2526\":{\"h\":\"方便整合各种优秀的框架\",\"t\":[\"SSM> Spring+SpringMVC +MyBatis SSH> Spring+Hibernate +Strust 等...\"]},\"2527\":{\"h\":\"丰富的功能封装\",\"t\":[\"spring对JAVAEE(JDBC ,JAVAMail,)都进行了一系列的封装,简化我们对于API的使用,提高程序的开发效率\"]},\"2528\":{\"h\":\"规范的源码学习样本\",\"t\":[\"spring的源码设计巧妙,结构清晰,大量使用了设计模式,是java代码规范编写的典范,也是高级程序员面试中经常会问到的源码.\"]},\"2529\":{\"h\":\"体系结构\"},\"2530\":{\"h\":\"Data Access/Integration（数据访问／集成）\",\"t\":[\"数据访问/集成层包括 JDBC、ORM、OXM、JMS 和 Transactions 模块，具体介绍如下:\",\"JDBC 模块：提供了一个 JDBC 的抽象层，大幅度减少了在开发过程中对数据库操作的编码。\",\"ORM 模块：对流行的对象关系映射 API，包括 JPA、JDO、Hibernate 和 iBatis 提供了的集成层。\",\"OXM 模块：提供了一个支持对象/XML 映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream。\",\"JMS 模块：指 Java 消息服务，包含的功能为生产和消费的信息。\",\"Transactions 事务模块：支持编程和声明式事务管理实现特殊接口类，并为所有的 POJO。\"]},\"2531\":{\"h\":\"Web 模块\",\"t\":[\"Spring 的 Web 层包括 Web、Servlet、Struts 和 Portlet 组件，具体介绍如下:\",\"Web 模块：提供了基本的 Web 开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IoC 容器初始化以及 Web 应用上下文。\",\"Servlet模块：包括 Spring 模型—视图—控制器（MVC）实现 Web 应用程序。\",\"Struts 模块：包含支持类内的 Spring 应用程序，集成了经典的 Struts Web 层。\",\"Portlet 模块：提供了在 Portlet 环境中使用 MV C实现，类似 Web-Servlet 模块的功能。\"]},\"2532\":{\"h\":\"Core Container（核心容器）\",\"t\":[\"Spring 的核心容器是其他模块建立的基础，由 Beans 模块、Core 核心模块、Context 上下文模块和 Expression Language 表达式语言模块组成，具体介绍如下:\",\"Beans 模块：提供了 BeanFactory，是工厂模式的经典实现，Spring 将管理对象称为 Bean。\",\"Core 核心模块：提供了 Spring 框架的基本组成部分，包括 IoC 和 DI 功能。\",\"Context 上下文模块：建立在核心和 Beans 模块的基础之上，它是访问定义和配置任何对象的媒介。ApplicationContext 接口是上下文模块的焦点。\",\"Expression Language 模块：是运行时查询和操作对象图的强大的表达式语言。\"]},\"2533\":{\"h\":\"其他模块\",\"t\":[\"Spring的其他模块还有 AOP、Aspects、Instrumentation 以及 Test 模块，具体介绍如下:\",\"AOP 模块：提供了面向切面编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。\",\"Aspects 模块：提供与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架。\",\"Instrumentation 模块：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。\",\"Test 模块：支持 Spring 组件，使用 JUnit 或 TestNG 框架的测试。\"]},\"2534\":{\"h\":\"快速体验Spring的IOC\"},\"2535\":{\"h\":\"环境准备\"},\"2536\":{\"h\":\"创建空白项目\"},\"2537\":{\"h\":\"创建Maven测试模块\"},\"2538\":{\"h\":\"导入Pom.xml依赖\",\"t\":[\"<dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.12.RELEASE</version> </dependency> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13.1</version> <scope>test</scope> </dependency> </dependencies> \",\"关于依赖: Spring原本需要引入四个依赖:\",\"spring-context 上下文,容器\",\"spring-beans 创建对象\",\"spring-core 核心jar\",\"spring-expression 表达式jar\",\"但是事实上,我们导入spring-context的时候,会自动导入其他依赖的jar,自动进行了依赖传递\",\"依赖关系图如下:\"]},\"2539\":{\"h\":\"创建所需资源类\",\"t\":[\"创建接口\",\"public interface DeptDao { void sayHello(); } \",\"创建接口实现类\",\"public class DeptDaoImpl implements DeptDao { public void sayHello() { System.out.println(\\\"Hello Spring\\\"); } } \"]},\"2540\":{\"h\":\"传统方式调用方法\",\"t\":[\"我们在之前的Java使用过程中,都是直接New一个实现类的对象,然后传递给他的接口引用声明. 通过接口的引用对象来实现方法\",\"@Test public void test01(){ DeptDao deptDao = new DeptDaoImpl(); deptDao.sayHello(); } \"]},\"2541\":{\"h\":\"使用Spring中IOC的方式\"},\"2542\":{\"h\":\"创建Spring.xml配置文件\",\"t\":[\"创建Spring.xml,用来配置Bean的注册\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!-- 将DeptDaoImpl注册到Spring容器中 --> <bean id=\\\"deptDao\\\" class=\\\"com.meturing.dao.impl.DeptDaoImpl\\\"></bean> </beans> \"]},\"2543\":{\"h\":\"测试代码\",\"t\":[\" @Test public void test02(){ //通过ClassPathXmlApplicationContext获取Spring.xml注册文件中的内容(底层Spring会自动根据我们的标签,为我们创建指定的对象) ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"spring.xml\\\"); //通过ApplicationContext对象获取容器中已经注册的Bean对象,并指定他的类型 DeptDao deptDao = applicationContext.getBean(\\\"deptDao\\\", DeptDao.class); //调用获取到的对象中的方法 deptDao.sayHello(); } \"]},\"2544\":{\"h\":\"基于XML管理Bean\"},\"2545\":{\"h\":\"IOC:控制反转\"},\"2546\":{\"h\":\"代码\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!-- 将DeptDaoImpl注册到Spring容器中 --> <bean id=\\\"deptDao\\\" class=\\\"com.meturing.dao.impl.DeptDaoImpl\\\"></bean> </beans> \",\" @Test public void test02(){ //通过ClassPathXmlApplicationContext获取Spring.xml注册文件中的内容(底层Spring会自动根据我们的标签,为我们创建指定的对象) ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"spring.xml\\\"); //通过ApplicationContext对象获取容器中已经注册的Bean对象,并指定他的类型 DeptDao deptDao = applicationContext.getBean(\\\"deptDao\\\", DeptDao.class); //调用获取到的对象中的方法 deptDao.sayHello(); } \"]},\"2547\":{\"h\":\"IOC底层原理浅析\",\"t\":[\"简单来讲分为三步走策略\"]},\"2548\":{\"h\":\"1. 解析XML配置文件\",\"t\":[\"底层运用到了Dom4J的技术对于XML进行解析\",\"<bean id=\\\"deptDao\\\" class=\\\"com.meturing.dao.impl.DeptDaoImpl\\\"></bean> \",\"ID 为 解析后对应的名字Class 为需要注册成为Bean的类所在的全类路径\"]},\"2549\":{\"h\":\"2. 反射技术实例化对象,放到容器中\",\"t\":[\"通过反射获取指定路径的字节码文件Class clazz =Class.forName(\\\"com.meturing.dao.impl.DeptDaoImpl\\\")\",\"初始化这个对象Object obj = clazz.newInstance();\",\"底层有个Map,将ID作为Key,对象作为Value存储起来map.put(\\\"deptDao\\\",obj)\"]},\"2550\":{\"h\":\"3.工厂模式返回Bean对象: getBean方法\",\"t\":[\"注意: IOC中存在两个Bean工厂接口(BeanFactory / ApplicationContext)BeanFactory接口 : IOC容器基本功能接口,是spring内部使用的接口,我们在处理业务时一般不直接使用该接口ApplicationContext 接口 : BeanFactory的子接口,提供更多更强大的功能,研发人员一般使用的接口\",\"我们可以通过以下实现类来构建Bean工厂对象FileSystemXmlApplicationContext : 需要通过文件的结对路径或者相对于项目的路径来初始化XMLClassPathXmlApplicationContext : 相对于Resource的路径\",\"获得Bean工厂对象ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"spring.xml\\\");\",\"调用ApplicationContext接口下的getBean方法来从Map中获取对象DeptDao deptDao = applicationContext.getBean(\\\"deptDao\\\", DeptDao.class);\",\"其实底层相当于执行了:\",\"public Object getBean(String name){ Object obj =map.get(name); return obj; } \"]},\"2551\":{\"h\":\"DI : 依赖注入\",\"t\":[\"DI ( Dependency Injection )，即“依赖注入” 就是创建属性时给对象属性赋值, 对象功能的实现往往要依赖属性的值,那么给对象属性赋值就可以说成是依赖注入\",\"由于对象属性不仅仅是基本数据类型,还可能是其他类,或者引用类型, 那么依赖注入将会把更多的对象之间的关系整理到一起,可以形成一个庞大的依赖关系. DI处理的是对象的属性赋值和互相依赖的关系\"]},\"2552\":{\"h\":\"获取Bean对象\",\"t\":[\"Bean标签常用的属性:id -> 对象的idclass -> 类的全路径名name -> 和id类似,一般不用scope -> 控制对象单例多例和使用范围 - singleton作用域(scope 默认值) -> Spring IOC容器中只会存在一个共享的bean实例 - prototype作用域 -> 部署的bean，每一次获取都会产生一个新的bean实例，相当与一个new的操作 - request作用域 -> 表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP request内有效 - session作用域 -> 表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP session内有效 - global session作用域 -> 类似于标准的HTTP Session作用域，不过它仅仅在基于portlet的web应用中才有意义lazy-init -> 懒加载 调用getBean的时候再去实例化对象,默认是关闭的容器加载时初始化对象到容器中\",\"准备实体类:\",\"@Data @ToString public class User { private Integer userid; private String username; private String password; public User(Integer userid, String username, String password) { System.out.println(\\\"全参构造\\\"); this.userid = userid; this.username = username; this.password = password; } public User() { System.out.println(\\\"无参构造\\\"); } } \"]},\"2553\":{\"h\":\"常规使用\",\"t\":[\"applictaionContext.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!-- 常规注册实体类 --> <bean id=\\\"user\\\" class=\\\"com.meturing.pojo.test01.User\\\"></bean> <bean id=\\\"user01\\\" class=\\\"com.meturing.pojo.test01.User\\\" name=\\\"userName1\\\"></bean> </beans> \",\"Test.java\",\"//常规使用 @Test public void test01(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext1.xml\\\"); User user = applicationContext.getBean(\\\"user\\\", User.class); System.out.println(user); } //测试name @Test public void test02(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext1.xml\\\"); User user = applicationContext.getBean(\\\"user01\\\", User.class); System.out.println(user); } \"]},\"2554\":{\"h\":\"单例与多例模式\",\"t\":[\"applictaionContext.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean id=\\\"user02\\\" class=\\\"com.meturing.pojo.test01.User\\\" scope=\\\"prototype\\\"></bean> <bean id=\\\"user03\\\" class=\\\"com.meturing.pojo.test01.User\\\" scope=\\\"singleton\\\"></bean> </beans> \",\"Test.java\",\"//测试scope @Test public void test03(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext1.xml\\\"); User user01 = applicationContext.getBean(\\\"user02\\\", User.class); User user02 = applicationContext.getBean(\\\"user02\\\", User.class); System.out.println(user01==user02);//false User user03 = applicationContext.getBean(\\\"user03\\\", User.class); User user04 = applicationContext.getBean(\\\"user03\\\", User.class); System.out.println(user03==user04);//true } \"]},\"2555\":{\"h\":\"懒加载\",\"t\":[\"不推荐开启懒加载,因为我们可以启动的时候多花点时间部署,简化用户第一次使用的体验时间\",\"applictaionContext.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean id=\\\"user04\\\" class=\\\"com.meturing.pojo.test01.User\\\" lazy-init=\\\"true\\\"></bean> <bean id=\\\"user05\\\" class=\\\"com.meturing.pojo.test01.User\\\" lazy-init=\\\"false\\\"></bean> <bean id=\\\"user06\\\" class=\\\"com.meturing.pojo.test01.User\\\" lazy-init=\\\"default\\\"></bean> </beans> \",\"Test.java\",\"//测试lazy-init @Test public void test04(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext1.xml\\\"); //User user01 = applicationContext.getBean(\\\"user04\\\", User.class); //User user02 = applicationContext.getBean(\\\"user05\\\", User.class); //User user03 = applicationContext.getBean(\\\"user06\\\", User.class); } \"]},\"2556\":{\"h\":\"给Bean对象赋值\",\"t\":[\"property -> 通过Set赋值\",\"constructor-arg -> 通过全参构造赋值. 个数必须和某个构造方法的参数个数向对应. name 指的是参数名 / index指的是参数的索引 / value指的是参数值\",\"P标签相当于property\",\"C标签相当于constructor-arg\",\"特殊符号的处理需要遵循HTML特殊符号转义\"]},\"2557\":{\"h\":\"property : 通过Set赋值\",\"t\":[\"applictaionContext.xml\",\"<!-- 通过无参构造方法初始化,Set方法注入 --> <bean id=\\\"user01\\\" class=\\\"com.meturing.pojo.test01.User\\\"> <property name=\\\"userid\\\" value=\\\"1\\\"></property> <property name=\\\"username\\\" value=\\\"admin\\\"></property> <property name=\\\"password\\\" value=\\\"admin\\\"></property> </bean> \",\"Test.java\",\"@Test public void test01(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext2_1.xml\\\"); User user = applicationContext.getBean(\\\"user01\\\", User.class); System.out.println(user);//User(userid=1, username=admin, password=admin) } \"]},\"2558\":{\"h\":\"constructor-arg : 通过全参构造赋值\",\"t\":[\"applictaionContext.xml\",\"<!-- 通过全参构造方法注入--> <!-- 方式一:直接用通过参数名注入 --> <bean id=\\\"user02\\\" class=\\\"com.meturing.pojo.test01.User\\\" > <constructor-arg name=\\\"userid\\\" value=\\\"2\\\"></constructor-arg> <constructor-arg name=\\\"username\\\" value=\\\"张三\\\"></constructor-arg> <constructor-arg name=\\\"password\\\" value=\\\"zhangSan\\\"></constructor-arg> </bean> <!-- 方式二:直接用通过参数位置注入 --> <bean id=\\\"user03\\\" class=\\\"com.meturing.pojo.test01.User\\\" > <constructor-arg index=\\\"0\\\" value=\\\"3\\\"></constructor-arg> <constructor-arg index=\\\"1\\\" value=\\\"李四\\\"></constructor-arg> <constructor-arg index=\\\"2\\\" value=\\\"liSi\\\"></constructor-arg> </bean> \",\"Test.java\",\"//全参构造初始化,带参注入 @Test public void test02(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext2_1.xml\\\"); User user = applicationContext.getBean(\\\"user02\\\", User.class); System.out.println(user);//User(userid=2, username=张三, password=zhangSan) } //全参构造初始化,带参注入 @Test public void test03(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext2_1.xml\\\"); User user = applicationContext.getBean(\\\"user03\\\", User.class); System.out.println(user);//User(userid=3, username=李四, password=liSi) } \"]},\"2559\":{\"h\":\"P标签 与 C标签\",\"t\":[\"applictaionContext.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!-- 通过P标签注入 : 相当于使用 property --> <bean id=\\\"user04\\\" class=\\\"com.meturing.pojo.test01.User\\\" p:userid=\\\"4\\\" p:username=\\\"王五\\\" p:password=\\\"wangWu\\\"></bean> <!-- 通过C标签注入 : 相当于使用 constructor-arg --> <bean id=\\\"user05\\\" class=\\\"com.meturing.pojo.test01.User\\\" c:userid=\\\"5\\\" c:username=\\\"赵六\\\" c:password=\\\"zhaoLiu\\\"></bean> <bean id=\\\"user06\\\" class=\\\"com.meturing.pojo.test01.User\\\" c:_0=\\\"6\\\" c:_1=\\\"高七\\\" c:_2=\\\"gaoQi\\\"></bean> </beans> \",\"Test.java\",\"//p标签注入,相当于: property 无参构造初始化,使用set注入 @Test public void test04(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext2_2.xml\\\"); User user = applicationContext.getBean(\\\"user04\\\", User.class); System.out.println(user);//User(userid=4, username=王五, password=wangWu) } //c标签注入,相当于: constructor-arg 全参构造初始化注入 @Test public void test05(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext2_2.xml\\\"); User user = applicationContext.getBean(\\\"user05\\\", User.class); System.out.println(user);//User(userid=5, username=赵六, password=zhaoLiu) } //c标签注入,相当于: constructor-arg 全参构造初始化注入 @Test public void test06(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext2_2.xml\\\"); User user = applicationContext.getBean(\\\"user06\\\", User.class); System.out.println(user);//User(userid=6, username=高七, password=gaoQi) } \"]},\"2560\":{\"h\":\"特殊符号的处理\",\"t\":[\"<null></null> 可以直接赋值为NULL<&lt;>&gt;&&amp; 遵循HTML转义<![CDATA[内容]]> 可以强调以文本方式显示\",\"applictaionContext.xml\",\"<!-- 注入空值或特殊符号 --> <bean id=\\\"user01\\\" class=\\\"com.meturing.pojo.test01.User\\\"> <!--null值--> <property name=\\\"userid\\\"><null></null></property> <!--特殊符号 转译字符 < &lt; > &gt; & &amp; 遵循HTML转义 --> <property name=\\\"username\\\" value=\\\"&lt;张三&gt;\\\"></property> <!-- 特殊符号 <![CDATA[内容]]> --> <property name=\\\"password\\\"> <value><![CDATA[!@#%^^&&^%$$#&**]]></value> </property> </bean> \",\"Test.java\",\"//特殊值注入 @Test public void test07(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext2_3.xml\\\"); User user = applicationContext.getBean(\\\"user01\\\", User.class); System.out.println(user);//User(userid=null, username=<张三>, password=!@#%^^&&^%$$#&**) } \"]},\"2561\":{\"h\":\"Bean对象的引用\"},\"2562\":{\"h\":\"引入外部的Bean\",\"t\":[\"applictaionContext.xml\",\"<bean id=\\\"date1\\\" class=\\\"java.util.Date\\\"></bean> <bean id=\\\"mouse01\\\" class=\\\"com.meturing.pojo.test02.Mouse\\\"> <property name=\\\"name\\\" value=\\\"Jerry\\\"></property> <property name=\\\"birthdate\\\" ref=\\\"date1\\\"></property> </bean> \",\"Test.java\",\"//外部Bean @Test public void test01(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext3.xml\\\"); Mouse mouse = applicationContext.getBean(\\\"mouse01\\\", Mouse.class); System.out.println(mouse);//Mouse(name=Jerry, birthdate=Mon Apr 24 10:57:20 CST 2023) } \"]},\"2563\":{\"h\":\"引入内部的Bean\",\"t\":[\"applictaionContext.xml\",\"<!-- 引入内部的Bean , 内部的Bean无需设置id--> <bean id=\\\"cat01\\\" class=\\\"com.meturing.pojo.test02.Cat\\\"> <property name=\\\"name\\\" value=\\\"Tom\\\"></property> <property name=\\\"mouse1\\\"> <bean id=\\\"mouse02\\\" class=\\\"com.meturing.pojo.test02.Mouse\\\"> <property name=\\\"name\\\" value=\\\"Jerry2\\\"></property> <property name=\\\"birthdate\\\"> <bean class=\\\"java.util.Date\\\"></bean> </property> </bean> </property> </bean> \",\"Test.java\",\"//内部Bean @Test public void test02(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext3.xml\\\"); Cat cat = applicationContext.getBean(\\\"cat01\\\", Cat.class); System.out.println(cat);//Cat(name=Tom, mouse1=Mouse(name=Jerry2, birthdate=Mon Apr 24 10:59:29 CST 2023)) } \"]},\"2564\":{\"h\":\"级联的Bean\",\"t\":[\"applictaionContext.xml\",\"<bean id=\\\"mouse03\\\" class=\\\"com.meturing.pojo.test02.Mouse\\\"></bean> <bean id=\\\"cat02\\\" class=\\\"com.meturing.pojo.test02.Cat\\\"> <property name=\\\"name\\\" value=\\\"Tom01\\\"></property> <property name=\\\"mouse1\\\" ref=\\\"mouse03\\\"></property> <property name=\\\"mouse1.name\\\" value=\\\"Jarry3\\\"></property> <property name=\\\"mouse1.birthdate\\\"> <bean class=\\\"java.util.Date\\\"></bean> </property> </bean> \",\"Test.java\",\"//级联Bean @Test public void test03(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext3.xml\\\"); Cat cat = applicationContext.getBean(\\\"cat02\\\", Cat.class); System.out.println(cat);//Cat(name=Tom01, mouse1=Mouse(name=Jarry3, birthdate=Mon Apr 24 11:00:01 CST 2023)) } \"]},\"2565\":{\"h\":\"集合的赋值\",\"t\":[\"准备环境\",\"@Data @ToString @AllArgsConstructor @NoArgsConstructor public class Book { private String bname; private String author; } \",\"@Data @ToString @AllArgsConstructor @NoArgsConstructor public class Student { private String[] books; private Set<String> bookSet; private List<String> bookList; private Map<String,String> bookMap; private List<Book> bookList2; } \"]},\"2566\":{\"h\":\"常规对List的操作\",\"t\":[\"applictaionContext.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!-- 基本集合注入 --> <bean id=\\\"student1\\\" class=\\\"com.meturing.pojo.test03.Student\\\"> <property name=\\\"books\\\"> <!-- 数组注入 --> <array> <value>Java</value> <value>MySql</value> <value>PHP</value> </array> </property> <!-- set集合注入 --> <property name=\\\"bookSet\\\"> <set> <value>Java</value> <value>MySql</value> <value>PHP</value> </set> </property> <!-- list集合注入 --> <property name=\\\"bookList\\\"> <list> <value>Java</value> <value>MySql</value> <value>PHP</value> </list> </property> <!-- Map集合注入 --> <property name=\\\"bookMap\\\"> <map> <entry key=\\\"Java\\\" value=\\\"Java\\\"></entry> <entry key=\\\"MySql\\\" value=\\\"MySql\\\"></entry> <entry key=\\\"PHP\\\" value=\\\"PHP\\\"></entry> </map> </property> <property name=\\\"bookList2\\\"> <list> <bean id=\\\"b1\\\" class=\\\"com.meturing.pojo.test03.Book\\\" p:bname=\\\"Java\\\" p:author=\\\"Java\\\"></bean> <bean id=\\\"b2\\\" class=\\\"com.meturing.pojo.test03.Book\\\" p:bname=\\\"MySql\\\" p:author=\\\"MySql\\\"></bean> <bean id=\\\"b3\\\" class=\\\"com.meturing.pojo.test03.Book\\\" p:bname=\\\"PHP\\\" p:author=\\\"PHP\\\"></bean> </list> </property> </bean> <bean id=\\\"b1\\\" class=\\\"com.meturing.pojo.test03.Book\\\" p:bname=\\\"Java\\\" p:author=\\\"Java\\\"></bean> <bean id=\\\"b2\\\" class=\\\"com.meturing.pojo.test03.Book\\\" p:bname=\\\"MySql\\\" p:author=\\\"MySql\\\"></bean> <bean id=\\\"b3\\\" class=\\\"com.meturing.pojo.test03.Book\\\" p:bname=\\\"PHP\\\" p:author=\\\"PHP\\\"></bean> </beans> \",\"Test.java\",\"//基本集合使用 @Test public void test01(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext4_1.xml\\\"); Student student = applicationContext.getBean(\\\"student1\\\", Student.class); System.out.println(Arrays.toString(student.getBooks()));//[Java, MySql, PHP] System.out.println(student.getBookList());//[Java, MySql, PHP] System.out.println(student.getBookSet());//[Java, MySql, PHP] System.out.println(student.getBookMap());//{Java=Java, MySql=MySql, PHP=PHP} System.out.println(student.getBookList2());//[Book(bname=Java, author=Java), Book(bname=MySql, author=MySql), Book(bname=PHP, author=PHP)] } \"]},\"2567\":{\"h\":\"引入util声明集合\",\"t\":[\"applictaionContext.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd \\\"> <!-- util引入 --> <bean id=\\\"student1\\\" class=\\\"com.meturing.pojo.test03.Student\\\"> <property name=\\\"bookList2\\\" ref=\\\"bookList\\\"></property> </bean> <util:list id=\\\"bookList\\\"> <bean id=\\\"b1\\\" class=\\\"com.meturing.pojo.test03.Book\\\" p:bname=\\\"Java\\\" p:author=\\\"Java\\\"></bean> <bean id=\\\"b2\\\" class=\\\"com.meturing.pojo.test03.Book\\\" p:bname=\\\"MySql\\\" p:author=\\\"MySql\\\"></bean> <bean id=\\\"b3\\\" class=\\\"com.meturing.pojo.test03.Book\\\" p:bname=\\\"PHP\\\" p:author=\\\"PHP\\\"></bean> </util:list> </beans> \",\"Test.java\",\"//util标签使用 @Test public void test02(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext4_2.xml\\\"); Student student = applicationContext.getBean(\\\"student1\\\", Student.class); System.out.println(student.getBookList2());//[Book(bname=Java, author=Java), Book(bname=MySql, author=MySql), Book(bname=PHP, author=PHP)] } \"]},\"2568\":{\"h\":\"Bean的生命周期\"},\"2569\":{\"h\":\"一般情况下的生命周期\"},\"2570\":{\"h\":\"生命周期阶段\",\"t\":[\"通过构造器创建bean实例 -> 执行构造器\",\"为bean属性赋值 -> 执行set方法\",\"初始化bean -> 调用bean的初始化方法,需要init-method参数配置指定调用的方法\",\"bean的获取 -> 容器对象 getBean方法\",\"容器关闭销毁bean -> 调用销毁方法,需要destroy-method参数配置指定调用的方法\"]},\"2571\":{\"h\":\"相关代码\",\"t\":[\"user.java 实体类\",\"@Data @ToString public class User { private Integer userid; private String username; private String password; public User() { System.out.println(\\\"第一步:User构造\\\"); } public void setUsername(String username) { System.out.println(\\\"第二步:User属性赋值\\\"); this.username = username; } public void initUser(){ System.out.println(\\\"第三步:User初始化\\\"); } public void destoryUser(){ System.out.println(\\\"第五步:User销毁\\\"); } public User(Integer userid, String username, String password) { this.userid = userid; this.username = username; this.password = password; } } \",\"applicationContext.xml\",\"<bean id=\\\"user\\\" class=\\\"com.meturing.pojo.User\\\" init-method=\\\"initUser\\\" destroy-method=\\\"destoryUser\\\"> <property name=\\\"username\\\" value=\\\"xiaoqiang\\\"></property> </bean> \",\"测试代码\",\"@Test public void test01(){ ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext1_1.xml\\\"); User user = classPathXmlApplicationContext.getBean(\\\"user\\\", User.class); System.out.println(\\\"使用User,第四步:\\\" ); System.out.println(user); classPathXmlApplicationContext.close();//手动关闭容器,触发销毁方法 } \",\"运行结果\",\"第一步:User构造 第二步:User属性赋值 第三步:User初始化 使用User,第四步: User(userid=null, username=xiaoqiang, password=null) 第五步:User销毁 \"]},\"2572\":{\"h\":\"Bean后置处理器引入\",\"t\":[\"如果我们想在Spring容器中完成bean实例化、配置以及其他初始化方法前后要添加一些自己逻辑处理。我们需要定义一个或多个BeanPostProcessor接口实现类，然后注册到Spring IOC容器中。\",\"接口中的两个方法都要将传入的bean返回，而不能返回null，如果返回的是null那么我们通过getBean方法将得不到目标\",\"ApplicationContext会自动检测在配置文件中实现了BeanPostProcessor接口的所有bean，并把它们注册为后置处理器，然后在容器创建bean的适当时候调用它，因此部署一个后置处理器同部署其他的bean并没有什么区别。而使用BeanFactory实现的时候，bean 后置处理器必须通过代码显式地去注册，在IOC容器继承体系中的ConfigurableBeanFactory接口中定义了注册方法\"]},\"2573\":{\"h\":\"生命周期阶段\",\"t\":[\"通过构造器创建bean实例 -> 执行构造器\",\"为bean属性赋值 -> 执行set方法\",\"把bean实例传递给bean的后置处理器的方法\",\"初始化bean -> 调用bean的初始化方法,需要init-method参数配置指定调用的方法\",\"把bean实例传递给bean的后置处理器的方法\",\"bean的获取 -> 容器对象 getBean方法\",\"容器关闭销毁bean -> 调用销毁方法,需要destroy-method参数配置指定调用的方法\"]},\"2574\":{\"h\":\"相关代码\",\"t\":[\"创建后置处理器: 实现 BeanPostProcesser 重写两个方法\",\"public class MyBeanProcesser implements BeanPostProcessor { /** * 在初始化过程之前 * * @param bean 实例化的Bean * @param beanName bean的ID * @return {@link Object } * @author meturing * @date 2023/04/28 */ @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { System.out.println(\\\"id为:[\\\"+beanName+\\\"]的Bean初始化之前!\\\"); return bean;//必须给传进来的bean进行返回 } /** * 发布过程初始化后 * * @param bean 实例化的Bean * @param beanName bean的ID * @return {@link Object } * @author meturing * @date 2023/04/28 */ @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { System.out.println(\\\"id为:[\\\"+beanName+\\\"]的Bean初始化之后!\\\"); return bean;//必须给传进来的bean进行返回 } } \",\"applicationContext.xml 并将后置处理器添加到容器中\",\"<bean id=\\\"user\\\" class=\\\"com.meturing.pojo.User\\\" init-method=\\\"initUser\\\" destroy-method=\\\"destoryUser\\\"> <property name=\\\"username\\\" value=\\\"xiaoqiang\\\"></property> </bean> <!-- 将bean的处理器注册进来 --> <bean id=\\\"myBeanProcesser\\\" class=\\\"com.meturing.beanProcesser.MyBeanProcesser\\\"></bean> \",\"测试方法\",\"@Test public void test02(){ ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext1_2.xml\\\"); User user = classPathXmlApplicationContext.getBean(\\\"user\\\", User.class); System.out.println(\\\"使用User,第四步:\\\" ); System.out.println(user); classPathXmlApplicationContext.close();//手动关闭容器,触发销毁方法 } \"]},\"2575\":{\"h\":\"Bean的自动注入\"},\"2576\":{\"h\":\"前言\",\"t\":[\"在之前的学习中,我们采用时是通过property标签手动指定给属性进行注入:\",\"Bean对象的引用\",\"对此,我们也可以使用Spring中提供的属性,让Spring自动帮我们注入Bean对象.\"]},\"2577\":{\"h\":\"Bean的自动注入\"},\"2578\":{\"h\":\"相关属性\",\"t\":[\"autowire 属性控制自动将容器中的对象注入到当前对象的属性上\",\"byName 根据目标id值和属性值注入,要保证当前对象的属性值和目标对象的id值一致\",\"byType 根据类型注入,要保证相同类型的目标对象在容器中只有一个实例\"]},\"2579\":{\"h\":\"相关代码\",\"t\":[\"实体类\",\"@ToString @NoArgsConstructor @Data public class Dept { } \",\"@ToString @Data @AllArgsConstructor @NoArgsConstructor public class Emp { private Dept dept; } \",\"applicationContext.xml\",\"<!-- 注册Dept类 --> <bean id=\\\"dept\\\" class=\\\"com.meturing.pojo.Dept\\\"></bean> <!-- 手动注入 --> <bean id=\\\"emp1\\\" class=\\\"com.meturing.pojo.Emp\\\"> <property name=\\\"dept\\\" ref=\\\"dept\\\"></property> </bean> <!-- 自动注入dept autowire 属性控制自动将容器中的对象注入到当前对象的属性上 byName 根据目标id值和属性值注入,要保证当前对象的属性值和目标对象的id值一致 byType 根据类型注入,要保证相同类型的目标对象在容器中只有一个实例 --> <bean id=\\\"emp2\\\" class=\\\"com.meturing.pojo.Emp\\\" autowire=\\\"byName\\\"></bean> \",\"测试代码\",\"@Test public void test04(){ ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext2.xml\\\"); Emp emp = classPathXmlApplicationContext.getBean(\\\"emp2\\\", Emp.class); System.out.println(emp); } \"]},\"2580\":{\"h\":\"引入外部配置文件\",\"t\":[\"spring容器可以读取.properties属性配置文件,可以将文件中的信息注入给bean\"]},\"2581\":{\"h\":\"相关案例\",\"t\":[\"接下来我们将简单的以Druid连接池为例\"]},\"2582\":{\"h\":\"引入依赖\",\"t\":[\"导入Druid依赖和mysql-connector依赖\",\"<!-- 德鲁伊连接池 --> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.1.14</version> </dependency> <!-- 数据库链接 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> \"]},\"2583\":{\"h\":\"准备数据源配置文件\",\"t\":[\"resources目录下准备一个jdbc.properties属性配置文件\",\"jdbc_driver=com.mysql.cj.jdbc.Driver jdbc_url=jdbc:mysql://192.168.1.188:3306/test?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai jdbc_username=root jdbc_password=root \"]},\"2584\":{\"h\":\"将配置文件引入到ApplicationContext.xml中\",\"t\":[\"添加context名称空间\",\"添加context标签指向配置文件\",\"使用${key}的形式,直接使用配置文件的值\",\"完整代码:\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\" /> <bean id=\\\"dataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"username\\\" value=\\\"${jdbc_username}\\\"></property> <property name=\\\"password\\\" value=\\\"${jdbc_password}\\\"></property> <property name=\\\"url\\\" value=\\\"${jdbc_url}\\\"></property> <property name=\\\"driverClassName\\\" value=\\\"${jdbc_driver}\\\"></property> </bean> </beans> \",\"运行效果:\"]},\"2585\":{\"h\":\"注解方式管理Bean\"},\"2586\":{\"h\":\"基于注解的IOC\"},\"2587\":{\"h\":\"相关注解\",\"t\":[\"@Component 放在类上,用于标记,告诉spring当前类需要由容器实例化bean并放入容器中 该注解有三个子注解:\",\"Controller 用于实例化controller层bean\",\"Service 用于实例化service层bean\",\"Repository 用于实例化持久层bean\",\"当不确定是哪一层,就用Component,这几个注解互相混用其实也可以,但是不推荐\",\"默认情况下,注册到容器的ID是当前类名的首字母小写.如:User -> user 当然我们可以直接指定注册的ID: @Component(value = \\\"userName1\\\") -> @Component(\\\"userName1\\\")\"]},\"2588\":{\"h\":\"包扫描\",\"t\":[\"在之前的XML写法中我们手动直接指定对应的实体类:\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <bean id=\\\"user\\\" class=\\\"com.meturing.pojo.User\\\"></bean> </beans> \",\"这样的话可能会造成手动注册管理及其麻烦,所以我们可以使用包扫秒直接批量注册使用注解的实体类\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <context:component-scan base-package=\\\"com.meturing.pojo\\\" /> </beans> \",\"base-package 后面放要扫描的包 如果有多个包需要扫描,可以使用逗号隔开 com.meturing.bean,com.meturing.service 或者 可以写上一层包路径 com.meturing\",\"默认情况下,使用包扫描会注入所有的实体类(Component / Controller / Service / Repository),我们可以使用标签来选择和排除指定的标签:\",\"context:include-filter : 只扫描指定的标签注解\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 只扫描Component --> <context:component-scan base-package=\\\"com.meturing.pojo\\\" use-default-filters=\\\"false\\\"> <context:include-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Component\\\"/> </context:component-scan> </beans> \",\"context:exclude-filter : 排除指点的标签注解\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 排除Service --> <context:component-scan base-package=\\\"com.meturing.pojo\\\" use-default-filters=\\\"true\\\"> <context:exclude-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Service\\\"/> </context:component-scan> </beans> \"]},\"2589\":{\"h\":\"相关代码\"},\"2590\":{\"h\":\"测试基本注册\",\"t\":[\"实体类\",\"@Component @Data @ToString @NoArgsConstructor public class User { } \",\"applicationContext.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 扫描指定包下面的所有实体类 --> <context:component-scan base-package=\\\"com.meturing.pojo\\\" /> </beans> \",\"测试类\",\"@Test public void test01(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext1_1.xml\\\"); User user = applicationContext.getBean(\\\"user\\\", User.class); System.out.println(user); } \"]},\"2591\":{\"h\":\"测试指定名称\",\"t\":[\"实体类\",\"@Data @ToString @NoArgsConstructor //@Component(value = \\\"user1\\\") @Component(\\\"user1\\\") public class User1 { } \",\"applicationContext.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 扫描指定包下面的所有实体类 --> <context:component-scan base-package=\\\"com.meturing.pojo\\\" /> </beans> \",\"测试类\",\"@Test public void test02(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext1_1.xml\\\"); User1 user1 = applicationContext.getBean(\\\"user1\\\", User1.class); System.out.println(user1); } \"]},\"2592\":{\"h\":\"测试指定注解\",\"t\":[\"实体类\",\"@Data @ToString @NoArgsConstructor //@Component(value = \\\"user1\\\") @Component(\\\"user1\\\") public class User1 { } \",\"applicationContext.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 只扫描Component --> <context:component-scan base-package=\\\"com.meturing.pojo\\\" use-default-filters=\\\"false\\\"> <context:include-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Component\\\"/> </context:component-scan> <!-- 排除Service --> <context:component-scan base-package=\\\"com.meturing.pojo\\\" use-default-filters=\\\"true\\\"> <context:exclude-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Service\\\"/> </context:component-scan> </beans> \",\"测试类\",\"@Test public void test03(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext1_2.xml\\\"); User1 user1 = applicationContext.getBean(\\\"user1\\\", User1.class); System.out.println(user1); } \"]},\"2593\":{\"h\":\"基于注解的DI\",\"t\":[\"@Autowired 根据属性数据类型自动装配@Qualifier 搭配@Autowired使用,根据属性名称注入依赖,多用于一个接口多个实现类的情况@Resources 是Java的原生注解, 可以根据类型,也可以根据名称注入@Value 注入普通数据类型(8+String)\"]},\"2594\":{\"h\":\"环境准备\",\"t\":[\"applicationContext.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <context:component-scan base-package=\\\"com.meturing\\\" /> </beans> \",\"创建Dao层\",\"public interface UserDao { void sayHello(); } \",\"@Repository(\\\"userDaoImplA\\\") public class UserDaoImplA implements UserDao { @Override public void sayHello() { System.out.println(\\\"UserDaoImplA say :hello\\\"); } } \",\"@Repository(\\\"userDaoImplB\\\") public class UserDaoImplB implements UserDao { @Override public void sayHello() { System.out.println(\\\"UserDaoImplB say :hello\\\"); } } \",\"创建Service层\",\"public interface UserService { void sayHello(); } \",\"测试类\",\"@Test public void test04(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext2.xml\\\"); UserServiceImpl userServiceImpl = applicationContext.getBean(\\\"userServiceImpl\\\", UserServiceImpl.class); userServiceImpl.sayHello(); } \"]},\"2595\":{\"h\":\"Autowired的使用\",\"t\":[\"默认情况下,@Autowired 注解会根据变量名字查找具体的实例对象,例如:\",\"userDaoImplB 会找到 UserDaoImplB 注入\",\"UserServiceImpl实现类\",\"@Service public class UserServiceImpl implements UserService { @Autowired private UserDao userDaoImplB; @Override public void sayHello() { userDao.sayHello(); } } \",\"输出结果\",\"UserDaoImplB say :hello \"]},\"2596\":{\"h\":\"Qualifier的使用\",\"t\":[\"如果变量名字直接为接口,且有多个实现类需要注入的话,则需要使用Qualifier搭配,否则会报错\",\"搭配Qualifier指定注入的实例ID\",\"UserServiceImpl实现类\",\"@Autowired @Qualifier(\\\"userDaoImplB\\\") private UserDao UserDao; @Override public void sayHello() { UserDao.sayHello(); } \",\"输出结果\",\"UserDaoImplB say :hello \"]},\"2597\":{\"h\":\"Resources的使用\",\"t\":[\"我们可以使用Java的原生注解@Resources来指定注入的ID或者注入的类型:\",\"UserServiceImpl实现类\",\"//@Resource(name = \\\"userDaoImplB\\\") @Resource(type = UserDaoImplB.class) private UserDao UserDao; @Override public void sayHello() { UserDao.sayHello(); } \",\"输出结果\",\"UserDaoImplB say :hello \"]},\"2598\":{\"h\":\"Value的使用\",\"t\":[\"我们可以用@Value注解为注入的Bean的属性赋初始值\",\"UserServiceImpl实现类\",\"@Autowired @Qualifier(\\\"userDaoImplB\\\") private UserDao UserDao; @Value(\\\"zhangsan\\\") private String sname; @Value(\\\"boy\\\") private String sgender; @Value(\\\"16\\\") private Integer sage; @Override public void sayHello() { UserDao.sayHello(); System.out.println(sname); System.out.println(sgender); System.out.println(sage); } \",\"输出结果\",\"UserDaoImplB say :hello zhangsan boy 16 \"]},\"2599\":{\"h\":\"引入外部资源注入\",\"t\":[\"添加user.properties外部资源文件\",\"sname=root sgender=root \",\"修改applicationContext.xml,导入配置文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <context:component-scan base-package=\\\"com.meturing\\\" /> <!-- 引入外部资源注入 --> <context:property-placeholder location=\\\"classpath:user.properties\\\" /> </beans> \",\"@Autowired @Qualifier(\\\"userDaoImplB\\\") private UserDao UserDao; @Value(\\\"${sname}\\\") private String sname; @Value(\\\"boy\\\") private String sgender; @Value(\\\"16\\\") private Integer sage; @Override public void sayHello() { UserDao.sayHello(); System.out.println(sname); System.out.println(sgender); System.out.println(sage); } \",\"输出结果\",\"UserDaoImplB say :hello root boy 16 \"]},\"2600\":{\"h\":\"完全使用注解(使用配置类)\"},\"2601\":{\"h\":\"创建Config类\",\"t\":[\"@ComponentScan(basePackages = \\\"com.meturing\\\")//包扫描 @PropertySource(\\\"classpath:user.properties\\\")//配置类 public class SpringConfig { } \",\"@ComponentScan 表示包扫描,用于注册到容器@PropertySource 表示外部引用资源\"]},\"2602\":{\"h\":\"使用配置类获取容器中的Bean\",\"t\":[\"AnnotationConfigApplicationContext\",\"@Test public void test05(){ ApplicationContext applicationContext = new AnnotationConfigApplicationContext(SpringConfig.class); UserServiceImpl userServiceImpl = applicationContext.getBean(\\\"userServiceImpl\\\", UserServiceImpl.class); userServiceImpl.sayHello(); } \"]},\"2603\":{\"h\":\"静态代理与动态代理\"},\"2604\":{\"h\":\"静态代理\",\"t\":[\"代理类与被代理类实现共同接口,在代理类中对被代理类进行代码增强\"]},\"2605\":{\"h\":\"代码Demo\",\"t\":[\"简单的一个Demo来模拟以下情景:\",\"用户张三需要打官司,请律师在他讲话之前进行辩护和总结\",\"Court 接口\",\"public interface Court { void doCourt(); } \",\"Person 实体类\",\"public class Person implements Court { private String name; public Person(String name) { this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } public void doCourt() { System.out.println(name + \\\"说:我没有杀人!\\\"); } } \",\"正常情况下,我们直接使用Person类会出现以下情况\",\"public class TestDemo { public static void main(String[] args) { Person person = new Person(\\\"张三\\\"); person.doCourt(); } } \",\"接下来我们使用静态代理的方式创建一个代理类,来增强Person类\",\"public class Lawyer implements Court { private Person person;//被代理的类 public Lawyer(Person person) { this.person = person; } public void doCourt() { //增强代码 System.out.println(\\\"开始取证~\\\"); System.out.println(\\\"为\\\"+person.getName()+\\\"辩解\\\"); //执行代码 person.doCourt(); //增强代码 System.out.println(\\\"陈诉总结\\\"); } } \",\"增强后的效果\",\"public class TestDemo { public static void main(String[] args) { Lawyer lawyer = new Lawyer(person); lawyer.doCourt(); } } \"]},\"2606\":{\"h\":\"总结\",\"t\":[\"静态代理中代理类与被代理类都需要实现同一个接口，这就说明我们的一个静态代理类只能代理一个类，并且还要事先知道我们要代理哪个类才能写代理类，如果我们有其他类还想使用代理那就必须再写一个代理类。\",\"然而在实际开发中我们是可能是有非常多的类是需要被代理的，并且事先我们可能并不知道我们要代理哪个类。所以如果继续使用静态代理反而会增加许多的工作量，并且效率低下，代码复用率也不好。\"]},\"2607\":{\"h\":\"动态代理\",\"t\":[\"动态代理可以针对于一些不特定的类或者一些不特定的方法进行代理,我们可以在程序运行时动态的变化代理的规则，代理类在程序运行时才创建的代理模式成为动态代理。这种情况下，代理类并不是在Java代码中定义好的，而是在程序运行时根据我们的在Java代码中的“指示”动态生成的\",\"类型\",\"归属\",\"特征\",\"Proxy 动态代理\",\"JDK动态代理\",\"面向接口\",\"CGlib 动态代理\",\"第三方动态代理\",\"面向父类\"]},\"2608\":{\"h\":\"Proxy动态代理\",\"t\":[\"通过Porxy动态代理获得一个代理对象,在代理对象中,对某个方法进行增强\",\"Proxy.newProxyInstance 方法需要三个参数:\",\"ClassLoader loader -> 被代理类的类加载器,可通过反射获取\",\"Class<?>[] interfaces -> 被代理类的接口Class对象,可通过反射获取\",\"InvocationHandler h -> 方法调度接口,可以直接New接口对象或者新建类实现改接口\"]},\"2609\":{\"h\":\"代码Demo\",\"t\":[\"接口\",\"public interface Dinner { void eat(String foodName); void drink(); } \",\"被代理类\",\"public class Man implements Dinner { private String name; public Man(String name) { this.name = name; } @Override public void eat(String foodName) { System.out.println(name+\\\"正在吃\\\"+foodName); } @Override public void drink() { System.out.println(name+\\\"正在喝茶\\\"); } } \",\"public class Student implements Dinner { private String name; public Student(String name) { this.name = name; } @Override public void eat(String foodName) { System.out.println(name+\\\"正在食堂吃\\\"+foodName); } @Override public void drink() { System.out.println(name+\\\"正在喝可乐\\\"); } } \",\"使用Proxy动态代理\",\"public class Test1 { public static void main(String[] args) { Dinner dinner = new Man(\\\"张三\\\"); //ClassLoader loader, ClassLoader classLoader = dinner.getClass().getClassLoader(); //Class<?>[] interfaces, Class<?>[] interfaces = dinner.getClass().getInterfaces(); //InvocationHandler h InvocationHandler invocationHandler = new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { Object results = null; if (method.getName().equals(\\\"eat\\\")) { System.out.println(\\\"餐前洗手~\\\"); //Object obj, Object... args obj被代理的对象 args表示参数 results = method.invoke(dinner,args); System.out.println(\\\"餐后洗碗~\\\"); }else { results = method.invoke(dinner,args); } return results; } }; Dinner dinnerProxy = (Dinner) Proxy.newProxyInstance(classLoader, interfaces, invocationHandler); dinnerProxy.eat(\\\"三明治\\\"); dinnerProxy.drink(); } } \"]},\"2610\":{\"h\":\"总结\",\"t\":[\"在不修改原有代码的 或者没有办法修改原有代码的情况下增强对象功能 ,使用代理对象代替原来的对象去完成功能进而达到拓展功能的目的\",\"JDK Proxy 动态代理面向接口的动态代理,一定要有接口和实现类的存在.代理对象增强的是实现类 生成的代理对象只能转换成接口的对象 不能转换成被代理类的对象 代理对象只能增强接口中定义的方法 实现类中其他和接口无关的方法是无法增强的 代理对象只能读取到接口中方法上的注解 不能读取到实现类方法上的注解\"]},\"2611\":{\"h\":\"CGlib动态代理\",\"t\":[\"CGlib动态代理是面向父类的,利用的子类继承父类的特新实现代码增强\"]},\"2612\":{\"h\":\"底层原理\",\"t\":[\"使用继承实现增强\",\"实体类\",\"public class Person { private String name; public Person(String name) { this.name = name; } public Person() { } public void eat(String foodName) { System.out.println(name+\\\"正在食堂吃\\\"+foodName); } } \",\"增强子类\",\"public class ZhangSan extends Person { public ZhangSan(String name) { super(name); } @Override public void eat(String foodName) { System.out.println(\\\"餐前洗手\\\"); super.eat(foodName); System.out.println(\\\"餐后洗碗\\\"); } } \",\"测试效果\",\"public class Test01 { public static void main(String[] args) { System.out.println(\\\"--- 使用子类继承父类增强 ---\\\"); ZhangSan zhangSan = new ZhangSan(\\\"张三\\\"); zhangSan.eat(\\\"三明治\\\"); } } \"]},\"2613\":{\"h\":\"使用CGlib动态代理\"},\"2614\":{\"h\":\"环境准备\",\"t\":[\"CGlib动态代理需要依赖org.springframework.cglib包,所以在使用前需要导包. 我们可以直接导入spring-context 将会自动关联依赖\",\"<dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.12.RELEASE</version> </dependency> </dependencies> \"]},\"2615\":{\"h\":\"代码\",\"t\":[\"创建一个Enhancer对象\",\"为Enhancer对象设置父类字节码\",\"获取MethodInterceptor对象 用于定义增强规则\",\"为Enhancer对象设置methodInterceptor\",\"通过Enhancer对象获得代理对象\",\"public class Test01 { public static void main(String[] args) { System.out.println(\\\"--- 尝试使用CGlib动态代理增强 ---\\\"); // 1 获得一个Enhancer对象 Enhancer enhancer = new Enhancer(); // 2 设置父类字节码 enhancer.setSuperclass(Person.class); // 3 获取MethodInterceptor对象 用于定义增强规则 MethodInterceptor interceptor = new MethodInterceptor() { /** * 拦截 * * @param o 生成之后的代理对象 personProxy * @param method 父类中原本要执行的方法 Person>>> eat() * @param objects 方法在调用时传入的实参数组 * @param methodProxy 子类中重写父类的方法 personProxy >>> eat() * @return {@link Object } * @author sqTan * @date 2023/05/05 */ @Override public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable { Object result = null; if (method.getName().equals(\\\"eat\\\")) { System.out.println(\\\"饭前洗手\\\"); methodProxy.invokeSuper(o,objects); System.out.println(\\\"饭后洗碗\\\"); }else { methodProxy.invokeSuper(o, objects); } return result; } }; // 4 设置methodInterceptor enhancer.setCallback(interceptor); // 5 获得代理对象 Class[] argumentTypes, Object[] arguments //Person person = (Person) enhancer.create(); //使用无参构造 Person person = (Person) enhancer.create(new Class[]{String.class},new Object[]{\\\"张三\\\"});//使用带参构造 // 6 使用代理对象完成功能 person.eat(\\\"三明治\\\"); } } \"]},\"2616\":{\"h\":\"总结\",\"t\":[\"面向父类和接口没有关系\",\"不仅仅可以增强接口中定义的方法还可以增强一个类的其他方法\",\"可以读取父类中方法上的所有注解\"]},\"2617\":{\"h\":\"AOP面向切面编程\"},\"2618\":{\"h\":\"概念\"},\"2619\":{\"h\":\"什么是AOP切面编程\",\"t\":[\"AOP切面编程一般可以帮助我们在不修改现有代码的情况下,对程序的功能进行拓展,往往用于实现 日志处理,权限控制,性能检测,事务控制等\",\"在之前的学习中,我们学习了动态代理 : 静态代理与动态代理\",\"AOP实现的原理就是动态代理: 在有接口的情况下,使用JDK动态代理,在没有接口的情况下使用cglib动态代理\"]},\"2620\":{\"h\":\"AOP切面编程的相关术语\"},\"2621\":{\"h\":\"连接点 Joint point\",\"t\":[\"类里面那些可以被增强的方法,这些方法称之为连接点\",\"表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point\"]},\"2622\":{\"h\":\"切入点 Pointcut\",\"t\":[\"实际被增强的方法,称之为切入点\",\"表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方\"]},\"2623\":{\"h\":\"通知 Advice\",\"t\":[\"实际增强的逻辑部分称为通知 (增加的功能)\",\"Advice 定义了在 Pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。\",\"通知类型:\",\"前置通知 : 在被代理的目标方法前执行\",\"返回通知 : 在被代理的目标方法成功结束后执行（寿终正寝）\",\"异常通知 : 在被代理的目标方法异常结束后执行（死于非命）\",\"后置通知 : 在被代理的目标方法最终结束后执行（盖棺定论）\",\"环绕通知 : 使用try...catch...finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置\"]},\"2624\":{\"h\":\"目标对象 Target\",\"t\":[\"被增强功能的对象(被代理的对象)\",\"织入 Advice 的目标对象\"]},\"2625\":{\"h\":\"切面 Aspect\",\"t\":[\"表现为功能相关的一些advice方法放在一起声明成的一个Java类\",\"Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。\"]},\"2626\":{\"h\":\"织入 Weaving\",\"t\":[\"创建代理对象并实现功能增强的声明并运行过程\",\"将 Aspect 和其他对象连接起来, 并创建 Adviced object 的过程\"]},\"2627\":{\"h\":\"AspectJ\",\"t\":[\"AspectJ本身并不是spring框架中的组成部分, 是一个独立的AOP框架,一般把AspectJ和Spring框架的AOP依赖一起使用,所以要导入一个独立的依赖\",\"本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。\"]},\"2628\":{\"h\":\"环境准备\"},\"2629\":{\"h\":\"所需依赖\",\"t\":[\"<packaging>jar</packaging> <properties> <maven.compiler.source>8</maven.compiler.source> <maven.compiler.target>8</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.12.RELEASE</version> </dependency> <!--spring切面包--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>5.3.5</version> </dependency> <!--织入包 spring-aspects 已经导入该包,这里可以不导入--> <!--<dependency>--> <!--<groupId>org.aspectj</groupId>--> <!--<artifactId>aspectjweaver</artifactId>--> <!--<version>1.9.6</version>--> <!--</dependency>--> <!--aop联盟包--> <dependency> <groupId>aopalliance</groupId> <artifactId>aopalliance</artifactId> <version>1.0</version> </dependency> <!--Apache Commons日志包--> <dependency> <groupId>commons-logging</groupId> <artifactId>commons-logging</artifactId> <version>1.2</version> </dependency> <!--lombok --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.26</version> </dependency> <!--junit --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13.1</version> <scope>test</scope> </dependency> </dependencies> \",\"核心包:spring-context 包会自动依赖 spring-aop / spring-beans / spring-core / spring-expressionspring-aspects 包会自动依赖 spectjweaver\"]},\"2630\":{\"h\":\"Spring配置文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\\\"> <!--spring 包扫描 --> <context:component-scan base-package=\\\"com.meturing\\\" /> <!--aop autoProxy 自动生成代理对象 --> <aop:aspectj-autoproxy /> </beans> \",\"注意: 由于需要使用aop与context,我们需要导入声明空间才可使用\"]},\"2631\":{\"h\":\"接口环境\",\"t\":[\"UserDao.Java\",\"public interface UserDao { int addUser(Integer userid,String username); } \",\"UserDaoImpl.Java\",\"@Repository public class UserDaoImpl implements UserDao { @Override public int addUser(Integer userid, String username) { System.out.println(\\\"userdao add ... ...\\\"); //int i =1/0; return 1; } } \",\"EmpDao.java\",\"public interface EmpDao { int addEmp(Integer empno,String ename,String job); } \",\"EmpDaoImpl.java\",\"@Repository public class EmpDaoImpl implements EmpDao { @Override public int addEmp(Integer empno, String ename, String job) { System.out.println(\\\"empDao add ... ...\\\"); //int i = 1/0; return 1; } } \",\"注意,我们需要将实现类交给IOC容器进行管理,常见的注解如下: 相关注解\"]},\"2632\":{\"h\":\"切入点表达式\",\"t\":[\"通过一个表达式来确定AOP要增强的是哪个或者那些方法\"]},\"2633\":{\"h\":\"语法\",\"t\":[\"execution([权限修饰符][返回值类型][类的全路径名][方法名](参数 列表) )\",\"可用的表达式:\",\"execution() || execution()表示满足两个execution()中的任何一个即可\",\"execution() && execution()表示两个execution()表达式必须都满足\",\"!execution()表示不满足表达式的其他方法\"]},\"2634\":{\"h\":\"使用案例\",\"t\":[\"//指定切点为UserDaoImpl.add方法 execution(* com.meturing.dao.UserDaoImpl.add(..)) //指定切点为UserDaoImpl.所有的方法 execution(* com.meturing.dao.UserDaoImpl.*(..)) //指定切点为dao包下所有的类中的所有的方法 execution(* com.meturing.dao.*.*(..)) // 指定切点为dao包下所有的类中的add的方法 execution(* com.meturing.dao.*.add(..)) // 指定切点为dao包下所有的类中的add开头的方法 execution(* com.meturing.dao.*.add*(..)) \"]},\"2635\":{\"h\":\"重用切入点表达式\",\"t\":[\"在一处声明切入点表达式之后，其他有需要的地方引用这个切入点表达式。易于维护，一处修改，处处生效。声明方式如下： 我们可以在一个专门的方法上@Pointcut注解声明的切入点表达式，可以在其他任何地方通过方法名进行引入\",\"// 切入点表达式重用 @Pointcut(\\\"execution(* *..*.add(..))\\\") public void declarPointCut() {} \",\"同一个类中\",\"@Before(value = \\\"declarPointCut()\\\") public void printLogBeforeCoreOperation(JoinPoint joinPoint) {} \",\"在不同的类中\",\"@Around(value = \\\"com.atguigu.spring.aop.aspect.LogAspect.declarPointCut()\\\") public Object roundAdvice(ProceedingJoinPoint joinPoint) {} \",\"而作为存放切入点表达式的类，可以把整个项目中所有切入点表达式全部集中过来，便于统一管理：\",\"@Component public class AtguiguPointCut { @Pointcut(value = \\\"execution(public int *..Calculator.sub(int,int))\\\") public void atguiguGlobalPointCut(){} @Pointcut(value = \\\"execution(public int *..Calculator.add(int,int))\\\") public void atguiguSecondPointCut(){} @Pointcut(value = \\\"execution(* *..*Service.*(..))\\\") public void transactionPointCut(){} } \"]},\"2636\":{\"h\":\"JoinPoint对象和ProceedingJoinPoint对象\"},\"2637\":{\"h\":\"JoinPoint对象\",\"t\":[\"JoinPoint对象封装SpringAop中切面方法的信息,在切面方法中添加JoinPoint参数,就可以获取到了封装了该方法信息的JoinPoint对象.\",\"常用API:\"]},\"2638\":{\"h\":\"ProceedingJoinPoint对象\",\"t\":[\"ProceedingJoinPoint对象是JoinPoint的子接口,该对象值用在@Around的切面方法中\",\"Object proceed() throws Throwable //执行目标方法\",\"Object proceed(Object[] varl) throws Thowable //传入的新的参数去执行目标方法\"]},\"2639\":{\"h\":\"通知\",\"t\":[\"我们一般会对一个类作为切面类,使用@Aspect注解标识,并使用@Component注解交给容器管理\"]},\"2640\":{\"h\":\"@Before 前置通知\",\"t\":[\"切点方法执行之前先执行的功能 参数列表可以用JoinPoint接收切点对象,可以获取方法执行的参数\",\"@Component @Aspect public class DaoAspect { @Before(\\\"execution(* com.meturing.dao.*.add*(..))\\\") public void methodBefore(JoinPoint joinPoint){ System.out.println(\\\"Before invoked\\\"); } } \"]},\"2641\":{\"h\":\"@AfterReturning 返回通知\",\"t\":[\"切点方法正常运行结束后增强的功能 如果方法运行过程中出现异常,则该功能不运行 参数列表可以用 JoinPoint joinPoint接收切点对象,可以用Object res接收方法返回值,需要用returning指定返回值名称\",\"@Component @Aspect public class DaoAspect { @AfterReturning(value = \\\"execution(* com.meturing.dao.*.add*(..))\\\",returning = \\\"res\\\") public void methodAfterReturning(JoinPoint joinPoint,Object res){ System.out.println(\\\"AfterReturning invoked\\\"); } } \"]},\"2642\":{\"h\":\"@AfterThrowing 异常通知\",\"t\":[\"切点方法出现异常时运行的增强功能 如果方法运行没有出现异常,则该功能不运行 参数列表可以用Exception ex接收异常对象 需要通过throwing指定异常名称\",\"@Component @Aspect public class DaoAspect { @AfterThrowing(value = \\\"execution(* com.meturing.dao.*.add*(..))\\\",throwing = \\\"ex\\\") public void methodAfterThrowing(Exception ex){ System.out.println(\\\"AfterThrowing invoked\\\"); System.out.println(ex.getMessage()); } } \"]},\"2643\":{\"h\":\"@After 后置通知\",\"t\":[\"方法执行之后要增强的功能 无论切点方法是否出现异常都会执行的方法 参数列表可以用JoinPoint接收切点对象\",\"@Component @Aspect public class DaoAspect { @After(\\\"execution(* com.meturing.dao.*.add*(..))\\\") public void methodAfter(JoinPoint joinPoint){ System.out.println(\\\"After invoked\\\"); } } \"]},\"2644\":{\"h\":\"@Around 环绕通知\",\"t\":[\"在切点方法之前和之后都进行功能的增强,类似CGLib动态代理 需要在通知中定义方法执行的位置,并在执行位置之前和之后自定义增强的功能 方法列表可以通过ProceedingJoinPoint获取执行的切点,通过proceedingJoinPoint.proceed()方法控制切点方法的执行位置proceedingJoinPoint.proceed()方法会将切点方法的返回值获取到,并交给我们,可以做后续处理我们在环绕通知的最后需要将切点方法的返回值继续向上返回,否则切点方法在执行时接收不到返回值\",\"@Component @Aspect public class DaoAspect { @Around(value = \\\"execution(* com.meturing.dao.*.add*(..))\\\") public Object methodAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable { System.out.println(\\\"Before invoked\\\"); Object proceed = proceedingJoinPoint.proceed();//执行切点方法 System.out.println(\\\"After invoked\\\"); if (proceed instanceof Integer){ System.out.println((Integer)proceed); } return proceed; } } \"]},\"2645\":{\"h\":\"通知优先级\",\"t\":[\"相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。\",\"优先级高的切面：外面\",\"优先级低的切面：里面\"]},\"2646\":{\"h\":\"@Order 注解\",\"t\":[\"使用@Order注解可以控制切面的优先级：\",\"@Order(较小的数)：优先级高\",\"@Order(较大的数)：优先级低\"]},\"2647\":{\"h\":\"实际意义\",\"t\":[\"实际开发时，如果有多个切面嵌套的情况，要慎重考虑。\",\"例如：如果事务切面优先级高，那么在缓存中命中数据的情况下，事务切面的操作都浪费了。\",\"此时应该将缓存切面的优先级提高，在事务操作之前先检查缓存中是否存在目标数据。\"]},\"2648\":{\"h\":\"AOP的完全XML开发\",\"t\":[\"我们可以直击在XML中配置AOP的切面属性\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\\\"> <!--spring 包扫描 --> <context:component-scan base-package=\\\"com.meturing\\\" /> <!--aop autoProxy 自动生成代理对象 --> <aop:aspectj-autoproxy /> <!-- Aop的配置 --> <aop:config> <!-- 配置公共切入点表达式 --> <aop:pointcut id=\\\"addPointCut\\\" expression=\\\"execution(* com.meturing.dao.*.add*(..))\\\"/> <!-- 配置切面类 --> <aop:aspect id=\\\"daoAspectByXML\\\" ref=\\\"daoAspectByXml\\\"> <!-- 前置通知: method方法名 pointcut-ref:公共切入点表达式ID --> <aop:before method=\\\"methodBefore\\\" pointcut-ref=\\\"addPointCut\\\" /> <!-- 返回通知: method方法名 pointcut-ref:公共切入点表达式ID returning:指定返回的值 --> <aop:after-returning method=\\\"methodAfterReturning\\\" pointcut-ref=\\\"addPointCut\\\" returning=\\\"res\\\" /> <!-- 异常通知: method方法名 pointcut-ref:公共切入点表达式ID throwing:异常的值 --> <aop:after-throwing method=\\\"methodAfterThrowing\\\" pointcut-ref=\\\"addPointCut\\\" throwing=\\\"ex\\\" /> <!-- 后置通知: method方法名 pointcut-ref:公共切入点表达式ID --> <aop:after method=\\\"methodAfter\\\" pointcut-ref=\\\"addPointCut\\\" /> <!-- 环绕通知: method方法名 pointcut-ref:公共切入点表达式ID --> <aop:around method=\\\"methodAround\\\" pointcut-ref=\\\"addPointCut\\\" /> </aop:aspect> </aop:config> </beans> \",\"在aop:config标签中配置:\",\"aop:pointcut标签配置切入点表达式\",\"aop:aspect标签配置切面类 使用ref属性关联到切面的bean \",\"aop:before标签配置前置通知 使用pointcut-ref关联到切入点表达式\",\"aop:after-returning标签配置返回通知 使用pointcut-ref关联到切入点表达式，returning指定方法中用来接受目标方法返回值的参数名\",\"aop:after-throwing标签配置异常通知 使用pointcut-ref关联到切入点表达式，throwing指定目标方法异常时的参数名\",\"aop:after标签配置后置通知 使用pointcut-ref关联到切入点表达式\"]},\"2649\":{\"h\":\"AOP的完全注解开发\",\"t\":[\"添加配置类SpringConfig.java\",\"@Configuration @ComponentScan(basePackages = \\\"com.meturing\\\") @EnableAspectJAutoProxy(proxyTargetClass = true) public class SpringConfig { } \",\"测试类\",\"@Test public void test2(){ ApplicationContext context=new AnnotationConfigApplicationContext(SpringConfig.class); UserDao userDao = context.getBean( UserDao.class); int add = userDao.addUser(10,\\\"晓明\\\"); } \"]},\"2650\":{\"h\":\"AOP的通知获取细节\"},\"2651\":{\"h\":\"JoinPoint接口\",\"t\":[\"JoinPoint接口 : org.aspectj.lang.JoinPoint\",\"要点1：JoinPoint接口通过getSignature()方法获取目标方法的签名\",\"要点2：通过目标方法签名对象获取方法名\",\"要点3：通过JoinPoint对象获取外界调用目标方法时传入的实参列表组成的数组\",\"/**获取目标方法名称，实际参数列表 * 在前置通知方法形参位置声明一个JoinPoint类型的参数，Spring就会将这个对象传入 * 然后根据这个对象就可以获取目标方法的名称、实际参数列表*/ @Before(value = \\\"execution(public int com.meturing.aop.impl.CalculatorPureImpl.div(int,int))\\\") public void printLogBeforeCore(JoinPoint joinPoint){ //1. 通过JoinPoint对象获取目标方法签名对象 //一个方法的全部声明信息就是一个方法的签名 Signature signature = joinPoint.getSignature(); String name = signature.getName(); System.out.println(\\\"方法名：name() =\\\" + name); int modifiers = signature.getModifiers(); //二进制的形式返回 System.out.println(\\\"修饰符：modifiers() =\\\" + modifiers); String declaringTypeName = signature.getDeclaringTypeName(); System.out.println(\\\"声明类型的全限定名：declaringTypeName() =\\\" + declaringTypeName); //参数列表 Object[] args = joinPoint.getArgs(); List<Object> objects = Arrays.asList(args); System.out.println(\\\"参数列表是：\\\"+objects); System.out.println(\\\"[前置通知] 前置通知...\\\"); } \",\"需要获取方法签名、传入的实参等信息时，可以在通知方法声明JoinPoint类型的形参。 获取方法名：joinPoint.getSignature(); 获取修饰符：signature.getModifiers(); （返回是以二进制的形式） 获取类型的全限定名：signature.getDeclaringTypeName(); 获取参数：Object[] args = joinPoint.getArgs(); List objects = Arrays.asList(args);\"]},\"2652\":{\"h\":\"方法返回值\",\"t\":[\"//获取目标方法返回值分两步 //第一步：在AfterReturning注解中，配置returning属性的值设置形参的名称 //第二步：使用returning属性设置的名称在通知方法中声明一个形参Object @AfterReturning(value = \\\"execution(public int com.meturing.aop.impl.CalculatorPureImpl.div(int,int))\\\", returning = \\\"targetMethodReturn\\\") public void printLogAfterCoreSuccess(JoinPoint joinPoint,Object targetMethodReturn){ String name = joinPoint.getSignature().getName(); System.out.println(\\\"[返回通知] \\\"+name+\\\"方法执行成功返回...\\\"+targetMethodReturn); } \"]},\"2653\":{\"h\":\"抛出的异常捕捉\",\"t\":[\"在异常通知中，通过@AfterThrowing注解的throwing属性获取目标方法抛出的异常对象\",\"//获取异常值分两步 //第一步：AfterThrowing，配置throwing属性的值设置形参的名称 //第二步：使用throwing属性设置的名称在通知方法中声明一个形参，Spring会将目标方法抛出的异常从这传入 @AfterThrowing(value = \\\"execution(public int com.meturing.aop.impl.CalculatorPureImpl.div(int,int))\\\", throwing = \\\"targetMethodException\\\") public void printLogAfterCoreException(JoinPoint joinPoint,Throwable targetMethodException){ System.out.println(\\\"[异常通知] 方法异常...\\\"+targetMethodException.getMessage()); } \"]},\"2654\":{\"h\":\"AOP对获取bean的影响\"},\"2655\":{\"h\":\"情景一：只有一个bean类\",\"t\":[\"IOC中只有一个同类型的bean : 根据类型获取bean \",\"IOC中有多个同类型的bean : 根据类型获取bean \"]},\"2656\":{\"h\":\"情景二：一个接口和一个实现类bean\",\"t\":[\"根据接口类型获取bean : \",\"根据类型获取bean : \"]},\"2657\":{\"h\":\"情景三：一个接口和多个实现类bean\",\"t\":[\"根据接口类型获取bean : \",\"根据类型获取bean : \"]},\"2658\":{\"h\":\"情景四：一个接口和一个实现类bean，并对接口切面【重要】\",\"t\":[\"根据接口类型获取bean : \",\"根据类型获取bean : \",\"原因分析：动态代理\",\"应用了切面后，真正放在IOC容器中的是代理类的对象\",\"目标类并没有被放到IOC容器中，所以根据目标类的类型从IOC容器中是找不到的 从内存分析的角度来说，IOC容器中引用的是代理对象，代理对象引用的是目标对象。IOC容器并没有直接引用目标对象，所以根据目标类本身在IOC容器范围内查找不到。\"]},\"2659\":{\"h\":\"情景五：一个bean类，并对其切面【重要】\",\"t\":[\"根据接口类型获取bean : \",\"原因分析 ： cglib代理 由于没有使用接口，我们是直接对实现类进行切面编程，所以Spring使用的是CGlib代理\",\"根据类型获取bean : \"]},\"2660\":{\"h\":\"总结\",\"t\":[\"对实现了接口的类应用切面\",\"对没实现接口的类应用切面\"]},\"2661\":{\"h\":\"JDBCTemplate\"},\"2662\":{\"h\":\"环境准备\"},\"2663\":{\"h\":\"数据库准备\",\"t\":[\"继续使用该类型的数据源\",\"导入数据库\"]},\"2664\":{\"h\":\"项目工程初始化\"},\"2665\":{\"h\":\"导入Maven依赖\",\"t\":[\"我们依旧需要导入以下依赖:\",\"spring-context -> Spring核心依赖\",\"spring-aspects -> Spring切面\",\"aopalliance -> AOP联盟包\",\"druid -> 德鲁伊连接池\",\"mysql-connector-java -> mysql连接驱动\",\"spring-jdbc -> 新 SpringJDBC包\",\"spring-tx -> 新 Spring事务\",\"spring-orm -> 新 SpringORM\",\"lombok -> Lombok包\",\"commons-logging -> Apache Commons日志\",\"junit -> 单元测试\",\"<packaging>jar</packaging> <properties> <maven.compiler.source>8</maven.compiler.source> <maven.compiler.target>8</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- Spring核心依赖 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.12.RELEASE</version> </dependency> <!-- Spring切面 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>5.3.5</version> </dependency> <!-- AOP联盟 --> <dependency> <groupId>aopalliance</groupId> <artifactId>aopalliance</artifactId> <version>1.0</version> </dependency> <!-- 德鲁伊连接池 --> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.1.14</version> </dependency> <!-- Mysql连接驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <!-- SpringJDBC包 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>5.3.18</version> </dependency> <!-- Spring事务管理 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>5.3.18</version> </dependency> <!-- Spring中的ORM映射 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-orm</artifactId> <version>5.3.5</version> </dependency> <!-- lombok --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.26</version> </dependency> <!-- Apache Commons日志 --> <dependency> <groupId>commons-logging</groupId> <artifactId>commons-logging</artifactId> <version>1.2</version> </dependency> <!-- 单元测试 --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13.1</version> <scope>test</scope> </dependency> </dependencies> \"]},\"2666\":{\"h\":\"配置Spring工程\",\"t\":[\"applicationContex.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/c https://www.springframework.org/schema/c/spring-c.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/p https://www.springframework.org/schema/p/spring-p.xsd\\\"> <!-- 包扫描 --> <context:component-scan base-package=\\\"com.meturing\\\" /> <!-- 导入外部配置依赖 --> <context:property-placeholder location=\\\"JDBC.properties\\\" /> <!-- 配置德鲁伊连接池 --> <bean id=\\\"dataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"username\\\" value=\\\"${jdbc_username}\\\"/> <property name=\\\"password\\\" value=\\\"${jdbc_password}\\\"/> <property name=\\\"url\\\" value=\\\"${jdbc_url}\\\"/> <property name=\\\"driverClassName\\\" value=\\\"${jdbc_driver}\\\"/> </bean> <!--配置JDBCTemplate对象,并向里面注入DataSource--> <bean id=\\\"jdbcTemplate\\\" class=\\\"org.springframework.jdbc.core.JdbcTemplate\\\"> <!--通过set方法注入连接池--> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"/> </bean> </beans> \",\"JDBC.properties 数据源配置文件\",\"jdbc_username=root jdbc_password=root jdbc_driver=com.mysql.cj.jdbc.Driver jdbc_url=jdbc:mysql://192.168.1.188:3306/test?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true \"]},\"2667\":{\"h\":\"创建工程文件层级\",\"t\":[\"Emp.Java实体类\",\"@AllArgsConstructor @NoArgsConstructor @Data public class Emp implements Serializable{ private Integer empno; private String ename; private String job; private Integer mgr; private Date hiredate; private Double sal; private Double comm; private Integer deptno; } \",\"EmpService.java 接口\",\"public interface EmpService { int findEmpCount(); Emp findByEmpno(int empno); List<Emp> findByDeptno(int deptno); int addEmp(Emp emp); int updateEmp(Emp emp); int deleteEmp( int empno); } \",\"EmpServiceImpl.java 实现类\",\"@Service public class EmpServiceImpl implements EmpService { @Autowired private EmpDao empDao; @Override public int findEmpCount() {return empDao.findEmpCount();} @Override public Emp findByEmpno(int empno) {return empDao.findByEmpno(empno);} @Override public List<Emp> findByDeptno(int deptno) {return empDao.findByDeptno(deptno);} @Override public int addEmp(Emp emp) {return empDao.addEmp(emp);} @Override public int updateEmp(Emp emp) {return empDao.updateEmp(emp);} @Override public int deleteEmp(int empno) {return empDao.deleteEmp(empno);} } \",\"EmpDao.java 持久层工具接口\",\"public interface EmpDao { int findEmpCount(); Emp findByEmpno(int empno); List<Emp> findByDeptno(int deptno); int addEmp(Emp emp); int updateEmp(Emp emp); int deleteEmp(int empno); } \",\"@Repository public class EmpDaoImpl implements EmpDao { @Autowired private JdbcTemplate jdbcTemplate;//获取JdbcTemplate对象操作数据库 @Override public int findEmpCount() {return 0;}//获取Emp总数 @Override public Emp findByEmpno(int empno) {return null;}//根据empno查询 @Override public List<Emp> findByDeptno(int deptno) {return null;}//根据deptno查询 @Override public int addEmp(Emp emp) {return 0;} //新增 @Override public int updateEmp(Emp emp) {return 0;}//修改 @Override public int deleteEmp(int empno) {return 0;}//删除 } \"]},\"2668\":{\"h\":\"JDBCTemplate的使用\"},\"2669\":{\"h\":\"概述\",\"t\":[\"JDBCTemplate是spring框架中提供的一个对象，是对原始繁琐的Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类。\",\"例如：操作关系型数据的JdbcTemplate和，操作nosql数据库的RedisTemplate，操作消息队列的JmsTemplate等等。\"]},\"2670\":{\"h\":\"简单的使用\"},\"2671\":{\"h\":\"查询\"},\"2672\":{\"h\":\"单一结果\",\"t\":[\"queryForObject : 查询并返回Object类型实体<T> T queryForObject(String sql, RowMapper<T> rowMapper, @Nullable Object... args)\",\"EmpDaoImpl.java\",\"@Override public int findEmpCount() { return jdbcTemplate.queryForObject(\\\"select count(1) from emp\\\", Integer.class); } @Override public Emp findByEmpno(int empno) { BeanPropertyRowMapper<Emp> empBeanPropertyRowMapper = new BeanPropertyRowMapper<>(Emp.class); return jdbcTemplate.queryForObject(\\\"select * from emp where empno =?\\\", empBeanPropertyRowMapper, empno); } \",\"测试类\",\"@Test public void test01(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContex.xml\\\"); EmpService empService = applicationContext.getBean( EmpService.class); int empCount = empService.findEmpCount();//获取员工的总数 System.out.println(empCount); Emp byEmpno = empService.findByEmpno(8899); System.out.println(byEmpno); } \"]},\"2673\":{\"h\":\"多结果返回\",\"t\":[\"query : 返回多结果值<T> List<T> query(String sql, RowMapper<T> rowMapper, @Nullable Object... args)\",\"EmpDaoImpl.java\",\"@Override public List<Emp> findByDeptno(int deptno) { String sql = \\\"select * from emp where deptno =?\\\"; BeanPropertyRowMapper<Emp> empBeanPropertyRowMapper = new BeanPropertyRowMapper<>(Emp.class); return jdbcTemplate.query(sql, empBeanPropertyRowMapper, deptno); } \",\"测试类\",\"@Test public void test01(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContex.xml\\\"); EmpService empService = applicationContext.getBean( EmpService.class); List<Emp> byDeptno = empService.findByDeptno(30); System.out.println(byDeptno); } \"]},\"2674\":{\"h\":\"增/删/改\",\"t\":[\"增删改的操作都是使用update方法int update(String sql, @Nullable Object... args)\",\"EmpDaoImpl.java\",\"//新增 @Override public int addEmp(Emp emp) { String sql = \\\"insert into emp values(DEFAULT ,?,?,?,?,?,?,?)\\\"; Object[] args = {emp.getEname(),emp.getJob(),emp.getMgr(),emp.getHiredate(),emp.getSal(),emp.getComm(),emp.getDeptno()}; return jdbcTemplate.update(sql, args); } //修改 @Override public int updateEmp(Emp emp) { String sql = \\\"update emp set ename =? , job =?, mgr=? , hiredate =?, sal=?, comm=?, deptno =? where empno =?\\\"; Object[] args = {emp.getEname(),emp.getJob(),emp.getMgr(),emp.getHiredate(),emp.getSal(),emp.getComm(),emp.getDeptno(),emp.getEmpno()}; return jdbcTemplate.update(sql, args); } //删除 @Override public int deleteEmp(int empno) { String sql =\\\"delete from emp where empno =?\\\"; return jdbcTemplate.update(sql, empno); } \",\"测试类\",\"@Test public void test01(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContex.xml\\\"); EmpService empService = applicationContext.getBean( EmpService.class); //Emp emp = new Emp(null, \\\"test\\\", \\\"test\\\", 1888, new Date(), 1888.00, null, 10); //empService.addEmp(emp); //Emp emp = new Emp(8900, \\\"111\\\", \\\"test\\\", 1888, new Date(), 1888.00, 0.0, 10); //empService.updateEmp(emp); empService.deleteEmp(8900); } \"]},\"2675\":{\"h\":\"JDBCTemplate的批处理\"},\"2676\":{\"h\":\"新增工程文件\",\"t\":[\"DeptService.java\",\"public interface DeptService { int[] deptBatchAdd(List<Dept> depts); int[] deptBatchUpdate(List<Dept> depts); int[] deptBatchDelete(List<Integer> deptnos); } \",\"DeptServiceImpl.java\",\"@Service public class DeptServiceImpl implements DeptService { @Autowired private DeptDao deptDao; @Override public int[] deptBatchAdd(List<Dept> depts) {return deptDao.deptBatchAdd(depts);} @Override public int[] deptBatchUpdate(List<Dept> depts) {return deptDao.deptBatchUpdate(depts);} @Override public int[] deptBatchDelete(List<Integer> deptnos) {return deptDao.deptBatchDelete(deptnos);} } \",\"DeptDao.java\",\"@Repository public interface DeptDao { int[] deptBatchAdd(List<Dept> depts); int[] deptBatchUpdate(List<Dept> depts); int[] deptBatchDelete(List<Integer> deptnos); } \",\"DeptDaoImpl.java\",\"@Repository public class DeptDaoImpl implements DeptDao { @Autowired private JdbcTemplate template; @Override public int[] deptBatchAdd(List<Dept> depts) {return new int[0];}//批量新增 @Override public int[] deptBatchUpdate(List<Dept> depts) {return new int[0];}//批量更新 @Override public int[] deptBatchDelete(List<Integer> deptnos) {return new int[0];}//批量删除 } \"]},\"2677\":{\"h\":\"简单实用\",\"t\":[\"在批量处理时,我们统一使用的是int[] batchUpdate(String sql, List<Object[]> batchArgs)方法\"]},\"2678\":{\"h\":\"批量新增\",\"t\":[\"DeptDaoImpl.java\",\"@Override public int[] deptBatchAdd(List<Dept> depts) { String sql =\\\"insert into dept values(DEFAULT,?,?)\\\"; List<Object[]> args =new LinkedList<>(); for (Dept dept : depts) { Object[] arg ={dept.getDname(),dept.getLoc()}; args.add(arg); } return template.batchUpdate(sql,args); } \",\"测试类\",\"@Test public void test02(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContex.xml\\\"); DeptService deptService = applicationContext.getBean( DeptService.class); List<Dept> depts = new ArrayList<>(); depts.add(new Dept(null, \\\"1\\\",\\\"1\\\")); depts.add(new Dept(null, \\\"2\\\",\\\"2\\\")); depts.add(new Dept(null, \\\"3\\\",\\\"3\\\")); deptService.deptBatchAdd(depts); } \"]},\"2679\":{\"h\":\"批量更新\",\"t\":[\"DeptDaoImpl.java\",\"@Override public int[] deptBatchUpdate(List<Dept> depts) { String sql =\\\"update dept set dname =? ,loc =? where deptno=?\\\"; List<Object[]> args =new LinkedList<>(); for (Dept dept : depts) { Object[] arg ={dept.getDname(),dept.getLoc(),dept.getDeptno()}; args.add(arg); } return template.batchUpdate(sql, args); } \",\"测试类\",\"@Test public void test02(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContex.xml\\\"); DeptService deptService = applicationContext.getBean( DeptService.class); List<Dept> depts = new ArrayList<>(); depts.add(new Dept(50, \\\"11\\\",\\\"11\\\")); depts.add(new Dept(60, \\\"22\\\",\\\"22\\\")); depts.add(new Dept(70, \\\"33\\\",\\\"33\\\")); deptService.deptBatchAdd(depts); } \"]},\"2680\":{\"h\":\"批量删除\",\"t\":[\"DeptDaoImpl.java\",\"@Override public int[] deptBatchUpdate(List<Dept> depts) { String sql =\\\"update dept set dname =? ,loc =? where deptno=?\\\"; List<Object[]> args =new LinkedList<>(); for (Dept dept : depts) { Object[] arg ={dept.getDname(),dept.getLoc(),dept.getDeptno()}; args.add(arg); } return template.batchUpdate(sql, args); } \",\"测试类\",\"@Test public void test02(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContex.xml\\\"); DeptService deptService = applicationContext.getBean( DeptService.class); List<Integer> deptnos =new ArrayList<>(); deptnos.add(44); deptnos.add(45); deptnos.add(46); deptService.deptBatchDelete(deptnos); } \"]},\"2681\":{\"h\":\"Sping的事务管理\"},\"2682\":{\"h\":\"事务的回顾\"},\"2683\":{\"h\":\"事务的概念\",\"t\":[\"事务(Transaction)指的是一个操作序列，该操作序列中的多个操作要么都做，要么都不做，是一个不可分割的工作单位，是数据库环境中的逻辑工作单位，由DBMS中的事务管理子系统负责事务的处理。\",\"目前常用的存储引擎有InnoDB（MySQL5.5以后默认的存储引擎）和MyISAM（MySQL5.5之前默认的存储引擎），其中InnoDB支持事务处理机制，而MyISAM不支持。\"]},\"2684\":{\"h\":\"事务的特性\",\"t\":[\"事务处理可以确保除非事务性序列内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的序列，可以简化错误恢复并使应用程序更加可靠。\",\"但并不是所有的操作序列都可以称为事务，这是因为一个操作序列要成为事务，必须满足事务的原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）。这四个特性简称为ACID特性。\"]},\"2685\":{\"h\":\"原子性（Atomicity）\",\"t\":[\"原子是自然界最小的颗粒，具有不可再分的特性。事务中的所有操作可以看做一个原子，事务是应用中不可再分的最小的逻辑执行体。\",\"使用事务对数据进行修改的操作序列，要么全部执行，要么全不执行。通常，某个事务中的操作都具有共同的目标，并且是相互依赖的。如果数据库系统只执行这些操作中的一部分，则可能会破坏事务的总体目标，而原子性消除了系统只处理部分操作的可能性。\"]},\"2686\":{\"h\":\"一致性（Consistency）\",\"t\":[\"一致性是指事务执行的结果必须使数据库从一个一致性状态，变到另一个一致性状态。当数据库中只包含事务成功提交的结果时，数据库处于一致性状态。一致性是通过原子性来保证的。\",\"例如：在转账时，只有保证转出和转入的金额一致才能构成事务。也就是说事务发生前和发生后，数据的总额依然匹配。\"]},\"2687\":{\"h\":\"隔离性（Isolation）\",\"t\":[\"隔离性是指各个事务的执行互不干扰，任意一个事务的内部操作对其他并发的事务，都是隔离的。也就是说：并发执行的事务之间既不能看到对方的中间状态，也不能相互影响。\",\"例如：在转账时，只有当A账户中的转出和B账户中转入操作都执行成功后才能看到A账户中的金额减少以及B账户中的金额增多。并且其他的事务对于转账操作的事务是不能产生任何影响的。\"]},\"2688\":{\"h\":\"持久性（Durability）\",\"t\":[\"持久性指事务一旦提交，对数据所做的任何改变，都要记录到永久存储器中，通常是保存进物理数据库，即使数据库出现故障，提交的数据也应该能够恢复。但如果是由于外部原因导致的数据库故障，如硬盘被损坏，那么之前提交的数据则有可能会丢失。\"]},\"2689\":{\"h\":\"事务的并发问题\"},\"2690\":{\"h\":\"脏读（Dirty read）\",\"t\":[\"当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。\",\"时间点\",\"事务A\",\"事务B\",\"1\",\"开启事务A\",\"2\",\"开启事务B\",\"3\",\"查询余额为100\",\"4\",\"余额增加至150\",\"5\",\"查询余额为150\",\"6\",\"事务回滚\"]},\"2691\":{\"h\":\"不可重复读（Unrepeatableread）\",\"t\":[\"指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。\",\"时间点\",\"事务A\",\"事务B\",\"1\",\"开启事务A\",\"2\",\"开启事务B\",\"3\",\"查询余额为100\",\"4\",\"余额增加至150\",\"5\",\"查询余额为100\",\"6\",\"提交事务\",\"7\",\"查询余额为150\"]},\"2692\":{\"h\":\"幻读(Phantom read)\",\"t\":[\"幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。\",\"时间点\",\"事务A\",\"事务B\",\"1\",\"开启事务A\",\"2\",\"开启事务B\",\"3\",\"查询id<3的所有记录,共3条\",\"4\",\"插入一条记录id=2\",\"5\",\"提交事务\",\"6\",\"查询id<3的所有记录,共4条\",\"不可重复度和幻读区别： 不可重复读的重点是修改，幻读的重点在于新增或者删除。\",\"解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表 例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为 1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导 致A再读自己的工资时工资变为 2000；这就是不可重复读。 例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读\"]},\"2693\":{\"h\":\"事务的隔离级别\",\"t\":[\"事务的隔离级别用于决定如何控制并发用户读写数据的操作。数据库是允许多用户并发访问的，如果多个用户同时开启事务并对同一数据进行读写操作的话，有可能会出现脏读、不可重复读和幻读问题，所以MySQL中提供了四种隔离级别来解决上述问题。\",\"事务的隔离级别从低到高依次为\",\"READ UNCOMMITTED - 读未提交、\",\"READ COMMITTED - 读已提交、\",\"REPEATABLE READ - 可重复读\",\"SERIALIZABLE - 串行化\",\"隔离级别越低，越能支持高并发的数据库操作。\",\"隔离级别\",\"脏读\",\"不可重复读\",\"幻读\",\"READ UNCOMMITTED\",\"√\",\"√\",\"√\",\"READ COMMITTED\",\"×\",\"√\",\"√\",\"REPEATABLE READ \",\"×\",\"×\",\"√\",\"SERIALIZABLE \",\"×\",\"×\",\"×\",\"默认Mysql使用的是: REPEATABLE READ - 可重复读\"]},\"2694\":{\"h\":\"简单的转账案例\"},\"2695\":{\"h\":\"数据源准备\",\"t\":[\"CREATE TABLE `wallet` ( `id` int NOT NULL AUTO_INCREMENT, `name` varchar(100) DEFAULT NULL, `money` double DEFAULT NULL, PRIMARY KEY (`id`), KEY `wallet_id_IDX` (`id`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; INSERT INTO wallet (id, name, money) VALUES(1, 'zhangsan', 15000.0); INSERT INTO wallet (id, name, money) VALUES(2, 'lisi', 1000.0); \"]},\"2696\":{\"h\":\"Spring工程配置\",\"t\":[\"导入Maven依赖\",\"配置Spring工程\"]},\"2697\":{\"h\":\"实现转账功能\",\"t\":[\"Wallet.java实体类\",\"@AllArgsConstructor @NoArgsConstructor @Data public class Wallet implements Serializable { private Integer id; private String name; private Integer money; } \",\"AccountDao.java接口\",\"public interface AccountDao { int transMoney(int id,int money); } \",\"AccountDaoImpl.java接口实现类\",\"@Repository public class AccountDaoImpl implements AccountDao { @Autowired private JdbcTemplate jdbcTemplate; @Override public int transMoney(int id, int money) { String sql =\\\"update wallet set money =money +? where id =?\\\"; return jdbcTemplate.update(sql,money,id); } } \",\"AccountService.java接口\",\"public interface AccountService { int transMoney(int from ,int to,int money); } \",\"AccountServiceImpl.java接口实现类\",\"@Service public class AccountServiceImpl implements AccountService { @Autowired private AccountDao accountDao; @Override public int transMoney(int from, int to, int money) { int rows=0; rows+=accountDao.transMoney(from, 0 - money); rows+=accountDao.transMoney(to, money); return rows; } } \",\"测试类\",\"@Test public void test01(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContex.xml\\\"); AccountService accountService = applicationContext.getBean(AccountService.class); accountService.transMoney(1,2,500); } \"]},\"2698\":{\"h\":\"未开启事务的危害\",\"t\":[\"在上面的操作中 A->B进行了转账行为,A的账户发生了扣款,B的账户发生了存款\",\"如果在A->B转账中发生了异常,由于没有事务的控制,则会发生严重的后果:\",\"再次执行转账功能:\",\"此时我们再次查看余额:\",\"我们发现A账户发生了扣款,但是B账户并没有成功存款,此时也没有重置A账户的余额,这样最终违背了一致性原则\",\"所以我们需要引入事务的控制\"]},\"2699\":{\"h\":\"Spring中对事物的管理\",\"t\":[\"事务的管理应该放在我们的service层进行处理\",\"spring中有两种事务的管理方式:\",\"编程式事务管理(了解)\",\"声明式事务管理(掌握) \",\"基于注解方式实现(掌握)\",\"XML方式实现(了解)\",\"Spring声明式事务的实现方式,底层就是AOP,AOP的底层就是动态代理\",\"事务管理器接口: PlatformTransactionManager 针对不同的框架,提供了不同的实现类\"]},\"2700\":{\"h\":\"编程式事务管理 - 了解\"},\"2701\":{\"h\":\"修改applicationContext.xml\",\"t\":[\"注入事务管理器DataSourceTransactionManager 并将 dataSource 指向数据源\",\"注入事务管理模板TransactionTemplate 并将 transactionManager 指向事务管理器DataSourceTransactionManager\",\"<!--配置事务管理器--> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> </bean> <!--配置事务管理模板--> <bean id=\\\"transactionTemplate\\\" class=\\\"org.springframework.transaction.support.TransactionTemplate\\\"> <property name=\\\"transactionManager\\\" ref=\\\"transactionManager\\\" /> </bean> \"]},\"2702\":{\"h\":\"修改Service层代码\",\"t\":[\"AccountServiceImpl.java\",\"@Service public class AccountServiceImpl implements AccountService { @Autowired private AccountDao accountDao; @Autowired private TransactionTemplate transactionTemplate; @Override public int transMoney(int from, int to, int money) { Object execute = transactionTemplate.execute(new TransactionCallback<Object>() { @Override public Object doInTransaction(TransactionStatus transactionStatus) { //*********执行主要业务,过程中出现错误则回滚************* int rows=0; rows+=accountDao.transMoney(from, 0 - money); rows = 1/0;//制造异常 rows+=accountDao.transMoney(to, money); return rows; } }); return execute instanceof Integer?(Integer)execute:0; } } \",\"自动注入获取transactionTemplate对象\",\"transactionTemplate对象中 <T> T execute(TransactionCallback<T> action) 方法执行事务\",\"使用new TransactionCallback<Object>() 接口直接实现doInTransaction 方法\",\"doInTransaction方法中实现我们原有代码功能\",\"注意: 默认情况下,doInTransaction方法中发生异常将自动回滚,我们无需干预,当然我们也可以使用transactionStatus对象手动创建还原点和回滚事件:Object savepoint = transactionStatus.createSavepoint(); 创建还原点transactionStatus.rollbackToSavepoint(savepoint); 回滚到还原点\",\"AccountServiceImpl.java\",\"@Service public class AccountServiceImpl implements AccountService { @Autowired private AccountDao accountDao; @Autowired private TransactionTemplate transactionTemplate; @Override public int transMoney(int from, int to, int money) { Object execute = transactionTemplate.execute(new TransactionCallback<Object>() { @Override public Object doInTransaction(TransactionStatus transactionStatus) { //创建还原点 Object savepoint = transactionStatus.createSavepoint(); //*********执行主要业务,过程中出现错误则回滚,并返回错误日志************* int rows=0; try { rows+=accountDao.transMoney(from, 0 - money); rows = 1/0;//制造异常 rows+=accountDao.transMoney(to, money); } catch (Exception e) { //回滚至还原点 transactionStatus.rollbackToSavepoint(savepoint); return 0; } return rows; } }); return execute instanceof Integer?(Integer)execute:0; } } \"]},\"2703\":{\"h\":\"测试事务\"},\"2704\":{\"h\":\"声明式事务管理 - 熟悉\"},\"2705\":{\"h\":\"@Transactional注解管理事务\"},\"2706\":{\"h\":\"修改applicationContext.xml\",\"t\":[\"导入tx声明空间\",\"配置DataSourceTransactionManager事务管理器,并将dataSource属性注入到数据源中\",\"使用tx:annotation-driven 标签 ,transaction-manager 属性 指向DataSourceTransactionManager事务管理器\",\"<!--配置一个事务管理器--> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> </bean> <!--开启事务注解--> <tx:annotation-driven transaction-manager=\\\"transactionManager\\\" /> \"]},\"2707\":{\"h\":\"修改Service层代码\",\"t\":[\"使用@Transactional 注解在需要事务的地方:\",\"在类上使用,则当前类中的所有方法都开始事务处理\",\"在方法上使用,则当前方法使用事务处理\",\"@Service public class AccountServiceImpl implements AccountService { @Autowired private AccountDao accountDao; @Override @Transactional public int transMoney(int from, int to, int money) { int rows=0; rows+=accountDao.transMoney(from, 0 - money); rows+=accountDao.transMoney(to, money); return rows; } } \"]},\"2708\":{\"h\":\"测试事务\",\"t\":[\"事务生效\"]},\"2709\":{\"h\":\"XML方式管理事务\"},\"2710\":{\"h\":\"修改applicationContext.xml\",\"t\":[\"导入tx声明空间\",\"配置DataSourceTransactionManager事务管理器,并将dataSource属性注入到数据源中\",\"使用tx:advice标签创建一个事物的通知 \",\"transaction-manager属性指向DataSourceTransactionManager事务管理器\",\"tx:method子标签控制指定方法上的事务\",\"使用aop:config 为需要使用事务的类添加切面事件 \",\"aop:advisor子标签上的advice-ref属性指向tx:advice标签创建的通知\",\"<!--配置一个事务管理器--> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> </bean> <!--配置通知--> <tx:advice id=\\\"txAdvice\\\" transaction-manager=\\\"transactionManager\\\"> <tx:attributes> <!--配置事务的参数--> <!-- read-only属性：设置为false 【默认就是可以不设置】--> <!-- rollback-for属性：设置回滚的异常--> <!-- no-rollback-for属性：设置不回滚的异常--> <!-- isolation属性：设置事务的隔离级别--> <!-- timeout属性：设置事务的超时属性--> <!-- propagation属性：设置事务的传播行为--> <tx:method name=\\\"*\\\" isolation=\\\"DEFAULT\\\" propagation=\\\"REQUIRED\\\"/> </tx:attributes> </tx:advice> <!--AOP添加事务--> <aop:config> <!--配置切入点--> <aop:pointcut id=\\\"pt\\\" expression=\\\"execution(* com.meturing.service.AccountService.*(..))\\\"/> <!--配置切面--> <aop:advisor advice-ref=\\\"txAdvice\\\" pointcut-ref=\\\"pt\\\"></aop:advisor> </aop:config> \"]},\"2711\":{\"h\":\"修改Service层代码\",\"t\":[\"Service层代码正常使用就好\",\"@Service public class AccountServiceImpl implements AccountService { @Autowired private AccountDao accountDao; @Override public int transMoney(int from, int to, int money) { int rows=0; rows+=accountDao.transMoney(from, 0 - money); rows+=accountDao.transMoney(to, money); return rows; } } \"]},\"2712\":{\"h\":\"测试事务\",\"t\":[\"事务生效\"]},\"2713\":{\"h\":\"事务中的属性\",\"t\":[\"我们在使用XML配置事务或者直接使用@Transactional注解来管理事务时,都有发现,在Spring的事务中存在多个属性:\",\"XML中\",\"@Transactional注解中\",\"接下来我们详细了解一下:\"]},\"2714\":{\"h\":\"只读 readOnly\",\"t\":[\"对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。\",\"默认值为:false\",\"@Transactional(readOnly = true) public String getEmpName(Integer empId) { return empDao.selectEmpNameById(empId); } \"]},\"2715\":{\"h\":\"超时 timeout\",\"t\":[\"事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）\",\"此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。\",\"默认值为-1,表示无限等待 单位是秒\",\"//timeout属性设置事务的超时时间，以秒为单位 @Transactional(readOnly = true, timeout = 3) public String getEmpName(Integer empId) { return empDao.selectEmpNameById(empId); } \",\"概括来说就是一句话：超时回滚，释放资源。\"]},\"2716\":{\"h\":\"回滚 rollbackFor\",\"t\":[\"设置回滚的异常,发生该异常才回滚,其他异常不回滚\",\"@Transactional(rollbackFor = Exception.class) public String getEmpName(Integer empId) { return empDao.selectEmpNameById(empId); } \"]},\"2717\":{\"h\":\"不会滚的异常 noRollbackFor\",\"t\":[\"设置不回滚的异常,发生该异常不回滚,其他异常回滚\",\"@Transactional(noRollbackFor = FileNotFoundException.class) public String getEmpName(Integer empId) { return empDao.selectEmpNameById(empId); } \",\"当异常范围与rollbackFor设定的一致时,以rollbackFor为准\"]},\"2718\":{\"h\":\"隔离级别 isolation\",\"t\":[\"在 @Transactional 注解中使用 isolation 属性设置事务的隔离级别。 取值使用 org.springframework.transaction.annotation.Isolation 枚举类提供的数值。\"]},\"2719\":{\"h\":\"DEFAULT （默认）\",\"t\":[\"这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别。另外四个与JDBC的隔离级别相对应。 MySQL默认REPEATABLE_READ Oracle默认READ_COMMITTED\"]},\"2720\":{\"h\":\"READ_UNCOMMITTED （读未提交）\",\"t\":[\"这是事务最低的隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。\"]},\"2721\":{\"h\":\"READ_COMMITTED （读已提交）\",\"t\":[\"保证一个事务修改的数据提交后才能被另外一个事务读取，另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读。\"]},\"2722\":{\"h\":\"REPEATABLE_READ （可重复读）\",\"t\":[\"这种事务隔离级别可以防止脏读、不可重复读，但是可能出现幻像读。\",\"它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了不可重复读。\"]},\"2723\":{\"h\":\"SERIALIZABLE（串行化）\",\"t\":[\"这是花费最高代价但是最可靠的事务隔离级别，事务被处理为顺序执行。\",\"除了防止脏读、不可重复读外，还避免了幻像读。\"]},\"2724\":{\"h\":\"传播行为 propagation\",\"t\":[\"多事务方法之间调用,事务是如何管理的\"]},\"2725\":{\"h\":\"常用属性\",\"t\":[\"事务的传播行为类型\",\"说明\",\"PROPAGATION_REQUIRED\",\"如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择(默认)。\",\"PROPAGATION_SUPPORTS\",\"支持当前事务，如果当前没有事务，就以非事务方式执行。\",\"PROPAGATION_MANDATORY\",\"使用当前的事务，如果当前没有事务，就抛出异常。\",\"PROPAGATION_REQUIRES_NEW\",\"新建事务，如果当前存在事务，把当前事务挂起\",\"PROPAGATION_NOT_SUPPORTED\",\"以非事务方式执行操作，如果当前存在事务，就把当前事务挂起\",\"PROPAGATION_NEVER\",\"以非事务方式执行，如果当前存在事务，则抛出异常\",\"PROPAGATION_NESTED\",\"如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作\"]},\"2726\":{\"h\":\"重点属性讲解\",\"t\":[\"下面以a.save()里调用了b.save()举例，事务方法之间调用时事务如何传播。\",\"以下内容来自 CSDN-春天的早晨\"]},\"2727\":{\"h\":\"PROPAGATION_REQUIRED（默认）\",\"t\":[\"默认的spring事务传播级别，使用该级别的特点是，如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行。如下图：\",\"由于两个方法属于同一个物理事务，如果发生回滚，则两者都回滚。\"]},\"2728\":{\"h\":\"PROPAGATION_SUPPORTS\",\"t\":[\"顾名思义就是可以支持事务，如果b.save()在事务环境中运行，则以事务形式运行，否则以非事务运行。\",\"注：这里所谓的非事务形式的数据库访问只是指没有显式的事务边界而已，就是说数据库操作只是 auto-commit 的方式，在数据库的物理事务概念上，还是有事务的。譬如在这里，a.save()调用b.save()，如果当a是非事务执行（非手动提交事务，而是auto-commit），那么b.save()在执行前，a.save()的物理事务就要先提交，而同时，b.save()的物理事务也是auto-commit，这样才是这里说的b.save()以非事务方法运行，而不是指b.save()不开启数据库物理事务。而所谓的b.save()在事务环境中运行，是指当b的外层a.save()本身是手动提交事务时，b.save()也会包含在a.save()里边的同一个事务去执行，也就是说a.save()与b.save()的SQL操作在同一个物理事务中。\"]},\"2729\":{\"h\":\"PROPAGATION_MANDATORY\",\"t\":[\"必须在一个事务中运行，也就是说，b.save()只能在已有事务的方法中被调用，如果当前事物不存在，会抛异常。\"]},\"2730\":{\"h\":\"PROPAGATION_REQUIRES_NEW\",\"t\":[\"总是会创建一个新事务（包括物理事务），该传播级别的特点是，每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行。如下图：\",\"两个方法之间既不属于同一个逻辑事务也不属于同一个物理事务。\"]},\"2731\":{\"h\":\"PROPAGATION_NOT_SUPPORTED\",\"t\":[\"顾名思义不支持事务，当处于存在事务的上下文环境中运行时，b.save()会暂停当前已开启的事务，意味着a.save()的事务被挂起直至b.save()以非事务方法运行完毕后，a.save()的事务继续执行。\"]},\"2732\":{\"h\":\"PROPAGATION_NEVER\",\"t\":[\"绝不能在事务环境中运行，如果a.save()里声明了使用事务，而b.save()的事务类型声明为never，那么只能以抛异常告终。\",\"与Mandatory相反，Mandatory意思是强制要求上下文中有事务（外层有事务），否则抛异常，而Never是上下文中不能有事务（外层无事务），否则抛异常。\"]},\"2733\":{\"h\":\"PROPAGATION_NESTED\",\"t\":[\"嵌套事务支持。该传播级别特征是，如果上下文中存在事务，则嵌套事务执行，如果不存在事务，则新建事务。\",\"Nested和RequiresNew的区别：\",\"RequiresNew每次都创建新的独立的物理事务，而Nested只有一个物理事务；Nested嵌套事务回滚或提交不会导致外部事务回滚或提交，但外部事务回滚将导致嵌套事务回滚，而RequiresNew由于都是全新的事务，所以之间是无关联的 Nested使用JDBC 3的保存点实现，即如果使用低版本驱动将导致不支持嵌套事务\",\"使用嵌套事务，必须确保具体事务管理器实现的nestedTransactionAllowed属性为true，否则不支持嵌套事务，如DataSourceTransactionManager默认支持，而HibernateTransactionManager默认不支持，需要我们来开启。\"]},\"2734\":{\"h\":\"总结\"},\"2735\":{\"h\":\"死活不要事务的\",\"t\":[\"PROPAGATION_NEVER：没有就非事务执行，有就抛出异常。\",\"PROPAGATION_NOT_SUPPORTED：没有就非事务执行，有就直接挂起，然后非事务执行。 挂起记得B事务不能再操作同一张表，不然会死锁。\"]},\"2736\":{\"h\":\"可有可无的\",\"t\":[\"PROPAGATION_SUPPORTS: 有就用，没有就算了。\"]},\"2737\":{\"h\":\"必须有事务的\",\"t\":[\"PROPAGATION_REQUIRES_NEW: 有没有都新建事务，如果原来有，就将原来挂起。 外部内部事务互相隔离，互不影响，内层回滚不影响外部。\",\"PROPAGATION_NESTED：如果没有，就新建一个事务；如果有，就在当前事务中嵌套其他事务。，外层默认事务，内层NESTED，外层调用try{内层}catch{}。 外层异常回滚外层+内层，内层异常仅回滚内层，不影响外层。\",\"PROPAGATION_REQUIRED：如果没有，就新建一个事务；如果有，就加入当前事务。\",\"PROPAGATION_MANDATORY：如果没有，就抛出异常；如果有，就使用当前事务。\"]},\"2738\":{\"h\":\"概念引入与环境准备\"},\"2739\":{\"h\":\"前言\"},\"2740\":{\"h\":\"MVC的概念\",\"t\":[\"image-20230530105731114\",\"Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的SpringMVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts 2(一般老项目使用)等等。\",\"M (model) -> 模型层 -> DAO封装 -> Mybatis\",\"V (view) -> 视图层 -> html css js jsp\",\"C(controller) -> 控制层 -> Servlet封装 -> springMVC\"]},\"2741\":{\"h\":\"优点\",\"t\":[\"SpringMVC是spring为展现层提供的基于MVC设计理念的优秀WEB框架,是目前最主流的MVC框架之一\",\"SpringMVC通过一套注解,可以让普通的JAVA类成为contrllor控制器,无需继承Servlet,实现了控制层和Servlet之间的解耦\",\"SpringMVC支持Rest风格的URL写法\",\"SpringMVC采用了松耦合,可热插的主键结构,比其他的框架更具扩展性和灵活性\"]},\"2742\":{\"h\":\"环境准备\"},\"2743\":{\"h\":\"检查项目配置\",\"t\":[\"检查Maven的相关配置与仓库地址 :\",\"检查是启动注解处理\"]},\"2744\":{\"h\":\"创建MavenWeb模块\",\"t\":[\"创建Maven骨架 : 注意选择骨架为 maven-archetype-webapp\",\"此时我们的项目中初始化了一些配置\"]},\"2745\":{\"h\":\"检查目录标记\",\"t\":[\"创建目录:\",\"检查目录是否正常标记\"]},\"2746\":{\"h\":\"修改Web.xml\",\"t\":[\"可以创建一个javaEE项目,然后复制web.xml文件中的内容即可\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> </web-app> \"]},\"2747\":{\"h\":\"测试Demo\"},\"2748\":{\"h\":\"调整POM依赖\",\"t\":[\"<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.meturing</groupId> <artifactId>SpringMVC_01</artifactId> <packaging>war</packaging> <version>1.0-SNAPSHOT</version> <dependencies> <!--servlet jsp 依赖--> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>4.0.1</version> <scope>provided</scope> </dependency> <dependency> <groupId>javax.servlet.jsp</groupId> <artifactId>javax.servlet.jsp-api</artifactId> <version>2.3.3</version> <scope>provided</scope> </dependency> </dependencies> </project> \",\"注意:这两个依赖仅限于编译的时候使用,在打包到TomCat中时,lib目录下已经有这两依赖了.\"]},\"2749\":{\"h\":\"创建servlet\",\"t\":[\"package com.meturing.controller; @WebServlet(\\\"/myServlet.do\\\") public class MyServlet extends HttpServlet { @Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //请求转发 req.getRequestDispatcher(\\\"first.jsp\\\").forward(req,resp); } } \"]},\"2750\":{\"h\":\"创建JSP\",\"t\":[\"first.jsp\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Hello World</title> </head> <body> <h1>My first JSP</h1> </body> </html> \"]},\"2751\":{\"h\":\"检查并运行项目\"},\"2752\":{\"h\":\"检查项目\",\"t\":[\"创建TomCat配置\",\"导入模块\",\"修改路径\",\"检查配置 ]\",\"应用\"]},\"2753\":{\"h\":\"运行项目\",\"t\":[\"默认打开的是: index.jsp\",\"输入地址: http://localhost:8080/SpringMVC_01/myServlet.do 打开我们的first.jsp\"]},\"2754\":{\"h\":\"框架搭建与注意事项\"},\"2755\":{\"h\":\"搭建框架\"},\"2756\":{\"h\":\"导入依赖\",\"t\":[\"在pom.xml中导入Spring依赖大礼包:\",\"Spring核心包 : spring-context\",\"spring切面 : spring-aspectsaopalliance\",\"数据库连接 : druidmysql-connector-javaspring-jdbcspring-txspring-orm\",\"工具包 : log4j-slf4j-impllombokspring-testjunit-jupiter-api\",\"SpringMVC : spring-webspring-webmvc\",\" <dependencies> <!--Spring核心包--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.2.12.RELEASE</version> </dependency> <!--spring切面包--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>5.2.12.RELEASE</version> </dependency> <!--Aop联盟--> <dependency> <groupId>aopalliance</groupId> <artifactId>aopalliance</artifactId> <version>1.0</version> </dependency> <!--德鲁伊连接池--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.1.14</version> </dependency> <!--mysql连接驱动--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <!--SpringJDBC包--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>5.2.12.RELEASE</version> </dependency> <!--Spring事务管理--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>5.2.12.RELEASE</version> </dependency> <!--Spring ORM 映射--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-orm</artifactId> <version>5.2.12.RELEASE</version> </dependency> <!--log4j2 日志--> <dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-slf4j-impl</artifactId> <version>2.14.0</version> <scope>test</scope> </dependency> <!--lombok --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.26</version> </dependency> <!--spring test测试支持包--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>5.2.12.RELEASE</version> </dependency> <!--junit5单元测试--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.7.0</version> <scope>test</scope> </dependency> <!--springMVC支持包--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-web</artifactId> <version>5.2.12.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-web</artifactId> <version>5.2.12.RELEASE</version> </dependency> </dependencies> \",\"依赖关系\"]},\"2757\":{\"h\":\"创建log4j配置文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <Configuration status=\\\"DEBUG\\\"> <Appenders> <Console name=\\\"Console\\\" target=\\\"SYSTEM_OUT\\\"> <PatternLayout pattern=\\\"%d{YYYY-MM-dd HH:mm:ss} [%t] %-5p %c{1}:%L - %msg%n\\\" /> </Console> </Appenders> <Loggers> <Root level=\\\"debug\\\"> <AppenderRef ref=\\\"Console\\\" /> </Root> </Loggers> </Configuration> \"]},\"2758\":{\"h\":\"创建SpringMVC配置文件\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/p http://www.springframework.org/schema/p/spring-p.xsd http://www.springframework.org/schema/c http://www.springframework.org/schema/c/spring-c.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd \\\"> <!-- 包扫描 --> <context:component-scan base-package=\\\"com.meturing\\\" /> </beans> \"]},\"2759\":{\"h\":\"在web.xml中配置前端控制器\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <!-- 注册DispatcherServlet的servlet --> <servlet> <servlet-name>dispatcherServlet</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <!--配置初始化参数,读取springMVC的核心配置文件的位置和名称--> <init-param> <param-name>contextConfigLocation</param-name> <param-value>classpath:springmvc.xml</param-value> </init-param> </servlet> <!--配置dispatcherServlet的映射路径为 / 包含全部的servlet, JSP除外--> <servlet-mapping> <servlet-name>dispatcherServlet</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> </web-app> \"]},\"2760\":{\"h\":\"编写controller\",\"t\":[\"@Controller public class FirstController { @RequestMapping(\\\"/firstController\\\") public String getFirstView() { System.out.println(\\\"firstController\\\"); //相当于请求转发 return \\\"first.jsp\\\"; } } \",\"注意 :\",\"在类上使用@Controller注解让当前类被Spring扫描到\",\"我们可以在方法上使用@RequestMapping注解来标识当前方法执行的请求路径\",\"return \\\"first.jsp\\\" 相当于请求转发req.getRequestDispatcher(\\\"first.jsp\\\").forward(req,resp);\"]},\"2761\":{\"h\":\"总结\",\"t\":[\"wbe.xml中配置DispatcherServlet的Servlet,并设置初始化的SpringMVC路径\",\"在SpringMVC配置文件中,使用包扫描指定路径\",\"创建Controller层,使用@Controller注解提交给Spring管理,使用@RequestMapping注解标注请求路径,return String直接转发到指定页面\"]},\"2762\":{\"h\":\"注意事项\"},\"2763\":{\"h\":\"init-param初始化可以省略\",\"t\":[\"在web.xml中,我们也可以不使用<init-param>指定SpringMVC的配置文件路径使用默认配置,但需要遵循下列规则\",\"默认的读取路径为/WEB-INF/ ,我们需要将配置文件移至该目录下\",\"默认情况下配置文件名需要遵循<servlet-name>-servlet.xml的规则,如上图应该是dispatcherServlet-servlet.xml\",\"我们不推荐使用该方式省略配置\"]},\"2764\":{\"h\":\"Controller层路径问题\",\"t\":[\"@RequestMapping 注解也可以用在类上,当类上使用该注解时访问的路径应该是: 类上的注解+方法上的注解\",\"@Controller @RequestMapping(\\\"/meturing\\\") public class FirstController { @RequestMapping(\\\"/firstController\\\") public String getFirstView() { System.out.println(\\\"firstController\\\"); //相当于请求转发 return \\\"first.jsp\\\"; } } \",\"如上述代码,访问的路径应该为 : http://localhost:8080/SpringMVC_01/meturing/firstController\",\"但是此时我们访问时会发现出现错误\",\"原因与srvlet中 请求转发路径 问题一致 ,转发路径中\\\\开头表示结对路径,否则是相对路径 . 当前代码是return \\\"first.jsp\\\"; 当在类上添加/meturing路径后,他会在meturing目录下查找页面\",\"所以我们可以修改路径为绝对路径return \\\"/first.jsp\\\";\"]},\"2765\":{\"h\":\"视图解析器\",\"t\":[\"对于复杂的路径,我们不必在Controller中完全描述,这样的话太臃肿了. 我们可以借助在MVC配置文件中添加视图解析器来配置通用的一些路径\",\" <!--配置视图解析器--> <bean class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <!--前缀--> <property name=\\\"prefix\\\" value=\\\"/view/\\\" ></property> <!--后缀--> <property name=\\\"suffix\\\" value=\\\".jsp\\\" ></property> </bean> \",\"所以我们可以在Controller中跳转的路径就可以直接写文件名\",\"当我们访问后,会自动给我们拼接: 前缀 + 字符串 + 后缀 ,也就是: /view/first.jsp\"]},\"2766\":{\"h\":\"执行流程与三大组件\"},\"2767\":{\"h\":\"执行时序图\"},\"2768\":{\"h\":\"SpringMVC的执行流程\",\"t\":[\"用法发出请求,并被DispatcherServlet拦截\",\"DispatcherServlet查询HandlerMapping处理器映射器中当前请求的位置\",\"DispatcherServlet根据HandlerMapping处理器映射器反馈的位置,请求HandlerAdapter处理器适配器执行对应的Controller处理单元\",\"HandlerAdapter处理器适配器执行Handler处理器,并接收到ModelAndView对象返回给DispatcherServlet\",\"DispatcherServlet再次携带ModelAndView对象请求ViewResolver视图解析器解析\",\"ViewResolver视图解析器返回解析后的View对象\",\"DispatcherServlet将View对象渲染View对象为视图层,并响应给前端用户\"]},\"2769\":{\"h\":\"SpringMVC的组件\"},\"2770\":{\"h\":\"DispatcherServlet 前端控制器\",\"t\":[\"用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，\",\"dispatcherServlet 的存在降低了组件之间的耦合性。\"]},\"2771\":{\"h\":\"HandlerMapping 处理器映射器\",\"t\":[\"HandlerMapping 负责根据用户请求找到 Handler 即处理器\",\"SpringMVC 提供了不同的映射器实现不同的 映射方式，例如：配置文件方式，实现接口方式，注解方式等。\"]},\"2772\":{\"h\":\"HandlAdapter 处理器适配器\",\"t\":[\"通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行\",\"因为请求中的参数以及Controller处理单元返回的参数有多种格式,所以需要处理器适配器对此进行适配处理\"]},\"2773\":{\"h\":\"Handler 处理器\",\"t\":[\"自己定义的Controller处理单元\",\"它就是我们开发中要编写的具体业务控制器。由 HandlAdapter 处理器适配器 把用户请求转发到 Handler。由 Handler 对具体的用户请求进行处理。\"]},\"2774\":{\"h\":\"View Resolver 视图解析器\",\"t\":[\"View Resolver 负责将处理结果生成 View 视图\",\"View Resolver 首先根据逻辑视图名解析成物理视图名 即具体的页面地址\",\"再生成 View 视图对象\",\"最后对 View 进行渲染将处理结果通过页面展示给用户\"]},\"2775\":{\"h\":\"View 视图\",\"t\":[\"SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。\",\"我们最常用的视图就是 jsp。\",\"一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开 发具体的页面。\"]},\"2776\":{\"h\":\"HandlerMapping与HandlAdapter\"},\"2777\":{\"h\":\"为什么建议配置\",\"t\":[\"在之前的springmvc.xml的配置中,我们并没有配置HandlerMapping与HandlAdapter,但是也是在正常使用的.但是这样子我们并不推荐,会导致性能的降低:\",\"如果没有在springMvc.xml中配置处理器映射器和处理器适配器, 默认每次请求都会去找DispatcherServlet.properties 配置文件, 去里面的处理器映射器列表和处理器适配器列表中, 逐个匹配, 找到对应类型的执行\",\"如果在springMvc.xml 中显示的配置了处理器映射器和处理器适配器就会直接执行不会去找DispatcherServlet.properties配置文件, 就会增强系统的运行速度.\"]},\"2778\":{\"h\":\"配置方式\"},\"2779\":{\"h\":\"手动配置\",\"t\":[\"在springmvc.xml文件中新增RequestMappingHandlerMapping与RequestMappingHandlerAdapter的bean注入\",\"<!--配置处理器映射器--> <bean class=\\\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\\\" /> <!--配置处理器适配器--> <bean class=\\\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\\\" /> \",\"如下:\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/p http://www.springframework.org/schema/p/spring-p.xsd http://www.springframework.org/schema/c http://www.springframework.org/schema/c/spring-c.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd \\\"> <!-- 包扫描 --> <context:component-scan base-package=\\\"com.meturing\\\" /> <!--配置视图解析器--> <bean class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <property name=\\\"prefix\\\" value=\\\"/view/\\\" ></property> <property name=\\\"suffix\\\" value=\\\".jsp\\\" ></property> </bean> <!--配置处理器映射器--> <bean class=\\\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\\\" /> <!--配置处理器适配器--> <bean class=\\\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\\\" /> </beans> \"]},\"2780\":{\"h\":\"自动配置\",\"t\":[\"使 用 <mvc:annotation-driven> 自动加载 RequestMappingHandlerMapping （处理映射器） 和 RequestMappingHandlerAdapter （ 处 理 适 配 器 ） ， 可 用 在 SpringMVC.xml 配 置 文 件 中 使 用 <mvc:annotation-driven>替代注解处理器和适配器的配置。\",\"注意 : 需要先 新增mvc的声明空间\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/p http://www.springframework.org/schema/p/spring-p.xsd http://www.springframework.org/schema/c http://www.springframework.org/schema/c/spring-c.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd \\\"> <!-- 包扫描 --> <context:component-scan base-package=\\\"com.meturing\\\" /> <!--配置视图解析器--> <bean class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <property name=\\\"prefix\\\" value=\\\"/view/\\\" ></property> <property name=\\\"suffix\\\" value=\\\".jsp\\\" ></property> </bean> <!--自动加载处理映射器和处理器适配器--> <mvc:annotation-driven /> </beans> \",\"当配置了<mvc:annotation-driven> 后，Spring就知道了我们启用注解驱动。然后Spring通过<mvc:annotation-driven> 标签的配置，会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求,这个时候接收返回json数据、参数验证、统一异常等功能。\"]},\"2781\":{\"h\":\"作用\",\"t\":[\"HandlerMapping的实现类的作用 : 实现类RequestMappingHandlerMapping，它会处理@RequestMapping 注解，并将其注册到请求映射表中。\",\"HandlerAdapter的实现类的作用 :\\n实现类RequestMappingHandlerAdapter，则是处理请求的适配器，确定调用哪个类的哪个方法，并且构造方法参数，返回值。\"]},\"2782\":{\"h\":\"静态资源的放行管理\",\"t\":[\"我们项目中不单单存在JSP文件,也存在许多静态文件.如:多媒体文件 / CSS样式 / JS脚本,在SpringMVC中对于这些静态文件的管理也是需要我们注意的地方.\"]},\"2783\":{\"h\":\"为什么需要放行静态文件?\"},\"2784\":{\"h\":\"修改Demo\"},\"2785\":{\"h\":\"创建静态资源\",\"t\":[\"style.css\",\"h2 { color: red; } \",\"say.js\",\"function say() { alert(\\\"123\\\"); } \"]},\"2786\":{\"h\":\"修改index.jsp\",\"t\":[\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"css/style.css\\\" /> <script type=\\\"text/javascript\\\" src=\\\"js/say.js\\\"></script> </head> <body> <h2>Hello World!</h2> <p>this is index.jsp</p> <img src=\\\"img/img01.png\\\"/> <button onclick=\\\"say()\\\" >btn</button> </body> </html> \"]},\"2787\":{\"h\":\"测试结果\",\"t\":[\"此时我们发现页面资源无法正常访问\",\"打开网络监控,显示资源请求404\"]},\"2788\":{\"h\":\"问题原因\",\"t\":[\"由于我们之前在web.xml中注册DispatcherServlet时,对于所有的请求都进行捕捉,JSP文件除外\",\"所以上面的Demo执行流程如下:\",\"PC发出请求打开JSP页面\",\"DispatcherServlet发现是JSP文件,直接返回给前端\",\"前端在打开渲染JSP时发现有外部资源,再次发送请求\",\"DispatcherServlet此时捕捉到资源请求,于是请求HandlerMapping处理器映射器查询\",\"HandlerMapping处理器映射器未能发现对应的Controller处理单元,返回结果\",\"DispatcherServlet未能收到正确的Controller处理单元位置,返回404\"]},\"2789\":{\"h\":\"放行静态文件\",\"t\":[\"修改springmvc.xml配置文件,添加<mvc:resources>标签放行指定目录\",\"如下:\",\"<!--静态资源放行--> <mvc:resources mapping=\\\"/js/**\\\" location=\\\"/js/\\\"></mvc:resources> <mvc:resources mapping=\\\"/img/**\\\" location=\\\"/img/\\\"></mvc:resources> <mvc:resources mapping=\\\"/css/**\\\" location=\\\"/css/\\\"></mvc:resources> \",\"其中 :\",\"mapping表示请求的url\",\"location表示本地资源目录\",\"完整代码:\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/p http://www.springframework.org/schema/p/spring-p.xsd http://www.springframework.org/schema/c http://www.springframework.org/schema/c/spring-c.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd \\\"> <!-- 包扫描 --> <context:component-scan base-package=\\\"com.meturing\\\" /> <!--配置视图解析器--> <bean class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <property name=\\\"prefix\\\" value=\\\"/view/\\\" ></property> <property name=\\\"suffix\\\" value=\\\".jsp\\\" ></property> </bean> <!--自动加载处理映射器和处理器适配器--> <mvc:annotation-driven /> <!--静态资源放行--> <mvc:resources mapping=\\\"/js/**\\\" location=\\\"/js/\\\"></mvc:resources> <mvc:resources mapping=\\\"/img/**\\\" location=\\\"/img/\\\"></mvc:resources> <mvc:resources mapping=\\\"/css/**\\\" location=\\\"/css/\\\"></mvc:resources> </beans> \",\"再次测试:\"]},\"2790\":{\"h\":\"优化项目结构\",\"t\":[\"我们刚刚虽然解决了当前的问题,但是当前的目录看起来还是很混乱. 静态文件有很多,文件件存储与代码文件混在一起不方便管理. 同时,需要放开的资源目录也会无限制增多\",\"所以我们推荐将所有的静态资源都存放在/static/目录中,这样我们只需要放行静态资源目录就行.\",\"修改springmvc.xml放行规则\",\"<!--静态资源放行--> <mvc:resources mapping=\\\"/static/**\\\" location=\\\"/static/\\\"></mvc:resources> \",\"测试正常\"]},\"2791\":{\"h\":\"请求参数的处理\"},\"2792\":{\"h\":\"获取参数的方式\"},\"2793\":{\"h\":\"紧耦合方式 - 了解\",\"t\":[\"DispatcherServlet中的service方法直接将此次请求的request对象传递给调用的单元方法即可。 同时在单元方法上声明形参HttpServletRequest来接收request实参即可。\",\"Controller层\",\"@RestController public class TestGetRequestParam { //紧耦合方式参数注入 @RequestMapping(\\\"/getParamByRequest\\\") public String getParamByRequest(HttpServletRequest req, HttpServletResponse resp) { String username = req.getParameter(\\\"username\\\"); String password = req.getParameter(\\\"password\\\"); System.out.println(\\\"username:\\\"+username+\\\" / password:\\\"+password); return \\\"success\\\"; } } \",\"我们在Controller单元中修改:\",\"使用HttpServletRequest与HttpServletResponse形参接收Request对象与Response对象\",\"通过Request对象.getParameter(\\\"参数名\\\")方法获取具体的参数\",\"testGetRequestParam.jsp\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <p>测试紧耦合方式参数注入</p> <form action=\\\"getParamByRequest\\\"> <input name=\\\"username\\\" type=\\\"text\\\" value=\\\"admin\\\"> <input name=\\\"password\\\" type=\\\"password\\\" value=\\\"admin\\\"> <input type=\\\"submit\\\" value=\\\"TestParamByRequest\\\"> </form> </body> </html> \",\"注意 : 前端发送的参数名需要和后端保持一致,否则获取不到显示为null\"]},\"2794\":{\"h\":\"解耦合方式【熟练】\",\"t\":[\"DispatcherServlet在其service方法中将请求数据根据需求从request对象中获取出来后，将数据直接传递给对应的单元方法使用。\",\"同时在单元方法上直接声明对应的形参接收请求数据即可。\",\"在单元方法上声明形参来接收请求数据时，形参名必须和请求数据的键名一致，DispatcherServlet会将调用单元方法的形参名作为请求数据的键名获取请求数据，然后传递给单元方法。如果不一致可以使用@RequestParam注解注明参数的映射\",\"Controller层\",\"@RestController public class TestGetRequestParam { //解耦合方式参数注入 @RequestMapping(\\\"/getParamByArgName\\\") public String getParamByArgName(@RequestParam String username, @RequestParam(\\\"password\\\") String pwd) { System.out.println(\\\"username:\\\"+username+\\\" / password:\\\"+pwd); return \\\"success\\\"; } } \",\"注意:\",\"默认情况下只要保证形参名与参数名一致,可以自动由SpringMVC处理映射\",\"如果参数名不一致,需要使用@RequestParam注解来指定映射\",\"在前面学习Restful风格时,从路径中获取参数的注解是@PathVariable\",\"testGetRequestParam.jsp\",\"<html> <head> <title>Title</title> </head> <body> <p>测试解耦合方式参数注入</p> <form action=\\\"getParamByArgName\\\"> <input name=\\\"username\\\" type=\\\"text\\\" value=\\\"admin\\\"> <input name=\\\"password\\\" type=\\\"password\\\" value=\\\"admin\\\"> <input type=\\\"submit\\\" value=\\\"TestParamByRequest\\\"> </form> </body> </html> \"]},\"2795\":{\"h\":\"参数的处理\"},\"2796\":{\"h\":\"POJO接收参数\",\"t\":[\"注意事项 :\",\"提交的参数名必须和POJO的属性名保持一致\",\"springmvc底层通过反射给参数列表的属性赋值(通过set方法设置属性值的,不是直接通过操作属性)POJO的属性一定要有set方法,要不然就会接收失败\",\"testGetRequestParam.jsp\",\"<html> <head> <title>Title</title> </head> <body> <p>测试POJO</p> <form action=\\\"getDataByPojo\\\"> <p>姓名<input type=\\\"text\\\" name=\\\"pname\\\"></p> <p>年龄<input type=\\\"text\\\" name=\\\"page\\\"></p> <p>性别: <input type=\\\"radio\\\" name=\\\"gender\\\" value=\\\"1\\\" >男 <input type=\\\"radio\\\" name=\\\"gender\\\" value=\\\"0\\\" >女 </p> <p>爱好 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"1\\\"> 篮球 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"2\\\"> 足球 <input type=\\\"checkbox\\\" name=\\\"hobby\\\" value=\\\"3\\\"> 羽毛球 </p>生日 <p> <input type=\\\"text\\\" name=\\\"birthdate\\\"> </p> <input type=\\\"submit\\\"> </form> </body> </html> \",\"POJO类 : Person.java\",\"@Data @NoArgsConstructor @AllArgsConstructor @ToString public class Person implements Serializable { private String pname; private String page; private String gender; private String[] hobby; private String birthdate; } \",\"Controller层\",\"@RestController public class TestGetRequestParam { @RequestMapping(\\\"/getDataByPojo\\\") public String getDataByPojo(Person person){ System.out.println(person); return \\\"success\\\"; } } \"]},\"2797\":{\"h\":\"日期类型的特殊处理\"},\"2798\":{\"h\":\"注解方式\",\"t\":[\"我们可以在字段上使用@DateTimeFormat注解来表示当前字段需要转换为Date类型\",\"testGetRequestParam.jsp\",\"<html> <head> <title>Title</title> </head> <body> <p>测试日期转换</p> <form action=\\\"getDateFormat\\\"> </p>生日 <p> <input type=\\\"text\\\" name=\\\"birthdate\\\"> </p> <input type=\\\"submit\\\"> </form> </body> </html> \",\"Controller层\",\"@RestController public class TestGetRequestParam { @RequestMapping(\\\"/getDateFormat\\\") public String getDateFormat(@DateTimeFormat(pattern = \\\"yyyy-MM-dd\\\") Date birthdate){ System.out.println(birthdate); return \\\"success\\\"; } } \",\"@DateTimeFormat(pattern = \\\"yyyy-MM-dd\\\") 可以用于方法参数列表和 类的属性上 例如: \"]},\"2799\":{\"h\":\"自定义转换器\",\"t\":[\"定义转换器 : 实现Converter接口重写convert方法\",\"public class StringToDateConverter implements Converter<String, Date> { private SimpleDateFormat dateFormat=new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); public Date convert(String source) { Date date =null; try { date = dateFormat.parse(source); } catch (ParseException e) { throw new RuntimeException(e); } return date; } } \",\"springmvc.xml 中配置转换器\",\"<!--数据转换工厂--> <bean id=\\\"conversionService\\\" class=\\\"org.springframework.context.support.ConversionServiceFactoryBean\\\"> <!--配置类型转换器--> <property name=\\\"converters\\\"> <array> <!--注入自定义转换器对象--> <bean class=\\\"com.meturing.util.StringToDateConverter\\\"></bean> </array> </property> </bean> <!--这里配置转换服务工厂--> <mvc:annotation-driven conversion-service=\\\"conversionService\\\"/> \",\"测试:\"]},\"2800\":{\"h\":\"List集合接收参数\",\"t\":[\"创建Pets类\",\"@NoArgsConstructor @AllArgsConstructor @ToString @Data public class Pets implements Serializable { private String petName; private String petType; } \",\"在Person类中新增petsList属性,用来接收参数\",\"@Data @NoArgsConstructor @AllArgsConstructor @ToString public class Person implements Serializable { private ArrayList<Pets> petsList ; } \",\"Controller层\",\"@RestController public class TestGetRequestParam { @RequestMapping(\\\"/getDataByList\\\") public String getDataByList(Person person){ System.out.println(person.getPetsList()); return \\\"success\\\"; } } \",\"testGetRequestParam.jsp\",\"<html> <head> <title>Title</title> </head> <body> <p>测试使用List接收参数</p> <form action=\\\"getDataByList\\\"> <p> 宠物1: 名字:<input type=\\\"text\\\" name=\\\"petsList[0].petName\\\" >类型:<input type=\\\"text\\\" name=\\\"petsList[0].petType\\\"> </p> <p> 宠物2: 名字:<input type=\\\"text\\\" name=\\\"petsList[1].petName\\\" >类型:<input type=\\\"text\\\" name=\\\"petsList[1].petType\\\"> </p> <input type=\\\"submit\\\"> </form> </body> </html> \",\"前端传送参数时,需要以数组的方式传送: 字段名[下标].属性名\"]},\"2801\":{\"h\":\"Map集合接收参数\",\"t\":[\"创建Pets类\",\"@NoArgsConstructor @AllArgsConstructor @ToString @Data public class Pets implements Serializable { private String petName; private String petType; } \",\"在Person类中新增petsList属性,用来接收参数\",\"@Data @NoArgsConstructor @AllArgsConstructor @ToString public class Person implements Serializable { private HashMap<String,Pets> petsMap ; } \",\"Controller层\",\"@RestController public class TestGetRequestParam { @RequestMapping(\\\"/getDataByMap\\\") public String getDataByMap(Person person){ System.out.println(person.getPetsMap()); return \\\"success\\\"; } } \",\"testGetRequestParam.jsp\",\"<html> <head> <title>Title</title> </head> <body> <p>测试使用Map接收参数</p> <form action=\\\"getDataByMap\\\"> <p> 宠物1: 名字:<input type=\\\"text\\\" name=\\\"petsMap['宠物1'].petName\\\" >类型:<input type=\\\"text\\\" name=\\\"petsMap['宠物1'].petType\\\"> </p> <p> 宠物2: 名字:<input type=\\\"text\\\" name=\\\"petsMap['宠物2'].petName\\\" >类型:<input type=\\\"text\\\" name=\\\"petsMap['宠物2'].petType\\\"> </p> <input type=\\\"submit\\\"> </form> </body> </html> \",\"前端传送参数时,需要以数组的方式传送: 字段名['key'].属性名\"]},\"2802\":{\"h\":\"编码问题\"},\"2803\":{\"h\":\"Get乱码\",\"t\":[\"可以参照之前在JavaEE阶段中Servlet中处理方案\",\"get请求乱码\"]},\"2804\":{\"h\":\"POST乱码\"},\"2805\":{\"h\":\"设置请求编码方式\",\"t\":[\"可以参照之前在JavaEE阶段中Servlet中处理方案,但是需要使用紧耦合的方式获取参数\",\"post请求乱码\"]},\"2806\":{\"h\":\"设置过滤器\",\"t\":[\"过滤器的应用案例\"]},\"2807\":{\"h\":\"使用SpringMVC过滤器\",\"t\":[\"web.xml中配置编码过滤器\",\"<!--创建springframework提供的CharacterEncodingFilter过滤器--> <filter> <filter-name>characterEncodingFilter</filter-name> <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> <init-param> <param-name>encoding</param-name> <param-value>utf-8</param-value> </init-param> </filter> <!--指定过滤器映射路径--> <filter-mapping> <filter-name>characterEncodingFilter</filter-name> <url-pattern>/*</url-pattern> </filter-mapping> \"]},\"2808\":{\"h\":\"路径映射与RESTful风格\",\"t\":[\"@RequestMapping注解在前面的学习中,我们通常将他使用在方法或者类上,用来表明当前Controller控制单元的请求路径\",\"接下来我们将简单学习一下@RequestMapping注解在SpringMVC项目中的应用:\"]},\"2809\":{\"h\":\"@RequestMapping注解的使用\",\"t\":[\"在注解中,如果是单一默认属性,在使用时可以不用属性名=值的形式,直接使用值就行.\"]},\"2810\":{\"h\":\"value:Url路径\",\"t\":[\"@RequestMapping注解中的value属性是默认属性,用来标识当前类或者方法的Controller控制单元的请求路径\"]},\"2811\":{\"h\":\"代码\",\"t\":[\"Controller控制单元\",\"@Controller @RequestMapping(\\\"/meturing\\\") public class FirstController { @RequestMapping(\\\"/firstController\\\") public String getFirstView() { System.out.println(\\\"firstController\\\"); //相当于请求转发 return \\\"first\\\"; } } \"]},\"2812\":{\"h\":\"测试\",\"t\":[\"当我们访问指定URL时,就会执行到具体的Controller控制单元\",\"具体的执行流程详见: 执行流程与三大组件\"]},\"2813\":{\"h\":\"method控制请求方式\",\"t\":[\"method属性 可以控制请求的方式, 值为RequestMethod的枚举值\"]},\"2814\":{\"h\":\"代码\",\"t\":[\"Controller控制单元\",\"@Controller public class TestRequestMapping { @RequestMapping(value = \\\"/testPostRequest\\\", method= RequestMethod.POST) public String testPostRequest() { System.out.println(\\\"testPostRequest\\\"); return \\\"first\\\"; } } \",\"testRequestMapping.jsp代码\",\"<html> <head> <title>Title</title> </head> <body> <form method=\\\"post\\\" action=\\\"testPostRequest\\\"> <input type=\\\"submit\\\" value=\\\"post\\\"> </form> </body> </html> \"]},\"2815\":{\"h\":\"测试\",\"t\":[\"当我们使用正确的请求方法时,即可请求到具体的控制单元\",\"当我们前端使用错误的请求方法时:\",\"此时前端会出现405错误,服务器抛出异常\"]},\"2816\":{\"h\":\"params : 控制请求参数\",\"t\":[\"params 属性可以对请求中的参数进行限定:\",\"params = {\\\"参数1\\\",\\\"参数2\\\"} 表示请求中必须有参数1和参数2 params = {\\\"!参数1\\\",\\\"!参数2\\\"} 表示请求中不能有参数1和参数2 params = {\\\"参数1=值1\\\",\\\"参数2=值2\\\"} 表示请求中必须有参数1和参数2,且值必须对应值1和值2 params = {\\\"参数1!=值1\\\",\\\"参数2!=值2\\\"} 表示请求中必须有参数1和参数2,且值不能对应值1和值2 \",\"参数可以是一个或者多个,多个参数使用逗号分隔\"]},\"2817\":{\"h\":\"代码\",\"t\":[\"Controller控制单元\",\"@Controller public class TestRequestMapping { //参数里面userName不能是root 必须有password参数 不能有sex参数 @RequestMapping(value = \\\"/testRequestParams\\\", params={\\\"userName!=root\\\",\\\"password\\\",\\\"!sex\\\"}) public String testRequestParams() { System.out.println(\\\"testPostRequest\\\"); return \\\"first\\\"; } } \",\"testRequestMapping.jsp代码\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <form method=\\\"get\\\" action=\\\"testRequestParams\\\"> <input name=\\\"userName\\\" type=\\\"text\\\"> <input name=\\\"password\\\" type=\\\"password\\\"> <input type=\\\"submit\\\" value=\\\"Params\\\"> </form> </body> </html> \"]},\"2818\":{\"h\":\"测试\",\"t\":[\"当userName为11111时正常访问\",\"当userName为root时,前端页面400且控制台出现异常\"]},\"2819\":{\"h\":\"headers:控制请求头\"},\"2820\":{\"h\":\"代码\",\"t\":[\"Controller控制单元\",\"@Controller public class TestRequestMapping { @RequestMapping(value = \\\"/testRequestHeaders\\\", headers={\\\"Referer=http://localhost:8080/SpringMVC_01/testRequestMapping.jsp\\\"}) public String testRequestHeaders() { System.out.println(\\\"testRequestParams\\\"); return \\\"first\\\"; } } \",\"testRequestMapping.jsp代码\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <form method=\\\"get\\\" action=\\\"testRequestHeaders\\\"> <input type=\\\"submit\\\" value=\\\"Headers\\\"> </form> </body> </html> \"]},\"2821\":{\"h\":\"测试\",\"t\":[\"正常访问\",\"修改headers中的设置\"]},\"2822\":{\"h\":\"@PathVariable注解和RESTful风格\"},\"2823\":{\"h\":\"什么是RESTful风格\",\"t\":[\"REST即表述性状态传递(英文: Representational State Transfer，简称REST)是Roy Fielding博士在2000年他的博士论中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。\",\"在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来我多的web服条开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服条进行图书查找:雅虎提供的Web服务也是REST风格的。\",\"表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，UR1，和XML (标准通用标记语言下的一个子集)以及HTML(标准通用标记语言下的一个应用) 这些现有的广泛流行的协议和标准。\",\"REST 定义了一组体系架构原则，您可以根据这些原则设计以系统资源为中心的 Web 服务，包括使用不同语言编写的客户端如何通过 HTTP 处理和传输资源状态。如何考虑使用它的 Web 服务的数量，REST 近年来已经成为最主要的 Web 服务设计模式。事实上，REST 对 Web 的影响非常大，由于其使用相当方便，已经普遍地取代了基于 SOAP 和 WSDL 的接口设计。\"]},\"2824\":{\"h\":\"RESTful与普通Url\",\"t\":[\"普通的Url形式\",\"*****/contextPath/aaa.do *****/contextPath/aaa.jsp *****/contextPath/aaa.html *****/contextPath/css/aaa.css *****/contextPath/js/aaa.js \",\"RESTful风格Url\",\"*****/contextPath/aaa/10/root *****/contextPath/aaa \"]},\"2825\":{\"h\":\"简单实现RESTful\",\"t\":[\"实现步骤:\",\"在@RequestMapping注解的路径中,对于需要传递的参数使用{}标注\",\"在方法的参数中,对于需要映射的参数使用@PathVariable注解\",\"@RestController public class TestRestful { @RequestMapping(\\\"/getRestful/{pageName}\\\") public String getRestful(@PathVariable String pageName){ return pageName; } } \"]},\"2826\":{\"h\":\"多参数的问题\",\"t\":[\"一般情况下,如果参数名与url中的名字保持一致,会自动映射字段进行取值\",\"如果不一致,则会出错\",\"此时我们需要修改@PathVariable注解指定映射字段\"]},\"2827\":{\"h\":\"综合案例\",\"t\":[\"我们尝试通过同一个url使用不同的请求方式,来访问到不同的controller处理单元\",\"例如: /controller/1 HTTP GET : 得到id为1 的资源 /controller/1 HTTP DELETE : 删除id为1的资源 /controller/1 HTTP PUT : 更新id为1 的资源 /controller/1 HTTP POST : 增加id为1 的资源\"]},\"2828\":{\"h\":\"回顾请求方式\",\"t\":[\"HTTP请求方式\"]},\"2829\":{\"h\":\"实现思路\",\"t\":[\"前端 : 在使用DELETE和PUT请求时,本质上也是使用的POST请求方式,需要传输_method字段指定\",\"后端需要在web.xml中配置hiddenHttpMethodFilter过滤器将POST请求转换为PUT或者DELETE请求\",\" <!--配置hiddenHttpMethodFilter ,将POST请求转换为PUT或者DELETE请求--> <filter> <filter-name>hiddenHttpMethodFilter</filter-name> <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class> </filter> <filter-mapping> <filter-name>hiddenHttpMethodFilter</filter-name> <url-pattern>/*</url-pattern> </filter-mapping> \"]},\"2830\":{\"h\":\"相关代码\",\"t\":[\"修改web.xml,新增过滤器转换PUT和DELETE请求\",\"<!--配置hiddenHttpMethodFilter ,将POST请求转换为PUT或者DELETE请求--> <filter> <filter-name>hiddenHttpMethodFilter</filter-name> <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class> </filter> <filter-mapping> <filter-name>hiddenHttpMethodFilter</filter-name> <url-pattern>/*</url-pattern> </filter-mapping> \",\"前端代码:\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <form method=\\\"post\\\" action=\\\"testRestful/10\\\"> <input type=\\\"submit\\\" value=\\\"POST\\\"> </form> <form method=\\\"get\\\" action=\\\"testRestful/10\\\"> <input type=\\\"submit\\\" value=\\\"GET\\\"> </form> <form method=\\\"post\\\" action=\\\"testRestful/10\\\"> <input type=\\\"text\\\" name=\\\"_method\\\" value=\\\"PUT\\\" hidden=\\\"hidden\\\"> <input type=\\\"submit\\\" value=\\\"PUT\\\"> </form> <form method=\\\"post\\\" action=\\\"testRestful/10\\\"> <input type=\\\"text\\\" name=\\\"_method\\\" value=\\\"DELETE\\\" hidden=\\\"hidden\\\"> <input type=\\\"submit\\\" value=\\\"DELETE\\\"> </form> </body> </html> \",\"Controller层TestRestful.java\",\"@RestController public class TestRestful { @RequestMapping(value = \\\"/testRestful/{userId}\\\",method = RequestMethod.GET) public String getRestful(@PathVariable String userId){ return \\\"GET :\\\"+userId; } @RequestMapping(value = \\\"/testRestful/{userId}\\\",method = RequestMethod.POST) public String postRestful(@PathVariable String userId){ return \\\"POST :\\\"+userId; } @RequestMapping(value = \\\"/testRestful/{userId}\\\",method = RequestMethod.PUT) public String putRestful(@PathVariable String userId){ return \\\"PUT :\\\"+userId; } @RequestMapping(value = \\\"/testRestful/{userId}\\\",method = RequestMethod.DELETE) public String deleteRestful(@PathVariable String userId){ return \\\"DELETE :\\\"+userId; } } \",\"实现效果:\"]},\"2831\":{\"h\":\"常见注解\"},\"2832\":{\"h\":\"@RequestMapping\"},\"2833\":{\"h\":\"作用\",\"t\":[\"用于建立请求 URL 和处理请求方法之间的对应关系\"]},\"2834\":{\"h\":\"出现位置\",\"t\":[\"类上：请求 URL 的第一级访问目录。此处不写的话，就相当于应用的根目录。写的话需要以/开头\",\"方法上: 请求 URL 的第二级访问目录\"]},\"2835\":{\"h\":\"属性\",\"t\":[\"value : 用于指定请求的 URL。它和 path 属性的作用是一样的。\",\"method：用于指定请求的方式。\",\"params(了解)：用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的 key 和 value 必须和 配置的一模一样。\",\"headers(了解)：用于指定限制请求消息头的条件。\"]},\"2836\":{\"h\":\"使用案例\",\"t\":[\"@RequestMapping注解的使用 见下列演示:\",\"@RequestMapping注解的使用\"]},\"2837\":{\"h\":\"@RequestParam\"},\"2838\":{\"h\":\"作用\",\"t\":[\"把请求中指定名称的参数给控制器中的形参赋值。\"]},\"2839\":{\"h\":\"出现位置\",\"t\":[\"方法形参\"]},\"2840\":{\"h\":\"属性\",\"t\":[\"value：请求参数中的名称。\",\"required：请求参数中是否必须提供此参数。默认值：true。表示必须提供，如果不提供将报错。\"]},\"2841\":{\"h\":\"使用案例\",\"t\":[\"解耦合方式【熟练】\"]},\"2842\":{\"h\":\"@PathVariable\"},\"2843\":{\"h\":\"作用\",\"t\":[\"用于绑定 url 中的占位符。例如：请求 url 中 /delete/{id}，这个{id}就是 url 占位符。 url 支持占位符是 spring3.0 之后加入的。是 springmvc 支持 rest 风格 URL 的一个重要标志。\"]},\"2844\":{\"h\":\"出现位置\",\"t\":[\"方法形参\"]},\"2845\":{\"h\":\"属性\",\"t\":[\"value：用于指定 url 中占位符名称。required：是否必须提供占位符。\"]},\"2846\":{\"h\":\"使用案例\",\"t\":[\"@PathVariable注解和RESTful风格\"]},\"2847\":{\"h\":\"@RequestHeader (了解)\"},\"2848\":{\"h\":\"作用\",\"t\":[\"用于获取请求消息头。\"]},\"2849\":{\"h\":\"出现位置\",\"t\":[\"方法形参\"]},\"2850\":{\"h\":\"属性\",\"t\":[\"value：提供消息头名称required：是否必须有此消息头\"]},\"2851\":{\"h\":\"使用案例\",\"t\":[\"@RequestMapping(\\\"/getRequestHeader\\\") public String getRequestHeader(@RequestHeader(value=\\\"Accept\\\", required=false)String requestHeader){ System.out.println(requestHeader); return \\\"success\\\"; } \"]},\"2852\":{\"h\":\"@CookieValue (了解)\"},\"2853\":{\"h\":\"作用\",\"t\":[\"用于把指定 cookie 名称的值传入控制器方法参数。\"]},\"2854\":{\"h\":\"出现位置\",\"t\":[\"方法形参\"]},\"2855\":{\"h\":\"属性\",\"t\":[\"value：指定 cookie 的名称。required：是否必须有此 cookie\"]},\"2856\":{\"h\":\"使用案例\",\"t\":[\"@RequestMapping(\\\"/getCookie\\\") public String getCookie(@CookieValue(value=\\\"JSESSIONID\\\",required=false) String cookieValue){ System.out.println(cookieValue); return \\\"success\\\"; } \"]},\"2857\":{\"h\":\"综合案例\",\"t\":[\"TestAnnotation.jsp\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <form action=\\\"TestAnnotation/testRequestMapping\\\" method=\\\"post\\\"> 姓名 : <input type=\\\"text\\\" name=\\\"name\\\"> <input type=\\\"submit\\\" value=\\\"TestRequestMapping\\\"> </form> </body> </html> \",\"Controller层 : TestAnnotation.java\",\"@RestController() @RequestMapping(value = \\\"/TestAnnotation\\\") public class TestAnnotation { @RequestMapping(value = \\\"/{testRequestMapping}\\\",method = RequestMethod.POST,params={\\\"name!=root\\\"},headers = {\\\"Host=localhost:8080\\\"}) public String testRequestMapping(@RequestParam(value = \\\"name\\\",required = false) String uname, @PathVariable(value = \\\"testRequestMapping\\\",required = false) String path, @RequestHeader(value = \\\"Accept-Language\\\",required = false) String sLanguage, @CookieValue(value = \\\"JSESSIONID\\\",required = false) String sCookie){ System.out.println(uname+\\\"/\\\"+path+\\\"/\\\"+sLanguage+\\\"/\\\"+sCookie); return \\\"success\\\"; } } \"]},\"2858\":{\"h\":\"响应处理\"},\"2859\":{\"h\":\"返回Viod\",\"t\":[\"如果我们将Controller层中返回Viod方法\",\"@Controller public class TestResponse { @RequestMapping(\\\"/testReturnVoid\\\") public void testReturnVoid() throws Exception{ System.out.println(\\\"AccountController 的 testForward 方法执行了。。。。\\\"); } } \",\"并使用前端页面进行访问\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <form action=\\\"testReturnVoid\\\"> <input type=\\\"submit\\\" value=\\\"testReturnVoid\\\"> </form> </body> </html> \",\"前端访问后发现,浏览器出现500的错误,控制台可以直接输入方法中的代码\",\"由此可见 : 在SpringMVC中如果对于当前的控制单元，没有写对应的返回值，这个时候SpringMVC就会找和自己控制单元名称一致的页面展示,控制单元中的代码是可以正常访问的.\",\"如果在SpringMVC.xml中怕配置了视图解析器: 则前端展示的是404的页面\"]},\"2860\":{\"h\":\"转发和重定向\"},\"2861\":{\"h\":\"环境准备\",\"t\":[\"redirect.JSP\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <h1>This is Redirect Page</h1> </body> </html> \",\"forward.JSP\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <h1>This is Forward Page</h1> </body> </html> \"]},\"2862\":{\"h\":\"ServletAPI实现\",\"t\":[\"单元方法的返回值类型设置void。因为使用response对象在单元方法中直接对此次请求进行了响应，不再通过DispatcherServlet了，既然已经响应了，就不需要再给DispatcherServlet返回值了。\",\"在单元方法上声明HttpServletResponse形参，来接收此次请求的response对象。\"]},\"2863\":{\"h\":\"请求转发\",\"t\":[\"request.getRequestDispatcher(\\\"目标页面地址\\\").forward(request,response);\",\"Controller层\",\"@Controller public class TestResponse { @RequestMapping(\\\"/testForwardByServletAPI\\\") public void testForwardByServletAPI(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { request.getRequestDispatcher(\\\"/forward.jsp\\\").forward(request,response); } } \",\"TestResponse.JSP\",\"<html> <head> <title>Title</title> </head> <body> <form action=\\\"testForwardByServletAPI\\\"> <input type=\\\"submit\\\" value=\\\"testForwardByServletAPI\\\"> </form> </body> </html> \"]},\"2864\":{\"h\":\"重定向\",\"t\":[\"request.getRequestDispatcher(\\\"目标页面地址\\\").forward(request,response);\",\"Controller层\",\"@Controller public class TestResponse { @RequestMapping(\\\"/testRedirectByServletAPI\\\") public void testRedirectByServletAPI(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.sendRedirect(request.getContextPath()+\\\"/redirect.jsp\\\"); } } \",\"TestResponse.JSP\",\"<html> <head> <title>Title</title> </head> <body> <form action=\\\"testRedirectByServletAPI\\\"> <input type=\\\"submit\\\" value=\\\"testRedirectByServletAPI\\\"> </form> </body> </html> \"]},\"2865\":{\"h\":\"使用关键字\"},\"2866\":{\"h\":\"请求转发 : forward关键字\",\"t\":[\"使用通过单元方法的返回值来告诉DispatcherServlet请求转发指定的资源,如果是请求转发，forward关键字可以省略不写的\",\"Controller层\",\"@Controller public class TestResponse { /* * 返回字符串告诉DispatcherServlet跳转的路径 * 在路径之前放上一个forward: 关键字,就是请求转发 * 如果路径前的关键字是forward,那么可以省略不写 * */ @RequestMapping(\\\"/testKeywordsByForward\\\") public String testKeywordsByForward() { return \\\"/forward.jsp\\\"; //return \\\"forward:/forward.jsp\\\"; } } \",\"TestResponse.JSP\",\"<html> <head> <title>Title</title> </head> <body> <form action=\\\"testKeywordsByForward\\\"> <input type=\\\"submit\\\" value=\\\"testKeywordsByForward\\\"> </form> </body> </html> \",\"注意 : 当前请求是,没有在视图解析器中配置前后缀的,需要注意搭配\"]},\"2867\":{\"h\":\"请求转发 : redirect关键字\",\"t\":[\"使用通过单元方法的返回值来告诉DispatcherServlet重定向指定的资源，注意这个redirect关键字不可以省去\",\"Controller层\",\"@Controller public class TestResponse { @RequestMapping(\\\"/testKeywordsByRedirect\\\") public String testKeywordsByRedirect() { return \\\"redirect:/redirect.jsp\\\"; } } \",\"TestResponse.JSP\",\"<html> <head> <title>Title</title> </head> <body> <form action=\\\"testKeywordsByRedirect\\\"> <input type=\\\"submit\\\" value=\\\"testKeywordsByRedirect\\\"> </form> </body> </html> \",\"注意 : 当前请求是,没有在视图解析器中配置前后缀的,需要注意搭配\"]},\"2868\":{\"h\":\"使用View视图\",\"t\":[\"RedirectView中所做的操作，最终的实现是在renderMergedOutputModel中完成实现的，简单来说RedirectView实现了链接的重定向，并且将数据保存到FlashMap中，这样在跳转后的链接中可以获取一些数据.\"]},\"2869\":{\"h\":\"请求转发\",\"t\":[\"Controller层\",\"@Controller public class TestResponse { @RequestMapping(\\\"/testViewByForward\\\") public View testViewByForward() { return new InternalResourceView(\\\"/forward.jsp\\\"); } } \",\"TestResponse.JSP\",\"<html> <head> <title>Title</title> </head> <body> <form action=\\\"testViewByForward\\\"> <input type=\\\"submit\\\" value=\\\"testViewByForward\\\"> </form> </body> </html> \"]},\"2870\":{\"h\":\"重定向\",\"t\":[\"Controller层\",\"@Controller public class TestResponse { @RequestMapping(\\\"/testViewByRedirect\\\") public View testViewByRedirect(HttpServletRequest request) { return new RedirectView(request.getContextPath()+\\\"/redirect.jsp\\\"); } } \",\"TestResponse.JSP\",\"<html> <head> <title>Title</title> </head> <body> <form action=\\\"testViewByRedirect\\\"> <input type=\\\"submit\\\" value=\\\"testViewByRedirect\\\"> </form> </body> </html> \"]},\"2871\":{\"h\":\"使用ModelAndView\",\"t\":[\"ModelAndView中的Model代表模型，View代表视图，这个名字就很好地解释了该类的作用。业务处理器调用模型层处理完用户请求后，把结果数据存储在该类的model属性中，把要返回的视图信息存储在该类的view属性中，然后让该ModelAndView返回该Spring MVC框架。\",\"注意 : .setViewName()可以使用关键字进行处理 , .setView() 可以直接使用View视图进行处理\"]},\"2872\":{\"h\":\"请求转发\",\"t\":[\"Controller层\",\"@Controller public class TestResponse { @RequestMapping(\\\"/testModelAndViewByForward\\\") public ModelAndView testModelAndViewByForward() { ModelAndView modelAndView = new ModelAndView(); //modelAndView.setViewName(\\\"forward:/forward.jsp\\\"); modelAndView.setView(new InternalResourceView(\\\"/forward.jsp\\\")); return modelAndView; } } \",\"TestResponse.JSP\",\"<html> <head> <title>Title</title> </head> <body> <form action=\\\"testModelAndViewByForward\\\"> <input type=\\\"submit\\\" value=\\\"testModelAndViewByForward\\\"> </form> </body> </html> \"]},\"2873\":{\"h\":\"重定向\",\"t\":[\"Controller层\",\"@Controller public class TestResponse { @RequestMapping(\\\"/testModelAndViewByRedirect\\\") public ModelAndView testModelAndViewByRedirect(HttpServletRequest request) { ModelAndView modelAndView = new ModelAndView(); //modelAndView.setViewName(\\\"redirect:/redirect.jsp\\\"); modelAndView.setView(new RedirectView(request.getContextPath()+\\\"/redirect.jsp\\\")); return modelAndView; } } \",\"TestResponse.JSP\",\"<html> <head> <title>Title</title> </head> <body> <form action=\\\"testModelAndViewByRedirect\\\"> <input type=\\\"submit\\\" value=\\\"testModelAndViewByRedirect\\\"> </form> </body> </html> \"]},\"2874\":{\"h\":\"响应JSON数据\",\"t\":[\"当浏览器发起一个ajax请求给服务器，服务器调用对应的单元方法处理ajax请求。而ajax的请求在被处理完成后，其处理结果需要直接响应。而目前我们在单元方法中响应ajax请求，使用的是response对象，需要我们自己将要响应的数据转换为json字符串响应，比较麻烦，而我们一直希望在单元方法中无论是否是ajax请求，都使用return语句来完成资源的响应，怎么办？\",\"既然我们希望使用单元方法的返回值来响应ajax请求的处理结果，而目前DispatcherServlet的底层会将单元方法的返回值按照请求转发或者重定向来处理，所以就需要我们告诉DispatcherServlet，单元方法的返回值不要按照请求转发或者重定向处理，而是按照直接响应处理，将单元方法的返回值直接响应给浏览器。\"]},\"2875\":{\"h\":\"导入包\",\"t\":[\"在之前JavaEE的学习中我们使用了GSON包来处理,详见: GSON工具类的使用\",\"接下来我们将使用jackson包来处理\",\"<dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.12.1</version> </dependency> \"]},\"2876\":{\"h\":\"使用@ResponseBody返回JSON\",\"t\":[\"把我们要响应的数据直接return即可，返回值类型为要return的数据类型。\",\"Controller层\",\"@Controller public class TestResponse { /* * @ResponseBody * 1方法的返回值不在作为界面跳转依据,而已直接作为返回的数据 * 2将方法的返回的数据自动使用ObjectMapper转换为JSON */ @ResponseBody @RequestMapping(\\\"/testAjax\\\") public Pets testAjax(Person p) { System.out.println(p); Pets pet =new Pets(\\\"Tom\\\",\\\"cat\\\"); return pet; } } \"]},\"2877\":{\"h\":\"前端使用Ajax请求\",\"t\":[\"更多Ajax的学习可以回顾: Ajax 注意:别忘了导入JQuery文件!!!\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> <script src=\\\"static/js/jquery-3.5.1.min.js\\\"></script> <script> $(function (){ $(\\\"#testAjaxBtn\\\").click(function (){ $.get(\\\"testAjax\\\",{pname:\\\"Tome\\\",page:\\\"18\\\"},function (result){ console.log(result) }); }) }) </script> </head> <body> <input type=\\\"button\\\" value=\\\"testAjax\\\" id=\\\"testAjaxBtn\\\"> </body> </html> \"]},\"2878\":{\"h\":\"@RestController注解\",\"t\":[\"相当于@Controller+@ResponseBody两个注解的结合，返回json数据不需要在方法前面加@ResponseBody注解了，但使用@RestController这个注解，就不能返回jsp,html页面，视图解析器无法解析jsp,html页面\",\"@RestController public class TestResponse { /* * @ResponseBody * 1方法的返回值不在作为界面跳转依据,而已直接作为返回的数据 * 2将方法的返回的数据自动使用ObjectMapper转换为JSON */ @RequestMapping(\\\"/testAjax\\\") public Pets testAjax(Person p) { System.out.println(p); Pets pet =new Pets(\\\"Tom\\\",\\\"cat\\\"); return pet; } } \"]},\"2879\":{\"h\":\"整合SpringMVC\",\"t\":[\"接下来将使用一个登录案例来整合前面学的SpringMVC和Mybatis等技术\"]},\"2880\":{\"h\":\"环境准备\"},\"2881\":{\"h\":\"数据源\",\"t\":[\"CREATE TABLE `userinfo` ( `uid` int NOT NULL AUTO_INCREMENT, `uname` varchar(32) NOT NULL, `upwd` varchar(32) NOT NULL, PRIMARY KEY (`uid`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci; \",\"INSERT INTO userinfo (uid, uname, upwd) VALUES(1, 'root', 'root'); INSERT INTO userinfo (uid, uname, upwd) VALUES(2, 'zhangsan', '123123'); \"]},\"2882\":{\"h\":\"环境准备\"},\"2883\":{\"h\":\"检查项目配置\",\"t\":[\"检查项目配置\"]},\"2884\":{\"h\":\"创建Maven web 模块\",\"t\":[\"创建MavenWeb模块\"]},\"2885\":{\"h\":\"删除多余的依赖配置\",\"t\":[\"<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.meturing</groupId> <artifactId>SpringMVC_02</artifactId> <packaging>war</packaging> <version>1.0-SNAPSHOT</version> </project> \"]},\"2886\":{\"h\":\"检查目录标记\",\"t\":[\"检查目录标记\"]},\"2887\":{\"h\":\"修改Web.xml\",\"t\":[\"修改Web.xml\"]},\"2888\":{\"h\":\"导入依赖\",\"t\":[\"导入工程的依赖文件:\"]},\"2889\":{\"h\":\"Spring相关依赖\",\"t\":[\"<!--Spring核心包--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.3.5</version> </dependency> <!--SpringAop切面--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>5.3.5</version> </dependency> <!--Aop联盟包--> <dependency> <groupId>aopalliance</groupId> <artifactId>aopalliance</artifactId> <version>1.0</version> </dependency> \"]},\"2890\":{\"h\":\"数据库相关依赖\",\"t\":[\"<!--德鲁特连接池--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.1.14</version> </dependency> <!--mysql连接驱动--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <!--SpringJDBC--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>5.3.18</version> </dependency> <!--ORM--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-orm</artifactId> <version>5.3.5</version> </dependency> <!--Spring事务控制--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>5.3.18</version> </dependency> \"]},\"2891\":{\"h\":\"日志/工具/测试\",\"t\":[\"<!--Apache Commons日志包--> <dependency> <groupId>commons-logging</groupId> <artifactId>commons-logging</artifactId> <version>1.2</version> </dependency> <!--log4j2 日志--> <dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-core</artifactId> <version>2.14.0</version> </dependency> <!--lombok--> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.26</version> </dependency> <!--JackSon--> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.14.2</version> </dependency> <!--Spring测试包--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>5.3.18</version> </dependency> <!--Junit5--> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.9.3</version> <scope>test</scope> </dependency> \"]},\"2892\":{\"h\":\"SpringMVC\",\"t\":[\"<!--SpringMVC包--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.3.18</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-web</artifactId> <version>5.3.18</version> </dependency> \"]},\"2893\":{\"h\":\"SERVLET和JSP\",\"t\":[\"<!--jsp--> <dependency> <groupId>javax.servlet.jsp</groupId> <artifactId>javax.servlet.jsp-api</artifactId> <version>2.3.3</version> </dependency> <!--servlet--> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>4.0.1</version> </dependency> \"]},\"2894\":{\"h\":\"Mybatis\",\"t\":[\"<!--mybatis--> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.9</version> </dependency> <!--Mybatis与Spring的整合包--> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>2.0.6</version> </dependency> \"]},\"2895\":{\"h\":\"添加配置文件\"},\"2896\":{\"h\":\"创建log4j配置文件\",\"t\":[\"推荐快速极简配置 :\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <Configuration status=\\\"INFO\\\"> <Appenders> <Console name=\\\"Console\\\" target=\\\"SYSTEM_ERR\\\"> <PatternLayout pattern=\\\"%d{YYYY-MM-dd HH:mm:ss} [%t] %-5p %c{1}:%L - %msg%n\\\" /> </Console> </Appenders> <Loggers> <Root level=\\\"INFO\\\"> <AppenderRef ref=\\\"Console\\\" /> </Root> </Loggers> </Configuration> \",\"更多详情可以了解 : Log4j日志框架\"]},\"2897\":{\"h\":\"创建数据源配置文件\",\"t\":[\"jdbc_driver=com.mysql.cj.jdbc.Driver jdbc_url=jdbc:mysql://192.168.1.188:3306/test?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai jdbc_username=root jdbc_password=root \"]},\"2898\":{\"h\":\"创建SpringMVC配置文件\",\"t\":[\"整体配置效果如下:\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/p http://www.springframework.org/schema/p/spring-p.xsd http://www.springframework.org/schema/c http://www.springframework.org/schema/c/spring-c.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd \\\"> <!--扫描controller--> <context:component-scan base-package=\\\"com.meturing.controller\\\"></context:component-scan> <!--这里配置三大组件--> <mvc:annotation-driven></mvc:annotation-driven> <!--视图解析器--> <bean class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"></bean> <!--配置静态资源放行--> <mvc:resources mapping=\\\"/static/**\\\" location=\\\"/static/\\\"></mvc:resources> </beans> \"]},\"2899\":{\"h\":\"新增声明空间\",\"t\":[\"注意我们需要新增: p / c / util / context / aop / tx / mvc 的声明空间,可以不用但是不能没有!\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/p http://www.springframework.org/schema/p/spring-p.xsd http://www.springframework.org/schema/c http://www.springframework.org/schema/c/spring-c.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd \\\"> </beans> \"]},\"2900\":{\"h\":\"扫描controller\",\"t\":[\"添加Controller层的扫描器,SpringMVC主要处理的就是Controller层\",\"<!--扫描controller--> <context:component-scan base-package=\\\"com.meturing.controller\\\"></context:component-scan> \",\"关于包扫描,你可能需要回顾 : 注解方式管理Bean\"]},\"2901\":{\"h\":\"配置三大组件\",\"t\":[\"<!--自动配置:处理器映射器/处理器适配器--> <mvc:annotation-driven></mvc:annotation-driven> <!--视图解析器--> <bean class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <property name=\\\"suffix\\\" value=\\\".jsp\\\" ></property> </bean> \",\"关于三大组件与执行原理,需要回顾: 执行流程与三大组件\"]},\"2902\":{\"h\":\"静态资源放行\",\"t\":[\"<!--配置静态资源放行--> <mvc:resources mapping=\\\"/static/**\\\" location=\\\"/static/\\\"></mvc:resources> \",\"为什么配置放行静态资源? 详见: 静态资源的放行管理\"]},\"2903\":{\"h\":\"创建Spring配置文件\",\"t\":[\"整体配置文件如下:\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/p http://www.springframework.org/schema/p/spring-p.xsd http://www.springframework.org/schema/c http://www.springframework.org/schema/c/spring-c.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd \\\"> <!--扫描service层--> <context:component-scan base-package=\\\"com.meturing.service\\\"></context:component-scan> <!--加载外部属性文件--> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\"></context:property-placeholder> <!--配置德鲁伊数据源--> <bean id=\\\"dataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"username\\\" value=\\\"${jdbc_username}\\\"></property> <property name=\\\"password\\\" value=\\\"${jdbc_password}\\\"></property> <property name=\\\"url\\\" value=\\\"${jdbc_url}\\\"></property> <property name=\\\"driverClassName\\\" value=\\\"${jdbc_driver}\\\"></property> </bean> <!--配置sqlSessionFactory--> <bean id=\\\"sessionFactory\\\" class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\"> <!--配置数据源--> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"></property> <!--POJO类的包扫描--> <property name=\\\"typeAliasesPackage\\\" value=\\\"com.meturing.pojo\\\"></property> </bean> <!--配置MapperScanner 扫描mapper.xml 和接口 将生成的Mapper对象放到容器中--> <bean id=\\\"mapperScannerConfigurer\\\" class=\\\"org.mybatis.spring.mapper.MapperScannerConfigurer\\\"> <!--配置SQLSessionFactory--> <property name=\\\"sqlSessionFactoryBeanName\\\" value=\\\"sessionFactory\\\"></property> <!--扫描mapper接口和映射文件--> <property name=\\\"basePackage\\\" value=\\\"com.meturing.mapper\\\"></property> </bean> <!--事务管理--> <!--配置事务管理器--> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"></property> </bean> <!--开启事务注解--> <tx:annotation-driven transaction-manager=\\\"transactionManager\\\"></tx:annotation-driven> </beans> \"]},\"2904\":{\"h\":\"新增声明空间\",\"t\":[\"与SpringMVC一样我们需要新增: p / c / util / context / aop / tx / mvc 的声明空间,可以不用但是不能没有!\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xmlns:c=\\\"http://www.springframework.org/schema/c\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/p http://www.springframework.org/schema/p/spring-p.xsd http://www.springframework.org/schema/c http://www.springframework.org/schema/c/spring-c.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd \\\"> </beans> \"]},\"2905\":{\"h\":\"扫描Service层\",\"t\":[\"Spring主要是面向Service层进行管理\",\"<!--扫描service层--> <context:component-scan base-package=\\\"com.meturing.service\\\"></context:component-scan> \"]},\"2906\":{\"h\":\"加载外部配置文件配置数据源\",\"t\":[\"开始扫描外部文件,配置数据源\",\"<!--加载外部属性文件--> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\"></context:property-placeholder> <!--配置德鲁伊数据源--> <bean id=\\\"dataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"username\\\" value=\\\"${jdbc_username}\\\"></property> <property name=\\\"password\\\" value=\\\"${jdbc_password}\\\"></property> <property name=\\\"url\\\" value=\\\"${jdbc_url}\\\"></property> <property name=\\\"driverClassName\\\" value=\\\"${jdbc_driver}\\\"></property> </bean> \",\"你可能需要了解 : 引入外部配置文件\"]},\"2907\":{\"h\":\"整合Mybatis\",\"t\":[\"在此之前我们回顾一下Mybatis的相关使用知识 :\",\"基础写法思路\",\"Spring整合Mybatis的整体思路如下:对于SqlSessionFactory对象 / SqlSession对象 / Mapper对象全部交给Spring去创建 .然后将创建的对象交给Service层即可.\",\"所以我们只需要关注SqlSessionFactory的创建和Mapper的扫描即可.\",\"<!--配置sqlSessionFactory--> <bean id=\\\"sessionFactory\\\" class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\"> <!--配置数据源--> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"></property> <!--POJO类的包扫描--> <property name=\\\"typeAliasesPackage\\\" value=\\\"com.meturing.pojo\\\"></property> </bean> <!--配置MapperScanner 扫描mapper.xml 和接口 将生成的Mapper对象放到容器中--> <bean id=\\\"mapperScannerConfigurer\\\" class=\\\"org.mybatis.spring.mapper.MapperScannerConfigurer\\\"> <!--配置SQLSessionFactory--> <property name=\\\"sqlSessionFactoryBeanName\\\" value=\\\"sessionFactory\\\"></property> <!--扫描mapper接口和映射文件--> <property name=\\\"basePackage\\\" value=\\\"com.meturing.mapper\\\"></property> </bean> \"]},\"2908\":{\"h\":\"配置Spring事务\",\"t\":[\"<!--事务管理--> <!--配置事务管理器--> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"></property> </bean> <!--开启事务注解--> <tx:annotation-driven transaction-manager=\\\"transactionManager\\\"></tx:annotation-driven> \",\"你可能需要回顾 : XML方式管理事务\"]},\"2909\":{\"h\":\"配置Web.XML文件\"},\"2910\":{\"h\":\"整合SpringMVC\",\"t\":[\"<!--配置SpringMVC--> <servlet> <servlet-name>dispatcherServlet</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <init-param> <param-name>contextConfigLocation</param-name> <param-value>classpath:springMVC.xml</param-value> </init-param> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>dispatcherServlet</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> \",\"你需要知道的知识点 : 在web.xml中配置前端控制器\"]},\"2911\":{\"h\":\"整合Spring\",\"t\":[\"Spring的核心容器需要放置到Application域中,通过监听器监听Javaweb项目中ServletContext创建的时候,就创建一个Spring容器,并放置到ServletContext对象中\",\"关于域对象,你需要知道 : 域对象\",\"<!--配置Spring--> <context-param> <param-name>contextConfigLocation</param-name> <param-value>classpath:applicationContext.xml</param-value> </context-param> <listener> <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> </listener> \",\"可以手写监听器,Spring帮我们提供了ContextLoaderListener监听器\",\"关于监听器,你需要知道的: Application域监听器\"]},\"2912\":{\"h\":\"配置编码过滤器\",\"t\":[\"<!--配置编码过滤器--> <filter> <filter-name>characterEncodingFilter</filter-name> <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> <init-param> <param-name>encoding</param-name> <param-value>UTF-8</param-value> </init-param> </filter> <filter-mapping> <filter-name>characterEncodingFilter</filter-name> <url-pattern>/*</url-pattern> </filter-mapping> \",\"关于过滤器,你可能需要知道 : 过滤器和监听器\"]},\"2913\":{\"h\":\"实现业务代码\"},\"2914\":{\"h\":\"创建前端页面\",\"t\":[\"index.jsp\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <form action=\\\"login\\\" method=\\\"post\\\"> <input type=\\\"text\\\" name=\\\"username\\\"> <input type=\\\"password\\\" name=\\\"password\\\"> <input type=\\\"submit\\\" value=\\\"登录\\\"> </form> </body> </html> \",\"success.jsp\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> 登录成功 </body> </html> \",\"fail.jsp\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> 登录失败 </body> </html> \"]},\"2915\":{\"h\":\"创建Pojo层\",\"t\":[\"@AllArgsConstructor @NoArgsConstructor @Data @ToString public class User implements Serializable { private String uId; private String uName; private String uPwd; } \"]},\"2916\":{\"h\":\"创建Conteoller层\",\"t\":[\"@Controller public class UserController { @Autowired private UserService userService; @RequestMapping(\\\"/login\\\") public String getLogin(String username,String password) { User user = userService.getLogin(username,password); if (user==null){ return \\\"/fail\\\"; }else { return \\\"/success\\\"; } } } \"]},\"2917\":{\"h\":\"创建Service层\",\"t\":[\"public interface UserService { User getLogin(String username, String password); } \",\"@Service @Transactional public class UserServiceImpl implements UserService { @Autowired private UserMapper userMapper; public User getLogin(String username, String password) { return userMapper.getLogin(username,password); } } \"]},\"2918\":{\"h\":\"创建Mapper层\",\"t\":[\"UserMapper.java\",\"public interface UserMapper{ User getLogin(String username, String password); } \",\"UserMapper.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTDMapper3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"com.meturing.mapper.UserMapper\\\"> <select id=\\\"getLogin\\\" resultType=\\\"user\\\"> select * from userinfo where uname=#{param1} and upwd=#{param2} </select> </mapper> \",\"关于Mybatis的Mapper使用,您可能需要回顾: Mybatis代理模式的开发\"]},\"2919\":{\"h\":\"作用域传参\"},\"2920\":{\"h\":\"回顾作用域\",\"t\":[\"在之前的学习中,我们了解了作用域的使用,可以回顾一下: 域对象\"]},\"2921\":{\"h\":\"PageContext对象\",\"t\":[\"作用域范围: 当前jsp页面内有效\"]},\"2922\":{\"h\":\"Request对象\",\"t\":[\"作用域范围: 一次请求内。 作用: 解决了一次请求内的资源的数据共享问题\"]},\"2923\":{\"h\":\"Session对象\",\"t\":[\"作用域范围: 一次会话内有效。 说明: 浏览器不关闭,并且后台的session不失效，在任意请求中都可以获取到同一个session对象。 作用: 解决了一个用户不同请求的数据共享问题。\"]},\"2924\":{\"h\":\"Application(ServletContext)对象\",\"t\":[\"作用域范围: 一次会话内有效。 说明: 浏览器不关闭,并且后台的session不失效，在任意请求中都可以获取到同一个session对象。 作用: 解决了一个用户不同请求的数据共享问题。\"]},\"2925\":{\"h\":\"环境准备\",\"t\":[\"当前项目运行在上一个案例: 整合SpringMVC 的环境上\",\"新增showDataPage.jsp\",\"<%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <table border=\\\"1\\\" cellspacing=\\\"0\\\"> <thead> <tr> <td>Scope</td> <td>message</td> <td>uname</td> </tr> </thead> <tbody> <tr> <td>requestScope</td> <td>${requestScope.message}</td> <td>${requestScope.users[0]}</td> </tr> <tr> <td>sessionScope</td> <td>${sessionScope.message}</td> <td>${sessionScope.users[0]}</td> </tr> <tr> <td>applicationScope</td> <td>${applicationScope.message}</td> <td>${applicationScope.users[0]}</td> </tr> <tr> <td>requestParam</td> <td>${param.message}</td> <td>${applicationScope.users[0]}</td> </tr> </tbody> </table> </body> </html> \"]},\"2926\":{\"h\":\"传统方式传递参数\",\"t\":[\"注意 : 在SpringMVC中,request,session 这两个域直接放在参数列表上即可,SpringMVC就可以给我们注入,ServletContext对象(application域) 不能直接放在参数列表上的\",\"构建ScopeController.java\",\"@Controller public class ScopeController { @Autowired UserService userService; @RequestMapping(\\\"/setScopeByServlet\\\") public String setScopeByServlet(HttpServletRequest request, HttpSession session){ List<User> allUser = userService.getAllUser(); //存储到request域中:本次请求期间有效 request.setAttribute(\\\"message\\\", \\\"reqMessage\\\"); request.setAttribute(\\\"users\\\", allUser); //存储到session域中:本次会话期间有效 session.setAttribute(\\\"message\\\", \\\"sessionMessage\\\"); session.setAttribute(\\\"users\\\", allUser); //存储到application域中:本次服务运行期间都有效 ServletContext application = request.getServletContext(); application.setAttribute(\\\"message\\\", \\\"applicationMessage\\\"); application.setAttribute(\\\"users\\\", allUser); return \\\"/showDataPage\\\"; } } \",\"测试直接访问: http://localhost:8080/SpringMVC_02/setScopeByServlet我们可以看到requestScope/sessionScope/applicationScope 都正常获取数据\",\"测试直接访问: http://localhost:8080/SpringMVC_02/showDataPage.jsp我们可以看到sessionScope/applicationScope 都正常获取数据,说明requestScope仅限于单次请求\",\"测试关掉浏览器后,再直接访问: http://localhost:8080/SpringMVC_02/showDataPage.jsp我们可以看到applicationScope 都正常获取数据,说明sessionScope仅限于单次会话\"]},\"2927\":{\"h\":\"使用Model传递参数\"},\"2928\":{\"h\":\"请求转发\",\"t\":[\"model对象使用addAttribute存储数据,主要是对请求域传递数据进行了API上的封装降低controller和Servlet之间的耦合度.\",\"构建ScopeController.java\",\"@Controller public class ScopeController { @Autowired UserService userService; @RequestMapping(\\\"/setScopeByModel\\\") public String setScopeByModel(Model model){ List<User> allUser = userService.getAllUser(); //存储到model中:本次请求期间有效 model.addAttribute(\\\"message\\\", \\\"reqMessage\\\"); model.addAttribute(\\\"users\\\", allUser); return \\\"/showDataPage\\\"; } } \",\"测试直接访问: http://localhost:8080/SpringMVC_02/setScopeByModel 我们看到: 只有requestScope 正常获取数据\"]},\"2929\":{\"h\":\"重定向的特殊问题\",\"t\":[\"尝试修改ScopeController.java为重定向\",\"@Controller public class ScopeController { @Autowired UserService userService; @RequestMapping(\\\"/setScopeByModel\\\") public String setScopeByModel(Model model){ List<User> allUser = userService.getAllUser(); //存储到model中:本次请求期间有效 model.addAttribute(\\\"message\\\", \\\"reqMessage\\\"); model.addAttribute(\\\"users\\\", allUser); return \\\"redirect:/showDataPage.jsp\\\"; } } \",\"测试直接访问: http://localhost:8080/SpringMVC_02/setScopeByModel 我们发现: 当前requestScope/sessionScope/applicationScope 都无法获取数据,但由于Url中存在参数,requestParam获取到了值\",\"注意 : 重定向下,没法使用model传递域中的数据, model中的字符串类型的键值对信息会转换为请求参数,转发给目标组件\"]},\"2930\":{\"h\":\"使用ModelAndView传递参数\"},\"2931\":{\"h\":\"请求转发\",\"t\":[\"ScopeController.java\",\"@Controller public class ScopeController { @Autowired UserService userService; @RequestMapping(\\\"/setScopeByModelAndView\\\") public ModelAndView setScopeByModelAndView() { List<User> allUser = userService.getAllUser(); ModelAndView modelAndView = new ModelAndView(); //设置Model Map<String, Object> model = modelAndView.getModel(); model.put(\\\"message\\\", \\\"reqMessage\\\"); model.put(\\\"users\\\", allUser); //设置视图 modelAndView.setViewName(\\\"/showDataPage\\\"); return modelAndView; } } \",\"测试直接访问: `http://localhost:8080/SpringMVC_02/setScopeByModelAndView\"]},\"2932\":{\"h\":\"重定向问题的特殊问题\",\"t\":[\"同 上述Moel传递时的重定向问题\"]},\"2933\":{\"h\":\"Coder Notes\"},\"2934\":{\"h\":\"00 Templates\"},\"2935\":{\"h\":\"02 初级开发工程师\"},\"2936\":{\"h\":\"01 Java S E阶段\"},\"2937\":{\"h\":\"05 高级开发工程师\"},\"2938\":{\"h\":\"04 中级开发工程师\"},\"2939\":{\"h\":\"03 计算机基础知识\"},\"2940\":{\"h\":\"06 提高阶段\"},\"2941\":{\"h\":\"07 项目实践\"},\"2942\":{\"h\":\"10 大数据进阶\"},\"2943\":{\"h\":\"08 故障分析\"},\"2944\":{\"h\":\"11 A I方向\"},\"2945\":{\"h\":\"12 其他语言\"},\"2946\":{\"h\":\"09 手撕算法\"},\"2947\":{\"h\":\"01 第一阶段\"},\"2948\":{\"h\":\"A 基础\"},\"2949\":{\"h\":\"B 进阶\"},\"2950\":{\"h\":\"C 开发必备工具\"},\"2951\":{\"h\":\"D J D K新特性\"},\"2952\":{\"h\":\"01 阿里代码规范\"},\"2953\":{\"h\":\"02 数据库和 J D B C\"},\"2954\":{\"h\":\"03 前端技术\"},\"2955\":{\"h\":\"04 Java E E技术\"},\"2956\":{\"h\":\"05 基础框架\"},\"2957\":{\"h\":\"01 Java概念\"},\"2958\":{\"h\":\"02 Java基础知识\"},\"2959\":{\"h\":\"03 Java基础语法\"},\"2960\":{\"h\":\"01 异常处理\"},\"2961\":{\"h\":\"03 集合\"},\"2962\":{\"h\":\"02 常用类\"},\"2963\":{\"h\":\"04 I O\"},\"2964\":{\"h\":\"05 多线程\"},\"2965\":{\"h\":\"06 网络编程\"},\"2966\":{\"h\":\"07 J Unit 注解 枚举\"},\"2967\":{\"h\":\"08 反射\"},\"2968\":{\"h\":\"01 I D E A\"},\"2969\":{\"h\":\"02 Maven\"},\"2970\":{\"h\":\"03 Git\"},\"2971\":{\"h\":\"05 V Mware网络设置\"},\"2972\":{\"h\":\"01 J D K8新特性\"},\"2973\":{\"h\":\"02 J D K9 J D K17新特性\"},\"2974\":{\"h\":\"01 My S Q L\"},\"2975\":{\"h\":\"04 Obsidian\"},\"2976\":{\"h\":\"02 J D B C\"},\"2977\":{\"h\":\"03 Oracle\"},\"2978\":{\"h\":\"01 H T M L\"},\"2979\":{\"h\":\"03 Java Script\"},\"2980\":{\"h\":\"02 C S S\"},\"2981\":{\"h\":\"04 J Query\"},\"2982\":{\"h\":\"05 Echarts动态图表\"},\"2983\":{\"h\":\"06 Boot Strap\"},\"2984\":{\"h\":\"07 E S6与 Node\"},\"2985\":{\"h\":\"08 Vue\"},\"2986\":{\"h\":\"09 Thymeleaf\"},\"2987\":{\"h\":\"10 前端架构拓展\"},\"2988\":{\"h\":\"01 Tomcat\"},\"2989\":{\"h\":\"02 H T T P协议\"},\"2990\":{\"h\":\"03 Servlet\"},\"2991\":{\"h\":\"04 J S P\"},\"2992\":{\"h\":\"05 过滤器和监听器\"},\"2993\":{\"h\":\"06 Ajax\"},\"2994\":{\"h\":\"02 My Batis Plus\"},\"2995\":{\"h\":\"01 Mybatis基础\"},\"2996\":{\"h\":\"03 Spring基础\"},\"2997\":{\"h\":\"04 Spring M V C\"},\"2998\":{\"h\":\"05 Spring Boot\"},\"2999\":{\"h\":\"06 Spring J P A\"},\"3000\":{\"h\":\"07 S L F4 J日志框架\"},\"3001\":{\"h\":\"02 Collection接口\"},\"3002\":{\"h\":\"01 前言\"},\"3003\":{\"h\":\"03 泛型\"},\"3004\":{\"h\":\"04 List接口\"},\"3005\":{\"h\":\"05 比较器\"},\"3006\":{\"h\":\"06 Set接口\"},\"3007\":{\"h\":\"07 Map接口\"},\"3008\":{\"h\":\"08 Collections工具类\"},\"3009\":{\"h\":\"09 数据结构 栈\"},\"3010\":{\"h\":\"10 同步类容器\"},\"3011\":{\"h\":\"11 并发容器\"},\"3012\":{\"h\":\"12 C O W容器\"},\"3013\":{\"h\":\"13 队列\"},\"3014\":{\"h\":\"01 包装类\"},\"3015\":{\"h\":\"03 Math类\"},\"3016\":{\"h\":\"02 日期相关类\"},\"3017\":{\"h\":\"04 Random类\"},\"3018\":{\"h\":\"01 File类\"},\"3019\":{\"h\":\"06 String Builder与 String Buffer类\"},\"3020\":{\"h\":\"02 I O流\"},\"3021\":{\"h\":\"03 序列化\"},\"3022\":{\"h\":\"05 String类\"},\"3023\":{\"h\":\"02 创建多线程的方式\"},\"3024\":{\"h\":\"01 初识多线程\"},\"3025\":{\"h\":\"03 线程的生命周期\"},\"3026\":{\"h\":\"04 线程常见方法\"},\"3027\":{\"h\":\"05 线程安全\"},\"3028\":{\"h\":\"06 线程通信\"},\"3029\":{\"h\":\"01 初识网络编程\"},\"3030\":{\"h\":\"02 模拟通讯\"},\"3031\":{\"h\":\"01 Junit单元测试\"},\"3032\":{\"h\":\"00 测试的概念\"},\"3033\":{\"h\":\"02 注解\"},\"3034\":{\"h\":\"03 枚举\"},\"3035\":{\"h\":\"01 初识反射\"},\"3036\":{\"h\":\"02 常用 A P I\"},\"3037\":{\"h\":\"03 面试题\"},\"3038\":{\"h\":\"00 入门体验\"},\"3039\":{\"h\":\"01 基本操作\"},\"3040\":{\"h\":\"02 编辑器基础知识\"},\"3041\":{\"h\":\"03 代码补全\"},\"3042\":{\"h\":\"04 重构\"},\"3043\":{\"h\":\"05 代码辅助\"},\"3044\":{\"h\":\"06 导航\"},\"3045\":{\"h\":\"01 初识 Maven\"},\"3046\":{\"h\":\"07 运行并调试\"},\"3047\":{\"h\":\"02 Maven的使用\"},\"3048\":{\"h\":\"03 Maven的核心概念\"},\"3049\":{\"h\":\"04 继承与聚合\"},\"3050\":{\"h\":\"01 初识 Git\"},\"3051\":{\"h\":\"02 Git本地库实战\"},\"3052\":{\"h\":\"03 Git Hub远程库常用操作\"},\"3053\":{\"h\":\"04 I D E A集成 Git\"},\"3054\":{\"h\":\"05 Git工作流与私服\"},\"3055\":{\"h\":\"01 接口增强\"},\"3056\":{\"h\":\"03 方法引用\"},\"3057\":{\"h\":\"02 函数式接口\"},\"3058\":{\"h\":\"05 Optional类\"},\"3059\":{\"h\":\"04 Stream A P I\"},\"3060\":{\"h\":\"06 新时间日期 A P I\"},\"3061\":{\"h\":\"07 其他新特性\"},\"3062\":{\"h\":\"01 概念与安装\"},\"3063\":{\"h\":\"02 My S Q L入门\"},\"3064\":{\"h\":\"03 D D L和 D M L\"},\"3065\":{\"h\":\"04 约束策略\"},\"3066\":{\"h\":\"05 D Q L（单表）\"},\"3067\":{\"h\":\"06 D Q L（多表）\"},\"3068\":{\"h\":\"07 函数\"},\"3069\":{\"h\":\"08 T C L和 D C L\"},\"3070\":{\"h\":\"09 索引和视图\"},\"3071\":{\"h\":\"10 存储过程\"},\"3072\":{\"h\":\"11 S Q L优化\"},\"3073\":{\"h\":\"12 常见问题解决\"},\"3074\":{\"h\":\"01 认识 Obsidian\"},\"3075\":{\"h\":\"03 Obsidian双向链接\"},\"3076\":{\"h\":\"04 Obsidian技巧与设置\"},\"3077\":{\"h\":\"02 Mark Down\"},\"3078\":{\"h\":\"05 Obsidian的插件\"},\"3079\":{\"h\":\"06 Obsidian的搜索与查询\"},\"3080\":{\"h\":\"01 J D B C初识\"},\"3081\":{\"h\":\"02 简单的 J D B C Demo\"},\"3082\":{\"h\":\"04 批处理与事务\"},\"3083\":{\"h\":\"03 S Q L注入和预编译\"},\"3084\":{\"h\":\"05 J D B C的 A P I整理\"},\"3085\":{\"h\":\"06 D A O\"},\"3086\":{\"h\":\"07 连接池的使用\"},\"3087\":{\"h\":\"08 Log4j日志框架\"},\"3088\":{\"h\":\"02 H T M L标签\"},\"3089\":{\"h\":\"01 初识 H T M L\"},\"3090\":{\"h\":\"03 From表单\"},\"3091\":{\"h\":\"04 H T M L5新特性\"},\"3092\":{\"h\":\"02 数据类型和运算符\"},\"3093\":{\"h\":\"01 初识 Java Script\"},\"3094\":{\"h\":\"03 数组的使用\"},\"3095\":{\"h\":\"04 对象和原型\"},\"3096\":{\"h\":\"05 事件\"},\"3097\":{\"h\":\"06 B O M编程\"},\"3098\":{\"h\":\"01 初识 C S S\"},\"3099\":{\"h\":\"07 D O M编程\"},\"3100\":{\"h\":\"02 选择器\"},\"3101\":{\"h\":\"03 浮动\"},\"3102\":{\"h\":\"05 盒子模型\"},\"3103\":{\"h\":\"04 定位\"},\"3104\":{\"h\":\"01 初识 J Query\"},\"3105\":{\"h\":\"02 J Query选择器\"},\"3106\":{\"h\":\"01 初识 Boot Strap\"},\"3107\":{\"h\":\"03 J Query中的 D O M编程\"},\"3108\":{\"h\":\"05 表单验证与正则表达式\"},\"3109\":{\"h\":\"04 动画效果的使用\"},\"3110\":{\"h\":\"02 Boot Strap容器与栅格系统\"},\"3111\":{\"h\":\"03 Boot Strap开发案例\"},\"3112\":{\"h\":\"01 初识 Vue\"},\"3113\":{\"h\":\"02 Vue指令\"},\"3114\":{\"h\":\"04 修饰符\"},\"3115\":{\"h\":\"05 脚手架\"},\"3116\":{\"h\":\"03 Vue Demo\"},\"3117\":{\"h\":\"06 组件\"},\"3118\":{\"h\":\"07 路由\"},\"3119\":{\"h\":\"09 Vue中的 Ajax\"},\"3120\":{\"h\":\"08 生命周期\"},\"3121\":{\"h\":\"01 Java E E简介\"},\"3122\":{\"h\":\"02 Tomcat的安装与结构\"},\"3123\":{\"h\":\"03 Tomcat部署项目\"},\"3124\":{\"h\":\"04 Tomcat的配置与组件\"},\"3125\":{\"h\":\"05 Java Web项目的开发与部署\"},\"3126\":{\"h\":\"01 初识 Servlet\"},\"3127\":{\"h\":\"02 Http Servlet Request和 Http Servlet\"},\"3128\":{\"h\":\"03 乱码的处理\"},\"3129\":{\"h\":\"04 继承结构与生命周期\"},\"3130\":{\"h\":\"05 Servlet Context和 Servlect Config\"},\"3131\":{\"h\":\"06 Url Pattern的匹配规则与注解模式\"},\"3132\":{\"h\":\"07 请求转发和响应重定向\"},\"3133\":{\"h\":\"08 路径问题\"},\"3134\":{\"h\":\"09 会话管理 Cookie和 Session\"},\"3135\":{\"h\":\"10 域对象\"},\"3136\":{\"h\":\"01 J S P入门\"},\"3137\":{\"h\":\"02 前后端分离\"},\"3138\":{\"h\":\"03 J S P注意事项\"},\"3139\":{\"h\":\"04 J S P指令标签\"},\"3140\":{\"h\":\"05 J S P的内置对象\"},\"3141\":{\"h\":\"06 E L表达式的使用\"},\"3142\":{\"h\":\"01 初识过滤器\"},\"3143\":{\"h\":\"07 J S T L\"},\"3144\":{\"h\":\"08 M V C模式的引入\"},\"3145\":{\"h\":\"02 过滤器的使用\"},\"3146\":{\"h\":\"03 过滤器的应用案例\"},\"3147\":{\"h\":\"04 初识监听器\"},\"3148\":{\"h\":\"05 监听器开发案例\"},\"3149\":{\"h\":\"01 初识 Ajax\"},\"3150\":{\"h\":\"02 数据格式\"},\"3151\":{\"h\":\"03 J Query与 Ajax实现\"},\"3152\":{\"h\":\"04 Jsonp跨域处理\"},\"3153\":{\"h\":\"05 三级联动案例开发\"},\"3154\":{\"h\":\"01 My Batis Plus快速上手\"},\"3155\":{\"h\":\"01 Mybatis初识\"},\"3156\":{\"h\":\"02 Base Mapper与 I Service\"},\"3157\":{\"h\":\"03 常用注解与条件构造器\"},\"3158\":{\"h\":\"02 搭建 Mybatis项目环境\"},\"3159\":{\"h\":\"04 常用插件\"},\"3160\":{\"h\":\"03 Mybatis配置\"},\"3161\":{\"h\":\"04 My Batis普通模式的开发\"},\"3162\":{\"h\":\"05 Mybatis代理模式的开发\"},\"3163\":{\"h\":\"07 Mybatis多表查询\"},\"3164\":{\"h\":\"06 Mybatis动态 S Q L\"},\"3165\":{\"h\":\"08 Mybatis缓存\"},\"3166\":{\"h\":\"09 Mybatis逆向工程与其他配置\"},\"3167\":{\"h\":\"01 初识 Spring\"},\"3168\":{\"h\":\"02 基于 X M L管理 Bean\"},\"3169\":{\"h\":\"03 Bean的生命周期\"},\"3170\":{\"h\":\"04 Bean的自动注入\"},\"3171\":{\"h\":\"05 引入外部配置文件\"},\"3172\":{\"h\":\"06 注解方式管理 Bean\"},\"3173\":{\"h\":\"07 静态代理与动态代理\"},\"3174\":{\"h\":\"08 A O P面向切面编程\"},\"3175\":{\"h\":\"09 J D B C Template\"},\"3176\":{\"h\":\"10 Spring的事务管理\"},\"3177\":{\"h\":\"01 概念引入与环境准备\"},\"3178\":{\"h\":\"02 框架搭建与注意事项\"},\"3179\":{\"h\":\"03 执行流程与三大组件\"},\"3180\":{\"h\":\"04 静态资源的放行管理\"},\"3181\":{\"h\":\"06 请求参数的处理\"},\"3182\":{\"h\":\"05 路径映射与 R E S Tful风格\"},\"3183\":{\"h\":\"07 常见注解\"},\"3184\":{\"h\":\"08 响应处理\"},\"3185\":{\"h\":\"09 整合 Spring M V C\"},\"3186\":{\"h\":\"10 作用域传参\"}},\"dirtCount\":0,\"index\":[[\"扫描mapper接口和映射文件\",{\"1\":{\"2903\":1,\"2907\":1}}],[\"扫描mapper\",{\"1\":{\"2903\":1,\"2907\":1}}],[\"扫描service层\",{\"0\":{\"2905\":1},\"1\":{\"2903\":1,\"2905\":1}}],[\"扫描controller\",{\"0\":{\"2900\":1},\"1\":{\"2898\":1,\"2900\":1}}],[\"扫描指定包下面的所有实体类\",{\"1\":{\"2590\":1,\"2591\":1}}],[\"扫描指定包下所有的接口\",{\"1\":{\"2374\":1}}],[\"扫描指定目录下的mapper接口\",{\"1\":{\"2374\":1}}],[\"德鲁特连接池\",{\"1\":{\"2890\":1}}],[\"德鲁伊连接池\",{\"1\":{\"2582\":1,\"2665\":2,\"2756\":1}}],[\"风格\",{\"1\":{\"2843\":1}}],[\"风险低\",{\"1\":{\"919\":1}}],[\"雅虎提供的web服务也是rest风格的\",{\"1\":{\"2823\":1}}],[\"宠物2\",{\"1\":{\"2800\":1,\"2801\":3}}],[\"宠物1\",{\"1\":{\"2800\":1,\"2801\":3}}],[\"羽毛球\",{\"1\":{\"2796\":1}}],[\"足球\",{\"1\":{\"2796\":1}}],[\"篮球\",{\"1\":{\"2796\":1}}],[\"熟练\",{\"0\":{\"2794\":1},\"1\":{\"2841\":1}}],[\"熟悉\",{\"0\":{\"2704\":1}}],[\"件\",{\"1\":{\"2780\":1}}],[\"件名中包含\",{\"1\":{\"1198\":1}}],[\"器\",{\"1\":{\"2780\":1}}],[\"适\",{\"1\":{\"2780\":1}}],[\"适合读多写少的情况\",{\"1\":{\"313\":1}}],[\"适合特定场合\",{\"1\":{\"313\":1}}],[\"架构\",{\"1\":{\"2740\":1}}],[\"架设在各个大洲\",{\"1\":{\"705\":1}}],[\"架设在internet上\",{\"1\":{\"705\":1}}],[\"架设在当前局域网环境下\",{\"1\":{\"705\":1}}],[\"挂起记得b事务不能再操作同一张表\",{\"1\":{\"2735\":1}}],[\"挂载函数\",{\"1\":{\"1689\":1}}],[\"挂载点\",{\"1\":{\"1614\":1,\"1616\":1,\"1617\":1}}],[\"挂载父类打包的类型\",{\"1\":{\"714\":1,\"715\":1}}],[\"譬如在这里\",{\"1\":{\"2728\":1}}],[\"里声明了使用事务\",{\"1\":{\"2732\":1}}],[\"里边的同一个事务去执行\",{\"1\":{\"2728\":1}}],[\"里调用了b\",{\"1\":{\"2726\":1}}],[\"里面\",{\"1\":{\"2645\":1}}],[\"里面定义的程序点具体要做的操作\",{\"1\":{\"2623\":1}}],[\"里面文字可见\",{\"1\":{\"1333\":1}}],[\"里面如果只有一个框架用frame标签\",{\"1\":{\"1322\":1}}],[\"里面存放的是上次查询的结果\",{\"1\":{\"1137\":1}}],[\"里面可以看到刚刚设置的信息\",{\"1\":{\"726\":1}}],[\"里面有一个抽象方法叫compareto\",{\"1\":{\"431\":1}}],[\"里面的内容占多大\",{\"1\":{\"1512\":1}}],[\"里面的属性和方法都是被static修饰\",{\"1\":{\"300\":1}}],[\"里面的代码\",{\"1\":{\"19\":1}}],[\"里面又维护了prev\",{\"1\":{\"261\":1}}],[\"里面包含了上面两个js文件的内容并惊醒了代码压缩\",{\"1\":{\"114\":1}}],[\"里面所有的模块都是开源免费的\",{\"1\":{\"90\":1}}],[\"掌握\",{\"1\":{\"2699\":2}}],[\"√\",{\"1\":{\"2693\":6}}],[\"致a再读自己的工资时工资变为\",{\"1\":{\"2692\":1}}],[\"致使非法数据侵入系统\",{\"1\":{\"1237\":1}}],[\"余额增加至150\",{\"1\":{\"2690\":1,\"2691\":1}}],[\"脏数据\",{\"1\":{\"2690\":2}}],[\"脏读\",{\"0\":{\"2690\":1},\"1\":{\"1112\":1,\"2693\":1}}],[\"情景五\",{\"0\":{\"2659\":1}}],[\"情景四\",{\"0\":{\"2658\":1}}],[\"情景三\",{\"0\":{\"2657\":1}}],[\"情景二\",{\"0\":{\"2656\":1}}],[\"情景一\",{\"0\":{\"2655\":1}}],[\"抛出的异常捕捉\",{\"0\":{\"2653\":1}}],[\"抛出异常\",{\"1\":{\"21\":2,\"34\":1,\"364\":1,\"853\":1}}],[\"处\",{\"1\":{\"2780\":1}}],[\"处处生效\",{\"1\":{\"2635\":1}}],[\"处理和传输资源状态\",{\"1\":{\"2823\":1}}],[\"处理映射器\",{\"1\":{\"2780\":1}}],[\"处理器\",{\"0\":{\"2773\":1}}],[\"处理器适配器\",{\"0\":{\"2772\":1},\"1\":{\"2773\":1,\"2901\":1}}],[\"处理器映射器\",{\"0\":{\"2771\":1},\"1\":{\"2901\":1}}],[\"处理一对一\",{\"1\":{\"2425\":1}}],[\"处理复杂数据比较麻烦\",{\"1\":{\"2116\":1}}],[\"处理application域对象中的数据添加\",{\"1\":{\"2073\":1,\"2085\":1}}],[\"处理application对象创建和销毁\",{\"1\":{\"2073\":1,\"2084\":1}}],[\"处理session对象钝化和活化状态接口\",{\"1\":{\"2072\":1,\"2082\":1}}],[\"处理session对象监听器绑定和解绑定接口\",{\"1\":{\"2072\":1,\"2081\":1}}],[\"处理session对象创建和销毁\",{\"1\":{\"2072\":1,\"2079\":1}}],[\"处理session域对象中的数据添加\",{\"1\":{\"2072\":1,\"2080\":1}}],[\"处理域对象中的数据添加\",{\"1\":{\"2071\":1}}],[\"处理request对象创建和销毁\",{\"1\":{\"2071\":1}}],[\"处理编码\",{\"1\":{\"1994\":1}}],[\"处理请求\",{\"1\":{\"1930\":1}}],[\"处理起来相当的麻烦\",{\"1\":{\"1928\":1}}],[\"处理特点\",{\"0\":{\"1855\":1,\"1859\":1}}],[\"处理客户端请求\",{\"1\":{\"1817\":1}}],[\"处理post请求乱码\",{\"1\":{\"1811\":1}}],[\"处理成新的解析树\",{\"1\":{\"1250\":1}}],[\"处理结果\",{\"1\":{\"1210\":1,\"1215\":1}}],[\"处理\",{\"1\":{\"850\":1}}],[\"处理响应\",{\"1\":{\"546\":1}}],[\"处理流程\",{\"0\":{\"1854\":1,\"1858\":1,\"1863\":1}}],[\"处理流\",{\"1\":{\"418\":1}}],[\"处理超时未响应的请求等\",{\"1\":{\"355\":1}}],[\"织入包\",{\"1\":{\"2629\":1}}],[\"织入\",{\"0\":{\"2626\":1},\"1\":{\"2624\":1,\"2627\":1}}],[\"环绕通知\",{\"0\":{\"2644\":1},\"1\":{\"2623\":1,\"2648\":1}}],[\"环境准备\",{\"0\":{\"2535\":1,\"2594\":1,\"2614\":1,\"2628\":1,\"2662\":1,\"2742\":1,\"2861\":1,\"2880\":1,\"2882\":1,\"2925\":1}}],[\"环境中使用\",{\"1\":{\"2531\":1}}],[\"环境变量\",{\"1\":{\"2374\":1}}],[\"环境搭建\",{\"0\":{\"724\":1}}],[\"盖棺定论\",{\"1\":{\"2623\":1}}],[\"死活不要事务的\",{\"0\":{\"2735\":1}}],[\"死于非命\",{\"1\":{\"2623\":1}}],[\"死循环\",{\"1\":{\"279\":1}}],[\"寿终正寝\",{\"1\":{\"2623\":1}}],[\"典型的包括方法调用\",{\"1\":{\"2621\":1}}],[\"典型就是\",{\"1\":{\"227\":2}}],[\"饭后洗碗\",{\"1\":{\"2615\":1}}],[\"饭前洗手\",{\"1\":{\"2615\":1}}],[\"餐后洗碗\",{\"1\":{\"2612\":1}}],[\"餐后洗碗~\",{\"1\":{\"2609\":1}}],[\"餐前洗手\",{\"1\":{\"2612\":1}}],[\"餐前洗手~\",{\"1\":{\"2609\":1}}],[\"归属\",{\"1\":{\"2607\":1}}],[\"归还连接\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"陈诉总结\",{\"1\":{\"2605\":1}}],[\"辩解\",{\"1\":{\"2605\":1}}],[\"搭配qualifier指定注入的实例id\",{\"1\":{\"2596\":1}}],[\"搭配\",{\"1\":{\"2593\":1}}],[\"搭建\",{\"0\":{\"3158\":1}}],[\"搭建框架\",{\"0\":{\"2755\":1}}],[\"搭建bootstrap\",{\"0\":{\"1560\":1}}],[\"搭建mybatis项目环境\",{\"0\":{\"2261\":1},\"1\":{\"215\":1}}],[\"遵循html转义\",{\"1\":{\"2560\":1}}],[\"遵循html转义<\",{\"1\":{\"2560\":1}}],[\"遵循见名知意\",{\"1\":{\"2385\":1,\"2394\":1,\"2398\":1}}],[\"懒加载\",{\"0\":{\"2555\":1},\"1\":{\"2552\":1}}],[\"懒加载的配置\",{\"1\":{\"2434\":1}}],[\"研发人员一般使用的接口\",{\"1\":{\"2550\":1}}],[\"丰富的功能封装\",{\"0\":{\"2527\":1}}],[\"丰富的插件支持\",{\"1\":{\"1540\":1}}],[\"著名的mybatis插件包括\",{\"1\":{\"2516\":1}}],[\"号\",{\"1\":{\"2501\":1}}],[\"号标准文件\",{\"1\":{\"70\":1}}],[\"奢华尊享版\",{\"1\":{\"2501\":1}}],[\"难免会很麻烦\",{\"1\":{\"2497\":1}}],[\"逆向分析的表\",{\"1\":{\"2501\":1}}],[\"逆向工程的核心依赖\",{\"1\":{\"2500\":1}}],[\"逆向工程的操作是以构建过程中插件形式出现的\",{\"1\":{\"2500\":1}}],[\"逆向工程\",{\"0\":{\"2496\":1},\"1\":{\"2497\":1}}],[\"逆向遍历\",{\"1\":{\"266\":1}}],[\"磁盘保存路径\",{\"1\":{\"2485\":1}}],[\"弱引用\",{\"1\":{\"2481\":1}}],[\"弱化出现哈希碰撞的概率\",{\"1\":{\"703\":1}}],[\"软引用\",{\"1\":{\"2481\":1}}],[\"软件1班\",{\"1\":{\"972\":6}}],[\"软件安装位置\",{\"1\":{\"923\":1}}],[\"软件的白盒测试是对软件的过程性细节做细致的检查\",{\"1\":{\"530\":1}}],[\"软件的黑盒测试意味着测试要在软件的接口处进行\",{\"1\":{\"529\":1}}],[\"软件测试的目的是在规定的条件下对程序进行操作\",{\"1\":{\"527\":1}}],[\"软件\",{\"1\":{\"492\":1}}],[\"利于后期维护\",{\"1\":{\"2441\":1}}],[\"利用的子类继承父类的特新实现代码增强\",{\"1\":{\"2611\":1}}],[\"利用响应对象响应客户端请求\",{\"1\":{\"1817\":1}}],[\"利用css样式来控制大小不可变\",{\"1\":{\"1341\":1}}],[\"利用meta标签\",{\"1\":{\"1293\":1}}],[\"利用反射通过字节码获取方法\",{\"1\":{\"568\":1}}],[\"利用反射优化代码\",{\"1\":{\"568\":1}}],[\"利用多态的优化\",{\"1\":{\"568\":1}}],[\"利用空参构造器创建对象\",{\"1\":{\"382\":1}}],[\"利用带参数的构造器创建对象\",{\"1\":{\"382\":1}}],[\"利用构造器对属性进行赋值操作\",{\"1\":{\"560\":1,\"561\":1}}],[\"利用构造器\",{\"1\":{\"372\":1}}],[\"利用实现类创建对象\",{\"1\":{\"219\":1}}],[\"雇员和工牌\",{\"1\":{\"2440\":1}}],[\"积极加载与懒加载\",{\"0\":{\"2434\":1}}],[\"延迟加载的好处\",{\"1\":{\"2434\":1}}],[\"延迟加载的内容等到真正使用时才去进行加载\",{\"1\":{\"2434\":1}}],[\"延迟加载\",{\"1\":{\"2433\":1,\"2434\":1,\"2438\":2}}],[\"顾名思义不支持事务\",{\"1\":{\"2731\":1}}],[\"顾名思义就是可以支持事务\",{\"1\":{\"2728\":1}}],[\"顾名思义就是与数据库打交道\",{\"1\":{\"1262\":1}}],[\"顾名思义\",{\"1\":{\"2432\":1}}],[\"讲师测评系统\",{\"1\":{\"2417\":1}}],[\"讲普通容器转换为同步类容器\",{\"1\":{\"304\":1}}],[\"见下列演示\",{\"1\":{\"2836\":1}}],[\"见下面的例子\",{\"1\":{\"2330\":1}}],[\"见\",{\"1\":{\"2412\":1}}],[\"见名知意\",{\"1\":{\"1226\":1}}],[\"监测属性配置文件是否进行重新加载\",{\"1\":{\"2301\":1}}],[\"监听钝化和活化\",{\"0\":{\"2097\":1}}],[\"监听单独的某个session对象\",{\"1\":{\"2081\":1}}],[\"监听httpservletrequest对象的创建并初始化\",{\"1\":{\"2076\":2}}],[\"监听httpservletrequest对象的销毁\",{\"1\":{\"2076\":2}}],[\"监听器和某个session对象绑定了\",{\"1\":{\"2081\":1}}],[\"监听器代码\",{\"1\":{\"2081\":1,\"2088\":1}}],[\"监听器的\",{\"1\":{\"2531\":1}}],[\"监听器的使用\",{\"0\":{\"2074\":1}}],[\"监听器的分类\",{\"0\":{\"2067\":1}}],[\"监听器有哪些\",{\"0\":{\"2070\":1}}],[\"监听器开发案例\",{\"0\":{\"2086\":1,\"3148\":1},\"1\":{\"212\":1}}],[\"监听的端口protocol\",{\"1\":{\"1765\":1}}],[\"监听端口是3306\",{\"1\":{\"923\":1}}],[\"监听指定接口\",{\"1\":{\"509\":1,\"510\":1,\"511\":1,\"512\":1}}],[\"逗号\",{\"1\":{\"2301\":1,\"2454\":1}}],[\"慢sql记录标准\",{\"1\":{\"2298\":1}}],[\"覆盖已生成文件\",{\"1\":{\"2293\":1}}],[\"希望这条记录没有被别人更新\",{\"1\":{\"2287\":1}}],[\"希望这种语言能够成为国际标准\",{\"1\":{\"70\":1}}],[\"乐观锁实现方式\",{\"1\":{\"2287\":1}}],[\"乐观锁\",{\"0\":{\"2287\":1}}],[\"假某工资单表中工资大于3000的有4人\",{\"1\":{\"2692\":1}}],[\"假删除\",{\"1\":{\"2231\":1}}],[\"假设您正在寻找名称中包含单词guadratic和equation的类\",{\"1\":{\"609\":1}}],[\"得继承iservice\",{\"1\":{\"2216\":1}}],[\"得到id为1\",{\"1\":{\"2827\":1}}],[\"得到上一次插入记录时自动产生的id\",{\"1\":{\"2410\":1}}],[\"得到filter的名称\",{\"1\":{\"2048\":1}}],[\"得到可执行文件class\",{\"1\":{\"1935\":1}}],[\"得到的输入框的数字都是string类型\",{\"1\":{\"1676\":1}}],[\"得到的字节码就是同一个\",{\"1\":{\"581\":1}}],[\"得到了快速的发展\",{\"1\":{\"930\":1}}],[\"得到一个参数的构造器\",{\"1\":{\"585\":1}}],[\"得到两个参数的构造器\",{\"1\":{\"585\":1}}],[\"得到空构造器\",{\"1\":{\"585\":1}}],[\"得到头元素并且移除\",{\"1\":{\"337\":2}}],[\"得到头元素但是不移除\",{\"1\":{\"337\":1}}],[\"得到key对应在数组中的位置\",{\"1\":{\"294\":1}}],[\"得到key对应的hash值\",{\"1\":{\"279\":1}}],[\"得到hash\",{\"1\":{\"279\":1}}],[\"得到集合中元素的数量\",{\"1\":{\"262\":1}}],[\"面向父类和接口没有关系\",{\"1\":{\"2616\":1}}],[\"面向父类\",{\"1\":{\"2607\":1}}],[\"面向接口\",{\"1\":{\"2607\":1}}],[\"面向关系的数据库之间数据的转换必须要做\",{\"1\":{\"2198\":1}}],[\"面向关系的数据库之间数据的转换\",{\"1\":{\"2198\":1}}],[\"面试常问\",{\"0\":{\"188\":1}}],[\"面试题\",{\"0\":{\"595\":1,\"3037\":1},\"1\":{\"43\":1,\"1136\":1}}],[\"智者见智\",{\"1\":{\"2197\":1}}],[\"莎士比亚说\",{\"1\":{\"2197\":1}}],[\"迁移到了google\",{\"1\":{\"2196\":1}}],[\"迁移到sass\",{\"1\":{\"1558\":1}}],[\"及打印到控制台又输出到文件\",{\"1\":{\"2308\":1,\"2374\":1}}],[\"及\",{\"1\":{\"2195\":1}}],[\"及这些特定字符的组合\",{\"1\":{\"1582\":1}}],[\"们需要在springboot项目的启动类上配置mapper接口的扫描路径\",{\"1\":{\"2188\":1}}],[\"热加载\",{\"1\":{\"2179\":1}}],[\"热交换部署\",{\"1\":{\"671\":1}}],[\"种主键策略\",{\"1\":{\"2179\":1}}],[\"损耗小\",{\"1\":{\"2179\":1}}],[\"籍贯\",{\"1\":{\"2176\":1}}],[\"遗留的城市\",{\"1\":{\"2176\":1}}],[\"供客户端调用和进一步处理\",{\"1\":{\"2170\":1}}],[\"至于jquery的getjson\",{\"1\":{\"2162\":1}}],[\"至少8以上\",{\"1\":{\"1680\":1}}],[\"裸体\",{\"1\":{\"2162\":1}}],[\"载入成功时回调函数\",{\"1\":{\"2158\":1,\"2161\":1,\"2165\":1}}],[\"待发送参数\",{\"1\":{\"2158\":1,\"2161\":1,\"2165\":1}}],[\"待办事项\",{\"1\":{\"1181\":2}}],[\"捕获的异常对象\",{\"1\":{\"2155\":1}}],[\"捕获的错误对象\",{\"1\":{\"2145\":1}}],[\"欧洲计算机协会制定的js规范\",{\"1\":{\"2123\":1}}],[\"却无法这样做\",{\"1\":{\"2106\":1}}],[\"好比和世界上最优秀的软件工程师是一个项目的\",{\"1\":{\"2197\":1}}],[\"好多信息需要重新填写\",{\"1\":{\"2103\":1}}],[\"好的数据库设计对数据的存储性能和后期的程序开发\",{\"1\":{\"1045\":1}}],[\"仍然是登录过的\",{\"1\":{\"2098\":1}}],[\"仍然是同一个文件在同一个位置有不同内容\",{\"1\":{\"784\":1}}],[\"离线时\",{\"1\":{\"2088\":1}}],[\"欢迎$\",{\"1\":{\"2060\":1}}],[\"欢迎您第1次访问\",{\"1\":{\"1893\":2}}],[\"欢迎您第一次访问\",{\"1\":{\"1893\":2}}],[\"欢迎您回来\",{\"1\":{\"1893\":3}}],[\"耦合度低\",{\"0\":{\"2039\":1}}],[\"耦合性低\",{\"0\":{\"2036\":1}}],[\"界面程序员\",{\"1\":{\"2038\":1}}],[\"¤\",{\"1\":{\"2029\":1}}],[\"千分数\",{\"1\":{\"2029\":1}}],[\"百分数\",{\"1\":{\"2029\":1}}],[\"百度一下\",{\"1\":{\"1331\":1}}],[\"百度首页\",{\"1\":{\"1293\":1}}],[\"百度搜索\",{\"1\":{\"1293\":1}}],[\"百度\",{\"1\":{\"1293\":1}}],[\"百度logo\",{\"1\":{\"1177\":2}}],[\"百度开源的\",{\"1\":{\"61\":1}}],[\"货币符号\",{\"1\":{\"2029\":2}}],[\"货币码\",{\"1\":{\"2029\":1}}],[\"历史写法\",{\"1\":{\"2018\":1}}],[\"维护性和方便性\",{\"1\":{\"2012\":1}}],[\"些资源的请求和响应进行过滤\",{\"1\":{\"1999\":1}}],[\"追加一些数据\",{\"1\":{\"1998\":1,\"2001\":1}}],[\"追加元素\",{\"1\":{\"1571\":1}}],[\"拦截\",{\"1\":{\"2615\":1}}],[\"拦截请求方法\",{\"0\":{\"2004\":1}}],[\"拦截httpservletresponse\",{\"1\":{\"1995\":1}}],[\"拦截客户的httpservletrequest\",{\"1\":{\"1995\":1}}],[\"压缩响应信息等一些高级功能\",{\"1\":{\"1994\":1}}],[\"压缩后只有100kb左右\",{\"1\":{\"1540\":1}}],[\"判空运算符\",{\"1\":{\"1985\":1}}],[\"判断原始数据是否有效\",{\"1\":{\"2509\":1}}],[\"判断空运算符\",{\"0\":{\"1991\":1},\"1\":{\"1991\":1}}],[\"判断如果登录过\",{\"1\":{\"1910\":1}}],[\"判断传递的参数是否为安全整数\",{\"1\":{\"1408\":1}}],[\"判断传递的参数是否为\",{\"1\":{\"1408\":1}}],[\"判断传递的参数是否为整数\",{\"1\":{\"1408\":1}}],[\"判断传递的参数是否为有限数字\",{\"1\":{\"1408\":1}}],[\"判断链接是否关闭\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"判断数据是否相同\",{\"1\":{\"702\":1}}],[\"判断接受是否符合预期的40\",{\"1\":{\"523\":2,\"525\":2}}],[\"判断是否登录\",{\"1\":{\"2096\":1}}],[\"判断是否包含值\",{\"1\":{\"853\":2}}],[\"判断是否正确\",{\"1\":{\"511\":1,\"512\":1}}],[\"判断是否满载\",{\"1\":{\"344\":1}}],[\"判断是否为空队列\",{\"1\":{\"344\":1}}],[\"判断是否为空\",{\"1\":{\"219\":1}}],[\"判断map中是否为空\",{\"1\":{\"292\":1}}],[\"判断指定的value是否存在\",{\"1\":{\"292\":1}}],[\"判断指定的key是否存在\",{\"1\":{\"292\":1}}],[\"判断指定元素是否存在\",{\"1\":{\"219\":1}}],[\"判断条件不能写\",{\"1\":{\"1580\":1}}],[\"判断条件\",{\"1\":{\"279\":1,\"2022\":1}}],[\"判断pool的大小是否超过上限\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"判断p\",{\"1\":{\"279\":1}}],[\"判断\",{\"1\":{\"219\":1,\"251\":1,\"260\":1,\"292\":2}}],[\"判断元素是否相同\",{\"1\":{\"219\":1}}],[\"省略域取数据\",{\"0\":{\"1981\":1}}],[\"省略value\",{\"0\":{\"550\":1}}],[\"域监听器\",{\"0\":{\"2073\":1}}],[\"域\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"域标志\",{\"1\":{\"1978\":1}}],[\"域对象指的是\",{\"1\":{\"1913\":1}}],[\"域对象\",{\"0\":{\"1912\":1,\"3135\":1},\"1\":{\"210\":1,\"1831\":1,\"2911\":1,\"2920\":1}}],[\"域对象的使用\",{\"0\":{\"131\":1}}],[\"韩梅梅\",{\"1\":{\"1972\":1}}],[\"九大内置对象的使用\",{\"0\":{\"1972\":1}}],[\"告知浏览器以什么格式和编码解析\",{\"1\":{\"1960\":1}}],[\"告诉spring当前类需要由容器实例化bean并放入容器中\",{\"1\":{\"2587\":1}}],[\"告诉maven将项目源码中的xml文件也进行编译\",{\"1\":{\"2505\":1}}],[\"告诉浏览器用utf\",{\"1\":{\"1293\":1}}],[\"告诉当前项目\",{\"1\":{\"1214\":1}}],[\"告诉对方\",{\"1\":{\"759\":1}}],[\"告诉web服务器自己接受什么介质类型\",{\"1\":{\"177\":1}}],[\"告诉方法的调用者\",{\"1\":{\"33\":1}}],[\"便利对象数组\",{\"1\":{\"2025\":1}}],[\"便可以开始并行开发\",{\"1\":{\"1946\":1}}],[\"便于统一管理\",{\"1\":{\"2635\":1}}],[\"便于我们调试程序\",{\"1\":{\"2525\":1}}],[\"便于我们操作样式\",{\"1\":{\"1568\":1}}],[\"便于对数据的后续处理\",{\"1\":{\"1225\":1}}],[\"便于管理\",{\"1\":{\"234\":1}}],[\"便于后续的查询定位\",{\"1\":{\"226\":2}}],[\"便于用户搜索到我们的项目\",{\"1\":{\"92\":1}}],[\"培养其独特的技术特性\",{\"1\":{\"1945\":1}}],[\"近年来已经成为最主要的\",{\"1\":{\"2823\":1}}],[\"近年内连续被开源中国评选为\",{\"1\":{\"61\":1}}],[\"近几年有追赶vue\",{\"1\":{\"1943\":1}}],[\"属于成熟稳定的框架\",{\"1\":{\"1943\":1}}],[\"属性可以对请求中的参数进行限定\",{\"1\":{\"2816\":1}}],[\"属性控制自动将容器中的对象注入到当前对象的属性上\",{\"1\":{\"2578\":1,\"2579\":1}}],[\"属性的作用是一样的\",{\"1\":{\"2835\":1}}],[\"属性的值将为\",{\"1\":{\"2334\":1}}],[\"属性的数据类型和列的数据类型保持一致\",{\"1\":{\"1226\":1}}],[\"属性中指定的配置文件次之\",{\"1\":{\"2333\":1}}],[\"属性中的\",{\"1\":{\"1046\":1}}],[\"属性读取类路径下属性文件\",{\"1\":{\"2333\":1}}],[\"属性文件中配置这些属性\",{\"1\":{\"2332\":1}}],[\"属性设置事务的隔离级别\",{\"1\":{\"2718\":1}}],[\"属性设置为\",{\"1\":{\"2317\":1,\"2318\":1}}],[\"属性设计成一个数据库表的字段就行\",{\"1\":{\"1046\":1}}],[\"属性配置文件重新加载的时间间隔\",{\"1\":{\"2301\":1}}],[\"属性简化回调函数处理\",{\"1\":{\"2170\":1}}],[\"属性实现跨域请求通过\",{\"1\":{\"2170\":1}}],[\"属性说明\",{\"0\":{\"2133\":1}}],[\"属性指定的路径读取属性文件\",{\"1\":{\"2333\":1}}],[\"属性指定了元素的定位类型\",{\"1\":{\"1531\":1}}],[\"属性指向就形成了原型链\",{\"1\":{\"1425\":1}}],[\"属性选择器\",{\"0\":{\"1514\":1,\"1549\":1},\"1\":{\"1514\":1}}],[\"属性节点attribute\",{\"1\":{\"1479\":1}}],[\"属性以及frame\",{\"1\":{\"1450\":1}}],[\"属性引用的都是它自己\",{\"1\":{\"1450\":1}}],[\"属性和\",{\"1\":{\"1450\":1}}],[\"属性值\",{\"1\":{\"1421\":2,\"2124\":2,\"2132\":2}}],[\"属性个数和数据库的表的列数保持一致\",{\"1\":{\"1226\":1}}],[\"属性对象\",{\"1\":{\"587\":4,\"588\":4,\"590\":1}}],[\"属性等\",{\"1\":{\"542\":1}}],[\"属性\",{\"0\":{\"586\":1,\"1485\":1,\"2835\":1,\"2840\":1,\"2845\":1,\"2850\":1,\"2855\":1},\"1\":{\"364\":1,\"560\":1,\"561\":2,\"576\":2,\"1322\":1,\"1408\":1,\"1411\":1,\"1425\":1,\"1432\":1,\"1435\":1,\"1438\":1,\"1441\":1,\"1450\":1,\"1451\":2,\"1959\":1,\"2029\":1,\"2030\":1,\"2332\":1,\"2374\":1,\"2420\":2,\"2437\":1,\"2481\":1,\"2706\":1}}],[\"属性名或者元素\",{\"1\":{\"1567\":1}}],[\"属性名称\",{\"1\":{\"1485\":1}}],[\"属性名和数据库表格的列名要保持一致\",{\"1\":{\"1226\":1}}],[\"属性名\",{\"1\":{\"142\":1,\"1421\":2,\"1493\":2,\"1849\":1,\"1978\":1,\"2124\":2,\"2132\":2,\"2800\":1,\"2801\":1}}],[\"属性名=\",{\"1\":{\"127\":1}}],[\"属性访问语法\",{\"1\":{\"142\":1}}],[\"象以简化测试环境的方法\",{\"1\":{\"1941\":1}}],[\"半分离\",{\"0\":{\"1940\":1}}],[\"甚至可以无\",{\"1\":{\"2179\":1}}],[\"甚至连谁是谁都不清楚\",{\"1\":{\"2125\":1}}],[\"甚至是同一工程目录下\",{\"1\":{\"1939\":1}}],[\"甚至代码可以被引进\",{\"1\":{\"572\":1}}],[\"着本质上的差异\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"何时创建取决于我们什么时候第一次调用了getsession\",{\"1\":{\"1900\":1}}],[\"银行根据银行卡卡号找到对应的账户给你操作\",{\"1\":{\"1883\":1}}],[\"银行开通账户并给银行卡\",{\"1\":{\"1883\":1}}],[\"携带银行卡去银行取钱\",{\"1\":{\"1883\":1}}],[\"源servlet与被包含的目标资源的输出数据都会被添加到响应结果中\",{\"1\":{\"1859\":1}}],[\"源码\",{\"0\":{\"328\":1,\"338\":1}}],[\"源码解读\",{\"1\":{\"279\":2,\"288\":1}}],[\"托管给目标资源\",{\"1\":{\"1856\":1}}],[\"精简解释\",{\"1\":{\"2196\":1}}],[\"精确路径\",{\"1\":{\"1843\":1}}],[\"精确匹配是指<url\",{\"1\":{\"1838\":1}}],[\"精确匹配\",{\"0\":{\"1838\":1}}],[\"精准的\",{\"1\":{\"386\":1,\"389\":1}}],[\"销毁方法\",{\"0\":{\"2005\":1},\"1\":{\"1998\":1,\"2001\":1}}],[\"销毁方式\",{\"0\":{\"1899\":1}}],[\"销毁\",{\"1\":{\"1822\":1,\"1825\":1,\"1916\":1,\"1920\":1,\"1924\":1,\"2066\":1}}],[\"阶段\",{\"1\":{\"1822\":1}}],[\"意味着a\",{\"1\":{\"2731\":1}}],[\"意在降低冗余的全限定类名书写\",{\"1\":{\"2324\":1}}],[\"意义为\",{\"1\":{\"1777\":2}}],[\"意图操作\",{\"0\":{\"607\":1}}],[\"意图也可以节省您的时间\",{\"1\":{\"604\":1}}],[\"勾选open\",{\"1\":{\"1777\":1}}],[\"勾选上\",{\"1\":{\"676\":1}}],[\"困此\",{\"1\":{\"1764\":1}}],[\"角色配置\",{\"1\":{\"1759\":1}}],[\"免费\",{\"1\":{\"1736\":1}}],[\"免费的\",{\"1\":{\"920\":1}}],[\"收费\",{\"1\":{\"1735\":5}}],[\"收起代码块\",{\"1\":{\"616\":2}}],[\"收起\",{\"0\":{\"616\":1}}],[\"驱动基于javaee平台开发的web项目\",{\"1\":{\"1735\":1}}],[\"驱动程序\",{\"1\":{\"1256\":1}}],[\"驱动程序的基本服务\",{\"1\":{\"1256\":1}}],[\"今天学习vue对象的生命周期\",{\"1\":{\"1728\":1}}],[\"今天天气很好\",{\"1\":{\"1571\":1}}],[\"演示案例\",{\"0\":{\"1870\":1}}],[\"演示\",{\"0\":{\"1722\":1}}],[\"演示代码\",{\"0\":{\"1874\":1,\"1878\":1,\"1917\":1,\"1921\":1,\"1925\":1},\"1\":{\"1718\":1}}],[\"演示fork\",{\"0\":{\"758\":1}}],[\"五\",{\"1\":{\"1718\":1}}],[\"校验是否登录过\",{\"1\":{\"2098\":2}}],[\"校验是否正确\",{\"1\":{\"1792\":1}}],[\"校验登录信息\",{\"0\":{\"2096\":1}}],[\"校验\",{\"1\":{\"1713\":1}}],[\"校对速度快\",{\"1\":{\"1156\":1}}],[\"校对规则名称\",{\"1\":{\"1156\":3}}],[\"校对规则\",{\"1\":{\"946\":1}}],[\"罗列父组件传进的属性值\",{\"1\":{\"1711\":1,\"1712\":1,\"1713\":1}}],[\"渲染文字为红色\",{\"1\":{\"1701\":1}}],[\"渲染节点\",{\"1\":{\"1689\":1}}],[\"卸载vue\",{\"1\":{\"1682\":1}}],[\"卸载包\",{\"1\":{\"95\":1}}],[\"帮你快速构建一个vue的项目\",{\"1\":{\"1682\":1}}],[\"帮我们分析用户的操作习惯\",{\"1\":{\"1282\":1}}],[\"滚轮\",{\"1\":{\"1671\":1}}],[\"草莓\",{\"1\":{\"1627\":1,\"1628\":1}}],[\"香蕉\",{\"1\":{\"1627\":1,\"1628\":1}}],[\"橘子\",{\"1\":{\"1627\":1,\"1628\":1}}],[\"苹果\",{\"1\":{\"1627\":1,\"1628\":1}}],[\"胡子语法\",{\"1\":{\"1617\":1}}],[\"胡子\",{\"1\":{\"1617\":1}}],[\"占位符\",{\"1\":{\"2843\":1}}],[\"占比大小更小\",{\"1\":{\"1616\":1}}],[\"占据全部视口\",{\"1\":{\"1595\":1,\"1596\":1}}],[\"轮播图\",{\"0\":{\"1607\":1}}],[\"弹性盒子\",{\"1\":{\"1601\":1}}],[\"弹窗提示一点信息\",{\"1\":{\"1379\":1}}],[\"桌面显示器\",{\"1\":{\"1600\":1}}],[\"屏幕宽度等于或大于\",{\"1\":{\"1600\":4}}],[\"屏蔽了业务表的复杂性\",{\"1\":{\"1142\":1}}],[\"尺寸的增加\",{\"1\":{\"1599\":1}}],[\"栅格系统\",{\"0\":{\"1599\":1}}],[\"横向全部占满\",{\"1\":{\"1597\":1}}],[\"横线标签\",{\"0\":{\"1300\":1},\"1\":{\"1300\":1}}],[\"宽度\",{\"1\":{\"1595\":1,\"1596\":1}}],[\"宽度是显示宽度\",{\"1\":{\"972\":1}}],[\"淡入淡出\",{\"0\":{\"1590\":1}}],[\"称为服务端小程序\",{\"1\":{\"1782\":1}}],[\"称为\",{\"1\":{\"1582\":1,\"1720\":1}}],[\"称之为切入点\",{\"1\":{\"2622\":1}}],[\"称之为\",{\"1\":{\"294\":1}}],[\"严谨而且简单\",{\"1\":{\"1580\":1}}],[\"严格的分支模型也为大型项目提供了一些非常必要的结构\",{\"1\":{\"797\":1}}],[\"邮政编码等验证\",{\"1\":{\"1580\":1}}],[\"邮箱格式正确必须有\",{\"1\":{\"1578\":1}}],[\"邮箱\",{\"1\":{\"731\":1,\"2182\":1}}],[\"绑定监听器\",{\"1\":{\"2095\":1}}],[\"绑定后监听\",{\"1\":{\"2081\":1}}],[\"绑定方法\",{\"1\":{\"2081\":1}}],[\"绑定的方法要返回true\",{\"1\":{\"1580\":1}}],[\"绑定事件一次\",{\"1\":{\"1572\":1}}],[\"绑定一些不同的响应代码处理\",{\"1\":{\"1428\":1}}],[\"悬停\",{\"1\":{\"1572\":1}}],[\"触发销毁方法\",{\"1\":{\"2571\":1,\"2574\":1}}],[\"触发事件\",{\"1\":{\"1572\":2}}],[\"触发器\",{\"1\":{\"934\":1,\"983\":1}}],[\"布局解决方案和插件库\",{\"1\":{\"1559\":1}}],[\"布尔\",{\"0\":{\"1356\":1}}],[\"布尔值函数\",{\"1\":{\"846\":1}}],[\"火狐\",{\"1\":{\"1559\":1}}],[\"火龙果\",{\"1\":{\"1398\":2,\"1399\":1}}],[\"起始路径为此context所属host中appbase定义的路径\",{\"1\":{\"1768\":1}}],[\"起\",{\"1\":{\"1559\":1}}],[\"微软全国广播公司\",{\"1\":{\"1557\":1}}],[\"微信\",{\"1\":{\"568\":4}}],[\"强悍的前端开发框架\",{\"1\":{\"1557\":1}}],[\"强大的\",{\"1\":{\"2179\":1}}],[\"强大的动画功能\",{\"1\":{\"1540\":1}}],[\"强大的选择器\",{\"1\":{\"1540\":1}}],[\"码<\",{\"1\":{\"1555\":1}}],[\"禁用状态\",{\"1\":{\"1555\":1}}],[\"启用默认值特性\",{\"1\":{\"2334\":1}}],[\"启用自动提交不仅是不必要的\",{\"1\":{\"2317\":1}}],[\"启用状态\",{\"1\":{\"1555\":1}}],[\"启动即会自动注入基本\",{\"1\":{\"2179\":1}}],[\"启动一个server实例\",{\"1\":{\"1763\":1}}],[\"启动tomcat\",{\"1\":{\"1746\":1,\"1780\":1}}],[\"启动\",{\"0\":{\"1741\":1},\"1\":{\"2179\":1}}],[\"启动项目之前\",{\"1\":{\"1777\":1}}],[\"启动项目\",{\"0\":{\"1684\":1}}],[\"启动服务器\",{\"1\":{\"922\":1}}],[\"启动gitlab服务\",{\"1\":{\"811\":1}}],[\"启动线程\",{\"1\":{\"458\":1}}],[\"启动当前线程\",{\"1\":{\"456\":1}}],[\"奇数的索引\",{\"1\":{\"1552\":1}}],[\"鲁冰花\",{\"1\":{\"1549\":1}}],[\"阿郎的故事\",{\"1\":{\"1549\":1}}],[\"阿里规约\",{\"1\":{\"9\":1}}],[\"阿里代码规范\",{\"0\":{\"9\":1,\"2952\":1},\"1\":{\"4\":1}}],[\"匹配规则\",{\"0\":{\"1975\":1}}],[\"匹配优先顺序\",{\"0\":{\"1843\":1}}],[\"匹配\",{\"1\":{\"1838\":1,\"1839\":2,\"1840\":2,\"1841\":3,\"1842\":4,\"1844\":1}}],[\"匹配类型\",{\"0\":{\"1837\":1}}],[\"匹配到的context获得请求\",{\"1\":{\"1769\":2}}],[\"匹配成功后\",{\"1\":{\"1718\":1}}],[\"匹配中文字符的正则表达式\",{\"1\":{\"1584\":1}}],[\"匹配中国邮政编码\",{\"1\":{\"1584\":1}}],[\"匹配email地址\",{\"1\":{\"1584\":1}}],[\"匹配由数字和26个英文字母组成的字符串\",{\"1\":{\"1584\":1}}],[\"匹配身份证\",{\"1\":{\"1584\":1}}],[\"匹配腾讯qq号\",{\"1\":{\"1584\":1}}],[\"匹配国内电话号码\",{\"1\":{\"1584\":1}}],[\"匹配一系列符合某个句法规则的字符串\",{\"1\":{\"1582\":1}}],[\"匹配一个给定索引值的元素\",{\"1\":{\"1551\":1}}],[\"匹配其父元素下的偶元素\",{\"1\":{\"1552\":1}}],[\"匹配其父元素下的奇元素\",{\"1\":{\"1552\":1}}],[\"匹配其父元素下的第n个子\",{\"1\":{\"1552\":1}}],[\"匹配最后一个子元素\",{\"1\":{\"1552\":1}}],[\"匹配第一个子元素\",{\"1\":{\"1552\":1}}],[\"匹配所有但不包含jsp页面\",{\"1\":{\"1841\":1}}],[\"匹配所有\",{\"0\":{\"1842\":1},\"1\":{\"1555\":2,\"1842\":1}}],[\"匹配所有的虚拟主机host\",{\"1\":{\"1769\":1}}],[\"匹配所有的input\",{\"1\":{\"1554\":1}}],[\"匹配所有的submit\",{\"1\":{\"1554\":1}}],[\"匹配所有的file\",{\"1\":{\"1554\":1}}],[\"匹配所有的hidden\",{\"1\":{\"1554\":1}}],[\"匹配所有的checkbox\",{\"1\":{\"1554\":1}}],[\"匹配所有的radio\",{\"1\":{\"1554\":1}}],[\"匹配所有的password\",{\"1\":{\"1554\":1}}],[\"匹配所有的text\",{\"1\":{\"1554\":1}}],[\"匹配所有小于给定索引值的元素\",{\"1\":{\"1551\":1}}],[\"匹配所有大于给定索引值的元素\",{\"1\":{\"1551\":1}}],[\"匹配所有索引值为偶数的元素\",{\"1\":{\"1551\":1}}],[\"匹配所有索引值为奇数的元素\",{\"1\":{\"1551\":1}}],[\"匹配所有属性不等于特定值的元素\",{\"1\":{\"1549\":1}}],[\"匹配给定的属性是以包含某些值的元素\",{\"1\":{\"1549\":1}}],[\"匹配给定的属性是以某些值结尾的元素\",{\"1\":{\"1549\":1}}],[\"匹配给定的属性是以某些值开始的元素\",{\"1\":{\"1549\":1}}],[\"匹配给定的属性是某个特定值的元素\",{\"1\":{\"1549\":1}}],[\"匹配包含给定属性的元素\",{\"1\":{\"1549\":1}}],[\"匹配和归约\",{\"1\":{\"857\":1}}],[\"况下servlet只用来扩展基于http协议的web服务器\",{\"1\":{\"1548\":1}}],[\"广义的servlet\",{\"1\":{\"1548\":2}}],[\"狭义的servlet是指java语言实现的一个接口\",{\"1\":{\"1548\":2}}],[\"务程序或服务连接器\",{\"1\":{\"1548\":1}}],[\"音视频等\",{\"1\":{\"1546\":1}}],[\"音频视频\",{\"0\":{\"1310\":1}}],[\"音频\",{\"1\":{\"908\":1,\"1295\":1,\"1310\":1}}],[\"兼容ie678\",{\"1\":{\"1542\":1}}],[\"兼容当前绝大部分浏览器\",{\"1\":{\"61\":1}}],[\"宗旨\",{\"1\":{\"1541\":1}}],[\"体系结构\",{\"0\":{\"2529\":1}}],[\"体验原生异步\",{\"0\":{\"2111\":1}}],[\"体积小\",{\"1\":{\"1540\":1}}],[\"体重\",{\"1\":{\"576\":1}}],[\"固定容器的阈值\",{\"0\":{\"1598\":1}}],[\"固定容器的响应式布局规则是当窗口大小变化时\",{\"1\":{\"1597\":1}}],[\"固定定位\",{\"0\":{\"1536\":1},\"1\":{\"1535\":1,\"1536\":1}}],[\"固定宽度\",{\"1\":{\"1300\":1,\"1601\":1}}],[\"橙色div移动上去了\",{\"1\":{\"1535\":1}}],[\"蓝色div相对body产生的位移\",{\"1\":{\"1535\":1}}],[\"暂时来说看到的效果\",{\"1\":{\"1535\":1}}],[\"暂存区\",{\"0\":{\"735\":1},\"1\":{\"728\":1}}],[\"暂存区概念\",{\"0\":{\"728\":1}}],[\"堆叠顺序\",{\"0\":{\"1534\":1}}],[\"围绕在内边距和内容外的边框\",{\"1\":{\"1527\":1}}],[\"盒子的内容\",{\"1\":{\"1527\":1}}],[\"盒子模型\",{\"0\":{\"1526\":1,\"3102\":1},\"1\":{\"57\":1,\"1527\":1}}],[\"盒模型允许我们在其它元素和周围元素边框之间的空间放置元素\",{\"1\":{\"1527\":1}}],[\"边框\",{\"1\":{\"1527\":2,\"1529\":1}}],[\"边距\",{\"1\":{\"1527\":1}}],[\"受影响的元素加入\",{\"1\":{\"1525\":1}}],[\"受影响的行数\",{\"1\":{\"1215\":1,\"1220\":1,\"1221\":1,\"1253\":2,\"1264\":2}}],[\"感受浮动\",{\"0\":{\"1521\":1}}],[\"卡住\",{\"1\":{\"1519\":1}}],[\"伪类选择器\",{\"0\":{\"1515\":1}}],[\"伪删除设计\",{\"1\":{\"1148\":1}}],[\"塑料袋\",{\"1\":{\"1512\":1}}],[\"影响了开发效率\",{\"1\":{\"2198\":1}}],[\"影响div的样式\",{\"0\":{\"1497\":1},\"1\":{\"1497\":1}}],[\"影响数据行数为\",{\"1\":{\"1217\":1,\"1219\":1,\"1253\":1}}],[\"爱好\",{\"1\":{\"1490\":1,\"1491\":1}}],[\"宋体\",{\"1\":{\"1470\":1,\"1471\":1,\"1472\":1}}],[\"书写方式\",{\"1\":{\"1470\":1,\"1471\":1}}],[\"书籍导航页面\",{\"1\":{\"1321\":1}}],[\"页<em><span>html<\",{\"1\":{\"1548\":1}}],[\"页\",{\"1\":{\"1463\":2}}],[\"页面原有信息得以保留\",{\"1\":{\"2105\":1}}],[\"页面没有跳转\",{\"1\":{\"2105\":1}}],[\"页面中的显示内容只能是空白\",{\"1\":{\"2103\":1}}],[\"页面中还夹杂着后端代码\",{\"1\":{\"1939\":1}}],[\"页面使用jsp注释\",{\"1\":{\"1952\":1}}],[\"页面上和响应重定向的绝对路径都需要些项目的部署名​\",{\"1\":{\"1879\":1}}],[\"页面上也有很多元素\",{\"1\":{\"1527\":1}}],[\"页面的绝对路径要有项目名\",{\"1\":{\"1868\":1}}],[\"页面的配置信息\",{\"1\":{\"1293\":1}}],[\"页面\",{\"1\":{\"1717\":1,\"2030\":1}}],[\"页面<\",{\"1\":{\"1596\":2}}],[\"页面代码\",{\"0\":{\"1482\":1,\"2114\":1},\"1\":{\"2128\":1}}],[\"页面元素分析\",{\"0\":{\"1481\":1}}],[\"页面加载函数jquery\",{\"1\":{\"1546\":1}}],[\"页面加载后调用一个匿名函数\",{\"1\":{\"1544\":1}}],[\"页面加载时执行\",{\"1\":{\"1441\":1}}],[\"页面加载事件\",{\"0\":{\"1440\":1}}],[\"页面宽度的百分比\",{\"1\":{\"1300\":1}}],[\"页面想要实现效果\",{\"1\":{\"1298\":1}}],[\"页面展示的内容\",{\"1\":{\"1293\":1}}],[\"页面描述\",{\"1\":{\"1293\":1}}],[\"页面作者\",{\"1\":{\"1293\":1}}],[\"页面刷新效果\",{\"1\":{\"1293\":1}}],[\"页面标题\",{\"1\":{\"1293\":1}}],[\"样式在实际的研发中\",{\"1\":{\"1568\":1}}],[\"样式值\",{\"1\":{\"1568\":1}}],[\"样式名=\",{\"1\":{\"1568\":2}}],[\"样式名=样式值\",{\"0\":{\"1496\":1},\"1\":{\"1496\":1,\"1497\":1}}],[\"样式都会发生变化\",{\"1\":{\"1513\":1}}],[\"样式和元素本身做到了分离的效果\",{\"1\":{\"1467\":1}}],[\"样式表\",{\"1\":{\"1466\":1}}],[\"样式的叠加\",{\"1\":{\"1466\":1}}],[\"样式\",{\"1\":{\"1452\":1}}],[\"失去焦点\",{\"1\":{\"1439\":1}}],[\"失败的分支删除重新开始即可\",{\"1\":{\"747\":1}}],[\"失败则返回false\",{\"1\":{\"327\":1}}],[\"鼠标移动\",{\"1\":{\"1433\":1}}],[\"鼠标移到某元素之上\",{\"1\":{\"1432\":1}}],[\"鼠标离开\",{\"1\":{\"1433\":1}}],[\"鼠标进入\",{\"1\":{\"1433\":1}}],[\"鼠标抬起\",{\"1\":{\"1433\":1}}],[\"鼠标按键修饰符修饰的是鼠标的左\",{\"1\":{\"1671\":1}}],[\"鼠标按键修饰符\",{\"0\":{\"1671\":1}}],[\"鼠标按键被松开\",{\"1\":{\"1432\":1}}],[\"鼠标按下\",{\"1\":{\"1433\":1}}],[\"鼠标按钮被按下\",{\"1\":{\"1432\":1}}],[\"鼠标从某元素移开\",{\"1\":{\"1432\":1}}],[\"鼠标被移动\",{\"1\":{\"1432\":1}}],[\"鼠标事件\",{\"0\":{\"1431\":1}}],[\"鼠标悬浮在图片上的时候的提示语\",{\"1\":{\"1309\":1}}],[\"牛角面包\",{\"1\":{\"1424\":1,\"1425\":1}}],[\"蛋挞\",{\"1\":{\"1424\":1,\"1425\":1}}],[\"蛋糕\",{\"1\":{\"1419\":1}}],[\"馒头\",{\"1\":{\"1421\":1}}],[\"孩儿\",{\"1\":{\"1421\":1,\"1424\":1,\"1425\":1}}],[\"晓明5\",{\"1\":{\"2128\":1}}],[\"晓明4\",{\"1\":{\"2128\":1}}],[\"晓明3\",{\"1\":{\"2128\":1}}],[\"晓明2\",{\"1\":{\"2128\":1}}],[\"晓明1\",{\"1\":{\"2128\":1}}],[\"晓明\",{\"1\":{\"1421\":1,\"1917\":1,\"1921\":1,\"1925\":1,\"2649\":1}}],[\"油条\",{\"1\":{\"1420\":1}}],[\"岁的\",{\"1\":{\"1420\":1,\"1421\":1,\"1423\":1,\"1424\":2,\"1425\":2}}],[\"季度\",{\"1\":{\"1417\":1}}],[\"季节描述\",{\"1\":{\"560\":1,\"561\":1}}],[\"季节名字\",{\"1\":{\"560\":1,\"561\":1}}],[\"略自己尝试一下\",{\"1\":{\"1416\":1}}],[\"西方的月份编号从0开始\",{\"1\":{\"1416\":1}}],[\"次访问\",{\"1\":{\"1893\":1}}],[\"次数\",{\"1\":{\"1822\":1}}],[\"次幂\",{\"1\":{\"1411\":1}}],[\"次年\",{\"1\":{\"70\":1}}],[\"底为e\",{\"1\":{\"1411\":1}}],[\"底层就是aop\",{\"1\":{\"2699\":1}}],[\"底层就是一个数组\",{\"1\":{\"328\":1}}],[\"底层有个map\",{\"1\":{\"2549\":1}}],[\"底层运用到了dom4j的技术对于xml进行解析\",{\"1\":{\"2548\":1}}],[\"底层spring会自动根据我们的标签\",{\"1\":{\"2543\":1,\"2546\":1}}],[\"底层会帮我们自动扩容\",{\"1\":{\"393\":1}}],[\"底层存储数组int\",{\"1\":{\"392\":1}}],[\"底层基于链表\",{\"1\":{\"336\":1}}],[\"底层基于数组的\",{\"1\":{\"326\":1}}],[\"底层基于数组实现的\",{\"1\":{\"316\":1}}],[\"底层采用了链表的结构\",{\"1\":{\"336\":1}}],[\"底层采用了二次散列以及扰动函数\",{\"1\":{\"294\":1}}],[\"底层数组赋给items\",{\"1\":{\"328\":2}}],[\"底层调用的还是copyonwritearraylist的addifabsent\",{\"1\":{\"319\":1}}],[\"底层逻辑\",{\"0\":{\"310\":1}}],[\"底层使用了线程安全机制\",{\"1\":{\"298\":1}}],[\"底层源码\",{\"0\":{\"288\":1,\"307\":1},\"1\":{\"288\":1}}],[\"底层是final修饰的\",{\"1\":{\"433\":1}}],[\"底层是一个char数组\",{\"1\":{\"430\":1}}],[\"底层是个二叉树的结构来存储数据\",{\"1\":{\"284\":1,\"299\":1}}],[\"底层是hashmap\",{\"1\":{\"279\":1}}],[\"底层结构\",{\"1\":{\"282\":1}}],[\"底层维护的是一个linkedhashmap\",{\"1\":{\"282\":1}}],[\"底层也是通过迭代器实现的\",{\"0\":{\"270\":1}}],[\"底层原理\",{\"0\":{\"261\":1,\"279\":1,\"293\":1,\"363\":1,\"2612\":1}}],[\"底层都是object数据组\",{\"1\":{\"258\":1}}],[\"底层object数组\",{\"1\":{\"257\":1}}],[\"底层代码逻辑\",{\"0\":{\"257\":1}}],[\"底层依然是一个数组\",{\"1\":{\"303\":2}}],[\"底层依赖矢量图形库\",{\"1\":{\"61\":1}}],[\"底层依托了开源渲染引擎\",{\"1\":{\"61\":1}}],[\"弧度之间\",{\"1\":{\"1411\":1}}],[\"弧度之间的数值来返回\",{\"1\":{\"1411\":1}}],[\"介于\",{\"1\":{\"1411\":1}}],[\"介绍\",{\"0\":{\"721\":1}}],[\"负整数\",{\"1\":{\"1463\":1}}],[\"负无穷\",{\"1\":{\"1408\":1}}],[\"负责将处理结果生成\",{\"1\":{\"2774\":1}}],[\"负责根据用户请求找到\",{\"1\":{\"2771\":1}}],[\"负责页面排版和美工\",{\"1\":{\"2109\":1}}],[\"负责从文件系统加载class文件\",{\"1\":{\"570\":1}}],[\"负责人祖明介绍到\",{\"1\":{\"61\":1}}],[\"想想是不是很嗨的一件事情\",{\"1\":{\"2197\":1}}],[\"想结尾增加元素\",{\"1\":{\"1395\":1}}],[\"想部署一些高性能的服务\",{\"1\":{\"84\":1}}],[\"×\",{\"1\":{\"1386\":2,\"2693\":6}}],[\"降低开发难度\",{\"1\":{\"2197\":1}}],[\"降低了代码的耦合度\",{\"1\":{\"2046\":1}}],[\"降低了代码维护的难度\",{\"1\":{\"1380\":1}}],[\"降低\",{\"1\":{\"1941\":1}}],[\"降序\",{\"1\":{\"1039\":1}}],[\"验证登录信息\",{\"0\":{\"2095\":1}}],[\"验证无错要return\",{\"1\":{\"1580\":1}}],[\"验证无密码登录是否会失败mysql\",{\"1\":{\"1155\":1}}],[\"验证出错要return\",{\"1\":{\"1580\":1}}],[\"验证要求\",{\"0\":{\"1578\":1}}],[\"验证步骤浪费的时间太多\",{\"1\":{\"1372\":1}}],[\"少传参数\",{\"1\":{\"1370\":1}}],[\"少用in子查询\",{\"1\":{\"1148\":1}}],[\"考试\",{\"1\":{\"1367\":1}}],[\"贴秋膘\",{\"1\":{\"1366\":1}}],[\"吃烧烤喝啤酒\",{\"1\":{\"1366\":1}}],[\"算数运算符\",{\"0\":{\"1987\":1},\"1\":{\"1985\":1,\"1987\":1}}],[\"算术运算符\",{\"1\":{\"1360\":1}}],[\"算法\",{\"0\":{\"223\":1},\"1\":{\"223\":1,\"279\":1}}],[\"型\",{\"0\":{\"1356\":1}}],[\"滑动选择\",{\"0\":{\"1348\":1}}],[\"颜色选择\",{\"0\":{\"1346\":1}}],[\"具有不可再分的特性\",{\"1\":{\"2685\":1}}],[\"具有平台无关性且安全可靠\",{\"1\":{\"1927\":1}}],[\"具备函数名和参数列表\",{\"1\":{\"1368\":1}}],[\"具备提交功能\",{\"1\":{\"1341\":1,\"1342\":1,\"1343\":1}}],[\"具体介绍如下\",{\"1\":{\"2530\":1,\"2531\":1,\"2532\":1,\"2533\":1}}],[\"具体插件\",{\"1\":{\"2500\":1}}],[\"具体代码说明\",{\"0\":{\"2155\":1}}],[\"具体配置如下\",{\"1\":{\"1960\":1}}],[\"具体过程\",{\"0\":{\"1931\":1}}],[\"具体实现\",{\"0\":{\"1273\":1}}],[\"具体操作\",{\"1\":{\"1115\":1,\"1116\":1}}],[\"具体的执行流程详见\",{\"1\":{\"2812\":1}}],[\"具体的任务都是交由插件完成的\",{\"1\":{\"711\":1}}],[\"具体的类型要在实例化的时候才会最终确定\",{\"1\":{\"263\":1}}],[\"具体在使用的时候才会确定具体的类型\",{\"1\":{\"235\":1}}],[\"隐藏状态\",{\"1\":{\"1555\":1}}],[\"隐藏域\",{\"0\":{\"1338\":1},\"1\":{\"1338\":1}}],[\"隐式内连接查询里面是没有inner\",{\"1\":{\"1056\":1}}],[\"隐式内连\",{\"0\":{\"1056\":1}}],[\"信息的创建\",{\"1\":{\"2066\":1}}],[\"信息\",{\"1\":{\"1717\":1}}],[\"信息输入框\",{\"1\":{\"1456\":1}}],[\"信息交互遵照协议\",{\"1\":{\"1330\":1}}],[\"信息了\",{\"1\":{\"1198\":1}}],[\"行为触发\",{\"1\":{\"1572\":1}}],[\"行元素与块元素\",{\"0\":{\"1512\":1}}],[\"行合并\",{\"1\":{\"1319\":1}}],[\"行\",{\"1\":{\"1319\":1}}],[\"行内样式\",{\"1\":{\"1470\":1}}],[\"行内标记\",{\"1\":{\"1198\":1}}],[\"行内代码块\",{\"0\":{\"1180\":1}}],[\"萝莉体\",{\"1\":{\"1306\":1}}],[\"倾斜\",{\"0\":{\"1302\":1}}],[\"合格父母\",{\"1\":{\"1301\":9}}],[\"合并所有\",{\"1\":{\"1558\":1}}],[\"合并字符串\",{\"0\":{\"1393\":1},\"1\":{\"1393\":1}}],[\"合并三个数组\",{\"1\":{\"1392\":1}}],[\"合并两个数组\",{\"1\":{\"1392\":1}}],[\"合并数组元素\",{\"0\":{\"1392\":1}}],[\"合并原理\",{\"1\":{\"1319\":1}}],[\"合并分支\",{\"0\":{\"782\":1,\"785\":1}}],[\"合并分支时\",{\"1\":{\"751\":1}}],[\"合并完成\",{\"1\":{\"760\":1}}],[\"合并项目\",{\"1\":{\"760\":1}}],[\"合并差异\",{\"1\":{\"634\":1}}],[\"合并对象时属性名不能一样\",{\"1\":{\"79\":1}}],[\"合并对象\",{\"1\":{\"79\":1}}],[\"颁发\",{\"1\":{\"1301\":9}}],[\"家长教育指导工作室\",{\"1\":{\"1301\":9}}],[\"迅速引发热议\",{\"1\":{\"1301\":9,\"1305\":1}}],[\"冲上微博<br\",{\"1\":{\"1305\":1}}],[\"冲上微博热搜\",{\"1\":{\"1301\":9}}],[\"冲突的表现\",{\"0\":{\"787\":1}}],[\"冲突的产生\",{\"0\":{\"784\":1}}],[\"冲突的解决\",{\"0\":{\"752\":1}}],[\"冲突产生的原因\",{\"0\":{\"751\":1}}],[\"冲突产生的表现\",{\"0\":{\"750\":1}}],[\"段落和段落之间有空行\",{\"1\":{\"1301\":1}}],[\"段落中文字自动换行\",{\"1\":{\"1301\":1}}],[\"段落效果\",{\"1\":{\"1301\":1}}],[\"段落标签\",{\"0\":{\"1301\":1},\"1\":{\"1301\":1}}],[\"持证上岗\",{\"1\":{\"1298\":4,\"1299\":8}}],[\"持久层工具接口\",{\"1\":{\"2667\":1}}],[\"持久层\",{\"1\":{\"2199\":1}}],[\"持久\",{\"1\":{\"2199\":1}}],[\"持久化的主要应用是将内存中的数据存储在关系型的数据库中\",{\"1\":{\"2199\":1}}],[\"持久化\",{\"1\":{\"2090\":1}}],[\"持久化cookie\",{\"1\":{\"1892\":1}}],[\"持久化cookie使用cookie对象下的cookie\",{\"1\":{\"1890\":1}}],[\"持久性指事务一旦提交\",{\"1\":{\"2688\":1}}],[\"持久性是指一个事务一旦被提交\",{\"1\":{\"1102\":1}}],[\"持久性\",{\"0\":{\"2688\":1},\"1\":{\"1102\":1,\"1233\":1}}],[\"持久通讯\",{\"0\":{\"518\":1}}],[\"媒体\",{\"1\":{\"1298\":4}}],[\"繁写形式\",{\"1\":{\"1293\":1}}],[\"紧耦合方式参数注入\",{\"1\":{\"2793\":1}}],[\"紧耦合方式\",{\"0\":{\"2793\":1}}],[\"紧跟在\",{\"1\":{\"1292\":1}}],[\"紧密结构\",{\"0\":{\"226\":1},\"1\":{\"225\":1,\"261\":1,\"302\":1}}],[\"绝不能在事务环境中运行\",{\"1\":{\"2732\":1}}],[\"绝大部分\",{\"1\":{\"2520\":1}}],[\"绝大部分的应用服务器都是付费产品\",{\"1\":{\"1735\":1}}],[\"绝大多数文档头部包含的数据都不会真正作为内容显示给读者\",{\"1\":{\"1292\":1}}],[\"绝对定位\",{\"0\":{\"1535\":1},\"1\":{\"1535\":1}}],[\"绝对路径在书写时\",{\"1\":{\"1879\":1}}],[\"绝对路径后需要写当前项目部署名\",{\"1\":{\"1877\":1}}],[\"绝对路径后不需要写当前项目部署名\",{\"1\":{\"1873\":1}}],[\"绝对路径以当前项目所在目录为跟路径\",{\"1\":{\"1877\":1}}],[\"绝对路径以当前项目名部署名为根路径\",{\"1\":{\"1873\":1}}],[\"绝对路径访问a1\",{\"1\":{\"1874\":1}}],[\"绝对路径指的就是\",{\"1\":{\"387\":1}}],[\"绝对路径\",{\"1\":{\"386\":2,\"387\":3,\"389\":2,\"390\":1,\"1868\":1}}],[\"绝对值\",{\"1\":{\"367\":1,\"368\":1}}],[\"共查到4条记录\",{\"1\":{\"2692\":1}}],[\"共4条\",{\"1\":{\"2692\":1}}],[\"共3条\",{\"1\":{\"2692\":1}}],[\"共有三个\",{\"1\":{\"1674\":1}}],[\"共有的向连接池归还连接对象的方法\",{\"1\":{\"1288\":1}}],[\"共有的向外界提供链接对象的\",{\"1\":{\"1288\":1}}],[\"共享硬件\",{\"1\":{\"492\":1}}],[\"共享锁\",{\"1\":{\"475\":1}}],[\"共享的\",{\"1\":{\"279\":1}}],[\"私有的初始化一个链接对象的方法\",{\"1\":{\"1288\":1}}],[\"私有的初始化链接方法\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"找不到具体方法\",{\"1\":{\"2345\":1}}],[\"找不到数据库驱动类\",{\"1\":{\"1288\":1}}],[\"找到对应类型的执行\",{\"1\":{\"2777\":1}}],[\"找到所有\",{\"1\":{\"2377\":1}}],[\"找到\",{\"1\":{\"1154\":2}}],[\"找到my\",{\"1\":{\"1154\":1}}],[\"找到jar包并且实现了jar包文件的依赖\",{\"1\":{\"693\":1}}],[\"找到存储数据表table\",{\"1\":{\"279\":1}}],[\"尤其在软件概念\",{\"1\":{\"2197\":1}}],[\"尤其是在查询越多\",{\"1\":{\"2470\":1}}],[\"尤其是在注释\",{\"1\":{\"1952\":1}}],[\"尤其是对于复杂的sql语句\",{\"1\":{\"2441\":1}}],[\"尤其是大数据应用难题\",{\"1\":{\"918\":1}}],[\"尤其用到像java\",{\"1\":{\"1287\":1}}],[\"抽取basedao\",{\"0\":{\"1266\":1}}],[\"抽象的\",{\"1\":{\"908\":1}}],[\"抽象方法名\",{\"1\":{\"835\":1}}],[\"抽象方法\",{\"1\":{\"268\":1,\"814\":3}}],[\"层包括\",{\"1\":{\"2531\":1}}],[\"层避免混淆\",{\"1\":{\"2214\":1}}],[\"层代码\",{\"1\":{\"2179\":1}}],[\"层级关系二\",{\"1\":{\"1773\":1}}],[\"层级关系一\",{\"1\":{\"1773\":1}}],[\"层级关系\",{\"0\":{\"1773\":1}}],[\"层级越高\",{\"1\":{\"1534\":1}}],[\"层叠\",{\"1\":{\"1466\":1}}],[\"层叠样式表\",{\"1\":{\"1466\":1}}],[\"层\",{\"1\":{\"1263\":1,\"2531\":1}}],[\"层次之间的特点\",{\"0\":{\"2043\":1}}],[\"层次\",{\"1\":{\"926\":1}}],[\"层次数据库\",{\"1\":{\"916\":1}}],[\"夹在业务逻辑与数据库资源中间\",{\"1\":{\"1262\":1}}],[\"立即加载\",{\"1\":{\"2438\":1}}],[\"立即释放此\",{\"1\":{\"1255\":1}}],[\"立即判断该链表是否已经达到8个结点\",{\"1\":{\"279\":1}}],[\"尝试修改scopecontroller\",{\"1\":{\"2929\":1}}],[\"尝试使用cglib动态代理增强\",{\"1\":{\"2615\":1}}],[\"尝试从本地缓存中获取数据\",{\"1\":{\"2493\":1}}],[\"尝试让第二个sqlsession使用第一个sqlsession查询后缓存的数据\",{\"1\":{\"2479\":1}}],[\"尝试获取cookie中的计数器\",{\"1\":{\"1893\":1}}],[\"尝试sql注入\",{\"1\":{\"1252\":1}}],[\"尝试通过多态优化代码\",{\"1\":{\"568\":1}}],[\"说\",{\"1\":{\"2605\":1}}],[\"说每个人都会对作品有不同的理解\",{\"1\":{\"2197\":1}}],[\"说白了就是要用一些标签来装其他的标签\",{\"1\":{\"1594\":1}}],[\"说白了mysql驱动的preparedstatement实现类的setstring\",{\"1\":{\"1249\":1}}],[\"说到脱离文档流要说一下什么是文档流\",{\"1\":{\"1517\":1}}],[\"说好的幸福呢\",{\"1\":{\"1310\":1}}],[\"说明sessionscope仅限于单次会话\",{\"1\":{\"2926\":1}}],[\"说明requestscope仅限于单次请求\",{\"1\":{\"2926\":1}}],[\"说明注释\",{\"1\":{\"536\":1}}],[\"说明注释允许你在程序中嵌入关于程序的信息\",{\"1\":{\"536\":1}}],[\"说明\",{\"0\":{\"427\":1,\"1292\":1,\"1295\":1,\"2134\":1},\"1\":{\"90\":1,\"177\":1,\"219\":1,\"251\":1,\"260\":1,\"324\":1,\"364\":1,\"386\":1,\"389\":1,\"404\":1,\"407\":1,\"478\":1,\"479\":1,\"502\":1,\"505\":1,\"570\":1,\"575\":1,\"584\":1,\"587\":1,\"590\":1,\"593\":1,\"675\":1,\"726\":1,\"827\":1,\"853\":1,\"892\":1,\"1041\":1,\"1093\":2,\"1223\":1,\"1255\":1,\"1256\":1,\"1257\":1,\"1259\":1,\"1485\":1,\"1486\":1,\"1548\":1,\"1549\":1,\"1551\":1,\"1552\":1,\"1554\":1,\"1555\":1,\"1744\":1,\"1757\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1804\":1,\"1805\":1,\"1806\":1,\"1807\":1,\"1817\":1,\"1829\":1,\"1833\":1,\"1898\":1,\"1968\":1,\"1969\":1,\"1970\":1,\"1971\":1,\"2289\":1,\"2725\":1,\"2923\":1,\"2924\":1}}],[\"防止这种自动转换\",{\"1\":{\"2140\":1}}],[\"防止乱码现象\",{\"1\":{\"1293\":1}}],[\"防止sql注入\",{\"1\":{\"1247\":1}}],[\"防止空指针异常\",{\"1\":{\"851\":1}}],[\"预防误操作\",{\"1\":{\"2179\":1}}],[\"预期服务器返回值类型\",{\"1\":{\"2155\":1}}],[\"预期服务器返回的数据类型\",{\"1\":{\"2141\":1}}],[\"预定义的类如\",{\"1\":{\"1601\":1}}],[\"预定义的标准格式\",{\"1\":{\"380\":1}}],[\"预先准备一些链接对象\",{\"1\":{\"1272\":1}}],[\"预处理器对解析树继续处理\",{\"1\":{\"1250\":1}}],[\"预编译sql语句\",{\"1\":{\"2299\":1}}],[\"预编译标签\",{\"0\":{\"1304\":1},\"1\":{\"1304\":1}}],[\"预编译的sql语句处理性能稍微高于普通的传递变量的办法\",{\"1\":{\"1250\":1}}],[\"预编译语句和statement不同\",{\"1\":{\"1250\":1}}],[\"预编译语句preparedstatement\",{\"1\":{\"1250\":1}}],[\"预编译\",{\"0\":{\"1247\":1}}],[\"达到注入的目的\",{\"1\":{\"1246\":1}}],[\"达到长度上限后\",{\"1\":{\"253\":1,\"254\":1}}],[\"攻击者可以通过恶意符号修改我们的sql语句\",{\"1\":{\"1246\":1}}],[\"倘若其中一个表达式操作失败\",{\"1\":{\"1233\":1}}],[\"硬编码\",{\"1\":{\"1230\":1}}],[\"硬盘\",{\"1\":{\"224\":1}}],[\"累积到一定数量\",{\"1\":{\"1230\":1}}],[\"形式的\",{\"1\":{\"2319\":1}}],[\"形式调用\",{\"1\":{\"2179\":2}}],[\"形式获取结果集当前行指定列号值\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"形参信息\",{\"0\":{\"636\":1}}],[\"形参说明\",{\"1\":{\"537\":1}}],[\"形参类型\",{\"1\":{\"537\":1}}],[\"形参名必须和请求数据的键名一致\",{\"1\":{\"2794\":1}}],[\"形参名\",{\"1\":{\"537\":1}}],[\"形参\",{\"1\":{\"302\":1}}],[\"游标从当前位置向上移动一行\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"游标向下移动一行\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"助教部门\",{\"1\":{\"1217\":1,\"1219\":1,\"1253\":1}}],[\"认为是空\",{\"1\":{\"1991\":2}}],[\"认为不是空\",{\"1\":{\"1991\":1}}],[\"认证\",{\"1\":{\"1216\":1}}],[\"认识\",{\"0\":{\"3074\":1}}],[\"认识jstl\",{\"0\":{\"2009\":1}}],[\"认识bom和dom\",{\"0\":{\"1445\":1}}],[\"认识markdown\",{\"0\":{\"1167\":1}}],[\"认识css\",{\"1\":{\"115\":1}}],[\"认识obsidian|认识obsidian\",{\"1\":{\"53\":1}}],[\"认识obsidian\",{\"0\":{\"1157\":1},\"1\":{\"53\":1}}],[\"错误信息\",{\"1\":{\"2145\":1,\"2155\":1}}],[\"错误五\",{\"1\":{\"1216\":1}}],[\"错误四\",{\"1\":{\"1216\":1}}],[\"错误三\",{\"1\":{\"1216\":1}}],[\"错误二\",{\"1\":{\"1216\":1}}],[\"错误一\",{\"1\":{\"1216\":1}}],[\"错票\",{\"1\":{\"462\":1}}],[\"北京\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1253\":1,\"2409\":1,\"2410\":1}}],[\"教学部\",{\"1\":{\"1215\":1}}],[\"教育\",{\"1\":{\"61\":1}}],[\"补充\",{\"0\":{\"2335\":1}}],[\"补助\",{\"1\":{\"1211\":1}}],[\"补齐第一行\",{\"1\":{\"376\":1}}],[\"甲骨文等分别提供实现jdbc接口的驱动jar包\",{\"1\":{\"1206\":1}}],[\"制定了规范jdbc\",{\"1\":{\"1206\":1}}],[\"制造检查异常\",{\"1\":{\"32\":1}}],[\"制造运行时异常\",{\"1\":{\"32\":1}}],[\"制造异常\",{\"1\":{\"32\":1,\"33\":1,\"2702\":2}}],[\"笔记中所有标签数组\",{\"1\":{\"1198\":1}}],[\"评分\",{\"1\":{\"1198\":1}}],[\"场景\",{\"0\":{\"1197\":1}}],[\"块\",{\"1\":{\"1195\":1}}],[\"快捷键\",{\"0\":{\"1193\":1}}],[\"快捷栏\",{\"1\":{\"1191\":1}}],[\"快速体验spring的ioc\",{\"0\":{\"2534\":1}}],[\"快速动态网页应用的网页开发技术\",{\"1\":{\"2108\":1}}],[\"快速开发\",{\"0\":{\"1787\":1}}],[\"快速开发bootstrap给我提供了大量的样式\",{\"1\":{\"1559\":1}}],[\"快速搭建项目\",{\"1\":{\"1559\":1}}],[\"快速添加\",{\"1\":{\"956\":3}}],[\"快速创建\",{\"0\":{\"956\":1}}],[\"快速运行\",{\"1\":{\"670\":1}}],[\"快速跳转到错误处\",{\"1\":{\"638\":1}}],[\"快速弹出窗口\",{\"0\":{\"637\":1}}],[\"快速提醒\",{\"0\":{\"603\":1}}],[\"快速打开设置\",{\"1\":{\"1159\":1}}],[\"快速打开\",{\"1\":{\"600\":1}}],[\"快速发开一个简单的node\",{\"1\":{\"86\":1}}],[\"快速上手\",{\"0\":{\"63\":1}}],[\"绘制流程图\",{\"1\":{\"1191\":1}}],[\"↩︎\",{\"1\":{\"1189\":1}}],[\"∑i=1nai=0i=1∑n​ai​=0∑i=1nai=0\",{\"1\":{\"1184\":1}}],[\"参考文档快速开发\",{\"0\":{\"1564\":1}}],[\"参考\",{\"1\":{\"1211\":2}}],[\"参考教程数学公式在线编译\",{\"1\":{\"1184\":1}}],[\"参数里面username不能是root\",{\"1\":{\"2817\":1}}],[\"参数可以是一个或者多个\",{\"1\":{\"2816\":1}}],[\"参数名\",{\"1\":{\"2793\":1}}],[\"参数名要要和jsonp\",{\"1\":{\"2170\":1}}],[\"参数验证\",{\"1\":{\"2780\":1}}],[\"参数1=值1\",{\"1\":{\"2816\":1}}],[\"参数1\",{\"1\":{\"2458\":1,\"2816\":3}}],[\"参数1→地址\",{\"1\":{\"505\":1}}],[\"参数详解\",{\"1\":{\"2410\":1}}],[\"参数传递问题\",{\"0\":{\"2382\":1}}],[\"参数传入构造器的参数类型\",{\"1\":{\"585\":2}}],[\"参数使用\",{\"1\":{\"2352\":1}}],[\"参数是map\",{\"1\":{\"2392\":1}}],[\"参数是以字符串拼接的形式设置\",{\"1\":{\"2352\":1}}],[\"参数是一段java程序的访问方式\",{\"1\":{\"1721\":1}}],[\"参数是一个long类型的数值\",{\"1\":{\"865\":1,\"866\":1}}],[\"参数的处理\",{\"0\":{\"2795\":1}}],[\"参数的处理多样了\",{\"1\":{\"2371\":1}}],[\"参数的类型\",{\"1\":{\"2433\":1}}],[\"参数的拼接\",{\"0\":{\"1723\":1}}],[\"参数的时间单位\",{\"1\":{\"479\":1}}],[\"参数信息\",{\"1\":{\"1721\":1}}],[\"参数前面的in可以省略不写\",{\"1\":{\"1147\":1}}],[\"参数要和抽象方法中的参数一致\",{\"1\":{\"828\":1}}],[\"参数列表是\",{\"1\":{\"2651\":1}}],[\"参数列表可以用exception\",{\"1\":{\"2642\":1}}],[\"参数列表可以用\",{\"1\":{\"2641\":1}}],[\"参数列表可以用joinpoint接收切点对象\",{\"1\":{\"2640\":1,\"2643\":1}}],[\"参数列表\",{\"1\":{\"591\":1,\"1368\":1,\"1369\":2,\"2651\":1}}],[\"参数为方法名\",{\"1\":{\"591\":4}}],[\"参数2=值2\",{\"1\":{\"2816\":1}}],[\"参数2\",{\"1\":{\"505\":1,\"2816\":3}}],[\"参数长度+16\",{\"1\":{\"392\":1}}],[\"参数类型\",{\"1\":{\"235\":1,\"1093\":2}}],[\"参数key\",{\"1\":{\"127\":1}}],[\"参数指定输出目录\",{\"1\":{\"98\":1}}],[\"参数指定输出文件\",{\"1\":{\"98\":1}}],[\"参数\",{\"1\":{\"34\":1,\"80\":1,\"177\":1,\"363\":1,\"380\":1,\"407\":1,\"534\":1,\"1266\":1,\"1275\":1,\"1757\":1,\"2143\":1,\"2633\":1}}],[\"脚本语言是指在web浏览器内有解释器解释执行的编程语言\",{\"1\":{\"1374\":2}}],[\"脚本语言是一种简单的程序\",{\"1\":{\"1374\":2}}],[\"脚本语言\",{\"1\":{\"1374\":1,\"1956\":1}}],[\"脚本和表现层对象\",{\"1\":{\"1372\":1}}],[\"脚注\",{\"0\":{\"1183\":1}}],[\"脚手架的使用\",{\"0\":{\"1685\":1}}],[\"脚手架工具安装与配置\",{\"1\":{\"1682\":1}}],[\"脚手架安装\",{\"0\":{\"1682\":1}}],[\"脚手架\",{\"0\":{\"1678\":1,\"3115\":1},\"1\":{\"116\":1}}],[\"局部刷新\",{\"1\":{\"2110\":1}}],[\"局部变量\",{\"1\":{\"1951\":1}}],[\"局部变量的声明\",{\"1\":{\"534\":1}}],[\"局部变量放入栈中\",{\"1\":{\"302\":1}}],[\"局右\",{\"1\":{\"1182\":1}}],[\"居左\",{\"1\":{\"1182\":1}}],[\"居中\",{\"1\":{\"1182\":2,\"1319\":1}}],[\"居中对齐和居右对齐三种类型\",{\"1\":{\"1182\":1}}],[\"带参注入\",{\"1\":{\"2558\":2}}],[\"带上这个\",{\"1\":{\"2287\":1}}],[\"带条件的查询\",{\"0\":{\"1201\":1}}],[\"带链接的图片使用\",{\"1\":{\"1177\":1}}],[\"带时区的日期时间类分别为\",{\"1\":{\"901\":1}}],[\"啊啊啊\",{\"1\":{\"1172\":1}}],[\"键盘tab\",{\"1\":{\"1665\":1}}],[\"键盘下键\",{\"1\":{\"1665\":1}}],[\"键盘右键\",{\"1\":{\"1665\":1}}],[\"键盘上键\",{\"1\":{\"1665\":1}}],[\"键盘左键\",{\"1\":{\"1665\":1}}],[\"键盘按键\",{\"1\":{\"1665\":1}}],[\"键盘事件\",{\"0\":{\"1434\":1}}],[\"键盘录入两个数\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1}}],[\"键值对用\",{\"1\":{\"1336\":1}}],[\"键值对\",{\"1\":{\"1333\":1}}],[\"键可以控制缩进\",{\"1\":{\"1171\":1}}],[\"斜体\",{\"0\":{\"1170\":1},\"1\":{\"1170\":1}}],[\"易于维护\",{\"1\":{\"2635\":1}}],[\"易于人阅读和编写\",{\"1\":{\"2123\":1}}],[\"易于定制\",{\"1\":{\"1559\":1}}],[\"易读易写\",{\"1\":{\"1167\":1}}],[\"易烊千玺\",{\"1\":{\"972\":1}}],[\"法语或者俄语\",{\"1\":{\"1156\":1}}],[\"刷新间隔\",{\"1\":{\"2481\":1}}],[\"刷新\",{\"1\":{\"1155\":1}}],[\"刷新权限\",{\"1\":{\"928\":1}}],[\"忘记root密码\",{\"0\":{\"1155\":1}}],[\"尽量避免\",{\"1\":{\"1352\":1}}],[\"尽量使用union\",{\"1\":{\"1148\":1}}],[\"尽量使用数值来代替字符串类型\",{\"1\":{\"1148\":1}}],[\"尽量不要string和包装类integer做同步监视器\",{\"1\":{\"466\":1}}],[\"业务处理器调用模型层处理完用户请求后\",{\"1\":{\"2871\":1}}],[\"业务完成的成功率\",{\"1\":{\"2111\":1}}],[\"业务中避免不了的话可以把语句分开写\",{\"1\":{\"1148\":1}}],[\"业务代码和处理异常的代码混在一起\",{\"1\":{\"17\":1}}],[\"造成了数据重复\",{\"1\":{\"1143\":1}}],[\"浪费的\",{\"1\":{\"1128\":1}}],[\"额外的存储空间\",{\"1\":{\"1125\":1}}],[\"额外因素\",{\"1\":{\"560\":1,\"561\":1}}],[\"权限修饰符\",{\"1\":{\"2633\":1}}],[\"权限控制\",{\"1\":{\"2619\":1}}],[\"权限控制等等\",{\"1\":{\"2523\":1}}],[\"权限2\",{\"1\":{\"1116\":1,\"1117\":1}}],[\"权限1\",{\"1\":{\"1116\":1,\"1117\":1}}],[\"授予用户的权限\",{\"1\":{\"1116\":1}}],[\"授予用户某种权限\",{\"1\":{\"935\":1}}],[\"授权关键字\",{\"1\":{\"1116\":1}}],[\"授权用户\",{\"0\":{\"1116\":1}}],[\"拥有\",{\"1\":{\"2170\":1}}],[\"拥有全部的权限\",{\"1\":{\"1114\":1}}],[\"拥有一个同步队列和多个等待队列\",{\"1\":{\"475\":1}}],[\"幻读的重点在于新增或者删除\",{\"1\":{\"2692\":1}}],[\"幻读与不可重复读类似\",{\"1\":{\"2692\":1}}],[\"幻读\",{\"0\":{\"2692\":1},\"1\":{\"1112\":1,\"2693\":1}}],[\"幻灯片页\",{\"0\":{\"0\":1}}],[\"隔离级别越低\",{\"1\":{\"2693\":1}}],[\"隔离级别越高\",{\"1\":{\"1112\":1}}],[\"隔离级别\",{\"0\":{\"2718\":1},\"1\":{\"1112\":1,\"1113\":1,\"2693\":1}}],[\"隔离性是指各个事务的执行互不干扰\",{\"1\":{\"2687\":1}}],[\"隔离性\",{\"0\":{\"2687\":1},\"1\":{\"1102\":1,\"1233\":1,\"2684\":1}}],[\"级联bean\",{\"1\":{\"2564\":1}}],[\"级联的bean\",{\"0\":{\"2564\":1}}],[\"级联查询和多表查询的比较及其选择\",{\"0\":{\"2438\":1}}],[\"级联查询\",{\"0\":{\"2432\":1},\"1\":{\"2432\":1,\"2438\":1}}],[\"级联操作\",{\"1\":{\"1001\":3}}],[\"级别\",{\"1\":{\"1112\":1}}],[\"批处理\",{\"0\":{\"1229\":1}}],[\"批处理与事务\",{\"0\":{\"1228\":1,\"3082\":1},\"1\":{\"54\":1}}],[\"批量更新\",{\"0\":{\"2679\":1},\"1\":{\"2676\":1}}],[\"批量新增\",{\"0\":{\"2678\":1},\"1\":{\"2676\":1}}],[\"批量插入\",{\"0\":{\"2220\":1}}],[\"批量的更新数据\",{\"1\":{\"1209\":1}}],[\"批量删除优化\",{\"1\":{\"1148\":1}}],[\"批量删除\",{\"0\":{\"2680\":1},\"1\":{\"1101\":1,\"2676\":1}}],[\"断开连接\",{\"1\":{\"1100\":1}}],[\"断开链接\",{\"0\":{\"498\":1}}],[\"缩写的月名\",{\"1\":{\"1093\":1}}],[\"周几\",{\"1\":{\"2030\":1}}],[\"周杰伦\",{\"1\":{\"1310\":1}}],[\"周日是6\",{\"1\":{\"1093\":1}}],[\"周日是1\",{\"1\":{\"1093\":1}}],[\"周2是1\",{\"1\":{\"1093\":1}}],[\"周1是0\",{\"1\":{\"1093\":1}}],[\"周六是7\",{\"1\":{\"1093\":1}}],[\"周一是2\",{\"1\":{\"1093\":1}}],[\"拷贝一个表中其中的一些字段\",{\"0\":{\"1080\":1}}],[\"拷贝表结构+数据\",{\"0\":{\"1078\":1}}],[\"拷贝表结构和数据\",{\"0\":{\"1077\":1}}],[\"拷贝表结构\",{\"0\":{\"1076\":1}}],[\"拷贝对象\",{\"1\":{\"79\":1}}],[\"思路二\",{\"1\":{\"1072\":1}}],[\"思路一\",{\"1\":{\"1072\":1}}],[\"思想上的结构\",{\"1\":{\"225\":1,\"302\":1}}],[\"括起来\",{\"1\":{\"1069\":1}}],[\"员工\",{\"1\":{\"1211\":1}}],[\"员工表\",{\"1\":{\"1211\":1}}],[\"员工薪资\",{\"1\":{\"1068\":1}}],[\"员工姓名\",{\"1\":{\"1068\":1}}],[\"员工编号\",{\"1\":{\"1068\":1}}],[\"领导薪资\",{\"1\":{\"1068\":1}}],[\"领导姓名\",{\"1\":{\"1068\":1}}],[\"领导编号\",{\"1\":{\"1068\":1}}],[\"领导\",{\"1\":{\"1068\":1}}],[\"薪资\",{\"1\":{\"1068\":1}}],[\"薪资和他领导的编号\",{\"1\":{\"1068\":1}}],[\"显式地加载\",{\"1\":{\"1256\":1}}],[\"显式内连接查询里面是有inner\",{\"1\":{\"1057\":1}}],[\"显式内连\",{\"0\":{\"1057\":1}}],[\"显示资源请求404\",{\"1\":{\"2787\":1}}],[\"显示指定过滤\",{\"1\":{\"2301\":1}}],[\"显示在页面\",{\"1\":{\"2030\":1}}],[\"显示在上面\",{\"1\":{\"1534\":1}}],[\"显示日期的时区\",{\"1\":{\"2030\":1}}],[\"显示与隐藏\",{\"0\":{\"1588\":1}}],[\"显示文本和图像\",{\"1\":{\"1527\":1}}],[\"显示文件数量\",{\"1\":{\"1191\":1}}],[\"显示可提示用户输入的对话框\",{\"1\":{\"1452\":1}}],[\"显示带有一段消息以及确认按钮和取消按钮的对话框\",{\"1\":{\"1452\":1}}],[\"显示带有一段消息和一个确认按钮的警告框\",{\"1\":{\"1452\":1}}],[\"显示最近打开的文件\",{\"1\":{\"1191\":1}}],[\"显示的文字\",{\"1\":{\"1175\":1}}],[\"显示宽度并不限制可以在列内保存的值的范围\",{\"1\":{\"939\":1}}],[\"显示当前数据库的所有数据库表\",{\"1\":{\"926\":1}}],[\"显示mysql中的数据库列表\",{\"1\":{\"926\":1}}],[\"显示出来即可\",{\"1\":{\"923\":1,\"928\":1}}],[\"显示历史记录\",{\"1\":{\"634\":1}}],[\"显示\",{\"1\":{\"180\":1}}],[\"显示用户界面的\",{\"1\":{\"120\":1}}],[\"显示数据\",{\"1\":{\"65\":1}}],[\"显示异常的堆栈信息\",{\"1\":{\"21\":1}}],[\"显示异常的类名\",{\"1\":{\"21\":1}}],[\"显示异常描述信息对应的字符串\",{\"1\":{\"21\":1}}],[\"笛卡尔积\",{\"1\":{\"1054\":1}}],[\"交给spring控制\",{\"1\":{\"2522\":1}}],[\"交给其他框架去处理事务\",{\"1\":{\"2318\":1}}],[\"交给过滤器链继续进行过滤\",{\"1\":{\"1998\":1,\"2001\":1}}],[\"交互的测试用例\",{\"1\":{\"1940\":1}}],[\"交互形式\",{\"0\":{\"1938\":1}}],[\"交互逻辑等\",{\"1\":{\"1927\":1}}],[\"交互式地浏览和修改数据\",{\"1\":{\"1548\":1}}],[\"交互丰富\",{\"1\":{\"61\":1}}],[\"交叉查询产生这样的结果并不是我们想要的\",{\"1\":{\"1055\":1}}],[\"交叉查询其实就是将多张表的数据没有条件地连接在一起进行展示\",{\"1\":{\"1054\":1}}],[\"交叉查询\",{\"0\":{\"1054\":1}}],[\"范围\",{\"0\":{\"1032\":1},\"1\":{\"1198\":1,\"1968\":1}}],[\"范围内的值\",{\"1\":{\"363\":1}}],[\"别忘了导入jquery文件\",{\"1\":{\"2877\":1}}],[\"别忘记关闭锁\",{\"1\":{\"481\":1}}],[\"别名\",{\"1\":{\"1027\":2,\"1028\":1,\"1198\":1,\"1665\":1,\"2329\":1,\"2374\":1}}],[\"别名查询\",{\"0\":{\"1027\":1}}],[\"父组件通过这个事件设置事件方法addnumber\",{\"1\":{\"1715\":1}}],[\"父组件通过调用这个自定义事件后\",{\"1\":{\"1714\":1}}],[\"父组件通过v\",{\"1\":{\"1710\":1}}],[\"父组件\",{\"1\":{\"1711\":1,\"1712\":1,\"1713\":1,\"1715\":1}}],[\"父组件传值给子组件\",{\"0\":{\"1710\":1}}],[\"父子组件传值\",{\"0\":{\"1709\":1}}],[\"父子选择器\",{\"1\":{\"1548\":2}}],[\"父级节点relative定位\",{\"1\":{\"1535\":1}}],[\"父节点\",{\"1\":{\"1485\":1}}],[\"父母证\",{\"1\":{\"1301\":1}}],[\"父表有变更时\",{\"1\":{\"1003\":1}}],[\"父类中原本要执行的方法\",{\"1\":{\"2615\":1}}],[\"父类不使用<dependencymanagement>标签\",{\"0\":{\"715\":1}}],[\"父类不指定泛型\",{\"1\":{\"239\":1}}],[\"父类eat\",{\"1\":{\"541\":1}}],[\"父类是一个抽象类\",{\"1\":{\"374\":2,\"375\":1}}],[\"父类\",{\"1\":{\"372\":2}}],[\"父类指定泛型\",{\"1\":{\"239\":1}}],[\"父类的返回值类型必须大于子类\",{\"1\":{\"34\":1}}],[\"父类的权限修饰符要低于子类\",{\"1\":{\"34\":1}}],[\"留言都删除\",{\"1\":{\"1001\":1}}],[\"朋友圈删除\",{\"1\":{\"1001\":1}}],[\"置\",{\"1\":{\"2780\":1}}],[\"置为班级为null就可以了\",{\"1\":{\"1001\":1}}],[\"置为当前数据库\",{\"1\":{\"926\":1}}],[\"置空操作\",{\"1\":{\"1001\":1}}],[\"试图建立到给定数据库\",{\"1\":{\"1256\":3}}],[\"试试删除\",{\"1\":{\"1001\":1}}],[\"试试更新\",{\"1\":{\"1001\":2}}],[\"试着为客户端提供更好的响应\",{\"1\":{\"177\":1}}],[\"策略3\",{\"1\":{\"1001\":1}}],[\"策略2\",{\"1\":{\"1001\":3}}],[\"策略1\",{\"1\":{\"1001\":1}}],[\"名称的值传入控制器方法参数\",{\"1\":{\"2853\":1}}],[\"名称\",{\"1\":{\"983\":5}}],[\"名字2\",{\"1\":{\"2461\":1}}],[\"名字1\",{\"1\":{\"2458\":1,\"2461\":2}}],[\"名字\",{\"1\":{\"489\":1,\"490\":1,\"1112\":1,\"2461\":2,\"2800\":2,\"2801\":2}}],[\"限制某个字段的取值范围\",{\"1\":{\"981\":1}}],[\"限定重写的方法\",{\"1\":{\"541\":1,\"542\":1}}],[\"限定重写父类方法\",{\"1\":{\"541\":1}}],[\"限定为指定类或指定类的父类\",{\"1\":{\"248\":1}}],[\"限定为指定类或指定类的子类\",{\"1\":{\"247\":1}}],[\"截断操作\",{\"1\":{\"976\":1}}],[\"截取字符串\",{\"1\":{\"1406\":1}}],[\"截取子数组\",{\"1\":{\"1399\":1}}],[\"截取数组\",{\"0\":{\"1399\":1}}],[\"截取\",{\"1\":{\"395\":2,\"396\":2}}],[\"虽然订购的方式不一样\",{\"1\":{\"2037\":1}}],[\"虽然索引大大提高了查询的速度\",{\"1\":{\"1128\":1}}],[\"虽然使用truncate操作和使用delete操作都可以删除表中的全部记录\",{\"1\":{\"976\":1}}],[\"虽然非关系型数据库的优点很多\",{\"1\":{\"919\":1}}],[\"条件构造器\",{\"0\":{\"2236\":1},\"1\":{\"2214\":1}}],[\"条件运算符\",{\"0\":{\"1990\":1},\"1\":{\"1990\":1}}],[\"条件复杂\",{\"1\":{\"1197\":1}}],[\"条件单一\",{\"1\":{\"1197\":1}}],[\"条件2\",{\"1\":{\"1094\":1,\"2449\":1}}],[\"条件1\",{\"1\":{\"1094\":1,\"2443\":1,\"2449\":1}}],[\"条件不为空\",{\"1\":{\"1037\":1}}],[\"条件为空\",{\"1\":{\"1037\":1}}],[\"条件查询\",{\"0\":{\"1029\":1}}],[\"条件\",{\"1\":{\"973\":1,\"975\":1,\"1029\":1,\"1039\":1,\"1041\":1,\"1042\":2,\"1985\":1}}],[\"例2\",{\"1\":{\"2692\":1}}],[\"例1\",{\"1\":{\"2692\":1}}],[\"例\",{\"1\":{\"2244\":2}}],[\"例子\",{\"0\":{\"972\":1},\"1\":{\"973\":1}}],[\"例如多文件上传功能\",{\"1\":{\"2531\":1}}],[\"例如添加自定义http头\",{\"1\":{\"2142\":1}}],[\"例如myurl\",{\"1\":{\"2141\":1}}],[\"例如put和delete也可以使用\",{\"1\":{\"2136\":1}}],[\"例如实现url级别的权限访问控制\",{\"1\":{\"1994\":1}}],[\"例如jsp\",{\"1\":{\"1994\":1}}],[\"例如jsp编译后的文件\",{\"1\":{\"1744\":1}}],[\"例如移动\",{\"1\":{\"1372\":1}}],[\"例如85或3\",{\"1\":{\"1354\":1}}],[\"例如下\",{\"1\":{\"1336\":1}}],[\"例如2021\",{\"1\":{\"1198\":1}}],[\"例如新的函数\",{\"1\":{\"572\":1}}],[\"例如用来配置应用程序的任何切面\",{\"1\":{\"534\":1}}],[\"例如标记过时的功能\",{\"1\":{\"534\":1}}],[\"例如关于这个元素如何保存\",{\"1\":{\"233\":1}}],[\"例如学生\",{\"1\":{\"226\":2}}],[\"例如提交表单或者上传文件\",{\"1\":{\"181\":1}}],[\"例如chrome浏览器\",{\"1\":{\"177\":1}}],[\"例如\",{\"1\":{\"62\":1,\"226\":4,\"233\":1,\"384\":1,\"522\":1,\"653\":1,\"674\":1,\"689\":1,\"690\":1,\"691\":1,\"711\":1,\"901\":1,\"939\":1,\"942\":1,\"1068\":1,\"1101\":1,\"1145\":1,\"1148\":1,\"1156\":2,\"1250\":1,\"1251\":1,\"1262\":1,\"1287\":1,\"1450\":1,\"1456\":1,\"1578\":1,\"1582\":1,\"1601\":1,\"1645\":1,\"1656\":1,\"1891\":1,\"1927\":1,\"2140\":2,\"2150\":1,\"2317\":1,\"2318\":1,\"2319\":1,\"2324\":1,\"2332\":1,\"2334\":3,\"2422\":1,\"2461\":1,\"2595\":1,\"2647\":1,\"2669\":1,\"2686\":1,\"2687\":1,\"2771\":1,\"2798\":1,\"2823\":1,\"2827\":1,\"2843\":1}}],[\"列通过填充创建列内容之间的间隙\",{\"1\":{\"1601\":1}}],[\"列的切割\",{\"1\":{\"1322\":1}}],[\"列合并\",{\"1\":{\"1319\":1}}],[\"列表标签\",{\"0\":{\"1316\":1}}],[\"列表\",{\"0\":{\"1171\":1},\"1\":{\"2633\":1}}],[\"列\",{\"1\":{\"970\":2,\"973\":2,\"1042\":1,\"1054\":4,\"1599\":1}}],[\"列名+10\",{\"1\":{\"1028\":1}}],[\"列名\",{\"1\":{\"954\":2,\"961\":1,\"1027\":2,\"1033\":2,\"1034\":4,\"1035\":2,\"1036\":2,\"1037\":4,\"1041\":7}}],[\"旧版\",{\"1\":{\"2290\":1}}],[\"旧版日期时间的设计问题\",{\"1\":{\"891\":1}}],[\"旧版日期时间的问题\",{\"0\":{\"891\":1}}],[\"旧表名\",{\"1\":{\"962\":1}}],[\"旧列\",{\"1\":{\"960\":1}}],[\"部门\",{\"1\":{\"1219\":1,\"1221\":1,\"1253\":2,\"2276\":1}}],[\"部门表\",{\"1\":{\"1211\":1}}],[\"部分浏览器可使用put\",{\"1\":{\"2155\":1}}],[\"部分电脑需要配置catalina\",{\"1\":{\"1741\":1}}],[\"部分\",{\"1\":{\"1046\":1,\"1211\":1,\"1292\":1,\"2150\":1}}],[\"部分数据\",{\"1\":{\"956\":1}}],[\"部署的bean\",{\"1\":{\"2552\":1}}],[\"部署等等\",{\"1\":{\"709\":1}}],[\"部署到tomcat服务器上运行时不会放在web\",{\"1\":{\"690\":1,\"691\":1}}],[\"部署到tomcat服务器上运行时要放在web\",{\"1\":{\"689\":1}}],[\"部署\",{\"0\":{\"668\":1}}],[\"部署node\",{\"0\":{\"85\":1}}],[\"均用于存于较短的字符串\",{\"1\":{\"941\":1}}],[\"短文本数据\",{\"1\":{\"941\":1}}],[\"描述成功请求的类型的字符串\",{\"1\":{\"2155\":1}}],[\"描述响应状态的字符串\",{\"1\":{\"2155\":1}}],[\"描述状态的字符串\",{\"1\":{\"2144\":1}}],[\"描述\",{\"1\":{\"941\":1,\"1405\":1,\"1408\":2,\"1411\":2,\"1432\":1,\"1435\":1,\"1438\":1,\"1441\":1,\"1451\":1,\"1452\":1,\"1958\":1,\"1959\":1,\"2029\":2,\"2030\":2,\"2231\":1,\"2437\":1}}],[\"浮点数类型的宽度不会自动扩充\",{\"1\":{\"940\":1}}],[\"浮点数类型\",{\"0\":{\"940\":1},\"1\":{\"940\":1}}],[\"浮动语法\",{\"0\":{\"1520\":1}}],[\"浮动原理\",{\"0\":{\"1519\":1}}],[\"浮动演示\",{\"0\":{\"1518\":1}}],[\"浮动后一定不会将文字挡住\",{\"1\":{\"1517\":1,\"1518\":96}}],[\"浮动设计的初衷为了解决文字环绕图片问题\",{\"1\":{\"1517\":1,\"1518\":96}}],[\"浮动\",{\"0\":{\"1516\":1,\"3101\":1},\"1\":{\"57\":1,\"1517\":1}}],[\"展现特定的组件\",{\"1\":{\"1717\":1}}],[\"展示方式\",{\"1\":{\"1198\":1}}],[\"展示表的字段详细信息\",{\"1\":{\"937\":1}}],[\"展开警告说明\",{\"1\":{\"638\":1}}],[\"展开代码块\",{\"1\":{\"616\":2}}],[\"展开\",{\"0\":{\"616\":1}}],[\"班级\",{\"1\":{\"937\":2}}],[\"性别默认值是男\",{\"1\":{\"937\":1}}],[\"性别\",{\"1\":{\"937\":2,\"1335\":1}}],[\"性能检测\",{\"1\":{\"2523\":1,\"2619\":1}}],[\"性能高\",{\"1\":{\"2438\":1}}],[\"性能低\",{\"1\":{\"2438\":1}}],[\"性能执行分析\",{\"1\":{\"2294\":1}}],[\"性能分析拦截器\",{\"1\":{\"2294\":1}}],[\"性能分析\",{\"0\":{\"2294\":1}}],[\"性能不太好\",{\"1\":{\"2195\":1}}],[\"性能基本无损耗\",{\"1\":{\"2179\":1}}],[\"性能\",{\"1\":{\"1112\":1,\"2438\":1}}],[\"性能更好\",{\"1\":{\"481\":1,\"2481\":1}}],[\"性能非常好\",{\"1\":{\"83\":1}}],[\"姓名不能为空\",{\"1\":{\"937\":1}}],[\"姓名\",{\"1\":{\"937\":2,\"1068\":2,\"2182\":1,\"2857\":1}}],[\"事实上\",{\"1\":{\"2823\":1}}],[\"事务管理\",{\"1\":{\"2903\":1,\"2908\":1}}],[\"事务管理器接口\",{\"1\":{\"2699\":1}}],[\"事务方法之间调用时事务如何传播\",{\"1\":{\"2726\":1}}],[\"事务是如何管理的\",{\"1\":{\"2724\":1}}],[\"事务是应用中不可再分的最小的逻辑执行体\",{\"1\":{\"2685\":1}}],[\"事务被处理为顺序执行\",{\"1\":{\"2723\":1}}],[\"事务结束\",{\"1\":{\"2715\":1}}],[\"事务结束的边界是commit或者rollback方法的调用\",{\"1\":{\"1233\":1}}],[\"事务在执行过程中\",{\"1\":{\"2715\":1}}],[\"事务在操作时的理想状态\",{\"1\":{\"1111\":1}}],[\"事务生效\",{\"1\":{\"2708\":1,\"2712\":1}}],[\"事务1再次读取时查到的记录就变为了5条\",{\"1\":{\"2692\":1}}],[\"事务1读取了所有工资大于3000的人\",{\"1\":{\"2692\":1}}],[\"事务1中的a先生读取自己的工资为\",{\"1\":{\"2692\":1}}],[\"事务2中的b先生就修改了a的工资为2000\",{\"1\":{\"2692\":1}}],[\"事务回滚\",{\"1\":{\"2690\":1}}],[\"事务b\",{\"1\":{\"2690\":1,\"2691\":1,\"2692\":1}}],[\"事务a\",{\"1\":{\"2690\":1,\"2691\":1,\"2692\":1}}],[\"事务中的属性\",{\"0\":{\"2713\":1}}],[\"事务中的所有操作可以看做一个原子\",{\"1\":{\"2685\":1}}],[\"事务中的操作要么都发生\",{\"1\":{\"1102\":1}}],[\"事务处理可以确保除非事务性序列内的所有操作都成功完成\",{\"1\":{\"2684\":1}}],[\"事务切面的操作都浪费了\",{\"1\":{\"2647\":1}}],[\"事务模块\",{\"1\":{\"2530\":1}}],[\"事务控制等\",{\"1\":{\"2619\":1}}],[\"事务控制\",{\"1\":{\"2523\":1}}],[\"事务控制语言\",{\"0\":{\"936\":1}}],[\"事务配置\",{\"0\":{\"2316\":1}}],[\"事务开始的边界则不是那么明显了\",{\"1\":{\"1233\":1}}],[\"事务开启之后\",{\"1\":{\"1100\":1}}],[\"事务操作方法都位于接口java\",{\"1\":{\"1233\":1}}],[\"事务操作是自动提交\",{\"1\":{\"1233\":1}}],[\"事务概念\",{\"1\":{\"1233\":1}}],[\"事务\",{\"0\":{\"1232\":1},\"1\":{\"2374\":1,\"2683\":1}}],[\"事务必须使数据库从一个一致性状态变换到另外一个一致性状态\",{\"1\":{\"1102\":1}}],[\"事务日志只有在得到commit命令才会同步到数据表中\",{\"1\":{\"1100\":1}}],[\"事务的传播行为类型\",{\"1\":{\"2725\":1}}],[\"事务的管理应该放在我们的service层进行处理\",{\"1\":{\"2699\":1}}],[\"事务的并发问题\",{\"0\":{\"2689\":1}}],[\"事务的特性\",{\"0\":{\"2684\":1}}],[\"事务的概念\",{\"0\":{\"2683\":1}}],[\"事务的概述\",{\"0\":{\"1098\":1}}],[\"事务的回顾\",{\"0\":{\"2682\":1}}],[\"事务的控制可以托管给spring\",{\"1\":{\"2524\":1}}],[\"事务的四个隔离级别\",{\"0\":{\"1112\":1}}],[\"事务的四大特性\",{\"0\":{\"1102\":1}}],[\"事务的隔离级别从低到高依次为\",{\"1\":{\"2693\":1}}],[\"事务的隔离级别用于决定如何控制并发用户读写数据的操作\",{\"1\":{\"2693\":1}}],[\"事务的隔离级别\",{\"0\":{\"1110\":1,\"2693\":1}}],[\"事务的隔离性是指一个事务的执行不能被其他事务干扰\",{\"1\":{\"1102\":1}}],[\"事务的原理\",{\"0\":{\"1100\":1}}],[\"事务tcl\",{\"0\":{\"1097\":1}}],[\"事件修饰符\",{\"0\":{\"1655\":1}}],[\"事件名作为方法\",{\"1\":{\"1572\":1}}],[\"事件的名称=\",{\"1\":{\"1572\":1}}],[\"事件的触发\",{\"1\":{\"1572\":1}}],[\"事件的绑定\",{\"1\":{\"1572\":1}}],[\"事件的绑定和触发\",{\"0\":{\"1429\":1}}],[\"事件解绑定\",{\"1\":{\"1572\":1}}],[\"事件驱动\",{\"1\":{\"1374\":1}}],[\"事件\",{\"0\":{\"1426\":1,\"3096\":1},\"1\":{\"56\":1,\"1374\":1,\"1645\":1}}],[\"退出登录的mysql\",{\"1\":{\"1155\":1}}],[\"退出数据库可以使用quit或者exit命令完成\",{\"1\":{\"927\":1}}],[\"退出数据库\",{\"0\":{\"927\":1}}],[\"退出队列\",{\"1\":{\"356\":1}}],[\"密码不少于5位\",{\"1\":{\"1578\":1}}],[\"密码框\",{\"0\":{\"1334\":1},\"1\":{\"1334\":1}}],[\"密码框等必须要加入一个属性\",{\"1\":{\"1330\":1}}],[\"密码在传输过程中必须使用\",{\"1\":{\"1216\":1}}],[\"密码可以为空\",{\"1\":{\"1115\":1}}],[\"密码\",{\"1\":{\"925\":1,\"1115\":2,\"1330\":1,\"1514\":1,\"1907\":1,\"2055\":1,\"2060\":1,\"2094\":1,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"系统迁移程序已经启动\",{\"1\":{\"2104\":1}}],[\"系统加载时进行信息初始化\",{\"1\":{\"2066\":1}}],[\"系统环境不同\",{\"1\":{\"1757\":1}}],[\"系统修饰符指的是通过一些指定的按键配合鼠标点击或者键盘事件进行事件监听\",{\"1\":{\"1666\":1}}],[\"系统修饰符\",{\"0\":{\"1666\":1}}],[\"系统会自动分为最多\",{\"1\":{\"1599\":1}}],[\"系统将自动调用commit\",{\"1\":{\"1233\":1}}],[\"系统名称缩写\",{\"1\":{\"983\":1}}],[\"系统启动时开启mysql服务\",{\"1\":{\"922\":1}}],[\"系列\",{\"1\":{\"62\":1}}],[\"记录每次请求中如下的信息并存储进入日志文件\",{\"1\":{\"2087\":1}}],[\"记录每一个对象状态的设置\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"记录请求日志\",{\"0\":{\"2087\":1}}],[\"记录了\",{\"1\":{\"1686\":1}}],[\"记住mysql的监听端口默认是3306\",{\"1\":{\"922\":1}}],[\"记得要序列化\",{\"1\":{\"511\":1,\"512\":1,\"513\":1}}],[\"独立mysql服务器\",{\"1\":{\"922\":1}}],[\"换行\",{\"0\":{\"1305\":1},\"1\":{\"1298\":1,\"1305\":1,\"1512\":1,\"2301\":1,\"2487\":1}}],[\"换句话说\",{\"1\":{\"920\":1}}],[\"换成其它类型\",{\"1\":{\"373\":1}}],[\"社区版可以理解为是企业版的测试版\",{\"1\":{\"920\":1}}],[\"社区版包含所有mysql的最新功能\",{\"1\":{\"920\":1}}],[\"社区版与企业版主要的区别是\",{\"1\":{\"920\":1}}],[\"社区版是完全免费的\",{\"1\":{\"920\":1}}],[\"价格相对于昂贵的oracle\",{\"1\":{\"920\":1}}],[\"轻量级容器\",{\"1\":{\"2482\":1}}],[\"轻量级的关系型数据库\",{\"1\":{\"920\":1}}],[\"轻量级\",{\"1\":{\"920\":1,\"2124\":1}}],[\"跨会话\",{\"1\":{\"1923\":1}}],[\"跨请求\",{\"1\":{\"1923\":1}}],[\"跨数据库拷贝表\",{\"0\":{\"1079\":1}}],[\"跨平台性\",{\"1\":{\"1374\":1}}],[\"跨平台\",{\"1\":{\"920\":1}}],[\"跨团队协作\",{\"0\":{\"756\":1},\"1\":{\"723\":1}}],[\"现已被广泛应用于互联网上的中小型网站中\",{\"1\":{\"919\":1}}],[\"现在一般不用\",{\"1\":{\"2740\":1}}],[\"现在使用\",{\"1\":{\"1601\":1}}],[\"现在计算机存储和处理的数据范围十分广泛\",{\"1\":{\"908\":1}}],[\"现在的情景是\",{\"1\":{\"757\":1}}],[\"现在的struts2有一部分也是基于注解的了\",{\"1\":{\"534\":1}}],[\"现在产生冲突的内容\",{\"1\":{\"750\":1}}],[\"现在连\",{\"1\":{\"561\":1}}],[\"速度快\",{\"1\":{\"919\":1,\"920\":1}}],[\"毫秒为单位\",{\"1\":{\"2481\":1}}],[\"毫秒\",{\"1\":{\"1417\":1,\"2030\":1,\"2137\":1}}],[\"毫秒数\",{\"1\":{\"374\":1}}],[\"毫无开放性可言\",{\"1\":{\"919\":1}}],[\"金融\",{\"1\":{\"919\":1}}],[\"暴露了很多难以克服的问题\",{\"1\":{\"918\":1}}],[\"泛指非关系型数据库\",{\"1\":{\"918\":1}}],[\"泛型下限\",{\"1\":{\"248\":1}}],[\"泛型上限\",{\"1\":{\"247\":1}}],[\"泛型受限\",{\"0\":{\"246\":1}}],[\"泛型的参数继承关系\",{\"1\":{\"242\":1}}],[\"泛型的类型\",{\"1\":{\"235\":1}}],[\"泛型参数的继承关系\",{\"0\":{\"242\":1}}],[\"泛型是啥\",{\"1\":{\"241\":1}}],[\"泛型方法可否是静态方法\",{\"1\":{\"241\":1}}],[\"泛型方法定义的时候\",{\"1\":{\"241\":1}}],[\"泛型方法对应的那个泛型参数类型\",{\"1\":{\"241\":1}}],[\"泛型方法有要求\",{\"1\":{\"241\":1}}],[\"泛型方法\",{\"0\":{\"241\":1}}],[\"泛型如果不指定\",{\"1\":{\"240\":1}}],[\"泛型接口\",{\"0\":{\"237\":1}}],[\"泛型类中的静态方法不能使用类的泛型\",{\"1\":{\"240\":1}}],[\"泛型类的构造器的写法\",{\"1\":{\"240\":1}}],[\"泛型类可以定义多个参数类型\",{\"1\":{\"240\":1}}],[\"泛型类\",{\"0\":{\"237\":1}}],[\"泛型实际就是\",{\"1\":{\"235\":1}}],[\"泛型\",{\"0\":{\"231\":1,\"3003\":1},\"1\":{\"37\":1,\"2214\":1}}],[\"人员职责明确\",{\"0\":{\"2038\":1}}],[\"人们将servlet\",{\"1\":{\"1548\":1}}],[\"人们将\",{\"1\":{\"1548\":1}}],[\"人对浏览器或者浏览器对网页做了什么事\",{\"1\":{\"1428\":1}}],[\"人事管理系统\",{\"1\":{\"911\":1}}],[\"人为的制造阻塞事件\",{\"1\":{\"459\":1}}],[\"目的是为了让每个组件数据隔离\",{\"1\":{\"1704\":1}}],[\"目的是为了优化页面的性能\",{\"1\":{\"1639\":1}}],[\"目的是在浏览器中提供友好提示<div\",{\"1\":{\"1690\":1}}],[\"目标页面地址\",{\"1\":{\"2863\":1,\"2864\":1}}],[\"目标类并没有被放到ioc容器中\",{\"1\":{\"2658\":1}}],[\"目标类的class\",{\"1\":{\"1266\":1,\"1275\":1}}],[\"目标对象\",{\"0\":{\"2624\":1}}],[\"目标资源\",{\"1\":{\"1330\":1}}],[\"目标\",{\"1\":{\"1167\":1,\"2503\":1}}],[\"目前常用的存储引擎有innodb\",{\"1\":{\"2683\":1}}],[\"目前我们能开发中不再使用这种方式\",{\"1\":{\"2336\":1}}],[\"目前位置log4j分为log4j1和log4j2\",{\"1\":{\"2305\":1}}],[\"目前使用较广的是版本2\",{\"1\":{\"1558\":1}}],[\"目前该版本是官方主要更新维护的版本\",{\"1\":{\"1542\":1}}],[\"目前最新版本是v3\",{\"1\":{\"1541\":1}}],[\"目前最流行的javascript函数库之一\",{\"1\":{\"1541\":1}}],[\"目前最常见的数据库模型主要是\",{\"1\":{\"916\":1}}],[\"目前大多数索引都采用btree树方式构建\",{\"1\":{\"1125\":1}}],[\"目前\",{\"1\":{\"910\":1}}],[\"目录中\",{\"1\":{\"2790\":1}}],[\"目录中的内容\",{\"1\":{\"400\":1}}],[\"目录结构\",{\"0\":{\"1776\":1,\"1905\":1}}],[\"目录\",{\"1\":{\"1744\":1}}],[\"目录的各种信息\",{\"1\":{\"400\":1}}],[\"目录的操作\",{\"0\":{\"388\":1}}],[\"目录特有的属性\",{\"1\":{\"390\":1}}],[\"允许定义方法拦截器和切入点\",{\"1\":{\"2533\":1}}],[\"允许跳转\",{\"1\":{\"1910\":1}}],[\"允许访问jmx代理和状态页面\",{\"1\":{\"1759\":1}}],[\"允许访问文本界面和状态页面\",{\"1\":{\"1759\":1}}],[\"允许访问html\",{\"1\":{\"1759\":1}}],[\"允许客户端的连接数量是有限制的\",{\"1\":{\"1757\":1}}],[\"允许我们自己定义对象\",{\"1\":{\"1418\":1}}],[\"允许长度0~m个字符长度的定长二进制字符串\",{\"1\":{\"941\":2}}],[\"允许长度0~m个字符长度的定长字符串\",{\"1\":{\"941\":2}}],[\"允许在同一个对方多次使用同一个注解\",{\"1\":{\"904\":1}}],[\"允许使用null键和null值\",{\"1\":{\"290\":1}}],[\"城市\",{\"1\":{\"901\":1,\"1046\":2}}],[\"区分开发环境和生产环境\",{\"1\":{\"1616\":1}}],[\"区域\",{\"1\":{\"901\":1}}],[\"区别4\",{\"1\":{\"1376\":1}}],[\"区别3\",{\"1\":{\"1376\":1}}],[\"区别2\",{\"1\":{\"1376\":1}}],[\"区别1\",{\"1\":{\"1376\":1}}],[\"区别\",{\"0\":{\"33\":1,\"434\":1,\"1902\":1},\"1\":{\"1248\":1,\"1258\":1}}],[\"十年前\",{\"1\":{\"895\":1}}],[\"十年后\",{\"1\":{\"895\":1}}],[\"纳秒\",{\"1\":{\"893\":4}}],[\"秒钟\",{\"1\":{\"1892\":1}}],[\"秒和纳秒\",{\"1\":{\"898\":1}}],[\"秒\",{\"1\":{\"893\":4,\"1417\":1,\"1458\":1,\"1459\":1,\"2030\":1,\"2298\":1,\"2301\":1}}],[\"星期\",{\"1\":{\"893\":8}}],[\"星期中的天数\",{\"1\":{\"374\":1}}],[\"伊斯兰历\",{\"1\":{\"892\":1}}],[\"泰国佛教历\",{\"1\":{\"892\":1}}],[\"闰年有366天\",{\"1\":{\"892\":1}}],[\"平板\",{\"1\":{\"1600\":1}}],[\"平板电脑和手机\",{\"1\":{\"1559\":1}}],[\"平台\",{\"1\":{\"1372\":1}}],[\"平均\",{\"1\":{\"1041\":1}}],[\"平均值\",{\"1\":{\"880\":2}}],[\"平年有365天\",{\"1\":{\"892\":1}}],[\"针对不同的框架\",{\"1\":{\"2699\":1}}],[\"针对这样的需求一般由三种解决方式\",{\"1\":{\"2408\":1}}],[\"针对这些问题\",{\"1\":{\"889\":1}}],[\"针对where后的条件封装\",{\"1\":{\"2252\":1}}],[\"针对于一些特殊情况\",{\"1\":{\"2155\":1}}],[\"针对于处理\",{\"1\":{\"1820\":1}}],[\"针对所有设备\",{\"1\":{\"1600\":1}}],[\"针对上级标签而言\",{\"0\":{\"1552\":1}}],[\"针对整个页面而言\",{\"0\":{\"1551\":1}}],[\"针对准备入小学的家长开展相关课程教育\",{\"1\":{\"1301\":9}}],[\"针对项目中的关键点进行测试\",{\"1\":{\"664\":1}}],[\"二进制的形式返回\",{\"1\":{\"2651\":1}}],[\"二进制形式的极大文本数据\",{\"1\":{\"941\":1}}],[\"二进制形式的中等长度文本数据\",{\"1\":{\"941\":1}}],[\"二进制形式的长文本数据\",{\"1\":{\"941\":1}}],[\"二进制形式的短文本数据\",{\"1\":{\"941\":1}}],[\"二级缓存机制\",{\"0\":{\"2494\":1}}],[\"二级缓存是以\",{\"1\":{\"2480\":1}}],[\"二级缓存是以namespace为标记的缓存\",{\"1\":{\"2477\":1}}],[\"二级缓存是在sqlsessionfactory\",{\"1\":{\"2472\":1}}],[\"二级缓存\",{\"0\":{\"2477\":1},\"1\":{\"2492\":1}}],[\"二级域名是依附于一级域名之下的附属分区域名\",{\"1\":{\"1891\":1}}],[\"二者端口号和ip其实是不一致的\",{\"1\":{\"2169\":1}}],[\"二者不同的是cookie是通过客户端浏览器实现会话的维持\",{\"1\":{\"1882\":1}}],[\"二者区别\",{\"0\":{\"1597\":1}}],[\"二者之间的api是不通用的\",{\"1\":{\"1573\":1}}],[\"二元\",{\"1\":{\"1156\":1}}],[\"二维表\",{\"1\":{\"917\":1}}],[\"二\",{\"1\":{\"886\":1,\"1718\":1,\"1721\":1}}],[\"二叉树\",{\"1\":{\"288\":1}}],[\"串行化\",{\"0\":{\"2723\":1},\"1\":{\"1112\":1,\"2693\":1}}],[\"串行流\",{\"1\":{\"885\":1,\"888\":4}}],[\"串行的stream流\",{\"0\":{\"885\":1}}],[\"流容器的响应式布局规则是随着窗口大小的变化一同变化\",{\"1\":{\"1597\":1}}],[\"流程控制\",{\"0\":{\"1365\":1}}],[\"流程\",{\"0\":{\"1250\":1}}],[\"流程图\",{\"1\":{\"1185\":1}}],[\"流程函数\",{\"0\":{\"1094\":1}}],[\"流是通过多个线程进行处理的\",{\"1\":{\"887\":1}}],[\"流是多个帧组成的数据流\",{\"1\":{\"167\":1}}],[\"流中的数据进行拼接操作\",{\"0\":{\"883\":1}}],[\"流中的数据进行分区操作\",{\"0\":{\"882\":1}}],[\"流中的数据进行分组操作\",{\"0\":{\"881\":1}}],[\"流中的数据进行聚合计算\",{\"0\":{\"880\":1}}],[\"孙火旺\",{\"1\":{\"876\":1}}],[\"李白\",{\"1\":{\"2246\":1}}],[\"李雷\",{\"1\":{\"1972\":1}}],[\"李旺旺\",{\"1\":{\"876\":1}}],[\"李四=\",{\"1\":{\"881\":2}}],[\"李四\",{\"1\":{\"278\":1,\"281\":1,\"352\":1,\"356\":1,\"853\":1,\"856\":2,\"860\":2,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":2,\"869\":1,\"873\":1,\"876\":1,\"880\":7,\"881\":6,\"882\":2,\"883\":5,\"972\":1,\"1424\":1,\"1425\":1,\"1713\":1,\"1831\":1,\"2208\":1,\"2211\":1,\"2366\":1,\"2558\":1}}],[\"赵旺\",{\"1\":{\"876\":1}}],[\"赵麻子\",{\"1\":{\"876\":2}}],[\"赵六\",{\"1\":{\"352\":1,\"2220\":1,\"2559\":1}}],[\"王二妹\",{\"1\":{\"876\":2}}],[\"王五=\",{\"1\":{\"881\":2}}],[\"王五\",{\"1\":{\"278\":1,\"281\":1,\"352\":1,\"356\":1,\"853\":2,\"856\":2,\"873\":1,\"880\":7,\"881\":6,\"882\":2,\"883\":5,\"1713\":1,\"1831\":1,\"2220\":1,\"2559\":1}}],[\"综合demo\",{\"0\":{\"1892\":1}}],[\"综合案例开发\",{\"0\":{\"1973\":1}}],[\"综合案例\",{\"0\":{\"876\":1,\"2827\":1,\"2857\":1}}],[\"综上所述\",{\"1\":{\"296\":1,\"1824\":1}}],[\"求1\",{\"1\":{\"1367\":1}}],[\"求和\",{\"1\":{\"873\":2,\"880\":2,\"1041\":1}}],[\"求商\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1}}],[\"跳过前几个\",{\"1\":{\"861\":1}}],[\"跳转至登录页\",{\"1\":{\"2063\":1}}],[\"跳转至jsp\",{\"1\":{\"1972\":1}}],[\"跳转至main\",{\"1\":{\"1910\":1}}],[\"跳转至\",{\"1\":{\"1909\":1}}],[\"跳转\",{\"1\":{\"1463\":1}}],[\"跳转的目标找不到\",{\"1\":{\"1312\":1}}],[\"跳转到欢迎页\",{\"1\":{\"2062\":1}}],[\"跳转到登录页\",{\"1\":{\"1904\":1}}],[\"跳转到指定地址\",{\"1\":{\"1462\":1}}],[\"跳转到网络资源\",{\"1\":{\"1312\":2}}],[\"跳转到自身页面\",{\"1\":{\"1312\":1}}],[\"跳转到本地资源\",{\"1\":{\"1312\":1}}],[\"跳转到方法声明\",{\"1\":{\"643\":1}}],[\"跳转结构\",{\"0\":{\"226\":1},\"1\":{\"225\":1,\"261\":1,\"302\":1}}],[\"逐个匹配\",{\"1\":{\"2777\":1}}],[\"逐一处理\",{\"1\":{\"861\":1}}],[\"逐层访问对象的各种属性\",{\"1\":{\"142\":1}}],[\"统上运行\",{\"1\":{\"1548\":1}}],[\"统配选择器\",{\"1\":{\"1548\":1}}],[\"统一异常等功能\",{\"1\":{\"2780\":1}}],[\"统一使用jdk1\",{\"1\":{\"2269\":1}}],[\"统一设置他的编码格式\",{\"1\":{\"2054\":1}}],[\"统一采用var声明\",{\"1\":{\"1376\":1}}],[\"统一资源定位符\",{\"1\":{\"1324\":1}}],[\"统一管理依赖的版本\",{\"1\":{\"714\":1,\"715\":1}}],[\"统一管理当前模块的jar包的版本\",{\"1\":{\"699\":1}}],[\"统计实时在线人数\",{\"0\":{\"2088\":1}}],[\"统计网站的访问量等等\",{\"1\":{\"2066\":1}}],[\"统计每个分类的商品数量\",{\"1\":{\"1072\":1}}],[\"统计数量\",{\"1\":{\"880\":1}}],[\"统计a出现的次数\",{\"1\":{\"873\":1}}],[\"统计全部的年龄合\",{\"1\":{\"873\":1}}],[\"统计个数\",{\"1\":{\"861\":1}}],[\"统计\",{\"1\":{\"857\":1}}],[\"映射方式\",{\"1\":{\"2771\":1}}],[\"映射的抽象层实现\",{\"1\":{\"2530\":1}}],[\"映射的结果类型\",{\"1\":{\"2420\":1}}],[\"映射到javabean某个\",{\"1\":{\"2420\":2}}],[\"映射规则集的唯一标识\",{\"1\":{\"2420\":1}}],[\"映射器\",{\"1\":{\"2374\":1}}],[\"映射中使用了\",{\"1\":{\"2334\":1}}],[\"映射语句了\",{\"1\":{\"2319\":1}}],[\"映射文件的加载方式\",{\"0\":{\"2319\":1}}],[\"映射成数据库中的记录\",{\"1\":{\"2196\":1}}],[\"映射\",{\"1\":{\"857\":1,\"861\":1,\"2756\":1}}],[\"切点方法出现异常时运行的增强功能\",{\"1\":{\"2642\":1}}],[\"切点方法正常运行结束后增强的功能\",{\"1\":{\"2641\":1}}],[\"切点方法执行之前先执行的功能\",{\"1\":{\"2640\":1}}],[\"切面的优先级控制切面的内外嵌套顺序\",{\"1\":{\"2645\":1}}],[\"切面\",{\"0\":{\"2625\":1}}],[\"切入点表达式重用\",{\"1\":{\"2635\":1}}],[\"切入点表达式\",{\"0\":{\"2632\":1}}],[\"切入点\",{\"0\":{\"2622\":1}}],[\"切片\",{\"1\":{\"857\":1}}],[\"切换class值\",{\"1\":{\"1568\":1}}],[\"切换mysql数据库\",{\"1\":{\"928\":1}}],[\"切换当前数据库的命令\",{\"1\":{\"926\":1}}],[\"切换分支的本质就是移动head指针\",{\"1\":{\"748\":1}}],[\"切换分支\",{\"0\":{\"781\":1},\"1\":{\"748\":1}}],[\"切换到上一个匹配\",{\"1\":{\"646\":1}}],[\"切换到下一个匹配\",{\"1\":{\"646\":1}}],[\"素材\",{\"1\":{\"856\":2}}],[\"满足这些约束条件和原则的应用程序或设计就是restful\",{\"1\":{\"2823\":1}}],[\"满足条件后执行指定的语句\",{\"1\":{\"2449\":1}}],[\"满足各类使用需求\",{\"1\":{\"2179\":1}}],[\"满足线程安全的要求\",{\"1\":{\"889\":1}}],[\"满足\",{\"1\":{\"848\":1}}],[\"满载\",{\"1\":{\"344\":1}}],[\"习惯上还是放在\",{\"1\":{\"809\":1}}],[\"较大的数\",{\"1\":{\"2646\":1}}],[\"较大的版本上线前\",{\"1\":{\"805\":1}}],[\"较小的数\",{\"1\":{\"2646\":1}}],[\"较于单核cpu来讲\",{\"1\":{\"452\":1}}],[\"视频\",{\"1\":{\"1310\":1}}],[\"视频等各种内容\",{\"1\":{\"1295\":1}}],[\"视频等\",{\"1\":{\"908\":1}}],[\"视情况可以删除该分支\",{\"1\":{\"804\":1}}],[\"视图类型的支持\",{\"1\":{\"2775\":1}}],[\"视图对象\",{\"1\":{\"2774\":1}}],[\"视图解析器无法解析jsp\",{\"1\":{\"2878\":1}}],[\"视图解析器\",{\"0\":{\"2765\":1,\"2774\":1},\"1\":{\"2898\":1,\"2901\":1}}],[\"视图层\",{\"1\":{\"2740\":1}}],[\"视图层和业务层分离\",{\"1\":{\"2036\":1}}],[\"视图部分封装了应用程序的输出形式\",{\"1\":{\"2034\":1}}],[\"视图无法优化\",{\"1\":{\"1143\":1}}],[\"视图的渲染都交给vue来执行\",{\"1\":{\"1614\":1}}],[\"视图的缺点\",{\"0\":{\"1143\":1}}],[\"视图的优点\",{\"0\":{\"1142\":1}}],[\"视图的使用\",{\"0\":{\"1138\":1}}],[\"视图名\",{\"1\":{\"1139\":1,\"1140\":1,\"1141\":1}}],[\"视图是一张特殊的表\",{\"1\":{\"1137\":1}}],[\"视图等对象\",{\"1\":{\"926\":1}}],[\"视图\",{\"0\":{\"1137\":1,\"2775\":1},\"1\":{\"120\":1,\"934\":1,\"983\":1,\"2034\":1,\"2531\":1,\"2774\":1}}],[\"复杂\",{\"1\":{\"2438\":1}}],[\"复杂类型\",{\"1\":{\"2420\":2}}],[\"复杂的操作进行函数化封装\",{\"1\":{\"1541\":1}}],[\"复杂的数据库操作也可以在数据库服务器中完成\",{\"1\":{\"1146\":1}}],[\"复杂分支\",{\"0\":{\"800\":1}}],[\"复合属性选择器\",{\"1\":{\"1549\":1}}],[\"复合数据类型包括对象和数组两种\",{\"1\":{\"1359\":1}}],[\"复合数据类型object\",{\"0\":{\"1359\":1}}],[\"复合索引\",{\"1\":{\"1129\":1,\"1135\":1}}],[\"复合主键\",{\"1\":{\"985\":1}}],[\"复制字符串指定次数\",{\"1\":{\"1405\":1,\"1406\":1}}],[\"复制数据\",{\"0\":{\"1082\":1}}],[\"复制表\",{\"0\":{\"1075\":1}}],[\"复制里面的内容\",{\"1\":{\"763\":1}}],[\"复制和删除行\",{\"0\":{\"614\":1}}],[\"复制文件\",{\"0\":{\"409\":1}}],[\"复制子数组的内容\",{\"1\":{\"404\":1}}],[\"怎么办\",{\"1\":{\"2874\":1}}],[\"怎么能区分出来两种不同级别的缓存呢\",{\"1\":{\"2492\":1}}],[\"怎么封装\",{\"0\":{\"1226\":1}}],[\"怎么做\",{\"1\":{\"930\":1}}],[\"怎么忽略\",{\"0\":{\"771\":1}}],[\"怎么来保证后续的代码依旧执行呢\",{\"1\":{\"23\":1}}],[\"哪些文件要忽略\",{\"0\":{\"766\":1}}],[\"账户和角色\",{\"1\":{\"922\":1}}],[\"账户\",{\"1\":{\"763\":1}}],[\"⑨\",{\"1\":{\"760\":1}}],[\"⑧\",{\"1\":{\"760\":1}}],[\"填写title和key\",{\"1\":{\"763\":1}}],[\"填写pull\",{\"1\":{\"760\":1}}],[\"填充\",{\"1\":{\"300\":1,\"1527\":1}}],[\"产生了自关联\",{\"1\":{\"1211\":1}}],[\"产生分支\",{\"1\":{\"760\":1}}],[\"产品配置product\",{\"1\":{\"922\":1}}],[\"产品类\",{\"1\":{\"489\":1,\"490\":1}}],[\"背景\",{\"0\":{\"759\":1}}],[\"叉到你的碗里～\",{\"1\":{\"757\":1}}],[\"团队协作的常用流程\",{\"0\":{\"755\":1}}],[\"团队内协作\",{\"1\":{\"723\":1}}],[\"各部分的主要责任\",{\"1\":{\"2197\":1}}],[\"各种各样样式的集合\",{\"1\":{\"1466\":1}}],[\"各种浏览器支持javascript的程度是不一样的\",{\"1\":{\"1375\":1}}],[\"各自开发各自的模块\",{\"1\":{\"753\":1}}],[\"各个分支在开发过程中\",{\"1\":{\"747\":1}}],[\"养成良好的操作习惯\",{\"1\":{\"753\":1}}],[\"擅自修改同事代码\",{\"1\":{\"753\":1}}],[\"决定过滤器的执行顺序是由filter\",{\"1\":{\"2047\":1}}],[\"决定先调用哪个filter\",{\"1\":{\"2046\":1}}],[\"决定要使用的内容\",{\"1\":{\"752\":1}}],[\"决定将\",{\"1\":{\"70\":1}}],[\"穿梭\",{\"0\":{\"740\":1,\"742\":1}}],[\"绿色框内归bom\",{\"1\":{\"1447\":1}}],[\"绿色表示文件在暂存区\",{\"1\":{\"734\":1}}],[\"绿茶\",{\"1\":{\"65\":1}}],[\"干净\",{\"1\":{\"729\":1}}],[\"工厂模式返回bean对象\",{\"0\":{\"2550\":1}}],[\"工作再到释放\",{\"1\":{\"1728\":1}}],[\"工作中如果我们本地调试完后需要部署代码前\",{\"1\":{\"1687\":1}}],[\"工作区有个隐藏目录\",{\"1\":{\"728\":1}}],[\"工作区\",{\"1\":{\"728\":1}}],[\"工具\",{\"0\":{\"2891\":1}}],[\"工具包\",{\"1\":{\"2756\":1}}],[\"工具化管理程序代码\",{\"1\":{\"2040\":1}}],[\"工具软件来生成信息\",{\"1\":{\"536\":1}}],[\"工具栏组件\",{\"1\":{\"62\":1}}],[\"命中缓存的次数\",{\"1\":{\"2479\":1}}],[\"命令的作用是检验文件代码的合格性\",{\"1\":{\"1687\":1}}],[\"命令默认创建它\",{\"1\":{\"744\":1}}],[\"命令作用\",{\"1\":{\"731\":1}}],[\"命令名称\",{\"1\":{\"731\":1,\"748\":1}}],[\"命令可以查看工作区和暂存区里面最新版本的区别\",{\"1\":{\"729\":1}}],[\"命令\",{\"1\":{\"726\":1,\"763\":1,\"1154\":2}}],[\"命名规范\",{\"1\":{\"685\":1}}],[\"签名的作用是区分不同操作者身份\",{\"1\":{\"726\":1}}],[\"浏览协议\",{\"1\":{\"725\":1}}],[\"浏览器不关闭\",{\"1\":{\"2923\":1,\"2924\":1}}],[\"浏览器出现500的错误\",{\"1\":{\"2859\":1}}],[\"浏览器请求该资源的地址是\",{\"1\":{\"2169\":1}}],[\"浏览器只是针对同源策略的一种实现\",{\"1\":{\"2168\":1}}],[\"浏览器能记下历史记录中的静态页面\",{\"1\":{\"2102\":1}}],[\"浏览器或者无线浏览器\",{\"1\":{\"2037\":1}}],[\"浏览器失去jsessionid\",{\"1\":{\"1920\":1}}],[\"浏览器和服务器之间发生多次请求和响应有效\",{\"1\":{\"1920\":1}}],[\"浏览器关闭后cookie对象销毁\",{\"1\":{\"1890\":1}}],[\"浏览器每次请求时都会把与当前访问的域名相关的cookie在请求中提交到服务端\",{\"1\":{\"1885\":1}}],[\"浏览器在保存同一域名所返回cookie的数量是有限的\",{\"1\":{\"1885\":1}}],[\"浏览器在浏览同一个带有javascript脚本的网页时\",{\"1\":{\"1375\":1}}],[\"浏览器会携带之前的jsessionid的cookie\",{\"1\":{\"1894\":1}}],[\"浏览器会携带之前的cookie发送给服务器\",{\"1\":{\"1884\":1}}],[\"浏览器会对cookie做持久化处理\",{\"1\":{\"1890\":1}}],[\"浏览器会缓存cookie对象\",{\"1\":{\"1890\":1}}],[\"浏览器会自动使用指定应用程序来打开\",{\"1\":{\"206\":1}}],[\"浏览器会自动再次发送request去获取图片\",{\"1\":{\"173\":1}}],[\"浏览器端接收到另一个web资源的响应结果\",{\"1\":{\"1863\":1}}],[\"浏览器根据此头决定\",{\"1\":{\"1808\":1}}],[\"浏览器支持\",{\"1\":{\"1559\":1}}],[\"浏览器兼容性不好\",{\"1\":{\"1539\":1}}],[\"浏览器名称\",{\"1\":{\"1464\":1}}],[\"浏览器信息\",{\"1\":{\"1464\":1}}],[\"浏览器\",{\"1\":{\"1376\":1}}],[\"浏览器中\",{\"1\":{\"1372\":1}}],[\"浏览器的地址栏不会发生变化\",{\"1\":{\"1861\":1}}],[\"浏览器的地址栏是不支持中文的\",{\"1\":{\"1330\":1}}],[\"浏览器的内核包括两部分核心\",{\"1\":{\"87\":1}}],[\"浏览器访问\",{\"0\":{\"812\":1}}],[\"浏览器通过获取响应头中的信息可以知道应该如何处理响应结果\",{\"1\":{\"199\":1}}],[\"浏览器向web\",{\"1\":{\"177\":1}}],[\"浏览器告诉服务器自己能接收的字符集\",{\"1\":{\"177\":1}}],[\"浏览器申明自己接收的语言\",{\"1\":{\"177\":1}}],[\"浏览器申明自己接收的编码方法\",{\"1\":{\"177\":1}}],[\"浏览器表明自己的身份\",{\"1\":{\"177\":1}}],[\"浏览器分析response中的\",{\"1\":{\"173\":1}}],[\"浏览器发送一个request去获取html\",{\"1\":{\"173\":1}}],[\"异步访问\",{\"1\":{\"2110\":1}}],[\"异步\",{\"1\":{\"2108\":1}}],[\"异步不用等所有操作等做完\",{\"1\":{\"2104\":1}}],[\"异步的\",{\"1\":{\"1720\":1}}],[\"异地协作\",{\"1\":{\"723\":1}}],[\"异常的值\",{\"1\":{\"2648\":1}}],[\"异常的分类\",{\"0\":{\"28\":1}}],[\"异常通知\",{\"0\":{\"2642\":1},\"1\":{\"2623\":1,\"2648\":1,\"2653\":1}}],[\"异常对象\",{\"1\":{\"1971\":1}}],[\"异常列表\",{\"1\":{\"1368\":1}}],[\"异常信息\",{\"1\":{\"1282\":1}}],[\"异常类型异常说明\",{\"1\":{\"537\":1}}],[\"异常出现的源头\",{\"1\":{\"33\":1}}],[\"异常新处理方式\",{\"1\":{\"27\":1}}],[\"异常\",{\"1\":{\"16\":1,\"850\":1,\"1987\":2}}],[\"异常处理\",{\"0\":{\"14\":1,\"512\":1,\"517\":1,\"2960\":1},\"1\":{\"6\":1}}],[\"拉取\",{\"1\":{\"723\":1}}],[\"推广部\",{\"1\":{\"1221\":1,\"1253\":1}}],[\"推送\",{\"1\":{\"723\":1}}],[\"推荐快速极简配置\",{\"1\":{\"2896\":1}}],[\"推荐使用下划线区分用途\",{\"1\":{\"2332\":1}}],[\"推荐使用具体的字段名\",{\"1\":{\"1148\":1}}],[\"推荐示例\",{\"1\":{\"2299\":1}}],[\"推荐在jsp\",{\"1\":{\"1952\":1}}],[\"推荐java\",{\"1\":{\"1775\":1}}],[\"推荐这种写法\",{\"1\":{\"387\":1}}],[\"推荐方式\",{\"1\":{\"238\":1}}],[\"推荐\",{\"0\":{\"275\":1,\"579\":1,\"2407\":1,\"2409\":1},\"1\":{\"49\":1,\"271\":1,\"575\":1,\"579\":1,\"725\":2,\"738\":1,\"1775\":1,\"2300\":1,\"2457\":1}}],[\"克隆\",{\"1\":{\"723\":1}}],[\"操作消息队列的jmstemplate等等\",{\"1\":{\"2669\":1}}],[\"操作nosql数据库的redistemplate\",{\"1\":{\"2669\":1}}],[\"操作关系型数据的jdbctemplate和\",{\"1\":{\"2669\":1}}],[\"操作智能分析阻断\",{\"1\":{\"2179\":1}}],[\"操作域对象的标签\",{\"0\":{\"2017\":1}}],[\"操作的一种逻辑公式\",{\"1\":{\"1582\":1}}],[\"操作事件\",{\"0\":{\"1572\":1}}],[\"操作样式\",{\"0\":{\"1568\":1}}],[\"操作表单的值\",{\"0\":{\"1501\":1}}],[\"操作标签中的text\",{\"0\":{\"1500\":1}}],[\"操作标签中的所有代码\",{\"0\":{\"1499\":1}}],[\"操作标签文本\",{\"0\":{\"1498\":1}}],[\"操作节点的样式\",{\"0\":{\"1495\":1}}],[\"操作节点的属性\",{\"0\":{\"1492\":1}}],[\"操作css样式\",{\"1\":{\"1480\":1}}],[\"操作元素\",{\"1\":{\"1480\":1}}],[\"操作属性和样式\",{\"0\":{\"1566\":1}}],[\"操作属性\",{\"0\":{\"1567\":1},\"1\":{\"1480\":1}}],[\"操作文本和增删元素\",{\"0\":{\"1569\":1}}],[\"操作文本\",{\"0\":{\"1570\":1},\"1\":{\"1480\":1}}],[\"操作繁琐\",{\"1\":{\"1283\":1}}],[\"操作成功后\",{\"1\":{\"1233\":1}}],[\"操作符用于合并两个或多个\",{\"1\":{\"1065\":1}}],[\"操作主表的时候影响从表的外键信息\",{\"1\":{\"1001\":1}}],[\"操作数据库\",{\"0\":{\"945\":1}}],[\"操作日期不会影响原来的值\",{\"1\":{\"902\":1}}],[\"操作\",{\"1\":{\"723\":1,\"738\":1,\"1329\":1,\"2179\":4}}],[\"操作arr数组本身是无锁的\",{\"1\":{\"313\":1}}],[\"远程仓库\",{\"1\":{\"723\":1}}],[\"远程仓库私服\",{\"1\":{\"705\":1}}],[\"容器关闭销毁bean\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"容器对象\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"容器初始化以及\",{\"1\":{\"2531\":1}}],[\"容器启动时\",{\"1\":{\"2006\":1}}],[\"容器就会销该httpsession对象\",{\"1\":{\"1899\":1}}],[\"容器通过对请求的解析可以获取请求资源的uri\",{\"1\":{\"1826\":1}}],[\"容器在启动时会解析web工程中web\",{\"1\":{\"1826\":1}}],[\"容器会从缓存中直接找到这个servlet对象\",{\"1\":{\"1823\":1}}],[\"容器会实例化这个servlet\",{\"1\":{\"1823\":1}}],[\"容器管理阶段\",{\"0\":{\"1822\":1}}],[\"容器类\",{\"0\":{\"1595\":1}}],[\"容器\",{\"0\":{\"1593\":1},\"1\":{\"2538\":1}}],[\"容易出错\",{\"1\":{\"2010\":1}}],[\"容易出现问题\",{\"1\":{\"1927\":1}}],[\"容易上手\",{\"1\":{\"1559\":1}}],[\"容易冲突的操作方式\",{\"1\":{\"753\":1}}],[\"容易产生丢包的现象\",{\"1\":{\"499\":1}}],[\"容灾能力强\",{\"1\":{\"723\":1}}],[\"容错性差\",{\"1\":{\"723\":1}}],[\"集成了经典的\",{\"1\":{\"2531\":1}}],[\"集成层包括\",{\"1\":{\"2530\":1}}],[\"集成\",{\"0\":{\"2530\":1}}],[\"集成风险\",{\"1\":{\"1941\":1}}],[\"集群部署方式\",{\"1\":{\"2482\":1}}],[\"集中精力于表现形式上\",{\"1\":{\"2038\":1}}],[\"集中精力于业务逻辑\",{\"1\":{\"2038\":1}}],[\"集中式版本控制工具\",{\"1\":{\"723\":1}}],[\"集合为list\",{\"1\":{\"2464\":1}}],[\"集合长度为0\",{\"1\":{\"1991\":2}}],[\"集合虽然可以存放数据\",{\"1\":{\"1225\":1}}],[\"集合处理数据的弊端\",{\"0\":{\"856\":1}}],[\"集合中加入一个元素\",{\"1\":{\"294\":1}}],[\"集合中元素数量加1操作\",{\"1\":{\"263\":1}}],[\"集合中元素的数量\",{\"1\":{\"263\":1}}],[\"集合的赋值\",{\"0\":{\"2565\":1}}],[\"集合的遍历\",{\"1\":{\"260\":1}}],[\"集合的引入\",{\"0\":{\"228\":1}}],[\"集合容器类在设计阶段\",{\"1\":{\"233\":1}}],[\"集合结构图\",{\"0\":{\"229\":1}}],[\"集合不一样\",{\"1\":{\"228\":1}}],[\"集合都是对多个数据进行存储操作的\",{\"1\":{\"228\":1}}],[\"集合对象\",{\"1\":{\"220\":1}}],[\"集合遍历\",{\"0\":{\"220\":1}}],[\"集合地址是否相同\",{\"1\":{\"219\":2}}],[\"集合内容是否相同\",{\"1\":{\"219\":2}}],[\"集合是否包含22\",{\"1\":{\"219\":2}}],[\"集合是否为空\",{\"1\":{\"219\":2}}],[\"集合存在的元素数量\",{\"1\":{\"219\":2}}],[\"集合移除19是否成功\",{\"1\":{\"219\":2}}],[\"集合有一个特点\",{\"1\":{\"219\":1}}],[\"集合或数组\",{\"1\":{\"142\":1}}],[\"集合\",{\"0\":{\"37\":1,\"2392\":1,\"2961\":1},\"1\":{\"6\":1,\"228\":1}}],[\"总是会创建一个新事务\",{\"1\":{\"2730\":1}}],[\"总之\",{\"1\":{\"2197\":1}}],[\"总会执行\",{\"1\":{\"1722\":1}}],[\"总能见到你\",{\"1\":{\"1380\":3}}],[\"总数量\",{\"1\":{\"1072\":1}}],[\"总宽度4位\",{\"1\":{\"940\":1}}],[\"总体来说\",{\"1\":{\"920\":1}}],[\"总的聚合工程中使用modules\",{\"1\":{\"718\":1}}],[\"总结来说\",{\"1\":{\"2335\":1}}],[\"总结\",{\"0\":{\"1546\":1,\"1983\":1,\"2122\":1,\"2436\":1,\"2606\":1,\"2610\":1,\"2616\":1,\"2660\":1,\"2734\":1,\"2761\":1},\"1\":{\"253\":1,\"254\":1,\"295\":1,\"1927\":1}}],[\"聚合函数会忽略空值nullifnull\",{\"1\":{\"1041\":1}}],[\"聚合函数\",{\"0\":{\"1041\":1},\"1\":{\"1041\":1}}],[\"聚合\",{\"0\":{\"717\":1},\"1\":{\"718\":1}}],[\"若有注解\",{\"1\":{\"2330\":1}}],[\"若没有则显示\",{\"1\":{\"2029\":1}}],[\"若实际的数字超出了所指定的范围\",{\"1\":{\"2029\":1}}],[\"若实际数字超过了maxintegerdigits所指定的最大值\",{\"1\":{\"2029\":1}}],[\"若出现\",{\"1\":{\"1987\":1}}],[\"若子类没有标注版本号\",{\"1\":{\"714\":1}}],[\"若一个进程同一时间并行执行多个线程\",{\"1\":{\"452\":1}}],[\"插值语法是通过一对\",{\"1\":{\"1617\":1}}],[\"插值语法\",{\"0\":{\"1617\":1}}],[\"插件通过动态代理机制\",{\"1\":{\"2516\":1}}],[\"插件是mybatis提供的一个非常强大的机制\",{\"1\":{\"2516\":1}}],[\"插件机制\",{\"0\":{\"2510\":1}}],[\"插件的依赖\",{\"1\":{\"2500\":1}}],[\"插件可快速生成\",{\"1\":{\"2179\":1}}],[\"插件\",{\"1\":{\"1558\":1}}],[\"插件和目标\",{\"0\":{\"711\":1}}],[\"插入一条记录id=2\",{\"1\":{\"2692\":1}}],[\"插入一个元素\",{\"1\":{\"260\":1}}],[\"插入了一些数据时\",{\"1\":{\"2692\":1}}],[\"插入生成的主键将会重新回填到原有的对象中\",{\"1\":{\"2409\":1,\"2410\":1}}],[\"插入数据\",{\"0\":{\"969\":1}}],[\"插入数值\",{\"1\":{\"294\":1}}],[\"插入值操作时导致扩容\",{\"1\":{\"295\":1}}],[\"插入到尾部\",{\"1\":{\"260\":1}}],[\"插入到头部\",{\"1\":{\"260\":1}}],[\"插入\",{\"1\":{\"251\":2,\"395\":1}}],[\"插入元素效率高\",{\"1\":{\"227\":1}}],[\"插入元素效率低\",{\"1\":{\"227\":1}}],[\"站点\",{\"1\":{\"710\":1}}],[\"减小了数据冗余\",{\"1\":{\"1048\":1}}],[\"减轻中央仓库的压力\",{\"1\":{\"705\":1}}],[\"减少服务器的压力\",{\"1\":{\"2470\":1}}],[\"减少数据的加载次数\",{\"1\":{\"2470\":1}}],[\"减少一个数字\",{\"1\":{\"2088\":1}}],[\"减少资源的消耗\",{\"1\":{\"1272\":1}}],[\"减少计算机单位时间内的运算压力\",{\"1\":{\"1272\":1}}],[\"减少编译次数\",{\"1\":{\"1230\":2}}],[\"减少冲突的操作方式\",{\"1\":{\"753\":1}}],[\"减少同步资源的定义\",{\"1\":{\"484\":1}}],[\"减少为8个以内时会再次转换为链表结构\",{\"1\":{\"295\":1}}],[\"减少哈西冲突\",{\"1\":{\"294\":1}}],[\"减少了与数据库的交互次数\",{\"1\":{\"1230\":1}}],[\"减少了建立和关闭连接的消耗和延迟\",{\"1\":{\"164\":1}}],[\"减少了页面的请求\",{\"1\":{\"111\":1}}],[\"仓库中的文件\",{\"0\":{\"706\":1}}],[\"仓库分类\",{\"0\":{\"705\":1}}],[\"仓库\",{\"0\":{\"704\":1},\"1\":{\"723\":1}}],[\"必填项\",{\"1\":{\"1350\":1}}],[\"必定相同\",{\"1\":{\"702\":1}}],[\"必须和\",{\"1\":{\"2835\":1}}],[\"必须有password参数\",{\"1\":{\"2817\":1}}],[\"必须有事务的\",{\"0\":{\"2737\":1}}],[\"必须确保具体事务管理器实现的nestedtransactionallowed属性为true\",{\"1\":{\"2733\":1}}],[\"必须在一个事务中运行\",{\"1\":{\"2729\":1}}],[\"必须满足事务的原子性\",{\"1\":{\"2684\":1}}],[\"必须给传进来的bean进行返回\",{\"1\":{\"2574\":2}}],[\"必须给子查询取别名\",{\"1\":{\"1072\":1}}],[\"必须继承serviceimpl\",{\"1\":{\"2217\":1}}],[\"必须要通过setattribute方法和某个session对象绑定之后\",{\"1\":{\"2081\":1}}],[\"必须要有对象\",{\"1\":{\"588\":1}}],[\"必须二选一\",{\"1\":{\"1820\":1}}],[\"必须勾选\",{\"1\":{\"1775\":1}}],[\"必须配置它们使用不同的端口\",{\"1\":{\"1763\":1}}],[\"必须写在vue的methods中\",{\"1\":{\"1647\":1}}],[\"必须自己会使用的选择器\",{\"1\":{\"1548\":1}}],[\"必须通过name属性来控制\",{\"1\":{\"1335\":1,\"1336\":1}}],[\"必须通过标签来实现\",{\"1\":{\"1298\":1}}],[\"必须具备空参构造方法\",{\"1\":{\"1226\":1}}],[\"必须显式开启\",{\"1\":{\"1216\":1}}],[\"必须人为决定新代码内容\",{\"1\":{\"751\":1}}],[\"必须将项目拆分成多个工程协同开发\",{\"1\":{\"653\":1}}],[\"必须放在最开始位置\",{\"1\":{\"561\":1}}],[\"必须是引用数据类型\",{\"1\":{\"466\":1}}],[\"必须先start\",{\"1\":{\"458\":1}}],[\"必须\",{\"1\":{\"425\":1}}],[\"必须线程同步\",{\"1\":{\"304\":1}}],[\"必须使用object类型类承接\",{\"1\":{\"245\":1}}],[\"必须不同\",{\"1\":{\"34\":1}}],[\"必须相同\",{\"1\":{\"34\":3}}],[\"答\",{\"1\":{\"702\":2}}],[\"答案\",{\"1\":{\"371\":1}}],[\"问\",{\"1\":{\"702\":2}}],[\"问题原因\",{\"0\":{\"2788\":1}}],[\"问题一致\",{\"1\":{\"2764\":1}}],[\"问题在于这个转换是否可以不由开发者来做\",{\"1\":{\"2198\":1}}],[\"问题2\",{\"0\":{\"597\":1}}],[\"问题1\",{\"0\":{\"596\":1}}],[\"问题是解决了\",{\"1\":{\"17\":1}}],[\"采取了特殊的命名风格\",{\"1\":{\"2335\":1}}],[\"采取的策略就是先到先服务\",{\"1\":{\"457\":1}}],[\"采纳为国际标准\",{\"1\":{\"930\":1}}],[\"采用\",{\"1\":{\"2214\":1}}],[\"采用代码或者\",{\"1\":{\"2179\":1}}],[\"采用完全独立于编程语言的文本格式来存储和表示数据\",{\"1\":{\"2123\":1}}],[\"采用三步走策略使用filter\",{\"1\":{\"1996\":1}}],[\"采用硬编码效率低\",{\"1\":{\"1230\":1}}],[\"采用为关系数据库管理系统的标准语言\",{\"1\":{\"930\":1}}],[\"采用默认名称mysql80即可\",{\"1\":{\"922\":1}}],[\"采用默认选项即可\",{\"1\":{\"922\":3}}],[\"采用相同的hash算法\",{\"1\":{\"702\":2}}],[\"散列值通常的呈现形式为40个十六进制数\",{\"1\":{\"702\":1}}],[\"散列值\",{\"1\":{\"702\":1}}],[\"美国国家安全局设计\",{\"1\":{\"702\":1}}],[\"英语\",{\"1\":{\"702\":1}}],[\"英文来说没有实质的差别\",{\"1\":{\"1156\":1}}],[\"英文后缀表示月中的天数\",{\"1\":{\"1093\":1}}],[\"英文\",{\"1\":{\"34\":1,\"2823\":1}}],[\"仅控制台输出\",{\"1\":{\"2300\":1}}],[\"仅支持\",{\"1\":{\"2289\":1}}],[\"仅在服务器数据改变时获取新数据\",{\"1\":{\"2149\":1}}],[\"仅完成自身的功能\",{\"1\":{\"2043\":1}}],[\"仅允许访问状态页面\",{\"1\":{\"1759\":1}}],[\"仅仅通过少量配置即可实现单表大部分\",{\"1\":{\"2179\":1}}],[\"仅仅是等效于上述函数\",{\"1\":{\"2163\":1}}],[\"仅仅是测试程序部分需要\",{\"1\":{\"690\":1}}],[\"仅仅存在于jsp页面\",{\"1\":{\"1952\":1}}],[\"仅仅执行监听事件\",{\"1\":{\"1660\":1}}],[\"仅仅需要修该数据\",{\"1\":{\"1614\":1}}],[\"仅限当前类\",{\"1\":{\"590\":2,\"591\":3}}],[\"仅限public修饰\",{\"1\":{\"584\":2,\"585\":5,\"587\":2,\"588\":2,\"590\":2,\"591\":4}}],[\"仅限于当前用户会话\",{\"1\":{\"134\":1}}],[\"仅限于当前请求\",{\"1\":{\"133\":1}}],[\"约等于3\",{\"1\":{\"1411\":1}}],[\"约等于\",{\"1\":{\"1411\":3}}],[\"约等于0\",{\"1\":{\"1411\":2}}],[\"约等于2\",{\"1\":{\"1411\":2}}],[\"约束名\",{\"1\":{\"988\":2,\"994\":2}}],[\"约束的命名规则\",{\"0\":{\"983\":1}}],[\"约束表与表之间的关系\",{\"1\":{\"981\":1}}],[\"约束字段的默认值\",{\"1\":{\"981\":1}}],[\"约束字段的值自动递增\",{\"1\":{\"981\":1}}],[\"约束字段的值是唯一的\",{\"1\":{\"981\":1}}],[\"约束字段的值不能为空\",{\"1\":{\"981\":1}}],[\"约束字段的值可唯一地标识对应的记录\",{\"1\":{\"981\":1}}],[\"约束条件\",{\"1\":{\"981\":2}}],[\"约束\",{\"1\":{\"954\":2,\"959\":1,\"960\":1}}],[\"约束策略\",{\"0\":{\"980\":1,\"3065\":1},\"1\":{\"52\":1}}],[\"约定\",{\"1\":{\"684\":1}}],[\"约定目录结构\",{\"0\":{\"684\":1}}],[\"组装查询条件\",{\"1\":{\"2503\":1}}],[\"组成一个\",{\"1\":{\"1582\":1}}],[\"组织发展和维护\",{\"1\":{\"1372\":1}}],[\"组合使用\",{\"0\":{\"2429\":1}}],[\"组合条件\",{\"0\":{\"2256\":1}}],[\"组合\",{\"1\":{\"861\":1}}],[\"组id\",{\"1\":{\"683\":1,\"685\":1}}],[\"组件html代码\",{\"1\":{\"1718\":1}}],[\"组件名2\",{\"1\":{\"1718\":1}}],[\"组件名1\",{\"1\":{\"1718\":1}}],[\"组件名\",{\"1\":{\"1718\":1}}],[\"组件是可以重复使用的\",{\"1\":{\"1708\":1}}],[\"组件系统让我们可以用独立可复用的小组件来构建大型应用\",{\"1\":{\"1703\":1}}],[\"组件可以扩展\",{\"1\":{\"1703\":1}}],[\"组件的概述\",{\"0\":{\"1703\":1}}],[\"组件\",{\"0\":{\"1702\":1,\"1906\":1,\"3117\":1},\"1\":{\"62\":1,\"116\":1,\"1703\":1,\"2531\":1,\"2533\":1}}],[\"ø\",{\"1\":{\"676\":4,\"679\":4}}],[\"ømaven\",{\"1\":{\"676\":1}}],[\"回顾作用域\",{\"0\":{\"2920\":1}}],[\"回顾请求方式\",{\"0\":{\"2828\":1}}],[\"回顾之前在jdbc中的使用\",{\"0\":{\"2304\":1}}],[\"回调函数\",{\"1\":{\"2163\":1}}],[\"回车\",{\"1\":{\"1665\":1}}],[\"回复至数据初始状态\",{\"1\":{\"1233\":1}}],[\"回滚至还原点\",{\"1\":{\"2702\":1}}],[\"回滚数据\",{\"1\":{\"2360\":1}}],[\"回滚后进行的更改成为持久更改\",{\"1\":{\"1255\":1}}],[\"回滚到还原点\",{\"1\":{\"1235\":1,\"2702\":1}}],[\"回滚到指定回滚点\",{\"1\":{\"1235\":1}}],[\"回滚\",{\"0\":{\"2716\":1},\"1\":{\"1233\":1}}],[\"回滚事务\",{\"0\":{\"1109\":1},\"1\":{\"936\":1,\"1234\":1}}],[\"回收授予的某种权限\",{\"1\":{\"935\":1}}],[\"回到登录去登录\",{\"1\":{\"1910\":1}}],[\"回到login\",{\"1\":{\"1909\":1}}],[\"回到最新的版本\",{\"1\":{\"742\":1}}],[\"回到如下页面\",{\"1\":{\"676\":1}}],[\"回退n次操作\",{\"1\":{\"741\":1}}],[\"回退到历史版本\",{\"1\":{\"741\":1}}],[\"回退\",{\"0\":{\"740\":1,\"741\":1}}],[\"回显服务器收到的请求\",{\"1\":{\"185\":1}}],[\"变到另一个一致性状态\",{\"1\":{\"2686\":1}}],[\"变\",{\"1\":{\"1493\":1,\"1494\":1}}],[\"变运行的位置不同java运行与服务器端的\",{\"1\":{\"1376\":1}}],[\"变量类型强弱不同java采用强类型变量检查\",{\"1\":{\"1376\":1}}],[\"变量类型是采用弱类型\",{\"1\":{\"1374\":1}}],[\"变量只声明不赋值的情况下\",{\"1\":{\"1352\":1}}],[\"变量的类型为\",{\"1\":{\"1352\":1}}],[\"变量的声明\",{\"0\":{\"1352\":1}}],[\"变量会自动改变自身的数据类型\",{\"1\":{\"1352\":1}}],[\"变量声明时没有确定具体的数据类型\",{\"1\":{\"1352\":1}}],[\"变量\",{\"1\":{\"674\":2}}],[\"变换条件\",{\"1\":{\"607\":1}}],[\"搜索框\",{\"1\":{\"1329\":1}}],[\"搜索引擎\",{\"1\":{\"1293\":1}}],[\"搜索已完成任务\",{\"1\":{\"1195\":1}}],[\"搜索未完成任务\",{\"1\":{\"1195\":1}}],[\"搜索任务\",{\"1\":{\"1195\":2}}],[\"搜索同一段落\",{\"1\":{\"1195\":1}}],[\"搜索同一行的多个关键词\",{\"1\":{\"1195\":1}}],[\"搜索同意章节中的多个关键词\",{\"1\":{\"1195\":1}}],[\"搜索标签\",{\"1\":{\"1195\":1}}],[\"搜索文件内容\",{\"1\":{\"1195\":1}}],[\"搜索文件名\",{\"1\":{\"1195\":1}}],[\"搜索指定范围\",{\"1\":{\"1195\":1}}],[\"搜索多个关键词\",{\"1\":{\"1195\":1}}],[\"搜索的技巧\",{\"0\":{\"1195\":1}}],[\"搜索面板\",{\"0\":{\"1194\":1}}],[\"搜索整个文件夹\",{\"1\":{\"1193\":1}}],[\"搜索当前文件\",{\"1\":{\"1193\":1}}],[\"搜索某账号找到某项目\",{\"1\":{\"759\":1}}],[\"搜索重置帧\",{\"1\":{\"671\":1}}],[\"搜索操作\",{\"0\":{\"608\":1}}],[\"步长\",{\"1\":{\"1347\":1}}],[\"步入调试时\",{\"1\":{\"671\":1}}],[\"步骤都是一样的\",{\"1\":{\"2129\":1}}],[\"步骤\",{\"0\":{\"437\":1,\"444\":1,\"449\":1,\"760\":1}}],[\"确认框\",{\"1\":{\"1455\":1}}],[\"确认弹窗\",{\"0\":{\"1455\":1}}],[\"确保每列都和主键列直接相关\",{\"0\":{\"1048\":1}}],[\"确保每列保持原子性\",{\"0\":{\"1046\":1}}],[\"确保表中的每列都和主键相关\",{\"0\":{\"1047\":1}}],[\"确保项目在迭代开发过程中关键点的正确性\",{\"1\":{\"664\":1}}],[\"确定调用哪个类的哪个方法\",{\"1\":{\"2781\":1}}],[\"确定脚本元素能否被使用\",{\"1\":{\"1959\":1}}],[\"确定要删除\",{\"1\":{\"1455\":1}}],[\"确定的对象\",{\"1\":{\"560\":1,\"561\":1}}],[\"确定的\",{\"1\":{\"558\":1}}],[\"确定实际状态是否与预期的状态一致\",{\"1\":{\"530\":1}}],[\"国内一些移动开发者较为熟悉的框架\",{\"1\":{\"1557\":1}}],[\"国际化等其他资源文件\",{\"1\":{\"660\":1}}],[\"国家电网\",{\"1\":{\"61\":1}}],[\"纯java代码\",{\"0\":{\"658\":1}}],[\"专注于业务逻辑的完成和性能的优化\",{\"1\":{\"2197\":1}}],[\"专注服务于java平台的项目构建和依赖管理\",{\"1\":{\"656\":1}}],[\"专门用于设置content\",{\"1\":{\"1808\":1}}],[\"专家\",{\"1\":{\"656\":1}}],[\"妈文\",{\"1\":{\"656\":1}}],[\"ə\",{\"1\":{\"656\":1}}],[\"许多公司参与一起建立的一种\",{\"1\":{\"1548\":1}}],[\"许多\",{\"1\":{\"655\":1}}],[\"报sql解析错误\",{\"1\":{\"1250\":1}}],[\"报告\",{\"0\":{\"665\":1}}],[\"报告和文档的项目管理工具软件\",{\"1\":{\"655\":1}}],[\"报错如下\",{\"1\":{\"810\":1}}],[\"报错\",{\"1\":{\"242\":1,\"247\":1,\"248\":1}}],[\"几百上千的人开发的项目是同一个web工程\",{\"1\":{\"653\":1}}],[\"几乎任意类型的应用的界面都可以抽象为一个组件树\",{\"1\":{\"1703\":1}}],[\"几乎所有的版本控制系统都以某种形式支持分支\",{\"1\":{\"744\":1}}],[\"几乎不可能手工实现依赖关系的梳理\",{\"1\":{\"652\":1}}],[\"几乎每个jar包在其本身的官网上的获取方式都不尽相同\",{\"1\":{\"650\":1}}],[\"举个例子\",{\"1\":{\"652\":1}}],[\"举例\",{\"1\":{\"386\":1,\"389\":1,\"404\":1,\"407\":1,\"2726\":1}}],[\"节点\",{\"0\":{\"1496\":1},\"1\":{\"1493\":2,\"1496\":1,\"1497\":1}}],[\"节点类型\",{\"1\":{\"1485\":1}}],[\"节点值\",{\"1\":{\"1485\":1}}],[\"节点名称\",{\"1\":{\"1485\":1}}],[\"节约了我们大量的时间和精力\",{\"1\":{\"651\":1}}],[\"节省了空间\",{\"1\":{\"296\":1}}],[\"节省内存\",{\"1\":{\"260\":1}}],[\"规则字符串\",{\"1\":{\"1582\":2}}],[\"规模小\",{\"1\":{\"1374\":2}}],[\"规定一些增删改查的方法\",{\"1\":{\"1262\":1}}],[\"规定了浏览器脚本语言的标准\",{\"1\":{\"70\":1}}],[\"规范的源码学习样本\",{\"0\":{\"2528\":1}}],[\"规范的数据库就需要满足一些规则来优化数据的设计和存储\",{\"1\":{\"1045\":1}}],[\"规范了\",{\"1\":{\"2508\":1}}],[\"规范领导者\",{\"1\":{\"2508\":1}}],[\"规范\",{\"1\":{\"650\":1}}],[\"费劲心血找的jar包里有的时候并没有你需要的那个类\",{\"1\":{\"650\":1}}],[\"费列罗\",{\"1\":{\"489\":1,\"490\":1}}],[\"身份验证方法authentication\",{\"1\":{\"922\":1}}],[\"身心俱疲\",{\"1\":{\"650\":1}}],[\"身高\",{\"1\":{\"576\":1}}],[\"坐标\",{\"0\":{\"685\":1},\"1\":{\"649\":1}}],[\"qbc\",{\"1\":{\"2503\":1}}],[\"qbc查询最大的特点就是将sql语句中的where子句进行了组件化的封装\",{\"1\":{\"2503\":1}}],[\"qbc查询\",{\"0\":{\"2503\":1}}],[\"qos\",{\"1\":{\"2484\":1,\"2487\":1}}],[\"q+\",{\"1\":{\"1417\":1}}],[\"q1ynxgkpowk1hf6hhy\",{\"1\":{\"1309\":1}}],[\"qq\",{\"1\":{\"1293\":1,\"1578\":1,\"2250\":2}}],[\"q退出git\",{\"1\":{\"739\":1}}],[\"q\",{\"0\":{\"2974\":1,\"3063\":1,\"3066\":1,\"3067\":1,\"3072\":1,\"3083\":1,\"3164\":1},\"1\":{\"637\":1,\"927\":1}}],[\"qu\",{\"1\":{\"2176\":3}}],[\"qualifier的使用\",{\"0\":{\"2596\":1}}],[\"qualifier\",{\"1\":{\"2219\":1,\"2220\":1,\"2593\":1,\"2596\":1,\"2598\":1,\"2599\":1}}],[\"qualified\",{\"1\":{\"1766\":1}}],[\"quality=\",{\"1\":{\"1310\":1}}],[\"quis\",{\"1\":{\"1606\":1}}],[\"quick\",{\"1\":{\"1191\":1}}],[\"quicktime\",{\"1\":{\"208\":2}}],[\"query与\",{\"0\":{\"3151\":1}}],[\"query中的\",{\"0\":{\"3107\":1}}],[\"query选择器\",{\"0\":{\"3105\":1}}],[\"queryforobject\",{\"1\":{\"2672\":4}}],[\"queryfromdatabase\",{\"1\":{\"2493\":3}}],[\"querystack++\",{\"1\":{\"2493\":1}}],[\"querystack\",{\"1\":{\"2493\":3}}],[\"querypage\",{\"1\":{\"2286\":1}}],[\"querywrapper<>\",{\"1\":{\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2260\":2}}],[\"querywrapper<user>\",{\"1\":{\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2260\":2}}],[\"querywrapper\",{\"0\":{\"2252\":1},\"1\":{\"2239\":3,\"2240\":3,\"2241\":3,\"2242\":3,\"2243\":3,\"2244\":4,\"2247\":3,\"2248\":3,\"2249\":3}}],[\"query\",{\"0\":{\"932\":1,\"2981\":1,\"3104\":1},\"1\":{\"930\":1,\"1195\":1,\"1452\":1,\"2493\":3,\"2503\":1,\"2673\":3}}],[\"queue一端放\",{\"1\":{\"357\":1}}],[\"queue\",{\"1\":{\"327\":23,\"337\":1,\"352\":1,\"356\":1,\"357\":1}}],[\"queue继承自collection\",{\"1\":{\"322\":1}}],[\"选为\",{\"1\":{\"1777\":1}}],[\"选项选为\",{\"1\":{\"1777\":1}}],[\"选项\",{\"1\":{\"1775\":1,\"1776\":1,\"1777\":1}}],[\"选项卡\",{\"0\":{\"1693\":1}}],[\"选项中\",{\"1\":{\"725\":3}}],[\"选no\",{\"1\":{\"1683\":2}}],[\"选yes\",{\"1\":{\"1683\":1}}],[\"选中状态\",{\"1\":{\"1555\":1}}],[\"选中某个数据库\",{\"0\":{\"951\":1}}],[\"选中引入常量\",{\"1\":{\"632\":1}}],[\"选中引入形参\",{\"1\":{\"630\":1}}],[\"选中内联变量\",{\"1\":{\"631\":1}}],[\"选择依据\",{\"1\":{\"2438\":1}}],[\"选择java\",{\"1\":{\"1775\":1}}],[\"选择状态\",{\"1\":{\"1555\":1}}],[\"选择一个方向即可\",{\"1\":{\"1533\":2,\"1534\":2}}],[\"选择菜单等都可以视为事件\",{\"1\":{\"1374\":1}}],[\"选择\",{\"1\":{\"922\":1}}],[\"选择合并或拒绝\",{\"1\":{\"759\":1}}],[\"选择git命令的执行环境\",{\"1\":{\"725\":1}}],[\"选择需要还原的历史版本\",{\"1\":{\"634\":1}}],[\"选择大小写即可快速切换大小写\",{\"1\":{\"605\":1}}],[\"选择器编号是从1开始\",{\"1\":{\"1552\":1}}],[\"选择器标志\",{\"1\":{\"1546\":1}}],[\"选择器功能弱\",{\"1\":{\"1539\":1}}],[\"选择器\",{\"0\":{\"1506\":1,\"3100\":1},\"1\":{\"57\":1,\"1546\":1}}],[\"连\",{\"1\":{\"2245\":1}}],[\"连续截取多少个字符\",{\"1\":{\"1406\":1}}],[\"连续两次\",{\"1\":{\"620\":1}}],[\"连接点\",{\"0\":{\"2621\":1}}],[\"连接信息\",{\"1\":{\"2298\":1,\"2299\":1}}],[\"连接器使用的协议\",{\"1\":{\"1765\":1}}],[\"连接两个或更多字符串\",{\"1\":{\"1405\":1}}],[\"连接池\",{\"1\":{\"2195\":1}}],[\"连接池空\",{\"1\":{\"1288\":1}}],[\"连接池中还有连接\",{\"1\":{\"1288\":1}}],[\"连接池满了\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"连接池未满\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"连接池解决方案是在应用程序启动时就预先建立多个数据库连接对象\",{\"1\":{\"1272\":1}}],[\"连接池连接方式\",{\"0\":{\"1272\":1}}],[\"连接池的使用\",{\"0\":{\"1268\":1,\"3086\":1},\"1\":{\"54\":1}}],[\"连接数据库规范\",{\"1\":{\"1206\":1}}],[\"连接到距离任务最近的可连接的区块\",{\"1\":{\"1198\":1}}],[\"连接到任务所在区块\",{\"1\":{\"1198\":1}}],[\"连接s1一直到sn\",{\"1\":{\"1086\":1}}],[\"连接s1\",{\"1\":{\"1086\":1}}],[\"连接\",{\"0\":{\"1086\":1},\"1\":{\"1288\":1}}],[\"连接条件\",{\"1\":{\"1056\":1,\"1057\":1}}],[\"连接后的行数为两\",{\"1\":{\"1054\":1}}],[\"连接方式\",{\"1\":{\"177\":1}}],[\"连接共享\",{\"1\":{\"167\":1}}],[\"扩展和收缩代码选区\",{\"0\":{\"612\":1}}],[\"扩容是\",{\"1\":{\"311\":1}}],[\"扩容上的优化\",{\"1\":{\"295\":1}}],[\"扩容会重新创建一个当前数组长度2倍的新的entry数组\",{\"1\":{\"294\":1}}],[\"扩容以主数组的2倍扩容\",{\"1\":{\"294\":1}}],[\"扩容因子是0\",{\"1\":{\"294\":1}}],[\"扩容及树化机制\",{\"0\":{\"280\":1}}],[\"扩容\",{\"1\":{\"279\":1,\"294\":1}}],[\"让其他正常程序可以执行\",{\"1\":{\"2715\":1}}],[\"让其src属性指向我们要访问的跨域资源\",{\"1\":{\"2170\":1}}],[\"让spring自动帮我们注入bean对象\",{\"1\":{\"2576\":1}}],[\"让session不可用\",{\"1\":{\"2081\":1}}],[\"让我们可以通过调用criteria对象的方法自由的拼装查询条件\",{\"1\":{\"2503\":1}}],[\"让mybatis自己选择\",{\"1\":{\"2487\":1}}],[\"让程序执行回调函数x\",{\"1\":{\"2163\":1}}],[\"让监听器工作\",{\"1\":{\"2074\":1}}],[\"让jsp页面的数据格式更加规范\",{\"1\":{\"2027\":1}}],[\"让开发人员做到专注专精\",{\"1\":{\"1947\":1}}],[\"让前后端工程师只需要专注于前端或后端的开发工作\",{\"1\":{\"1945\":1}}],[\"让浏览器保留1分钟\",{\"1\":{\"1892\":1}}],[\"让浏览器端再请求访问另一个web资源\",{\"1\":{\"1863\":1}}],[\"让浏览器去自主请求其他资源的一种方式\",{\"1\":{\"1862\":1}}],[\"让浏览器和人的行为之间有一个交互\",{\"1\":{\"1428\":1}}],[\"让目标资源完成部分工作\",{\"1\":{\"1860\":1}}],[\"让属性具有动态能力\",{\"1\":{\"1648\":1}}],[\"让id是可以唯一定位到一个元素\",{\"1\":{\"1510\":1}}],[\"让它们在一个分组中\",{\"1\":{\"1335\":1,\"1336\":1}}],[\"让数据以符合java风格的形式存在\",{\"1\":{\"1225\":1}}],[\"让这些sql语句真正执行去改变数据库中的数据\",{\"1\":{\"1108\":1}}],[\"让发布迭代过程更流畅\",{\"1\":{\"797\":1}}],[\"让编码更轻松\",{\"1\":{\"604\":1}}],[\"让迭代与修改都通过它来执行\",{\"1\":{\"266\":1}}],[\"警告预览与意图\",{\"0\":{\"604\":1}}],[\"调色板\",{\"0\":{\"1696\":1}}],[\"调整pom依赖\",{\"0\":{\"2748\":1}}],[\"调整pom\",{\"0\":{\"2186\":1}}],[\"调整窗口的大小\",{\"1\":{\"1372\":1}}],[\"调整事务状态\",{\"1\":{\"1288\":1}}],[\"调整链接为自动提交\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"调整字体大小\",{\"1\":{\"1159\":1}}],[\"调整windows服务\",{\"1\":{\"922\":1}}],[\"调试\",{\"0\":{\"671\":1}}],[\"调试项目\",{\"0\":{\"602\":1}}],[\"调用b\",{\"1\":{\"2728\":1}}],[\"调用bean的初始化方法\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"调用销毁方法\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"调用getbean的时候再去实例化对象\",{\"1\":{\"2552\":1}}],[\"调用applicationcontext接口下的getbean方法来从map中获取对象deptdao\",{\"1\":{\"2550\":1}}],[\"调用addentry\",{\"1\":{\"294\":1}}],[\"调用获取到的对象中的方法\",{\"1\":{\"2543\":1,\"2546\":1}}],[\"调用本次ajax请求时传递的options参数\",{\"1\":{\"2142\":1,\"2143\":1,\"2144\":1,\"2145\":1}}],[\"调用对象方法\",{\"1\":{\"1419\":1,\"1420\":1,\"1421\":1}}],[\"调用系统的构造函数创建对象\",{\"0\":{\"1419\":1}}],[\"调用存储过程\",{\"1\":{\"1147\":2}}],[\"调用的话只能通过接口类型来实现\",{\"1\":{\"821\":1}}],[\"调用condition的await\",{\"1\":{\"475\":1}}],[\"调用\",{\"1\":{\"366\":1}}],[\"调用当前类中的parseint方法\",{\"1\":{\"364\":1}}],[\"调用类本类的空构造器\",{\"1\":{\"338\":1}}],[\"调用hash方法\",{\"1\":{\"294\":1}}],[\"调用put方法\",{\"1\":{\"294\":1}}],[\"调用了当前类中的带参构造器\",{\"1\":{\"294\":1}}],[\"调用treeset\",{\"1\":{\"288\":1}}],[\"调用tostring方法将其转变为string\",{\"1\":{\"397\":1}}],[\"调用tostring方法\",{\"1\":{\"21\":1}}],[\"调用string的compareto方法进行字符串\",{\"1\":{\"288\":1}}],[\"调用equals比较\",{\"1\":{\"279\":1}}],[\"调用构造器\",{\"1\":{\"257\":1}}],[\"调用方法\",{\"1\":{\"219\":1,\"591\":1,\"1369\":3}}],[\"调用方法时需要传参的也可以直接传入参数\",{\"1\":{\"140\":1}}],[\"调用函数\",{\"1\":{\"76\":1}}],[\"您可能需要回顾\",{\"1\":{\"2918\":1}}],[\"您可以根据这些原则设计以系统资源为中心的\",{\"1\":{\"2823\":1}}],[\"您可以按ctrl+alt+shift+n查找方法或全局变量\",{\"1\":{\"609\":1}}],[\"您可以看到所选配置的常用运行操作\",{\"1\":{\"601\":1}}],[\"您还未登录\",{\"1\":{\"2096\":1}}],[\"您还可以使用ctrl\",{\"1\":{\"608\":1}}],[\"您已经登录过\",{\"1\":{\"2096\":1}}],[\"您或许会使用pattern属性\",{\"1\":{\"2029\":1}}],[\"您就可以开始学习\",{\"1\":{\"1559\":1}}],[\"您好\",{\"1\":{\"1355\":1,\"1893\":4}}],[\"您好~\",{\"1\":{\"515\":1,\"516\":1,\"517\":1}}],[\"您必须使用\",{\"1\":{\"1322\":1}}],[\"点\",{\"1\":{\"1458\":1,\"1459\":1}}],[\"点我呀3\",{\"1\":{\"1380\":1}}],[\"点我呀2\",{\"1\":{\"1380\":1}}],[\"点我呀\",{\"1\":{\"1379\":1,\"1380\":1}}],[\"点赞\",{\"1\":{\"1001\":1}}],[\"点击图标\",{\"1\":{\"2267\":1}}],[\"点击图标或者按\",{\"1\":{\"600\":1}}],[\"点击项目结构选项\",{\"1\":{\"1780\":1}}],[\"点击edit\",{\"1\":{\"1777\":1}}],[\"点击execute按钮执行开始应用这些配置项\",{\"1\":{\"922\":1}}],[\"点击ok\",{\"1\":{\"1214\":1}}],[\"点击finish按钮完成安装\",{\"1\":{\"922\":1}}],[\"点击next按钮\",{\"1\":{\"922\":1}}],[\"点击next按钮即可\",{\"1\":{\"922\":1}}],[\"点击merge\",{\"0\":{\"789\":1}}],[\"点击resolve\",{\"0\":{\"788\":1}}],[\"点击\",{\"1\":{\"760\":2,\"763\":2}}],[\"点击运行\",{\"1\":{\"725\":1}}],[\"点击setting\",{\"1\":{\"676\":1}}],[\"点击右下角的configure=\",{\"1\":{\"676\":1}}],[\"点击按钮添加到监视或者ctrl\",{\"1\":{\"671\":1}}],[\"点击三角图标或使用shift\",{\"1\":{\"601\":1}}],[\"点击对应的源码文件\",{\"1\":{\"600\":1}}],[\"点了几个菜\",{\"1\":{\"538\":1}}],[\"学生和课程\",{\"1\":{\"2440\":1}}],[\"学生和学生证\",{\"1\":{\"2440\":1}}],[\"学生选课系统\",{\"1\":{\"2417\":1}}],[\"学号是主键\",{\"1\":{\"937\":1}}],[\"学号\",{\"1\":{\"576\":1}}],[\"学习javascript\",{\"1\":{\"1355\":1}}],[\"学习html就是学习各种各样的标签\",{\"1\":{\"1325\":1}}],[\"学习和使用成本较高并且无事务处理\",{\"1\":{\"919\":1}}],[\"学习\",{\"1\":{\"542\":1}}],[\"学习路线\",{\"0\":{\"1\":1}}],[\"准确的说\",{\"1\":{\"1758\":1}}],[\"准确度高\",{\"1\":{\"1156\":1}}],[\"准确\",{\"1\":{\"650\":1}}],[\"准备环境\",{\"1\":{\"2565\":1}}],[\"准备mybatis的配置\",{\"0\":{\"2277\":1}}],[\"准备项目结构与数据\",{\"0\":{\"2273\":1}}],[\"准备数据源配置文件\",{\"0\":{\"2583\":1}}],[\"准备数据\",{\"0\":{\"2181\":1}}],[\"准备输出流\",{\"1\":{\"2087\":1}}],[\"准备实体类\",{\"0\":{\"2061\":1,\"2093\":1},\"1\":{\"2552\":1}}],[\"准备静态资源\",{\"0\":{\"2060\":1}}],[\"准备过滤器\",{\"0\":{\"2057\":1,\"2063\":1}}],[\"准备servlet\",{\"0\":{\"2056\":1,\"2062\":1},\"1\":{\"2075\":1}}],[\"准备一个登录页\",{\"1\":{\"1792\":1}}],[\"准备一个构造方法\",{\"1\":{\"1420\":1,\"1423\":1,\"1424\":1,\"1425\":1}}],[\"准备工作\",{\"0\":{\"1679\":1,\"2092\":1}}],[\"准备和数据库表格相对应的一个实体类\",{\"1\":{\"1226\":1}}],[\"准备素材类\",{\"0\":{\"576\":1}}],[\"准备加入的key\",{\"1\":{\"279\":1}}],[\"准动态语言\",{\"1\":{\"573\":1}}],[\"透过镜子看到类的各种信息\",{\"1\":{\"570\":1}}],[\"支付宝到账\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"支付宝\",{\"1\":{\"568\":2}}],[\"支持占位符是\",{\"1\":{\"2843\":1}}],[\"支持当前事务\",{\"1\":{\"2725\":1}}],[\"支持编程和声明式事务管理实现特殊接口类\",{\"1\":{\"2530\":1}}],[\"支持的数据类型只有\",{\"1\":{\"2289\":1}}],[\"支持的最大并发连接数\",{\"1\":{\"1765\":1}}],[\"支持模板引擎\",{\"1\":{\"2179\":1}}],[\"支持数据库关键词\",{\"1\":{\"2179\":1}}],[\"支持关键词自动转义\",{\"1\":{\"2179\":1}}],[\"支持全局通用方法注入\",{\"1\":{\"2179\":1}}],[\"支持自定义全局通用操作\",{\"1\":{\"2179\":1}}],[\"支持热加载\",{\"1\":{\"2179\":1}}],[\"支持主键自动生成\",{\"1\":{\"2179\":1}}],[\"支持多达\",{\"1\":{\"2179\":1}}],[\"支持多种数据库\",{\"1\":{\"2179\":1}}],[\"支持多个\",{\"1\":{\"1849\":2}}],[\"支持运算符的使用\",{\"1\":{\"1984\":1}}],[\"支持二级域名的跨域\",{\"1\":{\"1891\":1}}],[\"支持处理不同请求的组件\",{\"1\":{\"1765\":1}}],[\"支持封装\",{\"1\":{\"1376\":1}}],[\"支持和不完全支持javascript的\",{\"1\":{\"1375\":1}}],[\"支持cookie等\",{\"1\":{\"1372\":1}}],[\"支持链式调用\",{\"1\":{\"861\":1}}],[\"支持null\",{\"1\":{\"852\":1}}],[\"支持直接从公网下载源码和文档的\",{\"1\":{\"676\":1}}],[\"支持读写同时操作\",{\"1\":{\"336\":1}}],[\"支持什么压缩方法\",{\"1\":{\"177\":1}}],[\"支持客户\",{\"0\":{\"156\":1}}],[\"支持\",{\"1\":{\"61\":2,\"2179\":6,\"2533\":1,\"2843\":1}}],[\"结合绝对定位使用\",{\"1\":{\"1533\":1}}],[\"结点对象\",{\"1\":{\"1479\":1}}],[\"结尾添加元素\",{\"0\":{\"1395\":1,\"1396\":1}}],[\"结果为infinity\",{\"1\":{\"1987\":1}}],[\"结果是\",{\"1\":{\"2126\":2}}],[\"结果是修改后的https\",{\"1\":{\"1681\":1}}],[\"结果是默认的国外网址https\",{\"1\":{\"1681\":1}}],[\"结果是nan\",{\"1\":{\"1361\":1}}],[\"结果是否不同\",{\"1\":{\"702\":1}}],[\"结果是否相同\",{\"1\":{\"702\":1}}],[\"结果默认就是浮点数\",{\"1\":{\"1361\":1}}],[\"结果通常是\",{\"1\":{\"976\":1}}],[\"结果收集到数组\",{\"0\":{\"879\":1}}],[\"结果收集到集合\",{\"0\":{\"878\":1}}],[\"结果\",{\"1\":{\"581\":1,\"1838\":1,\"1839\":1,\"1840\":1,\"1841\":1,\"1842\":1}}],[\"结束timeout\",{\"1\":{\"1459\":1}}],[\"结束interval\",{\"1\":{\"1458\":1}}],[\"结束\",{\"1\":{\"561\":1}}],[\"结构清晰\",{\"1\":{\"2528\":1}}],[\"结构跟t\",{\"1\":{\"956\":1}}],[\"结构和数据跟t\",{\"1\":{\"956\":1}}],[\"结构特点\",{\"1\":{\"226\":1}}],[\"结构逻辑图\",{\"1\":{\"226\":1}}],[\"结构层次\",{\"0\":{\"29\":1}}],[\"冰天雪地\",{\"1\":{\"560\":1,\"561\":1}}],[\"冬天蚊子死翘翘\",{\"1\":{\"1366\":1}}],[\"冬天吃火锅\",{\"1\":{\"1366\":1}}],[\"冬天\",{\"1\":{\"560\":1,\"561\":1}}],[\"硕果累累\",{\"1\":{\"560\":1,\"561\":1}}],[\"秋天一身包\",{\"1\":{\"1366\":1}}],[\"秋天到了\",{\"1\":{\"1366\":1}}],[\"秋天\",{\"1\":{\"560\":1,\"561\":1}}],[\"烈日炎炎\",{\"1\":{\"560\":1,\"561\":1}}],[\"夏天蚊子咬\",{\"1\":{\"1366\":1}}],[\"夏天到了\",{\"1\":{\"1366\":1}}],[\"夏天\",{\"1\":{\"560\":1,\"561\":1}}],[\"春眠不觉晓\",{\"1\":{\"1366\":1}}],[\"春暖花开\",{\"1\":{\"560\":1,\"561\":1}}],[\"春天的早晨\",{\"1\":{\"2726\":1}}],[\"春天吃青菜\",{\"1\":{\"1366\":1}}],[\"春天来了\",{\"1\":{\"1366\":1}}],[\"春天\",{\"1\":{\"560\":1,\"561\":1}}],[\"外面\",{\"1\":{\"2645\":1}}],[\"外层异常回滚外层+内层\",{\"1\":{\"2737\":1}}],[\"外层调用try\",{\"1\":{\"2737\":1}}],[\"外层默认事务\",{\"1\":{\"2737\":1}}],[\"外层无事务\",{\"1\":{\"2732\":1}}],[\"外层有事务\",{\"1\":{\"2732\":1}}],[\"外层点击\",{\"1\":{\"1656\":1,\"1658\":1,\"1659\":1,\"1661\":1}}],[\"外层div\",{\"1\":{\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1}}],[\"外边距是透明的\",{\"1\":{\"1527\":1}}],[\"外边距\",{\"1\":{\"1527\":1,\"1529\":1}}],[\"外连接分为左外连接和右外连接\",{\"1\":{\"1058\":1}}],[\"外连接查询\",{\"0\":{\"1058\":1}}],[\"外键参考当前表的主键\",{\"1\":{\"2440\":1}}],[\"外键保障数据的完整性和一致性\",{\"1\":{\"998\":1}}],[\"外键是构建于一个表的两个字段或是两个表的两个字段之间的参照关系\",{\"1\":{\"997\":1}}],[\"外键\",{\"1\":{\"983\":1,\"1211\":2}}],[\"外键字段\",{\"1\":{\"983\":1}}],[\"外键约束等级\",{\"0\":{\"1003\":1}}],[\"外键约束的要求\",{\"0\":{\"1002\":1}}],[\"外键约束名\",{\"1\":{\"1000\":1}}],[\"外键约束是保证一个或两个表之间的参照完整性\",{\"1\":{\"997\":1}}],[\"外键约束\",{\"0\":{\"996\":1},\"1\":{\"981\":1}}],[\"外\",{\"1\":{\"856\":1}}],[\"外部内部事务互相隔离\",{\"1\":{\"2737\":1}}],[\"外部bean\",{\"1\":{\"2562\":1}}],[\"外部属性配置文件存储数据库链接信息\",{\"0\":{\"2331\":1}}],[\"外部样式\",{\"0\":{\"1472\":1},\"1\":{\"1473\":1}}],[\"外部类\",{\"1\":{\"581\":1}}],[\"外部比较器\",{\"0\":{\"275\":1},\"1\":{\"271\":1,\"287\":1}}],[\"外界不能调用这个构造器\",{\"1\":{\"560\":1,\"561\":1}}],[\"极大提高了检索速度\",{\"1\":{\"1127\":1}}],[\"极大提高传输性能\",{\"1\":{\"167\":1}}],[\"极大文本数据\",{\"1\":{\"941\":1}}],[\"极大整数值\",{\"1\":{\"939\":1}}],[\"极少用\",{\"0\":{\"556\":1}}],[\"很少有人使用\",{\"1\":{\"1542\":1}}],[\"很少用\",{\"0\":{\"555\":1}}],[\"很显然两者的数据库执行效率是不同的\",{\"1\":{\"1230\":1}}],[\"很多人搞不清楚\",{\"1\":{\"2125\":1}}],[\"很多浏览器都限制一个域名保存cookie的数量\",{\"1\":{\"1902\":1}}],[\"很多老的jquery插件不支持这个版本\",{\"1\":{\"1542\":1}}],[\"很多时候我们必须要进行拆表\",{\"1\":{\"997\":1}}],[\"很多jar包都需要在其他jar包的支持下才能够正常工作\",{\"1\":{\"651\":1}}],[\"很相似\",{\"1\":{\"391\":1}}],[\"未开启事务的危害\",{\"0\":{\"2698\":1}}],[\"未定义\",{\"0\":{\"1358\":1}}],[\"未成年=\",{\"1\":{\"881\":2}}],[\"未成年\",{\"1\":{\"881\":2}}],[\"未commit\",{\"1\":{\"743\":2}}],[\"未add\",{\"1\":{\"743\":1}}],[\"未修改状态\",{\"1\":{\"734\":1}}],[\"未被纳入版本控制\",{\"1\":{\"734\":1}}],[\"未跟踪\",{\"1\":{\"734\":1}}],[\"未注明的则不可以使用\",{\"1\":{\"554\":1}}],[\"未来的开发模式都是基于注解的\",{\"1\":{\"534\":1}}],[\"保证一个事务修改的数据提交后才能被另外一个事务读取\",{\"1\":{\"2721\":1}}],[\"保证只有一个线程到数据库中查找指定key对应的数据\",{\"1\":{\"2481\":1}}],[\"保证用于数据提交后\",{\"1\":{\"2111\":1}}],[\"保证对象的要获取的属性必须有对应get方法才可以\",{\"1\":{\"1980\":1}}],[\"保证事务中的所有操作都作为一个工作单元来执行\",{\"1\":{\"1099\":1}}],[\"保留站位其他元素的位置不会发生移动\",{\"1\":{\"1533\":1,\"1534\":1}}],[\"保留字\",{\"1\":{\"1372\":1}}],[\"保留在\",{\"1\":{\"553\":1}}],[\"保险等行业大型数据库的需求上\",{\"1\":{\"919\":1}}],[\"保障代码的安全性\",{\"1\":{\"596\":1}}],[\"保存到可永久保存的存储设备中\",{\"1\":{\"2199\":1}}],[\"保存到硬盘\",{\"1\":{\"2090\":1}}],[\"保存在内存上\",{\"1\":{\"1885\":1}}],[\"保存在磁盘上\",{\"1\":{\"1885\":1}}],[\"保存查询结果\",{\"1\":{\"1195\":1}}],[\"保存github账号\",{\"0\":{\"791\":1}}],[\"保存数据2\",{\"1\":{\"109\":1}}],[\"保存数据\",{\"1\":{\"106\":1}}],[\"保存配置\",{\"1\":{\"48\":1}}],[\"元\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"元字符\",{\"1\":{\"1582\":1}}],[\"元数据\",{\"1\":{\"1196\":1}}],[\"元注解是用于修饰其它注解的注解\",{\"1\":{\"552\":1}}],[\"元注解\",{\"0\":{\"552\":1}}],[\"元素不使用缓存\",{\"1\":{\"2480\":1}}],[\"元素中指定的属性\",{\"1\":{\"2333\":1}}],[\"元素中的\",{\"1\":{\"2333\":1}}],[\"元素体内指定的属性\",{\"1\":{\"2333\":1}}],[\"元素的子元素中设置\",{\"1\":{\"2332\":1}}],[\"元素的作用是对当前文件的样式进行修饰\",{\"1\":{\"1691\":1}}],[\"元素的作用是对当前文件逻辑进行交互\",{\"1\":{\"1691\":1}}],[\"元素的作用是搭建vue文件的结构\",{\"1\":{\"1691\":1}}],[\"元素就会显示\",{\"1\":{\"1638\":1}}],[\"元素在小范围移动的时候\",{\"1\":{\"1533\":1}}],[\"元素原来所在的位置被保留了\",{\"1\":{\"1533\":1,\"1534\":1}}],[\"元素之间的布局\",{\"1\":{\"1527\":1}}],[\"元素\",{\"1\":{\"1525\":1,\"1555\":2,\"1568\":1,\"1703\":1}}],[\"元素名字\",{\"1\":{\"1508\":1}}],[\"元素选择器\",{\"0\":{\"1508\":1},\"1\":{\"1508\":1}}],[\"元素节点element\",{\"1\":{\"1479\":1}}],[\"元素页面和样式\",{\"1\":{\"1473\":1}}],[\"元素获取用户输入时触发\",{\"1\":{\"1438\":1}}],[\"元素获取焦点时触发\",{\"1\":{\"1438\":1}}],[\"元素即将失去焦点时触发\",{\"1\":{\"1438\":1}}],[\"元素即将获取焦点时触发\",{\"1\":{\"1438\":1}}],[\"元素失去焦点时触发\",{\"1\":{\"1438\":1}}],[\"元素仅仅会规定在框架集中存在多少列或多少行\",{\"1\":{\"1322\":1}}],[\"元素可定义一个框架集\",{\"1\":{\"1322\":1}}],[\"元素可以重复\",{\"1\":{\"259\":1}}],[\"元素包含文档的所有内容\",{\"1\":{\"1295\":1}}],[\"元素是定义文档的主体\",{\"1\":{\"1295\":1}}],[\"元素是否都不满足条件\",{\"1\":{\"870\":1}}],[\"元素是否都满足条件\",{\"1\":{\"870\":1}}],[\"元素是否有任意一个满足条件\",{\"1\":{\"870\":1}}],[\"元素为null\",{\"1\":{\"338\":1}}],[\"跟接口没有一点关系\",{\"1\":{\"548\":1}}],[\"抑制编译器警告\",{\"1\":{\"543\":1}}],[\"配\",{\"1\":{\"2780\":2}}],[\"配合springboot使用日志门面\",{\"1\":{\"2300\":1}}],[\"配合javadoc工具\",{\"1\":{\"536\":1}}],[\"配置编码过滤器\",{\"0\":{\"2912\":1},\"1\":{\"2912\":1}}],[\"配置编译环境\",{\"0\":{\"2268\":1}}],[\"配置数据源\",{\"1\":{\"2903\":1,\"2906\":1,\"2907\":1}}],[\"配置德鲁伊数据源\",{\"1\":{\"2903\":1,\"2906\":1}}],[\"配置德鲁伊连接池\",{\"1\":{\"2666\":1}}],[\"配置三大组件\",{\"0\":{\"2901\":1}}],[\"配置静态资源放行\",{\"1\":{\"2898\":1,\"2902\":1}}],[\"配置的一模一样\",{\"1\":{\"2835\":1}}],[\"配置的数字为启动顺序\",{\"1\":{\"1825\":1}}],[\"配置hiddenhttpmethodfilter\",{\"1\":{\"2829\":1,\"2830\":1}}],[\"配置处理器适配器\",{\"1\":{\"2779\":2}}],[\"配置处理器映射器\",{\"1\":{\"2779\":2}}],[\"配置方式\",{\"0\":{\"2778\":1}}],[\"配置视图解析器\",{\"1\":{\"2765\":1,\"2779\":1,\"2780\":1,\"2789\":1}}],[\"配置初始化参数\",{\"1\":{\"2759\":1}}],[\"配置切面\",{\"1\":{\"2710\":1}}],[\"配置切面类\",{\"1\":{\"2648\":1}}],[\"配置切入点\",{\"1\":{\"2710\":1}}],[\"配置事务的参数\",{\"1\":{\"2710\":1}}],[\"配置事务管理模板\",{\"1\":{\"2701\":1}}],[\"配置事务管理器\",{\"1\":{\"2701\":1,\"2903\":1,\"2908\":1}}],[\"配置通知\",{\"1\":{\"2710\":1}}],[\"配置一个事务管理器\",{\"1\":{\"2706\":1,\"2710\":1}}],[\"配置dispatcherservlet的映射路径为\",{\"1\":{\"2759\":1}}],[\"配置datasourcetransactionmanager事务管理器\",{\"1\":{\"2706\":1,\"2710\":1}}],[\"配置dhcp\",{\"1\":{\"48\":1}}],[\"配置jdbctemplate对象\",{\"1\":{\"2666\":1}}],[\"配置throwing属性的值设置形参的名称\",{\"1\":{\"2653\":1}}],[\"配置tomcat\",{\"0\":{\"1758\":1}}],[\"配置tomcat并发数\",{\"0\":{\"1757\":1}}],[\"配置returning属性的值设置形参的名称\",{\"1\":{\"2652\":1}}],[\"配置公共切入点表达式\",{\"1\":{\"2648\":1}}],[\"配置类型转换器\",{\"1\":{\"2799\":1}}],[\"配置类\",{\"1\":{\"2601\":1}}],[\"配置以及其他初始化方法前后要添加一些自己逻辑处理\",{\"1\":{\"2572\":1}}],[\"配置环境\",{\"0\":{\"2499\":1}}],[\"配置环境变量\",{\"1\":{\"674\":1}}],[\"配置ehcache的环境\",{\"0\":{\"2483\":1}}],[\"配置完成后所有的association和collection元素都生效\",{\"1\":{\"2434\":1}}],[\"配置log4j2\",{\"0\":{\"2312\":1}}],[\"配置loj4g\",{\"0\":{\"2308\":1}}],[\"配置pom文件\",{\"0\":{\"2307\":1,\"2311\":1}}],[\"配置spring\",{\"1\":{\"2911\":1}}],[\"配置springmvc\",{\"1\":{\"2910\":1}}],[\"配置spring事务\",{\"0\":{\"2908\":1}}],[\"配置spring工程\",{\"0\":{\"2666\":1},\"1\":{\"2696\":1}}],[\"配置sqlsessionfactory\",{\"1\":{\"2903\":2,\"2907\":2}}],[\"配置simpledateformat日期格式\",{\"1\":{\"2301\":1}}],[\"配置servlet的映射路径\",{\"1\":{\"545\":1}}],[\"配置servlet的信息\",{\"1\":{\"545\":1}}],[\"配置servlet\",{\"1\":{\"545\":1}}],[\"配置记录log例外\",{\"1\":{\"2298\":1}}],[\"配置插件\",{\"0\":{\"2288\":1,\"2295\":1}}],[\"配置文件方式\",{\"1\":{\"2771\":1}}],[\"配置文件代码\",{\"0\":{\"2326\":1,\"2329\":1}}],[\"配置文件中添加手动配置打印的格式\",{\"1\":{\"2299\":1}}],[\"配置文件修改\",{\"0\":{\"2297\":1}}],[\"配置文件\",{\"0\":{\"2278\":1},\"1\":{\"2777\":1}}],[\"配置项目环境\",{\"0\":{\"2264\":1}}],[\"配置逻辑删除\",{\"1\":{\"2235\":1}}],[\"配置主键自增得在表结构中的字段要设置自动增长才行\",{\"1\":{\"2227\":1}}],[\"配置好插件之后\",{\"1\":{\"2179\":1}}],[\"配置监听器\",{\"1\":{\"2075\":1}}],[\"配置过滤器\",{\"0\":{\"2058\":1}}],[\"配置过滤链\",{\"1\":{\"2047\":1}}],[\"配置filter初始化参数\",{\"1\":{\"2049\":1}}],[\"配置filter\",{\"0\":{\"1999\":1}}],[\"配置各种错误的提示页\",{\"1\":{\"1960\":1}}],[\"配置首页\",{\"1\":{\"1795\":1}}],[\"配置web\",{\"0\":{\"1795\":1,\"2909\":1}}],[\"配置用户即角色\",{\"1\":{\"1759\":1}}],[\"配置访问用户\",{\"0\":{\"1759\":1}}],[\"配置访问tomcat的用户以及角色的配置文件\",{\"1\":{\"1753\":1}}],[\"配置npm\",{\"0\":{\"1681\":1}}],[\"配置nat模式\",{\"1\":{\"928\":1}}],[\"配置mbg\",{\"0\":{\"2501\":1}}],[\"配置mapperscanner\",{\"1\":{\"2903\":1,\"2907\":1}}],[\"配置mapper文件\",{\"1\":{\"2478\":1}}],[\"配置maven包\",{\"0\":{\"2265\":1}}],[\"配置maven信息\",{\"1\":{\"2263\":1}}],[\"配置maven的核心配置文件pom\",{\"0\":{\"680\":1}}],[\"配置maven自动导入依赖的jar包\",{\"1\":{\"676\":1}}],[\"配置mybatis配置文件\",{\"1\":{\"2478\":1}}],[\"配置mybatis使用的日志\",{\"0\":{\"2314\":1}}],[\"配置mybatis\",{\"1\":{\"2225\":1}}],[\"配置mysql的远程访问\",{\"1\":{\"928\":1}}],[\"配置网关\",{\"1\":{\"928\":1}}],[\"配置vmware的网络\",{\"1\":{\"928\":1}}],[\"配置vmnet8链接中的参数\",{\"1\":{\"48\":1}}],[\"配置多个安装细节\",{\"1\":{\"922\":1}}],[\"配置git程序\",{\"0\":{\"776\":1}}],[\"配置git忽略文件\",{\"0\":{\"765\":1}}],[\"配置父类的module修改pom\",{\"1\":{\"714\":1,\"715\":1}}],[\"配置\",{\"0\":{\"1164\":1},\"1\":{\"684\":1,\"1686\":1,\"2324\":1}}],[\"配置阿里云镜像\",{\"1\":{\"675\":1}}],[\"配置入口文件\",{\"1\":{\"114\":1}}],[\"配置便捷容易上手\",{\"1\":{\"61\":1}}],[\"配置虚拟机的网络\",{\"1\":{\"928\":1}}],[\"配置虚拟机使用固定ip\",{\"1\":{\"49\":1}}],[\"配置虚拟机系统\",{\"0\":{\"49\":1}}],[\"配置虚拟机软件\",{\"0\":{\"48\":1}}],[\"框架提供了很多的\",{\"1\":{\"2775\":1}}],[\"框架提供了构建\",{\"1\":{\"2740\":1}}],[\"框架的测试\",{\"1\":{\"2533\":1}}],[\"框架的基本组成部分\",{\"1\":{\"2532\":1}}],[\"框架是由于软件开发的复杂性而创建的\",{\"1\":{\"2520\":1}}],[\"框架是一个半成品\",{\"1\":{\"2197\":1}}],[\"框架还有一个作用是\",{\"1\":{\"2197\":1}}],[\"框架预定义了这些设计参数\",{\"1\":{\"2197\":1}}],[\"框架规定了你的应用的体系结构\",{\"1\":{\"2197\":1}}],[\"框架可以看做是项目开发的半成品\",{\"1\":{\"2197\":1}}],[\"框架这个广泛的定义使用的十分流行\",{\"1\":{\"2197\":1}}],[\"框架包含了贯穿于整个库的移动设备优先的样式\",{\"1\":{\"1559\":1}}],[\"框架集合\",{\"0\":{\"1322\":1},\"1\":{\"1322\":1}}],[\"框架\",{\"0\":{\"1320\":1},\"1\":{\"1322\":1,\"2197\":2,\"2533\":1}}],[\"框架配置文件\",{\"1\":{\"660\":1}}],[\"框架=注解+反射+设计模式\",{\"1\":{\"534\":1}}],[\"框架搭建与注意事项\",{\"0\":{\"2754\":1,\"3178\":1},\"1\":{\"217\":1}}],[\"代理对象引用的是目标对象\",{\"1\":{\"2658\":1}}],[\"代理对象只能读取到接口中方法上的注解\",{\"1\":{\"2610\":1}}],[\"代理对象只能增强接口中定义的方法\",{\"1\":{\"2610\":1}}],[\"代理对象增强的是实现类\",{\"1\":{\"2610\":1}}],[\"代理类并不是在java代码中定义好的\",{\"1\":{\"2607\":1}}],[\"代理类在程序运行时才创建的代理模式成为动态代理\",{\"1\":{\"2607\":1}}],[\"代理类与被代理类实现共同接口\",{\"1\":{\"2604\":1}}],[\"代理模式基本开发\",{\"0\":{\"2381\":1}}],[\"代理模式浅析\",{\"0\":{\"2380\":1}}],[\"代表mybatis底层使用的preparedstatment语句对象\",{\"1\":{\"2352\":1}}],[\"代表mybatis底层使用statment语句对象\",{\"1\":{\"2352\":1}}],[\"代表所有\",{\"1\":{\"2172\":1}}],[\"代表有一位数字\",{\"1\":{\"2031\":1}}],[\"代表必须有一位数字\",{\"1\":{\"2031\":1}}],[\"代表从项目的部署目录开始找\",{\"1\":{\"1868\":1}}],[\"代表向上一层的路径\",{\"1\":{\"1873\":1,\"1877\":1}}],[\"代表向上一层\",{\"1\":{\"1868\":1}}],[\"代表指定一个web应用\",{\"1\":{\"1768\":1}}],[\"代表一位数字\",{\"1\":{\"2029\":2}}],[\"代表一个节点的属性对象\",{\"1\":{\"1485\":1}}],[\"代表一项事务操作\",{\"1\":{\"1233\":1}}],[\"代表浏览器访问历史记录\",{\"1\":{\"1463\":1}}],[\"代表浏览器上url地址栏\",{\"1\":{\"1462\":1}}],[\"代表本机的ip地址\",{\"1\":{\"1330\":1}}],[\"代表数据库连接\",{\"1\":{\"1255\":1}}],[\"代表元素的个数\",{\"1\":{\"863\":1}}],[\"代办\",{\"0\":{\"1181\":1}}],[\"代替javaee旧版中所遗留的繁冗代码和xml配置等\",{\"1\":{\"534\":1}}],[\"代码复用率也不好\",{\"1\":{\"2606\":1}}],[\"代码复用度高\",{\"1\":{\"1380\":1}}],[\"代码复用度低\",{\"1\":{\"1379\":1}}],[\"代码demo\",{\"0\":{\"2605\":1,\"2609\":1}}],[\"代码段1代码段2\",{\"1\":{\"2461\":1}}],[\"代码生成器\",{\"0\":{\"2291\":1},\"1\":{\"2292\":1}}],[\"代码繁琐无技术含量\",{\"1\":{\"2198\":1}}],[\"代码繁琐并且不能保证严谨性\",{\"1\":{\"1580\":1}}],[\"代码和手动设置参数以及获取结果集\",{\"1\":{\"2196\":1}}],[\"代码组织形式\",{\"0\":{\"1939\":1}}],[\"代码会直接出现异常\",{\"1\":{\"1889\":1}}],[\"代码中记录日志\",{\"0\":{\"1286\":1},\"1\":{\"2304\":1}}],[\"代码编写简单\",{\"1\":{\"1283\":1}}],[\"代码编写方式会有其他变化\",{\"1\":{\"1263\":1}}],[\"代码编辑完成后即可进行\",{\"1\":{\"738\":1}}],[\"代码变的更小巧精致\",{\"1\":{\"1209\":1}}],[\"代码块\",{\"0\":{\"1179\":1},\"1\":{\"2464\":1}}],[\"代码格式\",{\"0\":{\"635\":1}}],[\"代码分析工具\",{\"1\":{\"533\":1}}],[\"代码演示\",{\"0\":{\"362\":1}}],[\"代码的核心关键是\",{\"1\":{\"334\":1}}],[\"代码\",{\"0\":{\"327\":1,\"337\":1,\"347\":1,\"352\":1,\"405\":1,\"408\":1,\"465\":1,\"471\":1,\"480\":1,\"503\":1,\"506\":1,\"1178\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2546\":1,\"2615\":1,\"2811\":1,\"2814\":1,\"2817\":1,\"2820\":1},\"1\":{\"442\":1,\"875\":1,\"1195\":1,\"2030\":1}}],[\"代码逻辑概述\",{\"1\":{\"294\":1}}],[\"代码实践\",{\"0\":{\"285\":1}}],[\"代码片段的名称\",{\"1\":{\"150\":1}}],[\"代码片段所在页面的逻辑视图\",{\"1\":{\"150\":1}}],[\"代码辅助\",{\"0\":{\"633\":1,\"3043\":1},\"1\":{\"44\":1}}],[\"代码补全\",{\"0\":{\"619\":1,\"3041\":1},\"1\":{\"44\":1}}],[\"代码声明\",{\"0\":{\"36\":1}}],[\"代码案例\",{\"0\":{\"19\":1,\"24\":1,\"30\":1,\"32\":1,\"387\":1,\"390\":1,\"538\":1,\"2047\":1}}],[\"代码臃肿\",{\"1\":{\"17\":1}}],[\"忽略警告等\",{\"1\":{\"534\":1}}],[\"符号进行拼接\",{\"1\":{\"1330\":1,\"1336\":1}}],[\"符号说明\",{\"1\":{\"827\":1}}],[\"符号表示\",{\"1\":{\"827\":1}}],[\"符号帮我们标记出来\",{\"1\":{\"750\":1}}],[\"符号\",{\"1\":{\"533\":1,\"2029\":1}}],[\"白盒测试\",{\"0\":{\"530\":1}}],[\"黑盒测试\",{\"0\":{\"529\":1}}],[\"衡量软件质量\",{\"1\":{\"527\":1}}],[\"申请网络资源\",{\"1\":{\"524\":1}}],[\"申请io资源\",{\"1\":{\"524\":1}}],[\"申请数据库资源\",{\"1\":{\"524\":1}}],[\"某个事务中的操作都具有共同的目标\",{\"1\":{\"2685\":1}}],[\"某个键盘按键被松开\",{\"1\":{\"1435\":1}}],[\"某个键盘按键被按下并松开\",{\"1\":{\"1435\":1}}],[\"某个键盘按键被按下\",{\"1\":{\"1435\":1}}],[\"某项目拆分的情况如下\",{\"1\":{\"653\":1}}],[\"某一个方法中\",{\"1\":{\"524\":2}}],[\"某些资源客户端是一定会请求的\",{\"1\":{\"169\":1}}],[\"功能\",{\"1\":{\"2532\":1}}],[\"功能却很强大\",{\"1\":{\"1943\":1}}],[\"功能不再新增\",{\"1\":{\"1542\":2}}],[\"功能分支\",{\"0\":{\"806\":1}}],[\"功能类\",{\"1\":{\"523\":1,\"525\":1}}],[\"功能强的网络系统\",{\"1\":{\"492\":1}}],[\"嵌套事务支持\",{\"1\":{\"2733\":1}}],[\"嵌套and\",{\"0\":{\"2246\":1}}],[\"嵌套or\",{\"0\":{\"2246\":1}}],[\"嵌套诊断环境\",{\"1\":{\"1287\":1}}],[\"嵌套高级流\",{\"1\":{\"509\":2}}],[\"嵌入js代码\",{\"1\":{\"1379\":1}}],[\"嵌入内容\",{\"1\":{\"1162\":1}}],[\"嵌入块\",{\"0\":{\"1162\":1}}],[\"嵌入网页的javascript代码越来越庞大\",{\"1\":{\"100\":1}}],[\"端口号\",{\"1\":{\"505\":1,\"1462\":1}}],[\"四个域标志关键字分别为\",{\"1\":{\"1978\":1}}],[\"四个域对象\",{\"0\":{\"1968\":1}}],[\"四\",{\"1\":{\"1718\":1}}],[\"四位数字\",{\"1\":{\"1415\":2}}],[\"四次挥手\",{\"0\":{\"498\":1}}],[\"四次挥手的方式\",{\"1\":{\"496\":1}}],[\"四舍五入\",{\"1\":{\"367\":1,\"368\":1,\"1411\":1}}],[\"安全\",{\"1\":{\"1330\":1}}],[\"安全等于\",{\"1\":{\"1030\":1}}],[\"安全性较差\",{\"1\":{\"1230\":1}}],[\"安全性越高\",{\"1\":{\"1112\":1}}],[\"安全性\",{\"1\":{\"919\":1,\"1374\":1}}],[\"安全性高\",{\"1\":{\"919\":1}}],[\"安全散列算法1\",{\"1\":{\"702\":1}}],[\"安全可靠的\",{\"1\":{\"496\":1}}],[\"安装mybatisx\",{\"0\":{\"2272\":1}}],[\"安装maven核心程序\",{\"0\":{\"674\":1}}],[\"安装lombok\",{\"0\":{\"2271\":1}}],[\"安装vue\",{\"1\":{\"1682\":1}}],[\"安装nodejs\",{\"1\":{\"1680\":1}}],[\"安装nodejs并验证\",{\"0\":{\"1680\":1}}],[\"安装开发工具\",{\"0\":{\"1327\":1}}],[\"安装插件\",{\"0\":{\"1191\":1,\"2270\":1}}],[\"安装位置为c\",{\"1\":{\"923\":1}}],[\"安装位置为\",{\"1\":{\"923\":1}}],[\"安装了mysql数据文件夹\",{\"1\":{\"923\":1}}],[\"安装了mysql软件\",{\"1\":{\"923\":1}}],[\"安装了windows\",{\"1\":{\"923\":1}}],[\"安装全部选项\",{\"1\":{\"922\":1}}],[\"安装说明\",{\"1\":{\"808\":1}}],[\"安装完成后\",{\"1\":{\"726\":1}}],[\"安装完成\",{\"1\":{\"725\":1,\"922\":1}}],[\"安装目录\",{\"1\":{\"725\":1}}],[\"安装步骤\",{\"0\":{\"810\":1,\"922\":1},\"1\":{\"725\":1}}],[\"安装style\",{\"1\":{\"115\":1}}],[\"安装后查看版本号\",{\"1\":{\"112\":1}}],[\"安装转码器\",{\"1\":{\"98\":1}}],[\"安装会自动在项目目录下添加\",{\"1\":{\"94\":1}}],[\"安装依赖包的最新版\",{\"1\":{\"94\":1}}],[\"安装\",{\"0\":{\"97\":1,\"112\":1,\"667\":1,\"724\":1,\"725\":1,\"1740\":1},\"1\":{\"85\":1,\"709\":1}}],[\"~~删除~~\",{\"1\":{\"1170\":1}}],[\"~表示当前用户的家目录\",{\"1\":{\"675\":1}}],[\"~\",{\"1\":{\"493\":5,\"675\":1,\"1411\":1,\"1415\":25,\"1548\":2}}],[\"~127\",{\"1\":{\"364\":1}}],[\"设定指定时区的时间\",{\"1\":{\"901\":1}}],[\"设计\",{\"1\":{\"1527\":1}}],[\"设计不合理\",{\"1\":{\"891\":2}}],[\"设计或选择测试用例\",{\"1\":{\"530\":1}}],[\"设略赋值\",{\"0\":{\"551\":1}}],[\"设备之间在网络中进行数据的传输\",{\"1\":{\"492\":1}}],[\"设置视图\",{\"1\":{\"2931\":1}}],[\"设置过滤器\",{\"0\":{\"2806\":1}}],[\"设置过滤表前缀\",{\"1\":{\"2293\":1}}],[\"设置不回滚的异常\",{\"1\":{\"2710\":1,\"2717\":1}}],[\"设置父类字节码\",{\"1\":{\"2615\":1}}],[\"设置父包模块名\",{\"1\":{\"2293\":1}}],[\"设置父包名\",{\"1\":{\"2293\":1}}],[\"设置全局日志级别\",{\"1\":{\"2487\":1}}],[\"设置全局用户签名\",{\"0\":{\"726\":1}}],[\"设置实体类\",{\"1\":{\"2478\":1}}],[\"设置emp本身的八个属性的映射关系\",{\"1\":{\"2425\":1}}],[\"设置此项可以提升mybatis框架的性能\",{\"1\":{\"2420\":1}}],[\"设置主键字段\",{\"1\":{\"2410\":1}}],[\"设置默认值\",{\"0\":{\"2334\":1}}],[\"设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值\",{\"1\":{\"2332\":1}}],[\"设置使用p6spy\",{\"1\":{\"2298\":1}}],[\"设置需要生成的表名\",{\"1\":{\"2293\":1}}],[\"设置作者\",{\"1\":{\"2293\":1}}],[\"设置了泛型user\",{\"1\":{\"2223\":1}}],[\"设置请求超时时间\",{\"1\":{\"2137\":1}}],[\"设置请求方式和参数xhr\",{\"1\":{\"2114\":1}}],[\"设置请求编码方式\",{\"0\":{\"2805\":1}}],[\"设置请求编码\",{\"1\":{\"1801\":1}}],[\"设置回滚的异常\",{\"1\":{\"2710\":1,\"2716\":1}}],[\"设置回滚点\",{\"1\":{\"1235\":2}}],[\"设置回调函数\",{\"1\":{\"2112\":1,\"2114\":1}}],[\"设置为false\",{\"1\":{\"2480\":1,\"2710\":1}}],[\"设置为false即可\",{\"1\":{\"2155\":1}}],[\"设置为false将不会触发全局ajax事件\",{\"1\":{\"2148\":1}}],[\"设置为false将不会从浏览器缓存中加载请求信息\",{\"1\":{\"2139\":1}}],[\"设置为\",{\"1\":{\"2077\":1,\"2301\":1}}],[\"设置jsp页面转换的语言\",{\"1\":{\"1960\":1}}],[\"设置tomcat中\",{\"1\":{\"1810\":1}}],[\"设置文件下载\",{\"0\":{\"1807\":1}}],[\"设置文字\",{\"1\":{\"1571\":1}}],[\"设置服务端为浏览器产生响应的响应编码\",{\"1\":{\"1806\":2}}],[\"设置字符型响应\",{\"0\":{\"1806\":1}}],[\"设置响应内容和编码\",{\"1\":{\"1927\":1}}],[\"设置响应可以在转发之前\",{\"1\":{\"1860\":1}}],[\"设置响应类型和编码\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"设置响应类型为图片类型\",{\"1\":{\"1806\":2}}],[\"设置响应头\",{\"1\":{\"1808\":1,\"1813\":1,\"1893\":1}}],[\"设置响应状态\",{\"1\":{\"1804\":1}}],[\"设置响应码\",{\"1\":{\"1804\":1,\"1808\":1}}],[\"设置成淘宝镜像\",{\"1\":{\"1681\":1}}],[\"设置三个相等的列\",{\"1\":{\"1601\":1}}],[\"设置样式\",{\"1\":{\"1571\":1}}],[\"设置元素谁在上谁在下\",{\"1\":{\"1534\":1}}],[\"设置堆叠顺序\",{\"1\":{\"1534\":1}}],[\"设置完成状态\",{\"1\":{\"1515\":1}}],[\"设置触发状态\",{\"1\":{\"1515\":1}}],[\"设置鼠标悬浮状态\",{\"1\":{\"1515\":1}}],[\"设置静止状态\",{\"1\":{\"1515\":1}}],[\"设置的\",{\"1\":{\"1452\":1}}],[\"设置窗口状态栏的文本\",{\"1\":{\"1451\":1}}],[\"设置或返回当前页面相对于窗口显示区左上角的\",{\"1\":{\"1451\":2}}],[\"设置或返回窗口的名称\",{\"1\":{\"1451\":1}}],[\"设置或返回窗口中的框架数量\",{\"1\":{\"1451\":1}}],[\"设置或返回窗口状态栏中的默认文本\",{\"1\":{\"1451\":1}}],[\"设置指定时间的秒字段\",{\"1\":{\"1415\":1}}],[\"设置指定的日期\",{\"1\":{\"379\":2}}],[\"设置背景颜色\",{\"1\":{\"1319\":1}}],[\"设置背景图片\",{\"1\":{\"1319\":1}}],[\"设置居中\",{\"1\":{\"1319\":1}}],[\"设置单元格和边框之间的空隙\",{\"1\":{\"1319\":1}}],[\"设置边框大小\",{\"1\":{\"1319\":1}}],[\"设置起始标号\",{\"1\":{\"1317\":1,\"1318\":1}}],[\"设置锚点\",{\"0\":{\"1313\":1},\"1\":{\"1315\":1}}],[\"设置高度\",{\"1\":{\"1309\":1}}],[\"设置位置\",{\"1\":{\"1300\":1}}],[\"设置宽度\",{\"1\":{\"1300\":1,\"1309\":1}}],[\"设置页面搜索的关键字\",{\"1\":{\"1293\":1}}],[\"设置页面的编码\",{\"1\":{\"1293\":1}}],[\"设置连接\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"设置手动提交\",{\"1\":{\"1235\":1}}],[\"设置错误\",{\"1\":{\"1234\":1}}],[\"设置事务的传播行为\",{\"1\":{\"2710\":1}}],[\"设置事务的超时属性\",{\"1\":{\"2710\":1}}],[\"设置事务的隔离级别\",{\"1\":{\"2710\":1}}],[\"设置事务的自动提交\",{\"1\":{\"2360\":1}}],[\"设置事务的属性\",{\"1\":{\"936\":1}}],[\"设置事务手动提交\",{\"1\":{\"1234\":1}}],[\"设置事务隔离级别为read\",{\"1\":{\"1113\":1}}],[\"设置事务隔离级别\",{\"1\":{\"1113\":1}}],[\"设置隔离级别\",{\"0\":{\"1113\":1}}],[\"设置自动提交的参数为off\",{\"1\":{\"1106\":1}}],[\"设置model\",{\"1\":{\"2931\":1}}],[\"设置methodinterceptor\",{\"1\":{\"2615\":1}}],[\"设置mapperxml生成路径\",{\"1\":{\"2293\":1}}],[\"设置maven的安装目录及本地仓库\",{\"1\":{\"676\":1}}],[\"设置mime类型\",{\"1\":{\"1808\":1}}],[\"设置mysqld服务不检查权限密码\",{\"1\":{\"1155\":1}}],[\"设置mysql中的自动事务参数\",{\"1\":{\"1106\":1}}],[\"设置开机启动\",{\"1\":{\"810\":1}}],[\"设置用户签名的邮箱部分\",{\"1\":{\"731\":1}}],[\"设置用户签名的用户名部分\",{\"1\":{\"731\":1}}],[\"设置属性的值\",{\"1\":{\"587\":1,\"588\":1}}],[\"设置伴随线程\",{\"1\":{\"460\":1}}],[\"设置优先级高\",{\"1\":{\"457\":1}}],[\"设置优先级低\",{\"1\":{\"457\":1}}],[\"设置范围为1\",{\"1\":{\"457\":1}}],[\"设置线程名字\",{\"1\":{\"456\":1}}],[\"设置线程的名字\",{\"1\":{\"442\":1}}],[\"设置当前包为test包\",{\"1\":{\"522\":1}}],[\"设置当前子线程的名字\",{\"1\":{\"440\":1,\"441\":1}}],[\"设置当前子线程的名字线程对象\",{\"1\":{\"439\":1}}],[\"设置当前主线程的名字\",{\"1\":{\"440\":1,\"441\":1}}],[\"设置当前主线程的名字thread\",{\"1\":{\"439\":1}}],[\"设置阻塞事件\",{\"1\":{\"337\":1}}],[\"设置最大阻塞时间\",{\"1\":{\"337\":1}}],[\"设置虚拟机网络\",{\"1\":{\"48\":1}}],[\"设置\",{\"1\":{\"48\":1,\"1415\":7,\"2301\":3,\"2374\":1}}],[\"菠萝啤\",{\"1\":{\"489\":1,\"490\":1}}],[\"哈尔滨\",{\"1\":{\"489\":1,\"490\":1}}],[\"哈希码可能会出现不同的数据出现相同的哈希码\",{\"1\":{\"703\":1}}],[\"哈希碰撞\",{\"0\":{\"703\":1}}],[\"哈希值一样\",{\"1\":{\"294\":1}}],[\"哈希表主数组的默认长度\",{\"1\":{\"294\":1}}],[\"巧克力\",{\"1\":{\"489\":1,\"490\":1}}],[\"品牌\",{\"1\":{\"489\":1,\"490\":1}}],[\"需求\",{\"0\":{\"486\":1},\"1\":{\"1904\":1}}],[\"需要回顾\",{\"1\":{\"2901\":1}}],[\"需要回顾历史\",{\"1\":{\"70\":1}}],[\"需要传输\",{\"1\":{\"2829\":1}}],[\"需要以数组的方式传送\",{\"1\":{\"2800\":1,\"2801\":1}}],[\"需要放开的资源目录也会无限制增多\",{\"1\":{\"2790\":1}}],[\"需要由程序员根据业务需求开\",{\"1\":{\"2775\":1}}],[\"需要获取方法签名\",{\"1\":{\"2651\":1}}],[\"需要通过throwing指定异常名称\",{\"1\":{\"2642\":1}}],[\"需要通过文件的结对路径或者相对于项目的路径来初始化xmlclasspathxmlapplicationcontext\",{\"1\":{\"2550\":1}}],[\"需要destroy\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"需要init\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"需要idea为你做什么\",{\"1\":{\"1777\":2}}],[\"需要下载mybatistypehandlers\",{\"1\":{\"2508\":1}}],[\"需要这项\",{\"1\":{\"2437\":1}}],[\"需要映射到javabean\",{\"1\":{\"2437\":1}}],[\"需要时再从关联表去关联查询\",{\"1\":{\"2434\":1}}],[\"需要执行的mapper方法全类路径名\",{\"1\":{\"2433\":1}}],[\"需要保存到的字段名\",{\"1\":{\"2433\":1}}],[\"需要保存结果\",{\"1\":{\"1197\":1}}],[\"需要作为后续订单明细项的外键存在\",{\"1\":{\"2408\":1}}],[\"需要封装到javabean或者map中\",{\"1\":{\"2371\":1}}],[\"需要添加一个特定的属性来开启这个特性\",{\"1\":{\"2334\":1}}],[\"需要添加到暂存区并提交到仓库区\",{\"1\":{\"734\":1}}],[\"需要设置\",{\"1\":{\"2285\":1}}],[\"需要设置批处理开启\",{\"1\":{\"1230\":1}}],[\"需要填写全类路径\",{\"1\":{\"2279\":1}}],[\"需要指向需要mapping的xml文件\",{\"1\":{\"2278\":1}}],[\"需要手动的完成面向对象的java语言\",{\"1\":{\"2198\":1}}],[\"需要手动进行编码解码\",{\"1\":{\"1812\":1}}],[\"需要我们来开启\",{\"1\":{\"2733\":1}}],[\"需要我们自己将要响应的数据转换为json字符串响应\",{\"1\":{\"2874\":1}}],[\"需要我们自己将结果集映射成对象\",{\"1\":{\"2195\":1}}],[\"需要我们自己管理\",{\"1\":{\"2195\":1}}],[\"需要我们手动设置才可以启用预编译\",{\"1\":{\"1251\":1}}],[\"需要登录之后才能访问的资源\",{\"1\":{\"2063\":1}}],[\"需要颁发cookie\",{\"1\":{\"1893\":1}}],[\"需要一些辅助信息\",{\"1\":{\"1818\":1}}],[\"需要一个容器元素来包裹网站的内容\",{\"1\":{\"1594\":1}}],[\"需要几分钟\",{\"1\":{\"1682\":1}}],[\"需要同时满足多个属性\",{\"1\":{\"1549\":1}}],[\"需要借助css技术\",{\"1\":{\"1317\":1}}],[\"需要先\",{\"1\":{\"2780\":1}}],[\"需要先开启\",{\"1\":{\"1191\":2}}],[\"需要先删除从表再删除主表\",{\"1\":{\"1001\":1}}],[\"需要注意搭配\",{\"1\":{\"2866\":1,\"2867\":1}}],[\"需要注意的地方就是data必须是一个函数\",{\"1\":{\"1704\":1}}],[\"需要注意的是\",{\"1\":{\"1673\":1,\"2360\":1,\"2823\":1}}],[\"需要注意的是所有的方法都\",{\"1\":{\"1647\":1}}],[\"需要注意的是v\",{\"1\":{\"1622\":1}}],[\"需要注意的是与整数类型不一样的是\",{\"1\":{\"940\":1}}],[\"需要注意一致性\",{\"1\":{\"1161\":1}}],[\"需要消耗我们的时间去更新索引\",{\"1\":{\"1128\":1}}],[\"需要用returning指定返回值名称\",{\"1\":{\"2641\":1}}],[\"需要用户手动提交事务才能够真正执行sql语句\",{\"1\":{\"1106\":1}}],[\"需要用babel编辑成es5后再执行\",{\"1\":{\"105\":1,\"108\":1}}],[\"需要加入字段的名字\",{\"1\":{\"972\":1}}],[\"需要将sql语句发送给dbms\",{\"1\":{\"1250\":1}}],[\"需要将其置为当前数据库\",{\"1\":{\"926\":1}}],[\"需要将栈空间文件提交到本地仓库\",{\"1\":{\"736\":1}}],[\"需要配置环境变量path\",{\"1\":{\"925\":1}}],[\"需要关闭防火墙\",{\"1\":{\"810\":1}}],[\"需要联网下载几百m的安装文件\",{\"1\":{\"809\":1}}],[\"需要提交的文件修改通通放到暂存区\",{\"1\":{\"729\":1}}],[\"需要jar包的工程只需要维护一个文本形式的jar包的引用\",{\"1\":{\"649\":1}}],[\"需要close\",{\"1\":{\"467\":1}}],[\"需要从缓存中移出\",{\"1\":{\"355\":1}}],[\"需要重写比较器\",{\"1\":{\"284\":1,\"299\":1}}],[\"需要使用\",{\"1\":{\"2794\":1}}],[\"需要使用三个\",{\"1\":{\"1601\":1}}],[\"需要使用object对象进行操作\",{\"1\":{\"245\":1}}],[\"需要使用浏览器作为客户端来访问服务端\",{\"1\":{\"156\":1}}],[\"需要在通知中定义方法执行的位置\",{\"1\":{\"2644\":1}}],[\"需要在页面中通过taglib指令引入对应的标签库\",{\"1\":{\"2014\":1}}],[\"需要在项目中导入jstl\",{\"1\":{\"2014\":1}}],[\"需要在tomcat中配置该协议的连接器\",{\"1\":{\"1765\":1}}],[\"需要在未登陆mysql的情况下操作\",{\"1\":{\"1121\":1,\"1122\":1}}],[\"需要在后续的实现类中都进行重写\",{\"1\":{\"816\":1,\"817\":1}}],[\"需要在电脑上面设置隐藏文件夹显示设置\",{\"1\":{\"732\":1}}],[\"需要在\",{\"1\":{\"115\":2}}],[\"手机号码\",{\"1\":{\"1580\":1}}],[\"手动配置\",{\"0\":{\"2779\":1}}],[\"手动配置打印格式\",{\"1\":{\"2299\":1}}],[\"手动注入\",{\"1\":{\"2579\":1}}],[\"手动关闭容器\",{\"1\":{\"2571\":1,\"2574\":1}}],[\"手动处理字段之间的映射关系\",{\"1\":{\"2422\":1}}],[\"手动映射\",{\"0\":{\"2422\":1}}],[\"手动指定\",{\"0\":{\"2325\":1}}],[\"手动解除绑定\",{\"1\":{\"2081\":1}}],[\"手动解绑\",{\"1\":{\"2081\":1}}],[\"手动清除\",{\"1\":{\"1920\":1}}],[\"手动使session失效\",{\"1\":{\"1897\":1}}],[\"手动安装插件\",{\"1\":{\"1191\":1}}],[\"手动开启事务之后\",{\"1\":{\"1106\":1}}],[\"手动开启事务\",{\"1\":{\"1106\":1}}],[\"手动开启和关闭锁\",{\"1\":{\"481\":1}}],[\"手动事务\",{\"0\":{\"1105\":1}}],[\"手工的逐一确认它们依赖的其他jar包吗\",{\"1\":{\"651\":1}}],[\"手撕算法\",{\"0\":{\"2946\":1},\"1\":{\"1\":1}}],[\"拿\",{\"1\":{\"659\":2}}],[\"拿来一把锁\",{\"1\":{\"480\":1}}],[\"拿到锁并且上锁\",{\"1\":{\"467\":1}}],[\"唤醒所有等待的线程\",{\"1\":{\"479\":1}}],[\"唤醒一个等待的线程\",{\"1\":{\"479\":1}}],[\"虚拟主机的名称\",{\"1\":{\"1767\":1}}],[\"虚拟机内部ipv4\",{\"1\":{\"928\":1}}],[\"虚拟化出一个内核\",{\"1\":{\"452\":1}}],[\"虚假唤醒\",{\"1\":{\"475\":1}}],[\"互不影响\",{\"1\":{\"1111\":1,\"2737\":1}}],[\"互斥锁\",{\"1\":{\"475\":1}}],[\"互联网应用程序\",{\"1\":{\"100\":1}}],[\"捆绑使用的\",{\"1\":{\"475\":2}}],[\"买到了从北京到哈尔滨的第\",{\"1\":{\"471\":1}}],[\"买到了北京到哈尔滨的第\",{\"1\":{\"465\":1,\"480\":1}}],[\"票数大于零我们才抢票\",{\"1\":{\"471\":1}}],[\"锁住的\",{\"1\":{\"471\":1}}],[\"锁住一个代码块的同时\",{\"1\":{\"468\":2}}],[\"锁\",{\"1\":{\"468\":2}}],[\"锁伴随的一个等待池\",{\"1\":{\"328\":2}}],[\"能快速揪出慢查询\",{\"1\":{\"2179\":1}}],[\"能支持前端的独立开发和测试\",{\"1\":{\"1941\":1}}],[\"能不用成员变量就不用\",{\"1\":{\"1824\":1}}],[\"能除尽\",{\"1\":{\"1361\":1}}],[\"能够有效的提供系统性能\",{\"1\":{\"2470\":1}}],[\"能够实现如下查询方式\",{\"1\":{\"2342\":1}}],[\"能够实现多个用户共享\",{\"1\":{\"909\":1}}],[\"能够完美应对各种复杂多变的前端需求\",{\"1\":{\"1947\":1}}],[\"能够更新部分网页的技术\",{\"1\":{\"1720\":1,\"2108\":1}}],[\"能够自适应于台式机\",{\"1\":{\"1559\":1}}],[\"能够对数据进行各种查询\",{\"1\":{\"920\":1}}],[\"能在所有的主流平台上运行\",{\"1\":{\"919\":1}}],[\"能\",{\"1\":{\"468\":1}}],[\"能抛出异常\",{\"1\":{\"448\":1}}],[\"释放\",{\"1\":{\"2282\":1,\"2374\":1}}],[\"释放资源\",{\"1\":{\"1215\":1,\"1817\":1,\"2715\":1}}],[\"释放网络资源\",{\"1\":{\"524\":1}}],[\"释放io资源\",{\"1\":{\"524\":1}}],[\"释放数据库资源\",{\"1\":{\"524\":1}}],[\"释放此锁\",{\"1\":{\"478\":1}}],[\"释放锁open\",{\"1\":{\"467\":1}}],[\"释放一次连接\",{\"1\":{\"159\":1}}],[\"抢票软件出现了\",{\"1\":{\"462\":1}}],[\"停止运行\",{\"1\":{\"2294\":1}}],[\"停止\",{\"1\":{\"1684\":1}}],[\"停止项目\",{\"0\":{\"1684\":1}}],[\"停止页面载入\",{\"1\":{\"1452\":1}}],[\"停止mysql服务\",{\"1\":{\"928\":1}}],[\"停止gitlab服务\",{\"1\":{\"811\":1}}],[\"停止线程\",{\"1\":{\"461\":1}}],[\"停止当前线程\",{\"1\":{\"461\":1}}],[\"停止服务\",{\"1\":{\"88\":1,\"1822\":1}}],[\"高七\",{\"1\":{\"2559\":1}}],[\"高度可配置\",{\"1\":{\"2441\":1}}],[\"高性能\",{\"1\":{\"2438\":1}}],[\"高速浏览器响应的数据是什么\",{\"1\":{\"1808\":1}}],[\"高可靠性high\",{\"1\":{\"922\":1}}],[\"高效的处理数据\",{\"1\":{\"920\":1}}],[\"高亮显示文本中光标处的所有用法\",{\"1\":{\"638\":1}}],[\"高级流处理\",{\"1\":{\"511\":1}}],[\"高级开发工程师\",{\"0\":{\"2937\":1},\"1\":{\"1\":1}}],[\"高优先级的线程\",{\"1\":{\"457\":1}}],[\"做更多事情\",{\"1\":{\"1541\":1}}],[\"做了一些运算之后\",{\"1\":{\"1439\":1}}],[\"做了额外的复制\",{\"1\":{\"313\":1}}],[\"做什么\",{\"1\":{\"930\":1}}],[\"做到单核双线程的目的\",{\"1\":{\"452\":1}}],[\"拓展名匹配\",{\"0\":{\"1839\":1}}],[\"拓展\",{\"1\":{\"452\":1}}],[\"拓展运算符\",{\"1\":{\"79\":1}}],[\"➢线程\",{\"1\":{\"452\":1}}],[\"➢进程\",{\"1\":{\"452\":1}}],[\"➢程序\",{\"1\":{\"452\":1}}],[\"⑦\",{\"1\":{\"449\":1,\"760\":1}}],[\"⑥分支已提交到主分支\",{\"1\":{\"760\":1}}],[\"⑥\",{\"1\":{\"449\":1}}],[\"张无忌\",{\"1\":{\"876\":2}}],[\"张大脸\",{\"1\":{\"876\":2}}],[\"张二妹\",{\"1\":{\"876\":1}}],[\"张二\",{\"1\":{\"876\":1}}],[\"张\",{\"1\":{\"856\":2,\"864\":1,\"876\":1}}],[\"张车票\",{\"1\":{\"465\":1,\"471\":1,\"480\":1}}],[\"张票\",{\"1\":{\"446\":1}}],[\"张三正在吃蛋糕\",{\"1\":{\"1419\":1}}],[\"张三李四王五张三\",{\"1\":{\"883\":1}}],[\"张三=\",{\"1\":{\"881\":2}}],[\"张三封\",{\"1\":{\"876\":2}}],[\"张三丰\",{\"1\":{\"856\":2}}],[\"张三2\",{\"1\":{\"287\":3}}],[\"张三3\",{\"1\":{\"287\":3}}],[\"张三4\",{\"1\":{\"287\":3}}],[\"张三1\",{\"1\":{\"287\":3}}],[\"张三\",{\"1\":{\"278\":2,\"281\":2,\"352\":1,\"356\":1,\"425\":1,\"428\":1,\"511\":1,\"512\":1,\"513\":1,\"850\":1,\"852\":2,\"853\":3,\"854\":1,\"856\":2,\"860\":2,\"862\":1,\"863\":1,\"864\":2,\"865\":2,\"866\":1,\"869\":2,\"873\":1,\"876\":1,\"880\":6,\"881\":12,\"882\":4,\"883\":10,\"972\":5,\"1264\":2,\"1419\":2,\"1420\":2,\"1424\":1,\"1425\":1,\"1634\":1,\"1653\":1,\"1713\":1,\"1831\":1,\"1892\":1,\"2206\":1,\"2210\":1,\"2363\":1,\"2558\":1,\"2560\":1,\"2605\":1,\"2609\":1,\"2612\":1,\"2615\":1}}],[\"卖出去一张票\",{\"1\":{\"446\":1}}],[\"卖出了一张票\",{\"1\":{\"442\":1}}],[\"⑤\",{\"1\":{\"444\":1,\"449\":1,\"760\":1}}],[\"④重新建立github连接\",{\"1\":{\"763\":1}}],[\"④撤销已add已commit\",{\"1\":{\"729\":1}}],[\"④\",{\"1\":{\"444\":1,\"449\":1,\"760\":1,\"972\":1}}],[\"窗口\",{\"1\":{\"1452\":1}}],[\"窗口3\",{\"1\":{\"442\":1,\"446\":1}}],[\"窗口2\",{\"1\":{\"442\":1,\"446\":1}}],[\"窗口1\",{\"1\":{\"442\":1,\"446\":1}}],[\"③使用ehcache\",{\"1\":{\"2494\":1}}],[\"③步骤3\",{\"1\":{\"763\":1}}],[\"③执行提交\",{\"1\":{\"752\":1}}],[\"③撤销已add未commit\",{\"1\":{\"729\":1}}],[\"③\",{\"1\":{\"437\":1,\"438\":1,\"440\":1,\"441\":1,\"444\":1,\"449\":1,\"760\":1,\"972\":1}}],[\"②使用自带二级缓存\",{\"1\":{\"2494\":1}}],[\"②步骤2\",{\"1\":{\"763\":1}}],[\"②添加到暂存区\",{\"1\":{\"752\":1}}],[\"②新建过撤销未add\",{\"1\":{\"729\":1}}],[\"②\",{\"1\":{\"437\":1,\"438\":1,\"440\":1,\"441\":1,\"444\":1,\"449\":1,\"760\":1,\"972\":1}}],[\"①未开启二级缓存\",{\"1\":{\"2494\":1}}],[\"①步骤1\",{\"1\":{\"763\":1}}],[\"①编辑有冲突的文件\",{\"1\":{\"752\":1}}],[\"①用\",{\"1\":{\"729\":1}}],[\"①\",{\"1\":{\"437\":1,\"438\":1,\"440\":1,\"441\":1,\"444\":1,\"449\":1,\"760\":1,\"972\":1}}],[\"构建scopecontroller\",{\"1\":{\"2926\":1,\"2928\":1}}],[\"构建过程中用到的插件\",{\"1\":{\"2500\":1}}],[\"构建实体类\",{\"1\":{\"2425\":1,\"2428\":1,\"2431\":1}}],[\"构建接口的实现类以及处理查询的操作全部交给mybatis来处理\",{\"1\":{\"2379\":1}}],[\"构建步骤\",{\"0\":{\"2374\":1}}],[\"构建环境\",{\"0\":{\"2337\":1}}],[\"构建iservice接口环境\",{\"0\":{\"2215\":1}}],[\"构建项目结构\",{\"0\":{\"1974\":1,\"2372\":1}}],[\"构建就是以我们编写的java代码\",{\"1\":{\"660\":1}}],[\"构建并不是创建\",{\"1\":{\"657\":1}}],[\"构建的核心部分\",{\"1\":{\"709\":1}}],[\"构建的环节\",{\"0\":{\"661\":1}}],[\"构建的\",{\"0\":{\"657\":1}}],[\"构建脚本就可以构建简单的项目\",{\"1\":{\"655\":1}}],[\"构建file\",{\"1\":{\"418\":1}}],[\"构建字节流\",{\"1\":{\"415\":1}}],[\"构造一个servlet对象的方法\",{\"1\":{\"1825\":1}}],[\"构造一个filewriter对象\",{\"1\":{\"407\":1}}],[\"构造httpservletrequest对象和httpservletresponse对象\",{\"1\":{\"1769\":1}}],[\"构造函数\",{\"1\":{\"404\":1,\"407\":1}}],[\"构造方法对象\",{\"1\":{\"1423\":1,\"1424\":1}}],[\"构造方法对象中有一个prototype属性指向该对象\",{\"1\":{\"1423\":1}}],[\"构造方法\",{\"0\":{\"2002\":1},\"1\":{\"478\":2,\"2001\":1}}],[\"构造方法赋值\",{\"1\":{\"434\":1}}],[\"构造方法和方法基本相同\",{\"1\":{\"397\":1}}],[\"构造方法不能使用泛型\",{\"1\":{\"240\":1}}],[\"构造器私有化\",{\"1\":{\"366\":1,\"560\":1,\"561\":1}}],[\"构造器进行封装\",{\"1\":{\"359\":1}}],[\"构造器\",{\"0\":{\"583\":1,\"831\":1,\"832\":1},\"1\":{\"328\":1,\"338\":1,\"364\":1,\"534\":1,\"542\":1,\"561\":1,\"576\":1,\"827\":2}}],[\"构造器把传入的比较器对象\",{\"1\":{\"288\":1}}],[\"普通的url形式\",{\"1\":{\"2824\":1}}],[\"普通的\",{\"1\":{\"2196\":1}}],[\"普通的执行过程是\",{\"1\":{\"1230\":1}}],[\"普通参数\",{\"0\":{\"1724\":1}}],[\"普通信息提示框\",{\"1\":{\"1454\":1}}],[\"普通弹窗\",{\"0\":{\"1454\":1}}],[\"普通按钮没有什么效果\",{\"1\":{\"1339\":1}}],[\"普通按钮\",{\"1\":{\"1339\":2}}],[\"普通文本数据\",{\"1\":{\"2121\":1}}],[\"普通文本\",{\"0\":{\"1298\":1}}],[\"普通方法\",{\"1\":{\"827\":1}}],[\"普通一个字节一个字节读取\",{\"1\":{\"412\":1}}],[\"普通for循环遍历数组\",{\"1\":{\"1388\":1}}],[\"普通for循环\",{\"0\":{\"1388\":1},\"1\":{\"249\":1,\"888\":3}}],[\"写的话需要以\",{\"1\":{\"2834\":1}}],[\"写的存储器上\",{\"1\":{\"2470\":1}}],[\"写键的名字\",{\"1\":{\"2392\":1}}],[\"写分页等同于普通\",{\"1\":{\"2179\":1}}],[\"写到控制器返回数据即可\",{\"1\":{\"1937\":1}}],[\"写更少代码\",{\"1\":{\"1541\":1}}],[\"写法\",{\"1\":{\"1333\":1}}],[\"写入域\",{\"1\":{\"1917\":1,\"1921\":1,\"1925\":1}}],[\"写入cookie\",{\"1\":{\"1892\":1}}],[\"写入文件\",{\"1\":{\"1283\":1}}],[\"写入字符串的一部分\",{\"1\":{\"407\":1}}],[\"写入字符数组\",{\"1\":{\"407\":1}}],[\"写配置文件\",{\"1\":{\"922\":1}}],[\"写完代码后需要把自己的代码推送到中央服务器\",{\"1\":{\"723\":1}}],[\"写为\",{\"1\":{\"561\":1}}],[\"写出的类型跟读入的类型\",{\"1\":{\"425\":1}}],[\"写一个字符串\",{\"1\":{\"407\":1}}],[\"写时复制容器\",{\"1\":{\"313\":1}}],[\"缓冲数组\",{\"1\":{\"405\":2}}],[\"缓存名称\",{\"1\":{\"2485\":1}}],[\"缓存对象个数\",{\"1\":{\"2481\":1}}],[\"缓存策略\",{\"1\":{\"2481\":1}}],[\"缓存命中率\",{\"1\":{\"2479\":1}}],[\"缓存命中率的计算\",{\"1\":{\"2479\":1}}],[\"缓存命中率越高的情况下\",{\"1\":{\"2470\":1}}],[\"缓存中的其他参数\",{\"0\":{\"2481\":1}}],[\"缓存中的数据使用键值对形式存储数据\",{\"1\":{\"2473\":1}}],[\"缓存中的对象\",{\"1\":{\"355\":1}}],[\"缓存一般放置在高速读\",{\"1\":{\"2470\":1}}],[\"缓存的本质是一个map\",{\"1\":{\"2489\":1}}],[\"缓存的基本原理\",{\"0\":{\"2489\":1}}],[\"缓存的数据在各个服务单独存储\",{\"1\":{\"2482\":1}}],[\"缓存的效力范围\",{\"0\":{\"2472\":1}}],[\"缓存的使用顺序\",{\"0\":{\"2471\":1}}],[\"缓存的重要性是不言而喻的\",{\"1\":{\"2470\":1}}],[\"缓存的大小可以由\",{\"1\":{\"364\":1}}],[\"缓存需求等等\",{\"1\":{\"1958\":1}}],[\"缓存管理器把结果放入到查询缓存中\",{\"1\":{\"1250\":1}}],[\"缓存模块解析sql为hash并与缓存中hash表对应\",{\"1\":{\"1250\":1}}],[\"缓存在第一次使用时被初始化\",{\"1\":{\"364\":1}}],[\"缓存以支持\",{\"1\":{\"364\":1}}],[\"缓存\",{\"1\":{\"355\":1,\"2195\":1,\"2470\":1}}],[\"应避免冲突且应>6\",{\"1\":{\"1825\":1}}],[\"应该使用字符实体替换\",{\"1\":{\"2407\":1}}],[\"应该尽量避免对成员变量产生修改\",{\"1\":{\"1824\":1}}],[\"应该把\",{\"1\":{\"1292\":1}}],[\"应该将所有对数据源的访问操作抽象封装在一个公共api中\",{\"1\":{\"1262\":1}}],[\"应该优先考虑使用stringbuilder\",{\"1\":{\"397\":1}}],[\"应在不需要statement对象和connection对象时显式地关闭它们\",{\"1\":{\"1223\":1}}],[\"应用\",{\"1\":{\"2752\":1}}],[\"应用了切面后\",{\"1\":{\"2658\":1}}],[\"应用了责任链的代码设计模式\",{\"1\":{\"2046\":1}}],[\"应用上下文\",{\"1\":{\"2531\":1}}],[\"应用都可以从\",{\"1\":{\"2520\":1}}],[\"应用服务器的上下文\",{\"1\":{\"2318\":1}}],[\"应用服务器是java\",{\"1\":{\"1735\":1}}],[\"应用的代码不再是前后端混合\",{\"1\":{\"1948\":1}}],[\"应用程序的全功能\",{\"1\":{\"2740\":1}}],[\"应用程序\",{\"1\":{\"2531\":2}}],[\"应用程序被划分成了模型\",{\"1\":{\"2034\":1}}],[\"应用程序启动时\",{\"1\":{\"2003\":1}}],[\"应用程序还可根据连接池中连接的使用率\",{\"1\":{\"1272\":1}}],[\"应用程序不再需要使用\",{\"1\":{\"1256\":1}}],[\"应用程序中完全不用考虑存储过程的内部详细处理\",{\"1\":{\"1146\":1}}],[\"应用场合\",{\"1\":{\"1001\":1,\"1509\":1,\"1510\":1,\"1533\":1,\"1536\":1}}],[\"应用场景\",{\"0\":{\"230\":1,\"355\":1,\"1101\":1},\"1\":{\"827\":1,\"1319\":1,\"1320\":1}}],[\"应用安全设置\",{\"1\":{\"922\":1}}],[\"应用层\",{\"1\":{\"495\":2}}],[\"改进文档\",{\"1\":{\"1558\":1}}],[\"改进工具提示和\",{\"1\":{\"1558\":1}}],[\"改进网格系统\",{\"1\":{\"1558\":1}}],[\"改进和修正代码\",{\"1\":{\"607\":1}}],[\"改变为在xml映射文件中截止标签拼接sql语句\",{\"1\":{\"2441\":1}}],[\"改变了使用javascript的习惯\",{\"1\":{\"1541\":1}}],[\"改变父节点高度\",{\"0\":{\"1524\":1}}],[\"改变属性值\",{\"1\":{\"1493\":1}}],[\"改为false\",{\"1\":{\"2155\":1}}],[\"改为新的字符集\",{\"1\":{\"1156\":1}}],[\"改为null\",{\"1\":{\"1001\":1}}],[\"改的操作需要更新索引表信息\",{\"1\":{\"1128\":1}}],[\"改\",{\"0\":{\"2674\":1},\"1\":{\"396\":2,\"2360\":1}}],[\"删\",{\"0\":{\"2674\":1},\"1\":{\"396\":1,\"1128\":1}}],[\"删除多余的依赖配置\",{\"0\":{\"2885\":1}}],[\"删除多个少个元素\",{\"1\":{\"1400\":1}}],[\"删除id为1的资源\",{\"1\":{\"2827\":1}}],[\"删除或者条件查询等操作\",{\"1\":{\"2454\":1}}],[\"删除条件\",{\"0\":{\"2255\":1}}],[\"删除后为1\",{\"1\":{\"2234\":1}}],[\"删除类型\",{\"1\":{\"2231\":1}}],[\"删除标签中的内容\",{\"1\":{\"1570\":1}}],[\"删除class值\",{\"1\":{\"1568\":1}}],[\"删除属性\",{\"1\":{\"1567\":1}}],[\"删除子节点\",{\"1\":{\"1486\":1}}],[\"删除数组中的某些元素\",{\"1\":{\"1400\":1}}],[\"删除数组中的元素\",{\"0\":{\"1400\":1}}],[\"删除数组第一个元素\",{\"1\":{\"1397\":1}}],[\"删除数据时\",{\"1\":{\"1001\":1}}],[\"删除数据别忘记加限制条件\",{\"1\":{\"973\":1}}],[\"删除数据操作\",{\"1\":{\"967\":1}}],[\"删除数据库\",{\"0\":{\"952\":1}}],[\"删除数据库对象\",{\"1\":{\"934\":1}}],[\"删除数据\",{\"0\":{\"974\":1},\"1\":{\"933\":1}}],[\"删除数据文件夹\",{\"1\":{\"928\":1}}],[\"删除第一个元素\",{\"0\":{\"1397\":1}}],[\"删除第一个的元素并且将元素输出\",{\"1\":{\"260\":2}}],[\"删除第一个的元素并且将元素返回\",{\"1\":{\"260\":1}}],[\"删除线\",{\"0\":{\"1303\":1},\"1\":{\"1303\":1}}],[\"删除等动作的发生\",{\"1\":{\"2066\":1}}],[\"删除等\",{\"1\":{\"1262\":1}}],[\"删除等操作时\",{\"1\":{\"981\":1}}],[\"删除掉之前添加在\",{\"1\":{\"1155\":1}}],[\"删除冗余和重复的索引\",{\"1\":{\"1148\":1}}],[\"删除存储过程\",{\"1\":{\"1147\":1}}],[\"删除视图\",{\"0\":{\"1141\":1}}],[\"删除索引\",{\"0\":{\"1136\":1}}],[\"删除用户\",{\"0\":{\"1119\":1,\"2207\":1}}],[\"删除时需要指定唯一索引名\",{\"1\":{\"992\":1}}],[\"删除唯一键只能通过删除唯一索引的方式删除\",{\"1\":{\"992\":1}}],[\"删除主键时\",{\"1\":{\"986\":1}}],[\"删除原表\",{\"1\":{\"976\":1}}],[\"删除操作from关键字不可缺少\",{\"1\":{\"973\":1}}],[\"删除操作\",{\"1\":{\"973\":1,\"1001\":1}}],[\"删除表中的数据\",{\"1\":{\"975\":1}}],[\"删除表\",{\"0\":{\"966\":1}}],[\"删除字段\",{\"0\":{\"961\":1}}],[\"删除path环境变量中关于mysql安装路径的配置\",{\"1\":{\"928\":1}}],[\"删除软件文件夹\",{\"1\":{\"928\":1}}],[\"删除特殊符号\",{\"1\":{\"752\":1}}],[\"删除范围和版本号\",{\"1\":{\"714\":1}}],[\"删除以前的编译结果\",{\"1\":{\"662\":1}}],[\"删除无用的参数\",{\"1\":{\"607\":1}}],[\"删除位置在16上的字符\",{\"1\":{\"396\":1}}],[\"删除位置在\",{\"1\":{\"395\":1,\"396\":1}}],[\"删除目录\",{\"1\":{\"389\":1}}],[\"删除文件\",{\"1\":{\"386\":1}}],[\"删除末尾的元素并且将元素输出\",{\"1\":{\"260\":2}}],[\"删除头上的元素并且将元素输出\",{\"1\":{\"260\":1}}],[\"删除头上的元素并且将元素返回\",{\"1\":{\"260\":1}}],[\"删除最后一个的元素并且将元素返回\",{\"1\":{\"260\":1}}],[\"删除元素\",{\"0\":{\"1505\":1},\"1\":{\"227\":2,\"1571\":1}}],[\"删除\",{\"0\":{\"989\":1,\"995\":1,\"1001\":1,\"1008\":1,\"1013\":1,\"1017\":1,\"1021\":1,\"1170\":1,\"1220\":1,\"2367\":1,\"2415\":1},\"1\":{\"219\":1,\"228\":1,\"251\":1,\"260\":2,\"292\":1,\"357\":1,\"384\":1,\"390\":1,\"395\":1,\"856\":1,\"920\":1,\"1220\":1,\"1253\":1,\"1257\":1,\"1264\":1,\"1505\":1,\"2071\":1,\"2072\":1,\"2073\":1,\"2080\":1,\"2085\":1,\"2214\":1,\"2667\":1,\"2674\":1}}],[\"我没有杀人\",{\"1\":{\"2605\":1}}],[\"我是渲染的指令\",{\"1\":{\"1637\":1,\"1638\":1}}],[\"我是一名三好学生\",{\"1\":{\"576\":1}}],[\"我和我的祖国\",{\"1\":{\"1499\":1,\"1500\":1,\"1501\":1}}],[\"我的链接\",{\"1\":{\"1479\":1}}],[\"我的第一个crud\",{\"0\":{\"1218\":1}}],[\"我要你\",{\"1\":{\"1310\":1}}],[\"我以后会找工作\",{\"1\":{\"576\":1}}],[\"我收到了你的消息\",{\"1\":{\"510\":1}}],[\"我在\",{\"1\":{\"465\":1,\"471\":1,\"480\":1}}],[\"我好累\",{\"1\":{\"395\":1,\"396\":1}}],[\"我们了解了作用域的使用\",{\"1\":{\"2920\":1}}],[\"我们尝试通过同一个url使用不同的请求方式\",{\"1\":{\"2827\":1}}],[\"我们尝试使用配置文件来管理参数\",{\"1\":{\"1277\":1}}],[\"我们刚刚虽然解决了当前的问题\",{\"1\":{\"2790\":1}}],[\"我们项目中不单单存在jsp文件\",{\"1\":{\"2782\":1}}],[\"我们并没有配置handlermapping与handladapter\",{\"1\":{\"2777\":1}}],[\"我们并没有指定要操作的表\",{\"1\":{\"2223\":1}}],[\"我们最常用的视图就是\",{\"1\":{\"2775\":1}}],[\"我们统一使用的是int\",{\"1\":{\"2677\":1}}],[\"我们依旧需要导入以下依赖\",{\"1\":{\"2665\":1}}],[\"我们一般会对一个类作为切面类\",{\"1\":{\"2639\":1}}],[\"我们采用时是通过property标签手动指定给属性进行注入\",{\"1\":{\"2576\":1}}],[\"我们导入spring\",{\"1\":{\"2538\":1}}],[\"我们通常将他使用在方法或者类上\",{\"1\":{\"2808\":1}}],[\"我们通常使用\",{\"1\":{\"2508\":1}}],[\"我们通过注解或者配置文件声明事务的处理方式即可\",{\"1\":{\"2524\":1}}],[\"我们通过sqlsession\",{\"1\":{\"2379\":1}}],[\"我们通过调用该方法可以销毁当前httpsession对象\",{\"1\":{\"1899\":1}}],[\"我们通过对原型的操作可以实现为一个类所有的对象添加属性和方法\",{\"1\":{\"1424\":1}}],[\"我们通过npm\",{\"1\":{\"90\":1}}],[\"我们系统为了提高系统并发\",{\"1\":{\"2482\":1}}],[\"我们是直接对实现类进行切面编程\",{\"1\":{\"2659\":1}}],[\"我们是这样处理模糊查询的\",{\"1\":{\"2457\":1}}],[\"我们是通过文本的方式传输数据\",{\"1\":{\"167\":1}}],[\"我们实现了对数据查询的简场景和复杂场景\",{\"1\":{\"2360\":1}}],[\"我们简单搭建了一个mybatis的项目环境\",{\"1\":{\"2336\":1}}],[\"我们存在以下痛点\",{\"1\":{\"2195\":1}}],[\"我们就可以不用单独定义回调函数了\",{\"1\":{\"2171\":1}}],[\"我们就可以通过代码动态控制页面上显示的内容\",{\"1\":{\"1448\":1}}],[\"我们直接使用person类会出现以下情况\",{\"1\":{\"2605\":1}}],[\"我们直接使用即可\",{\"1\":{\"1966\":1,\"2127\":1}}],[\"我们直接在自定义的引用类型的实体类中实现comparable接口\",{\"1\":{\"274\":1}}],[\"我们页面上所有html相关的代码全部被转化成了字符串\",{\"1\":{\"1933\":1}}],[\"我们自定义的servlet中的doget方法会被执行\",{\"1\":{\"1826\":1}}],[\"我们自己开发的项目的模块\",{\"1\":{\"706\":1}}],[\"我们把互联网中网络的链路称之为路由\",{\"1\":{\"1717\":1}}],[\"我们先查看一个javascript的代码案例\",{\"1\":{\"1705\":1}}],[\"我们先来看一下jquery\",{\"1\":{\"1547\":1}}],[\"我们后面写的所有的vue的对象清单都必须在export\",{\"1\":{\"1704\":1}}],[\"我们以npm\",{\"1\":{\"1687\":1}}],[\"我们看package\",{\"1\":{\"1687\":1}}],[\"我们看到emp表与dept表存在多对一的关系\",{\"1\":{\"2427\":1}}],[\"我们看到emp表与dept表存在一对一的关系\",{\"1\":{\"2424\":1}}],[\"我们看到\",{\"1\":{\"2409\":1,\"2410\":1,\"2479\":1,\"2928\":1}}],[\"我们看到官方说明文档中\",{\"1\":{\"2315\":1}}],[\"我们看到左边的代码中\",{\"1\":{\"1705\":1}}],[\"我们看到的vue\",{\"1\":{\"1704\":1}}],[\"我们看到他调用了integer内置函数valueof\",{\"1\":{\"363\":1}}],[\"我们看到从a0到an\",{\"1\":{\"226\":2}}],[\"我们之前开发中\",{\"1\":{\"1691\":1}}],[\"我们之前在javascript的课程中接触过onkeydown和onokeyup\",{\"1\":{\"1663\":1}}],[\"我们之后也可以根据需要进行修改\",{\"1\":{\"92\":1}}],[\"我们经常会遇到多层盒子嵌套的情况\",{\"1\":{\"1656\":1}}],[\"我们说过vue是mvvm框架\",{\"1\":{\"1652\":1}}],[\"我们说vector和hashtable是线程安全的\",{\"1\":{\"304\":1}}],[\"我们学习了动态代理\",{\"1\":{\"2619\":1}}],[\"我们学习的javascript的元素的事件监听都可以在vue中使用\",{\"1\":{\"1645\":1}}],[\"我们学习过程中使用生产环境\",{\"1\":{\"1616\":1}}],[\"我们工作中不是使用布尔值直接进行渲染\",{\"1\":{\"1620\":1}}],[\"我们无需干预\",{\"1\":{\"2702\":1}}],[\"我们无需关注视图模型\",{\"1\":{\"1614\":1}}],[\"我们无法添加直接抛出异常\",{\"1\":{\"327\":1}}],[\"我们每次改变数据的值\",{\"1\":{\"1613\":1}}],[\"我们往往将servlet作为控制层controller使用\",{\"1\":{\"1953\":1}}],[\"我们往往无法选择接收的对象\",{\"1\":{\"1573\":1}}],[\"我们往往让蓝色div在粉色div中发生位移效果\",{\"1\":{\"1535\":1}}],[\"我们定义的js代码只能在当前一个网页中使用\",{\"1\":{\"1379\":1}}],[\"我们挑一些常用的进行展示\",{\"1\":{\"1344\":1}}],[\"我们写的文本框\",{\"1\":{\"1330\":1}}],[\"我们的项目开发中都会优先选择不需要等待的异步交互方式\",{\"1\":{\"2104\":1}}],[\"我们的connector\",{\"1\":{\"1251\":1}}],[\"我们的程序是多线程的\",{\"1\":{\"453\":1}}],[\"我们的程序还是单线程执行的\",{\"1\":{\"438\":1}}],[\"我们发送批处理sql的时候数据库执行效率要高\",{\"1\":{\"1230\":1}}],[\"我们发现a账户发生了扣款\",{\"1\":{\"2698\":1}}],[\"我们发现log4j2的日志打印的更加详细\",{\"1\":{\"2313\":1}}],[\"我们发现web页面上调用js文件时则不受是否跨域的影响\",{\"1\":{\"2170\":1}}],[\"我们发现仍有大量的配置化的参数在我们的逻辑代码中\",{\"1\":{\"1277\":1}}],[\"我们发现内连接查询出来的是满足连接条件的公共部分\",{\"1\":{\"1058\":1}}],[\"我们发现parallelstream的执行效率是最高的\",{\"1\":{\"888\":1}}],[\"我们发现此时\",{\"1\":{\"887\":1}}],[\"我们发现都是重写了run方法\",{\"1\":{\"447\":1}}],[\"我们发现他是指向一个char数组的引用位置\",{\"1\":{\"393\":1}}],[\"我们发现hashmap的扩容是以主数组的2倍进行的\",{\"1\":{\"296\":1}}],[\"我们发现\",{\"1\":{\"17\":1,\"825\":1,\"1264\":1,\"1649\":1,\"1934\":1,\"2435\":1,\"2488\":1,\"2929\":1}}],[\"我们如果想要取得某一条记录\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"我们如果只使用html作为视图的话\",{\"1\":{\"119\":1}}],[\"我们只能来操作当前的数据行\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"我们只要让该类字节码进入内存\",{\"1\":{\"1217\":1}}],[\"我们查看控制台发现\",{\"1\":{\"2475\":1}}],[\"我们查看driver的源代码时\",{\"1\":{\"1217\":1}}],[\"我们查看前面的集中线程的创建方法\",{\"1\":{\"447\":1}}],[\"我们对于基础类型无需写他的全类路径\",{\"1\":{\"2335\":1}}],[\"我们对于一个项目工程叫做一个资料库\",{\"1\":{\"1158\":1}}],[\"我们对于stringbuilder的改动\",{\"1\":{\"393\":1}}],[\"我们已经知道sql是一种非常便利的语言\",{\"1\":{\"1145\":1}}],[\"我们应该可以根据不同的项目建立不同的用户\",{\"1\":{\"1114\":1}}],[\"我们现在就要来定义\",{\"1\":{\"2319\":1}}],[\"我们现在默认使用的都是root用户\",{\"1\":{\"1114\":1}}],[\"我们现在有三个工程makefriend\",{\"1\":{\"652\":1}}],[\"我们必须得通过一种约束来约定表与表之间的关系\",{\"1\":{\"997\":1}}],[\"我们都知道\",{\"1\":{\"930\":1}}],[\"我们还是要借助jsp技术作为数据展现的一种处理手段\",{\"1\":{\"1950\":1}}],[\"我们还可以通过temporaladjusters\",{\"1\":{\"900\":1}}],[\"我们还可以使用stream流中的toarray方法或collect方法来操作\",{\"1\":{\"889\":1}}],[\"我们还可以指定\",{\"1\":{\"676\":1}}],[\"我们还有异常信息捕捉线程和垃圾回收线程\",{\"1\":{\"453\":1}}],[\"我们java是一门编译型语言\",{\"1\":{\"658\":1}}],[\"我们称之为连接查询\",{\"1\":{\"1055\":1}}],[\"我们称之为分布式部署\",{\"1\":{\"654\":1}}],[\"我们称之为jar包之间的依赖关系\",{\"1\":{\"651\":1}}],[\"我们称之为\",{\"1\":{\"649\":1}}],[\"我们称之为发生异常\",{\"1\":{\"16\":1}}],[\"我们编辑代码idea都会帮我们自动补全\",{\"1\":{\"610\":1}}],[\"我们编写的代码都是执行在主线程上\",{\"1\":{\"453\":1}}],[\"我们来看看如何实现\",{\"1\":{\"2258\":1}}],[\"我们来看看效果\",{\"1\":{\"2226\":1}}],[\"我们来使用意图重新格式化字符串串联\",{\"1\":{\"604\":1}}],[\"我们来模拟开发者常见的生产者和消费者模式\",{\"1\":{\"486\":1}}],[\"我们次啊是可以看到调试控制台的展示\",{\"1\":{\"602\":1}}],[\"我们也可以不使用<init\",{\"1\":{\"2763\":1}}],[\"我们也可以使用spring中提供的属性\",{\"1\":{\"2576\":1}}],[\"我们也可以在tomcat的web\",{\"1\":{\"1899\":1}}],[\"我们也可以在代码的任意地方使用alt+\",{\"1\":{\"610\":1}}],[\"我们也可以通过继承genericservlet并实现service方法实现请求的处理\",{\"1\":{\"1819\":1}}],[\"我们也可以根据自己的需要定义列数\",{\"1\":{\"1599\":1}}],[\"我们也可以创建双端队列\",{\"1\":{\"321\":1}}],[\"我们也是可以遵守该特性的\",{\"1\":{\"597\":1}}],[\"我们形象的称之为反射\",{\"1\":{\"570\":1}}],[\"我们拿到的锁也是独自的个体\",{\"1\":{\"489\":1}}],[\"我们不必在controller中完全描述\",{\"1\":{\"2765\":1}}],[\"我们不推荐使用该方式省略配置\",{\"1\":{\"2763\":1}}],[\"我们不用写实现类了\",{\"1\":{\"2371\":1}}],[\"我们不用特意对异常进行处理\",{\"1\":{\"29\":1}}],[\"我们不需要单独的引入\",{\"1\":{\"2285\":1}}],[\"我们不可以在线程里面使用同步代码块\",{\"1\":{\"489\":1}}],[\"我们需要将配置文件移至该目录下\",{\"1\":{\"2763\":1}}],[\"我们需要将实现类交给ioc容器进行管理\",{\"1\":{\"2631\":1}}],[\"我们需要导入声明空间才可使用\",{\"1\":{\"2630\":1}}],[\"我们需要定义一个或多个beanpostprocessor接口实现类\",{\"1\":{\"2572\":1}}],[\"我们需要在pom\",{\"1\":{\"2505\":1}}],[\"我们需要在执行操作后再次执行sqlsession\",{\"1\":{\"2360\":1}}],[\"我们需要在tomcat\",{\"1\":{\"1759\":1}}],[\"我们需要告诉\",{\"1\":{\"2319\":1}}],[\"我们需要根据不同的输入条件来动态的生成对应的sql语句\",{\"1\":{\"2260\":1}}],[\"我们需要注意的是\",{\"1\":{\"1617\":1}}],[\"我们需要执行多次insert语句\",{\"1\":{\"1250\":1}}],[\"我们需要使用lock锁去对应的构建独自的等待池\",{\"1\":{\"490\":1}}],[\"我们需要采用同步锁的方式\",{\"1\":{\"487\":1}}],[\"我们需要生产者创建指定类的对象\",{\"1\":{\"486\":1}}],[\"我们需要对线程进行同步操作\",{\"1\":{\"462\":1}}],[\"我们需要操作的都是引用类型的数据\",{\"1\":{\"359\":1}}],[\"我们创建的多线程是指\",{\"1\":{\"453\":1}}],[\"我们创建的字符串\",{\"1\":{\"433\":1}}],[\"我们常听说4核8线程类似的cpu描述语句\",{\"1\":{\"452\":1}}],[\"我们常用的是一般的集合容器\",{\"1\":{\"304\":1}}],[\"我们模拟火车站卖票的操作\",{\"1\":{\"442\":1}}],[\"我们知道scripts是npm执行目录\",{\"1\":{\"1687\":1}}],[\"我们知道string是应用方法\",{\"1\":{\"393\":1}}],[\"我们知道vue\",{\"1\":{\"1687\":1}}],[\"我们知道使用lambda表达式的前提是需要有函数式接口\",{\"1\":{\"835\":1}}],[\"我们知道了数据结构分为\",{\"1\":{\"302\":1}}],[\"我们程序就可以直接操纵这个对象\",{\"1\":{\"384\":1}}],[\"我们将需要的值放到一个函数中进行返回\",{\"1\":{\"1705\":1}}],[\"我们将它改成\",{\"1\":{\"928\":1}}],[\"我们将mysql安装到虚拟机环境中\",{\"1\":{\"928\":1}}],[\"我们将上面的代码编译后\",{\"1\":{\"363\":1}}],[\"我们将可能出现异常的代码放入try代码块中\",{\"1\":{\"19\":1}}],[\"我们使用过滤器的特性\",{\"1\":{\"2054\":1}}],[\"我们使用组件一定是依托在某一个父组件的身上\",{\"1\":{\"1709\":1}}],[\"我们使用的都是串行的stream流\",{\"1\":{\"885\":1}}],[\"我们使用的时基本数据类型来存储变量\",{\"1\":{\"359\":1}}],[\"我们使用iterator\",{\"1\":{\"265\":1}}],[\"我们可能会得到一个极长的链表\",{\"1\":{\"296\":1}}],[\"我们可以借助在mvc配置文件中添加视图解析器来配置通用的一些路径\",{\"1\":{\"2765\":1}}],[\"我们可以直击在xml中配置aop的切面属性\",{\"1\":{\"2648\":1}}],[\"我们可以直接导入spring\",{\"1\":{\"2614\":1}}],[\"我们可以直接使用指定的别名\",{\"1\":{\"2327\":1}}],[\"我们可以直接用类名\",{\"1\":{\"300\":1}}],[\"我们可以直接抛出exception\",{\"1\":{\"29\":1}}],[\"我们可以直接关闭jvm虚拟机\",{\"1\":{\"26\":1}}],[\"我们可以用\",{\"1\":{\"2598\":1}}],[\"我们可以定义过滤响应的功能\",{\"1\":{\"1995\":1}}],[\"我们可以通俗的理解\",{\"1\":{\"1512\":1}}],[\"我们可以通过以下实现类来构建bean工厂对象filesystemxmlapplicationcontext\",{\"1\":{\"2550\":1}}],[\"我们可以通过插件来修改mybatis的一些核心行为\",{\"1\":{\"2516\":1}}],[\"我们可以通过resultmap标签进行手动映射\",{\"1\":{\"2422\":1}}],[\"我们可以通过\",{\"1\":{\"2226\":1}}],[\"我们可以通过对含有中文的数据重新进行编码来解决该问题\",{\"1\":{\"1889\":1}}],[\"我们可以通过该对象读取<servlet>节点中的配置信息\",{\"1\":{\"1833\":1}}],[\"我们可以通过设置url中的参数来控制预编译是否开启\",{\"1\":{\"1251\":1}}],[\"我们可以通过两种方法来获取并行的流\",{\"1\":{\"886\":1}}],[\"我们可以通过stream方法中的of\",{\"1\":{\"860\":1}}],[\"我们可以通过这个对象看到类的结构\",{\"1\":{\"570\":1}}],[\"我们可以进一步精简\",{\"1\":{\"1264\":1}}],[\"我们可以使用java的原生注解\",{\"1\":{\"2597\":1}}],[\"我们可以使用标签来选择和排除指定的标签\",{\"1\":{\"2588\":1}}],[\"我们可以使用v\",{\"1\":{\"1637\":1,\"1638\":1}}],[\"我们可以使用\",{\"1\":{\"1572\":1,\"2457\":1}}],[\"我们可以使用preparestatment\",{\"1\":{\"1247\":1}}],[\"我们可以使用map\",{\"1\":{\"867\":1}}],[\"我们可以在字段上使用\",{\"1\":{\"2798\":1}}],[\"我们可以在方法上使用\",{\"1\":{\"2760\":1}}],[\"我们可以在一个专门的方法上\",{\"1\":{\"2635\":1}}],[\"我们可以在程序运行时动态的变化代理的规则\",{\"1\":{\"2607\":1}}],[\"我们可以在init方法中获取参数\",{\"1\":{\"2048\":1}}],[\"我们可以在httpsession对象中存储数据\",{\"1\":{\"1903\":1}}],[\"我们可以在httpsession对象中保存一些关于用户的状态信息\",{\"1\":{\"1894\":1}}],[\"我们可以在web\",{\"1\":{\"1899\":1}}],[\"我们可以在servlet的配置中添加load\",{\"1\":{\"1825\":1}}],[\"我们可以在执行sql的时候\",{\"1\":{\"1235\":1}}],[\"我们可以在catch代码块后继续使用finally代码块\",{\"1\":{\"23\":1}}],[\"我们可以手动创建自定义的块编码\",{\"1\":{\"1161\":1}}],[\"我们可以采用结构化查询语言\",{\"1\":{\"917\":1}}],[\"我们可以采用以下方法进行处理\",{\"1\":{\"889\":1}}],[\"我们可以现将stream流中的integer类型数据转换成int类型\",{\"1\":{\"874\":1}}],[\"我们可以增加哈希码的长度\",{\"1\":{\"703\":1}}],[\"我们可以粘贴到下列监视窗口中\",{\"1\":{\"671\":1}}],[\"我们可以将stream看做流水线上的一个工序\",{\"1\":{\"857\":1}}],[\"我们可以将未编译的web工程比喻为一只生的鸡\",{\"1\":{\"659\":1}}],[\"我们可以将同步监视器设置为共同的对象资源\",{\"1\":{\"487\":1}}],[\"我们可以利用反射机制\",{\"1\":{\"573\":1}}],[\"我们可以创建多个condition\",{\"1\":{\"475\":1}}],[\"我们可以实现callable接口来获取线程的返回值\",{\"1\":{\"447\":1}}],[\"我们可以看到\",{\"1\":{\"438\":1,\"441\":1,\"442\":1}}],[\"我们可以理解为\",{\"1\":{\"400\":1}}],[\"我们可以理解为他是线程与线程间的传送门\",{\"1\":{\"346\":1}}],[\"我们可以加以限制\",{\"1\":{\"321\":1}}],[\"我们会重写它的equals\",{\"1\":{\"281\":1}}],[\"我们会发现触发异常\",{\"1\":{\"265\":1}}],[\"我们引入了listiterator\",{\"1\":{\"266\":1}}],[\"我们再使用多态时\",{\"1\":{\"242\":1}}],[\"我们有时称这种无连接为短连接\",{\"1\":{\"159\":1}}],[\"我们在controller单元中修改\",{\"1\":{\"2793\":1}}],[\"我们在使用xml配置事务或者直接使用\",{\"1\":{\"2713\":1}}],[\"我们在使用不不同的泛型时\",{\"1\":{\"244\":1}}],[\"我们在处理业务时一般不直接使用该接口applicationcontext\",{\"1\":{\"2550\":1}}],[\"我们在之前的java使用过程中\",{\"1\":{\"2540\":1}}],[\"我们在mybatis官网可以看到\",{\"1\":{\"2314\":1}}],[\"我们在源组件中\",{\"1\":{\"1856\":1}}],[\"我们在vue中使用都是一律去除on\",{\"1\":{\"1645\":1}}],[\"我们在person1和person2中也可以使用\",{\"1\":{\"1425\":1}}],[\"我们在object原型中添加的属性和方法\",{\"1\":{\"1425\":1}}],[\"我们在这里分析一下特殊的运算符号\",{\"1\":{\"1360\":1}}],[\"我们在进行sql拼接时\",{\"1\":{\"1246\":1}}],[\"我们在创建表的时候\",{\"1\":{\"996\":1}}],[\"我们在常见的开发中\",{\"1\":{\"272\":1}}],[\"我们在初始化时会创建一个空的数组\",{\"1\":{\"255\":1}}],[\"我们在原有的表述层中\",{\"1\":{\"120\":1}}],[\"我们在代码层面是无法干预的\",{\"1\":{\"29\":1}}],[\"我们在finally代码块中一般执行以下操作\",{\"1\":{\"26\":1}}],[\"我们要知道\",{\"1\":{\"23\":1}}],[\"我们试着使用前面的知识来解决这个异常\",{\"1\":{\"17\":1}}],[\"我们首先简单来看一个代码\",{\"1\":{\"16\":1}}],[\"替换你的jdbc\",{\"1\":{\"2297\":1}}],[\"替换那些符合某个模式的文本\",{\"1\":{\"1582\":1}}],[\"替换子节点\",{\"1\":{\"1486\":1}}],[\"替换\",{\"0\":{\"1088\":1},\"1\":{\"395\":1,\"2071\":1}}],[\"替换方法\",{\"1\":{\"300\":1}}],[\"理\",{\"1\":{\"2780\":1}}],[\"理解为后者\",{\"1\":{\"1548\":1}}],[\"理解日志格式化字符的含义\",{\"0\":{\"1287\":1},\"1\":{\"2304\":1}}],[\"理解工作区\",{\"0\":{\"728\":1}}],[\"理解什么是可变与不可变\",{\"0\":{\"393\":1}}],[\"理想情况下\",{\"1\":{\"100\":1}}],[\"地址栏会发生变化\",{\"1\":{\"1865\":1}}],[\"地址栏中具体的文字\",{\"1\":{\"1462\":1}}],[\"地址栏信息\",{\"1\":{\"1330\":1}}],[\"地址\",{\"1\":{\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"1046\":4,\"1219\":1,\"1221\":1,\"1253\":2}}],[\"地址是\",{\"1\":{\"513\":1}}],[\"地址api\",{\"0\":{\"500\":1}}],[\"地址相关的操作\",{\"1\":{\"387\":1}}],[\"地址和端口号\",{\"1\":{\"177\":1}}],[\"盘符上的文件\",{\"1\":{\"384\":1}}],[\"偏移性\",{\"1\":{\"378\":1}}],[\"示例\",{\"1\":{\"374\":1}}],[\"字面量的方式创建对象\",{\"0\":{\"1421\":1}}],[\"字体标签\",{\"0\":{\"1306\":1},\"1\":{\"1306\":1}}],[\"字号逐渐变小\",{\"1\":{\"1299\":1}}],[\"字段2\",{\"1\":{\"1042\":1}}],[\"字段1\",{\"1\":{\"1042\":1}}],[\"字段=值\",{\"1\":{\"1040\":1}}],[\"字段之间是可以的\",{\"1\":{\"1028\":1}}],[\"字段类型\",{\"1\":{\"1007\":2,\"1012\":2}}],[\"字段列名2\",{\"1\":{\"988\":1,\"994\":1}}],[\"字段列名1\",{\"1\":{\"988\":1,\"994\":1}}],[\"字段列名\",{\"1\":{\"988\":1,\"994\":1}}],[\"字段\",{\"1\":{\"959\":1,\"1056\":3,\"1057\":3,\"1060\":1,\"1061\":1,\"1063\":1,\"1064\":1}}],[\"字段名2\",{\"1\":{\"1040\":1,\"1135\":1}}],[\"字段名1\",{\"1\":{\"1040\":1,\"1135\":1}}],[\"字段名必须描述该字段的用途\",{\"1\":{\"983\":1}}],[\"字段名不区分大小写\",{\"1\":{\"973\":1}}],[\"字段名\",{\"1\":{\"958\":3,\"983\":1,\"1007\":2,\"1012\":2,\"1025\":4,\"1026\":1,\"1039\":2,\"1040\":1,\"1133\":1,\"1134\":1,\"2800\":1,\"2801\":1}}],[\"字段包含学号\",{\"1\":{\"937\":2}}],[\"字节对象\",{\"1\":{\"591\":6}}],[\"字节对象流\",{\"0\":{\"423\":1}}],[\"字节码对象\",{\"1\":{\"585\":5,\"587\":2,\"588\":4,\"594\":5}}],[\"字节码操作获得类似动态语言的特性\",{\"1\":{\"573\":1}}],[\"字节码信息对象\",{\"1\":{\"472\":1}}],[\"字节码作为同步监视器\",{\"1\":{\"466\":1}}],[\"字节缓冲流\",{\"0\":{\"416\":1},\"1\":{\"415\":2,\"418\":2}}],[\"字节流\",{\"0\":{\"410\":1},\"1\":{\"421\":2,\"422\":1}}],[\"字符\",{\"1\":{\"1287\":1,\"2334\":1}}],[\"字符集名称\",{\"1\":{\"1156\":3}}],[\"字符集\",{\"1\":{\"946\":1,\"950\":1}}],[\"字符串型\",{\"0\":{\"1355\":1}}],[\"字符串\",{\"1\":{\"1198\":1,\"1415\":1,\"2125\":1,\"2765\":1}}],[\"字符串要使用单引号或者双引号区分与数字的区别\",{\"1\":{\"1148\":1}}],[\"字符串函数\",{\"0\":{\"1085\":1}}],[\"字符串等类型可以做运算查询\",{\"1\":{\"1028\":1}}],[\"字符串不区分单引号和双引号\",{\"1\":{\"972\":1}}],[\"字符串类型\",{\"0\":{\"941\":1},\"1\":{\"941\":1}}],[\"字符串为空\",{\"1\":{\"850\":1}}],[\"字符串的长度\",{\"1\":{\"850\":3}}],[\"字符串拼接\",{\"1\":{\"434\":1}}],[\"字符串分割\",{\"1\":{\"431\":1}}],[\"字符串替换\",{\"1\":{\"431\":1}}],[\"字符串合并\",{\"1\":{\"431\":1}}],[\"字符串截取\",{\"1\":{\"431\":1}}],[\"字符串地址是否相同\",{\"1\":{\"431\":1}}],[\"字符串是否相同\",{\"1\":{\"431\":1}}],[\"字符串是否为空\",{\"1\":{\"431\":1}}],[\"字符串下表对应字符\",{\"1\":{\"431\":1}}],[\"字符串长度为0\",{\"1\":{\"1991\":1}}],[\"字符串长度\",{\"1\":{\"431\":1}}],[\"字符转换流\",{\"0\":{\"419\":1}}],[\"字符缓冲流\",{\"0\":{\"413\":1}}],[\"字符数组的后续修改不会影响新创建的字符串\",{\"1\":{\"404\":1}}],[\"字符流\",{\"0\":{\"402\":1},\"1\":{\"421\":2,\"422\":2}}],[\"字母\",{\"1\":{\"374\":1,\"908\":1}}],[\"字典顺序\",{\"1\":{\"288\":1}}],[\"疑问\",{\"1\":{\"371\":1}}],[\"日至今的毫秒数\",{\"1\":{\"1415\":1}}],[\"日志\",{\"0\":{\"2891\":1},\"1\":{\"2756\":1,\"2891\":1}}],[\"日志处理\",{\"1\":{\"2619\":1}}],[\"日志记录\",{\"1\":{\"2523\":1}}],[\"日志主体内容\",{\"1\":{\"2487\":1}}],[\"日志级别按顺序分别是\",{\"1\":{\"2487\":1}}],[\"日志级别\",{\"1\":{\"2487\":1}}],[\"日志输出的格式\",{\"1\":{\"2487\":1}}],[\"日志格式化器\",{\"1\":{\"1285\":1}}],[\"日志目的地\",{\"1\":{\"1285\":1}}],[\"日志的格式不能很好的定制\",{\"1\":{\"1283\":1}}],[\"日志没有等级\",{\"1\":{\"1283\":1}}],[\"日志可以帮助我们分析程序的运行状态\",{\"1\":{\"1282\":1}}],[\"日志可以记录程序的运行状态\",{\"1\":{\"1282\":1}}],[\"日志信息\",{\"1\":{\"731\":1}}],[\"日本历\",{\"1\":{\"892\":1}}],[\"日常使用中我们还是正常的使用new创建对象\",{\"1\":{\"596\":1}}],[\"日期处理\",{\"0\":{\"2508\":1}}],[\"日期对象格式化处理\",{\"0\":{\"1417\":1}}],[\"日期选择\",{\"0\":{\"1349\":1}}],[\"日期类型的特殊处理\",{\"0\":{\"2797\":1}}],[\"日期类型推荐写成java\",{\"1\":{\"1226\":1}}],[\"日期类并不提供国际化\",{\"1\":{\"891\":1}}],[\"日期\",{\"1\":{\"1198\":1,\"1580\":1}}],[\"日期函数\",{\"0\":{\"1093\":1}}],[\"日期和时间的处理\",{\"1\":{\"2508\":1}}],[\"日期和时间的类应该是不可变的\",{\"1\":{\"378\":1}}],[\"日期和时间类型\",{\"0\":{\"942\":1}}],[\"日期和时间对象是不可变的\",{\"1\":{\"902\":1}}],[\"日期时间的时区\",{\"0\":{\"901\":1}}],[\"日期时间的修改\",{\"1\":{\"895\":1}}],[\"日期时间的修改和比较\",{\"0\":{\"894\":1}}],[\"日期时间的常见操作\",{\"0\":{\"893\":1}}],[\"日期时间操作\",{\"1\":{\"893\":1}}],[\"日期时间格式化类\",{\"1\":{\"892\":1}}],[\"日期之间相互独立\",{\"1\":{\"379\":1}}],[\"日期或者时间元素\",{\"1\":{\"374\":1}}],[\"日期格式化标签是fmt标签中专门用于处理日期格式的标签\",{\"1\":{\"2030\":1}}],[\"日期格式化\",{\"0\":{\"2030\":1},\"1\":{\"897\":1}}],[\"日期格式\",{\"1\":{\"374\":1,\"2298\":1}}],[\"日期转换\",{\"1\":{\"374\":1}}],[\"日期相关类\",{\"0\":{\"369\":1,\"3016\":1},\"1\":{\"38\":1}}],[\"日\",{\"1\":{\"371\":1,\"373\":1,\"376\":1,\"893\":4,\"1198\":1,\"1415\":1,\"1417\":1}}],[\"值为requestmethod的枚举值\",{\"1\":{\"2813\":1}}],[\"值为当前值这样的一个操作\",{\"1\":{\"2025\":1}}],[\"值为空\",{\"1\":{\"340\":1}}],[\"值得注意的是\",{\"1\":{\"1251\":1,\"1825\":1}}],[\"值n\",{\"1\":{\"1094\":1}}],[\"值1\",{\"1\":{\"1094\":2}}],[\"值的位置要与列的字段名一一对应\",{\"1\":{\"972\":1}}],[\"值\",{\"0\":{\"1357\":1,\"1358\":1},\"1\":{\"371\":1,\"382\":3,\"587\":1,\"588\":1,\"674\":2,\"970\":2,\"971\":2}}],[\"废弃方法\",{\"1\":{\"371\":1}}],[\"过程中出现错误则回滚\",{\"1\":{\"2702\":2}}],[\"过度依赖string的api\",{\"1\":{\"1580\":1}}],[\"过滤敏感词汇\",{\"1\":{\"1994\":1}}],[\"过滤\",{\"1\":{\"861\":1,\"2301\":3}}],[\"过滤长度等于3\",{\"1\":{\"856\":1}}],[\"过滤张开头的\",{\"1\":{\"856\":1}}],[\"过滤器注解可以使用\",{\"1\":{\"2050\":1}}],[\"过滤器注解的应用\",{\"0\":{\"2050\":1}}],[\"过滤器初始化参数\",{\"0\":{\"2048\":1}}],[\"过滤器链的使用\",{\"0\":{\"2045\":1}}],[\"过滤器如何实现功能\",{\"0\":{\"1995\":1}}],[\"过滤器的结构\",{\"0\":{\"2001\":1}}],[\"过滤器的生命周期\",{\"0\":{\"2000\":1}}],[\"过滤器的定义与配置\",{\"0\":{\"1996\":1}}],[\"过滤器的应用案例\",{\"0\":{\"2053\":1,\"3146\":1},\"1\":{\"212\":1,\"2806\":1}}],[\"过滤器的使用\",{\"0\":{\"2044\":1,\"3145\":1},\"1\":{\"212\":1}}],[\"过滤器和监听器\",{\"0\":{\"212\":1,\"2992\":1},\"1\":{\"12\":1,\"2912\":1}}],[\"过时方法\",{\"1\":{\"371\":1,\"542\":1}}],[\"过期方法不建议使用\",{\"1\":{\"461\":1}}],[\"过期方法\",{\"1\":{\"371\":1,\"461\":1,\"542\":1}}],[\"否\",{\"1\":{\"1112\":6,\"2029\":12,\"2030\":7}}],[\"否在\",{\"1\":{\"364\":1}}],[\"否则获取不到显示为null\",{\"1\":{\"2793\":1}}],[\"否则是相对路径\",{\"1\":{\"2764\":1}}],[\"否则抛异常\",{\"1\":{\"2732\":2}}],[\"否则抛出异常nosuchelementexception\",{\"1\":{\"853\":2}}],[\"否则抛出异常\",{\"1\":{\"562\":1}}],[\"否则抛出异常classcastexception\",{\"1\":{\"351\":1}}],[\"否则以非事务运行\",{\"1\":{\"2728\":1}}],[\"否则切点方法在执行时接收不到返回值\",{\"1\":{\"2644\":1}}],[\"否则回到登录页\",{\"1\":{\"1909\":1,\"1910\":1}}],[\"否则容器启动就会抛出异常\",{\"1\":{\"1839\":1}}],[\"否则都为字符串\",{\"1\":{\"1676\":1}}],[\"否则不支持嵌套事务\",{\"1\":{\"2733\":1}}],[\"否则不会永久更新面向数据的资源\",{\"1\":{\"2684\":1}}],[\"否则不能提交\",{\"1\":{\"1347\":1}}],[\"否则不进操作\",{\"1\":{\"865\":1}}],[\"否则自动调用rollback\",{\"1\":{\"1233\":1}}],[\"否则为false\",{\"1\":{\"2025\":2,\"2031\":2}}],[\"否则为\",{\"1\":{\"1198\":1}}],[\"否则就是一个任务之前\",{\"1\":{\"1198\":1}}],[\"否则会在查询数据库以后再释放锁\",{\"1\":{\"2481\":1}}],[\"否则会报错\",{\"1\":{\"2315\":1,\"2596\":1}}],[\"否则会失效\",{\"1\":{\"1673\":1}}],[\"否则会影响mysql的再次安装\",{\"1\":{\"928\":1}}],[\"否则会出现后面的覆盖前面的内容\",{\"1\":{\"79\":1}}],[\"否则按照流最大长度进行截取跳过\",{\"1\":{\"866\":1}}],[\"否则返回value2\",{\"1\":{\"1094\":1}}],[\"否则返回f\",{\"1\":{\"1094\":1}}],[\"否则返回false\",{\"1\":{\"853\":2}}],[\"否则返回lambda表达式的指定异常\",{\"1\":{\"853\":2}}],[\"否则返回lambda表达式的返回值\",{\"1\":{\"853\":2}}],[\"否则\",{\"1\":{\"364\":1,\"732\":1,\"853\":1,\"2434\":1}}],[\"否则仍然采用数组扩容机制\",{\"1\":{\"280\":1}}],[\"否则报错\",{\"1\":{\"74\":1,\"2278\":1}}],[\"之前使用jdbc访问数据库的dao层\",{\"1\":{\"2199\":1}}],[\"之前\",{\"1\":{\"1995\":1,\"2623\":1}}],[\"之前是提交的资源的目标地址\",{\"1\":{\"1330\":1}}],[\"之前默认为true\",{\"1\":{\"1251\":1}}],[\"之前建立的索引可能不能满足查询需求\",{\"1\":{\"1128\":1}}],[\"之前的写法\",{\"1\":{\"880\":1}}],[\"之前对于null的处理\",{\"0\":{\"850\":1}}],[\"之所以几乎每一个仓库都有\",{\"1\":{\"744\":1}}],[\"之所以能够自动化构建项目和管理jar包\",{\"1\":{\"684\":1}}],[\"之后加入的\",{\"1\":{\"2843\":1}}],[\"之后还是代替执行的代码\",{\"1\":{\"2623\":1}}],[\"之后查询不到此条被删除的数据\",{\"1\":{\"2231\":1}}],[\"之后jsp和同等功能的servlet的执行速度就几乎相同了\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"之后是提交的具体的数据\",{\"1\":{\"1330\":1}}],[\"之后就可以把多个数据库操作的表达式作为一个事务\",{\"1\":{\"1233\":1}}],[\"之后对比2个摘要数据\",{\"1\":{\"702\":1}}],[\"之后添加一个字符串\",{\"1\":{\"265\":1,\"266\":1}}],[\"之间的字母\",{\"1\":{\"1582\":1}}],[\"之间的随机数\",{\"1\":{\"1411\":1}}],[\"之间的差别\",{\"1\":{\"1408\":1}}],[\"之间的值的自动装箱的对象标识语义\",{\"1\":{\"364\":1}}],[\"之间均匀分布的\",{\"1\":{\"382\":2}}],[\"之间\",{\"1\":{\"371\":1}}],[\"≤\",{\"1\":{\"364\":1}}],[\"详情见\",{\"1\":{\"2487\":1}}],[\"详细流程\",{\"1\":{\"1769\":1}}],[\"详细学习地址可以参照w3c进行学习\",{\"1\":{\"1344\":1}}],[\"详细地址等多个部分进行存储\",{\"1\":{\"1046\":1}}],[\"详细原理见数据结构todo\",{\"1\":{\"364\":1}}],[\"详见\",{\"1\":{\"1810\":1,\"2875\":1,\"2902\":1}}],[\"详见官方文档\",{\"1\":{\"607\":1}}],[\"详见附件\",{\"1\":{\"9\":1}}],[\"详解integer\",{\"0\":{\"364\":1}}],[\"含了\",{\"1\":{\"1198\":1}}],[\"含\",{\"1\":{\"363\":1,\"364\":1}}],[\"含义\",{\"1\":{\"192\":1,\"2481\":1}}],[\"含义是\",{\"1\":{\"71\":1}}],[\"双\",{\"1\":{\"1775\":1}}],[\"双大括号插值语法在遇到网络延迟的时候会显示编译之前的文本\",{\"1\":{\"1637\":1}}],[\"双大括号和v\",{\"1\":{\"1635\":1}}],[\"双大括号更灵活\",{\"1\":{\"1634\":1}}],[\"双大括号在渲染结果之前\",{\"1\":{\"1634\":1}}],[\"双大括号\",{\"1\":{\"1634\":1}}],[\"双击666\",{\"1\":{\"1433\":1}}],[\"双击mysql安装文件mysql\",{\"1\":{\"922\":1}}],[\"双精度浮点数值\",{\"1\":{\"940\":1}}],[\"双冒号为方法引用运算符\",{\"1\":{\"827\":1}}],[\"双向通讯\",{\"0\":{\"510\":1,\"516\":1}}],[\"双向链表\",{\"1\":{\"227\":1}}],[\"双端队列\",{\"1\":{\"357\":1}}],[\"双端队列用的比较少\",{\"1\":{\"357\":1}}],[\"双端队列deque\",{\"0\":{\"357\":1}}],[\"登陆页面\",{\"0\":{\"2094\":1}}],[\"登陆\",{\"1\":{\"2060\":1}}],[\"登出销毁session\",{\"1\":{\"2088\":1}}],[\"登出游戏~\",{\"1\":{\"356\":1}}],[\"登出\",{\"1\":{\"356\":1}}],[\"登录校验controller\",{\"1\":{\"2063\":1}}],[\"登录页\",{\"1\":{\"2063\":1}}],[\"登录验证\",{\"0\":{\"2059\":1}}],[\"登录过\",{\"1\":{\"1910\":1}}],[\"登录失败\",{\"1\":{\"1242\":1,\"1252\":1,\"1909\":1,\"2914\":1}}],[\"登录失败~\",{\"1\":{\"511\":1,\"512\":1,\"513\":2}}],[\"登录成功将用户信息存户httpsession\",{\"1\":{\"1909\":1}}],[\"登录成功后\",{\"1\":{\"1904\":1}}],[\"登录成功失败的信息\",{\"1\":{\"1282\":1}}],[\"登录成功\",{\"1\":{\"1242\":1,\"1252\":1,\"1909\":1,\"2062\":1,\"2914\":1}}],[\"登录成功~\",{\"1\":{\"511\":1,\"512\":1,\"513\":2}}],[\"登录的命令\",{\"1\":{\"925\":1}}],[\"登录\",{\"0\":{\"925\":1},\"1\":{\"356\":1,\"763\":1,\"1514\":1,\"1793\":1,\"2914\":1}}],[\"已替换占位\",{\"1\":{\"2299\":1,\"2301\":2}}],[\"已废弃\",{\"1\":{\"1415\":3,\"1452\":1}}],[\"已完成事项\",{\"1\":{\"1181\":1}}],[\"已完成\",{\"1\":{\"1181\":1}}],[\"已add\",{\"1\":{\"743\":1}}],[\"已暂存状态\",{\"1\":{\"734\":1}}],[\"已修改状态\",{\"1\":{\"734\":1}}],[\"已跟踪\",{\"1\":{\"734\":1}}],[\"已有的函数可以被删除或是其他结构上的变化\",{\"1\":{\"572\":1}}],[\"已过时\",{\"1\":{\"542\":1}}],[\"已登录游戏\",{\"1\":{\"356\":1}}],[\"已经普遍地取代了基于\",{\"1\":{\"2823\":1}}],[\"已经融合在spring\",{\"1\":{\"2740\":1}}],[\"已经导入该包\",{\"1\":{\"2629\":1}}],[\"已经对基础的代码进行了封装并提供相应的api\",{\"1\":{\"2197\":1}}],[\"已经从ssh\",{\"1\":{\"2197\":1}}],[\"已经活化\",{\"1\":{\"2097\":1}}],[\"已经向浏览器响应数据\",{\"1\":{\"1916\":1}}],[\"已经提交了响应结\",{\"1\":{\"1855\":1}}],[\"已经出现在所有的\",{\"1\":{\"1372\":1}}],[\"已经关闭\",{\"1\":{\"1288\":1}}],[\"已经有其他方法存在相同的方案\",{\"1\":{\"827\":1}}],[\"已经修改了\",{\"1\":{\"759\":1}}],[\"已经进入了方法体\",{\"1\":{\"482\":1}}],[\"已经实现了map接口\",{\"1\":{\"294\":1}}],[\"已经是一个链表\",{\"1\":{\"279\":1}}],[\"已经是国内可视化生态领域的领军者\",{\"1\":{\"61\":1}}],[\"已经正常处理完毕\",{\"1\":{\"192\":1}}],[\"已经成为一个迫切的需求\",{\"1\":{\"100\":1}}],[\"已经在\",{\"1\":{\"68\":1}}],[\"任意一个事务的内部操作对其他并发的事务\",{\"1\":{\"2687\":1}}],[\"任意匹配\",{\"0\":{\"1841\":1}}],[\"任务到期时间\",{\"1\":{\"1198\":1}}],[\"任务完成的日期\",{\"1\":{\"1198\":1}}],[\"任务名\",{\"1\":{\"1198\":1}}],[\"任务以及所有的子任务是否完成\",{\"1\":{\"1198\":1}}],[\"任务是否完成\",{\"1\":{\"1198\":1}}],[\"任务属性\",{\"1\":{\"1198\":1}}],[\"任务超时处理\",{\"1\":{\"355\":1}}],[\"任何方法的调用都会懒加载对象的所有属性\",{\"1\":{\"2434\":1}}],[\"任何一个session对象中修改了数据\",{\"1\":{\"2080\":1}}],[\"任何一个session对象中移除了数据\",{\"1\":{\"2080\":1}}],[\"任何一个session对象中添加了数据\",{\"1\":{\"2080\":1}}],[\"任何一个session对象的销毁\",{\"1\":{\"2079\":1}}],[\"任何一个session对象创建\",{\"1\":{\"2079\":1}}],[\"任何一个request对象中调用\",{\"1\":{\"2077\":6}}],[\"任何一个元素都有且仅有一个直接前驱和直接后继\",{\"1\":{\"226\":1}}],[\"任何资源都要进行过滤\",{\"1\":{\"2063\":1}}],[\"任何html标签原有的属性\",{\"1\":{\"127\":1}}],[\"超时回滚\",{\"1\":{\"2715\":1}}],[\"超时\",{\"0\":{\"2715\":1}}],[\"超过指定时间\",{\"1\":{\"2294\":1}}],[\"超过这个数的请求将不予处理\",{\"1\":{\"1757\":1}}],[\"超过了空闲时间\",{\"1\":{\"355\":1}}],[\"超大桌面显示器\",{\"1\":{\"1600\":1}}],[\"超文本\",{\"1\":{\"1325\":1}}],[\"超文本标记语言\",{\"1\":{\"1325\":1}}],[\"超文本传输协议\",{\"1\":{\"154\":1}}],[\"超链接标签\",{\"0\":{\"1311\":1,\"1312\":1},\"1\":{\"1312\":1}}],[\"超链接\",{\"0\":{\"1189\":1},\"1\":{\"1295\":1,\"1546\":1}}],[\"超级管理员\",{\"1\":{\"1114\":1}}],[\"饿了吗订餐通知\",{\"1\":{\"355\":1}}],[\"消耗时间\",{\"1\":{\"888\":7}}],[\"消息服务\",{\"1\":{\"2530\":1}}],[\"消息框\",{\"0\":{\"1699\":1}}],[\"消息输入弹窗\",{\"0\":{\"1456\":1}}],[\"消息接收\",{\"1\":{\"495\":1}}],[\"消息发送\",{\"1\":{\"495\":1}}],[\"消息结构\",{\"0\":{\"174\":1}}],[\"消费了\",{\"1\":{\"489\":1,\"490\":1}}],[\"消费\",{\"1\":{\"489\":2,\"490\":2}}],[\"消费者接口\",{\"1\":{\"838\":1}}],[\"消费者等待池\",{\"1\":{\"490\":1}}],[\"消费者\",{\"1\":{\"489\":3,\"490\":3}}],[\"消费者访问这个类的对象\",{\"1\":{\"486\":1}}],[\"消费者线程查看队列头部的元素\",{\"1\":{\"354\":1}}],[\"越来我多的web服条开始采用rest风格设计和实现\",{\"1\":{\"2823\":1}}],[\"越来越复杂\",{\"1\":{\"100\":1}}],[\"越能支持高并发的数据库操作\",{\"1\":{\"2693\":1}}],[\"越差\",{\"1\":{\"1112\":1}}],[\"越往后到期时间赿晚\",{\"1\":{\"354\":1}}],[\"排除service\",{\"1\":{\"2588\":1,\"2592\":1}}],[\"排除指点的标签注解\",{\"1\":{\"2588\":1}}],[\"排队等待\",{\"1\":{\"1272\":1}}],[\"排在队列头部的元素是最早到期的\",{\"1\":{\"354\":1}}],[\"排序查询\",{\"0\":{\"2254\":1}}],[\"排序查询order\",{\"0\":{\"1038\":1}}],[\"排序\",{\"1\":{\"284\":1,\"288\":1,\"299\":1}}],[\"激活notfull等待池\",{\"1\":{\"344\":1}}],[\"激活notempty等待池\",{\"1\":{\"344\":1}}],[\"激活非满等待池\",{\"1\":{\"333\":1}}],[\"激活非空等待池\",{\"1\":{\"332\":1}}],[\"封装的第二个\",{\"1\":{\"2503\":1}}],[\"封装的第一个\",{\"1\":{\"2503\":1}}],[\"封装一对一信息关系的标签\",{\"1\":{\"2425\":1}}],[\"封装了常见的业务层逻辑\",{\"1\":{\"2214\":1}}],[\"封装iservice\",{\"1\":{\"2214\":1}}],[\"封装ip\",{\"1\":{\"503\":1}}],[\"封装到一个servletconfig对象中\",{\"1\":{\"1818\":1,\"1832\":1}}],[\"封装可重用的代码\",{\"1\":{\"1703\":1}}],[\"封装周围的html元素\",{\"1\":{\"1527\":1}}],[\"封装实体类对象\",{\"0\":{\"1241\":1}}],[\"封装实体类的特点\",{\"1\":{\"1226\":1}}],[\"封装后的使用\",{\"0\":{\"1227\":1}}],[\"封装成对象\",{\"0\":{\"1224\":1}}],[\"封装域名\",{\"1\":{\"503\":1}}],[\"封装计算机名\",{\"1\":{\"503\":1}}],[\"封装文件\",{\"1\":{\"400\":1}}],[\"封装为对象\",{\"1\":{\"384\":1}}],[\"封装为一个entry对象\",{\"1\":{\"294\":1}}],[\"封装你要装的那个元素\",{\"1\":{\"338\":1}}],[\"永远是以项目为基准路径\",{\"1\":{\"1872\":1}}],[\"永远保持与正在运行的生产环境完全一致\",{\"1\":{\"802\":1}}],[\"永远阻塞\",{\"1\":{\"337\":1}}],[\"永久阻塞式获取\",{\"1\":{\"327\":1}}],[\"真正放在ioc容器中的是代理类的对象\",{\"1\":{\"2658\":1}}],[\"真正的删除了\",{\"1\":{\"978\":1}}],[\"真正阻塞\",{\"1\":{\"337\":1}}],[\"真正阻塞的方法\",{\"1\":{\"337\":1}}],[\"真实jdbc\",{\"1\":{\"2301\":1}}],[\"真实删除\",{\"1\":{\"2231\":1}}],[\"真实的一个精准的\",{\"1\":{\"387\":1}}],[\"真实结构\",{\"1\":{\"225\":1,\"302\":1}}],[\"出于浏览器的同源策略限制\",{\"1\":{\"2168\":1}}],[\"出于安全考虑\",{\"1\":{\"1226\":1}}],[\"出色的浏览器兼容性\",{\"1\":{\"1540\":1}}],[\"出色的dom封装\",{\"1\":{\"1540\":1}}],[\"出版\",{\"1\":{\"1198\":1}}],[\"出一个可以运行的项目的过程\",{\"1\":{\"660\":1}}],[\"出现位置\",{\"0\":{\"2834\":1,\"2839\":1,\"2844\":1,\"2849\":1,\"2854\":1}}],[\"出现nan\",{\"1\":{\"1361\":1}}],[\"出现笛卡尔积\",{\"1\":{\"1054\":1}}],[\"出现安装类型选项\",{\"1\":{\"922\":1}}],[\"出现安全警告\",{\"1\":{\"725\":1}}],[\"出现了多种类型\",{\"1\":{\"916\":1}}],[\"出现死锁后\",{\"1\":{\"484\":1}}],[\"出现版本\",{\"1\":{\"364\":1}}],[\"出现异常\",{\"1\":{\"337\":1}}],[\"出队\",{\"1\":{\"328\":1,\"338\":1}}],[\"出队的队列\",{\"1\":{\"321\":1}}],[\"继续使用该类型的数据源\",{\"1\":{\"2663\":1}}],[\"继续增加响应信息\",{\"1\":{\"1860\":1}}],[\"继续优化\",{\"0\":{\"1277\":1}}],[\"继续执行后续代码块\",{\"1\":{\"1858\":1}}],[\"继续执行取元素的任务\",{\"1\":{\"334\":1}}],[\"继续执行放置元素的任务\",{\"1\":{\"334\":1}}],[\"继承httpjspbase重写的方法是\",{\"1\":{\"1933\":1}}],[\"继承httpservlet\",{\"0\":{\"1789\":1}}],[\"继承结构\",{\"0\":{\"1932\":1}}],[\"继承结构与生命周期\",{\"0\":{\"1815\":1,\"3129\":1},\"1\":{\"210\":1}}],[\"继承自genericservlet\",{\"1\":{\"1820\":1}}],[\"继承和多态\",{\"1\":{\"1376\":1}}],[\"继承层次结构\",{\"0\":{\"644\":1}}],[\"继承thread类\",{\"0\":{\"436\":1},\"1\":{\"437\":1,\"438\":1,\"440\":1,\"441\":1}}],[\"继承\",{\"0\":{\"713\":1,\"2216\":1,\"2217\":1},\"1\":{\"364\":1,\"366\":1,\"392\":2,\"456\":1,\"1257\":2,\"1403\":1,\"2214\":1}}],[\"继承关系\",{\"1\":{\"360\":1,\"364\":1}}],[\"继承的abstractmap中\",{\"1\":{\"294\":1}}],[\"继承情况\",{\"0\":{\"239\":1}}],[\"继承与聚合\",{\"0\":{\"712\":1,\"3049\":1},\"1\":{\"45\":1}}],[\"继承检查异常\",{\"1\":{\"36\":1}}],[\"继承运行时异常\",{\"1\":{\"36\":1}}],[\"才能强制修改字符集\",{\"1\":{\"2155\":1}}],[\"才具有该对象\",{\"1\":{\"1971\":1}}],[\"才可以正常编写javaweb项目\",{\"1\":{\"1776\":1}}],[\"才可以采集数据\",{\"1\":{\"1333\":1}}],[\"才会再次编译jsp成\",{\"1\":{\"1933\":1}}],[\"才会继续比较内容\",{\"1\":{\"1364\":1}}],[\"才会比较内容\",{\"1\":{\"1364\":1}}],[\"才会重新激活notempty等待池\",{\"1\":{\"334\":1}}],[\"才会重新激活notfull等待池\",{\"1\":{\"334\":1}}],[\"才是浮点数\",{\"1\":{\"1361\":1}}],[\"才进行转成红黑树\",{\"1\":{\"279\":1}}],[\"非手动提交事务\",{\"1\":{\"2728\":1}}],[\"非数字\",{\"1\":{\"1408\":1}}],[\"非\",{\"1\":{\"1195\":1}}],[\"非关系型数据库nosql\",{\"0\":{\"918\":1}}],[\"非线程安全\",{\"1\":{\"891\":1}}],[\"非终结方法\",{\"1\":{\"861\":1}}],[\"非常耗时\",{\"1\":{\"809\":1}}],[\"非常重要的两个属性\",{\"1\":{\"392\":1}}],[\"非跨平台项目\",{\"1\":{\"725\":1}}],[\"非静态同步方法的同步监视器是this\",{\"1\":{\"472\":1}}],[\"非文本文件\",{\"1\":{\"401\":1}}],[\"非阻塞类型\",{\"1\":{\"348\":1}}],[\"非阻塞\",{\"0\":{\"348\":1}}],[\"非空约束无表级约束\",{\"1\":{\"1005\":1}}],[\"非空约束\",{\"0\":{\"1004\":1},\"1\":{\"981\":1}}],[\"非空队列\",{\"1\":{\"344\":1}}],[\"非空等待池condition\",{\"1\":{\"330\":1}}],[\"非满载存放数据\",{\"1\":{\"344\":1}}],[\"非满等待池\",{\"1\":{\"330\":1}}],[\"索引从0开始\",{\"1\":{\"1552\":2}}],[\"索引不适合建在有大量重复数据的字段上\",{\"1\":{\"1148\":1}}],[\"索引不要太多\",{\"1\":{\"1148\":1}}],[\"索引名\",{\"1\":{\"1133\":1,\"1134\":1,\"1135\":1,\"1136\":1}}],[\"索引列的值必须唯一\",{\"1\":{\"1129\":1}}],[\"索引表中的内容\",{\"1\":{\"1128\":1}}],[\"索引本身也是一张表\",{\"1\":{\"1128\":1}}],[\"索引事先对数据进行了排序\",{\"1\":{\"1127\":1}}],[\"索引是数据库优化\",{\"1\":{\"1127\":1}}],[\"索引是一种排好序的快速查找的数据结构\",{\"1\":{\"1125\":1}}],[\"索引\",{\"0\":{\"1124\":1},\"1\":{\"328\":1,\"934\":1,\"983\":1,\"2025\":1,\"2031\":1}}],[\"索引和视图\",{\"0\":{\"1123\":1,\"3070\":1},\"1\":{\"52\":1}}],[\"传播行为\",{\"0\":{\"2724\":1}}],[\"传参\",{\"1\":{\"2163\":1}}],[\"传递附加参数时自动转换为\",{\"1\":{\"2157\":1}}],[\"传递给数据库必要的参数就行\",{\"1\":{\"1146\":1}}],[\"传给服务器\",{\"1\":{\"2150\":1}}],[\"传值类型\",{\"1\":{\"1713\":1}}],[\"传输层\",{\"1\":{\"495\":2}}],[\"传入的实参等信息时\",{\"1\":{\"2651\":1}}],[\"传入的实参可以和形参个数不一致\",{\"1\":{\"1370\":2}}],[\"传入的新的参数去执行目标方法\",{\"1\":{\"2638\":1}}],[\"传入的参数\",{\"1\":{\"2433\":1}}],[\"传入的连接为null\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"传入什么返回什么\",{\"1\":{\"845\":1}}],[\"传入t返回\",{\"1\":{\"842\":1}}],[\"传入futuretask对象\",{\"1\":{\"449\":1,\"450\":1}}],[\"传入线程任务对象\",{\"1\":{\"449\":1,\"450\":1}}],[\"传入一个int类型的数\",{\"1\":{\"392\":1}}],[\"传入字符串\",{\"1\":{\"364\":1}}],[\"传入对象\",{\"1\":{\"344\":1}}],[\"传入正21亿\",{\"1\":{\"338\":1}}],[\"传入队列指定的容量\",{\"1\":{\"328\":2}}],[\"传统方式传递参数\",{\"0\":{\"2926\":1}}],[\"传统方式调用方法\",{\"0\":{\"2540\":1}}],[\"传统方式操作元素\",{\"0\":{\"1613\":1}}],[\"传统连接方式\",{\"0\":{\"1271\":1}}],[\"传统\",{\"1\":{\"75\":1}}],[\"传统的赋值\",{\"1\":{\"75\":1}}],[\"休眠2s\",{\"1\":{\"327\":1}}],[\"休眠1s\",{\"1\":{\"327\":2}}],[\"且值不能对应值1和值2\",{\"1\":{\"2816\":1}}],[\"且值必须对应值1和值2\",{\"1\":{\"2816\":1}}],[\"且有多个实现类需要注入的话\",{\"1\":{\"2596\":1}}],[\"且有一个记录指针\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"且成功命中\",{\"1\":{\"2488\":1}}],[\"且返回的对象不是同一个\",{\"1\":{\"2479\":1}}],[\"且返回的实体对象是同一个对象\",{\"1\":{\"2475\":1}}],[\"且数据库连接没有关闭\",{\"1\":{\"2408\":1}}],[\"且数据相互隔离\",{\"1\":{\"1708\":1}}],[\"且默认操作的表名和实体类型的类名一致\",{\"1\":{\"2223\":1}}],[\"且改名为mybatis\",{\"1\":{\"2196\":1}}],[\"且代码不容易维护\",{\"1\":{\"2010\":1}}],[\"且非常不利于页面的更新和维护\",{\"1\":{\"1927\":1}}],[\"且大于\",{\"1\":{\"1408\":1}}],[\"且子类无法重写\",{\"1\":{\"820\":1}}],[\"且配好了ssh\",{\"1\":{\"762\":1}}],[\"且支持中断线程的挂起\",{\"1\":{\"475\":1}}],[\"且在发生以下四种情况之一\",{\"1\":{\"475\":1}}],[\"且小于\",{\"1\":{\"382\":1}}],[\"且\",{\"1\":{\"364\":1}}],[\"且head指针和last指针都指向这个节点\",{\"1\":{\"340\":1}}],[\"且移除\",{\"1\":{\"327\":2}}],[\"且只有一行\",{\"1\":{\"80\":1}}],[\"放在类上\",{\"1\":{\"2587\":1}}],[\"放到容器中\",{\"0\":{\"2549\":1}}],[\"放行静态文件\",{\"0\":{\"2789\":1}}],[\"放行\",{\"1\":{\"2057\":1,\"2063\":1}}],[\"放行请求\",{\"1\":{\"1998\":2,\"2001\":2}}],[\"放入\",{\"1\":{\"1293\":2}}],[\"放入连接池\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"放入连接池中\",{\"1\":{\"1272\":1}}],[\"放入的那个区域的数据结构就是按照栈来做的\",{\"1\":{\"302\":1}}],[\"放数据\",{\"1\":{\"344\":1}}],[\"放元素的基本原理\",{\"0\":{\"341\":1}}],[\"放元素用的锁\",{\"1\":{\"338\":1}}],[\"放元素用到的索引\",{\"1\":{\"328\":1,\"330\":1}}],[\"放置元素\",{\"1\":{\"337\":1}}],[\"放置元素从尾部放置\",{\"1\":{\"326\":1}}],[\"成\",{\"1\":{\"2163\":1}}],[\"成本低\",{\"1\":{\"919\":1,\"920\":2}}],[\"成年=\",{\"1\":{\"881\":3}}],[\"成年\",{\"1\":{\"881\":2}}],[\"成功的话\",{\"1\":{\"763\":1}}],[\"成功返回true\",{\"1\":{\"324\":2}}],[\"成绩\",{\"1\":{\"576\":1}}],[\"成员变量\",{\"1\":{\"534\":1,\"1825\":1,\"1951\":1}}],[\"成为理想的数据交换语言\",{\"1\":{\"2123\":1}}],[\"成为码农\",{\"1\":{\"576\":1}}],[\"成为企业级开发语言\",{\"1\":{\"68\":1}}],[\"成为apache\",{\"1\":{\"61\":1}}],[\"阻止了sql注入\",{\"1\":{\"1230\":1}}],[\"阻止了程序的运行\",{\"1\":{\"16\":1}}],[\"阻塞线程\",{\"1\":{\"509\":1,\"510\":1,\"511\":1,\"512\":1}}],[\"阻塞类型\",{\"1\":{\"349\":1}}],[\"阻塞原理实现\",{\"0\":{\"344\":1}}],[\"阻塞存取基于基本的enqueue\",{\"1\":{\"334\":1}}],[\"阻塞\",{\"0\":{\"349\":1},\"1\":{\"324\":1,\"327\":1,\"467\":1,\"509\":1}}],[\"阻塞的概念\",{\"0\":{\"323\":1}}],[\"阻塞队列\",{\"0\":{\"322\":1}}],[\"还避免了幻像读\",{\"1\":{\"2723\":1}}],[\"还保证了不可重复读\",{\"1\":{\"2722\":1}}],[\"还需要在映射文件中进行配置\",{\"1\":{\"2432\":1}}],[\"还省去了自己建造房屋的时间\",{\"1\":{\"2197\":1}}],[\"还可能是其他类\",{\"1\":{\"2551\":1}}],[\"还可自定义关键词\",{\"1\":{\"2179\":1}}],[\"还可以在此处通过add\",{\"1\":{\"922\":1}}],[\"还可以在字符串中加入变量和表达式\",{\"1\":{\"76\":1}}],[\"还可以自定义日期调整\",{\"1\":{\"902\":1}}],[\"还可以对文件进行创建\",{\"1\":{\"384\":1}}],[\"还可以用来定义多行字符串\",{\"1\":{\"76\":1}}],[\"还有自己的注释方式\",{\"1\":{\"1952\":1}}],[\"还有着详细的测试用例\",{\"1\":{\"1941\":1}}],[\"还有href属性\",{\"1\":{\"1718\":1}}],[\"还涉及到css样式代码和文件\",{\"1\":{\"1928\":1}}],[\"还便于与第三方库或既有项目整合\",{\"1\":{\"1611\":1,\"1943\":1}}],[\"还提供了unicode字符集的字符流操作\",{\"1\":{\"1209\":1}}],[\"还提供高级项目管理工具\",{\"1\":{\"655\":1}}],[\"还没有添加到本地库中\",{\"1\":{\"736\":1}}],[\"还不稳定\",{\"1\":{\"725\":1}}],[\"还包括第三方框架的jar包以及各种各样的配置文件\",{\"1\":{\"660\":1}}],[\"还原原来的文件\",{\"1\":{\"743\":1}}],[\"还原移除的代码\",{\"0\":{\"634\":1}}],[\"还原成原有状态\",{\"1\":{\"617\":1}}],[\"还剩\",{\"1\":{\"442\":1,\"446\":1}}],[\"还是有事务的\",{\"1\":{\"2728\":1}}],[\"还是有存在的必要的\",{\"1\":{\"1950\":1}}],[\"还是从结果集中取出一个值时\",{\"1\":{\"2507\":1}}],[\"还是用反射创建\",{\"0\":{\"596\":1}}],[\"还是会出现锁资源争抢的情况\",{\"1\":{\"489\":1}}],[\"还是currenttimemillis\",{\"1\":{\"371\":1}}],[\"还是多用户共享的打印机\",{\"1\":{\"321\":1}}],[\"他们是前端工程师常用的三大框架\",{\"1\":{\"1943\":1}}],[\"他们之间的依赖关系会非常复杂\",{\"1\":{\"652\":1}}],[\"他通过默认的forkjoinpool\",{\"1\":{\"886\":1}}],[\"他就不会继续加载了\",{\"1\":{\"553\":1}}],[\"他是世界民用历法\",{\"1\":{\"892\":1}}],[\"他是不停的来切换时间片\",{\"1\":{\"452\":1}}],[\"他是一种针对数组或者对象进行模式匹配\",{\"1\":{\"75\":1}}],[\"他会在meturing目录下查找页面\",{\"1\":{\"2764\":1}}],[\"他会优先在常量池中查找\",{\"1\":{\"393\":1}}],[\"他会默认为integer\",{\"1\":{\"336\":1}}],[\"他一单被声明则创建在jvm的常量池中\",{\"1\":{\"393\":1}}],[\"他有两端\",{\"1\":{\"321\":1}}],[\"完美解决主键问题\",{\"1\":{\"2179\":1}}],[\"完美应对复杂多变的前端需求\",{\"0\":{\"1947\":1}}],[\"完成的事情\",{\"1\":{\"2520\":1}}],[\"完成对象的初始化功能\",{\"1\":{\"2003\":1}}],[\"完成退出操作\",{\"1\":{\"927\":1}}],[\"完成数组的复制\",{\"1\":{\"316\":2}}],[\"完全使用注解\",{\"0\":{\"2600\":1}}],[\"完全的面向对象\",{\"1\":{\"1927\":1}}],[\"完全不用\",{\"1\":{\"1333\":1}}],[\"完全取决于约定好的设计\",{\"1\":{\"684\":1}}],[\"完全阻塞添加\",{\"1\":{\"327\":1}}],[\"完整\",{\"1\":{\"650\":1}}],[\"完整代码\",{\"0\":{\"523\":1},\"1\":{\"2584\":1,\"2789\":1}}],[\"完整的路径\",{\"1\":{\"386\":1,\"387\":1,\"389\":1}}],[\"完整写法\",{\"1\":{\"80\":1}}],[\"茫然的\",{\"1\":{\"315\":1}}],[\"心不在焉的\",{\"1\":{\"315\":1}}],[\"建筑质量和户型合理有保证\",{\"1\":{\"2197\":1}}],[\"建立在核心和\",{\"1\":{\"2532\":1}}],[\"建立\",{\"1\":{\"1301\":9}}],[\"建立数据库连接的两种方式\",{\"0\":{\"1270\":1}}],[\"建立科学的\",{\"1\":{\"1045\":1}}],[\"建立一张用来存储学生信息的表\",{\"1\":{\"937\":2}}],[\"建立一个空文件夹\",{\"1\":{\"92\":1}}],[\"建立连接\",{\"0\":{\"497\":1}}],[\"建议启动控制的日志\",{\"1\":{\"2306\":1}}],[\"建议如果存在自定义通用\",{\"1\":{\"2214\":1}}],[\"建议开发测试时启用该功能\",{\"1\":{\"2179\":1}}],[\"建议\",{\"0\":{\"1903\":1}}],[\"建议在url\",{\"1\":{\"1879\":1}}],[\"建议在高并发读的场景下使用\",{\"1\":{\"313\":1}}],[\"建议配置文件名和项目名相同\",{\"1\":{\"1747\":1}}],[\"建议写\",{\"1\":{\"1352\":1}}],[\"建议父母持合格父母证上岗\",{\"1\":{\"1301\":8,\"1305\":1}}],[\"建议父母持合格\",{\"1\":{\"1301\":1}}],[\"建议也放在用户家目录下\",{\"1\":{\"772\":1}}],[\"建议多次add后\",{\"1\":{\"738\":1}}],[\"建议使用final修饰同步监视器\",{\"1\":{\"466\":1,\"467\":1}}],[\"建议使用字节流操作\",{\"1\":{\"401\":1}}],[\"建议使用字符流操作\",{\"1\":{\"401\":1}}],[\"马上能读到\",{\"1\":{\"313\":1}}],[\"读音\",{\"1\":{\"1611\":1}}],[\"读音是\",{\"1\":{\"656\":1}}],[\"读已提交\",{\"0\":{\"2721\":1},\"1\":{\"1112\":1,\"2693\":1}}],[\"读未提交\",{\"0\":{\"2720\":1},\"1\":{\"1112\":1,\"2693\":1}}],[\"读写各自有单独的锁\",{\"1\":{\"344\":1}}],[\"读写分离\",{\"1\":{\"313\":1}}],[\"读写分离容器\",{\"1\":{\"313\":1}}],[\"读取springmvc的核心配置文件的位置和名称\",{\"1\":{\"2759\":1}}],[\"读取了几行数据\",{\"1\":{\"2692\":1}}],[\"读取初始化参数\",{\"1\":{\"2049\":1}}],[\"读取web\",{\"1\":{\"2003\":1}}],[\"读取域\",{\"1\":{\"1917\":1,\"1921\":1,\"1925\":1}}],[\"读取cookie\",{\"1\":{\"1892\":1}}],[\"读取配置信息\",{\"1\":{\"1829\":1}}],[\"读取\",{\"1\":{\"510\":1}}],[\"读取流中的数据\",{\"1\":{\"509\":1}}],[\"读取线程名字\",{\"1\":{\"456\":1}}],[\"读取指定类型数据\",{\"1\":{\"509\":1,\"510\":1}}],[\"读取指定char长度的字符\",{\"1\":{\"405\":2}}],[\"读取指定长度的字符\",{\"1\":{\"404\":1}}],[\"读取一个字符\",{\"1\":{\"404\":1,\"405\":1}}],[\"读取数据时\",{\"1\":{\"245\":1}}],[\"读取当前项目目录下src文件夹中的main\",{\"1\":{\"114\":2}}],[\"耗时\",{\"1\":{\"309\":3,\"898\":1}}],[\"吞吐量concurrenthashmap替代\",{\"1\":{\"308\":1}}],[\"涉及方法\",{\"1\":{\"304\":1}}],[\"涉及行业包含金融\",{\"1\":{\"61\":1}}],[\"恢复性等等都无可挑剔\",{\"1\":{\"919\":1}}],[\"恢复\",{\"1\":{\"302\":1}}],[\"撤销它已做的操作\",{\"1\":{\"2715\":1}}],[\"撤销授权\",{\"0\":{\"1117\":1}}],[\"撤销修改\",{\"1\":{\"743\":1}}],[\"撤销后\",{\"1\":{\"737\":1}}],[\"撤销暂存区的文件\",{\"1\":{\"737\":1}}],[\"撤销暂存区文件\",{\"0\":{\"737\":1}}],[\"撤销\",{\"0\":{\"740\":1,\"743\":1},\"1\":{\"302\":2}}],[\"按对象进入缓存的顺序来移除它们\",{\"1\":{\"2481\":1}}],[\"按需修改\",{\"1\":{\"2290\":1}}],[\"按监听的事件划分\",{\"0\":{\"2069\":1}}],[\"按监听的对象划分\",{\"0\":{\"2068\":1}}],[\"按键修饰符\",{\"0\":{\"1663\":1}}],[\"按win\",{\"1\":{\"674\":1}}],[\"按住\",{\"1\":{\"670\":1}}],[\"按住ctrl+w可以快速选则光标处的单次\",{\"1\":{\"612\":1}}],[\"按ctrl+shift+n查找文件\",{\"1\":{\"609\":1}}],[\"按\",{\"1\":{\"609\":1}}],[\"按两下shift\",{\"1\":{\"605\":1}}],[\"按alt\",{\"1\":{\"604\":2,\"607\":1}}],[\"按位比较\",{\"1\":{\"431\":1}}],[\"按字符读取\",{\"1\":{\"405\":3}}],[\"按钮抬起\",{\"1\":{\"1436\":1}}],[\"按钮按下并抬起\",{\"1\":{\"1436\":1}}],[\"按钮按下\",{\"1\":{\"1436\":1}}],[\"按钮组\",{\"0\":{\"1339\":1}}],[\"按钮叫做控件\",{\"1\":{\"1329\":1}}],[\"按钮\",{\"1\":{\"302\":2}}],[\"按照顺序分别是\",{\"1\":{\"2487\":1}}],[\"按照一对多处理\",{\"1\":{\"2440\":1}}],[\"按照两个一对多处理\",{\"1\":{\"2440\":1}}],[\"按照预先编写好的程序中的业务逻辑进行处理\",{\"1\":{\"2101\":1}}],[\"按照指定的方向\",{\"1\":{\"1517\":1}}],[\"按照指定的周期\",{\"1\":{\"1452\":1}}],[\"按照指定的像素值来滚动内容\",{\"1\":{\"1452\":1}}],[\"按照指定的像素调整窗口的大小\",{\"1\":{\"1452\":1}}],[\"按照路径打开文件\",{\"1\":{\"1191\":1}}],[\"按照字符串fmt对str进行解析\",{\"1\":{\"1093\":1}}],[\"按照字符串fmt格式化日期datetime值\",{\"1\":{\"1093\":1}}],[\"按照到期时间按排序\",{\"1\":{\"356\":1}}],[\"按照比较器规则有序取出\",{\"1\":{\"352\":1}}],[\"按照规则排序输出\",{\"1\":{\"284\":1,\"299\":1}}],[\"按照名字比较\",{\"1\":{\"274\":1}}],[\"按照身高比较\",{\"1\":{\"274\":1}}],[\"按照年龄进行比较\",{\"1\":{\"274\":1}}],[\"按照提示输入相关信息\",{\"1\":{\"92\":1}}],[\"按照代码的顺序进行比对\",{\"1\":{\"27\":1}}],[\"生成之后的代理对象\",{\"1\":{\"2615\":1}}],[\"生成的代理对象只能转换成接口的对象\",{\"1\":{\"2610\":1}}],[\"生成的主键值用我们dept对象那个属性存储\",{\"1\":{\"2409\":1}}],[\"生成带条件的crud\",{\"1\":{\"2501\":1}}],[\"生成基本的crud\",{\"1\":{\"2501\":1}}],[\"生成器\",{\"1\":{\"2179\":1}}],[\"生成java代码\",{\"1\":{\"1966\":1}}],[\"生成向客户端发送的应答\",{\"1\":{\"1935\":1}}],[\"生成字节码\",{\"1\":{\"1931\":1}}],[\"生成\",{\"1\":{\"1930\":1}}],[\"生成动态web内容\",{\"1\":{\"1548\":1}}],[\"生成执行计划\",{\"1\":{\"1250\":1}}],[\"生成初始化的流\",{\"1\":{\"888\":1}}],[\"生成~\",{\"1\":{\"726\":1}}],[\"生成项目报告\",{\"1\":{\"710\":1}}],[\"生产环境版本\",{\"1\":{\"1616\":1}}],[\"生产环境就是将源码进行压缩\",{\"1\":{\"1616\":1}}],[\"生产环境下推荐压缩版\",{\"1\":{\"1546\":1}}],[\"生产环境运行一段阶段较稳定后可以视情况删除\",{\"1\":{\"805\":1}}],[\"生产了\",{\"1\":{\"489\":1,\"490\":1}}],[\"生产者接口\",{\"1\":{\"836\":1}}],[\"生产者\",{\"1\":{\"489\":3,\"490\":3}}],[\"生产者和消费者之间需要保证线程的同步\",{\"1\":{\"487\":1}}],[\"生产\",{\"1\":{\"489\":2,\"490\":2,\"660\":1}}],[\"生活中的案例\",{\"1\":{\"302\":1}}],[\"生命周期阶段\",{\"0\":{\"2570\":1,\"2573\":1}}],[\"生命周期钩子函数\",{\"0\":{\"1730\":1}}],[\"生命周期\",{\"0\":{\"707\":1,\"1727\":1,\"1830\":1,\"1900\":1,\"1916\":1,\"1920\":1,\"1924\":1,\"2006\":1,\"3120\":1},\"1\":{\"116\":1,\"1728\":1}}],[\"钢筋混凝土+牛顿力学\",{\"1\":{\"302\":1}}],[\"卫生间\",{\"1\":{\"302\":1}}],[\"厨房\",{\"1\":{\"302\":1}}],[\"卧室\",{\"1\":{\"302\":1}}],[\"位于engine容器中用于接收请求并进行相应处理的虚拟主机\",{\"1\":{\"1767\":1}}],[\"位于markdown文件开头\",{\"1\":{\"1198\":1}}],[\"位运算进行处理的\",{\"1\":{\"296\":1}}],[\"位置针对上级标签\",{\"1\":{\"1552\":1}}],[\"位置针对整个页面\",{\"1\":{\"1552\":1}}],[\"位置选择器\",{\"0\":{\"1550\":1}}],[\"位置也不是非得放到head标签中不可\",{\"1\":{\"1380\":1}}],[\"位置和本地仓库位置\",{\"1\":{\"676\":1}}],[\"位置上插入字符串\",{\"1\":{\"396\":1}}],[\"位置上替换插入字符串\",{\"1\":{\"395\":1}}],[\"位置\",{\"1\":{\"34\":1,\"925\":1,\"1211\":1,\"1451\":2}}],[\"位置不同\",{\"1\":{\"33\":1}}],[\"头和数据\",{\"1\":{\"1995\":1}}],[\"头尾操作\",{\"1\":{\"357\":1}}],[\"头插法\",{\"1\":{\"294\":1}}],[\"头部\",{\"1\":{\"88\":1}}],[\"老李头\",{\"1\":{\"2250\":1}}],[\"老数组替换为新数组\",{\"1\":{\"294\":1}}],[\"老师3\",{\"1\":{\"147\":1}}],[\"老师2\",{\"1\":{\"147\":1}}],[\"老师1\",{\"1\":{\"147\":1}}],[\"取值使用\",{\"1\":{\"2718\":1}}],[\"取值after|before\",{\"1\":{\"2410\":1}}],[\"取值\",{\"1\":{\"2301\":2}}],[\"取值范围\",{\"1\":{\"942\":1}}],[\"取决于默认区域\",{\"1\":{\"2029\":2}}],[\"取决于hash后\",{\"1\":{\"277\":1}}],[\"取代传统直接在页面上嵌入java程序的做法\",{\"1\":{\"2012\":1}}],[\"取请求中的参数\",{\"0\":{\"1982\":1}}],[\"取消由\",{\"1\":{\"1452\":2}}],[\"取消访问权限\",{\"1\":{\"1266\":1,\"1275\":1}}],[\"取消在当前事务中进行的所有更改\",{\"1\":{\"1255\":1}}],[\"取消自增\",{\"1\":{\"1012\":1}}],[\"取消\",{\"1\":{\"1007\":1}}],[\"取用前几个\",{\"1\":{\"861\":1}}],[\"取小的那个值\",{\"1\":{\"367\":1,\"368\":1}}],[\"取大的那个值\",{\"1\":{\"367\":1,\"368\":1}}],[\"取数据的顺序如下\",{\"1\":{\"1981\":1}}],[\"取数据\",{\"1\":{\"344\":1}}],[\"取数据都用这个锁condition\",{\"1\":{\"330\":1}}],[\"取出记录时\",{\"1\":{\"2287\":1}}],[\"取出连接\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"取出元素\",{\"1\":{\"346\":1}}],[\"取出链中第一个元素\",{\"1\":{\"338\":1}}],[\"取出array数组给current\",{\"1\":{\"316\":1}}],[\"取元素的基本原理\",{\"0\":{\"342\":1}}],[\"取元素用的锁\",{\"1\":{\"338\":1}}],[\"取元素用到的索引\",{\"1\":{\"328\":1,\"330\":1}}],[\"取元素\",{\"0\":{\"333\":1},\"1\":{\"337\":1}}],[\"取模效率不如位运算\",{\"1\":{\"294\":1}}],[\"往往用于实现\",{\"1\":{\"2619\":1}}],[\"往往通过类选择器作用到元素上\",{\"1\":{\"1568\":1}}],[\"往当前节点上添加子节点\",{\"1\":{\"1486\":1}}],[\"往右移动的目的\",{\"1\":{\"294\":1}}],[\"往请求域中存储一个teacher对象\",{\"1\":{\"147\":1}}],[\"扰动的核心思想在于使计算出来的值在保留原有相关特性的基础上\",{\"1\":{\"294\":1}}],[\"扰动函数\",{\"1\":{\"294\":1}}],[\"走addentry添加这个节点的方法\",{\"1\":{\"294\":1}}],[\"走catch中的代码\",{\"1\":{\"20\":1}}],[\"给bean对象赋值\",{\"0\":{\"2556\":1}}],[\"给所有调用者返回缓存对象的相同实例\",{\"1\":{\"2481\":1}}],[\"给所有的对象增加属性和方法\",{\"1\":{\"1425\":1}}],[\"给ajax返回的原始数据进行预处理的函数\",{\"1\":{\"2147\":1,\"2155\":1}}],[\"给定一些可重用的模型和视图\",{\"1\":{\"2040\":1}}],[\"给定file对象\",{\"1\":{\"407\":1}}],[\"给servlet配置映射路径\",{\"1\":{\"1791\":1,\"1795\":1}}],[\"给元素绑定事件\",{\"1\":{\"1572\":1}}],[\"给我们封装了addclassremoveclasstoggleclass\",{\"1\":{\"1568\":1}}],[\"给浮动的父节点加入高度\",{\"1\":{\"1524\":1}}],[\"给浮动的父节点加入一个属性overflow\",{\"1\":{\"1523\":1}}],[\"给页面上的元素先绑定事件\",{\"1\":{\"1429\":1}}],[\"给最终原型增加属性\",{\"1\":{\"1425\":1}}],[\"给person的原型增加一个方法\",{\"1\":{\"1424\":1,\"1425\":1}}],[\"给person的原型增加属性\",{\"1\":{\"1424\":1}}],[\"给person所有的对象增加属性和方法\",{\"1\":{\"1424\":1}}],[\"给对象添加方法\",{\"1\":{\"1419\":1}}],[\"给对象添加属性\",{\"1\":{\"1419\":1}}],[\"给当前项目添加依赖\",{\"1\":{\"1214\":1}}],[\"给user2用户分配对所有数据库操作的权限\",{\"1\":{\"1116\":1}}],[\"给user1用户分配对test这个数据库操作的权限\",{\"1\":{\"1116\":1}}],[\"给哪个用户授权\",{\"1\":{\"1116\":1}}],[\"给mysql服务器配置一个服务项\",{\"1\":{\"922\":1}}],[\"给属性设置值\",{\"1\":{\"588\":1}}],[\"给线程设置名字\",{\"0\":{\"439\":1},\"1\":{\"441\":1}}],[\"给了x\",{\"1\":{\"338\":1}}],[\"给了elements\",{\"1\":{\"316\":1}}],[\"给队列指定长度\",{\"1\":{\"338\":1}}],[\"给table数组赋值\",{\"1\":{\"294\":1}}],[\"给loadfactor赋值\",{\"1\":{\"294\":1}}],[\"给capacity赋值\",{\"1\":{\"294\":1}}],[\"门槛值\",{\"1\":{\"294\":2}}],[\"太行山上\",{\"1\":{\"1549\":1}}],[\"太小容易浪费\",{\"1\":{\"294\":1}}],[\"太大容易引起哈西冲突\",{\"1\":{\"294\":1}}],[\"舍弃原有entry数组等待gc扫描回收\",{\"1\":{\"294\":1}}],[\"获得代理对象\",{\"1\":{\"2615\":1}}],[\"获得bean工厂对象applicationcontext\",{\"1\":{\"2550\":1}}],[\"获得对应的监听器\",{\"1\":{\"2096\":1}}],[\"获得请求产生的时间\",{\"1\":{\"2087\":1}}],[\"获得请求的url\",{\"1\":{\"2087\":1}}],[\"获得请求发出的ip\",{\"1\":{\"2087\":1}}],[\"获得全部的请求头名\",{\"1\":{\"1800\":1,\"1801\":1}}],[\"获得标签内容\",{\"1\":{\"1570\":1}}],[\"获得d1的css样式\",{\"1\":{\"1568\":1}}],[\"获得document对象\",{\"1\":{\"1488\":1}}],[\"获得属性\",{\"1\":{\"1567\":1}}],[\"获得属性值\",{\"1\":{\"1493\":1,\"1494\":1}}],[\"获得该节点所属的文档对象\",{\"1\":{\"1485\":1}}],[\"获得焦点了\",{\"1\":{\"1572\":1}}],[\"获得焦点\",{\"1\":{\"1439\":1}}],[\"获得语句对象\",{\"1\":{\"1215\":1}}],[\"获得链接\",{\"1\":{\"1215\":1}}],[\"获得一个enhancer对象\",{\"1\":{\"2615\":1}}],[\"获得一个请求转发器\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"获得一个类的原型对象可以通过类名\",{\"1\":{\"1423\":1}}],[\"获得一个用来支持分布式事务的连接与获得连接池中的连接是很相似的\",{\"1\":{\"1209\":1}}],[\"获得一个包含value的collection集合\",{\"1\":{\"292\":1}}],[\"获得注解\",{\"1\":{\"591\":1}}],[\"获得锁\",{\"1\":{\"478\":1}}],[\"获得\",{\"1\":{\"321\":1,\"1493\":1}}],[\"获取员工的总数\",{\"1\":{\"2672\":1}}],[\"获取jdbctemplate对象操作数据库\",{\"1\":{\"2667\":1}}],[\"获取json格式\",{\"0\":{\"2132\":1}}],[\"获取目标方法返回值分两步\",{\"1\":{\"2652\":1}}],[\"获取目标方法名称\",{\"1\":{\"2651\":1}}],[\"获取methodinterceptor对象\",{\"1\":{\"2615\":2}}],[\"获取map中使用的长度\",{\"1\":{\"292\":1}}],[\"获取bean对象\",{\"0\":{\"2552\":1}}],[\"获取bucketindex位置上的元素给e\",{\"1\":{\"294\":1}}],[\"获取一个\",{\"1\":{\"2114\":1}}],[\"获取一个请求参数\",{\"0\":{\"136\":1}}],[\"获取xmlhttprequest对象\",{\"1\":{\"2112\":1}}],[\"获取初始化的一些参数\",{\"1\":{\"2049\":1,\"2052\":1}}],[\"获取域对象中的值\",{\"0\":{\"2020\":1}}],[\"获取域名\",{\"1\":{\"502\":1,\"503\":1}}],[\"获取域名地址\",{\"1\":{\"502\":1}}],[\"获取request中的请求参数\",{\"1\":{\"1917\":1,\"1921\":1}}],[\"获取用户名和密码\",{\"1\":{\"1909\":1,\"2056\":1,\"2062\":1}}],[\"获取httpsession中所有的key\",{\"1\":{\"1898\":1}}],[\"获取head指向的对象\",{\"1\":{\"344\":1}}],[\"获取web\",{\"1\":{\"1831\":2}}],[\"获取项目的部署名\",{\"1\":{\"1829\":1}}],[\"获取容器的附加信息\",{\"1\":{\"1829\":2}}],[\"获取复选框\",{\"1\":{\"1801\":1}}],[\"获取请求中所有的数据并存放到一个map结构中\",{\"1\":{\"1801\":1}}],[\"获取请求中所有数据的key\",{\"1\":{\"1801\":1}}],[\"获取请求体信息\",{\"0\":{\"1801\":1}}],[\"获取请求头中所有的key\",{\"1\":{\"1800\":1}}],[\"获取请求头信息\",{\"0\":{\"1800\":1}}],[\"获取请求行\",{\"0\":{\"1799\":1}}],[\"获取元素\",{\"1\":{\"1480\":1}}],[\"获取元素从头部获取\",{\"1\":{\"326\":1}}],[\"获取原型对象\",{\"0\":{\"1423\":1}}],[\"获取长度\",{\"1\":{\"1406\":1}}],[\"获取字段的名字\",{\"1\":{\"1266\":1,\"1275\":1}}],[\"获取字节码对象\",{\"0\":{\"574\":1},\"1\":{\"588\":1}}],[\"获取字节输入流\",{\"1\":{\"509\":1}}],[\"获取字节输出流\",{\"1\":{\"509\":1}}],[\"获取特定时区的时间\",{\"1\":{\"901\":1}}],[\"获取标准时间\",{\"1\":{\"901\":1}}],[\"获取从1970年1月1日\",{\"1\":{\"898\":1}}],[\"获取时间信息\",{\"1\":{\"893\":2}}],[\"获取并行流的两种方法\",{\"1\":{\"886\":1}}],[\"获取并行的stream流\",{\"0\":{\"886\":1}}],[\"获取并移除此队列的头部\",{\"1\":{\"324\":2}}],[\"获取年龄最大值\",{\"1\":{\"880\":1}}],[\"获取最大值\",{\"1\":{\"873\":1}}],[\"获取最大值和最小值\",{\"1\":{\"872\":1}}],[\"获取最后一个元素\",{\"1\":{\"260\":1,\"1551\":1}}],[\"获取的是地址信息\",{\"1\":{\"860\":1}}],[\"获取emp总数\",{\"1\":{\"2667\":1}}],[\"获取entryset集合\",{\"1\":{\"859\":1}}],[\"获取elements的长度\",{\"1\":{\"316\":1}}],[\"获取optional的值\",{\"1\":{\"853\":1}}],[\"获取数组的合\",{\"1\":{\"825\":1,\"826\":1}}],[\"获取数据\",{\"1\":{\"1976\":1}}],[\"获取数据输入流\",{\"1\":{\"509\":1,\"510\":1,\"511\":1,\"512\":1}}],[\"获取数据输出流\",{\"1\":{\"509\":1,\"510\":1}}],[\"获取数据列表2\",{\"1\":{\"109\":1}}],[\"获取数据列表\",{\"1\":{\"106\":1}}],[\"获取到请求方式进行判断如果是get方式请求就执行doget方法\",{\"1\":{\"1826\":1}}],[\"获取到减1的按钮\",{\"1\":{\"1613\":1}}],[\"获取到加1的按钮\",{\"1\":{\"1613\":1}}],[\"获取到h1中的元素\",{\"1\":{\"1613\":1}}],[\"获取到明文密码\",{\"1\":{\"1216\":1}}],[\"获取到全部的内容\",{\"1\":{\"597\":1}}],[\"获取到字节码对象\",{\"1\":{\"585\":1}}],[\"获取类型的全限定名\",{\"1\":{\"2651\":1}}],[\"获取类上的注解\",{\"1\":{\"594\":1,\"904\":1}}],[\"获取类的接口\",{\"1\":{\"594\":1}}],[\"获取所有的省份信息\",{\"1\":{\"2176\":1}}],[\"获取所有的行\",{\"1\":{\"1544\":1}}],[\"获取所有的时区id\",{\"1\":{\"901\":1}}],[\"获取所有的属性\",{\"1\":{\"588\":1}}],[\"获取所有姓张的名字并且长度为3\",{\"1\":{\"856\":1}}],[\"获取所在的包\",{\"1\":{\"594\":1}}],[\"获取父类的接口\",{\"1\":{\"594\":1}}],[\"获取父类的字节码对象\",{\"1\":{\"593\":1,\"594\":1}}],[\"获取接口\",{\"1\":{\"593\":1,\"594\":1}}],[\"获取异常值分两步\",{\"1\":{\"2653\":1}}],[\"获取异常\",{\"1\":{\"591\":1}}],[\"获取参数的方式\",{\"0\":{\"2792\":1}}],[\"获取参数\",{\"1\":{\"2651\":1}}],[\"获取参数类型\",{\"1\":{\"591\":1}}],[\"获取参数列表\",{\"1\":{\"591\":1}}],[\"获取参数时如果队列为空则等待\",{\"1\":{\"323\":1}}],[\"获取返回类型\",{\"1\":{\"591\":1}}],[\"获取返回值\",{\"1\":{\"449\":1,\"450\":1,\"1215\":1}}],[\"获取修饰符\",{\"1\":{\"591\":1,\"2651\":1}}],[\"获取名字\",{\"1\":{\"591\":1}}],[\"获取运行时类中的所有方法\",{\"1\":{\"591\":1}}],[\"获取运行时类的方法还有所有父类中的方法\",{\"1\":{\"591\":1}}],[\"获取运行时类的全部修饰符的构造器\",{\"1\":{\"585\":1}}],[\"获取全部属性\",{\"1\":{\"1266\":1,\"1275\":1}}],[\"获取全部的values集合\",{\"1\":{\"859\":1}}],[\"获取全部的key集合\",{\"1\":{\"859\":1}}],[\"获取全部的方法\",{\"1\":{\"590\":2,\"591\":2}}],[\"获取全部的属性\",{\"1\":{\"588\":1}}],[\"获取全类名\",{\"1\":{\"140\":1}}],[\"获取对象中的name\",{\"1\":{\"854\":1}}],[\"获取对象输出流\",{\"1\":{\"511\":1,\"512\":1,\"513\":1}}],[\"获取对应的名字\",{\"1\":{\"587\":1}}],[\"获取属性和对属性赋值\",{\"1\":{\"588\":1}}],[\"获取属性名字\",{\"1\":{\"587\":1,\"588\":1}}],[\"获取属性的名字\",{\"1\":{\"588\":1}}],[\"获取属性的结构\",{\"1\":{\"588\":1}}],[\"获取属性的类型\",{\"1\":{\"587\":1,\"588\":2}}],[\"获取属性的修饰符\",{\"1\":{\"587\":1,\"588\":2,\"590\":1}}],[\"获取属性列表\",{\"1\":{\"587\":2,\"588\":2}}],[\"获取编译后的指定构造器\",{\"1\":{\"585\":1}}],[\"获取带参的构造器\",{\"1\":{\"585\":1}}],[\"获取构造器和创建对象\",{\"1\":{\"585\":1}}],[\"获取构造器列表\",{\"1\":{\"584\":2,\"585\":2}}],[\"获取方法上的注解\",{\"1\":{\"904\":1}}],[\"获取方法的结构\",{\"1\":{\"591\":1}}],[\"获取方法修饰符\",{\"1\":{\"591\":1}}],[\"获取方法和调用方法\",{\"1\":{\"591\":1}}],[\"获取方法注解\",{\"1\":{\"590\":1,\"591\":1}}],[\"获取方法异常类型\",{\"1\":{\"590\":1,\"591\":1}}],[\"获取方法参数类型列表\",{\"1\":{\"590\":1,\"591\":1}}],[\"获取方法参数列表\",{\"1\":{\"590\":1,\"591\":1}}],[\"获取方法名\",{\"1\":{\"590\":1,\"591\":2,\"2651\":1}}],[\"获取方法返回类型\",{\"1\":{\"590\":1,\"591\":1}}],[\"获取方法\",{\"1\":{\"568\":1}}],[\"获取服务器返回状态\",{\"1\":{\"511\":1,\"512\":1,\"513\":1}}],[\"获取输入框中的内容\",{\"1\":{\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"获取输入流\",{\"1\":{\"509\":1,\"510\":1,\"511\":1,\"512\":1}}],[\"获取输入的天\",{\"1\":{\"376\":1}}],[\"获取输出流\",{\"1\":{\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1}}],[\"获取socket\",{\"1\":{\"509\":1}}],[\"获取socket对象\",{\"1\":{\"509\":1}}],[\"获取session对象的其他属性\",{\"1\":{\"1898\":1}}],[\"获取session\",{\"1\":{\"1898\":1}}],[\"获取session中的数据\",{\"1\":{\"1898\":1}}],[\"获取servlet对象的方式\",{\"1\":{\"1831\":1}}],[\"获取servlet相关信息\",{\"1\":{\"1817\":1}}],[\"获取serversocket对象\",{\"1\":{\"509\":1}}],[\"获取set<map\",{\"1\":{\"291\":1}}],[\"获取inetaddress对象\",{\"1\":{\"505\":1}}],[\"获取ip地址\",{\"1\":{\"502\":1,\"503\":1}}],[\"获取端口号\",{\"1\":{\"505\":1}}],[\"获取地址名\",{\"1\":{\"505\":1}}],[\"获取计算机名地址\",{\"1\":{\"502\":1}}],[\"获取本地地址\",{\"1\":{\"502\":2}}],[\"获取这个月第一天是周几\",{\"1\":{\"376\":1}}],[\"获取当月日期的最小天数\",{\"1\":{\"375\":1}}],[\"获取当月日期的最大天数\",{\"1\":{\"375\":1}}],[\"获取当前\",{\"1\":{\"2287\":1}}],[\"获取当前项目的部署名\",{\"1\":{\"1831\":1}}],[\"获取当前时间\",{\"1\":{\"901\":1}}],[\"获取当前的session对象\",{\"1\":{\"1897\":1}}],[\"获取当前的时间\",{\"1\":{\"893\":2}}],[\"获取当前的日期\",{\"1\":{\"893\":1}}],[\"获取当前类的接口\",{\"1\":{\"594\":1}}],[\"获取当前正在执行的线程\",{\"1\":{\"456\":1}}],[\"获取当前子线程的名字\",{\"1\":{\"439\":1}}],[\"获取当前主线程的名字线程对象\",{\"1\":{\"439\":1}}],[\"获取当前这个月最大天数\",{\"1\":{\"376\":1}}],[\"获取当前是周几\",{\"1\":{\"375\":1}}],[\"获取当前日\",{\"1\":{\"375\":1}}],[\"获取当前月\",{\"1\":{\"375\":1}}],[\"获取当前年\",{\"1\":{\"375\":1}}],[\"获取当前元素\",{\"1\":{\"220\":1}}],[\"获取long类型\",{\"1\":{\"370\":1}}],[\"获取人数\",{\"1\":{\"356\":1}}],[\"获取队列头\",{\"1\":{\"327\":3}}],[\"获取老数组的长度\",{\"1\":{\"316\":1}}],[\"获取老的value\",{\"1\":{\"294\":1}}],[\"获取链表上元素给e\",{\"1\":{\"294\":1}}],[\"获取链表的头元素\",{\"1\":{\"262\":1}}],[\"获取哈希码\",{\"1\":{\"294\":1}}],[\"获取\",{\"1\":{\"292\":1,\"357\":1,\"760\":1,\"856\":1}}],[\"获取包含map的key的set集合\",{\"1\":{\"292\":1}}],[\"获取value的collection集合\",{\"1\":{\"291\":1}}],[\"获取value\",{\"1\":{\"291\":1,\"292\":1}}],[\"获取key的set集合\",{\"1\":{\"291\":1}}],[\"获取外部比较器\",{\"1\":{\"275\":1}}],[\"获取集合中元素数量\",{\"1\":{\"263\":1}}],[\"获取集合使用元素的大小\",{\"1\":{\"219\":1}}],[\"获取指定key的值\",{\"1\":{\"1279\":1}}],[\"获取指定的时间\",{\"1\":{\"893\":2}}],[\"获取指定的方法\",{\"1\":{\"590\":2,\"591\":5}}],[\"获取指定的属性\",{\"1\":{\"587\":2,\"588\":4}}],[\"获取指定的无参构造器\",{\"1\":{\"585\":1}}],[\"获取指定的构造器\",{\"1\":{\"584\":2,\"585\":1}}],[\"获取指定地址的ip地址\",{\"1\":{\"502\":1}}],[\"获取指定目录内存在的所有目录或者文件的file对象数组\",{\"1\":{\"389\":1,\"390\":1}}],[\"获取指定目录内存在的所有目录或者文件的名字的数组\",{\"1\":{\"389\":1,\"390\":1}}],[\"获取指定元素的\",{\"1\":{\"1452\":1}}],[\"获取指定元素最后一次下标\",{\"1\":{\"260\":1}}],[\"获取指定元素下标\",{\"1\":{\"260\":1}}],[\"获取指定下标的元素\",{\"1\":{\"251\":2}}],[\"获取第一个元素\",{\"1\":{\"260\":1,\"1551\":1}}],[\"获取头元素\",{\"1\":{\"260\":1}}],[\"获取多个请求参数\",{\"0\":{\"137\":1}}],[\"返回viod\",{\"0\":{\"2859\":1}}],[\"返回value1\",{\"1\":{\"1094\":1}}],[\"返回404\",{\"1\":{\"2788\":1}}],[\"返回多结果值<t>\",{\"1\":{\"2673\":1}}],[\"返回是以二进制的形式\",{\"1\":{\"2651\":1}}],[\"返回通知\",{\"0\":{\"2641\":1},\"1\":{\"2623\":1,\"2648\":1,\"2652\":1}}],[\"返回单个对象\",{\"0\":{\"2343\":1},\"1\":{\"2342\":1}}],[\"返回map集合列表\",{\"1\":{\"2257\":1}}],[\"返回内容格式\",{\"1\":{\"2161\":1,\"2165\":1}}],[\"返回js脚本\",{\"1\":{\"2155\":1}}],[\"返回json数据不需要在方法前面加\",{\"1\":{\"2878\":1}}],[\"返回json数据\",{\"1\":{\"2141\":1,\"2155\":1}}],[\"返回处理后的数据\",{\"1\":{\"2147\":1}}],[\"返回纯文本\",{\"1\":{\"2155\":1}}],[\"返回纯文本字符串\",{\"1\":{\"2141\":1}}],[\"返回纯文本javascript代码\",{\"1\":{\"2141\":1}}],[\"返回纯文本html信息\",{\"1\":{\"2141\":1,\"2155\":1}}],[\"返回过滤器的所有初始化参数的名字的枚举集合\",{\"1\":{\"2048\":1}}],[\"返回定名称的初始化参数的值\",{\"1\":{\"2048\":1}}],[\"返回字符串告诉dispatcherservlet跳转的路径\",{\"1\":{\"2866\":1}}],[\"返回字符串类型\",{\"1\":{\"1898\":1}}],[\"返回字符串str的md5值\",{\"1\":{\"1095\":1}}],[\"返回字符串str的加密版本\",{\"1\":{\"1095\":1}}],[\"返回字符串s最右边的n个字符\",{\"1\":{\"1091\":1}}],[\"返回字符串s最左边的n个字符\",{\"1\":{\"1091\":1}}],[\"返回字符串s的字节数\",{\"1\":{\"1087\":1}}],[\"返回字符串s的字符数\",{\"1\":{\"1087\":1}}],[\"返回枚举类型\",{\"1\":{\"1898\":1}}],[\"返回枚举类对象的数组\",{\"1\":{\"562\":1}}],[\"返回object\",{\"1\":{\"1898\":1}}],[\"返回cookie数组\",{\"1\":{\"1888\":1}}],[\"返回到源servlet的服务方法中\",{\"1\":{\"1858\":1}}],[\"返回servlet上下文对象的引用\",{\"1\":{\"2048\":1}}],[\"返回servlet容器所支持servlet的主版本号\",{\"1\":{\"1829\":1}}],[\"返回servlet容器的名称和版本号\",{\"1\":{\"1829\":2}}],[\"返回str重复n次的结果\",{\"1\":{\"1091\":1}}],[\"返回web服务器处理http协议的连接器所监听的端口\",{\"1\":{\"1799\":2}}],[\"返回web服务器的ip地址\",{\"1\":{\"1799\":2}}],[\"返回发出请求的客户机的ip地址\",{\"1\":{\"1799\":2}}],[\"返回请求行中指定资源部分\",{\"1\":{\"1799\":2}}],[\"返回客户端浏览器发出请求时的完整url\",{\"1\":{\"1799\":2}}],[\"返回最顶层的父窗口\",{\"1\":{\"1451\":1}}],[\"返回对象的map集合\",{\"0\":{\"2349\":1},\"1\":{\"2342\":1}}],[\"返回对象的list集合\",{\"0\":{\"2346\":1},\"1\":{\"2342\":1}}],[\"返回对当前窗口的引用\",{\"1\":{\"1451\":1}}],[\"返回对创建此窗口的窗口的引用\",{\"1\":{\"1451\":1}}],[\"返回相对于屏幕窗口的y坐标\",{\"1\":{\"1451\":2}}],[\"返回相对于屏幕窗口的x坐标\",{\"1\":{\"1451\":2}}],[\"返回父窗口\",{\"1\":{\"1451\":1}}],[\"返回窗口的外部宽度\",{\"1\":{\"1451\":1}}],[\"返回窗口的外部高度\",{\"1\":{\"1451\":1}}],[\"返回窗口的文档显示区的宽度\",{\"1\":{\"1451\":1}}],[\"返回窗口的文档显示区的高度\",{\"1\":{\"1451\":1}}],[\"返回窗口中所有命名的框架\",{\"1\":{\"1451\":1}}],[\"返回窗口是否已被关闭\",{\"1\":{\"1451\":1}}],[\"返回1970年1月1日午夜到指定日期\",{\"1\":{\"1415\":1}}],[\"返回10以内的随机数\",{\"1\":{\"450\":1}}],[\"返回本地时间与格林威治标准时间\",{\"1\":{\"1415\":1}}],[\"返回角的正切\",{\"1\":{\"1411\":1}}],[\"返回数据库帮我们生成的主键\",{\"1\":{\"2409\":1}}],[\"返回数的平方根\",{\"1\":{\"1411\":1}}],[\"返回数的正弦\",{\"1\":{\"1411\":1}}],[\"返回数的自然对数\",{\"1\":{\"1411\":1}}],[\"返回数的余弦\",{\"1\":{\"1411\":1}}],[\"返回数字x截断为y位小数的结果\",{\"1\":{\"1092\":1}}],[\"返回从\",{\"1\":{\"1411\":1}}],[\"返回从字符串s的index位置其len个字符\",{\"1\":{\"1091\":1}}],[\"返回圆周率\",{\"1\":{\"1411\":1}}],[\"返回以\",{\"1\":{\"1411\":2}}],[\"返回算术常量\",{\"1\":{\"1411\":1}}],[\"返回某个字符串对象的原始值\",{\"1\":{\"1405\":1}}],[\"返回某个指定的字符串值在字符串中首次出现的位置\",{\"1\":{\"1405\":1}}],[\"返回在指定的位置的字符的\",{\"1\":{\"1405\":1}}],[\"返回在指定位置的字符\",{\"1\":{\"1405\":1}}],[\"返回在与此锁相关的给定条件上等待的线程数的估计值\",{\"1\":{\"478\":1}}],[\"返回t\",{\"1\":{\"1094\":1}}],[\"返回time1\",{\"1\":{\"1093\":1}}],[\"返回与给定日期时间相差interval时间段的日期时间\",{\"1\":{\"1093\":1}}],[\"返回date1\",{\"1\":{\"1093\":1}}],[\"返回月份\",{\"1\":{\"1093\":1}}],[\"返回星期\",{\"1\":{\"1093\":1}}],[\"返回周几\",{\"1\":{\"1093\":1}}],[\"返回今天是一周的第几天\",{\"1\":{\"1093\":1}}],[\"返回一个html在浏览器中显示\",{\"1\":{\"2101\":1}}],[\"返回一个string\",{\"1\":{\"1801\":1}}],[\"返回一个\",{\"1\":{\"1452\":1}}],[\"返回一个数的双曲正切函数值\",{\"1\":{\"1411\":1}}],[\"返回一个字符串\",{\"1\":{\"1405\":1}}],[\"返回一个表示指定int值的integer实例\",{\"1\":{\"363\":1}}],[\"返回一年中的第几周\",{\"1\":{\"1093\":1}}],[\"返回具体的时间值\",{\"1\":{\"1093\":1}}],[\"返回当前登录用户名\",{\"1\":{\"1095\":1}}],[\"返回当前数据库版本\",{\"1\":{\"1095\":1}}],[\"返回当前数据库名\",{\"1\":{\"1095\":1}}],[\"返回当前系统日期时间\",{\"1\":{\"1093\":1}}],[\"返回当前时间\",{\"1\":{\"1093\":1}}],[\"返回当前日期\",{\"1\":{\"1093\":1}}],[\"返回参数x的四舍五入的有y位的小数的值\",{\"1\":{\"1092\":1}}],[\"返回0~1的随机值\",{\"1\":{\"1092\":1}}],[\"返回xml数据\",{\"1\":{\"2155\":1}}],[\"返回xml文档\",{\"1\":{\"2141\":1}}],[\"返回x的y次方\",{\"1\":{\"1092\":1}}],[\"返回x的平方根\",{\"1\":{\"1092\":1}}],[\"返回x的绝对值\",{\"1\":{\"1092\":1}}],[\"返回x\",{\"1\":{\"1092\":1}}],[\"返回小于x的最大整数值\",{\"1\":{\"1092\":1}}],[\"返回大于x的最小整数值\",{\"1\":{\"1092\":1}}],[\"返回条件不符合value结果任意之一的值\",{\"1\":{\"1034\":1}}],[\"返回条件符合value结果任意之一的值\",{\"1\":{\"1034\":1}}],[\"返回条件符合value1到value2之间的数据\",{\"1\":{\"1033\":1}}],[\"返回符合条件的数据\",{\"1\":{\"864\":1}}],[\"返回long类型数据\",{\"1\":{\"863\":1}}],[\"返回状态\",{\"1\":{\"511\":1,\"512\":1}}],[\"返回等待获取此锁的线程数的估计值\",{\"1\":{\"478\":1}}],[\"返回读取的字符数\",{\"1\":{\"404\":1}}],[\"返回读取的字符\",{\"1\":{\"404\":1}}],[\"返回的类型\",{\"1\":{\"2433\":1}}],[\"返回的是一个对象\",{\"1\":{\"1704\":1}}],[\"返回的是一个新的string\",{\"1\":{\"395\":1,\"396\":1}}],[\"返回的元素是object\",{\"1\":{\"879\":1}}],[\"返回的值在\",{\"1\":{\"371\":1}}],[\"返回带正号的\",{\"1\":{\"382\":1}}],[\"返回自\",{\"1\":{\"371\":1}}],[\"返回结果给客户端\",{\"1\":{\"1250\":1}}],[\"返回结果\",{\"1\":{\"364\":1,\"2788\":1}}],[\"返回\",{\"1\":{\"363\":1,\"431\":4,\"1411\":12,\"1415\":6,\"1787\":2}}],[\"返回修改后head指针指向的节点的值\",{\"1\":{\"342\":1}}],[\"返回null\",{\"1\":{\"337\":1,\"2380\":1}}],[\"返回false\",{\"1\":{\"337\":1}}],[\"返回元素\",{\"1\":{\"333\":1}}],[\"返回底层数组\",{\"1\":{\"316\":1}}],[\"返回底层array数组\",{\"1\":{\"316\":1}}],[\"返回添加结果\",{\"1\":{\"303\":1}}],[\"返回第一个下标\",{\"1\":{\"300\":1}}],[\"返回int类型数组的坐标\",{\"1\":{\"294\":1}}],[\"返回老的value\",{\"1\":{\"294\":1}}],[\"返回如果存在的话\",{\"1\":{\"292\":1}}],[\"返回值是object列表\",{\"1\":{\"2244\":1}}],[\"返回值是map列表\",{\"1\":{\"2243\":1}}],[\"返回值是执行该操作所影响的行数\",{\"1\":{\"1257\":1}}],[\"返回值类型为要return的数据类型\",{\"1\":{\"2876\":1}}],[\"返回值类型较固定\",{\"1\":{\"2371\":1}}],[\"返回值类型仍然是stream类型的方法\",{\"1\":{\"861\":1}}],[\"返回值类型不再是stream类型的方法\",{\"1\":{\"861\":1}}],[\"返回值类型\",{\"1\":{\"591\":1,\"817\":1,\"820\":1,\"861\":1,\"1368\":1,\"2633\":1}}],[\"返回值类型返回值说明\",{\"1\":{\"537\":1}}],[\"返回值\",{\"1\":{\"34\":1,\"1486\":1,\"2781\":1}}],[\"动画结束后要执行的方法\",{\"1\":{\"1591\":1}}],[\"动画内容\",{\"1\":{\"1591\":1}}],[\"动画执行结束了\",{\"1\":{\"1591\":1}}],[\"动画执行结束\",{\"1\":{\"1588\":1}}],[\"动画功能弱\",{\"1\":{\"1539\":1}}],[\"动画效果的使用\",{\"0\":{\"1587\":1,\"3109\":1},\"1\":{\"58\":1}}],[\"动态生成的\",{\"1\":{\"2607\":1}}],[\"动态生成数据\",{\"1\":{\"1790\":1}}],[\"动态代理面向接口的动态代理\",{\"1\":{\"2610\":1}}],[\"动态代理可以针对于一些不特定的类或者一些不特定的方法进行代理\",{\"1\":{\"2607\":1}}],[\"动态代理\",{\"0\":{\"2607\":1},\"1\":{\"2607\":2,\"2658\":1}}],[\"动态sql\",{\"0\":{\"2260\":1}}],[\"动态style\",{\"0\":{\"1651\":1}}],[\"动态引入\",{\"1\":{\"1962\":2}}],[\"动态资源\",{\"1\":{\"1785\":1}}],[\"动态class\",{\"0\":{\"1650\":1}}],[\"动态网页技术标准\",{\"1\":{\"1548\":1}}],[\"动态决定表单能否提交\",{\"1\":{\"1439\":1}}],[\"动态增加或减少池中的连接数\",{\"1\":{\"1272\":1}}],[\"动态语言\",{\"0\":{\"572\":1}}],[\"动态语音与静态语音\",{\"0\":{\"571\":1}}],[\"动态的绑定到我们的匿名内部类\",{\"1\":{\"288\":1}}],[\"右对齐\",{\"1\":{\"1182\":2}}],[\"右边有左边没有的使用null填充\",{\"1\":{\"1063\":1}}],[\"右边表中的所有数据\",{\"1\":{\"1063\":1}}],[\"右边表中与左表关联数据\",{\"1\":{\"1060\":1}}],[\"右外连接\",{\"0\":{\"1062\":1}}],[\"右表特有的数据\",{\"1\":{\"1064\":1}}],[\"右表\",{\"1\":{\"1061\":1}}],[\"右键都可以开打git的命令行窗口\",{\"1\":{\"726\":1}}],[\"右键\",{\"1\":{\"634\":1,\"1671\":1}}],[\"右键虚拟机\",{\"1\":{\"48\":1}}],[\"右\",{\"1\":{\"288\":3}}],[\"根文件\",{\"0\":{\"1690\":1}}],[\"根\",{\"1\":{\"288\":3}}],[\"根据deptno查询\",{\"1\":{\"2667\":1}}],[\"根据datatype的配置处理之后的数据\",{\"1\":{\"2155\":1}}],[\"根据empno查询\",{\"1\":{\"2667\":1}}],[\"根据接口类型获取bean\",{\"1\":{\"2656\":1,\"2657\":1,\"2658\":1,\"2659\":1}}],[\"根据接口定义的api去操作数据库就可以了\",{\"1\":{\"1262\":1}}],[\"根据类型获取bean\",{\"1\":{\"2655\":2,\"2656\":1,\"2657\":1,\"2658\":1,\"2659\":1}}],[\"根据类型注入\",{\"1\":{\"2578\":1,\"2579\":1}}],[\"根据属性名称注入依赖\",{\"1\":{\"2593\":1}}],[\"根据属性数据类型自动装配\",{\"1\":{\"2593\":1}}],[\"根据目标id值和属性值注入\",{\"1\":{\"2578\":1,\"2579\":1}}],[\"根据\",{\"1\":{\"2503\":1}}],[\"根据特殊需求指定局部日志级别\",{\"1\":{\"2487\":1}}],[\"根据项目编号查询项目信息\",{\"1\":{\"2429\":1}}],[\"根据部门号查询部门信息及该部门的所有员工信息\",{\"1\":{\"2426\":1}}],[\"根据编号查询员工信息及所在的部门信息\",{\"1\":{\"2423\":1}}],[\"根据map删除\",{\"0\":{\"2210\":1}}],[\"根据map查询\",{\"0\":{\"2205\":1}}],[\"根据id批量删除\",{\"0\":{\"2209\":1}}],[\"根据id单一删除\",{\"0\":{\"2208\":1}}],[\"根据id查询\",{\"0\":{\"2204\":1}}],[\"根据id获取\",{\"0\":{\"1488\":1}}],[\"根据需求实现对应接口\",{\"1\":{\"2074\":1}}],[\"根据需要检查httpservletresponse\",{\"1\":{\"1995\":1}}],[\"根据需要检查httpservletrequest\",{\"1\":{\"1995\":1}}],[\"根据需要调整完成后点击\",{\"1\":{\"789\":1}}],[\"根据用户请求来选择要调用哪个模型来处理业务\",{\"1\":{\"2034\":1}}],[\"根据用户的请求url地址\",{\"1\":{\"1717\":1}}],[\"根据获取当前httpsession的sessionid\",{\"1\":{\"1898\":1}}],[\"根据请求路径进行匹配\",{\"1\":{\"1840\":1}}],[\"根据请求头名或者请求头对应的值\",{\"1\":{\"1800\":1,\"1801\":1}}],[\"根据请求头中的key获取对应的value\",{\"1\":{\"1800\":1}}],[\"根据name获取\",{\"0\":{\"1491\":1}}],[\"根据标签获取\",{\"0\":{\"1490\":1}}],[\"根据cache接口中方法的声明我们能够看到\",{\"1\":{\"2489\":1}}],[\"根据class获取\",{\"0\":{\"1489\":1}}],[\"根据collection获取\",{\"0\":{\"859\":1}}],[\"根据html代码结构特点\",{\"1\":{\"1478\":1}}],[\"根据本地时间格式\",{\"1\":{\"1415\":3}}],[\"根据本地主机的语言环境把字符串转换为大写\",{\"1\":{\"1405\":1}}],[\"根据本地主机的语言环境把字符串转换为小写\",{\"1\":{\"1405\":1}}],[\"根据世界时\",{\"1\":{\"1415\":1}}],[\"根据世界时设置\",{\"1\":{\"1415\":6}}],[\"根据世界时返回\",{\"1\":{\"1415\":5}}],[\"根据世界时从\",{\"1\":{\"1415\":4}}],[\"根据索引获取字符\",{\"1\":{\"1406\":1}}],[\"根据月份输出该月的季节和应季活动\",{\"1\":{\"1366\":1}}],[\"根据位置不同\",{\"1\":{\"1069\":1}}],[\"根据数据的组织结构不同\",{\"1\":{\"916\":1}}],[\"根据数据的自然倒序\",{\"1\":{\"868\":1}}],[\"根据数据的自然排序\",{\"1\":{\"868\":1}}],[\"根据我们的localdate对象获取对应的日期信息\",{\"1\":{\"893\":1}}],[\"根据年龄分组\",{\"1\":{\"881\":1}}],[\"根据姓名分组\",{\"1\":{\"881\":1}}],[\"根据姓名创建student对象\",{\"1\":{\"876\":2}}],[\"根据比较器排序\",{\"1\":{\"868\":1}}],[\"根据自然规则排序\",{\"1\":{\"868\":1}}],[\"根据stream的of方法获取\",{\"0\":{\"860\":1}}],[\"根据一个类型返回另一个类型的接口\",{\"1\":{\"841\":1}}],[\"根据key删除httpsession中的数据\",{\"1\":{\"1898\":1}}],[\"根据key删除全局容器中的value\",{\"1\":{\"1829\":1}}],[\"根据key获取httpsession中的数据\",{\"1\":{\"1898\":1}}],[\"根据key获取指定value\",{\"1\":{\"1801\":1}}],[\"根据key\",{\"1\":{\"279\":1}}],[\"根据参数名获取多个<\",{\"1\":{\"137\":1}}],[\"根据参数名获取一个<\",{\"1\":{\"136\":1}}],[\"根据package\",{\"1\":{\"94\":1}}],[\"根据计划\",{\"1\":{\"71\":1}}],[\"左上>右下\",{\"1\":{\"1533\":1,\"1534\":1}}],[\"左或右发生移动\",{\"1\":{\"1517\":1}}],[\"左对齐\",{\"1\":{\"1182\":2}}],[\"左表\",{\"1\":{\"1064\":1}}],[\"左表特有的数据\",{\"1\":{\"1061\":1}}],[\"左边表中与右表关联数据\",{\"1\":{\"1063\":1}}],[\"左边表中的所有数据\",{\"1\":{\"1060\":1}}],[\"左边有右边没有的使用null填充\",{\"1\":{\"1060\":1}}],[\"左外连接\",{\"0\":{\"1059\":1}}],[\"左\",{\"1\":{\"288\":3}}],[\"升序\",{\"1\":{\"284\":1,\"299\":1,\"1039\":1}}],[\"临界值为什么是8\",{\"1\":{\"311\":1}}],[\"临界值\",{\"1\":{\"280\":1}}],[\"|connection\",{\"1\":{\"2301\":2}}],[\"|居左|居中|局右|\",{\"1\":{\"1182\":1}}],[\"|左对齐|居中|右对齐|\",{\"1\":{\"1182\":1}}],[\"|=\",{\"1\":{\"294\":1}}],[\"|\",{\"1\":{\"279\":1,\"810\":1,\"1182\":4,\"1584\":2,\"1928\":2,\"2298\":3,\"2299\":6,\"2301\":6}}],[\"||or\",{\"1\":{\"1985\":1}}],[\"||\",{\"1\":{\"279\":4,\"281\":1,\"288\":1,\"294\":1,\"846\":1,\"875\":1,\"1031\":1,\"1360\":1,\"1366\":2,\"1579\":2,\"1586\":1,\"1989\":1,\"2063\":2,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2509\":1,\"2633\":1}}],[\"依据\",{\"1\":{\"2690\":1}}],[\"依靠\",{\"1\":{\"1527\":1}}],[\"依赖关系\",{\"1\":{\"2756\":1}}],[\"依赖关系图如下\",{\"1\":{\"2538\":1}}],[\"依赖注入\",{\"0\":{\"2551\":1},\"1\":{\"2551\":1}}],[\"依赖mybatis核心包\",{\"1\":{\"2500\":1}}],[\"依赖\",{\"1\":{\"2185\":1,\"2748\":1}}],[\"依赖于日历的插件\",{\"1\":{\"1191\":2}}],[\"依赖排除\",{\"1\":{\"697\":1}}],[\"依赖的排除\",{\"0\":{\"697\":1}}],[\"依赖的传递性\",{\"0\":{\"693\":1}}],[\"依赖范围\",{\"0\":{\"688\":1}}],[\"依赖管理\",{\"0\":{\"686\":1}}],[\"依赖包会被添加到dependencies节点下\",{\"1\":{\"94\":1}}],[\"依次类推\",{\"1\":{\"1040\":1}}],[\"依次类推正\",{\"1\":{\"280\":1}}],[\"依次和该链表的每一个元素比较过程中\",{\"1\":{\"279\":1}}],[\"依次和该链表的每一个元素比较后\",{\"1\":{\"279\":1}}],[\"时排队的分类列表\",{\"1\":{\"2301\":1}}],[\"时的\",{\"1\":{\"2301\":1}}],[\"时所排除的表名列表\",{\"1\":{\"2301\":1}}],[\"时所包含的表名列表\",{\"1\":{\"2301\":1}}],[\"时代标志\",{\"1\":{\"2030\":1}}],[\"时机\",{\"1\":{\"1822\":1}}],[\"时禁用\",{\"1\":{\"979\":1}}],[\"时启用\",{\"1\":{\"979\":1}}],[\"时会自动触发自动提示功能\",{\"1\":{\"603\":1}}],[\"时区操作\",{\"1\":{\"901\":1}}],[\"时区处理麻烦\",{\"1\":{\"891\":1}}],[\"时区\",{\"1\":{\"374\":2,\"2030\":1}}],[\"时分秒\",{\"1\":{\"372\":1,\"892\":2}}],[\"时间点\",{\"1\":{\"2690\":1,\"2691\":1,\"2692\":1}}],[\"时间的计算方式是根据最后一次请求时间作为起始时间\",{\"1\":{\"1899\":1}}],[\"时间的方式多样\",{\"1\":{\"972\":1}}],[\"时间部分就变成了17\",{\"1\":{\"942\":1}}],[\"时间部分就变成了15\",{\"1\":{\"942\":1}}],[\"时间校正器\",{\"0\":{\"900\":1},\"1\":{\"900\":2}}],[\"时间线\",{\"1\":{\"898\":1}}],[\"时间戳改变了\",{\"1\":{\"1750\":1}}],[\"时间戳\",{\"1\":{\"892\":1,\"898\":2}}],[\"时间格式化\",{\"1\":{\"891\":1}}],[\"时间到\",{\"1\":{\"356\":1}}],[\"时间到了以后就不阻塞了\",{\"1\":{\"337\":1}}],[\"时间\",{\"1\":{\"321\":1,\"1198\":1,\"2487\":1}}],[\"时间复杂度\",{\"1\":{\"223\":1}}],[\"时\",{\"1\":{\"304\":1,\"809\":1,\"2029\":2,\"2452\":1}}],[\"时候\",{\"1\":{\"279\":1,\"570\":1}}],[\"辅助变量\",{\"1\":{\"279\":1}}],[\"赋给了treeset的底层的treemap的属性this\",{\"1\":{\"288\":1}}],[\"赋给\",{\"1\":{\"279\":1}}],[\"赋值只是将引用地址的值进行赋值传递\",{\"1\":{\"1705\":1}}],[\"赋值运算符\",{\"1\":{\"1360\":1}}],[\"赋值的对象的属性和被赋值的属性一致\",{\"1\":{\"75\":1}}],[\"赋值与被赋值的类型一致\",{\"1\":{\"75\":1}}],[\"去里面的处理器映射器列表和处理器适配器列表中\",{\"1\":{\"2777\":1}}],[\"去当前项目下找aaa了\",{\"1\":{\"1330\":1}}],[\"去掉字符串s结尾处的s1\",{\"1\":{\"1091\":1}}],[\"去掉字符串s开始处的s1\",{\"1\":{\"1091\":1}}],[\"去掉字符串s开始与结尾的s1\",{\"1\":{\"1091\":1}}],[\"去掉字符串s开始与结尾的空格\",{\"1\":{\"1090\":1}}],[\"去掉字符串s右侧的空格\",{\"1\":{\"1090\":1}}],[\"去掉字符串s左侧的空格\",{\"1\":{\"1090\":1}}],[\"去重distinct过滤字段要少\",{\"1\":{\"1148\":1}}],[\"去重针对某列\",{\"1\":{\"1026\":1}}],[\"去重查询\",{\"0\":{\"1026\":1}}],[\"去除后缀\",{\"1\":{\"2455\":1}}],[\"去除前缀\",{\"1\":{\"2455\":1}}],[\"去除两端空格\",{\"1\":{\"1677\":1}}],[\"去除字符串两边的空白\",{\"1\":{\"1405\":1}}],[\"去除笛卡尔积\",{\"1\":{\"1055\":1}}],[\"去除重复\",{\"1\":{\"857\":1}}],[\"去除空格\",{\"1\":{\"431\":1}}],[\"去本地仓库中查找指定的jar包文件\",{\"1\":{\"693\":1}}],[\"去\",{\"1\":{\"660\":1}}],[\"去做一些操作\",{\"1\":{\"567\":1}}],[\"去调用即可\",{\"1\":{\"300\":1}}],[\"去计算该key应该存放到table表的哪个索引位置\",{\"1\":{\"279\":1}}],[\"去替换\",{\"1\":{\"130\":1}}],[\"大概率是因为程序运行出现了问题\",{\"1\":{\"2715\":1}}],[\"大概在76行左右\",{\"1\":{\"1154\":1}}],[\"大概在63行左右\",{\"1\":{\"1154\":1}}],[\"大幅度减少了在开发过程中对数据库操作的编码\",{\"1\":{\"2530\":1}}],[\"大学oa\",{\"1\":{\"2417\":1}}],[\"大黄\",{\"1\":{\"1972\":1,\"1980\":1,\"1981\":1}}],[\"大可不必\",{\"1\":{\"1682\":1}}],[\"大桌面显示器\",{\"1\":{\"1600\":1}}],[\"大大减少了代码量\",{\"1\":{\"2441\":1}}],[\"大大降低数据库在单位时间内的查询工作量\",{\"1\":{\"2434\":1}}],[\"大大降低了使用javascript的难度\",{\"1\":{\"1541\":1}}],[\"大大提高了查询效率\",{\"1\":{\"1127\":1}}],[\"大型编程语言\",{\"1\":{\"1376\":1}}],[\"大约在冬季\",{\"1\":{\"1366\":1}}],[\"大量使用了设计模式\",{\"1\":{\"2528\":1}}],[\"大量删除数据时\",{\"1\":{\"1148\":1}}],[\"大量降低数据库的io磁盘读写成本\",{\"1\":{\"1127\":1}}],[\"大整数值\",{\"1\":{\"939\":3}}],[\"大家好\",{\"1\":{\"1494\":1}}],[\"大家都知道\",{\"1\":{\"658\":1}}],[\"大家一起抢剩余的10张票\",{\"1\":{\"442\":1}}],[\"大于等于\",{\"1\":{\"1030\":1}}],[\"大于\",{\"1\":{\"294\":1,\"364\":1,\"1030\":1}}],[\"大于你传进来的initialcapacity\",{\"1\":{\"294\":1}}],[\"大小写敏感\",{\"1\":{\"1156\":1}}],[\"大小写不敏感\",{\"1\":{\"1156\":1}}],[\"大小写处理\",{\"0\":{\"1089\":1}}],[\"大小写转换\",{\"1\":{\"431\":1}}],[\"大小\",{\"1\":{\"279\":1,\"939\":1,\"940\":1,\"941\":1}}],[\"大数据进阶\",{\"0\":{\"2942\":1},\"1\":{\"1\":1}}],[\"避免直接编码造成模块之间的耦合度高\",{\"1\":{\"2522\":1}}],[\"避免大量debug信息的干扰\",{\"1\":{\"2306\":1}}],[\"避免缓存出现问题\",{\"1\":{\"2285\":1}}],[\"避免user对象中没有被查询到的列值为null\",{\"1\":{\"2257\":1}}],[\"避免一个过滤器做太多的业务处理\",{\"1\":{\"2046\":1}}],[\"避免在where中对字段进行表达式操作\",{\"1\":{\"1148\":1}}],[\"避免在where子句中使用or\",{\"1\":{\"1148\":1}}],[\"避免隐式转换导致索引失效\",{\"1\":{\"1148\":1}}],[\"避免使用\",{\"1\":{\"1148\":2}}],[\"避免冲突\",{\"0\":{\"753\":1}}],[\"避免每次add都commit产生版本信息爆炸\",{\"1\":{\"738\":1}}],[\"避免嵌套同步\",{\"1\":{\"484\":1}}],[\"避免死锁\",{\"1\":{\"484\":1}}],[\"避免当再次准备放置时\",{\"1\":{\"334\":1}}],[\"避免碰撞\",{\"1\":{\"279\":1}}],[\"避免了几乎所有的\",{\"1\":{\"2196\":1}}],[\"避免了创建多个tcp连接带来的网络开销\",{\"1\":{\"166\":1}}],[\"避免了连接建立和释放的开销\",{\"1\":{\"164\":1}}],[\"^^\",{\"1\":{\"2560\":2}}],[\"^2\",{\"1\":{\"1687\":1}}],[\"^3\",{\"1\":{\"1687\":1}}],[\"^1\",{\"1\":{\"1585\":1}}],[\"^1d499b\",{\"1\":{\"1168\":1}}],[\"^1d499b|使用\",{\"1\":{\"1161\":1}}],[\"^jiaozhu\",{\"1\":{\"1183\":1}}],[\"^c83780\",{\"1\":{\"1172\":1}}],[\"^c83780|嵌入\",{\"1\":{\"1162\":1}}],[\"^f261c0\",{\"1\":{\"1161\":1}}],[\"^=\",{\"1\":{\"294\":2}}],[\"^\",{\"1\":{\"279\":1,\"294\":4,\"1031\":1,\"1584\":1,\"1585\":3,\"1586\":3,\"2560\":2}}],[\"该传播级别特征是\",{\"1\":{\"2733\":1}}],[\"该传播级别的特点是\",{\"1\":{\"2730\":1}}],[\"该操作序列中的多个操作要么都做\",{\"1\":{\"2683\":1}}],[\"该注解有三个子注解\",{\"1\":{\"2587\":1}}],[\"该注解只能用于方法\",{\"1\":{\"541\":1}}],[\"该属性会在旧插件移除后一同移除\",{\"1\":{\"2285\":1}}],[\"该函数是简写的\",{\"1\":{\"2161\":1,\"2163\":1,\"2165\":1}}],[\"该函数有3个参数\",{\"1\":{\"2145\":1}}],[\"该值适合大多数应用场景\",{\"1\":{\"2155\":1}}],[\"该值用来替代在\",{\"1\":{\"2150\":1}}],[\"该值大于等于\",{\"1\":{\"382\":1}}],[\"该默认值适合大多数应用场合\",{\"1\":{\"2146\":1}}],[\"该时间对整个web项目中的所有httpsession对象有效\",{\"1\":{\"1899\":1}}],[\"该响应结果的含义为\",{\"1\":{\"1863\":1}}],[\"该附加信息表示作为对下载文件的一个标识字段\",{\"1\":{\"1807\":2}}],[\"该模式描述在搜索文本时要匹配的一个或多个字符串\",{\"1\":{\"1582\":1}}],[\"该示例的缺点主要在于对于邮箱如果采用传统方式进行验证\",{\"1\":{\"1580\":1}}],[\"该集合是\",{\"1\":{\"1451\":1}}],[\"该事件在表单元素的内容改变时触发\",{\"1\":{\"1438\":1}}],[\"该地址就叫url\",{\"1\":{\"1324\":1}}],[\"该对象值用在\",{\"1\":{\"2638\":1}}],[\"该对象的创建和销毁都是比较消耗系统资源的\",{\"1\":{\"1271\":1}}],[\"该对象能获取自动生成的键\",{\"1\":{\"1255\":1}}],[\"该对象内置了很多处理的方法\",{\"1\":{\"384\":1}}],[\"该语句立即发送给dbms进行编译\",{\"1\":{\"1250\":1}}],[\"该resultset将被自动关闭\",{\"1\":{\"1223\":1}}],[\"该类内部有一个静态代码块\",{\"1\":{\"1217\":1}}],[\"该类中包含了所有的时区信息\",{\"1\":{\"901\":1}}],[\"该表保存了主键与索引字段\",{\"1\":{\"1128\":1}}],[\"该用户可以操作哪个数据库的哪些表\",{\"1\":{\"1116\":1}}],[\"该用户的登陆密码\",{\"1\":{\"1115\":1}}],[\"该子查询实际上并不返回任何数据\",{\"1\":{\"1073\":1}}],[\"该命令的作用就是将数据库mysql\",{\"1\":{\"926\":1}}],[\"该接口接收一个predicate接口的参数作为筛选的条件\",{\"1\":{\"864\":1}}],[\"该方法在filter的生命周期中仅执行一次\",{\"1\":{\"2005\":1}}],[\"该方法可以读取web\",{\"1\":{\"1829\":2,\"1833\":2}}],[\"该方法可以将一个相对路径转换为绝对路径\",{\"1\":{\"1829\":1}}],[\"该方法返回一个map\",{\"1\":{\"1801\":1}}],[\"该方法返回一个枚举类型\",{\"1\":{\"1801\":1}}],[\"该方法返回枚举类型\",{\"1\":{\"1800\":1}}],[\"该方法已经使用了\",{\"1\":{\"1452\":1}}],[\"该方法用来检查\",{\"1\":{\"1452\":1}}],[\"该方法根据实验证明有效\",{\"1\":{\"1183\":1}}],[\"该方法需要一个function接口参数\",{\"1\":{\"867\":1}}],[\"该方法接收一个consumer接口\",{\"1\":{\"862\":1}}],[\"该方法会执行hash\",{\"1\":{\"279\":1}}],[\"该版本上线后\",{\"1\":{\"805\":1}}],[\"该字符串包含字符数组参数的子数组中的字符\",{\"1\":{\"404\":1}}],[\"该队列会根据比较器\",{\"1\":{\"352\":1}}],[\"该怎么执行就怎么执行\",{\"1\":{\"19\":1}}],[\"红色框内是归dom\",{\"1\":{\"1447\":1}}],[\"红色表示新建文件或者新修改的文件\",{\"1\":{\"734\":1}}],[\"红黑树\",{\"1\":{\"279\":1,\"280\":1}}],[\"红茶\",{\"1\":{\"65\":1}}],[\"看起来代码比较复杂\",{\"1\":{\"2260\":1}}],[\"看似是页面\",{\"1\":{\"1929\":1}}],[\"看两端的变量类型\",{\"1\":{\"1362\":1}}],[\"看到冲突提示\",{\"0\":{\"786\":1}}],[\"看到的形态就剩\",{\"1\":{\"561\":1}}],[\"看到的是\",{\"1\":{\"130\":1}}],[\"看不到这个\",{\"1\":{\"732\":1}}],[\"看透\",{\"1\":{\"570\":1}}],[\"看这个索引位置是否已经存放的有元素\",{\"1\":{\"279\":1}}],[\"​window\",{\"1\":{\"1546\":1}}],[\"​不可以通过事务回滚\",{\"1\":{\"976\":1}}],[\"​\",{\"1\":{\"274\":1,\"475\":1}}],[\"核心包\",{\"1\":{\"2629\":1}}],[\"核心jar\",{\"1\":{\"2538\":1}}],[\"核心jar包\",{\"1\":{\"2267\":1,\"2374\":1}}],[\"核心模块\",{\"1\":{\"2532\":2}}],[\"核心容器\",{\"0\":{\"2532\":1}}],[\"核心标签库\",{\"1\":{\"2013\":1}}],[\"核心组件\",{\"0\":{\"1762\":1}}],[\"核心代码路径\",{\"1\":{\"1687\":1}}],[\"核心api和扩展api\",{\"1\":{\"1209\":1}}],[\"核心元素\",{\"0\":{\"330\":1}}],[\"核心元素都是数组和使用长度计数\",{\"1\":{\"258\":1}}],[\"核心\",{\"0\":{\"273\":1}}],[\"存在slf4j时\",{\"1\":{\"2487\":1}}],[\"存在问题\",{\"0\":{\"2116\":1}}],[\"存在的问题\",{\"1\":{\"1271\":1}}],[\"存在和消亡的过程\",{\"1\":{\"452\":1}}],[\"存在iterator\",{\"1\":{\"268\":1}}],[\"存入一个计数器\",{\"1\":{\"376\":1}}],[\"存放于内存\",{\"1\":{\"2090\":1}}],[\"存放在pagecontext作用域\",{\"1\":{\"2025\":1}}],[\"存放对象必须是比较对象\",{\"1\":{\"351\":1}}],[\"存放的元素\",{\"1\":{\"282\":1}}],[\"存放的结点类型是linkedhashmap$entry\",{\"1\":{\"282\":1}}],[\"存元素\",{\"0\":{\"332\":1}}],[\"存数据\",{\"1\":{\"330\":1}}],[\"存储到model中\",{\"1\":{\"2928\":1,\"2929\":1}}],[\"存储到application域中\",{\"1\":{\"2926\":1}}],[\"存储到session域中\",{\"1\":{\"2926\":1}}],[\"存储到request域中\",{\"1\":{\"2926\":1}}],[\"存储格式化日志变量的范围\",{\"1\":{\"2030\":1}}],[\"存储格式化日期的变量名\",{\"1\":{\"2030\":1}}],[\"存储格式化数字的变量\",{\"1\":{\"2029\":1}}],[\"存储引擎访问物理文件并返回结果\",{\"1\":{\"1250\":1}}],[\"存储\",{\"1\":{\"294\":1}}],[\"存储过程以及高级映射\",{\"1\":{\"2196\":1}}],[\"存储过程执行效率之所高\",{\"1\":{\"1146\":1}}],[\"存储过程的优点\",{\"0\":{\"1146\":1}}],[\"存储过程就是数据库中保存\",{\"1\":{\"1145\":1}}],[\"存储过程\",{\"0\":{\"1144\":1,\"3071\":1},\"1\":{\"52\":1,\"934\":1,\"983\":1,\"1147\":1}}],[\"健壮性考虑\",{\"1\":{\"263\":1,\"328\":1,\"338\":1}}],[\"空值不等同于空字符串\",{\"1\":{\"1357\":1}}],[\"空值处理\",{\"0\":{\"1037\":1}}],[\"空\",{\"0\":{\"1357\":1}}],[\"空间\",{\"1\":{\"1517\":1}}],[\"空间是\",{\"1\":{\"1128\":1}}],[\"空间复杂度\",{\"1\":{\"223\":1}}],[\"空格分隔\",{\"1\":{\"1195\":1}}],[\"空格处理\",{\"0\":{\"1090\":1}}],[\"空格\",{\"1\":{\"621\":1,\"1665\":1}}],[\"空参构造器\",{\"1\":{\"576\":1}}],[\"空闲一段时间之后需要关闭之\",{\"1\":{\"355\":1}}],[\"空队列\",{\"1\":{\"344\":1}}],[\"空构造器\",{\"1\":{\"263\":1}}],[\"指在一个事务内多次读同一数据\",{\"1\":{\"2691\":1}}],[\"指\",{\"1\":{\"2530\":1}}],[\"指明集合中元素的类型\",{\"1\":{\"2437\":1}}],[\"指其支撑性\",{\"1\":{\"2197\":1}}],[\"指其约束性\",{\"1\":{\"2197\":1}}],[\"指发送一个请求\",{\"1\":{\"2104\":1}}],[\"指示\",{\"1\":{\"2607\":1}}],[\"指示符\",{\"1\":{\"2030\":1}}],[\"指示浏览器在哪里找到样式表\",{\"1\":{\"1292\":1}}],[\"指令\",{\"1\":{\"1958\":1}}],[\"指令标签\",{\"1\":{\"1962\":1}}],[\"指令标签的语法\",{\"0\":{\"1957\":1}}],[\"指令标签是jsp页面上的一种特殊标签\",{\"1\":{\"1956\":1}}],[\"指细粒度信息事件\",{\"1\":{\"1284\":1}}],[\"指报告信息\",{\"1\":{\"1284\":1}}],[\"指运行环境潜藏着危害info\",{\"1\":{\"1284\":1}}],[\"指虽有错误\",{\"1\":{\"1284\":1}}],[\"指出现非常严重的错误事件\",{\"1\":{\"1284\":1}}],[\"指针所指的数据行叫做当前数据行\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"指的是一个操作序列\",{\"1\":{\"2683\":1}}],[\"指的是参数名\",{\"1\":{\"2556\":1}}],[\"指的是你的项目名字\",{\"1\":{\"1330\":1}}],[\"指的是\",{\"1\":{\"1325\":1}}],[\"指的是数据库应用程序的使用者\",{\"1\":{\"913\":1}}],[\"指的是以一定格式存放\",{\"1\":{\"909\":1}}],[\"指value数组中被使用的长\",{\"1\":{\"392\":1}}],[\"指向datasourcetransactionmanager事务管理器\",{\"1\":{\"2706\":1}}],[\"指向事务管理器datasourcetransactionmanager\",{\"1\":{\"2701\":1}}],[\"指向数据源\",{\"1\":{\"2701\":1}}],[\"指向具体的接口\",{\"1\":{\"2374\":1}}],[\"指向object的原型对象\",{\"1\":{\"1425\":1}}],[\"指向他们的原型\",{\"1\":{\"1424\":1}}],[\"指向此文件的所有传入链接的数组\",{\"1\":{\"1198\":1}}],[\"指向主表的主键\",{\"1\":{\"1050\":1}}],[\"指向与主键的关系\",{\"1\":{\"991\":1}}],[\"指向head的next\",{\"1\":{\"338\":1}}],[\"指向的node节点的key是同一个对象\",{\"1\":{\"279\":1}}],[\"指向下一个元素地址\",{\"1\":{\"263\":1}}],[\"指定过滤器映射路径\",{\"1\":{\"2807\":1}}],[\"指定返回的值\",{\"1\":{\"2648\":1}}],[\"指定返回的类型\",{\"1\":{\"879\":1}}],[\"指定切点为dao包下所有的类中的add开头的方法\",{\"1\":{\"2634\":1}}],[\"指定切点为dao包下所有的类中的add的方法\",{\"1\":{\"2634\":1}}],[\"指定切点为dao包下所有的类中的所有的方法\",{\"1\":{\"2634\":1}}],[\"指定切点为userdaoimpl\",{\"1\":{\"2634\":2}}],[\"指定其映射某个jdbc类型\",{\"1\":{\"2509\":1}}],[\"指定打印日志的appender\",{\"1\":{\"2487\":1}}],[\"指定任何一个日志级别都只打印当前级别和后面级别的日志\",{\"1\":{\"2487\":1}}],[\"指定缓存管理器的具体类型\",{\"0\":{\"2486\":1}}],[\"指定的association和collection元素中配置fetchtype属性\",{\"1\":{\"2434\":1}}],[\"指定结果集字段和实体类属性的映射关系\",{\"1\":{\"2420\":1}}],[\"指定和数据表主键字段对应的标识属性\",{\"1\":{\"2420\":1}}],[\"指定使用的日志框架\",{\"1\":{\"2374\":1}}],[\"指定通过jmx暴露属性时的前缀\",{\"1\":{\"2301\":1}}],[\"指定是否每次是增加\",{\"1\":{\"2301\":1}}],[\"指定是否执行el表达式\",{\"1\":{\"1959\":1}}],[\"指定\",{\"1\":{\"2301\":2,\"2855\":1}}],[\"指定应用的日志拦截模块\",{\"1\":{\"2301\":1}}],[\"指定输出目录\",{\"1\":{\"2293\":1}}],[\"指定输出artifacts的目录为tomcat的webapps中的demo目录\",{\"1\":{\"1780\":1}}],[\"指定编译jdk版本\",{\"1\":{\"2267\":1}}],[\"指定编译类型\",{\"1\":{\"2267\":1}}],[\"指定字段\",{\"0\":{\"2230\":1}}],[\"指定主键\",{\"0\":{\"2226\":1}}],[\"指定表名\",{\"0\":{\"2223\":1}}],[\"指定日志输出的位置\",{\"1\":{\"2487\":1}}],[\"指定日志输出样式\",{\"1\":{\"2301\":1}}],[\"指定日志输出\",{\"0\":{\"2193\":1},\"1\":{\"2193\":1}}],[\"指定跨域回调函数名\",{\"1\":{\"2155\":1}}],[\"指定可以作为前缀或后缀的字符\",{\"1\":{\"2029\":1}}],[\"指定一个自定义的格式化模式用与输出\",{\"1\":{\"2029\":1}}],[\"指定存放的域\",{\"1\":{\"2022\":1}}],[\"指定放数据的域\",{\"1\":{\"2018\":1}}],[\"指定域中取出数据\",{\"0\":{\"1980\":1}}],[\"指定跳转的页面\",{\"1\":{\"1960\":1}}],[\"指定错误页\",{\"1\":{\"1960\":1}}],[\"指定jsp页面是否使用session\",{\"1\":{\"1959\":1}}],[\"指定servlet从哪一个类继承\",{\"1\":{\"1959\":1}}],[\"指定当前页为异常提示页\",{\"1\":{\"1960\":1}}],[\"指定当前页面是否可以作为另一个jsp页面的错误处理页\",{\"1\":{\"1959\":1}}],[\"指定当前jsp页面的mime类型和字符编码\",{\"1\":{\"1959\":1}}],[\"指定当jsp页面发生异常时需要转向的错误处理页面\",{\"1\":{\"1959\":1}}],[\"指定当所有可以使用的处理请求的线程数都被使用时\",{\"1\":{\"1757\":1}}],[\"指定out对象使用缓冲区的大小\",{\"1\":{\"1959\":1}}],[\"指定服务器的\",{\"1\":{\"1216\":1}}],[\"指定该用户在哪个主机上可以登陆\",{\"1\":{\"1115\":1}}],[\"指定新名\",{\"0\":{\"1080\":1}}],[\"指定插入的列\",{\"0\":{\"970\":1}}],[\"指定转换\",{\"1\":{\"897\":1}}],[\"指定格式\",{\"1\":{\"897\":1}}],[\"指定模块工程的相对路径即可\",{\"1\":{\"718\":1}}],[\"指定客户端的接口\",{\"1\":{\"515\":1,\"516\":1,\"517\":1,\"518\":1}}],[\"指定时间阻塞式获取\",{\"1\":{\"327\":1}}],[\"指定时间等阻塞添加\",{\"1\":{\"327\":1}}],[\"指定位置新增\",{\"1\":{\"251\":2}}],[\"指定父类泛型\",{\"1\":{\"239\":1}}],[\"指定请求和响应遵循的缓存机制\",{\"1\":{\"177\":1}}],[\"证明已经不是链中第一个节点了\",{\"1\":{\"262\":1}}],[\"证明你添加的元素是第一个节点\",{\"1\":{\"262\":1}}],[\"计数\",{\"1\":{\"1041\":1}}],[\"计数器++\",{\"1\":{\"1893\":2}}],[\"计数器\",{\"1\":{\"262\":1,\"338\":1}}],[\"计算哈希值作为key\",{\"1\":{\"2473\":1}}],[\"计算日期差\",{\"1\":{\"899\":4}}],[\"计算日期时间的差\",{\"0\":{\"899\":1}}],[\"计算机基础知识\",{\"0\":{\"2939\":1},\"1\":{\"1\":1}}],[\"三明治\",{\"1\":{\"2609\":1,\"2612\":1,\"2615\":1}}],[\"三方缓存\",{\"0\":{\"2482\":1}}],[\"三目运算符\",{\"0\":{\"1990\":1},\"1\":{\"1985\":1,\"1990\":1}}],[\"三\",{\"1\":{\"1718\":1}}],[\"三者各有分工\",{\"1\":{\"1377\":1}}],[\"三大基石\",{\"1\":{\"1324\":1}}],[\"三个部分\",{\"1\":{\"2034\":1}}],[\"三个方法\",{\"1\":{\"1568\":1,\"1570\":1}}],[\"三个索引\",{\"1\":{\"1135\":1}}],[\"三个属性\",{\"1\":{\"262\":1}}],[\"三范式\",{\"0\":{\"1045\":1}}],[\"三次握手\",{\"0\":{\"497\":1}}],[\"三级联动案例开发\",{\"0\":{\"2173\":1,\"3153\":1},\"1\":{\"213\":1}}],[\"个数必须和某个构造方法的参数个数向对应\",{\"1\":{\"2556\":1}}],[\"个数\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"个列来创建\",{\"1\":{\"1601\":1}}],[\"个表的乘积数\",{\"1\":{\"1054\":1}}],[\"个表的所有行进行组合\",{\"1\":{\"1054\":1}}],[\"个登陆的用户\",{\"1\":{\"513\":1}}],[\"个别数据被重复修改\",{\"1\":{\"305\":1}}],[\"个\",{\"1\":{\"261\":1}}],[\"添加配置文件\",{\"0\":{\"2895\":1}}],[\"添加配置类springconfig\",{\"1\":{\"2649\":1}}],[\"添加<mvc\",{\"1\":{\"2789\":1}}],[\"添加user\",{\"1\":{\"2599\":1}}],[\"添加user实体类\",{\"0\":{\"2190\":1}}],[\"添加controller层的扫描器\",{\"1\":{\"2900\":1}}],[\"添加context标签指向配置文件\",{\"1\":{\"2584\":1}}],[\"添加context名称空间\",{\"1\":{\"2584\":1}}],[\"添加class值\",{\"1\":{\"1568\":1}}],[\"添加p6spy的配置文件spy\",{\"1\":{\"2297\":1}}],[\"添加gson\",{\"1\":{\"2128\":1}}],[\"添加线程安全编码处理\",{\"1\":{\"1824\":1}}],[\"添加v\",{\"1\":{\"1645\":1}}],[\"添加事件\",{\"1\":{\"1572\":1}}],[\"添加内部标签\",{\"1\":{\"1571\":1}}],[\"添加属性\",{\"1\":{\"1567\":1}}],[\"添加jar包\",{\"1\":{\"1264\":1}}],[\"添加自增\",{\"1\":{\"1012\":1}}],[\"添加非空约束\",{\"1\":{\"1007\":1}}],[\"添加一个format格式化的方法\",{\"1\":{\"1417\":1}}],[\"添加一个字段\",{\"0\":{\"958\":1},\"1\":{\"958\":1}}],[\"添加一个元素时\",{\"1\":{\"279\":1}}],[\"添加一张表\",{\"1\":{\"956\":1}}],[\"添加同步锁\",{\"1\":{\"889\":1}}],[\"添加和提交合并命令\",{\"1\":{\"738\":1}}],[\"添加和取出的顺序不一致\",{\"1\":{\"276\":1}}],[\"添加未存在文件会出错\",{\"1\":{\"736\":1}}],[\"添加项目中所有文件\",{\"1\":{\"736\":1}}],[\"添加依赖\",{\"0\":{\"2292\":1},\"1\":{\"680\":1,\"688\":1,\"714\":1,\"715\":1}}],[\"添加maven环境变量\",{\"1\":{\"674\":1}}],[\"添加\",{\"1\":{\"357\":1,\"1219\":1,\"1253\":1,\"1264\":1}}],[\"添加null元素\",{\"1\":{\"327\":1,\"337\":1}}],[\"添加不存在的元素\",{\"1\":{\"315\":1}}],[\"添加重复的元素\",{\"1\":{\"315\":1}}],[\"添加方法\",{\"1\":{\"315\":1,\"319\":1}}],[\"添加实例\",{\"1\":{\"279\":1}}],[\"添加的元素e\",{\"1\":{\"263\":1}}],[\"添加元素\",{\"1\":{\"337\":2}}],[\"添加元素时队列如果满载则等待\",{\"1\":{\"323\":1}}],[\"添加元素操作\",{\"1\":{\"263\":1}}],[\"添加元素方法\",{\"1\":{\"262\":1}}],[\"添加元素在尾端\",{\"1\":{\"260\":1}}],[\"添加是添加在双向链表的尾部\",{\"1\":{\"261\":1}}],[\"添加到第一个字段\",{\"1\":{\"958\":1}}],[\"添加到暂存区\",{\"0\":{\"736\":1,\"778\":1},\"1\":{\"731\":1}}],[\"添加到末尾\",{\"1\":{\"260\":2}}],[\"添加到头部\",{\"1\":{\"260\":2}}],[\"唯一索引\",{\"1\":{\"1129\":1}}],[\"唯一索引名就是唯一约束名一样\",{\"1\":{\"992\":1}}],[\"唯一性约束名\",{\"1\":{\"989\":1,\"995\":1,\"1001\":1,\"1008\":1,\"1013\":1,\"1017\":1,\"1021\":1}}],[\"唯一约束可以是某一和列的值唯一\",{\"1\":{\"992\":1}}],[\"唯一约束\",{\"0\":{\"990\":1},\"1\":{\"981\":1}}],[\"唯一的\",{\"1\":{\"683\":1,\"685\":1,\"985\":1}}],[\"唯一的区别就是offer没有带索引参数的方法\",{\"1\":{\"260\":1}}],[\"唯一在hash表的基础上又添加了链表的结构\",{\"1\":{\"297\":1}}],[\"唯一\",{\"1\":{\"276\":1,\"278\":1,\"283\":1,\"290\":1,\"298\":1,\"937\":1}}],[\"唯一没有后续的元素an\",{\"1\":{\"226\":1}}],[\"唯一没有直接前驱的元素a0\",{\"1\":{\"226\":1}}],[\"检索\",{\"1\":{\"1447\":1}}],[\"检索但不删除此列表的最后一个元素\",{\"1\":{\"260\":1}}],[\"检索但不删除此列表的第一个元素\",{\"1\":{\"260\":1}}],[\"检索但不删除此列表的头部\",{\"1\":{\"260\":1}}],[\"检测安装是否成功\",{\"0\":{\"923\":1}}],[\"检查配置\",{\"1\":{\"2752\":1}}],[\"检查项目\",{\"0\":{\"2752\":1}}],[\"检查项目配置\",{\"0\":{\"2743\":1,\"2883\":1},\"1\":{\"1777\":1,\"2883\":1}}],[\"检查并运行项目\",{\"0\":{\"2751\":1}}],[\"检查目录是否正常标记\",{\"1\":{\"2745\":1}}],[\"检查目录标记\",{\"0\":{\"2745\":1,\"2886\":1},\"1\":{\"2886\":1}}],[\"检查是启动注解处理\",{\"1\":{\"2743\":1}}],[\"检查maven的相关配置与仓库地址\",{\"1\":{\"2743\":1}}],[\"检查约束\",{\"0\":{\"1014\":1},\"1\":{\"981\":1}}],[\"检查电脑家目录下是否已经生成了ssh\",{\"1\":{\"763\":1}}],[\"检查java\",{\"1\":{\"674\":1}}],[\"检查程序的功能是否符合它的功能说明\",{\"1\":{\"529\":1}}],[\"检查线程是否执行完毕\",{\"1\":{\"305\":1,\"306\":1}}],[\"检查开启nat模式\",{\"1\":{\"48\":1}}],[\"检查异常\",{\"1\":{\"30\":2,\"33\":1}}],[\"检查异常checkedexception\",{\"1\":{\"29\":1}}],[\"没法使用model传递域中的数据\",{\"1\":{\"2929\":1}}],[\"没使用锁\",{\"1\":{\"258\":1}}],[\"没有在视图解析器中配置前后缀的\",{\"1\":{\"2866\":1,\"2867\":1}}],[\"没有写对应的返回值\",{\"1\":{\"2859\":1}}],[\"没有就算了\",{\"1\":{\"2736\":1}}],[\"没有就非事务执行\",{\"1\":{\"2735\":2}}],[\"没有开启二级缓存\",{\"1\":{\"2472\":1}}],[\"没有提供数据库操作的接口\",{\"1\":{\"2371\":1}}],[\"没有提供对应的方法或者属性来获取\",{\"1\":{\"228\":1}}],[\"没有被配置\",{\"1\":{\"2334\":1}}],[\"没有登录过\",{\"1\":{\"2063\":1}}],[\"没有连接符的功能\",{\"1\":{\"1987\":1}}],[\"没有指定宽度的网格列将自动设置为等宽与等高列\",{\"1\":{\"1601\":1}}],[\"没有换行效果\",{\"1\":{\"1512\":1}}],[\"没有过期时间\",{\"1\":{\"1451\":1}}],[\"没有设置alt属性\",{\"1\":{\"1309\":1}}],[\"没有必要每次都创建新的\",{\"1\":{\"1271\":1}}],[\"没有添加jar包或者com\",{\"1\":{\"1216\":1}}],[\"没有添加成功\",{\"1\":{\"337\":1}}],[\"没有出现任何问题\",{\"1\":{\"1108\":1}}],[\"没有出现票卖超的情况\",{\"1\":{\"442\":1}}],[\"没有删除\",{\"1\":{\"979\":1}}],[\"没有时区的支持\",{\"1\":{\"891\":1}}],[\"没有经历过的人或许体会不到这种折磨\",{\"1\":{\"650\":1}}],[\"没有任何业务含义\",{\"1\":{\"466\":1}}],[\"没有锁\",{\"1\":{\"313\":1}}],[\"没有索引\",{\"1\":{\"276\":1}}],[\"没有实现同步\",{\"1\":{\"259\":1}}],[\"没有警告\",{\"1\":{\"114\":1}}],[\"没有简写\",{\"1\":{\"78\":1}}],[\"没有捕获成功\",{\"1\":{\"20\":1}}],[\"又称按需加载\",{\"1\":{\"2434\":1}}],[\"又由于v\",{\"1\":{\"1638\":1}}],[\"又不会占用过多的系统资源\",{\"1\":{\"920\":1}}],[\"又或者有同名的类没有你要的方法\",{\"1\":{\"650\":1}}],[\"又扩展了\",{\"1\":{\"357\":1}}],[\"又实现了这个接口\",{\"1\":{\"294\":1}}],[\"又继承了abreastmap实现类\",{\"1\":{\"293\":1}}],[\"又继承了abreastlist实现类\",{\"1\":{\"252\":1}}],[\"又能在页面中包含动态数据部分\",{\"1\":{\"119\":1}}],[\"测试关掉浏览器后\",{\"1\":{\"2926\":1}}],[\"测试直接访问\",{\"1\":{\"2926\":2,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"测试正常\",{\"1\":{\"2790\":1}}],[\"测试结果\",{\"0\":{\"2787\":1}}],[\"测试demo\",{\"0\":{\"2747\":1}}],[\"测试事务\",{\"0\":{\"2703\":1,\"2708\":1,\"2712\":1}}],[\"测试指定注解\",{\"0\":{\"2592\":1}}],[\"测试指定名称\",{\"0\":{\"2591\":1}}],[\"测试基本注册\",{\"0\":{\"2590\":1}}],[\"测试lazy\",{\"1\":{\"2555\":1}}],[\"测试location\",{\"1\":{\"1462\":1}}],[\"测试scope\",{\"1\":{\"2554\":1}}],[\"测试name\",{\"1\":{\"2553\":1}}],[\"测试集合\",{\"0\":{\"2467\":1}}],[\"测试数组\",{\"0\":{\"2466\":1}}],[\"测试方法\",{\"1\":{\"2435\":1,\"2574\":1}}],[\"测试方法执行后执行\",{\"1\":{\"525\":1}}],[\"测试方法执行前先执行\",{\"1\":{\"525\":1}}],[\"测试单元\",{\"1\":{\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2459\":1}}],[\"测试效果\",{\"1\":{\"2176\":1,\"2612\":1}}],[\"测试跨域限制\",{\"0\":{\"2169\":1}}],[\"测试框架\",{\"1\":{\"1683\":1}}],[\"测试按钮\",{\"1\":{\"1454\":1,\"1455\":1,\"1456\":1}}],[\"测试文字\",{\"1\":{\"1442\":1}}],[\"测试程序\",{\"0\":{\"1243\":1}}],[\"测试程序和服务器运行时都需要用到\",{\"1\":{\"689\":1}}],[\"测试远程访问\",{\"1\":{\"928\":1}}],[\"测试人员完全不考虑程序内部的逻辑结构和内部特性\",{\"1\":{\"529\":1}}],[\"测试分类\",{\"0\":{\"528\":1}}],[\"测试类\",{\"0\":{\"2386\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1},\"1\":{\"523\":1,\"525\":1,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2649\":1,\"2672\":1,\"2673\":1,\"2674\":1,\"2678\":1,\"2679\":1,\"2680\":1,\"2697\":1}}],[\"测试不用在main方法中执行\",{\"1\":{\"520\":1}}],[\"测试的优点\",{\"1\":{\"520\":1}}],[\"测试的概念\",{\"0\":{\"526\":1,\"3032\":1},\"1\":{\"42\":1}}],[\"测试案例\",{\"0\":{\"356\":1}}],[\"测试阻塞\",{\"1\":{\"327\":1}}],[\"测试阻塞添加\",{\"1\":{\"327\":1}}],[\"测试安全性集合\",{\"1\":{\"309\":1}}],[\"测试普通容器转换成同步容器\",{\"1\":{\"309\":1}}],[\"测试concurrenthashmap\",{\"1\":{\"309\":1}}],[\"测试代码三\",{\"1\":{\"2450\":1}}],[\"测试代码二\",{\"1\":{\"2444\":1,\"2447\":1,\"2450\":1}}],[\"测试代码一\",{\"1\":{\"2444\":1,\"2447\":1,\"2450\":1,\"2453\":1,\"2456\":1,\"2466\":1,\"2467\":1}}],[\"测试代码\",{\"0\":{\"309\":1,\"1856\":1,\"1860\":1,\"1864\":1,\"2159\":1,\"2166\":1,\"2280\":1,\"2345\":1,\"2348\":1,\"2351\":1,\"2355\":1,\"2357\":1,\"2359\":1,\"2363\":1,\"2366\":1,\"2369\":1,\"2543\":1},\"1\":{\"1264\":1,\"2422\":1,\"2462\":1,\"2571\":1,\"2579\":1}}],[\"测试线程的不安全性\",{\"0\":{\"305\":1}}],[\"测试\",{\"0\":{\"664\":1,\"2098\":1,\"2488\":1,\"2812\":1,\"2815\":1,\"2818\":1,\"2821\":1,\"2891\":1},\"1\":{\"247\":1,\"248\":1,\"709\":1,\"1496\":1,\"1497\":1,\"2128\":1,\"2132\":2,\"2159\":1,\"2166\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2799\":1}}],[\"上下文事务恢复再执行\",{\"1\":{\"2730\":1}}],[\"上下文\",{\"1\":{\"2538\":1}}],[\"上下文模块\",{\"1\":{\"2532\":1}}],[\"上下文模块和\",{\"1\":{\"2532\":1}}],[\"上下滑动\",{\"0\":{\"1589\":1}}],[\"上的缓存\",{\"1\":{\"2472\":1}}],[\"上的字符\",{\"1\":{\"395\":1,\"396\":1}}],[\"上\",{\"1\":{\"1768\":1}}],[\"上面的的logmessageformat是打印的格式singlelineformat最基础的配置是不会打印sql的\",{\"1\":{\"2299\":1}}],[\"上面的代码是通过if来一个个判断的\",{\"1\":{\"2260\":1}}],[\"上面的代码针对与我们不同的需求总是一次次的循环循环循环\",{\"1\":{\"856\":1}}],[\"上面的图片是加载不出来的\",{\"1\":{\"1649\":1}}],[\"上面代码中content对象是我们自己随意创建的\",{\"1\":{\"1617\":1}}],[\"上岗证随学生档案入学\",{\"1\":{\"1301\":9}}],[\"上岗\",{\"1\":{\"1301\":1}}],[\"上述moel传递时的重定向问题\",{\"1\":{\"2932\":1}}],[\"上述测试文件最终执行的语句是\",{\"1\":{\"2444\":2,\"2447\":2,\"2450\":3,\"2453\":1,\"2456\":1,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1}}],[\"上述案例\",{\"1\":{\"2435\":1}}],[\"上述是错误的写法\",{\"1\":{\"1622\":1}}],[\"上述中select\",{\"1\":{\"1249\":1}}],[\"上述问题makefriend工程会自动使用log4j\",{\"1\":{\"652\":1}}],[\"上海\",{\"1\":{\"1221\":1,\"1253\":1,\"2414\":1}}],[\"上班第一件事拉取最新代码\",{\"1\":{\"753\":1}}],[\"上层模块依赖下层\",{\"1\":{\"653\":1}}],[\"上一页\",{\"1\":{\"1463\":1}}],[\"上一点说的是jar包不足项目无法正常工作\",{\"1\":{\"652\":1}}],[\"上一个\",{\"0\":{\"646\":1}}],[\"上一个元素地址\",{\"1\":{\"263\":1}}],[\"上一个元素的地址\",{\"1\":{\"262\":1}}],[\"上级目录\",{\"1\":{\"386\":2,\"387\":1,\"389\":2,\"390\":1}}],[\"上限\",{\"0\":{\"247\":1}}],[\"上传的文件数据\",{\"1\":{\"178\":1}}],[\"然而在实际开发中我们是可能是有非常多的类是需要被代理的\",{\"1\":{\"2606\":1}}],[\"然而一些容器并不希望连接被关闭\",{\"1\":{\"2318\":1}}],[\"然而\",{\"1\":{\"2317\":1,\"2520\":1}}],[\"然而代码中没有t类型那么就会报错\",{\"1\":{\"241\":1}}],[\"然后让该modelandview返回该spring\",{\"1\":{\"2871\":1}}],[\"然后传递给单元方法\",{\"1\":{\"2794\":1}}],[\"然后传递给他的接口引用声明\",{\"1\":{\"2540\":1}}],[\"然后spring通过<mvc\",{\"1\":{\"2780\":1}}],[\"然后复制web\",{\"1\":{\"2746\":1}}],[\"然后非事务执行\",{\"1\":{\"2735\":1}}],[\"然后使用了这个数据\",{\"1\":{\"2690\":1}}],[\"然后使用io流类似通道一样读取文件中的内容\",{\"1\":{\"400\":1}}],[\"然后注册到spring\",{\"1\":{\"2572\":1}}],[\"然后保存到名字1中\",{\"1\":{\"2458\":1}}],[\"然后保存到硬盘\",{\"1\":{\"400\":1}}],[\"然后直接执行代理对象的方法\",{\"1\":{\"2379\":1}}],[\"然后根据这个对象就可以获取目标方法的名称\",{\"1\":{\"2651\":1}}],[\"然后根据\",{\"1\":{\"2333\":1}}],[\"然后就可以测试操作了\",{\"1\":{\"2285\":1}}],[\"然后执行查询操作\",{\"1\":{\"2223\":1}}],[\"然后执行其中的代码\",{\"1\":{\"467\":1}}],[\"然后我们需要在application\",{\"1\":{\"2187\":1}}],[\"然后我们根据路径查找到了相关文件\",{\"1\":{\"1687\":1}}],[\"然后以接收js文件的形式接收数据\",{\"1\":{\"2170\":1}}],[\"然后慢慢去写数据库\",{\"1\":{\"2104\":1}}],[\"然后程序再慢慢地去写入数据库去\",{\"1\":{\"2104\":1}}],[\"然后重启项目\",{\"1\":{\"2098\":1}}],[\"然后请求logincheckcontroller\",{\"1\":{\"2098\":1}}],[\"然后作出相应的响应处理\",{\"1\":{\"2066\":1}}],[\"然后选择视图将处理结果显示给用户\",{\"1\":{\"2040\":1}}],[\"然后构建出一个全栈式的精益开发团队\",{\"1\":{\"1945\":1}}],[\"然后前后端一起进行功能联调并校验格式\",{\"1\":{\"1942\":1}}],[\"然后实现前后端的并行开发\",{\"1\":{\"1942\":1}}],[\"然后发送给客户端\",{\"1\":{\"1935\":1}}],[\"然后运行这个servlet\",{\"1\":{\"1929\":1}}],[\"然后返回给请求者\",{\"1\":{\"1927\":1}}],[\"然后返回编译后结果\",{\"1\":{\"1649\":1}}],[\"然后找到与该uri绑定的servlet并做实例化处理\",{\"1\":{\"1826\":1}}],[\"然后修改自己的值\",{\"1\":{\"1715\":1}}],[\"然后其他元素会占用那个位置\",{\"1\":{\"1535\":1}}],[\"然后蓝色div发生位移以后\",{\"1\":{\"1535\":1}}],[\"然后先给绿色div加上浮动\",{\"1\":{\"1521\":1}}],[\"然后通过行为去触发\",{\"1\":{\"1429\":1}}],[\"然后label中的for属性跟id配合使用\",{\"1\":{\"1341\":1,\"1342\":1}}],[\"然后在容器创建bean的适当时候调用它\",{\"1\":{\"2572\":1}}],[\"然后在接口的实现类中使用sqlsession对象调用select\",{\"1\":{\"2336\":1}}],[\"然后在jsp上展示数据\",{\"1\":{\"1953\":1}}],[\"然后在重写的init方法中调用了\",{\"1\":{\"1933\":1}}],[\"然后在新的线程中调用service方法\",{\"1\":{\"1826\":1}}],[\"然后在外部修改值\",{\"1\":{\"1714\":1}}],[\"然后在\",{\"1\":{\"1471\":1}}],[\"然后在一个分组里可以选择多个\",{\"1\":{\"1336\":1}}],[\"然后在一个分组里只能选择一个\",{\"1\":{\"1335\":1}}],[\"然后在内存中对应创建一个java\",{\"1\":{\"570\":1}}],[\"然后提交的时候会以键值对的形式拼到一起\",{\"1\":{\"1333\":1}}],[\"然后提交到本地库就好啦\",{\"1\":{\"789\":1}}],[\"然后name属性和具体录入的信息会拼成一个键值对的形式\",{\"1\":{\"1330\":1}}],[\"然后组成一个页面\",{\"1\":{\"1325\":1}}],[\"然后交给实现类去实现\",{\"1\":{\"1262\":1}}],[\"然后把sql语句编译成可执行的函数\",{\"1\":{\"1250\":1}}],[\"然后进行编译生成\",{\"1\":{\"1930\":1}}],[\"然后进行两张表的连接查询\",{\"1\":{\"1068\":1}}],[\"然后进行修改\",{\"1\":{\"759\":1}}],[\"然后给从表的外键字段添加唯一约束\",{\"1\":{\"1052\":1}}],[\"然后继续\",{\"1\":{\"922\":1}}],[\"然后点击运行启动即可\",{\"1\":{\"1777\":1}}],[\"然后点击fork按钮\",{\"1\":{\"759\":1}}],[\"然后点击下图按钮\",{\"1\":{\"670\":1}}],[\"然后\",{\"1\":{\"729\":1,\"759\":1,\"1645\":1}}],[\"然后开发代码\",{\"1\":{\"723\":1}}],[\"然后enter进入\",{\"1\":{\"671\":1}}],[\"然后输入添加到监视\",{\"1\":{\"671\":1}}],[\"然后案例来说应该\",{\"1\":{\"561\":1}}],[\"然后调用一次init方法\",{\"1\":{\"1823\":1}}],[\"然后调用drivermanager\",{\"1\":{\"1271\":1}}],[\"然后调用元素的getdelay方法\",{\"1\":{\"354\":1}}],[\"然后调用者对这个异常进行处理\",{\"1\":{\"33\":1}}],[\"然后再点击鼠标\",{\"1\":{\"1668\":1}}],[\"然后再采用jquery来实现\",{\"1\":{\"1543\":1}}],[\"然后再删除班级2\",{\"1\":{\"1001\":1}}],[\"然后再操作\",{\"1\":{\"874\":1}}],[\"然后再插入到当前标签内部\",{\"1\":{\"150\":1}}],[\"然后再让user2指向这个新空间\",{\"1\":{\"79\":1}}],[\"然后将创建的对象交给service层即可\",{\"1\":{\"2907\":1}}],[\"然后将连接对象保存到连接池中\",{\"1\":{\"1272\":1}}],[\"然后将元素添加到新容器中\",{\"1\":{\"313\":1}}],[\"然后将e放在i位置\",{\"1\":{\"294\":1}}],[\"然后将下一个元素的指向为e\",{\"1\":{\"294\":1}}],[\"然后将hash\",{\"1\":{\"294\":1}}],[\"然后将这些模块按照指定的规则生成对应的静态资源\",{\"1\":{\"111\":1}}],[\"然后将异常封装为对象\",{\"1\":{\"19\":1}}],[\"然后你想创建自己的服务\",{\"1\":{\"84\":1}}],[\"然后对其中的变量进行赋值\",{\"1\":{\"75\":1}}],[\"然后用catch捕获成功的话\",{\"1\":{\"20\":1}}],[\"然后try\",{\"1\":{\"19\":1}}],[\"原子是自然界最小的颗粒\",{\"1\":{\"2685\":1}}],[\"原子性是指事务是一个不可分割的工作单位\",{\"1\":{\"1102\":1}}],[\"原子性\",{\"0\":{\"2685\":1},\"1\":{\"1102\":1,\"1233\":1}}],[\"原单词首字母是小写的个体单词\",{\"1\":{\"2335\":1}}],[\"原当初是大驼峰的\",{\"1\":{\"2335\":1}}],[\"原本在页面上的信息无法保存\",{\"1\":{\"2103\":1}}],[\"原本的对象声明方式\",{\"1\":{\"77\":1}}],[\"原则\",{\"1\":{\"1824\":1}}],[\"原生的jdbc使用中\",{\"1\":{\"2195\":1}}],[\"原生的javascript的事件方法是不能和vue混用的\",{\"1\":{\"1647\":1}}],[\"原生dom对象\",{\"1\":{\"1573\":1}}],[\"原生js提交ajax异步请求代码比较繁琐\",{\"1\":{\"2116\":1}}],[\"原生js获取页面元素\",{\"1\":{\"1573\":1}}],[\"原生js中的通过dom编程和在标签上的事件属性绑定事件\",{\"1\":{\"1572\":1}}],[\"原生js\",{\"1\":{\"1567\":1,\"1568\":1,\"1570\":1,\"1572\":1}}],[\"原生javascript方式实现\",{\"0\":{\"1544\":1}}],[\"原始名称去掉\",{\"1\":{\"1572\":1}}],[\"原始写法\",{\"1\":{\"854\":1,\"874\":1,\"875\":1}}],[\"原来有b\",{\"1\":{\"1568\":1}}],[\"原来已经创建的表格的字符集和校对规则并不会改变\",{\"1\":{\"1156\":1}}],[\"原型也有一个\",{\"1\":{\"1425\":1}}],[\"原型链\",{\"0\":{\"1425\":1}}],[\"原型对象中有一个constructor属性指向构造方法\",{\"1\":{\"1423\":1}}],[\"原型\",{\"0\":{\"1422\":1}}],[\"原型化继承的面向对象的动态类型的区分大小写的客户端脚本语言\",{\"1\":{\"1372\":1}}],[\"原有的对象并不会受到影响\",{\"1\":{\"895\":1}}],[\"原材料\",{\"1\":{\"660\":1}}],[\"原理\",{\"0\":{\"433\":1,\"1249\":1},\"1\":{\"313\":1,\"1230\":2}}],[\"原位置得到了释放\",{\"1\":{\"1535\":1}}],[\"原位置+旧容量\",{\"1\":{\"295\":1}}],[\"原位置\",{\"1\":{\"295\":1}}],[\"原因与srvlet中\",{\"1\":{\"2764\":1}}],[\"原因分析\",{\"1\":{\"2658\":1,\"2659\":1}}],[\"原因是这样可以加快项目从外网导入依赖包的速度\",{\"1\":{\"676\":1}}],[\"原因\",{\"1\":{\"241\":1,\"305\":1,\"1216\":5}}],[\"反向生成如下资源\",{\"1\":{\"2497\":1}}],[\"反转数组\",{\"1\":{\"1396\":1}}],[\"反斜线\",{\"1\":{\"773\":1}}],[\"反省\",{\"1\":{\"570\":1}}],[\"反序列化\",{\"1\":{\"428\":1}}],[\"反之将内容通过io流写道file类对象中\",{\"1\":{\"400\":1}}],[\"反应对应的类型为object类型\",{\"1\":{\"240\":1}}],[\"反射技术实例化对象\",{\"0\":{\"2549\":1}}],[\"反射是否破坏了面向对象的封装性\",{\"0\":{\"597\":1}}],[\"反射的概念\",{\"0\":{\"569\":1}}],[\"反射和new\",{\"1\":{\"567\":1}}],[\"反射\",{\"0\":{\"43\":1,\"2967\":1},\"1\":{\"6\":1}}],[\"细节\",{\"0\":{\"240\":1,\"245\":1}}],[\"女友吗\",{\"1\":{\"1455\":1}}],[\"女\",{\"1\":{\"239\":1,\"240\":1,\"564\":1,\"973\":1,\"1555\":1,\"1630\":1}}],[\"那mybatis\",{\"1\":{\"2437\":1}}],[\"那框架就好比是一套已经修建好的毛坯房\",{\"1\":{\"2197\":1}}],[\"那就是在远程服务器上设法把数据装进js格式的文件里\",{\"1\":{\"2170\":1}}],[\"那就是时间是根据时区来显示的\",{\"1\":{\"942\":1}}],[\"那些能放数据并存储传递数据作为数据存放区域的对象\",{\"1\":{\"1913\":1}}],[\"那并发能力势必会下降\",{\"1\":{\"1757\":1}}],[\"那jvm肯定一直往上飙升\",{\"1\":{\"313\":1}}],[\"那数组不断复制\",{\"1\":{\"313\":1}}],[\"那这个e的类型可以在创建子类对象的时候确定\",{\"1\":{\"239\":1}}],[\"那么只能以抛异常告终\",{\"1\":{\"2732\":1}}],[\"那么只对sql语句进行一次语法校验和编译\",{\"1\":{\"1250\":1}}],[\"那么b\",{\"1\":{\"2728\":1}}],[\"那么另外一个事务读到的这个数据是\",{\"1\":{\"2690\":1}}],[\"那么之前提交的数据则有可能会丢失\",{\"1\":{\"2688\":1}}],[\"那么依赖注入将会把更多的对象之间的关系整理到一起\",{\"1\":{\"2551\":1}}],[\"那么给对象属性赋值就可以说成是依赖注入\",{\"1\":{\"2551\":1}}],[\"那么如果表太多的话\",{\"1\":{\"2497\":1}}],[\"那么如何保证接收方能看得懂发送方发送的正文数据呢\",{\"1\":{\"207\":1}}],[\"那么前端在请求时就不用考虑跨域问题了\",{\"1\":{\"2172\":1}}],[\"那么跨域访问数据就有了一种可能\",{\"1\":{\"2170\":1}}],[\"那么使用字符串就好了\",{\"1\":{\"2119\":1}}],[\"那么使用的时候需要try\",{\"1\":{\"36\":1}}],[\"那么您就可以使用其它几个格式化数字属性\",{\"1\":{\"2029\":1}}],[\"那么在缓存中命中数据的情况下\",{\"1\":{\"2647\":1}}],[\"那么在使用名字2时\",{\"1\":{\"2461\":1}}],[\"那么在使用的时候无需额外处理\",{\"1\":{\"36\":1}}],[\"那么在jsp上除了html中可以简单的注释以外\",{\"1\":{\"1952\":1}}],[\"那么两种方式中书写的java代码在转译之后生成的java文件中的位置是不一样\",{\"1\":{\"1951\":1}}],[\"那么httpsession会一直存储\",{\"1\":{\"1900\":1}}],[\"那么与该客户端浏览器对应的httpsession对象就会被销毁\",{\"1\":{\"1899\":1}}],[\"那么该cookie为持久化cookie\",{\"1\":{\"1890\":1}}],[\"那么forward\",{\"1\":{\"1855\":1}}],[\"那么最终会根据java的多态特性转而执行我们自定义的servlet中的doget方法\",{\"1\":{\"1826\":1}}],[\"那么我么重写\",{\"1\":{\"1820\":1}}],[\"那么我们jsp文件编译成java代码后\",{\"1\":{\"1933\":1}}],[\"那么我们直接重写service方法即可\",{\"1\":{\"1820\":1}}],[\"那么我们需要在最后提交事务\",{\"1\":{\"1108\":1}}],[\"那么我们想象一下\",{\"1\":{\"653\":1}}],[\"那么对于数据库的性能也是非常高的\",{\"1\":{\"1757\":1}}],[\"那么也是不一样的\",{\"1\":{\"1573\":1}}],[\"那么也就是说person\",{\"1\":{\"1425\":1}}],[\"那么当它们向下移动时可能被其它浮动元素\",{\"1\":{\"1519\":1}}],[\"那么其它浮动块向下移动\",{\"1\":{\"1519\":1}}],[\"那么其实只要关闭高级流\",{\"1\":{\"418\":1}}],[\"那么框\",{\"1\":{\"1519\":1}}],[\"那么window对象都可以省略不写\",{\"1\":{\"1454\":1,\"1455\":1,\"1456\":1}}],[\"那么直接用return关键字返回即可\",{\"1\":{\"1370\":1}}],[\"那么结果是\",{\"1\":{\"1361\":1}}],[\"那么默认就是当前文件所在的路径\",{\"1\":{\"1869\":1,\"1870\":1}}],[\"那么默认效果就是value中内容\",{\"1\":{\"1333\":1}}],[\"那么默认和0中排在第一个的列名相同\",{\"1\":{\"992\":1}}],[\"那么会出现异常\",{\"1\":{\"1987\":1}}],[\"那么会以web项目中的超时时间为准\",{\"1\":{\"1899\":1}}],[\"那么会以这个字段显示\",{\"1\":{\"1198\":1}}],[\"那么会去他们所对应的原型对象中去找\",{\"1\":{\"1424\":1}}],[\"那么会将true转化为1\",{\"1\":{\"1362\":1}}],[\"那么会优先走本类中的方法\",{\"1\":{\"368\":1}}],[\"那么需要单独修改\",{\"1\":{\"1156\":1}}],[\"那么此时一般是需要使用到事务\",{\"1\":{\"1101\":1}}],[\"那么可对其使用\",{\"1\":{\"1071\":1}}],[\"那么可以省略不写\",{\"1\":{\"2866\":1}}],[\"那么可以对其使用\",{\"1\":{\"1071\":1}}],[\"那么可以使用命令\",{\"1\":{\"92\":1}}],[\"那么怎么去除错误的\",{\"1\":{\"1055\":1}}],[\"那么这里就非常适用于使用异步方式校验\",{\"1\":{\"2111\":1}}],[\"那么这种连续的\",{\"1\":{\"1425\":1}}],[\"那么这些修改就永久地保存下来\",{\"1\":{\"1099\":1}}],[\"那么这些列都不允许为空值\",{\"1\":{\"986\":1}}],[\"那么这个命令干了一些什么\",{\"1\":{\"1687\":1}}],[\"那么这个时候我们可以让二者实现转换\",{\"1\":{\"1573\":1}}],[\"那么这个查询语句就称之为子查询\",{\"1\":{\"1069\":1}}],[\"那么这个方法中的功能会在测试方法执行后先执行\",{\"1\":{\"524\":1}}],[\"那么这个方法中的功能会在测试方法执行前先执行\",{\"1\":{\"524\":1}}],[\"那么则可以使用方法引用\",{\"1\":{\"827\":1}}],[\"那么工作区就是\",{\"1\":{\"729\":1}}],[\"那么工程拆分后又如何进行互相调用和访问呢\",{\"1\":{\"653\":1}}],[\"那么a→b和b→c都是直接依赖\",{\"1\":{\"687\":1}}],[\"那么架构师\",{\"1\":{\"653\":1}}],[\"那么makefriend工程的运行时环境中该导入log4j\",{\"1\":{\"652\":1}}],[\"那么现有的程序将不能正常工作\",{\"1\":{\"651\":1}}],[\"那么问题来了\",{\"1\":{\"651\":1}}],[\"那么相当于子类student也使用了这个myanno\",{\"1\":{\"556\":1}}],[\"那么相当于默认的注解就是这种状态\",{\"1\":{\"553\":1}}],[\"那么程序可以通过反射获取该注释\",{\"1\":{\"553\":1}}],[\"那么实际上只是个标记\",{\"1\":{\"551\":1}}],[\"那么里面的字节流也会随之被关闭\",{\"1\":{\"418\":1}}],[\"那么比较的就是具体的数值\",{\"1\":{\"364\":1}}],[\"那么读取的是老arr的数据\",{\"1\":{\"313\":1}}],[\"那么concurrenthashmap并发度是什么\",{\"1\":{\"311\":1}}],[\"那么下面这个循环不走\",{\"1\":{\"294\":1}}],[\"那么从后往前找\",{\"1\":{\"263\":1}}],[\"那么从前往后找\",{\"1\":{\"263\":1}}],[\"那么就加入到事务中执行\",{\"1\":{\"2727\":1}}],[\"那么就相对body进行变化\",{\"1\":{\"1535\":1}}],[\"那么就变成了在指定索引位置增加元素\",{\"1\":{\"1400\":1}}],[\"那么就是连接符号\",{\"1\":{\"1362\":1}}],[\"那么就要使用外连接查询了\",{\"1\":{\"1058\":1}}],[\"那么就通过关联关系\",{\"1\":{\"1055\":1}}],[\"那么就通过getclass\",{\"1\":{\"140\":1}}],[\"那么就非要将\",{\"1\":{\"1046\":1}}],[\"那么就会被擦除\",{\"1\":{\"240\":1}}],[\"那么子类也会变成一个泛型类\",{\"1\":{\"239\":1}}],[\"那么子类就不需要再指定泛型了\",{\"1\":{\"239\":1}}],[\"那么认为此泛型为object类型\",{\"1\":{\"238\":1}}],[\"那么长度就被确定了\",{\"1\":{\"228\":2}}],[\"那么返回的就是html代码\",{\"1\":{\"209\":1}}],[\"那么th\",{\"1\":{\"147\":1}}],[\"那么try\",{\"1\":{\"20\":1}}],[\"那么try中后续的代码是不会执行的\",{\"1\":{\"20\":1}}],[\"那么学习node\",{\"1\":{\"84\":1}}],[\"那么你将会很容易的学会node\",{\"1\":{\"84\":1}}],[\"那么node\",{\"1\":{\"84\":1}}],[\"那么\",{\"1\":{\"23\":1,\"1198\":2,\"1755\":1,\"2333\":1,\"2691\":1}}],[\"男\",{\"1\":{\"238\":1,\"564\":2,\"972\":6,\"973\":1,\"1419\":2,\"1421\":1,\"1424\":1,\"1425\":1,\"1555\":1,\"1629\":1,\"1630\":3,\"1892\":1,\"2128\":5,\"2166\":4}}],[\"格式可以被前端直接识别并解析成对象\",{\"1\":{\"2124\":1}}],[\"格式可以很好的定制\",{\"1\":{\"1283\":1}}],[\"格式既能考虑到前端对象的特点\",{\"1\":{\"2124\":1}}],[\"格式符\",{\"1\":{\"1093\":2}}],[\"格式为\",{\"1\":{\"892\":3}}],[\"格式化标签案例开发\",{\"0\":{\"2031\":1}}],[\"格式化标签库\",{\"0\":{\"2027\":1},\"1\":{\"2013\":1,\"2027\":1}}],[\"格式化和解析操作\",{\"0\":{\"897\":1}}],[\"格式化和解析操作会出现报错和不准确的情况\",{\"1\":{\"891\":1}}],[\"格式化类\",{\"1\":{\"380\":1}}],[\"格式化只对date有用\",{\"1\":{\"378\":1}}],[\"格式化\",{\"1\":{\"378\":1}}],[\"格式化的标准已经定义好了\",{\"1\":{\"374\":1}}],[\"格式\",{\"0\":{\"238\":1,\"244\":1},\"1\":{\"376\":1,\"942\":1,\"1508\":1,\"1509\":1,\"1510\":1}}],[\"钻石运算符\",{\"1\":{\"235\":1}}],[\"实体类必须序列化\",{\"1\":{\"2478\":1}}],[\"实体类别名处理\",{\"0\":{\"2324\":1}}],[\"实体类只需继承\",{\"1\":{\"2179\":1}}],[\"实体类\",{\"1\":{\"1263\":1,\"1264\":1,\"1972\":1,\"1976\":1,\"2571\":1,\"2579\":1,\"2590\":1,\"2591\":1,\"2592\":1,\"2605\":1,\"2612\":1}}],[\"实体类中其他构造方法可选\",{\"1\":{\"1226\":1}}],[\"实体类应当实现序列化接口\",{\"1\":{\"1226\":1}}],[\"实体类的属性推荐写成包装类\",{\"1\":{\"1226\":1}}],[\"实体类的一个对象就可以用于存储数据库表中的一条记录\",{\"1\":{\"1226\":1}}],[\"实例创建完成\",{\"1\":{\"1730\":1}}],[\"实例创建之前\",{\"1\":{\"1730\":1}}],[\"实例\",{\"1\":{\"1415\":1,\"2030\":1,\"2440\":3}}],[\"实例普通方法\",{\"0\":{\"830\":1}}],[\"实例化的bean\",{\"1\":{\"2574\":2}}],[\"实例化的时候指定泛型\",{\"1\":{\"238\":1}}],[\"实例化的时候不指定泛型\",{\"1\":{\"238\":1}}],[\"实例化一个filter对象的方法\",{\"1\":{\"2002\":1}}],[\"实例化之后\",{\"1\":{\"1822\":1}}],[\"实例化对象\",{\"1\":{\"1419\":1}}],[\"实例化\",{\"1\":{\"379\":1}}],[\"实战\",{\"0\":{\"749\":1}}],[\"实际参数列表\",{\"1\":{\"2651\":2}}],[\"实际意义\",{\"0\":{\"2647\":1}}],[\"实际增强的逻辑部分称为通知\",{\"1\":{\"2623\":1}}],[\"实际被增强的方法\",{\"1\":{\"2622\":1}}],[\"实际数据源所携带的配置参数\",{\"1\":{\"2301\":1}}],[\"实际数据源\",{\"1\":{\"2301\":2}}],[\"实际驱动\",{\"1\":{\"2298\":1}}],[\"实际研发我们没必要写这么多\",{\"1\":{\"2155\":1}}],[\"实际运用中\",{\"1\":{\"1757\":1}}],[\"实际工作中我们使用v\",{\"1\":{\"1630\":1,\"1631\":1}}],[\"实际开发时\",{\"1\":{\"2647\":1}}],[\"实际开发中\",{\"1\":{\"996\":1,\"1535\":1,\"1820\":1,\"2260\":1}}],[\"实际开发流程\",{\"0\":{\"745\":1}}],[\"实际是把本地文件修改添加到暂存区\",{\"1\":{\"729\":1}}],[\"实际项目\",{\"0\":{\"660\":1}}],[\"实际应用\",{\"0\":{\"564\":1}}],[\"实际在调用线程里面的run方法\",{\"1\":{\"456\":1}}],[\"实际上vue框架就是一个mvvm框架\",{\"1\":{\"1612\":1}}],[\"实际上覆盖住了框\",{\"1\":{\"1519\":1}}],[\"实际上是拿第一个参数作为方法的调用者\",{\"1\":{\"830\":1}}],[\"实际上就是把暂存区的所有内容提交到当前分支\",{\"1\":{\"729\":1}}],[\"实际上这是一种假象\",{\"1\":{\"452\":1}}],[\"实际上也可以用于数据库\",{\"1\":{\"370\":1}}],[\"实际底层就是对value数组进行初始化\",{\"1\":{\"392\":1}}],[\"实际底层是对value数组进行初始化\",{\"1\":{\"392\":1}}],[\"实际底层还是调用了带参构造器\",{\"1\":{\"382\":1}}],[\"实际使用了泛型才会简单\",{\"1\":{\"235\":1}}],[\"实现业务代码\",{\"0\":{\"2913\":1}}],[\"实现思路\",{\"0\":{\"2829\":1}}],[\"实现转账功能\",{\"0\":{\"2697\":1}}],[\"实现javatype\",{\"1\":{\"2437\":1}}],[\"实现dml操作\",{\"0\":{\"2411\":1}}],[\"实现子查询\",{\"0\":{\"2258\":1}}],[\"实现userservice接口\",{\"0\":{\"2217\":1}}],[\"实现自动处理回调函数名\",{\"1\":{\"2170\":1}}],[\"实现步骤\",{\"0\":{\"2091\":1,\"2112\":1},\"1\":{\"2825\":1}}],[\"实现重启免登录的关键要素是对于session的序列化\",{\"1\":{\"2089\":1}}],[\"实现了控制层和servlet之间的解耦\",{\"1\":{\"2741\":1}}],[\"实现了mybatis的入门\",{\"1\":{\"2371\":1}}],[\"实现了jspsourcedependent\",{\"1\":{\"1932\":1}}],[\"实现了xxx功能\",{\"1\":{\"538\":1}}],[\"实现登录一次即可\",{\"1\":{\"1904\":1}}],[\"实现对\",{\"1\":{\"1752\":1}}],[\"实现淡入之指定透明度效果方法fadeto\",{\"1\":{\"1590\":1}}],[\"实现淡入淡出切换效果方法fadetoggle\",{\"1\":{\"1590\":1}}],[\"实现淡入动画效果方法fadein\",{\"1\":{\"1590\":1}}],[\"实现淡出动画效果方法fadeout\",{\"1\":{\"1590\":1}}],[\"实现滑动切换动画效果slidetoggle\",{\"1\":{\"1589\":1}}],[\"实现向上滑动动画效果slideup\",{\"1\":{\"1589\":1}}],[\"实现向下滑动动画效果slidedown\",{\"1\":{\"1589\":1}}],[\"实现切换简单显示和隐藏动画效果方法toggle\",{\"1\":{\"1588\":1}}],[\"实现代码\",{\"0\":{\"1579\":1}}],[\"实现隔行变色的效果\",{\"1\":{\"1543\":1}}],[\"实现页面的跳转功能\",{\"1\":{\"1312\":1}}],[\"实现链接对象的反复使用\",{\"1\":{\"1272\":1}}],[\"实现要么全都执行成功\",{\"1\":{\"1233\":1}}],[\"实现\",{\"1\":{\"900\":1,\"1147\":2,\"1264\":1,\"2509\":1,\"2531\":1,\"2574\":1}}],[\"实现继承\",{\"1\":{\"714\":1,\"715\":1}}],[\"实现项目的分布式部署\",{\"0\":{\"654\":1}}],[\"实现线程间的协作\",{\"1\":{\"475\":1}}],[\"实现converter接口重写convert方法\",{\"1\":{\"2799\":1}}],[\"实现comparator\",{\"1\":{\"275\":1}}],[\"实现comparator接口\",{\"1\":{\"271\":1}}],[\"实现comparable接口\",{\"1\":{\"271\":1}}],[\"实现callable接口\",{\"0\":{\"447\":1},\"1\":{\"449\":1}}],[\"实现runnable接口的时候\",{\"1\":{\"456\":1}}],[\"实现runnable接口\",{\"0\":{\"443\":1},\"1\":{\"444\":1}}],[\"实现serializable\",{\"1\":{\"427\":1}}],[\"实现接口方式\",{\"1\":{\"2771\":1}}],[\"实现接口\",{\"1\":{\"364\":1}}],[\"实现内部比较器或者外部比较器\",{\"1\":{\"351\":1}}],[\"实现类requestmappinghandleradapter\",{\"1\":{\"2781\":1}}],[\"实现类requestmappinghandlermapping\",{\"1\":{\"2781\":1}}],[\"实现类中其他和接口无关的方法是无法增强的\",{\"1\":{\"2610\":1}}],[\"实现类不能重写接口的静态方法\",{\"1\":{\"822\":1}}],[\"实现类可以直接调用接口默认方法\",{\"1\":{\"822\":1}}],[\"实现类重写接口中的默认方法\",{\"1\":{\"818\":1}}],[\"实现类直接调用接口的默认方法\",{\"1\":{\"818\":1}}],[\"实现类\",{\"0\":{\"259\":1,\"2492\":1},\"1\":{\"2667\":1}}],[\"实现简单隐藏动画效果方法hide\",{\"1\":{\"1588\":1}}],[\"实现简单显示动画效果方法show\",{\"1\":{\"1588\":1}}],[\"实现简单\",{\"1\":{\"159\":1}}],[\"实现的开源可视化库\",{\"1\":{\"61\":1}}],[\"实现效果\",{\"0\":{\"50\":1,\"1577\":1},\"1\":{\"2830\":1}}],[\"实现一个功能\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"32\":1}}],[\"此设置将覆盖$\",{\"1\":{\"2137\":1}}],[\"此host的webapps目录\",{\"1\":{\"1767\":1}}],[\"此服务的名称\",{\"1\":{\"1764\":1}}],[\"此文件所有出站的链接数组\",{\"1\":{\"1198\":1}}],[\"此步不要忘记\",{\"1\":{\"928\":1}}],[\"此外java8还提供了4套其他历法\",{\"1\":{\"892\":1}}],[\"此外\",{\"1\":{\"676\":1}}],[\"此方法将始终缓存\",{\"1\":{\"363\":1}}],[\"此时前端会出现405错误\",{\"1\":{\"2815\":1}}],[\"此时这个很可能出问题的程序应该被回滚\",{\"1\":{\"2715\":1}}],[\"此时也没有重置a账户的余额\",{\"1\":{\"2698\":1}}],[\"此时也会触发事件监听\",{\"1\":{\"1668\":1}}],[\"此时应该将缓存切面的优先级提高\",{\"1\":{\"2647\":1}}],[\"此时不写domainobjectname\",{\"1\":{\"2501\":1}}],[\"此时以及成功使用了ehcache缓存\",{\"1\":{\"2488\":1}}],[\"此时仍是只查询了一次数据库\",{\"1\":{\"2479\":1}}],[\"此时还需要注意\",{\"1\":{\"2376\":1}}],[\"此时的namespace中需要填写empmapper接口的全类路径\",{\"1\":{\"2374\":1}}],[\"此时由于\",{\"1\":{\"2285\":1}}],[\"此时如果按住ctrl和其他键\",{\"1\":{\"1668\":1}}],[\"此时有一个问题\",{\"1\":{\"1668\":1}}],[\"此时按住键盘ctrl键然后鼠标点击才能实现add加1\",{\"1\":{\"1667\":1}}],[\"此时vue会编译带有v\",{\"1\":{\"1649\":1}}],[\"此时就可以在异常捕获时调用rollback\",{\"1\":{\"1233\":1}}],[\"此时要求查询出所有的分类\",{\"1\":{\"1072\":1}}],[\"此时我们的项目中初始化了一些配置\",{\"1\":{\"2744\":1}}],[\"此时我们再次查看余额\",{\"1\":{\"2698\":1}}],[\"此时我们发现页面资源无法正常访问\",{\"1\":{\"2787\":1}}],[\"此时我们发现\",{\"1\":{\"2234\":1}}],[\"此时我们发现使用右键时也会出现弹窗\",{\"1\":{\"1673\":1}}],[\"此时我们如果要使用app\",{\"1\":{\"1709\":1}}],[\"此时我们需要修改\",{\"1\":{\"2826\":1}}],[\"此时我们需要借助slf4j的具体实现logback来打印日志\",{\"1\":{\"2487\":1}}],[\"此时我们需要借助arrays静态类中的stream方法\",{\"1\":{\"860\":2}}],[\"此时我们需要执行以下配置\",{\"1\":{\"928\":1}}],[\"此时我们可以使用通配符<\",{\"1\":{\"244\":1}}],[\"此时idea会提示resolve\",{\"1\":{\"786\":1}}],[\"此时元素应该已经到期\",{\"1\":{\"354\":1}}],[\"此时last是新增前的last\",{\"1\":{\"341\":1}}],[\"此时arr的地址还没有改呢\",{\"1\":{\"313\":1}}],[\"此时会重新计算原有的位置\",{\"1\":{\"294\":1}}],[\"此时对于不符合泛型限定类型的数据\",{\"1\":{\"234\":1}}],[\"此处不写的话\",{\"1\":{\"2834\":1}}],[\"此处可以删除\",{\"1\":{\"2487\":1}}],[\"此处如果路由器也是router\",{\"1\":{\"1718\":1}}],[\"此处项目名不能使用大写\",{\"1\":{\"1683\":1}}],[\"此处省略该操作\",{\"1\":{\"922\":1}}],[\"此处有1000行代码\",{\"1\":{\"465\":2,\"480\":2}}],[\"此处ip地址需要填写上述dhcp池中区间ip\",{\"1\":{\"49\":1}}],[\"此处起始ip应排除上述配置的子网ip与网关ip\",{\"1\":{\"48\":1}}],[\"此处网关需要设置为与子网ip网段一致\",{\"1\":{\"48\":1}}],[\"加粗倾斜下划线\",{\"1\":{\"1302\":1}}],[\"加粗斜体删除\",{\"1\":{\"1170\":1}}],[\"加粗\",{\"0\":{\"1170\":1,\"1302\":1},\"1\":{\"1170\":1,\"1188\":1,\"1319\":1}}],[\"加快了数据的查询速度\",{\"1\":{\"1127\":1}}],[\"加快查找效率\",{\"1\":{\"295\":1}}],[\"加载外部配置文件配置数据源\",{\"0\":{\"2906\":1}}],[\"加载外部属性文件\",{\"1\":{\"2903\":1,\"2906\":1}}],[\"加载该类进入内存即可\",{\"1\":{\"1217\":1}}],[\"加载驱动\",{\"1\":{\"1215\":1,\"1288\":1}}],[\"加载一个driver驱动\",{\"1\":{\"1210\":1,\"1215\":1}}],[\"加载其它的依赖项\",{\"1\":{\"693\":1}}],[\"加载在内存中了\",{\"1\":{\"553\":1}}],[\"加载因子是表示hsah表中元素的填满的程度\",{\"1\":{\"294\":1}}],[\"加载因子loadfactor\",{\"1\":{\"280\":1}}],[\"加锁\",{\"1\":{\"467\":1}}],[\"加入到这个事务中\",{\"1\":{\"2725\":1}}],[\"加入到连接池中\",{\"0\":{\"1288\":1}}],[\"加入自定义逻辑\",{\"1\":{\"2516\":1}}],[\"加入logback日志\",{\"0\":{\"2487\":1}}],[\"加入cache元素后\",{\"1\":{\"2480\":1}}],[\"加入属性文件\",{\"1\":{\"1285\":1}}],[\"加入jar包\",{\"1\":{\"1285\":1}}],[\"加入释放资源的代码\",{\"1\":{\"524\":1}}],[\"加入一些申请资源的代码\",{\"1\":{\"524\":1}}],[\"加入了\",{\"1\":{\"524\":2}}],[\"加入断言\",{\"1\":{\"523\":2,\"525\":2}}],[\"加入线程\",{\"1\":{\"458\":1}}],[\"加入泛型的优点\",{\"1\":{\"234\":1}}],[\"加上属性\",{\"1\":{\"359\":1}}],[\"加1操作\",{\"1\":{\"328\":1}}],[\"加1\",{\"1\":{\"328\":1}}],[\"加以标记\",{\"1\":{\"158\":1}}],[\"丽丽\",{\"1\":{\"234\":2}}],[\"效率\",{\"1\":{\"1112\":1}}],[\"效率极高不会出现线程争抢的问题\",{\"1\":{\"346\":1}}],[\"效率高\",{\"1\":{\"336\":1,\"397\":1,\"484\":1,\"919\":1,\"1330\":1}}],[\"效率低\",{\"1\":{\"228\":1,\"397\":1,\"483\":1,\"1330\":1}}],[\"效果图\",{\"0\":{\"1605\":1,\"1608\":1}}],[\"效果会有一定的差距\",{\"1\":{\"1375\":1}}],[\"效果录入信息不可见\",{\"1\":{\"1334\":1}}],[\"效果实现\",{\"1\":{\"442\":1}}],[\"效果\",{\"0\":{\"1276\":1,\"1694\":1,\"1697\":1,\"1700\":1,\"2309\":1,\"2313\":1},\"1\":{\"150\":1,\"446\":1,\"1533\":1,\"1534\":1}}],[\"循环执行的定时器任务\",{\"1\":{\"1458\":1}}],[\"循环执行任务\",{\"0\":{\"1458\":1}}],[\"循环执行上述的操作\",{\"1\":{\"693\":1}}],[\"循环结构\",{\"0\":{\"1367\":1}}],[\"循环完毕后指向最后一条记录的后面\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"循环遍历\",{\"1\":{\"251\":1}}],[\"循环链表\",{\"1\":{\"227\":1}}],[\"循环可以使用\",{\"1\":{\"220\":1}}],[\"缺省弹性框支持\",{\"1\":{\"1558\":1}}],[\"缺陷如下\",{\"1\":{\"891\":1}}],[\"缺少的\",{\"1\":{\"315\":1}}],[\"缺少状态意味着如果后续处理需要前面的信息\",{\"1\":{\"161\":1}}],[\"缺席的\",{\"1\":{\"315\":1}}],[\"缺点\",{\"0\":{\"484\":1,\"1128\":1,\"1375\":1,\"2103\":1,\"2106\":1},\"1\":{\"227\":2,\"228\":1,\"567\":1,\"723\":1,\"1230\":1,\"1283\":2}}],[\"顺序性\",{\"1\":{\"226\":1}}],[\"顺序结构\",{\"0\":{\"226\":1},\"1\":{\"225\":1,\"302\":1}}],[\"序列\",{\"1\":{\"226\":1}}],[\"序列化的用途\",{\"1\":{\"2090\":1}}],[\"序列化与反序列\",{\"1\":{\"2090\":1}}],[\"序列化类如果修改\",{\"1\":{\"427\":1}}],[\"序列化\",{\"0\":{\"426\":1,\"3021\":1},\"1\":{\"39\":1}}],[\"装有javascript解释器\",{\"1\":{\"1374\":1}}],[\"装箱操作\",{\"1\":{\"889\":1}}],[\"装箱与拆箱\",{\"0\":{\"361\":1}}],[\"装备等\",{\"1\":{\"226\":2}}],[\"装载到\",{\"1\":{\"115\":1}}],[\"链接数据库校验登录\",{\"1\":{\"2062\":1}}],[\"链接数据库显示所有员工信息到jsp页面\",{\"1\":{\"1973\":1}}],[\"链接式\",{\"0\":{\"1380\":1},\"1\":{\"1380\":1}}],[\"链接已经关闭\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"链接地址\",{\"1\":{\"1177\":1,\"1479\":2}}],[\"链接地址+空格+\",{\"1\":{\"1175\":1}}],[\"链接文字\",{\"1\":{\"1175\":1}}],[\"链接的地址\",{\"1\":{\"1175\":1}}],[\"链接\",{\"0\":{\"1174\":1}}],[\"链接到文章的字\",{\"1\":{\"1161\":1}}],[\"链接到文章的块\",{\"1\":{\"1161\":1}}],[\"链接到文章的标题\",{\"1\":{\"1161\":1}}],[\"链接一个文章\",{\"1\":{\"1161\":1}}],[\"链接断开\",{\"1\":{\"518\":1}}],[\"链式调用方式\",{\"1\":{\"392\":1}}],[\"链式结构\",{\"0\":{\"226\":1},\"1\":{\"225\":1,\"302\":1}}],[\"链中元素数量加1\",{\"1\":{\"262\":1}}],[\"链中一定有一个尾节点\",{\"1\":{\"262\":1}}],[\"链中一定有一个首节点\",{\"1\":{\"262\":1}}],[\"链表都可以\",{\"1\":{\"321\":1}}],[\"链表的尾结点\",{\"1\":{\"338\":1}}],[\"链表的尾节点\",{\"1\":{\"263\":1}}],[\"链表的头结点\",{\"1\":{\"338\":1}}],[\"链表的头插法\",{\"1\":{\"294\":1}}],[\"链表的长度\",{\"1\":{\"338\":1}}],[\"链表的首节点\",{\"1\":{\"263\":1}}],[\"链表\",{\"1\":{\"225\":1,\"227\":1,\"261\":1,\"302\":1}}],[\"物理分页\",{\"1\":{\"2179\":1}}],[\"物理删除\",{\"0\":{\"978\":1},\"1\":{\"2231\":1}}],[\"物理删除和逻辑和删除的区别\",{\"0\":{\"977\":1}}],[\"物理\",{\"1\":{\"495\":2}}],[\"物理内核和虚拟内核同时各自执行一个线程\",{\"1\":{\"452\":1}}],[\"物理结构是\",{\"1\":{\"261\":2}}],[\"物理结构\",{\"1\":{\"225\":1,\"302\":1}}],[\"物流\",{\"1\":{\"61\":1}}],[\"树状图分析\",{\"0\":{\"1483\":1}}],[\"树\",{\"1\":{\"225\":1,\"302\":1}}],[\"线上问答系统\",{\"1\":{\"2417\":1}}],[\"线性表逻辑结构\",{\"1\":{\"227\":2}}],[\"线性表是n个类型相同数据元素的有限序列\",{\"1\":{\"226\":1}}],[\"线性表\",{\"1\":{\"225\":1,\"261\":2,\"302\":1}}],[\"线程名称\",{\"1\":{\"2487\":1}}],[\"线程名字\",{\"1\":{\"449\":1}}],[\"线程同步的优缺点\",{\"0\":{\"482\":1}}],[\"线程的安全性问题\",{\"0\":{\"1824\":1}}],[\"线程的优先级默认是5\",{\"1\":{\"457\":1}}],[\"线程的生命周期\",{\"0\":{\"454\":1,\"3025\":1},\"1\":{\"40\":1}}],[\"线程类\",{\"1\":{\"456\":1}}],[\"线程一\",{\"1\":{\"450\":1}}],[\"线程对象\",{\"1\":{\"449\":1}}],[\"线程1\",{\"1\":{\"445\":1}}],[\"线程\",{\"0\":{\"452\":1},\"1\":{\"348\":3,\"349\":3,\"458\":1}}],[\"线程都执行完以后返回true\",{\"1\":{\"305\":1,\"306\":1}}],[\"线程不安全\",{\"1\":{\"259\":1,\"305\":1,\"306\":1,\"397\":1,\"484\":1}}],[\"线程相对不安全\",{\"1\":{\"258\":1}}],[\"线程通信\",{\"0\":{\"485\":1,\"3028\":1},\"1\":{\"40\":1}}],[\"线程安全的\",{\"1\":{\"902\":1}}],[\"线程安全性问题\",{\"1\":{\"891\":1}}],[\"线程安全但效率低\",{\"1\":{\"258\":1}}],[\"线程安全\",{\"0\":{\"462\":1,\"3027\":1},\"1\":{\"40\":1,\"305\":1,\"306\":1,\"397\":1,\"483\":1}}],[\"线程常见方法\",{\"0\":{\"455\":1,\"3026\":1},\"1\":{\"40\":1}}],[\"逻辑判断\",{\"1\":{\"1621\":1}}],[\"逻辑\",{\"0\":{\"1356\":1}}],[\"逻辑异或\",{\"1\":{\"1031\":1}}],[\"逻辑非\",{\"1\":{\"1031\":1}}],[\"逻辑或\",{\"1\":{\"1031\":1}}],[\"逻辑与\",{\"1\":{\"1031\":1}}],[\"逻辑运算符\",{\"0\":{\"1031\":1,\"1989\":1},\"1\":{\"1360\":1,\"1985\":1,\"1989\":1}}],[\"逻辑删除操作的\",{\"1\":{\"2231\":1}}],[\"逻辑删除\",{\"0\":{\"979\":1,\"2231\":1},\"1\":{\"2231\":1,\"2234\":1}}],[\"逻辑结构是\",{\"1\":{\"261\":2}}],[\"逻辑结构和物理结构\",{\"0\":{\"227\":1},\"1\":{\"302\":1}}],[\"逻辑结构\",{\"1\":{\"225\":1,\"302\":2}}],[\"逻辑错误不属于error与exception错误\",{\"1\":{\"29\":1}}],[\"增删元素\",{\"0\":{\"1571\":1}}],[\"增删改的操作都是使用update方法int\",{\"1\":{\"2674\":1}}],[\"增删改\",{\"1\":{\"1266\":1,\"1275\":1}}],[\"增强子类\",{\"1\":{\"2612\":1}}],[\"增强后的效果\",{\"1\":{\"2605\":1}}],[\"增强代码\",{\"1\":{\"2605\":2}}],[\"增强代码可维护性\",{\"0\":{\"1948\":1}}],[\"增强流\",{\"1\":{\"422\":2}}],[\"增强for或迭代器\",{\"1\":{\"292\":3}}],[\"增强for循环\",{\"0\":{\"270\":1,\"1389\":1},\"1\":{\"220\":2,\"249\":1,\"276\":1}}],[\"增\",{\"0\":{\"2674\":1},\"1\":{\"396\":1}}],[\"增加id为1\",{\"1\":{\"2827\":1}}],[\"增加的功能\",{\"1\":{\"2623\":1}}],[\"增加的映射也都写到一个映射文件中\",{\"1\":{\"2440\":1}}],[\"增加一个数字\",{\"1\":{\"2088\":1}}],[\"增加响应内容\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"增加删除节点\",{\"0\":{\"1502\":1}}],[\"增加数据\",{\"1\":{\"933\":1}}],[\"增加其值的不确定性\",{\"1\":{\"294\":1}}],[\"增加\",{\"0\":{\"2361\":1},\"1\":{\"219\":2,\"251\":1,\"260\":1,\"292\":1,\"395\":1,\"920\":1,\"1262\":1,\"1505\":1,\"2066\":1}}],[\"增加元素\",{\"0\":{\"1504\":1},\"1\":{\"219\":1,\"228\":1,\"251\":1}}],[\"移动设备优先的流式网格系统\",{\"1\":{\"1599\":1}}],[\"移动设备优先\",{\"1\":{\"1559\":1}}],[\"移动窗口\",{\"1\":{\"1374\":1}}],[\"移动当前方法块\",{\"1\":{\"615\":1}}],[\"移动当前行\",{\"1\":{\"615\":1}}],[\"移动代码\",{\"0\":{\"615\":1}}],[\"移动端\",{\"1\":{\"61\":1}}],[\"移除最长时间不被使用的对象\",{\"1\":{\"2481\":1}}],[\"移除最后一个元素\",{\"0\":{\"1394\":1},\"1\":{\"1394\":1}}],[\"移除最后一个的元素并且将元素返回\",{\"1\":{\"260\":1}}],[\"移除指定域中的值\",{\"1\":{\"2019\":1}}],[\"移除指定的key\",{\"1\":{\"292\":1}}],[\"移除指定的元素\",{\"1\":{\"251\":2}}],[\"移除指定的坐标元素\",{\"1\":{\"251\":2}}],[\"移除对象中的值\",{\"0\":{\"2019\":1}}],[\"移除域中的互数据\",{\"1\":{\"1917\":1,\"1921\":1}}],[\"移除当前元素本身\",{\"1\":{\"1571\":1}}],[\"移除当前标签\",{\"1\":{\"1571\":1}}],[\"移除集合中的第一个元素\",{\"1\":{\"1288\":1}}],[\"移除第一个的元素并且将元素返回\",{\"1\":{\"260\":1}}],[\"移除某个元素\",{\"1\":{\"219\":1}}],[\"移除某一个元素\",{\"1\":{\"219\":1}}],[\"清新简洁版\",{\"1\":{\"2501\":1}}],[\"清除上一次选择省份时\",{\"1\":{\"2176\":1}}],[\"清除内容周围的区域\",{\"1\":{\"1527\":1}}],[\"清除边框外的区域\",{\"1\":{\"1527\":1}}],[\"清除浮动\",{\"0\":{\"1522\":1}}],[\"清理和销毁\",{\"1\":{\"1728\":1}}],[\"清理工作\",{\"1\":{\"717\":1}}],[\"清理\",{\"0\":{\"662\":1}}],[\"清空response存放响应正文数据的缓冲区\",{\"1\":{\"1854\":1}}],[\"清空不会对tomcat运行带来影响\",{\"1\":{\"1744\":1}}],[\"清空字标签remove\",{\"1\":{\"1571\":1}}],[\"清空内容\",{\"1\":{\"1570\":1}}],[\"清空还原点列表\",{\"1\":{\"1235\":1}}],[\"清空batch容器\",{\"1\":{\"1231\":2,\"1235\":2}}],[\"清空数据\",{\"1\":{\"967\":1}}],[\"清空表\",{\"0\":{\"967\":1}}],[\"清空元素\",{\"1\":{\"327\":1,\"337\":1}}],[\"清空\",{\"1\":{\"292\":1}}],[\"清空集合\",{\"1\":{\"219\":1,\"260\":1}}],[\"清空集合元素\",{\"1\":{\"219\":1}}],[\"清晰明确\",{\"1\":{\"190\":1}}],[\"整体配置文件如下\",{\"1\":{\"2903\":1}}],[\"整体配置效果如下\",{\"1\":{\"2898\":1}}],[\"整合\",{\"0\":{\"3185\":1}}],[\"整合spring\",{\"0\":{\"2911\":1}}],[\"整合springmvc\",{\"0\":{\"2879\":1,\"2910\":1},\"1\":{\"217\":1,\"2925\":1}}],[\"整合mybatis\",{\"0\":{\"2907\":1}}],[\"整合junit\",{\"0\":{\"2525\":1}}],[\"整数值\",{\"1\":{\"2301\":2}}],[\"整数类型下\",{\"1\":{\"2289\":1}}],[\"整数类型\",{\"0\":{\"939\":1},\"1\":{\"939\":1}}],[\"整型数最小的位数\",{\"1\":{\"2029\":1}}],[\"整型数最大的位数\",{\"1\":{\"2029\":2}}],[\"整个vue的根组件\",{\"1\":{\"1686\":1}}],[\"整个事务回滚\",{\"1\":{\"1099\":1}}],[\"整个目录转码\",{\"1\":{\"98\":1}}],[\"静态文件有很多\",{\"1\":{\"2790\":1}}],[\"静态图片文件或静态\",{\"1\":{\"1994\":1}}],[\"静态引入\",{\"1\":{\"1962\":1}}],[\"静态引入使用的是\",{\"1\":{\"1962\":1}}],[\"静态引入和动态引入\",{\"0\":{\"1962\":1}}],[\"静态资源放行\",{\"0\":{\"2902\":1},\"1\":{\"2789\":2,\"2790\":1}}],[\"静态资源\",{\"1\":{\"1785\":1,\"1996\":1}}],[\"静态资源和动态资源区分\",{\"0\":{\"1785\":1}}],[\"静态资源文件\",{\"1\":{\"1686\":1,\"1772\":1}}],[\"静态资源文件夹\",{\"1\":{\"1686\":1}}],[\"静态资源等等\",{\"1\":{\"1686\":1}}],[\"静态资源的放行管理\",{\"0\":{\"2782\":1,\"3180\":1},\"1\":{\"217\":1,\"2902\":1}}],[\"静态效果\",{\"1\":{\"1532\":1}}],[\"静态定位\",{\"0\":{\"1532\":1},\"1\":{\"1532\":1}}],[\"静态代理中代理类与被代理类都需要实现同一个接口\",{\"1\":{\"2606\":1}}],[\"静态代理\",{\"0\":{\"2604\":1}}],[\"静态代理与动态代理\",{\"0\":{\"2603\":1,\"3173\":1},\"1\":{\"216\":1,\"2619\":1}}],[\"静态代码块会在类进入内存时执行\",{\"1\":{\"1217\":1}}],[\"静态方法来获取流\",{\"1\":{\"860\":1}}],[\"静态方法不能被继承\",{\"1\":{\"822\":1}}],[\"静态方法通过接口名调用\",{\"1\":{\"822\":1}}],[\"静态方法只能通过接口名直接使用\",{\"1\":{\"820\":1}}],[\"静态方法\",{\"0\":{\"819\":1,\"829\":1},\"1\":{\"814\":2,\"821\":1,\"827\":1}}],[\"静态方法属性优先于对象之前加载\",{\"1\":{\"240\":1}}],[\"静态常量\",{\"1\":{\"814\":3}}],[\"静态语言\",{\"0\":{\"573\":1}}],[\"静态同步方法的同步监视器是\",{\"1\":{\"472\":1}}],[\"静态导入\",{\"0\":{\"368\":1}}],[\"路径映射与\",{\"0\":{\"3182\":1}}],[\"路径映射与restful风格\",{\"0\":{\"2808\":1},\"1\":{\"217\":1}}],[\"路径的使用和记忆建议\",{\"0\":{\"1879\":1}}],[\"路径匹配\",{\"0\":{\"1840\":1}}],[\"路径\",{\"1\":{\"1838\":1,\"1839\":1,\"1840\":1,\"1841\":1,\"1842\":1,\"1862\":1,\"1869\":2}}],[\"路径2\",{\"1\":{\"1718\":2}}],[\"路径1\",{\"1\":{\"1718\":2}}],[\"路径相同时先声明的优先\",{\"0\":{\"696\":1}}],[\"路径最短则优先\",{\"0\":{\"695\":1}}],[\"路径问题\",{\"0\":{\"1866\":1,\"3133\":1},\"1\":{\"210\":1}}],[\"路由出口\",{\"1\":{\"1718\":1}}],[\"路由名\",{\"1\":{\"1718\":3}}],[\"路由的使用\",{\"0\":{\"1718\":1}}],[\"路由的概念\",{\"0\":{\"1717\":1}}],[\"路由\",{\"0\":{\"1716\":1,\"3118\":1},\"1\":{\"116\":1}}],[\"乱码的处理\",{\"0\":{\"1809\":1,\"3128\":1},\"1\":{\"210\":1}}],[\"资源\",{\"1\":{\"1255\":1}}],[\"资源未找到\",{\"1\":{\"192\":1}}],[\"资源路径\",{\"1\":{\"176\":1}}],[\"状态cookie当cookie对象创建后默认为状态cookie\",{\"1\":{\"1890\":1}}],[\"状态\",{\"0\":{\"734\":1},\"1\":{\"489\":1,\"490\":1}}],[\"状态码明细\",{\"0\":{\"193\":1}}],[\"状态码\",{\"1\":{\"192\":1,\"1804\":1}}],[\"状态值\",{\"1\":{\"88\":1}}],[\"经典使用方法\",{\"0\":{\"2131\":1}}],[\"经典问题\",{\"0\":{\"1150\":1}}],[\"经典mysql复制\",{\"1\":{\"922\":1}}],[\"经典面试题\",{\"0\":{\"311\":1}}],[\"经由非加密的http代理服务器\",{\"1\":{\"187\":1}}],[\"经过设置后\",{\"1\":{\"2478\":1}}],[\"经过以上的测试\",{\"1\":{\"2223\":1}}],[\"经过我们查看转译之后的文件和通过浏览器查看源代码发现\",{\"1\":{\"1952\":1}}],[\"经过服务器上程序处理后\",{\"1\":{\"1329\":1}}],[\"经过服务器解析\",{\"1\":{\"130\":1}}],[\"经过多年的完善与发展\",{\"1\":{\"919\":1}}],[\"经过下面的配置\",{\"1\":{\"93\":1}}],[\"来接收此次请求的response对象\",{\"1\":{\"2862\":1}}],[\"来访问到不同的controller处理单元\",{\"1\":{\"2827\":1}}],[\"来区别是在每个\",{\"1\":{\"2623\":1}}],[\"来增强person类\",{\"1\":{\"2605\":1}}],[\"来完成以前只可能由\",{\"1\":{\"2520\":1}}],[\"来操作\",{\"1\":{\"2508\":1}}],[\"来处理我们的请求\",{\"1\":{\"2780\":1}}],[\"来处理\",{\"1\":{\"2457\":1}}],[\"来阻止默认的关闭行为\",{\"1\":{\"2318\":1}}],[\"来跳过这个步骤\",{\"1\":{\"2317\":1}}],[\"来自定义输出样式\",{\"1\":{\"2301\":1}}],[\"来设置\",{\"1\":{\"1601\":1}}],[\"来扩展基于http协议的web服务器\",{\"1\":{\"1548\":1}}],[\"来调用函数或计算表达式\",{\"1\":{\"1452\":1}}],[\"来表现不同的形态\",{\"1\":{\"1333\":1}}],[\"来表示\",{\"1\":{\"917\":1}}],[\"来进行参数的占位\",{\"1\":{\"2352\":1}}],[\"来进行整体提交\",{\"1\":{\"1233\":1}}],[\"来进行添加\",{\"1\":{\"279\":1}}],[\"来禁止自动提交\",{\"1\":{\"1233\":1}}],[\"来实现\",{\"1\":{\"900\":1}}],[\"来计算两个日期时间的差\",{\"1\":{\"899\":1}}],[\"来解决冲突\",{\"1\":{\"786\":1}}],[\"来在代码任意部分触发提示\",{\"1\":{\"603\":1}}],[\"来到了同步代码块\",{\"1\":{\"467\":2}}],[\"来同步结果\",{\"1\":{\"334\":1}}],[\"来决定value的存放位置\",{\"1\":{\"294\":1}}],[\"来代替资源名称\",{\"1\":{\"186\":1}}],[\"来导出\",{\"1\":{\"101\":1,\"105\":1,\"108\":1}}],[\"向服务器发送的数据\",{\"1\":{\"2155\":1}}],[\"向服务器索要与get请求相一致的响应\",{\"1\":{\"182\":1}}],[\"向浏览器响应数据\",{\"1\":{\"2115\":1,\"2131\":1,\"2170\":1,\"2171\":1}}],[\"向域对象放入值\",{\"0\":{\"2018\":1}}],[\"向域对象中放入数据\",{\"1\":{\"2017\":1}}],[\"向域中放入数据\",{\"1\":{\"1991\":1}}],[\"向pagecontext域中放数据\",{\"1\":{\"1972\":1,\"1980\":1,\"1981\":1}}],[\"向application域中\",{\"1\":{\"2088\":2}}],[\"向application域中放入数据\",{\"1\":{\"1972\":1}}],[\"向application域中添加数据\",{\"1\":{\"1925\":1}}],[\"向请求域中放入数据\",{\"1\":{\"1972\":1}}],[\"向三个域中放入数据\",{\"1\":{\"1972\":1}}],[\"向用户端响应数据\",{\"1\":{\"1927\":1}}],[\"向request域中添加数据\",{\"1\":{\"1917\":1}}],[\"向session域中放入数据\",{\"1\":{\"1972\":1}}],[\"向session域中添加数据\",{\"1\":{\"1921\":1}}],[\"向session中写入数据\",{\"1\":{\"1897\":1}}],[\"向session中写入\",{\"1\":{\"1897\":1}}],[\"向servletcontext对象中增加数据\",{\"1\":{\"1831\":1}}],[\"向全局容器中存放数据\",{\"1\":{\"1829\":1}}],[\"向左浮动直到碰到包含框\",{\"1\":{\"1519\":1}}],[\"向左浮动时\",{\"1\":{\"1519\":1}}],[\"向右浮动时\",{\"1\":{\"1519\":1}}],[\"向后台发送一个ajax异步请求\",{\"1\":{\"2132\":2}}],[\"向后增加标签\",{\"1\":{\"1571\":1}}],[\"向后\",{\"1\":{\"1463\":1}}],[\"向后跳转\",{\"1\":{\"1463\":1}}],[\"向前增加标签\",{\"1\":{\"1571\":1}}],[\"向前\",{\"1\":{\"1463\":1}}],[\"向前跳转\",{\"1\":{\"1463\":1}}],[\"向第一个位置添加元素\",{\"0\":{\"1398\":1},\"1\":{\"1398\":1}}],[\"向客户端发送信息\",{\"1\":{\"510\":1}}],[\"向下传递\",{\"1\":{\"1250\":1}}],[\"向下移动\",{\"1\":{\"615\":2}}],[\"向下转型\",{\"1\":{\"372\":1}}],[\"向下取值\",{\"1\":{\"367\":1,\"368\":1}}],[\"向上取值\",{\"1\":{\"367\":1,\"368\":1}}],[\"向容器中添加元素时\",{\"1\":{\"313\":1}}],[\"向这个集合中存入学生的成绩\",{\"1\":{\"234\":2}}],[\"向web服务器发送options请求\",{\"1\":{\"186\":1}}],[\"向指定接口发送数据\",{\"1\":{\"515\":1,\"516\":1,\"517\":1,\"518\":1}}],[\"向指定资源位置上传其最新内容\",{\"1\":{\"183\":1}}],[\"向指定资源提交数据\",{\"1\":{\"181\":1}}],[\"向指定的资源发出\",{\"1\":{\"180\":1}}],[\"k9\",{\"0\":{\"2973\":1}}],[\"k8新特性\",{\"0\":{\"2972\":1}}],[\"k新特性\",{\"0\":{\"2951\":1}}],[\"kai\",{\"1\":{\"1392\":2}}],[\"k=v\",{\"1\":{\"1293\":1,\"2301\":1}}],[\"king\",{\"1\":{\"1211\":1}}],[\"k3\",{\"1\":{\"1135\":2}}],[\"k2\",{\"1\":{\"1135\":3}}],[\"k17新特性\",{\"0\":{\"2973\":1}}],[\"k1\",{\"1\":{\"1135\":4}}],[\"k++\",{\"1\":{\"364\":1}}],[\"k>\",{\"1\":{\"288\":1}}],[\"k\",{\"1\":{\"279\":9,\"292\":2,\"294\":12,\"364\":3,\"374\":2,\"905\":2,\"1093\":1,\"1417\":5,\"2030\":2}}],[\"kk\",{\"1\":{\"265\":2,\"266\":2}}],[\"khtml\",{\"1\":{\"177\":1}}],[\"ket\",{\"1\":{\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1}}],[\"keep\",{\"1\":{\"159\":1,\"164\":1}}],[\"keyproperty\",{\"1\":{\"2410\":1}}],[\"keyproperty=\",{\"1\":{\"2409\":2,\"2410\":2}}],[\"key最好不要使用常用类型\",{\"1\":{\"2332\":1}}],[\"keycode值\",{\"1\":{\"1665\":1}}],[\"keyup\",{\"1\":{\"1664\":2}}],[\"key表示的是对象key键值名称\",{\"1\":{\"1629\":1}}],[\"key是用来给每一项值加元素标识\",{\"1\":{\"1628\":1}}],[\"keys\",{\"1\":{\"763\":1}}],[\"keyset\",{\"1\":{\"291\":1,\"292\":3,\"859\":1}}],[\"keygen\",{\"1\":{\"763\":1}}],[\"key不会替换\",{\"1\":{\"290\":1}}],[\"key=value\",{\"1\":{\"2132\":4}}],[\"key=\",{\"1\":{\"279\":2,\"1628\":1,\"1629\":1,\"1631\":2,\"2566\":3}}],[\"key\",{\"0\":{\"763\":1,\"984\":1,\"990\":1,\"996\":1},\"1\":{\"142\":2,\"279\":19,\"288\":2,\"291\":1,\"292\":5,\"294\":19,\"762\":1,\"763\":3,\"981\":2,\"987\":3,\"988\":5,\"993\":1,\"994\":5,\"999\":1,\"1000\":1,\"1001\":5,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1061\":1,\"1064\":1,\"1081\":1,\"1211\":4,\"1216\":2,\"1239\":1,\"1279\":2,\"1451\":2,\"1629\":2,\"1801\":1,\"1829\":4,\"1833\":1,\"1887\":1,\"1898\":3,\"2179\":1,\"2182\":1,\"2417\":4,\"2493\":9,\"2584\":1,\"2695\":2,\"2801\":1,\"2835\":1,\"2881\":1}}],[\"keywords\",{\"1\":{\"92\":1,\"1293\":1}}],[\"默认每次请求都会去找dispatcherservlet\",{\"1\":{\"2777\":1}}],[\"默认打开的是\",{\"1\":{\"2753\":1}}],[\"默认就是可以不设置\",{\"1\":{\"2710\":1}}],[\"默认mysql使用的是\",{\"1\":{\"2693\":1}}],[\"默认并不开启\",{\"1\":{\"2477\":1}}],[\"默认开启\",{\"1\":{\"2473\":1,\"2474\":1}}],[\"默认开启文件缓存即可\",{\"1\":{\"725\":1}}],[\"默认会返回int类型数据\",{\"1\":{\"2360\":1}}],[\"默认会在相对路径之前补充\",{\"1\":{\"1869\":1}}],[\"默认30s\",{\"1\":{\"2301\":1}}],[\"默认false\",{\"1\":{\"2301\":3}}],[\"默认flase\",{\"1\":{\"2301\":1}}],[\"默认boolean\",{\"1\":{\"2301\":1}}],[\"默认dd\",{\"1\":{\"2301\":1}}],[\"默认true\",{\"1\":{\"2301\":2}}],[\"默认60s\",{\"1\":{\"2301\":1}}],[\"默认64\",{\"1\":{\"279\":1,\"280\":1}}],[\"默认的读取路径为\",{\"1\":{\"2763\":1}}],[\"默认的spring事务传播级别\",{\"1\":{\"2727\":1}}],[\"默认的是velocity引擎模板\",{\"1\":{\"2293\":1}}],[\"默认的装填因子\",{\"1\":{\"294\":1}}],[\"默认使用\",{\"1\":{\"2157\":1}}],[\"默认设置为true\",{\"1\":{\"2138\":1}}],[\"默认时区\",{\"1\":{\"2030\":1}}],[\"默认超时时间为30分钟\",{\"1\":{\"1900\":1}}],[\"默认部署方式\",{\"1\":{\"1779\":1}}],[\"默认只开启了处理http协议的连接器\",{\"1\":{\"1765\":1}}],[\"默认安装方式就是npm\",{\"1\":{\"1683\":1}}],[\"默认去官网下载资源\",{\"1\":{\"1681\":1}}],[\"默认都是获取冒泡阶段的\",{\"1\":{\"1661\":1}}],[\"默认都是左小右大\",{\"1\":{\"288\":1}}],[\"默认输入会有该方法的事件参数\",{\"1\":{\"1647\":1}}],[\"默认提示\",{\"1\":{\"1350\":1}}],[\"默认提供的四个数据库之一的名字\",{\"1\":{\"926\":1}}],[\"默认选中\",{\"1\":{\"1335\":1,\"1340\":1}}],[\"默认效果也是在自身页面打开\",{\"1\":{\"1312\":1}}],[\"默认不配置则为积极加载\",{\"1\":{\"2433\":1}}],[\"默认不写的话就是center居中效果\",{\"1\":{\"1300\":1}}],[\"默认不开启公平策略\",{\"1\":{\"478\":1}}],[\"默认格式为iso8601\",{\"1\":{\"1287\":1}}],[\"默认约束\",{\"0\":{\"1018\":1}}],[\"默认值为\",{\"1\":{\"2155\":1,\"2714\":1,\"2715\":1}}],[\"默认值为true\",{\"1\":{\"2155\":2}}],[\"默认值是\",{\"1\":{\"2301\":1}}],[\"默认值是false\",{\"1\":{\"2149\":1}}],[\"默认值是多少\",{\"1\":{\"311\":1}}],[\"默认值\",{\"1\":{\"1039\":1,\"1041\":1,\"1347\":1,\"1713\":2,\"2029\":1,\"2030\":1,\"2481\":1,\"2552\":1,\"2840\":1}}],[\"默认值约束\",{\"1\":{\"981\":1}}],[\"默认在最后添加\",{\"1\":{\"958\":1}}],[\"默认在c\",{\"1\":{\"675\":1}}],[\"默认有四个自带的数据库\",{\"1\":{\"926\":1}}],[\"默认存储引擎\",{\"1\":{\"923\":1}}],[\"默认验证插件\",{\"1\":{\"923\":1}}],[\"默认方法可以被继承\",{\"1\":{\"822\":1}}],[\"默认方法通过实例调用\",{\"1\":{\"822\":1}}],[\"默认方法\",{\"0\":{\"815\":1},\"1\":{\"814\":2}}],[\"默认编辑器\",{\"1\":{\"725\":1}}],[\"默认是关闭的容器加载时初始化对象到容器中\",{\"1\":{\"2552\":1}}],[\"默认是没有配置的\",{\"1\":{\"2314\":1}}],[\"默认是没有勾选的\",{\"1\":{\"676\":1}}],[\"默认是java\",{\"1\":{\"1959\":1}}],[\"默认是jar包\",{\"1\":{\"714\":1,\"715\":1}}],[\"默认是compile\",{\"1\":{\"680\":1,\"688\":1}}],[\"默认是8\",{\"1\":{\"279\":1,\"280\":1}}],[\"默认情况下只要保证形参名与参数名一致\",{\"1\":{\"2794\":1}}],[\"默认情况下配置文件名需要遵循<servlet\",{\"1\":{\"2763\":1}}],[\"默认情况下sqlsession\",{\"1\":{\"2360\":1}}],[\"默认情况下它会关闭连接\",{\"1\":{\"2318\":1}}],[\"默认情况下mybatis会自动按照顺序寻找使用的log框架\",{\"1\":{\"2315\":1}}],[\"默认情况下不写method属性的时候就相当于method=\",{\"1\":{\"1330\":1}}],[\"默认情况下表格是没有边框的\",{\"1\":{\"1319\":1}}],[\"默认情况下\",{\"1\":{\"555\":1,\"620\":1,\"973\":1,\"1309\":1,\"1758\":1,\"2153\":1,\"2155\":1,\"2317\":1,\"2472\":1,\"2587\":1,\"2588\":1,\"2595\":1,\"2702\":1}}],[\"默认为null\",{\"1\":{\"2481\":1}}],[\"默认为积极加载则无论是否使用\",{\"1\":{\"2434\":1}}],[\"默认为空\",{\"1\":{\"2301\":6}}],[\"默认为com\",{\"1\":{\"2301\":2}}],[\"默认为catalina\",{\"1\":{\"1764\":1}}],[\"默认为0\",{\"1\":{\"2234\":1,\"2301\":1}}],[\"默认为当前页地址\",{\"1\":{\"2135\":1}}],[\"默认为\",{\"1\":{\"1777\":1}}],[\"默认为8080\",{\"1\":{\"1777\":1}}],[\"默认为8005\",{\"1\":{\"1763\":1}}],[\"默认为true\",{\"1\":{\"1767\":2,\"2139\":1,\"2148\":1,\"2153\":1,\"2155\":1}}],[\"默认为200个\",{\"1\":{\"1765\":1}}],[\"默认为http\",{\"1\":{\"1765\":1}}],[\"默认为shutdown\",{\"1\":{\"1763\":1}}],[\"默认为get\",{\"1\":{\"1330\":1,\"2136\":1}}],[\"默认为false\",{\"1\":{\"408\":1,\"2139\":1,\"2149\":1}}],[\"默认为字符型\",{\"1\":{\"181\":1}}],[\"默认按照周日是第一天\",{\"1\":{\"375\":1}}],[\"默认长度为11\",{\"1\":{\"351\":1}}],[\"默认\",{\"0\":{\"689\":1,\"1779\":1,\"2719\":1,\"2727\":1},\"1\":{\"176\":1,\"2301\":3,\"2481\":1,\"2725\":1}}],[\"默认网关与上述虚拟机软件配置一致\",{\"1\":{\"49\":1}}],[\"比其他的框架更具扩展性和灵活性\",{\"1\":{\"2741\":1}}],[\"比普通文本更加厉害标记\",{\"1\":{\"1325\":1}}],[\"比起需要多次传递sql命令本身\",{\"1\":{\"1146\":1}}],[\"比标准时间早八个小时\",{\"1\":{\"901\":1}}],[\"比对执行的时间\",{\"1\":{\"888\":1}}],[\"比较麻烦\",{\"1\":{\"2874\":1}}],[\"比较字符串s1\",{\"1\":{\"1091\":1}}],[\"比较运算符推荐写成字母形式\",{\"1\":{\"1988\":1}}],[\"比较运算符\",{\"0\":{\"1030\":1,\"1988\":1},\"1\":{\"1360\":1,\"1985\":1,\"1988\":1}}],[\"比较适合大型的分布式应用系统\",{\"1\":{\"919\":1}}],[\"比较流行的数据库管理系统有\",{\"1\":{\"910\":1}}],[\"比较\",{\"0\":{\"896\":1}}],[\"比较常用的就是集合的循环\",{\"1\":{\"856\":1}}],[\"比较的就是对象的地址\",{\"1\":{\"364\":1}}],[\"比较的是底层封装的那个value的值\",{\"1\":{\"364\":1}}],[\"比较的是内容是否相等\",{\"1\":{\"292\":1}}],[\"比较的是地址是否一致\",{\"1\":{\"292\":1}}],[\"比较两个文件的路径\",{\"1\":{\"386\":1,\"387\":1,\"389\":1}}],[\"比较两个对象的地址\",{\"1\":{\"386\":1,\"387\":1,\"389\":1}}],[\"比较两个integer的值\",{\"1\":{\"364\":1}}],[\"比较两个学生\",{\"1\":{\"274\":1,\"275\":1}}],[\"比较年龄\",{\"1\":{\"275\":1}}],[\"比较器类\",{\"1\":{\"287\":1}}],[\"比较器|查看比较器的使用\",{\"1\":{\"284\":1,\"287\":1}}],[\"比较器\",{\"0\":{\"271\":1,\"3005\":1},\"1\":{\"37\":1}}],[\"比如服务器的内存\",{\"1\":{\"2470\":1}}],[\"比如mgr参考empno\",{\"1\":{\"2440\":1}}],[\"比如集合\",{\"1\":{\"2420\":1}}],[\"比如javabean类\",{\"1\":{\"2420\":1}}],[\"比如在查询结果映射对象中包括pojo和list实现一对一查询和一对多查询\",{\"1\":{\"2419\":1}}],[\"比如在设计一个订单数据表的时候\",{\"1\":{\"1048\":1}}],[\"比如结算构造车后\",{\"1\":{\"2408\":1}}],[\"比如uid的话\",{\"1\":{\"2226\":1}}],[\"比如数据库的表我们该为t\",{\"1\":{\"2223\":1}}],[\"比如<\",{\"1\":{\"2170\":1,\"2407\":1}}],[\"比如和数据库服务器进行数据信息交换\",{\"1\":{\"2101\":1}}],[\"比如你最小化了idea窗口\",{\"1\":{\"1777\":1}}],[\"比如你放入的是第13个\",{\"1\":{\"294\":1}}],[\"比如我们在javase阶段学习过线程的生命周期\",{\"1\":{\"1728\":1}}],[\"比如我们上面写的hellovue\",{\"1\":{\"1709\":1}}],[\"比如我们设置ctrl修饰符\",{\"1\":{\"1668\":1}}],[\"比如我们使用getmethods\",{\"1\":{\"597\":1}}],[\"比如一些文章\",{\"1\":{\"1641\":1}}],[\"比如三元表达式\",{\"1\":{\"1617\":1}}],[\"比如简单判断\",{\"1\":{\"1617\":1}}],[\"比如按下鼠标\",{\"1\":{\"1374\":1}}],[\"比如perl遗留的速度问题\",{\"1\":{\"1372\":1}}],[\"比如空格\",{\"1\":{\"1298\":1}}],[\"比如log4j\",{\"1\":{\"1283\":1}}],[\"比如文本\",{\"1\":{\"1295\":1}}],[\"比如文\",{\"1\":{\"1198\":1}}],[\"比如姓名\",{\"1\":{\"1048\":1}}],[\"比如要设计一个订单信息表\",{\"1\":{\"1047\":1}}],[\"比如某些数据库系统中需要用到\",{\"1\":{\"1046\":1}}],[\"比如arraylist\",{\"1\":{\"878\":1}}],[\"比如排队买票使用的就是队列\",{\"1\":{\"321\":1}}],[\"比如说可以都是数字\",{\"1\":{\"226\":2}}],[\"比如\",{\"1\":{\"178\":1,\"462\":1,\"880\":1,\"1198\":1,\"1249\":1,\"2037\":1,\"2318\":1,\"2330\":1,\"2332\":2}}],[\"比如big5\",{\"1\":{\"177\":1}}],[\"比如图片\",{\"1\":{\"173\":1}}],[\"主订单的主键确定后\",{\"1\":{\"2408\":1}}],[\"主机\",{\"1\":{\"2168\":1}}],[\"主机名\",{\"1\":{\"1115\":2,\"1116\":2,\"1117\":1,\"1118\":1,\"1119\":1,\"1122\":1,\"1799\":1}}],[\"主外键关系\",{\"1\":{\"1055\":1}}],[\"主表被参照字段名\",{\"1\":{\"1000\":1}}],[\"主表名\",{\"1\":{\"983\":1,\"1000\":1}}],[\"主键关联或者外键关联\",{\"1\":{\"2440\":1}}],[\"主键自定义\",{\"1\":{\"2408\":1}}],[\"主键自增\",{\"1\":{\"939\":1}}],[\"主键生成策略\",{\"1\":{\"2229\":1}}],[\"主键策略\",{\"0\":{\"2227\":1}}],[\"主键id\",{\"1\":{\"2182\":1}}],[\"主键冲突\",{\"1\":{\"1216\":1}}],[\"主键会自动创建唯一索引\",{\"1\":{\"1129\":1}}],[\"主键\",{\"1\":{\"983\":1,\"2408\":1}}],[\"主键字段\",{\"1\":{\"983\":1}}],[\"主键约束列\",{\"1\":{\"986\":1}}],[\"主键约束相当于唯一约束+非空约束的组合\",{\"1\":{\"986\":1}}],[\"主键约束\",{\"0\":{\"984\":1},\"1\":{\"981\":1}}],[\"主干分支\",{\"0\":{\"802\":1}}],[\"主程序\",{\"1\":{\"689\":1}}],[\"主程序和测试程序都生效且实时加载\",{\"1\":{\"680\":1,\"688\":1}}],[\"主线程===\",{\"1\":{\"460\":1}}],[\"主线程停止的时候\",{\"1\":{\"460\":1}}],[\"主线程\",{\"1\":{\"439\":1,\"440\":1,\"441\":1,\"489\":1,\"490\":1}}],[\"主流的文本编辑器也大都支持编辑操作的历史记录功能\",{\"1\":{\"302\":1}}],[\"主数组扩容为2倍\",{\"1\":{\"294\":1}}],[\"主数组\",{\"1\":{\"294\":1}}],[\"主要关注接口功能即可\",{\"1\":{\"2522\":1}}],[\"主要面向通用缓存\",{\"1\":{\"2482\":1}}],[\"主要解决数据显示格式问题\",{\"1\":{\"2027\":1}}],[\"主要技术\",{\"1\":{\"1786\":1}}],[\"主要有两大类\",{\"1\":{\"1744\":1}}],[\"主要以各个独立页面为主\",{\"1\":{\"1686\":1}}],[\"主要以function作为函数关键字\",{\"1\":{\"1368\":1}}],[\"主要功能在于\",{\"1\":{\"1548\":1}}],[\"主要目的是为了解决服务器端语言\",{\"1\":{\"1372\":1}}],[\"主要记录当前的想法\",{\"1\":{\"1191\":1}}],[\"主要针对联合主键而言\",{\"1\":{\"1047\":1}}],[\"主要的不同之处在于存储方式\",{\"1\":{\"941\":1}}],[\"主要分为网状数据库\",{\"1\":{\"916\":1}}],[\"主要负责管理正在开发过程中的代码\",{\"1\":{\"803\":1}}],[\"主要负责管理正在运行的生产环境代码\",{\"1\":{\"802\":1}}],[\"主要动态语言\",{\"1\":{\"572\":1}}],[\"主要是对请求域传递数据进行了api上的封装降低controller和servlet之间的耦合度\",{\"1\":{\"2928\":1}}],[\"主要是对于\",{\"1\":{\"2433\":1}}],[\"主要是用来存放tomcat的命令文件\",{\"1\":{\"1744\":1}}],[\"主要是因为缺少关联条件或者关联条件不准确\",{\"1\":{\"1054\":1}}],[\"主要是因为其具有以下几方面优点\",{\"1\":{\"920\":1}}],[\"主要是性能损失\",{\"1\":{\"567\":1}}],[\"主要是其动态性\",{\"1\":{\"567\":1}}],[\"主要就是为了避免null检查\",{\"1\":{\"851\":1}}],[\"主要就是\",{\"1\":{\"462\":1}}],[\"主要用来定义日期的格式\",{\"1\":{\"374\":1}}],[\"主要用于测试或诊断\",{\"1\":{\"185\":1}}],[\"主要还是对于根节点的读取顺序\",{\"1\":{\"288\":1}}],[\"主要由于\",{\"1\":{\"265\":1}}],[\"主动推送其他资源\",{\"1\":{\"169\":1}}],[\"主张把封装数据的\",{\"1\":{\"120\":1}}],[\"首字母前面加下划线\",{\"1\":{\"2335\":1}}],[\"首字母全部转小写\",{\"1\":{\"2335\":1}}],[\"首字母小写\",{\"1\":{\"983\":1}}],[\"首尾三个\",{\"1\":{\"1198\":1}}],[\"首先根据逻辑视图名解析成物理视图名\",{\"1\":{\"2774\":1}}],[\"首先读取在\",{\"1\":{\"2333\":1}}],[\"首先来看看querywrapper的使用\",{\"1\":{\"2252\":1}}],[\"首先用户向http服务器提交一个处理请求\",{\"1\":{\"2101\":1}}],[\"首先明白这几个概念\",{\"1\":{\"2090\":1}}],[\"首先我们要知道npm\",{\"1\":{\"1687\":1}}],[\"首先我们需要安装相关loader插件\",{\"1\":{\"115\":1}}],[\"首先调用class\",{\"1\":{\"1271\":1}}],[\"首先\",{\"1\":{\"859\":1}}],[\"首页\",{\"1\":{\"808\":1}}],[\"首部压缩\",{\"0\":{\"168\":1}}],[\"到达最大不活动时间\",{\"1\":{\"1920\":1}}],[\"到一个新的模块中\",{\"1\":{\"1558\":1}}],[\"到指定日期的毫秒数\",{\"1\":{\"1415\":1}}],[\"到哪里去找映射文件\",{\"1\":{\"2319\":1}}],[\"到哪里去找到这些语句\",{\"1\":{\"2319\":1}}],[\"到哪里结束\",{\"1\":{\"1406\":1}}],[\"到哪个索引结束\",{\"1\":{\"1399\":1}}],[\"到最初状态\",{\"1\":{\"1099\":1}}],[\"到现在的纳秒\",{\"1\":{\"898\":1}}],[\"到github上\",{\"1\":{\"763\":1}}],[\"到服务器上的指定目录下\",{\"1\":{\"659\":1}}],[\"到\",{\"1\":{\"363\":1,\"494\":1,\"1582\":1}}],[\"到期时间小于系统时间\",{\"1\":{\"356\":1}}],[\"到期时间\",{\"1\":{\"356\":1}}],[\"到16\",{\"1\":{\"279\":1}}],[\"到1999年广泛在各大浏览器网络请求中使用\",{\"1\":{\"164\":1}}],[\"到对端后再根据每个帧首部的流标识符重新组装\",{\"1\":{\"167\":1}}],[\"帧是最小的数据单位\",{\"1\":{\"167\":1}}],[\"帧\",{\"1\":{\"167\":1}}],[\"客户程序调用close\",{\"1\":{\"1272\":1}}],[\"客户端发出request请求\",{\"1\":{\"1931\":1}}],[\"客户端浏览器在请求服务端资源时\",{\"1\":{\"1897\":1}}],[\"客户端port\",{\"1\":{\"1799\":1}}],[\"客户端向服务器端发送sql命令\",{\"1\":{\"1250\":1}}],[\"客户端向某个域名的服务器请求页面的过程中\",{\"1\":{\"166\":1}}],[\"客户端消息\",{\"1\":{\"513\":2}}],[\"客户端\",{\"1\":{\"509\":1,\"510\":2,\"511\":1,\"512\":1,\"513\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1}}],[\"客户端检验是否断开\",{\"1\":{\"498\":1}}],[\"客户端回应服务器收到响应\",{\"1\":{\"497\":1}}],[\"客户端缓存机制或者是缓存服务器在做缓存操作的时候\",{\"1\":{\"202\":1}}],[\"客户端的请求被服务器拒绝\",{\"1\":{\"192\":1}}],[\"客户端请求断开\",{\"1\":{\"498\":1}}],[\"客户端请求链接\",{\"1\":{\"497\":1}}],[\"客户端请求的url在服务端不存在\",{\"1\":{\"192\":1}}],[\"客户端请求没有经过授权\",{\"1\":{\"192\":1}}],[\"客户端请求存在语法错误\",{\"1\":{\"192\":1}}],[\"客户端传递给服务器的数据\",{\"1\":{\"178\":1}}],[\"客户端指定自己想访问的web服务器的域名\",{\"1\":{\"177\":1}}],[\"客户向服务器请求服务时\",{\"1\":{\"157\":1}}],[\"即具体的页面地址\",{\"1\":{\"2774\":1}}],[\"即处理器\",{\"1\":{\"2771\":1}}],[\"即如果使用低版本驱动将导致不支持嵌套事务\",{\"1\":{\"2733\":1}}],[\"即实体类型决\",{\"1\":{\"2223\":1}}],[\"即专注于实现数据持久化应用领域的某个特定系统的一个逻辑层面\",{\"1\":{\"2199\":1}}],[\"即把数据\",{\"1\":{\"2199\":1}}],[\"即仁者见仁\",{\"1\":{\"2197\":1}}],[\"即指在同一个域\",{\"1\":{\"2168\":1}}],[\"即指定存放web应用程序的目录的路径\",{\"1\":{\"1767\":1}}],[\"即忽略头信息\",{\"1\":{\"2149\":1}}],[\"即xmlhttprequest对象\",{\"1\":{\"2145\":1}}],[\"即不需要等待\",{\"1\":{\"2104\":1}}],[\"即将钝化\",{\"1\":{\"2097\":1}}],[\"即jsp标准标签库\",{\"1\":{\"2011\":1}}],[\"即java有一定的动态性\",{\"1\":{\"573\":1}}],[\"即二级域名是一级域名的细化分级\",{\"1\":{\"1891\":1}}],[\"即多用途互联网邮件扩展类型\",{\"1\":{\"1805\":1}}],[\"即servlet引擎\",{\"1\":{\"1766\":1}}],[\"即url路为\",{\"1\":{\"1759\":1}}],[\"即url路径为\",{\"1\":{\"1759\":3}}],[\"即asynchronous\",{\"1\":{\"1720\":1}}],[\"即ai\",{\"1\":{\"226\":1}}],[\"即离元素越近的样式优先级越高\",{\"1\":{\"1473\":1}}],[\"即文档对象模型\",{\"1\":{\"1447\":1}}],[\"即浏览器对象模型\",{\"1\":{\"1446\":1}}],[\"即自然对数的底数\",{\"1\":{\"1411\":1}}],[\"即所有变量在编译之前必须声明为某一指定类型\",{\"1\":{\"1376\":1}}],[\"即debug\",{\"1\":{\"1287\":1}}],[\"即比较是基于字符编码的值而与language无关\",{\"1\":{\"1156\":1}}],[\"即一个jvm\",{\"1\":{\"1763\":1}}],[\"即一个事务内部的操作及使用的数据对并发的其他事务是隔离的\",{\"1\":{\"1102\":1}}],[\"即一旦一个string对象被创建后\",{\"1\":{\"397\":1}}],[\"即临时表名\",{\"1\":{\"1072\":1}}],[\"即先响应用户请求\",{\"1\":{\"2104\":1}}],[\"即先分组再过滤\",{\"1\":{\"1042\":1}}],[\"即先过滤再分组\",{\"1\":{\"1042\":1}}],[\"即在分组之后过滤数据\",{\"1\":{\"1042\":1}}],[\"即在分组之前过滤数据\",{\"1\":{\"1042\":1}}],[\"即在一个tcp连接中存在多个流\",{\"1\":{\"167\":1}}],[\"即后台运行的mysqld\",{\"1\":{\"925\":1}}],[\"即使数据库出现故障\",{\"1\":{\"2688\":1}}],[\"即使需求发生变更\",{\"1\":{\"1946\":1}}],[\"即使匹配不到会请求交给默认host处理\",{\"1\":{\"1769\":1}}],[\"即使使用sql的单一命令也能实现一些高级的处理\",{\"1\":{\"1145\":1}}],[\"即使出现了故障\",{\"1\":{\"1099\":1}}],[\"即使在开发中需要用到一些付费的附加功能\",{\"1\":{\"920\":1}}],[\"即使修改生效\",{\"1\":{\"671\":1}}],[\"即使这页面可能包含上百个资源\",{\"1\":{\"166\":1}}],[\"即运行时保留\",{\"1\":{\"553\":1}}],[\"即class保留\",{\"1\":{\"553\":1}}],[\"即源文件保留\",{\"1\":{\"553\":1}}],[\"即是否是同一个文件\",{\"1\":{\"386\":1,\"387\":1,\"389\":1}}],[\"即可请求到具体的控制单元\",{\"1\":{\"2815\":1}}],[\"即可\",{\"1\":{\"928\":1,\"1820\":1}}],[\"即可打开编辑框视图\",{\"1\":{\"600\":1}}],[\"即可取消最近一次操作并回到此前的编辑状态\",{\"1\":{\"302\":1}}],[\"即可沿相反的次序访问此前刚访问过的页面\",{\"1\":{\"302\":1}}],[\"即可以同时发送多个请求\",{\"1\":{\"167\":1}}],[\"即12个长度\",{\"1\":{\"294\":1}}],[\"即返回0\",{\"1\":{\"288\":1}}],[\"即泛型类型\",{\"1\":{\"2437\":1}}],[\"即泛型\",{\"1\":{\"233\":1}}],[\"即\",{\"1\":{\"164\":1,\"726\":1,\"729\":1,\"1936\":1,\"1950\":1,\"2108\":1,\"2551\":1}}],[\"于1994年成立\",{\"1\":{\"162\":1}}],[\"于是请求handlermapping处理器映射器查询\",{\"1\":{\"2788\":1}}],[\"于是netscape的浏览器navigator加入了javascript\",{\"1\":{\"1372\":1}}],[\"于是表单的内容就从客户端的浏览器传送到服务器上\",{\"1\":{\"1329\":1}}],[\"于是\",{\"1\":{\"161\":1}}],[\"随时可以再发送下一个请求\",{\"1\":{\"2104\":1}}],[\"随机生成一个分数\",{\"1\":{\"2022\":1,\"2023\":1}}],[\"随机数\",{\"1\":{\"367\":1,\"368\":1,\"382\":1}}],[\"随jdk1\",{\"1\":{\"1208\":1}}],[\"随着javaee版本的变化所包含的技术点的数量会有增多\",{\"1\":{\"1732\":1}}],[\"随着javaee项目的规模越来越庞大\",{\"1\":{\"653\":1}}],[\"随着屏幕或视口\",{\"1\":{\"1599\":1}}],[\"随着业务的不断变化\",{\"1\":{\"1128\":1}}],[\"随着网站逐渐变成\",{\"1\":{\"100\":1}}],[\"随处搜索\",{\"0\":{\"609\":1,\"640\":1},\"1\":{\"640\":1}}],[\"随后www联盟\",{\"1\":{\"162\":1}}],[\"两次查询调用实际上只请求了一次数据库\",{\"1\":{\"2475\":1}}],[\"两次密码必须一致\",{\"1\":{\"1578\":1}}],[\"两位数字表示秒\",{\"1\":{\"1093\":1}}],[\"两位数字表示分钟\",{\"1\":{\"1093\":1}}],[\"两位数字表示小时\",{\"1\":{\"1093\":1}}],[\"两位数字表示小数\",{\"1\":{\"1093\":1}}],[\"两位数字表示月中的天数\",{\"1\":{\"1093\":1}}],[\"两位数字表示月份\",{\"1\":{\"1093\":1}}],[\"两天后\",{\"1\":{\"895\":1}}],[\"两种模式\",{\"0\":{\"762\":1}}],[\"两种用于保持http连接状态的技术就应运而生了\",{\"1\":{\"161\":1}}],[\"两台或两台以上的计算机即可构成网络\",{\"1\":{\"492\":1}}],[\"两者的不同\",{\"1\":{\"1616\":1}}],[\"两者的不同之处在于以下几点\",{\"1\":{\"942\":1}}],[\"两者区别如下\",{\"1\":{\"2352\":1}}],[\"两者区别\",{\"0\":{\"822\":1}}],[\"两者有序交替执行\",{\"1\":{\"486\":1}}],[\"两者之间的长度差\",{\"1\":{\"431\":1}}],[\"两者都有gettime的方法\",{\"1\":{\"370\":1}}],[\"两个方法之间既不属于同一个逻辑事务也不属于同一个物理事务\",{\"1\":{\"2730\":1}}],[\"两个版本\",{\"1\":{\"2305\":1}}],[\"两个\",{\"1\":{\"1184\":1}}],[\"两个分支在同一个文件的同一个位置有两套完全不同的修改\",{\"1\":{\"751\":1}}],[\"两个基本方法\",{\"1\":{\"328\":1}}],[\"两个数相除\",{\"1\":{\"32\":1}}],[\"两端都可以进行进队\",{\"1\":{\"321\":1}}],[\"为需要使用事务的类添加切面事件\",{\"1\":{\"2710\":1}}],[\"为需要注册成为bean的类所在的全类路径\",{\"1\":{\"2548\":1}}],[\"为enhancer对象设置methodinterceptor\",{\"1\":{\"2615\":1}}],[\"为enhancer对象设置父类字节码\",{\"1\":{\"2615\":1}}],[\"为bean属性赋值\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"为我们创建指定的对象\",{\"1\":{\"2543\":1,\"2546\":1}}],[\"为基础的\",{\"1\":{\"2520\":1}}],[\"为单位的\",{\"1\":{\"2480\":1}}],[\"为任意实体对象\",{\"1\":{\"2214\":1}}],[\"为简化开发\",{\"1\":{\"2178\":1}}],[\"为正确的回调函数名\",{\"1\":{\"2171\":1}}],[\"为正确的函数名\",{\"1\":{\"2141\":1}}],[\"为一级域名\",{\"1\":{\"1891\":1}}],[\"为服务端获取用户状态获得依据\",{\"1\":{\"1884\":1}}],[\"为开发人员创建接口提供了一个简洁统一的解决方案\",{\"1\":{\"1559\":1}}],[\"为底的\",{\"1\":{\"1411\":2}}],[\"为web开发者提供一个标准可以访问站点中的数据\",{\"1\":{\"1372\":1}}],[\"为客户提供更流畅的浏览效果\",{\"1\":{\"1372\":1}}],[\"为人父母\",{\"1\":{\"1298\":4,\"1299\":8}}],[\"为多种关系数据库提供统一访问\",{\"1\":{\"1205\":1}}],[\"为避免锁表报错\",{\"1\":{\"1148\":1}}],[\"为防止不符合规范的数据存入数据库\",{\"1\":{\"981\":1}}],[\"为\",{\"1\":{\"905\":1,\"2214\":1,\"2548\":1,\"2605\":1}}],[\"为空就返回指定异常\",{\"1\":{\"853\":1}}],[\"为空就返回指定值\",{\"1\":{\"853\":2}}],[\"为中央仓库分担流量\",{\"1\":{\"705\":1}}],[\"为全世界所有maven工程服务\",{\"1\":{\"705\":1}}],[\"为当前局域网范围内的所有maven工程服务\",{\"1\":{\"705\":1}}],[\"为当前本机电脑上的所有maven工程服务\",{\"1\":{\"705\":1}}],[\"为重新编译做好准备\",{\"1\":{\"662\":1}}],[\"为保留地址\",{\"1\":{\"493\":1}}],[\"为此\",{\"1\":{\"462\":1}}],[\"为何一旦初始化就不可再扩容\",{\"1\":{\"311\":1}}],[\"为了应对原始类型的命名重复\",{\"1\":{\"2335\":1}}],[\"为了与某些驱动程序兼容\",{\"1\":{\"2317\":1}}],[\"为了便于学习我们可以指定日志的实现stdoutimpl来处理\",{\"1\":{\"2193\":1}}],[\"为了便于让~\",{\"1\":{\"772\":1}}],[\"为了阻止事件冒泡的情况\",{\"1\":{\"1656\":1}}],[\"为了实现最小量的更新\",{\"1\":{\"1628\":1}}],[\"为了建立一个健壮的j2ee应用\",{\"1\":{\"1262\":1}}],[\"为了不影响较短周期的开发工作\",{\"1\":{\"806\":1}}],[\"为了避免该异常\",{\"1\":{\"1855\":1}}],[\"为了避免哈希碰撞出现的概率\",{\"1\":{\"703\":1}}],[\"为了避免jar包在网络中进行传输\",{\"1\":{\"701\":1}}],[\"为了避免hash撞码的情况\",{\"1\":{\"294\":1}}],[\"为了查找一个jar包找遍互联网\",{\"1\":{\"650\":1}}],[\"为了尽量保证不同的key得到不同的哈希码\",{\"1\":{\"294\":1}}],[\"为了解决上面的问题\",{\"1\":{\"266\":1}}],[\"为了解决http协议无状态\",{\"1\":{\"161\":1}}],[\"为null\",{\"1\":{\"279\":1,\"1991\":1}}],[\"为什么配置放行静态资源\",{\"1\":{\"2902\":1}}],[\"为什么需要放行静态文件\",{\"0\":{\"2783\":1}}],[\"为什么需要异常处理\",{\"0\":{\"16\":1}}],[\"为什么建议配置\",{\"0\":{\"2777\":1}}],[\"为什么我们通过接口\",{\"1\":{\"2380\":1}}],[\"为什么组件中data是函数\",{\"0\":{\"1705\":1}}],[\"为什么使用事件修饰符\",{\"0\":{\"1656\":1}}],[\"为什么使用v\",{\"0\":{\"1637\":1}}],[\"为什么使用正则表达式\",{\"0\":{\"1583\":1}}],[\"为什么将结果封装成对象或者对象集合\",{\"0\":{\"1225\":1}}],[\"为什么要基于代理模式开发\",{\"0\":{\"2371\":1}}],[\"为什么要学习jstl\",{\"0\":{\"2010\":1}}],[\"为什么要学css\",{\"0\":{\"1467\":1}}],[\"为什么要使用iservice接口\",{\"0\":{\"2214\":1}}],[\"为什么要使用jquery\",{\"0\":{\"1538\":1}}],[\"为什么要使用连接池\",{\"0\":{\"1269\":1}}],[\"为什么要使用function\",{\"1\":{\"845\":1}}],[\"为什么要使用mybatis\",{\"0\":{\"2195\":1}}],[\"为什么要使用maven\",{\"0\":{\"648\":1}}],[\"为什么要使用mvc\",{\"0\":{\"119\":1}}],[\"为什么要用方法引用\",{\"0\":{\"824\":1}}],[\"为什么要增加默认方法\",{\"0\":{\"816\":1}}],[\"为什么要忽略它们\",{\"0\":{\"770\":1}}],[\"为什么用反射\",{\"0\":{\"566\":1}}],[\"为什么用泛型\",{\"0\":{\"234\":1}}],[\"为什么这么简单\",{\"1\":{\"561\":1}}],[\"为什么会有第三代日期api\",{\"0\":{\"378\":1}}],[\"为什么没有方法体\",{\"1\":{\"371\":1}}],[\"为什么hashtable慢\",{\"1\":{\"311\":1}}],[\"为什么扩容因子是0\",{\"1\":{\"296\":1}}],[\"为什么是2的倍数\",{\"1\":{\"296\":1}}],[\"另外一个事务不能读取该事务未提交的数据\",{\"1\":{\"2721\":1}}],[\"另外四个与jdbc的隔离级别相对应\",{\"1\":{\"2719\":1}}],[\"另外注意对于特殊字符\",{\"1\":{\"2407\":1}}],[\"另外在其中可以将全局的日志级别调高\",{\"1\":{\"2306\":1}}],[\"另外这个函数可以通过把请求url写\",{\"1\":{\"2163\":1}}],[\"另外两个框向左浮动直到碰到前一个浮动框\",{\"1\":{\"1519\":1}}],[\"另外\",{\"1\":{\"920\":1,\"1209\":1,\"1936\":1,\"1950\":1}}],[\"另外的\",{\"1\":{\"70\":1}}],[\"另一类是以\",{\"1\":{\"1744\":1}}],[\"另一个事务也访问该数据\",{\"1\":{\"2691\":1}}],[\"另一个web资源有可能在同一个web服务器上\",{\"1\":{\"1863\":1}}],[\"另一个会按照比例自动适应\",{\"1\":{\"1309\":1}}],[\"另一个种是发送一个sql集合给数据库\",{\"1\":{\"1230\":1}}],[\"另一个字段\",{\"1\":{\"958\":1}}],[\"另一个线程就参与进来了\",{\"1\":{\"462\":1}}],[\"另一方面\",{\"1\":{\"161\":1,\"1611\":1,\"1943\":1}}],[\"单例与多例模式\",{\"0\":{\"2554\":1}}],[\"单行输出\",{\"1\":{\"2301\":1}}],[\"单引号\",{\"1\":{\"2030\":1}}],[\"单次会话\",{\"1\":{\"1968\":1}}],[\"单次会话内有效\",{\"1\":{\"1919\":1}}],[\"单次请求\",{\"1\":{\"1968\":1}}],[\"单个引用类型\",{\"1\":{\"2396\":1}}],[\"单个引用对象\",{\"0\":{\"2396\":1}}],[\"单个cookie保存的数据不能超过4k\",{\"1\":{\"1902\":1}}],[\"单个cookie存储数据大小限制在4097个字节\",{\"1\":{\"1885\":1}}],[\"单个参数\",{\"0\":{\"1711\":1}}],[\"单元方法的返回值不要按照请求转发或者重定向处理\",{\"1\":{\"2874\":1}}],[\"单元方法的返回值类型设置void\",{\"1\":{\"2862\":1}}],[\"单元测试\",{\"1\":{\"1683\":1,\"2665\":2}}],[\"单元格\",{\"1\":{\"1319\":1}}],[\"单选按钮\",{\"1\":{\"1335\":1}}],[\"单选框\",{\"0\":{\"1335\":1}}],[\"单独放入一个包中\",{\"1\":{\"1263\":1}}],[\"单值索引\",{\"1\":{\"1129\":1}}],[\"单位是秒\",{\"1\":{\"2715\":1}}],[\"单位为分钟\",{\"1\":{\"1899\":1}}],[\"单位为秒\",{\"1\":{\"1890\":1}}],[\"单位为毫秒\",{\"1\":{\"1765\":1}}],[\"单位\",{\"1\":{\"1047\":1,\"2301\":1}}],[\"单列排序\",{\"0\":{\"1039\":1}}],[\"单一结果\",{\"0\":{\"2672\":1}}],[\"单一参数\",{\"0\":{\"2383\":1}}],[\"单一参数传递\",{\"0\":{\"2353\":1}}],[\"单一主键\",{\"1\":{\"985\":1}}],[\"单一的等待池就不够用了\",{\"1\":{\"490\":1}}],[\"单一的连接能减少tcp握手带来的时延\",{\"1\":{\"166\":1}}],[\"单一的连接应该是http2的主要优势\",{\"1\":{\"166\":1}}],[\"单词之间用下划线连接\",{\"1\":{\"983\":1}}],[\"单精度浮点数值\",{\"1\":{\"940\":1}}],[\"单击finish完成安装\",{\"1\":{\"922\":1}}],[\"单核cpu在执行任务时\",{\"1\":{\"452\":1}}],[\"单向通讯\",{\"0\":{\"509\":1,\"515\":1}}],[\"单向链表\",{\"1\":{\"227\":1}}],[\"单向性\",{\"0\":{\"160\":1},\"1\":{\"163\":1}}],[\"单表查询中对子查询的需求也是有的\",{\"1\":{\"2258\":1}}],[\"单表的是common键\",{\"1\":{\"1668\":1}}],[\"单表\",{\"0\":{\"1022\":1,\"3066\":1},\"1\":{\"52\":1}}],[\"长久保存\",{\"1\":{\"1283\":1}}],[\"长文本数据\",{\"1\":{\"941\":1}}],[\"长度不能少于6位\",{\"1\":{\"1579\":1}}],[\"长度不断+1\",{\"1\":{\"313\":1}}],[\"长度\",{\"0\":{\"1087\":1},\"1\":{\"515\":1,\"516\":1,\"517\":1,\"518\":1}}],[\"长度为不超过255个字符\",{\"1\":{\"941\":1}}],[\"长度为你传入的数字\",{\"1\":{\"392\":1}}],[\"长度为16\",{\"1\":{\"392\":1}}],[\"长度会根据使用情况自动扩容\",{\"1\":{\"351\":1}}],[\"长连接\",{\"0\":{\"166\":1},\"1\":{\"164\":2}}],[\"长连接专门解决效率问题\",{\"1\":{\"159\":1}}],[\"长期支持版本\",{\"1\":{\"85\":1}}],[\"优化项目结构\",{\"0\":{\"2790\":1}}],[\"优化页面的加载性能\",{\"1\":{\"1644\":1}}],[\"优化了尺寸和速度vue\",{\"1\":{\"1616\":1}}],[\"优化器根据开销自动选择最优执行计划\",{\"1\":{\"1250\":1}}],[\"优化驱动注册\",{\"0\":{\"1217\":1}}],[\"优化lke语句使用\",{\"1\":{\"1148\":1}}],[\"优化代码\",{\"1\":{\"874\":1}}],[\"优缺点\",{\"0\":{\"567\":1}}],[\"优先\",{\"1\":{\"1844\":1}}],[\"优先加载驱动\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"优先使用inner\",{\"1\":{\"1148\":1}}],[\"优先使用\",{\"1\":{\"482\":1}}],[\"优先级低\",{\"1\":{\"2646\":1}}],[\"优先级低的切面\",{\"1\":{\"2645\":1}}],[\"优先级高\",{\"1\":{\"2646\":1}}],[\"优先级高的切面\",{\"1\":{\"2645\":1}}],[\"优先级\",{\"0\":{\"457\":1,\"1473\":1,\"2333\":1},\"1\":{\"1507\":1,\"1533\":1,\"1534\":1}}],[\"优点\",{\"0\":{\"448\":1,\"483\":1,\"1127\":1,\"1374\":1,\"1559\":1,\"2102\":1,\"2105\":1,\"2124\":1,\"2741\":1},\"1\":{\"227\":2,\"313\":1,\"346\":1,\"567\":1,\"723\":1,\"1230\":1,\"1283\":1}}],[\"优点就是节省传输时间\",{\"1\":{\"159\":1}}],[\"优势与劣势\",{\"0\":{\"1126\":1}}],[\"优势\",{\"0\":{\"123\":1,\"2521\":1},\"1\":{\"1272\":1}}],[\"无参构造初始化\",{\"1\":{\"2559\":1}}],[\"无参构造\",{\"1\":{\"2552\":1}}],[\"无参有返回值\",{\"1\":{\"836\":1}}],[\"无任何意义\",{\"1\":{\"2380\":1}}],[\"无侵入\",{\"1\":{\"2179\":1}}],[\"无\",{\"1\":{\"2029\":7,\"2030\":2}}],[\"无非就是绑定事件\",{\"1\":{\"1572\":1}}],[\"无密码登陆服务器\",{\"1\":{\"1155\":1}}],[\"无符号\",{\"1\":{\"939\":1}}],[\"无需继承servlet\",{\"1\":{\"2741\":1}}],[\"无需实现类就可以实现对数据库的操作\",{\"1\":{\"2380\":1}}],[\"无需再担心字段写错\",{\"1\":{\"2179\":1}}],[\"无需重新加载整个网页的情况下\",{\"1\":{\"2108\":1}}],[\"无需等待对方的开发工作结束\",{\"1\":{\"1946\":1}}],[\"无需单独安装\",{\"1\":{\"1681\":1}}],[\"无需归还\",{\"1\":{\"1274\":2,\"1280\":2,\"1288\":1}}],[\"无需保存结果\",{\"1\":{\"1197\":1}}],[\"无需添加jar包的依赖\",{\"1\":{\"715\":1}}],[\"无需人工参与\",{\"1\":{\"651\":1}}],[\"无需定义很多测试类\",{\"1\":{\"520\":1}}],[\"无需注释其他的代码\",{\"1\":{\"520\":1}}],[\"无法容纳水平排列的三个浮动元素\",{\"1\":{\"1519\":1}}],[\"无法继续\",{\"1\":{\"484\":1}}],[\"无法执行其中的代码\",{\"1\":{\"467\":1}}],[\"无法创建\",{\"1\":{\"366\":1}}],[\"无论切点方法是否出现异常都会执行的方法\",{\"1\":{\"2643\":1}}],[\"无论请求是否成功都睡调用的回调函数\",{\"1\":{\"2155\":1}}],[\"无论藏的多深都可以获取到\",{\"1\":{\"1508\":1}}],[\"无论我走到哪里\",{\"1\":{\"1499\":1,\"1500\":1,\"1501\":1}}],[\"无论是\",{\"1\":{\"2507\":1}}],[\"无论是否登录过\",{\"1\":{\"2063\":1}}],[\"无论是页面还是请求转发还是响应重定向都不需要项目名\",{\"1\":{\"1879\":1}}],[\"无论是上面的哪一种\",{\"1\":{\"1535\":1}}],[\"无论是单个字段还是多个字段非空约束的添加只能使用列级约束\",{\"1\":{\"1005\":1}}],[\"无论是应用程序开发速度还是系统事务处理运行速度\",{\"1\":{\"919\":1}}],[\"无论是多进程共享的\",{\"1\":{\"321\":1}}],[\"无论在不在无异常\",{\"1\":{\"324\":1}}],[\"无论有多少个线程来读数据\",{\"1\":{\"313\":1}}],[\"无序列表\",{\"0\":{\"1317\":1},\"1\":{\"1171\":1,\"1317\":1}}],[\"无序\",{\"1\":{\"276\":1,\"278\":1,\"283\":1,\"290\":1,\"298\":1}}],[\"无状态是指协议对于事务处理没有记忆能力\",{\"1\":{\"161\":1}}],[\"无状态\",{\"0\":{\"161\":1},\"1\":{\"163\":1}}],[\"无连接\",{\"0\":{\"159\":1},\"1\":{\"163\":1}}],[\"无关\",{\"1\":{\"34\":3,\"241\":1}}],[\"正向工程\",{\"1\":{\"2497\":1}}],[\"正则表达式等方式集中起来\",{\"1\":{\"2622\":1}}],[\"正则表达式名称\",{\"1\":{\"2301\":1}}],[\"正则表达式本身就是一个字符串\",{\"1\":{\"1585\":1}}],[\"正则表达式不依赖jquery\",{\"1\":{\"1585\":1}}],[\"正则表达式的使用\",{\"0\":{\"1585\":1}}],[\"正则表达式举例\",{\"0\":{\"1584\":1}}],[\"正则表达式可以实现更加严谨细致的校验\",{\"1\":{\"1583\":1}}],[\"正则表达式可以使文本的校验的代码更加简洁\",{\"1\":{\"1583\":1}}],[\"正则表达式是一种文本模式\",{\"1\":{\"1582\":1}}],[\"正则表达式是对字符串\",{\"1\":{\"1582\":1}}],[\"正则表达式通常被用来检索\",{\"1\":{\"1582\":1}}],[\"正则表达式使用单个字符串来描述\",{\"1\":{\"1582\":1}}],[\"正则表达式\",{\"0\":{\"1581\":1}}],[\"正则查询\",{\"0\":{\"1036\":1}}],[\"正式发送请求\",{\"1\":{\"2114\":1}}],[\"正式版\",{\"1\":{\"1558\":1}}],[\"正式名称是\",{\"1\":{\"71\":1}}],[\"正整数\",{\"1\":{\"1463\":1}}],[\"正无穷\",{\"1\":{\"1408\":1}}],[\"正确的关闭了结果集\",{\"1\":{\"1286\":1}}],[\"正确的读取了属性文件\",{\"1\":{\"1286\":1}}],[\"正对上述的现象\",{\"1\":{\"1247\":1}}],[\"正斜线\",{\"1\":{\"773\":1}}],[\"正常获取数据\",{\"1\":{\"2928\":1}}],[\"正常访问\",{\"1\":{\"2821\":1}}],[\"正常状态下\",{\"1\":{\"1335\":1}}],[\"正常登录\",{\"0\":{\"1244\":1}}],[\"正常情况下我们查询多个对象map集合的java代码如下\",{\"1\":{\"2350\":1}}],[\"正常情况下我们查询多个对象集合的java代码如下\",{\"1\":{\"2347\":1}}],[\"正常情况下我们查询单个对象的java代码如下\",{\"1\":{\"2344\":1}}],[\"正常情况下\",{\"1\":{\"610\":1,\"2605\":1}}],[\"正常添加元素\",{\"1\":{\"337\":1}}],[\"正在喝可乐\",{\"1\":{\"2609\":1}}],[\"正在喝茶\",{\"1\":{\"2609\":1}}],[\"正在食堂吃\",{\"1\":{\"2609\":1,\"2612\":1}}],[\"正在输入\",{\"1\":{\"1439\":1}}],[\"正在睡觉\",{\"1\":{\"1424\":1,\"1425\":1}}],[\"正在吃\",{\"1\":{\"1419\":1,\"1420\":1,\"1421\":1,\"1423\":1,\"1424\":1,\"1425\":1,\"2609\":1}}],[\"正在使用美团支付~~\",{\"1\":{\"568\":1}}],[\"正在使用支付宝支付~~~\",{\"1\":{\"568\":1}}],[\"正在运行的一个程序\",{\"1\":{\"452\":1}}],[\"正在传输的类型由content\",{\"1\":{\"158\":1}}],[\"正因为上面的缺点\",{\"1\":{\"228\":1}}],[\"灵活性\",{\"1\":{\"2438\":1}}],[\"灵活分支\",{\"1\":{\"723\":1}}],[\"灵活\",{\"0\":{\"158\":1},\"1\":{\"1943\":1,\"2438\":1}}],[\"使\",{\"1\":{\"2780\":2}}],[\"使代码无论在性能上还是api操作上得到很大提升\",{\"1\":{\"2197\":1}}],[\"使框\",{\"1\":{\"1519\":1}}],[\"使元素脱离文档流\",{\"1\":{\"1517\":1}}],[\"使网页具有交互的功能\",{\"1\":{\"1329\":1}}],[\"使所有上一次提交\",{\"1\":{\"1255\":1}}],[\"使输出信息更加简洁\",{\"1\":{\"734\":1}}],[\"使你更加方便的记录你的程序信息\",{\"1\":{\"536\":1}}],[\"使原本只支持一个线程的内核\",{\"1\":{\"452\":1}}],[\"使得应用的模型和视图相分离\",{\"1\":{\"2034\":1}}],[\"使得前后端工程师实现自治\",{\"1\":{\"1945\":1}}],[\"使得\",{\"1\":{\"1557\":1}}],[\"使得对同一个服务器的请求可以继续在该连接上完成\",{\"1\":{\"177\":1}}],[\"使得http服务器的程序规模小\",{\"1\":{\"157\":1}}],[\"使用通过单元方法的返回值来告诉dispatcherservlet重定向指定的资源\",{\"1\":{\"2867\":1}}],[\"使用通过单元方法的返回值来告诉dispatcherservlet请求转发指定的资源\",{\"1\":{\"2866\":1}}],[\"使用关键字\",{\"0\":{\"2865\":1}}],[\"使用httpservletrequest与httpservletresponse形参接收request对象与response对象\",{\"1\":{\"2793\":1}}],[\"使用包扫描指定路径\",{\"1\":{\"2761\":1}}],[\"使用包扫描会注入所有的实体类\",{\"1\":{\"2588\":1}}],[\"使用嵌套事务\",{\"1\":{\"2733\":1}}],[\"使用该级别的特点是\",{\"1\":{\"2727\":1}}],[\"使用当前的事务\",{\"1\":{\"2725\":1}}],[\"使用aop\",{\"1\":{\"2710\":1}}],[\"使用returning属性设置的名称在通知方法中声明一个形参object\",{\"1\":{\"2652\":1}}],[\"使用ref属性关联到切面的bean\",{\"1\":{\"2648\":1}}],[\"使用request对象\",{\"1\":{\"140\":1}}],[\"使用代理对象完成功能\",{\"1\":{\"2615\":1}}],[\"使用代理对象代替原来的对象去完成功能进而达到拓展功能的目的\",{\"1\":{\"2610\":1}}],[\"使用带参构造\",{\"1\":{\"2615\":1}}],[\"使用无参构造\",{\"1\":{\"2615\":1}}],[\"使用子类继承父类增强\",{\"1\":{\"2612\":1}}],[\"使用子查询\",{\"1\":{\"1072\":1}}],[\"使用继承实现增强\",{\"1\":{\"2612\":1}}],[\"使用继承机制就可以将这样的依赖信息统一提取到父工程模块中进行统一管理\",{\"1\":{\"713\":1}}],[\"使用配置类获取容器中的bean\",{\"0\":{\"2602\":1}}],[\"使用配置类\",{\"0\":{\"2600\":1}}],[\"使用user\",{\"1\":{\"2571\":2,\"2574\":1}}],[\"使用缓存对性能的提高更明显\",{\"1\":{\"2470\":1}}],[\"使用new\",{\"1\":{\"2702\":1}}],[\"使用n+1级联查询的时候\",{\"1\":{\"2439\":1}}],[\"使用npm打包\",{\"1\":{\"114\":1}}],[\"使用npm管理项目\",{\"0\":{\"91\":1}}],[\"使用哪个查询查询属性的值\",{\"1\":{\"2437\":1}}],[\"使用这个属性可以覆写类型处理器\",{\"1\":{\"2437\":1}}],[\"使用测试类测试\",{\"0\":{\"2379\":1}}],[\"使用完全限定资源定位符\",{\"0\":{\"2322\":1},\"1\":{\"2322\":1}}],[\"使用完毕是要进行释放和关闭\",{\"1\":{\"1225\":1}}],[\"使用接口的全限定名导入\",{\"0\":{\"2321\":1}}],[\"使用接口的默认方法\",{\"1\":{\"817\":1}}],[\"使用相对于类路径的资源引用\",{\"1\":{\"2320\":1,\"2321\":1}}],[\"使用的\",{\"1\":{\"2531\":1}}],[\"使用的mapper标签的url属性\",{\"1\":{\"2322\":1}}],[\"使用的mapper标签的resource属性\",{\"1\":{\"2320\":1}}],[\"使用的是response对象\",{\"1\":{\"2874\":1}}],[\"使用的是基本的\",{\"1\":{\"2520\":1}}],[\"使用的是多表的连接查询\",{\"1\":{\"2439\":1}}],[\"使用的是\",{\"1\":{\"2323\":1}}],[\"使用的是mapper标签的class属性\",{\"1\":{\"2321\":1}}],[\"使用的是一种读写分离的思想\",{\"1\":{\"313\":1}}],[\"使用类路径的资源引用\",{\"0\":{\"2320\":1}}],[\"使用多个配置在root中使用多行\",{\"1\":{\"2312\":1}}],[\"使用内置日志输出到文件\",{\"1\":{\"2300\":1}}],[\"使用内置自定义格式化器\",{\"1\":{\"2299\":1}}],[\"使用内部比较器\",{\"1\":{\"287\":2}}],[\"使用控制台记录sql\",{\"1\":{\"2298\":1}}],[\"使用控制台向文件录入信息\",{\"1\":{\"422\":1}}],[\"使用插件\",{\"0\":{\"2286\":1}}],[\"使用xhr对象设置打开链接\",{\"1\":{\"2114\":1}}],[\"使用xmlhttprequest异步获取数据\",{\"1\":{\"2109\":1}}],[\"使用web\",{\"1\":{\"2075\":1}}],[\"使用window对象操作浏览器行为的编程\",{\"1\":{\"1372\":1}}],[\"使用windows的cmd命令行窗口\",{\"1\":{\"725\":1}}],[\"使用过滤器链的好处是我们可以将不同的过滤功能分散到多个过滤器中\",{\"1\":{\"2046\":1}}],[\"使用model传递参数\",{\"0\":{\"2927\":1}}],[\"使用modelandview传递参数\",{\"0\":{\"2930\":1}}],[\"使用modelandview\",{\"0\":{\"2871\":1}}],[\"使用mybatis实现级联查询\",{\"1\":{\"2432\":1}}],[\"使用mybatis重点需要程序员编写sql命令\",{\"1\":{\"2196\":1}}],[\"使用mvc模式使开发时间得到较大的缩减\",{\"1\":{\"2038\":1}}],[\"使用markdown\",{\"0\":{\"1168\":1},\"1\":{\"1161\":1}}],[\"使用maven就可以自动的处理jar包之间的冲突问题\",{\"1\":{\"652\":1}}],[\"使用maven我们可以享受到一个完全统一规范的jar包管理体系\",{\"1\":{\"650\":1}}],[\"使用实际的货币符号代替\",{\"1\":{\"2029\":1}}],[\"使用实现类重写的方法\",{\"1\":{\"817\":1}}],[\"使用默认负数前缀\",{\"1\":{\"2029\":1}}],[\"使用指数格式\",{\"1\":{\"2029\":1}}],[\"使用标签时\",{\"1\":{\"2014\":1}}],[\"使用freemarker引擎模板\",{\"1\":{\"2293\":1}}],[\"使用filter的完整流程\",{\"1\":{\"1994\":1}}],[\"使用for循环\",{\"1\":{\"251\":1}}],[\"使用前后端分离架构的项目在项目组中往往配备前端工程师和后端工程师\",{\"1\":{\"1937\":1}}],[\"使用一个或多个元素\",{\"1\":{\"1818\":1}}],[\"使用idea部署项目\",{\"0\":{\"1778\":1}}],[\"使用idea运行项目\",{\"0\":{\"1777\":1}}],[\"使用idea开发javaweb\",{\"0\":{\"1774\":1}}],[\"使用pointcut\",{\"1\":{\"2648\":4}}],[\"使用pom\",{\"1\":{\"683\":1}}],[\"使用proxy动态代理\",{\"1\":{\"2609\":1}}],[\"使用params\",{\"0\":{\"1725\":1}}],[\"使用语法\",{\"1\":{\"1721\":1}}],[\"使用语法进行查询\",{\"1\":{\"1195\":1}}],[\"使用路径的时候要使用绝对路径\",{\"1\":{\"1686\":1}}],[\"使用以下dos命令提示符下执行\",{\"1\":{\"1680\":1}}],[\"使用动态属性后\",{\"1\":{\"1649\":1}}],[\"使用动态属性\",{\"1\":{\"1649\":1,\"1651\":1}}],[\"使用动态属性之前\",{\"1\":{\"1649\":1,\"1651\":1}}],[\"使用场景\",{\"0\":{\"1641\":1,\"1644\":1}}],[\"使用场景会有不同\",{\"1\":{\"1633\":1}}],[\"使用表达式\",{\"0\":{\"1621\":1}}],[\"使用view视图\",{\"0\":{\"2868\":1}}],[\"使用v\",{\"0\":{\"1622\":1}}],[\"使用vue操作时\",{\"1\":{\"1614\":1}}],[\"使用vue操作元素\",{\"0\":{\"1614\":1}}],[\"使用varchar替代char\",{\"1\":{\"1148\":1}}],[\"使用行来创建水平的列组class=row\",{\"1\":{\"1601\":1}}],[\"使用正则优化表单\",{\"0\":{\"1586\":1}}],[\"使用原生jsdom对象转换成jquery对象方式是$\",{\"1\":{\"1573\":1}}],[\"使用原生js方式获得的页面结点对象我们可以简称为dom对象\",{\"1\":{\"1573\":1}}],[\"使用原生javascript编码存在问题\",{\"0\":{\"1539\":1}}],[\"使用jdk动态代理\",{\"1\":{\"2619\":1}}],[\"使用javascript将所有的元素绑定在一起\",{\"1\":{\"2109\":1}}],[\"使用javascript来实现动态隔行变色\",{\"1\":{\"1543\":1}}],[\"使用json相比传统的通过\",{\"1\":{\"2162\":1}}],[\"使用jsonp形式调用函数时\",{\"1\":{\"2141\":1}}],[\"使用json\",{\"1\":{\"2126\":1}}],[\"使用jstl的好处\",{\"0\":{\"2012\":1}}],[\"使用jspruntimelibrary\",{\"1\":{\"1962\":1}}],[\"使用jquery核心函数获得的对象我们可以简称为jquery对象\",{\"1\":{\"1573\":1}}],[\"使用jquery方式实现\",{\"0\":{\"1545\":1}}],[\"使用junit单元测试\",{\"0\":{\"521\":1}}],[\"使用1\",{\"1\":{\"1542\":1}}],[\"使用最为广泛的\",{\"1\":{\"1542\":1}}],[\"使用隐式迭代简化编程\",{\"1\":{\"1540\":1}}],[\"使用dom进行动态显示和交互\",{\"1\":{\"2109\":1}}],[\"使用document对象操作文档内容的编程\",{\"1\":{\"1372\":1}}],[\"使用dao层结构后\",{\"1\":{\"1264\":1}}],[\"使用datasource的实现\",{\"1\":{\"1209\":1}}],[\"使用dataoutputstream高级流处理\",{\"1\":{\"509\":1,\"510\":1}}],[\"使用$\",{\"1\":{\"1352\":1,\"2352\":1,\"2584\":1}}],[\"使用现成的日志框架\",{\"1\":{\"1283\":1}}],[\"使用连接池技术实现\",{\"1\":{\"1271\":1}}],[\"使用连接查询\",{\"1\":{\"1072\":1}}],[\"使用预编译后\",{\"1\":{\"1249\":1}}],[\"使用回滚点回滚\",{\"0\":{\"1235\":1}}],[\"使用事务对数据进行修改的操作序列\",{\"1\":{\"2685\":1}}],[\"使用事务\",{\"0\":{\"1234\":1}}],[\"使用批处理\",{\"0\":{\"1231\":1}}],[\"使用批量插入减少事务触发\",{\"1\":{\"1148\":1}}],[\"使用建议\",{\"0\":{\"1203\":1}}],[\"使用|来作为列的分割\",{\"1\":{\"1182\":1}}],[\"使用explain分析你的sql执行计划\",{\"1\":{\"1148\":1}}],[\"使用explain关键字与sql语句一起执行查看\",{\"1\":{\"1136\":1}}],[\"使用存储过程\",{\"1\":{\"1146\":1}}],[\"使用视图\",{\"0\":{\"1140\":1}}],[\"使用外连接\",{\"1\":{\"1072\":1}}],[\"使用外部比较器\",{\"1\":{\"287\":2}}],[\"使用商品编号到商品信息表中查询即可\",{\"1\":{\"1047\":1}}],[\"使用数据库默认的事务隔离级别\",{\"1\":{\"2719\":1}}],[\"使用数据库管理系统的语法\",{\"1\":{\"911\":1}}],[\"使用数组缓冲\",{\"1\":{\"409\":1}}],[\"使用重复注解\",{\"1\":{\"904\":1}}],[\"使用系统默认的格式\",{\"1\":{\"897\":1}}],[\"使用线程安全的容器\",{\"1\":{\"889\":2}}],[\"使用optional对象\",{\"1\":{\"854\":1}}],[\"使用objectoutputstream\",{\"1\":{\"511\":1}}],[\"使用引用方法创建\",{\"1\":{\"831\":1,\"832\":1}}],[\"使用引用方法改写\",{\"1\":{\"829\":1,\"830\":1}}],[\"使用方法引用改写\",{\"1\":{\"828\":1}}],[\"使用方法引用直接调用已实现的方法\",{\"1\":{\"826\":1}}],[\"使用git\",{\"1\":{\"752\":1}}],[\"使用getxxx\",{\"1\":{\"142\":1}}],[\"使用分支意味着你可以把你的工作从开发主线上分离开来\",{\"1\":{\"744\":1}}],[\"使用专用的git窗口\",{\"1\":{\"725\":1}}],[\"使用了一系列优秀的设计模式\",{\"1\":{\"2197\":1}}],[\"使用了前面学到的反射\",{\"1\":{\"1266\":1}}],[\"使用了聚合之后就可以批量进行maven工程的安装\",{\"1\":{\"717\":1}}],[\"使用了泛型以后\",{\"1\":{\"235\":1}}],[\"使用tx\",{\"1\":{\"2706\":1,\"2710\":1}}],[\"使用throwing属性设置的名称在通知方法中声明一个形参\",{\"1\":{\"2653\":1}}],[\"使用thymeleaf解析url地址\",{\"1\":{\"130\":1}}],[\"使用try\",{\"1\":{\"2623\":1}}],[\"使用tab补全\",{\"0\":{\"624\":1}}],[\"使用cglib动态代理\",{\"0\":{\"2613\":1}}],[\"使用china\",{\"1\":{\"2174\":1}}],[\"使用css构建用户界面样式\",{\"1\":{\"2109\":1}}],[\"使用ctrl+shift+w可以搜索选中\",{\"1\":{\"612\":1}}],[\"使用ctrl\",{\"1\":{\"610\":1}}],[\"使用concat\",{\"0\":{\"2407\":1},\"1\":{\"2457\":1}}],[\"使用condition的await\",{\"1\":{\"475\":1}}],[\"使用collect\",{\"1\":{\"880\":1}}],[\"使用collections工具类中的synchronizedxxx方法\",{\"1\":{\"307\":1}}],[\"使用意图优化后\",{\"1\":{\"604\":1}}],[\"使用反射创建对象不利于我们遵守开发准则\",{\"1\":{\"596\":1}}],[\"使用时需要提供一个返回值类型\",{\"1\":{\"836\":1}}],[\"使用时可以不赋值\",{\"1\":{\"551\":1}}],[\"使用时可以省略value\",{\"1\":{\"550\":1}}],[\"使用时间片策略\",{\"1\":{\"457\":1}}],[\"使用注解时要在其前面增加\",{\"1\":{\"533\":1}}],[\"使用流写入\",{\"1\":{\"509\":1}}],[\"使用三次握手\",{\"1\":{\"496\":1}}],[\"使用set注入\",{\"1\":{\"2559\":1}}],[\"使用selectkey标签检索\",{\"1\":{\"2410\":1}}],[\"使用servlet向页面动态响应html页面资源\",{\"1\":{\"1927\":1}}],[\"使用slf4j输出\",{\"1\":{\"2300\":1}}],[\"使用sqlsessionfactory对象打开数据库链接\",{\"1\":{\"2281\":1,\"2282\":1,\"2374\":1}}],[\"使用sql语言来实现数据的存取\",{\"1\":{\"930\":1}}],[\"使用springmvc过滤器\",{\"0\":{\"2807\":1}}],[\"使用spring中ioc的方式\",{\"0\":{\"2541\":1}}],[\"使用spring\",{\"1\":{\"2185\":1}}],[\"使用stream流中的toarray方法或collect方法来操作\",{\"1\":{\"889\":1}}],[\"使用ssl传输协议\",{\"1\":{\"725\":1}}],[\"使用synchronized的解决方案\",{\"0\":{\"489\":1}}],[\"使用scanner扫描器\",{\"1\":{\"422\":1}}],[\"使用lombok需要在项目中开启注解编译\",{\"1\":{\"2271\":1}}],[\"使用location对象可以操作地址栏\",{\"1\":{\"1462\":1}}],[\"使用lock的解决方案\",{\"0\":{\"490\":1}}],[\"使用lock锁\",{\"1\":{\"481\":1,\"490\":1}}],[\"使用log4j记录日志\",{\"0\":{\"1285\":1},\"1\":{\"2304\":1}}],[\"使用left\",{\"1\":{\"1148\":1}}],[\"使用lambda表达式优化\",{\"1\":{\"856\":1}}],[\"使用lambda表达式\",{\"1\":{\"251\":1}}],[\"使用构造方法传入线程任务对象以及线程名字\",{\"1\":{\"444\":1}}],[\"使用扫描器输出流中的数据\",{\"1\":{\"422\":1}}],[\"使用字符转换流达到文件复制\",{\"1\":{\"421\":1}}],[\"使用字符流复制\",{\"1\":{\"412\":1}}],[\"使用案例\",{\"0\":{\"315\":1,\"318\":1,\"1831\":1,\"1834\":1,\"1850\":1,\"2049\":1,\"2128\":1,\"2634\":1,\"2836\":1,\"2841\":1,\"2846\":1,\"2851\":1,\"2856\":1}}],[\"使用同步锁\",{\"1\":{\"258\":1}}],[\"使用迭代器\",{\"1\":{\"251\":1}}],[\"使用增强for循环\",{\"1\":{\"251\":1}}],[\"使用增强for循环遍历时\",{\"1\":{\"245\":1}}],[\"使用版本\",{\"1\":{\"235\":1}}],[\"使用泛型你可能觉得麻烦\",{\"1\":{\"235\":1}}],[\"使用泛型的好处\",{\"0\":{\"235\":1}}],[\"使用泛型后\",{\"1\":{\"234\":1}}],[\"使用模板\",{\"0\":{\"150\":1},\"1\":{\"1165\":1}}],[\"使用\",{\"0\":{\"98\":1,\"818\":1,\"821\":1,\"1130\":1,\"1252\":1,\"1721\":1,\"2327\":1,\"2330\":1,\"2876\":1},\"1\":{\"94\":2,\"466\":1,\"522\":1,\"553\":1,\"635\":1,\"838\":1,\"841\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":1,\"1172\":1,\"1184\":1,\"1235\":1,\"1415\":1,\"1916\":1,\"1920\":1,\"1924\":1,\"1961\":1,\"2126\":1,\"2257\":1,\"2533\":1,\"2639\":1,\"2646\":1,\"2707\":1,\"2740\":1,\"2761\":2}}],[\"使用对象创建线程对象\",{\"1\":{\"445\":1}}],[\"使用对象拓展运算符\",{\"1\":{\"79\":1}}],[\"使用对象赋值时\",{\"1\":{\"75\":1}}],[\"查找上面目标时\",{\"1\":{\"2517\":1}}],[\"查找与正则表达式相匹配的值\",{\"1\":{\"1405\":1}}],[\"查找找到一个或多个正则表达式的匹配\",{\"1\":{\"1405\":1}}],[\"查找字符串中是否包含指定的子字符串\",{\"1\":{\"1405\":1}}],[\"查找当天的日记\",{\"1\":{\"1191\":1}}],[\"查找\",{\"1\":{\"857\":1}}],[\"查找和替换\",{\"0\":{\"641\":1}}],[\"查\",{\"1\":{\"396\":1,\"1266\":1,\"1275\":1}}],[\"查询id<3的所有记录\",{\"1\":{\"2692\":2}}],[\"查询余额为150\",{\"1\":{\"2690\":1,\"2691\":1}}],[\"查询余额为100\",{\"1\":{\"2690\":1,\"2691\":2}}],[\"查询并返回object类型实体<t>\",{\"1\":{\"2672\":1}}],[\"查询结果如图所示\",{\"1\":{\"2478\":1}}],[\"查询结果等\",{\"1\":{\"154\":1}}],[\"查询的总次数\",{\"1\":{\"2479\":1}}],[\"查询的顺序是\",{\"1\":{\"2471\":1}}],[\"查询的三种方式\",{\"0\":{\"2342\":1}}],[\"查询后通过select\",{\"1\":{\"2408\":2}}],[\"查询特定的字段\",{\"0\":{\"2257\":1}}],[\"查询条件\",{\"0\":{\"2253\":1}}],[\"查询操作\",{\"0\":{\"2219\":1}}],[\"查询集合\",{\"1\":{\"2214\":1}}],[\"查询单行\",{\"1\":{\"2214\":1}}],[\"查询用户\",{\"0\":{\"2202\":1}}],[\"查询是需要手动的将结果集的列数据转换为java对象的属性\",{\"1\":{\"2198\":1}}],[\"查询是否有线程正在等待与此锁\",{\"1\":{\"478\":1}}],[\"查询元素\",{\"1\":{\"1480\":1}}],[\"查询元素索引的方法\",{\"1\":{\"1391\":1}}],[\"查询元素效率低\",{\"1\":{\"227\":1}}],[\"查询元素效率高\",{\"1\":{\"227\":1}}],[\"查询指定索引元素\",{\"0\":{\"1391\":1}}],[\"查询指定列的数据\",{\"0\":{\"1025\":1}}],[\"查询时不用传\",{\"1\":{\"1252\":1}}],[\"查询全部\",{\"1\":{\"1222\":1,\"1253\":1}}],[\"查询依据\",{\"1\":{\"1196\":1}}],[\"查询对象\",{\"1\":{\"1196\":1}}],[\"查询尽量避免返回大量数据\",{\"1\":{\"1148\":1}}],[\"查询sql时最好不要用select\",{\"1\":{\"1148\":1}}],[\"查询当前事务隔离级别\",{\"1\":{\"1113\":1}}],[\"查询当前正在使用哪个数据库\",{\"0\":{\"949\":1}}],[\"查询那些有商品的分类\",{\"1\":{\"1073\":1}}],[\"查询出分类表的所有数据\",{\"1\":{\"1072\":1}}],[\"查询价格最高的商品信息\",{\"1\":{\"1071\":2}}],[\"查询员工的编号\",{\"1\":{\"1068\":1}}],[\"查询某张表的结构\",{\"0\":{\"964\":1}}],[\"查询某个数据库的结构\",{\"0\":{\"948\":1}}],[\"查询所有\",{\"0\":{\"2203\":1},\"1\":{\"2192\":1}}],[\"查询所有行和列的数据\",{\"0\":{\"1024\":1}}],[\"查询所有表\",{\"0\":{\"963\":1}}],[\"查询所有数据库\",{\"0\":{\"947\":1}}],[\"查询\",{\"0\":{\"1222\":1,\"2413\":1,\"2671\":1},\"1\":{\"395\":1,\"930\":1,\"2179\":1,\"2434\":1}}],[\"查看转译之后的java源代码文件中的区别\",{\"1\":{\"1962\":1}}],[\"查看tomcat\",{\"1\":{\"1934\":1}}],[\"查看demo目录中的内容\",{\"1\":{\"1780\":1}}],[\"查看对象属性\",{\"1\":{\"1419\":1,\"1420\":1,\"1421\":1}}],[\"查看对应错误信息\",{\"1\":{\"922\":1}}],[\"查看字符串是否以指定的子字符串开头\",{\"1\":{\"1405\":1}}],[\"查看字符集\",{\"1\":{\"1156\":1}}],[\"查看字符集和校验规则\",{\"0\":{\"1156\":1}}],[\"查看校对规则\",{\"1\":{\"1156\":1}}],[\"查看某个表格的字符集和校对规则\",{\"1\":{\"1156\":1}}],[\"查看和修改某个数据库的字符集和校对规则\",{\"1\":{\"1156\":1}}],[\"查看服务器的字符集和校对规则\",{\"1\":{\"1156\":1}}],[\"查看gbk和utf\",{\"1\":{\"1156\":1}}],[\"查看索引\",{\"0\":{\"1131\":1}}],[\"查看权限\",{\"0\":{\"1118\":1}}],[\"查看mysql中事务是否自动提交\",{\"1\":{\"1106\":1}}],[\"查看maven版本信息验证安装是否正确\",{\"1\":{\"674\":1}}],[\"查看约束\",{\"0\":{\"982\":1}}],[\"查看建表语句\",{\"0\":{\"965\":1},\"1\":{\"937\":1,\"965\":1}}],[\"查看表\",{\"1\":{\"1211\":1}}],[\"查看表中数据\",{\"1\":{\"937\":1}}],[\"查看表的结构\",{\"1\":{\"937\":1}}],[\"查看user表中的host信息\",{\"1\":{\"928\":1}}],[\"查看右侧的log\",{\"1\":{\"922\":1}}],[\"查看生成两个文件\",{\"1\":{\"763\":1}}],[\"查看项目代码\",{\"1\":{\"760\":1}}],[\"查看到pull\",{\"1\":{\"759\":1}}],[\"查看分支\",{\"1\":{\"748\":1}}],[\"查看历史操作git\",{\"1\":{\"742\":1}}],[\"查看历史操作\",{\"1\":{\"739\":1}}],[\"查看历史记录\",{\"1\":{\"731\":1}}],[\"查看所有字符集和和其默认的校对规则\",{\"1\":{\"1156\":1}}],[\"查看所有日志或某个文件日志\",{\"1\":{\"739\":1}}],[\"查看所有的位置结构\",{\"1\":{\"643\":1}}],[\"查看文件日志\",{\"1\":{\"739\":1}}],[\"查看文件状态\",{\"1\":{\"737\":1}}],[\"查看日志指令\",{\"1\":{\"739\":1}}],[\"查看日志\",{\"0\":{\"739\":1}}],[\"查看本地库状态\",{\"1\":{\"731\":1}}],[\"查看配置信息\",{\"1\":{\"726\":1}}],[\"查看最近使用的位置\",{\"1\":{\"645\":1}}],[\"查看最近使用的文件\",{\"1\":{\"645\":1}}],[\"查看当前配置的镜像\",{\"1\":{\"1681\":1}}],[\"查看当前目录产生\",{\"1\":{\"732\":1}}],[\"查看当前的层次结构\",{\"1\":{\"644\":1}}],[\"查看当前派产生类的父类\",{\"1\":{\"644\":1}}],[\"查看当前类所有的实现\",{\"1\":{\"644\":1}}],[\"查看光标处的文档\",{\"1\":{\"637\":1}}],[\"查看代码建议时\",{\"1\":{\"624\":1}}],[\"查看源码我们知道\",{\"1\":{\"392\":1}}],[\"查看它的class文件反编译代码\",{\"1\":{\"363\":1}}],[\"查看栈顶的数据并移除\",{\"1\":{\"303\":1}}],[\"查看栈顶的数据不移除\",{\"1\":{\"303\":1}}],[\"查看构造器\",{\"1\":{\"294\":1}}],[\"查看\",{\"1\":{\"219\":2,\"251\":1,\"260\":1,\"292\":1}}],[\"查看是否安装成功\",{\"1\":{\"97\":1}}],[\"查看npm配置信息\",{\"1\":{\"93\":1}}],[\"查看webserver成功运行\",{\"1\":{\"88\":1}}],[\"查看版本\",{\"1\":{\"85\":1,\"1682\":1}}],[\"协议不一样http\",{\"1\":{\"2168\":1}}],[\"协议的请求所定制\",{\"1\":{\"1820\":1}}],[\"协议的connector获得\",{\"1\":{\"1769\":1}}],[\"协议名\",{\"1\":{\"1799\":1}}],[\"协议保护\",{\"1\":{\"1216\":1}}],[\"协议\",{\"1\":{\"154\":1}}],[\"协调调度的\",{\"1\":{\"120\":1}}],[\"响应json数据\",{\"0\":{\"2874\":1}}],[\"响应结束\",{\"1\":{\"2159\":1}}],[\"响应成功执行的函数\",{\"1\":{\"2131\":1,\"2169\":1}}],[\"响应普通文本数据\",{\"0\":{\"2119\":1},\"1\":{\"2128\":1}}],[\"响应回来的数据直接就在原页面上\",{\"1\":{\"2105\":1}}],[\"响应对象\",{\"0\":{\"1969\":1},\"1\":{\"1969\":1}}],[\"响应的数据\",{\"1\":{\"1960\":1}}],[\"响应的date使用的是gmt时间格式\",{\"1\":{\"200\":1}}],[\"响应内容给浏览器\",{\"1\":{\"1927\":1}}],[\"响应重定向到a1\",{\"1\":{\"1878\":1}}],[\"响应重定向的绝对路径中\",{\"1\":{\"1876\":1}}],[\"响应重定向和请求转发中的路径略有不同\",{\"1\":{\"1875\":1}}],[\"响应重定向路径\",{\"0\":{\"1875\":1}}],[\"响应重定向是通过httpservletresponse对象\",{\"1\":{\"1862\":1}}],[\"响应重定向\",{\"0\":{\"1862\":1},\"1\":{\"1864\":1}}],[\"响应乱码\",{\"0\":{\"1813\":1}}],[\"响应类型设置\",{\"0\":{\"1805\":1}}],[\"响应状态\",{\"0\":{\"1804\":1}}],[\"响应状态码等信息\",{\"1\":{\"1802\":1}}],[\"响应状态码\",{\"1\":{\"190\":1}}],[\"响应数据\",{\"1\":{\"1802\":1}}],[\"响应式设计\",{\"1\":{\"1559\":1}}],[\"响应协议\",{\"1\":{\"1324\":1}}],[\"响应处理\",{\"0\":{\"2858\":1,\"3184\":1},\"1\":{\"217\":1}}],[\"响应体就是响应的消息体\",{\"1\":{\"209\":1}}],[\"响应体\",{\"0\":{\"209\":1}}],[\"响应头中信息的格式为key\",{\"1\":{\"199\":1}}],[\"响应头用于告知浏览器当前响应中的详细信息\",{\"1\":{\"199\":1}}],[\"响应头\",{\"0\":{\"199\":1},\"1\":{\"1808\":1}}],[\"响应消息多了一个\",{\"1\":{\"190\":1}}],[\"响应行\",{\"0\":{\"190\":1},\"1\":{\"190\":1}}],[\"响应\",{\"1\":{\"154\":1}}],[\"→\",{\"1\":{\"154\":1,\"288\":6,\"344\":6,\"360\":14,\"364\":4,\"373\":3,\"384\":3,\"479\":2,\"495\":6,\"502\":4,\"505\":1,\"509\":7,\"1769\":9}}],[\"把我们要响应的数据直接return即可\",{\"1\":{\"2876\":1}}],[\"把要返回的视图信息存储在该类的view属性中\",{\"1\":{\"2871\":1}}],[\"把结果数据存储在该类的model属性中\",{\"1\":{\"2871\":1}}],[\"把请求中指定名称的参数给控制器中的形参赋值\",{\"1\":{\"2838\":1}}],[\"把用户请求转发到\",{\"1\":{\"2773\":1}}],[\"把当前事务挂起\",{\"1\":{\"2725\":1}}],[\"把资源让出来\",{\"1\":{\"2715\":1}}],[\"把bean实例传递给bean的后置处理器的方法\",{\"1\":{\"2573\":2}}],[\"把这个值当做主键值\",{\"1\":{\"2408\":1}}],[\"把实体user中的id改为uid\",{\"1\":{\"2226\":1}}],[\"把网络传输的对象通过字节序列化\",{\"1\":{\"2090\":1}}],[\"把对象的字节序列永久保存到硬盘上\",{\"1\":{\"2090\":1}}],[\"把对象转化为字节序列的过程称为序列化\",{\"1\":{\"2090\":1}}],[\"把字节序列转化为对象的过程称为反序列化\",{\"1\":{\"2090\":1}}],[\"把字符串转换为大写\",{\"1\":{\"1405\":1}}],[\"把字符串转换为小写\",{\"1\":{\"1405\":1}}],[\"把字符串分割为字符串数组\",{\"1\":{\"1405\":1}}],[\"把该方法产生的响应正文添加到源servlet的响应结果中\",{\"1\":{\"1858\":1}}],[\"把该方法产生的响应结果发送到客户端\",{\"1\":{\"1854\":1}}],[\"把div理解为一个\",{\"1\":{\"1512\":1}}],[\"把内容滚动到指定的坐标\",{\"1\":{\"1452\":1}}],[\"把窗口的大小调整到指定的宽度和高度\",{\"1\":{\"1452\":1}}],[\"把窗口的左上角移动到一个指定的坐标\",{\"1\":{\"1452\":1}}],[\"把键盘焦点给予一个窗口\",{\"1\":{\"1452\":1}}],[\"把键盘焦点从顶层窗口移开\",{\"1\":{\"1452\":1}}],[\"把\",{\"1\":{\"1415\":7}}],[\"把整个页面规划成由节点层构成的文档\",{\"1\":{\"1372\":1}}],[\"把表默认的字符集和所有字符列\",{\"1\":{\"1156\":1}}],[\"把订单项目表也分离到另一个表中\",{\"1\":{\"1047\":1}}],[\"把商品信息分离到另一个表中\",{\"1\":{\"1047\":1}}],[\"把他作为关联使用就行了\",{\"1\":{\"996\":1}}],[\"把集合中的数据分割成两个列表\",{\"1\":{\"882\":1}}],[\"把它们忽略掉能够屏蔽ide工具之间的差异\",{\"1\":{\"770\":1}}],[\"把指定的分支合并到当前分支上\",{\"1\":{\"748\":1}}],[\"把文件纳入git管理\",{\"1\":{\"729\":1}}],[\"把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大\",{\"1\":{\"492\":1}}],[\"把具有安全隐患的代码锁住即可\",{\"1\":{\"465\":1}}],[\"把x作为方法的返回值\",{\"1\":{\"338\":1}}],[\"把目标的代码片段去除最外层标签\",{\"1\":{\"150\":1}}],[\"把目标的代码片段整个插入到当前标签内部\",{\"1\":{\"150\":1}}],[\"把相关的js文件打包\",{\"1\":{\"114\":2}}],[\"特定关联关系中可通过设置fetchtype属性来覆盖该项的开关状态aggressivelazyloading\",{\"1\":{\"2434\":1}}],[\"特定的外部库和临时文件\",{\"1\":{\"600\":1}}],[\"特别是应用缓存和嵌套结果映射的时候\",{\"1\":{\"2420\":1}}],[\"特别注意\",{\"1\":{\"2375\":1}}],[\"特别适合于internet应用程序开发\",{\"1\":{\"1376\":1}}],[\"特征\",{\"1\":{\"430\":1,\"2607\":1}}],[\"特殊值注入\",{\"1\":{\"2560\":1}}],[\"特殊符号\",{\"1\":{\"2560\":2}}],[\"特殊符号的处理\",{\"0\":{\"2560\":1}}],[\"特殊符号的处理需要遵循html特殊符号转义\",{\"1\":{\"2556\":1}}],[\"特殊按钮\",{\"1\":{\"1339\":2,\"1341\":1,\"1342\":1,\"1343\":1}}],[\"特殊单元格\",{\"1\":{\"1319\":1}}],[\"特殊字符\",{\"0\":{\"1307\":1}}],[\"特殊缓存\",{\"1\":{\"364\":1}}],[\"特殊情况我们需要查询特定的字段\",{\"1\":{\"2257\":1}}],[\"特殊情况\",{\"1\":{\"364\":1}}],[\"特有方法\",{\"1\":{\"359\":1}}],[\"特性\",{\"0\":{\"366\":1,\"430\":1},\"1\":{\"284\":1,\"299\":1}}],[\"特点就是跳过大量的没有指令的节点\",{\"1\":{\"1642\":1}}],[\"特点也不一样\",{\"1\":{\"228\":1}}],[\"特点\",{\"0\":{\"986\":1,\"992\":1,\"998\":1,\"2179\":1},\"1\":{\"150\":1,\"228\":1,\"290\":1,\"297\":1,\"298\":1,\"302\":1,\"321\":1}}],[\"特指该年发布的正式版本的语言标准\",{\"1\":{\"71\":1}}],[\"遍历的集合或者是数组\",{\"1\":{\"2464\":1}}],[\"遍历指定次数\",{\"1\":{\"2025\":1}}],[\"遍历json\",{\"0\":{\"1630\":1}}],[\"遍历对象\",{\"0\":{\"1629\":1}}],[\"遍历所有元素的方法\",{\"1\":{\"1574\":1}}],[\"遍历出的每个元素是dom对象\",{\"1\":{\"1574\":1}}],[\"遍历出来的当前元素\",{\"1\":{\"147\":1}}],[\"遍历出来的数据\",{\"1\":{\"147\":2}}],[\"遍历出来每一个元素的计数\",{\"1\":{\"147\":1}}],[\"遍历出来每一个元素的下标\",{\"1\":{\"147\":1}}],[\"遍历老数组\",{\"1\":{\"316\":1}}],[\"遍历方法\",{\"0\":{\"291\":1}}],[\"遍历方式\",{\"1\":{\"249\":1,\"276\":1}}],[\"遍历\",{\"1\":{\"245\":1,\"292\":3}}],[\"遍历集合的长度\",{\"1\":{\"147\":1}}],[\"每层代码修改可以达到无损替换的效果\",{\"1\":{\"2039\":1}}],[\"每发生一次请求创建一个独立的请求域\",{\"1\":{\"1916\":1}}],[\"每种客户端都可以自定标准\",{\"1\":{\"1446\":1}}],[\"每种方法规定了客户与服务器联系的类型不同\",{\"1\":{\"157\":1}}],[\"每一次获取都会产生一个新的bean实例\",{\"1\":{\"2552\":1}}],[\"每一种简化写法都相当于已经指定了$\",{\"1\":{\"2155\":1}}],[\"每一层仅知道下层的存在\",{\"1\":{\"2043\":1}}],[\"每一层不同的应用具有某些相同的特征\",{\"1\":{\"2040\":1}}],[\"每一行代码都是一个独立的语句\",{\"1\":{\"1352\":1}}],[\"每一信息资源都有统一的且在网上唯一的地址\",{\"1\":{\"1324\":1}}],[\"每一个节点有before\",{\"1\":{\"282\":1}}],[\"每条dml都是默认提交事务的\",{\"1\":{\"1234\":1}}],[\"每50提交\",{\"1\":{\"1231\":1,\"1235\":1}}],[\"每处理一条数据\",{\"1\":{\"1230\":1}}],[\"每调用一次next\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"每行有多个字段\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"每取出一个元素\",{\"1\":{\"328\":1}}],[\"每放入一个元素\",{\"1\":{\"328\":1}}],[\"每个属性会按需加载\",{\"1\":{\"2434\":1}}],[\"每个人对待任何事物都有自己的看法\",{\"1\":{\"2197\":1}}],[\"每个监听器都有专门监听的事件\",{\"1\":{\"2070\":1}}],[\"每个web应用都是一个war文件\",{\"1\":{\"1768\":1}}],[\"每个连接器通过一个特定的端口和协议接收请求并将其转发至关联的引擎进行处理\",{\"1\":{\"1764\":1}}],[\"每个文件都有自己的功能与配置方法\",{\"1\":{\"1749\":1}}],[\"每个文件就是一个模块\",{\"1\":{\"101\":1}}],[\"每个\",{\"1\":{\"1451\":1}}],[\"每个js文件的引入都要使用一个独立的script标签\",{\"1\":{\"1380\":1}}],[\"每个框架存有独立的文档\",{\"1\":{\"1322\":1}}],[\"每个标题独占一行\",{\"1\":{\"1299\":1}}],[\"每个方法都是一个原子性的操作\",{\"1\":{\"1262\":1}}],[\"每个字段都可以被索引\",{\"1\":{\"1127\":1}}],[\"每个表有且最多只允许一个主键约束\",{\"1\":{\"986\":1}}],[\"每个表中有很多数据\",{\"1\":{\"926\":1}}],[\"每个数据库中有很多表\",{\"1\":{\"926\":1}}],[\"每个数据库中可以有多个数据库表\",{\"1\":{\"926\":1}}],[\"每个功能就是一个插件目标\",{\"1\":{\"711\":1}}],[\"每个插件都能实现多个功能\",{\"1\":{\"711\":1}}],[\"每个对象执行的代码放入run方法中\",{\"1\":{\"471\":1}}],[\"每个窗口后面有100个人在抢票\",{\"1\":{\"471\":1}}],[\"每个窗口都是一个线程对象\",{\"1\":{\"471\":1}}],[\"每个窗口50人\",{\"1\":{\"442\":1}}],[\"每个内核有自己的时间片\",{\"1\":{\"452\":1}}],[\"每个线程后面有50个人去抢票\",{\"1\":{\"442\":1}}],[\"每个线程都获取到我们设置的名字\",{\"1\":{\"441\":1}}],[\"每个元素为entry类型\",{\"1\":{\"294\":1}}],[\"每个元素会占用相同的内存空间\",{\"1\":{\"226\":2}}],[\"每个节点\",{\"1\":{\"261\":1}}],[\"每个帧会标识出该帧属于哪个流\",{\"1\":{\"167\":1}}],[\"每次都会新建一个事务\",{\"1\":{\"2730\":1}}],[\"每次都会对语法分析\",{\"1\":{\"1146\":1}}],[\"每次书写ajax代码比较繁琐\",{\"1\":{\"2129\":1}}],[\"每次执时都会向page域中放入一个名为\",{\"1\":{\"2025\":1}}],[\"每次执行时相似sql都会进行编译\",{\"1\":{\"1230\":1}}],[\"每次请求目标资源时\",{\"1\":{\"2006\":1}}],[\"每次请求\",{\"1\":{\"1822\":1}}],[\"每次请求一次\",{\"1\":{\"159\":1}}],[\"每次访问获得的结果可能都是不一样的\",{\"1\":{\"1785\":1}}],[\"每次访问获得的资源都是一样的\",{\"1\":{\"1785\":1}}],[\"每次访问都需要运算代码生成的资源\",{\"1\":{\"1785\":1}}],[\"每次访问都不需要运算\",{\"1\":{\"1785\":1}}],[\"每次运行程序的时候\",{\"1\":{\"1374\":2}}],[\"每次push\",{\"1\":{\"762\":1}}],[\"每次在addifabsent方法中每次都要对数组进行遍历\",{\"1\":{\"319\":1}}],[\"每次调用copyonwritearrayset的add方法时候\",{\"1\":{\"319\":1}}],[\"每次遍历出来一条数据就添加一个标签\",{\"1\":{\"147\":3}}],[\"迭代结束值\",{\"1\":{\"2025\":1}}],[\"迭代起始值\",{\"1\":{\"2025\":1}}],[\"迭代变量变化的步长\",{\"1\":{\"2025\":1}}],[\"迭代变量\",{\"1\":{\"2025\":1}}],[\"迭代标签\",{\"0\":{\"2024\":1}}],[\"迭代遍历方式\",{\"0\":{\"1574\":1}}],[\"迭代器与集合进行同步操作导致的\",{\"1\":{\"265\":1}}],[\"迭代器进行如下处理\",{\"1\":{\"265\":1}}],[\"迭代器\",{\"0\":{\"264\":1,\"265\":1,\"266\":1},\"1\":{\"249\":1,\"266\":1,\"276\":1}}],[\"迭代器对象\",{\"1\":{\"220\":2}}],[\"迭代器循环遍历\",{\"1\":{\"220\":1}}],[\"迭代器循环\",{\"1\":{\"220\":1}}],[\"迭代\",{\"0\":{\"147\":1},\"1\":{\"147\":1}}],[\"则前端展示的是404的页面\",{\"1\":{\"2859\":1}}],[\"则嵌套事务执行\",{\"1\":{\"2733\":1}}],[\"则以事务形式运行\",{\"1\":{\"2728\":1}}],[\"则以子类为主\",{\"1\":{\"714\":1}}],[\"则两者都回滚\",{\"1\":{\"2727\":1}}],[\"则新建事务\",{\"1\":{\"2733\":1}}],[\"则新建事务执行\",{\"1\":{\"2727\":1}}],[\"则新数组中的位置\",{\"1\":{\"295\":1}}],[\"则执行与propagation\",{\"1\":{\"2725\":1}}],[\"则在嵌套事务内执行\",{\"1\":{\"2725\":1}}],[\"则当前方法使用事务处理\",{\"1\":{\"2707\":1}}],[\"则当前类中的所有方法都开始事务处理\",{\"1\":{\"2707\":1}}],[\"则可能会破坏事务的总体目标\",{\"1\":{\"2685\":1}}],[\"则可以指定具体的类名来进行过滤\",{\"1\":{\"2301\":1}}],[\"则可以使用skip进行截取获取一个新的流\",{\"1\":{\"866\":1}}],[\"则可以通过对象名引用成员方法\",{\"1\":{\"828\":1}}],[\"则该功能不运行\",{\"1\":{\"2641\":1,\"2642\":1}}],[\"则查询数据库\",{\"1\":{\"2471\":1,\"2493\":1}}],[\"则都将级联中的方法进行执行\",{\"1\":{\"2434\":1}}],[\"则需要使用qualifier搭配\",{\"1\":{\"2596\":1}}],[\"则需要使用resultmap将字段名和属性名对应起来\",{\"1\":{\"2419\":1}}],[\"则需要修改\",{\"1\":{\"2487\":1}}],[\"则需要回滚事务\",{\"1\":{\"1109\":1}}],[\"则mybatis会出现错误提示\",{\"1\":{\"2345\":1}}],[\"则别名为其注解值\",{\"1\":{\"2330\":1}}],[\"则每次都会先进行清空\",{\"1\":{\"2301\":1}}],[\"则浏览器的正常功能可能都会受到影响\",{\"1\":{\"2168\":1}}],[\"则调用目标资源\",{\"1\":{\"2046\":1}}],[\"则调用第2个filter\",{\"1\":{\"2046\":1}}],[\"则web服务器会检查filterchain对象中是否还有filter\",{\"1\":{\"2046\":1}}],[\"则显示不具有前导零的年份\",{\"1\":{\"2030\":1}}],[\"则显示标签\",{\"1\":{\"145\":1}}],[\"则这个数字会被截断\",{\"1\":{\"2029\":1}}],[\"则数字将会被截断\",{\"1\":{\"2029\":1}}],[\"则认为是空\",{\"1\":{\"1991\":1}}],[\"则为true\",{\"1\":{\"1991\":1}}],[\"则按照\",{\"1\":{\"1843\":1}}],[\"则按第2个字段排序\",{\"1\":{\"1040\":1}}],[\"则转发至此属性定义的端口\",{\"1\":{\"1765\":1}}],[\"则增加b\",{\"1\":{\"1568\":1}}],[\"则删除\",{\"1\":{\"1568\":1}}],[\"则比较值是否相同\",{\"1\":{\"1363\":1}}],[\"则默认结果就是一个整数\",{\"1\":{\"1361\":1}}],[\"则是处理请求的适配器\",{\"1\":{\"2781\":1}}],[\"则是一个真正的任务\",{\"1\":{\"1198\":1}}],[\"则是正式名称\",{\"1\":{\"71\":1}}],[\"则使用默认的字段进行赋值\",{\"1\":{\"1019\":1}}],[\"则不会出现web目录external\",{\"1\":{\"1776\":1}}],[\"则不允许对父表对应候选键进行update\",{\"1\":{\"1003\":1}}],[\"则不显示标签\",{\"1\":{\"145\":1}}],[\"则必须插入\",{\"1\":{\"972\":1}}],[\"则归父类管理\",{\"1\":{\"714\":1}}],[\"则表示\",{\"1\":{\"680\":1,\"688\":1}}],[\"则直接替换当前标签\",{\"1\":{\"624\":1}}],[\"则直接从缓存中取值\",{\"1\":{\"364\":1}}],[\"则取消注释\",{\"1\":{\"613\":2}}],[\"则其子类将自动具有该注解\",{\"1\":{\"556\":1}}],[\"则serialversionuid\",{\"1\":{\"427\":1}}],[\"则字节将被写入文件的末尾而不是开头\",{\"1\":{\"407\":1}}],[\"则会出错\",{\"1\":{\"2826\":1}}],[\"则会出现异常\",{\"1\":{\"1987\":1}}],[\"则会发生严重的后果\",{\"1\":{\"2698\":1}}],[\"则会依次查找然后拼接最后的代码\",{\"1\":{\"2461\":1}}],[\"则会拼接语句1\",{\"1\":{\"2443\":1}}],[\"则会通过级联的方法给emplist中调用com\",{\"1\":{\"2435\":1}}],[\"则会取消ajax请求\",{\"1\":{\"2155\":1}}],[\"则会显示\",{\"1\":{\"976\":1}}],[\"则会重新创建对应的对象初始化\",{\"1\":{\"364\":1}}],[\"则会覆盖原来的key\",{\"1\":{\"290\":1}}],[\"则通常应优先使用此方法而不是构造函数integer\",{\"1\":{\"363\":1}}],[\"则消费者线程wait返回的时间值后\",{\"1\":{\"354\":1}}],[\"则消费者线程会从队列中取出此元素\",{\"1\":{\"354\":1}}],[\"则notempty等待池会进入等待状态\",{\"1\":{\"334\":1}}],[\"则notfull等待池会进入等待状态\",{\"1\":{\"334\":1}}],[\"则返回该值否则就返回t\",{\"1\":{\"853\":2}}],[\"则返回\",{\"1\":{\"364\":1}}],[\"则返回false\",{\"1\":{\"324\":1}}],[\"则返回null\",{\"1\":{\"260\":2}}],[\"则抛出异常\",{\"1\":{\"324\":1,\"2725\":1}}],[\"则多余的元素不受影响\",{\"1\":{\"300\":1}}],[\"则length的长度必须为2的整数倍\",{\"1\":{\"296\":1}}],[\"则扩容前插入\",{\"1\":{\"295\":1}}],[\"则加入到该链表的最后\",{\"1\":{\"279\":1}}],[\"则添加到最后\",{\"1\":{\"279\":1}}],[\"则ai是ai\",{\"1\":{\"226\":1}}],[\"则它必须重传\",{\"1\":{\"161\":1}}],[\"访问的路径应该为\",{\"1\":{\"2764\":1}}],[\"访问对应的资源\",{\"1\":{\"1746\":1}}],[\"访问对象属性\",{\"1\":{\"142\":1}}],[\"访问本机tomcat的url格式\",{\"1\":{\"1743\":1}}],[\"访问tomcat的url格式\",{\"1\":{\"1743\":1}}],[\"访问\",{\"0\":{\"1743\":1}}],[\"访问成功再运行\",{\"1\":{\"1721\":1}}],[\"访问这些属性和方法的时候\",{\"1\":{\"1448\":1}}],[\"访问这些属性或者调用这些方法就可以控制浏览器作出指定的行为\",{\"1\":{\"1448\":1}}],[\"访问存储引擎接口\",{\"1\":{\"1250\":1}}],[\"访问数据库\",{\"0\":{\"926\":1}}],[\"访问mysql服务器对应的命令\",{\"1\":{\"925\":1}}],[\"访问map集合\",{\"1\":{\"142\":1}}],[\"访问linux服务器ip地址即可\",{\"1\":{\"812\":1}}],[\"访问list集合或数组\",{\"1\":{\"142\":1}}],[\"访问属性域的起点\",{\"1\":{\"142\":1}}],[\"访问servlet并附带请求参数\",{\"0\":{\"138\":1}}],[\"图像\",{\"1\":{\"1295\":1}}],[\"图书管理系统等\",{\"1\":{\"911\":1}}],[\"图形\",{\"1\":{\"908\":1}}],[\"图片等资源\",{\"1\":{\"1937\":1}}],[\"图片等静态资源之外\",{\"1\":{\"660\":1}}],[\"图片类型为gif格式\",{\"1\":{\"1806\":1}}],[\"图片类型为jpeg或jpg格式\",{\"1\":{\"1806\":1}}],[\"图片按钮\",{\"1\":{\"1339\":1}}],[\"图片加载失败\",{\"1\":{\"1309\":1}}],[\"图片加载失败的提示语\",{\"1\":{\"1309\":1}}],[\"图片如果加载失败那么提示语也是title的内容\",{\"1\":{\"1309\":1}}],[\"图片地址+空格+\",{\"1\":{\"1177\":2}}],[\"图片文字\",{\"1\":{\"1177\":2}}],[\"图片文件\",{\"1\":{\"154\":1}}],[\"图片\",{\"0\":{\"1177\":1,\"1309\":1},\"1\":{\"1295\":1,\"1309\":1}}],[\"图\",{\"1\":{\"142\":1,\"225\":1,\"302\":1}}],[\"图例\",{\"1\":{\"62\":1}}],[\"公用的环境配置\",{\"1\":{\"1750\":1}}],[\"公共切入点表达式id\",{\"1\":{\"2648\":5}}],[\"公共文件\",{\"1\":{\"1686\":1}}],[\"公共的向连接池中归还链接\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"公共的获取链接方法\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"公共内置对象的源码位置\",{\"1\":{\"141\":1}}],[\"公共内置对象\",{\"0\":{\"141\":1}}],[\"公钥\",{\"1\":{\"1216\":1}}],[\"公钥不可用\",{\"1\":{\"1216\":1}}],[\"公司不同\",{\"1\":{\"1376\":1}}],[\"公司开发的世界上第一款支持sql语言的关系型数据库\",{\"1\":{\"919\":1}}],[\"公司或组织的域名倒序+当前项目名称\",{\"1\":{\"685\":1}}],[\"公司域名倒写\",{\"1\":{\"683\":1,\"685\":1}}],[\"公司域名倒着写+test\",{\"1\":{\"522\":1}}],[\"公司\",{\"1\":{\"70\":1}}],[\"再直接访问\",{\"1\":{\"2926\":1}}],[\"再生成\",{\"1\":{\"2774\":1}}],[\"再导入slf4j的具体实现logback日志\",{\"1\":{\"2487\":1}}],[\"再查询一级缓存\",{\"1\":{\"2471\":1}}],[\"再也不用手动去转换项目中\",{\"1\":{\"2127\":1}}],[\"再起请求logincheckcontroller\",{\"1\":{\"2098\":1}}],[\"再立即自动请求访问另一个web资源\",{\"1\":{\"1863\":1}}],[\"再引用vue\",{\"1\":{\"1718\":1,\"1721\":1}}],[\"再获取查看\",{\"1\":{\"1681\":1}}],[\"再给黄色div设置浮动\",{\"1\":{\"1521\":1}}],[\"再给橙色div添加浮动\",{\"1\":{\"1521\":1}}],[\"再请看下图\",{\"1\":{\"1519\":1}}],[\"再比较内容\",{\"1\":{\"1363\":2}}],[\"再比如我们使用反射的特性来优化我们的代码\",{\"1\":{\"597\":1}}],[\"再做数学运算\",{\"1\":{\"1362\":1}}],[\"再将用户所需信息传送回客户端的浏览器上\",{\"1\":{\"1329\":1}}],[\"再将原容器的引用指向新容器\",{\"1\":{\"313\":1}}],[\"再一次性提交到数据库\",{\"1\":{\"1230\":1}}],[\"再根据年龄分组\",{\"1\":{\"881\":1}}],[\"再执行\",{\"1\":{\"843\":1,\"844\":1}}],[\"再\",{\"1\":{\"729\":1}}],[\"再进一步\",{\"1\":{\"651\":1}}],[\"再进入运行状态\",{\"1\":{\"467\":1}}],[\"再次测试\",{\"1\":{\"2789\":1}}],[\"再次发送请求\",{\"1\":{\"2788\":1}}],[\"再次执行转账功能\",{\"1\":{\"2698\":1}}],[\"再次读取出来发现值不一样了\",{\"1\":{\"2692\":1}}],[\"再次提交\",{\"1\":{\"1231\":1,\"1235\":1}}],[\"再次向表中添加新记录时\",{\"1\":{\"976\":1}}],[\"再次点击ctrl+shit+\",{\"1\":{\"613\":1}}],[\"再次点击ctrl+\",{\"1\":{\"613\":1}}],[\"再次按住ctrl+w两次可以选择整个引用\",{\"1\":{\"612\":1}}],[\"再次按住ctrl+w可以选择整个字符串\",{\"1\":{\"612\":1}}],[\"再次哈希\",{\"1\":{\"294\":1}}],[\"再启动\",{\"1\":{\"460\":1}}],[\"再join才有效\",{\"1\":{\"458\":1}}],[\"再开辟其他的线程\",{\"1\":{\"453\":1}}],[\"再具备queue的基础上同时拓展了对头尾的独立操作方法\",{\"1\":{\"357\":1}}],[\"再从队列头部取出元素\",{\"1\":{\"354\":1}}],[\"再添加元素\",{\"1\":{\"337\":1}}],[\"再通过map\",{\"1\":{\"291\":1}}],[\"再判断\",{\"1\":{\"279\":1}}],[\"再创建相同的新表\",{\"1\":{\"976\":1}}],[\"再创建\",{\"1\":{\"279\":1}}],[\"再确定索引的结果\",{\"1\":{\"277\":1}}],[\"再回到java环境查看这个对象有哪些方法\",{\"1\":{\"140\":1}}],[\"再写父类异常\",{\"1\":{\"27\":1}}],[\"所做的操作可能是不正确的\",{\"1\":{\"2690\":1}}],[\"所需依赖\",{\"0\":{\"2629\":1}}],[\"所需要磁盘空间大小\",{\"1\":{\"725\":1}}],[\"所制定的标准规范\",{\"1\":{\"2011\":1}}],[\"所定义的所有全局属性和方法\",{\"1\":{\"1450\":1}}],[\"所在service的engine组件拿到请求\",{\"1\":{\"1769\":1}}],[\"所在路径\",{\"1\":{\"1198\":1}}],[\"所在行\",{\"1\":{\"1198\":1}}],[\"所在的页面中已经包\",{\"1\":{\"1198\":1}}],[\"所在包\",{\"1\":{\"594\":1}}],[\"所有缓存都必须实现的顶级接口\",{\"1\":{\"2490\":1}}],[\"所有关联对象都会延迟加载\",{\"1\":{\"2434\":1}}],[\"所有参数构造get\",{\"1\":{\"2276\":1,\"2425\":1,\"2428\":1,\"2435\":1}}],[\"所有post请求都将转为get请求\",{\"1\":{\"2141\":1}}],[\"所有请求均为异步请求\",{\"1\":{\"2138\":1}}],[\"所有web应用的\",{\"1\":{\"1751\":1}}],[\"所有html元素可以看作盒子\",{\"1\":{\"1527\":1}}],[\"所有子节点\",{\"1\":{\"1485\":1}}],[\"所有的方法\",{\"1\":{\"2634\":1}}],[\"所有的删除都变成了update语言\",{\"1\":{\"2234\":1}}],[\"所有的vue组件都是以\",{\"1\":{\"1704\":1}}],[\"所有的vue组件都是从这个组件中拓展的\",{\"1\":{\"1686\":1}}],[\"所有的vue的数据都在data对象中\",{\"1\":{\"1616\":1,\"1617\":1}}],[\"所有的vue的方法和属性都必须在对应的挂载根标签内部使用\",{\"1\":{\"1616\":1,\"1617\":1}}],[\"所有的开发文件的核心内容区域\",{\"1\":{\"1686\":1}}],[\"所有的对象中的清单内容\",{\"1\":{\"1617\":1}}],[\"所有的主流浏览器都支持\",{\"1\":{\"1559\":1}}],[\"所有的表达式都在当前的环境中计算\",{\"1\":{\"1450\":1}}],[\"所有的变量\",{\"1\":{\"1352\":1}}],[\"所有的用户输入内容的地方都用表单来写\",{\"1\":{\"1329\":1}}],[\"所有的属性都要有get和set方法\",{\"1\":{\"1226\":1}}],[\"所有的属性必须都是私有的\",{\"1\":{\"1226\":1}}],[\"所有的处理只能通过一个个命令来实现\",{\"1\":{\"1145\":1}}],[\"所有的事务之间保持隔离\",{\"1\":{\"1111\":1}}],[\"所有的操作都会临时保存到事务日志\",{\"1\":{\"1100\":1}}],[\"所有的状态都相当于新表\",{\"1\":{\"976\":1}}],[\"所有的日期类都是可变的\",{\"1\":{\"891\":1}}],[\"所有的实现类都需要重写新增的方法\",{\"1\":{\"816\":1}}],[\"所有的git项目都会共用属性\",{\"1\":{\"726\":1}}],[\"所有的线程都执行完毕\",{\"1\":{\"305\":1,\"306\":1}}],[\"所有这些资源都必须按照正确的目录结构部署到服务器上\",{\"1\":{\"660\":1}}],[\"所有创建字符串都会在常量池中寻找一下\",{\"1\":{\"433\":1}}],[\"所有方法都是静态\",{\"1\":{\"366\":1}}],[\"所有传输的数据都会被分割\",{\"1\":{\"167\":1}}],[\"所属公司等\",{\"1\":{\"1048\":1}}],[\"所属包\",{\"1\":{\"366\":1}}],[\"所属的包\",{\"1\":{\"364\":1}}],[\"所属\",{\"1\":{\"302\":1}}],[\"所谓同源\",{\"1\":{\"2168\":1}}],[\"所谓数据\",{\"1\":{\"908\":1}}],[\"所谓多路复用\",{\"1\":{\"167\":1}}],[\"所谓内置对象其实就是在thymeleaf的表达式中可以直接使用的对象\",{\"1\":{\"139\":1}}],[\"所以就需要我们告诉dispatcherservlet\",{\"1\":{\"2874\":1}}],[\"所以就需要了这个元素的隐藏状态\",{\"1\":{\"1638\":1}}],[\"所以上面的demo执行流程如下\",{\"1\":{\"2788\":1}}],[\"所以之间是无关联的\",{\"1\":{\"2733\":1}}],[\"所以称为幻读\",{\"1\":{\"2692\":1}}],[\"所以根据目标类本身在ioc容器范围内查找不到\",{\"1\":{\"2658\":1}}],[\"所以根据目标类的类型从ioc容器中是找不到的\",{\"1\":{\"2658\":1}}],[\"所以对于java目录下的其他的配置文件\",{\"1\":{\"2505\":1}}],[\"所以对于mapper映射器的配置需要我们指向接口所在的位置\",{\"1\":{\"2374\":1}}],[\"所以mysql中提供了四种隔离级别来解决上述问题\",{\"1\":{\"2693\":1}}],[\"所以mybatis官方提供了一个逆向工程\",{\"1\":{\"2497\":1}}],[\"所以mappers标签中不可以使用package标签进行扫描\",{\"1\":{\"2340\":1}}],[\"所以这步的设置可以省略\",{\"1\":{\"2478\":1}}],[\"所以这里按照分支操作过程中产生的冲突来演示\",{\"1\":{\"783\":1}}],[\"所以较少使用\",{\"1\":{\"2441\":1}}],[\"所以下标从1开始\",{\"1\":{\"2389\":1,\"2402\":1}}],[\"所以下标从0开始\",{\"1\":{\"2388\":1,\"2401\":1}}],[\"所以下层模块中定义的api都可以为上层所调用和访问\",{\"1\":{\"653\":1}}],[\"所以标签中没有resulttype\",{\"1\":{\"2360\":1}}],[\"所以empmapper\",{\"1\":{\"2344\":1,\"2347\":1,\"2350\":1,\"2354\":1,\"2356\":1,\"2358\":1}}],[\"所以最终效果是动态的\",{\"1\":{\"2627\":1}}],[\"所以最终不会完全操作完所有的数据\",{\"1\":{\"305\":1}}],[\"所以最好的办法是直接告诉\",{\"1\":{\"2319\":1}}],[\"所以同样的构件能被不同的界面使用\",{\"1\":{\"2037\":1}}],[\"所以很容易改变应用程序的数据层和业务规则\",{\"1\":{\"2036\":1}}],[\"所以容器也会给我们准备一个servletconfig\",{\"1\":{\"1971\":1}}],[\"所以学习servlet技术一定要了解一些jsp技术\",{\"1\":{\"1950\":1}}],[\"所以不建议存放业务数据\",{\"1\":{\"1903\":1}}],[\"所以不能用来传递敏感信息\",{\"1\":{\"188\":1}}],[\"所以安全性较高\",{\"1\":{\"1903\":1}}],[\"所以服务端并不会记录当前客户端浏览器的访问状态\",{\"1\":{\"1882\":1}}],[\"所以绝对路径只能是本服务内的资源\",{\"1\":{\"1872\":1}}],[\"所以叫全局应用程序共享对象\",{\"1\":{\"1828\":1}}],[\"所以数据中含有中文就会出现乱码\",{\"1\":{\"1801\":1}}],[\"所以tomcat在启动后就会运行部署在tomcat副本中的web项目\",{\"1\":{\"1779\":1}}],[\"所以出现了乱码\",{\"1\":{\"1755\":1}}],[\"所以导致所有的赋值的引用一起改变\",{\"1\":{\"1705\":1}}],[\"所以要导入一个独立的依赖\",{\"1\":{\"2627\":1}}],[\"所以要使用分布式缓存对缓存数据进行集中管理\",{\"1\":{\"2482\":1}}],[\"所以要使用相对路径\",{\"1\":{\"1686\":1}}],[\"所以要先引用vue\",{\"1\":{\"1718\":1,\"1721\":1}}],[\"所以要将订单编号和商品编号作为数据库表的联合主键\",{\"1\":{\"1047\":1}}],[\"所以我需要使用其他的修饰符来设置精确匹配事件\",{\"1\":{\"1668\":1}}],[\"所以我们只需要关注sqlsessionfactory的创建和mapper的扫描即可\",{\"1\":{\"2907\":1}}],[\"所以我们可以在controller中跳转的路径就可以直接写文件名\",{\"1\":{\"2765\":1}}],[\"所以我们可以在projects实体类中创建projectrecord实体类的集合\",{\"1\":{\"2430\":1}}],[\"所以我们可以修改路径为绝对路径return\",{\"1\":{\"2764\":1}}],[\"所以我们可以使用包扫秒直接批量注册使用注解的实体类\",{\"1\":{\"2588\":1}}],[\"所以我们可以使用<mapper\",{\"1\":{\"2374\":1}}],[\"所以我们可以使用mapper名字\",{\"1\":{\"2345\":1}}],[\"所以我们可以直接使用compareto来比较stirng\",{\"1\":{\"272\":1}}],[\"所以我们新增logimpl属性配置\",{\"1\":{\"2315\":1}}],[\"所以我们推荐将所有的静态资源都存放在\",{\"1\":{\"2790\":1}}],[\"所以我们推荐在jsp中使用jsp专用注释<\",{\"1\":{\"1952\":1}}],[\"所以我们推荐结合prevent修饰符实现右键的事件监听\",{\"1\":{\"1673\":1}}],[\"所以我们也不推荐在jsp中定义局部变量\",{\"1\":{\"1951\":1}}],[\"所以我们在代码中直接使用反射\",{\"1\":{\"1217\":1}}],[\"所以我们需要引入事务的控制\",{\"1\":{\"2698\":1}}],[\"所以我们需要手动关闭resultset\",{\"1\":{\"1250\":1}}],[\"所以我们需要特殊处理\",{\"1\":{\"859\":1}}],[\"所以我们需要在产品类中使用锁以及监视器\",{\"1\":{\"489\":1}}],[\"所以我们把暂存区有时也叫作索引\",{\"1\":{\"728\":1}}],[\"所以我们感受到的是多个任务同时执行\",{\"1\":{\"452\":1}}],[\"所以我们对html的新的期待\",{\"1\":{\"119\":1}}],[\"所以使用capture去监听捕获阶段的事件\",{\"1\":{\"1661\":1}}],[\"所以是不支持在vue中使用的\",{\"1\":{\"1617\":1}}],[\"所以jquery针对于这一情况\",{\"1\":{\"1568\":1}}],[\"所以它不占据空间\",{\"1\":{\"1519\":1}}],[\"所以你的其它元素要包裹在它里面\",{\"1\":{\"1290\":1}}],[\"所以效率要高\",{\"1\":{\"1250\":1}}],[\"所以效率会大大提高\",{\"1\":{\"1230\":1}}],[\"所以达不到防止sql注入的目的\",{\"1\":{\"1249\":1}}],[\"所以spring使用的是cglib代理\",{\"1\":{\"2659\":1}}],[\"所以servlet不可以作为页面资源\",{\"1\":{\"1927\":1}}],[\"所以sql执行成功\",{\"1\":{\"1246\":1}}],[\"所以string中一定要对这个方法进行重写\",{\"1\":{\"431\":1}}],[\"所以默认是关闭的\",{\"1\":{\"1216\":1}}],[\"所以索引列也要占用空间\",{\"1\":{\"1128\":1}}],[\"所以直接在图形界面下执行该命令会自动结束\",{\"1\":{\"925\":1}}],[\"所以直接这样配置intellij\",{\"1\":{\"676\":1}}],[\"所以一般情况下社区版就可以满足开发需求了\",{\"1\":{\"920\":1}}],[\"所以一般用在满足对银行\",{\"1\":{\"919\":1}}],[\"所以本书的重点是关系型数据库\",{\"1\":{\"919\":1}}],[\"所以在使用前需要导包\",{\"1\":{\"2614\":1}}],[\"所以在使用全局容器时不建议存放业务数据\",{\"1\":{\"1830\":1}}],[\"所以在构建实体类的时候可以为dept表中创建一个emp集合的私有属性\",{\"1\":{\"2427\":1}}],[\"所以在构建实体类的时候可以为emp表中创建一个dept的私有属性\",{\"1\":{\"2424\":1}}],[\"所以在分层上\",{\"1\":{\"1953\":1}}],[\"所以在两张表中都无法创建外键\",{\"1\":{\"1051\":1}}],[\"所以在这里违反了第二范式的设计原则\",{\"1\":{\"1047\":1}}],[\"所以在不能明确该字段具体需要多少字符时推荐使用varchar类型\",{\"1\":{\"941\":1}}],[\"所以在多线程的环境下是安全的\",{\"1\":{\"895\":1}}],[\"所以在jdk1\",{\"1\":{\"233\":1}}],[\"所以为了提高效率\",{\"1\":{\"874\":1}}],[\"所以会自动装箱和拆箱\",{\"1\":{\"874\":1}}],[\"所以构造器引用使用\",{\"1\":{\"831\":1}}],[\"所以应提前把所需rpm包下载并安装好\",{\"1\":{\"809\":1}}],[\"所以需要处理器适配器对此进行适配处理\",{\"1\":{\"2772\":1}}],[\"所以需要对javabean对象实现序列化接口\",{\"1\":{\"2480\":1}}],[\"所以需要执行以下操作\",{\"1\":{\"2337\":1}}],[\"所以需要新创建一张中间表\",{\"1\":{\"1051\":1}}],[\"所以需要填写用户名和邮箱作为一个标识\",{\"1\":{\"726\":1}}],[\"所以需对hashcode\",{\"1\":{\"294\":1}}],[\"所以首先要从中央服务器下载最新的版本\",{\"1\":{\"723\":1}}],[\"所以拥有以下特性\",{\"1\":{\"702\":1}}],[\"所以部署的时候不需要\",{\"1\":{\"691\":1}}],[\"所以必须知道当前系统环境中jdk的安装目录\",{\"1\":{\"674\":1}}],[\"所以综上所述\",{\"1\":{\"660\":1}}],[\"所以编写任何java代码想要执行的话就必须经过编译得到对应的\",{\"1\":{\"658\":1}}],[\"所以常常用两三行\",{\"1\":{\"655\":1}}],[\"所以性能略高\",{\"1\":{\"397\":1}}],[\"所以性能很高\",{\"1\":{\"313\":1}}],[\"所以推荐使用\",{\"1\":{\"384\":1}}],[\"所以可以给启动类上的包扫描删除掉\",{\"1\":{\"2285\":1}}],[\"所以可以通过统一的方式查询或依赖\",{\"1\":{\"706\":1}}],[\"所以可以有多个等待队列\",{\"1\":{\"475\":1}}],[\"所以可以互相转换\",{\"1\":{\"370\":1}}],[\"所以可以读取原容器中的值\",{\"1\":{\"313\":1}}],[\"所以定义为属性\",{\"1\":{\"328\":1}}],[\"所以commit就是往master分支上提交更改\",{\"1\":{\"729\":1}}],[\"所以collection最基础的增删改查操作是有的\",{\"1\":{\"322\":1}}],[\"所以copyonwritearrayset的性能低于copyonwritearraylist\",{\"1\":{\"319\":1}}],[\"所以add方法直接不可以添加重复数据进去\",{\"1\":{\"318\":1}}],[\"所以如果继续使用静态代理反而会增加许多的工作量\",{\"1\":{\"2606\":1}}],[\"所以如果数据量较大并且更新操作频繁则对内存消耗很高\",{\"1\":{\"313\":1}}],[\"所以如果你希望写入的的数据\",{\"1\":{\"313\":1}}],[\"所以\",{\"1\":{\"281\":1,\"304\":1,\"570\":1,\"1114\":1,\"1473\":1,\"1705\":1}}],[\"所以linkedlist的元素的添加和删除\",{\"1\":{\"261\":1}}],[\"所以此处有些许冗余\",{\"1\":{\"252\":1,\"293\":1}}],[\"所以此时我们需要引入服务器端动态视图模板技术\",{\"1\":{\"119\":1}}],[\"所以他可以使用collection接口的通用方法\",{\"1\":{\"249\":1,\"276\":1}}],[\"所以现在什么引用数据类型都可以存入集合\",{\"1\":{\"234\":1}}],[\"所以浏览器的每次请求都需要与服务器建立一个tcp连接\",{\"1\":{\"163\":1}}],[\"所以无连接表示每次连接只能处理一个请求\",{\"1\":{\"159\":1}}],[\"会导致性能的降低\",{\"1\":{\"2777\":1}}],[\"会导致将\",{\"1\":{\"2150\":1}}],[\"会暂停当前已开启的事务\",{\"1\":{\"2731\":1}}],[\"会抛异常\",{\"1\":{\"2729\":1}}],[\"会抛出异常\",{\"1\":{\"287\":1}}],[\"会找到\",{\"1\":{\"2595\":1}}],[\"会返回缓存对象的拷贝\",{\"1\":{\"2481\":1}}],[\"会探测到使用的什么类型的typehandler进行处理\",{\"1\":{\"2437\":1}}],[\"会使用\",{\"1\":{\"2330\":1}}],[\"会使用到vary头\",{\"1\":{\"202\":1}}],[\"会按照顺序依次查找\",{\"1\":{\"2314\":1}}],[\"会回写到\",{\"1\":{\"2289\":1}}],[\"会转换成字符串格式\",{\"1\":{\"2155\":1}}],[\"会转成\",{\"1\":{\"279\":1}}],[\"会给用户一种不连贯的体验\",{\"1\":{\"2103\":1}}],[\"会触发valueunbound\",{\"1\":{\"2081\":1}}],[\"会触发delayed接口中的compareto方法进行排序\",{\"1\":{\"354\":1}}],[\"会销毁filter对象\",{\"1\":{\"2006\":1}}],[\"会对相应命名空间所有的select元素查询结果进行缓存\",{\"1\":{\"2480\":1}}],[\"会对filter进行构造并初始化\",{\"1\":{\"2006\":1}}],[\"会对单引号进行转译处理\",{\"1\":{\"1249\":1}}],[\"会调用filter对应的方法\",{\"1\":{\"2000\":1}}],[\"会响应给浏览器\",{\"1\":{\"1952\":2}}],[\"会被转化成java代码\",{\"1\":{\"1983\":1}}],[\"会被转义成\",{\"1\":{\"1249\":1}}],[\"会被同时编译执行\",{\"1\":{\"1961\":1}}],[\"会被编译成servlet的类文件\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"会做检查工作\",{\"1\":{\"1933\":1}}],[\"会严重影响效率\",{\"1\":{\"1824\":1}}],[\"会先去判断脚本中的catalina\",{\"1\":{\"1779\":1}}],[\"会先扩容后\",{\"1\":{\"295\":1}}],[\"会经历很多环节的演变\",{\"1\":{\"1728\":1}}],[\"会有相关提示语\",{\"1\":{\"1689\":1}}],[\"会有编译之前的文本显示\",{\"1\":{\"1634\":1}}],[\"会发现外层的盒子也会被触发\",{\"1\":{\"1656\":1}}],[\"会员大会采纳了它的首个版本\",{\"1\":{\"1372\":1}}],[\"会强制转换为number再比较内容\",{\"1\":{\"1363\":1}}],[\"会和jquery冲突\",{\"1\":{\"1352\":1}}],[\"会随着页面宽度的变化而变化\",{\"1\":{\"1300\":1}}],[\"会试着从初始化时加载的那些驱动程序以及使用与当前\",{\"1\":{\"1256\":1}}],[\"会继承所在文件的所有字段\",{\"1\":{\"1198\":1}}],[\"会从开发分支中独立出来\",{\"1\":{\"806\":1}}],[\"会从开发分支中分出发布版本分支\",{\"1\":{\"805\":1}}],[\"会合并到主干分支\",{\"1\":{\"805\":1}}],[\"会在~\",{\"1\":{\"763\":1}}],[\"会生成一条版本记录\",{\"1\":{\"738\":1}}],[\"会实时监控项目的\",{\"1\":{\"676\":1}}],[\"会展示该方法所有的引用\",{\"1\":{\"643\":1}}],[\"会自动映射字段进行取值\",{\"1\":{\"2826\":1}}],[\"会自动为我们将扫描到的\",{\"1\":{\"2780\":1}}],[\"会自动给我们拼接\",{\"1\":{\"2765\":1}}],[\"会自动导入其他依赖的jar\",{\"1\":{\"2538\":1}}],[\"会自动处理多余的\",{\"1\":{\"2452\":1}}],[\"会自动处理多余的and\",{\"1\":{\"2446\":1}}],[\"会自动拼接set\",{\"1\":{\"2452\":1}}],[\"会自动拼接where\",{\"1\":{\"2446\":1}}],[\"会自动调用后台的java方法\",{\"1\":{\"2014\":1}}],[\"会自动进行代码补全提醒\",{\"1\":{\"620\":1}}],[\"会自动从链表结构转换为红黑树结构\",{\"1\":{\"295\":1}}],[\"会检查该类型的class对象是否已被加载\",{\"1\":{\"570\":1}}],[\"会报空指针异常\",{\"1\":{\"327\":1,\"337\":1}}],[\"会报错\",{\"1\":{\"287\":1}}],[\"会将信息附加在url后\",{\"1\":{\"2155\":1}}],[\"会将该servlet的配置信息\",{\"1\":{\"1818\":1,\"1832\":1}}],[\"会将编译之前的属性参数直接抛出\",{\"1\":{\"1649\":1}}],[\"会将数据尝试转换number\",{\"1\":{\"1363\":1}}],[\"会将每一个流元素交给函数处理\",{\"1\":{\"862\":1}}],[\"会将\",{\"1\":{\"307\":1}}],[\"会将声明语句提到最前面执行\",{\"1\":{\"73\":1}}],[\"会出现浪费空间的情况\",{\"1\":{\"296\":1}}],[\"会出现错误的情况\",{\"1\":{\"244\":1}}],[\"会影响我们的查询时间\",{\"1\":{\"296\":1}}],[\"会计算key的hash码值\",{\"1\":{\"294\":1}}],[\"会覆盖之前的值\",{\"1\":{\"292\":1}}],[\"会把t当做一种数据类型\",{\"1\":{\"241\":1}}],[\"会读取响应头中的vary的内容\",{\"1\":{\"202\":1}}],[\"会话管理\",{\"0\":{\"3134\":1}}],[\"会话管理cookie和session\",{\"0\":{\"1880\":1},\"1\":{\"210\":1}}],[\"会话结束\",{\"1\":{\"1920\":1}}],[\"会话的开始\",{\"1\":{\"1920\":1}}],[\"会话的产生\",{\"1\":{\"1920\":1}}],[\"会话域\",{\"1\":{\"134\":1}}],[\"会话\",{\"0\":{\"134\":1}}],[\"奥巴马\",{\"1\":{\"133\":2}}],[\"请律师在他讲话之前进行辩护和总结\",{\"1\":{\"2605\":1}}],[\"请谨慎使用\",{\"1\":{\"2248\":1}}],[\"请创建自己的\",{\"1\":{\"2214\":1}}],[\"请设置为false\",{\"1\":{\"2153\":1}}],[\"请将此选项设置为false\",{\"1\":{\"2138\":1}}],[\"请发表你今天的心情\",{\"1\":{\"1701\":1}}],[\"请看下图\",{\"1\":{\"1519\":1}}],[\"请参阅\",{\"1\":{\"1451\":1}}],[\"请参阅对象\",{\"1\":{\"1451\":1}}],[\"请参数\",{\"1\":{\"1451\":3}}],[\"请使用$\",{\"1\":{\"2160\":1,\"2164\":1}}],[\"请使用\",{\"1\":{\"1415\":3}}],[\"请选择城市\",{\"1\":{\"1439\":1}}],[\"请选择\",{\"1\":{\"1340\":1,\"2176\":5}}],[\"请录入身份证信息\",{\"1\":{\"1333\":1}}],[\"请录入第二个数\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"32\":1}}],[\"请录入第一个数\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"32\":1}}],[\"请一定使用utf8\",{\"1\":{\"1156\":1}}],[\"请等待索引完成\",{\"1\":{\"600\":1}}],[\"请输入姓名\",{\"1\":{\"1555\":2}}],[\"请输入内容\",{\"1\":{\"1505\":1}}],[\"请输入3号女友的名字\",{\"1\":{\"1456\":1}}],[\"请输入消息\",{\"1\":{\"518\":2}}],[\"请输入密码\",{\"1\":{\"511\":1,\"512\":1,\"513\":1,\"1242\":1,\"1252\":1}}],[\"请输入用户名\",{\"1\":{\"511\":1,\"512\":1,\"513\":1,\"1242\":1,\"1252\":1}}],[\"请输入您想查看的日期\",{\"1\":{\"376\":1}}],[\"请不要使用copyonwrite容器\",{\"1\":{\"313\":1}}],[\"请求参数中是否必须提供此参数\",{\"1\":{\"2840\":1}}],[\"请求参数中的名称\",{\"1\":{\"2840\":1}}],[\"请求参数的处理\",{\"0\":{\"2791\":1,\"3181\":1},\"1\":{\"217\":1}}],[\"请求参数的使用\",{\"0\":{\"135\":1}}],[\"请求handleradapter处理器适配器执行对应的controller处理单元\",{\"1\":{\"2768\":1}}],[\"请求地址白名单\",{\"1\":{\"2172\":1}}],[\"请求url\",{\"1\":{\"2163\":1}}],[\"请求功能以取代复杂\",{\"1\":{\"2160\":1,\"2164\":1}}],[\"请求发送前可以通过该方法修改xmlhttprequest对象函数\",{\"1\":{\"2155\":1}}],[\"请求超时的时间设置\",{\"1\":{\"2155\":1}}],[\"请求失败时调用的函数\",{\"1\":{\"2155\":1}}],[\"请求失败时被调用的函数\",{\"1\":{\"2145\":1}}],[\"请求失败执行finally\",{\"1\":{\"1722\":1}}],[\"请求完成后调用的回调函数\",{\"1\":{\"2143\":1}}],[\"请求处理阶段\",{\"1\":{\"1935\":1}}],[\"请求jsp是都会被jsp加载引擎所匹配\",{\"1\":{\"1934\":1}}],[\"请求时期\",{\"1\":{\"1930\":1}}],[\"请求结束\",{\"1\":{\"1916\":1}}],[\"请求中的参数是不会携带\",{\"1\":{\"1865\":1}}],[\"请求对象和响应对象都会再次产生\",{\"1\":{\"1865\":1}}],[\"请求对象和响应对象没有重新创建\",{\"1\":{\"1861\":1}}],[\"请求访问服务器端的某个servlet\",{\"1\":{\"1863\":1}}],[\"请求应该完全交给目标资源去处理\",{\"1\":{\"1856\":1}}],[\"请求转发给jsp\",{\"1\":{\"1976\":1}}],[\"请求转发给另一个组件\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"请求转发时数据可以传递\",{\"1\":{\"1915\":1}}],[\"请求转发路径\",{\"0\":{\"1871\":1},\"1\":{\"2764\":1}}],[\"请求转发只能转发给当前项目的内部资源\",{\"1\":{\"1861\":1}}],[\"请求转发可以转发至web\",{\"1\":{\"1861\":1}}],[\"请求转发可以帮助我们完成页面的跳转\",{\"1\":{\"1861\":1}}],[\"请求转发是一种服务器的行为\",{\"1\":{\"1861\":1}}],[\"请求转发至servlet2\",{\"1\":{\"1856\":1,\"1860\":1,\"1864\":1}}],[\"请求转发\",{\"0\":{\"1852\":1,\"2863\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2872\":1,\"2928\":1,\"2931\":1},\"1\":{\"1917\":1,\"2749\":1}}],[\"请求转发和响应重定向\",{\"0\":{\"1851\":1,\"3132\":1},\"1\":{\"210\":1}}],[\"请求的后台服务的路径\",{\"1\":{\"2131\":1,\"2169\":1,\"2170\":1}}],[\"请求的方式\",{\"1\":{\"2131\":1,\"2169\":1,\"2170\":1}}],[\"请求的url\",{\"1\":{\"2114\":1}}],[\"请求的参数是可以从源组件传递到目标组件的\",{\"1\":{\"1861\":1}}],[\"请求的数据包基于字节在网络上传输\",{\"1\":{\"1801\":1}}],[\"请求的主要组成部分\",{\"0\":{\"175\":1},\"1\":{\"1798\":1}}],[\"请求被发送到tomcat\",{\"1\":{\"1769\":1}}],[\"请求被重定向到客户端本地缓存\",{\"1\":{\"192\":1}}],[\"请求和响应消息的头以ascii码形式给出\",{\"1\":{\"1324\":1}}],[\"请求合并\",{\"1\":{\"759\":1}}],[\"请求临时重定向\",{\"1\":{\"192\":1}}],[\"请求永久重定向\",{\"1\":{\"192\":1}}],[\"请求成功时可调用回调函数\",{\"1\":{\"2160\":1,\"2164\":1}}],[\"请求成功后调用的回调函数\",{\"1\":{\"2144\":1}}],[\"请求成功或失败时均调用\",{\"1\":{\"2143\":1}}],[\"请求成功\",{\"1\":{\"192\":1}}],[\"请求服务器删除request\",{\"1\":{\"184\":1}}],[\"请求服务器进行处理\",{\"1\":{\"181\":1}}],[\"请求体\",{\"0\":{\"178\":1}}],[\"请求源于何处\",{\"1\":{\"177\":1}}],[\"请求头中信息的格式为key\",{\"1\":{\"177\":1}}],[\"请求头用于说明是谁或什么在发送请求\",{\"1\":{\"177\":1}}],[\"请求头\",{\"0\":{\"177\":1}}],[\"请求使用的协议\",{\"1\":{\"176\":1}}],[\"请求方式白名单\",{\"1\":{\"2172\":1}}],[\"请求方式\",{\"1\":{\"176\":1,\"1799\":1,\"2114\":1,\"2136\":1}}],[\"请求方法常用的有get\",{\"1\":{\"157\":1}}],[\"请求行\",{\"0\":{\"176\":1}}],[\"请求只能由客户端发起\",{\"1\":{\"163\":1}}],[\"请求\",{\"1\":{\"154\":1,\"180\":1,\"2834\":2,\"2843\":1}}],[\"请求域属性名\",{\"1\":{\"142\":1}}],[\"请求域\",{\"0\":{\"133\":1},\"1\":{\"133\":1}}],[\"直观\",{\"1\":{\"1557\":1}}],[\"直到容器关闭后该对象生命周期结束\",{\"1\":{\"1830\":1}}],[\"直到有足够的空间\",{\"1\":{\"1519\":1}}],[\"直到它的左边缘碰到包含框的左边缘\",{\"1\":{\"1519\":1}}],[\"直到它的右边缘碰到包含框的右边缘\",{\"1\":{\"1519\":1}}],[\"直到它的外边缘碰到包含框或另一个浮动框的边框为止\",{\"1\":{\"1517\":1}}],[\"直到分数过线为止\",{\"1\":{\"1367\":1}}],[\"直到str的长度为len个字符\",{\"1\":{\"1091\":2}}],[\"直到所有的jar包依赖完成为止\",{\"1\":{\"693\":1}}],[\"直到获取到数据\",{\"1\":{\"509\":1,\"510\":1,\"511\":1,\"512\":1}}],[\"直到收到信号或中断\",{\"1\":{\"479\":1}}],[\"直到收到信号或被中断\",{\"1\":{\"479\":1}}],[\"直到发出信号或中断\",{\"1\":{\"479\":1}}],[\"直到队列加入元素后直接获取\",{\"1\":{\"323\":1}}],[\"直至这个对象销毁\",{\"1\":{\"397\":1}}],[\"直至内存全部耗尽出现outofmemoryerror内存溢出\",{\"1\":{\"351\":1}}],[\"直至队列出现空余时立即加入\",{\"1\":{\"323\":1}}],[\"直接在参数中处理\",{\"0\":{\"2406\":1}}],[\"直接在jsp中使用java代码\",{\"1\":{\"1928\":1}}],[\"直接拼接到\",{\"1\":{\"2248\":1}}],[\"直接配置\",{\"0\":{\"2224\":1,\"2228\":1,\"2232\":1}}],[\"直接面向对象操作\",{\"1\":{\"2179\":1}}],[\"直接放行\",{\"1\":{\"2063\":1}}],[\"直接返回给前端\",{\"1\":{\"2788\":1}}],[\"直接返回\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"直接返回false\",{\"1\":{\"1364\":1}}],[\"直接返回false如果类型相同\",{\"1\":{\"1364\":1}}],[\"直接访问就可以完成更新\",{\"1\":{\"1933\":1}}],[\"直接继承\",{\"1\":{\"1820\":1}}],[\"直接使用值就行\",{\"1\":{\"2809\":1}}],[\"直接使用配置文件的值\",{\"1\":{\"2584\":1}}],[\"直接使用\",{\"1\":{\"1820\":1}}],[\"直接使用str输出\",{\"1\":{\"409\":1}}],[\"直接使用string读取char数组\",{\"1\":{\"405\":1}}],[\"直接就可以返回的资源\",{\"1\":{\"1785\":1}}],[\"直接就是一个整数\",{\"1\":{\"1361\":1}}],[\"直接回车\",{\"1\":{\"1683\":5}}],[\"直接显示元素内部的文本\",{\"1\":{\"1642\":1}}],[\"直接设置一个相对定位\",{\"1\":{\"1535\":1}}],[\"直接操作\",{\"0\":{\"1493\":1}}],[\"直接获取节点\",{\"0\":{\"1487\":1}}],[\"直接指定元素值\",{\"1\":{\"1385\":1}}],[\"直接创建指定元素\",{\"0\":{\"1385\":1}}],[\"直接创建指定长度\",{\"0\":{\"1384\":1}}],[\"直接创建空数组\",{\"0\":{\"1383\":1}}],[\"直接打印\",{\"1\":{\"1283\":1}}],[\"直接关闭链接\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"直接搜索\",{\"1\":{\"1195\":1}}],[\"直接看例子吧\",{\"1\":{\"1182\":1}}],[\"直接删除文件夹c\",{\"1\":{\"928\":1}}],[\"直接删除安装文件夹c\",{\"1\":{\"928\":1}}],[\"直接用通过参数位置注入\",{\"1\":{\"2558\":1}}],[\"直接用通过参数名注入\",{\"1\":{\"2558\":1}}],[\"直接用\",{\"1\":{\"738\":1}}],[\"直接用浏览器打开html文件\",{\"1\":{\"130\":1}}],[\"直接输入关键词可以过滤\",{\"1\":{\"642\":1}}],[\"直接赋值\",{\"1\":{\"434\":1}}],[\"直接调用\",{\"1\":{\"366\":1,\"1541\":1}}],[\"直接将数组table扩容到16\",{\"1\":{\"282\":1}}],[\"直接加入\",{\"1\":{\"279\":1}}],[\"直角坐标系\",{\"1\":{\"62\":2}}],[\"文\",{\"1\":{\"2780\":1}}],[\"文章\",{\"1\":{\"1643\":1}}],[\"文章链接\",{\"1\":{\"1189\":1}}],[\"文字样式\",{\"0\":{\"1187\":1}}],[\"文字说明\",{\"1\":{\"1175\":1,\"1177\":2}}],[\"文字\",{\"1\":{\"908\":1}}],[\"文档流是是文档中可显示对象在排列时所占用的位置\",{\"1\":{\"1517\":1}}],[\"文档中\",{\"1\":{\"1329\":1}}],[\"文档的头部经常会包含一些\",{\"1\":{\"1292\":1}}],[\"文档的头部描述了文档的各种属性和信息\",{\"1\":{\"1292\":1}}],[\"文档的编码\",{\"1\":{\"203\":1}}],[\"文档\",{\"1\":{\"1290\":1}}],[\"文档注解我们一般使用在文档注释中\",{\"1\":{\"536\":1}}],[\"文档注解\",{\"0\":{\"536\":1}}],[\"文本节点text\",{\"1\":{\"1479\":1}}],[\"文本编辑器中的任何效果\",{\"1\":{\"1298\":1}}],[\"文本标签\",{\"0\":{\"1297\":1},\"1\":{\"1312\":1}}],[\"文本\",{\"1\":{\"908\":1,\"1480\":1}}],[\"文本文件\",{\"1\":{\"401\":1}}],[\"文本框\",{\"0\":{\"1333\":1},\"1\":{\"1331\":1,\"1333\":2}}],[\"文本框旧值\",{\"1\":{\"129\":1}}],[\"文本框新值\",{\"1\":{\"129\":1}}],[\"文件件存储与代码文件混在一起不方便管理\",{\"1\":{\"2790\":1}}],[\"文件输出\",{\"1\":{\"2300\":1}}],[\"文件等进行拦截\",{\"1\":{\"1994\":1}}],[\"文件上传下载时需要注意\",{\"1\":{\"1829\":1}}],[\"文件下载\",{\"1\":{\"1808\":1}}],[\"文件别名数组\",{\"1\":{\"1198\":1}}],[\"文件修改的日期\",{\"1\":{\"1198\":1}}],[\"文件创建的日期\",{\"1\":{\"1198\":1}}],[\"文件所属文件夹路径\",{\"1\":{\"1198\":1}}],[\"文件标题\",{\"1\":{\"1198\":1}}],[\"文件路径\",{\"1\":{\"1152\":1,\"1198\":1}}],[\"文件由绿色变为红色\",{\"1\":{\"737\":1}}],[\"文件名必须是\",{\"1\":{\"2501\":1}}],[\"文件名以及在代码中的行数\",{\"1\":{\"1287\":1}}],[\"文件名\",{\"1\":{\"729\":3,\"731\":2,\"1152\":1}}],[\"文件名字\",{\"1\":{\"386\":2,\"387\":1,\"389\":2}}],[\"文件结构\",{\"0\":{\"642\":1}}],[\"文件进行操作\",{\"1\":{\"400\":1}}],[\"文件的父文件\",{\"1\":{\"1751\":1}}],[\"文件的作用是项目相关的使用方法\",{\"1\":{\"1686\":1}}],[\"文件的修改时间\",{\"1\":{\"1198\":1}}],[\"文件的创建时间\",{\"1\":{\"1198\":1}}],[\"文件的大小\",{\"1\":{\"390\":1}}],[\"文件的名字\",{\"1\":{\"390\":1}}],[\"文件的操作\",{\"0\":{\"385\":1}}],[\"文件是否可写\",{\"1\":{\"390\":1}}],[\"文件是否可读\",{\"1\":{\"390\":1}}],[\"文件是否存在\",{\"1\":{\"386\":2,\"387\":1,\"389\":2}}],[\"文件相关的操作\",{\"1\":{\"387\":1}}],[\"文件真实的\",{\"1\":{\"386\":1,\"389\":1}}],[\"文件大小\",{\"1\":{\"386\":2,\"387\":1,\"389\":2,\"1198\":1}}],[\"文件中引入\",{\"1\":{\"1616\":1}}],[\"文件中\",{\"1\":{\"94\":1}}],[\"文件\",{\"0\":{\"1337\":1,\"1689\":1,\"1691\":1},\"1\":{\"92\":1,\"154\":1,\"676\":1,\"1337\":1,\"1548\":1,\"1718\":1,\"1721\":1}}],[\"表述性状态转移是一组架构约束条件和原则\",{\"1\":{\"2823\":1}}],[\"表现为功能相关的一些advice方法放在一起声明成的一个java类\",{\"1\":{\"2625\":1}}],[\"表现出来的性能优于之前的方式\",{\"1\":{\"473\":1}}],[\"表获取主键最大值\",{\"1\":{\"2408\":1}}],[\"表结构中的name属性和name属性对应\",{\"1\":{\"2230\":1,\"2234\":1}}],[\"表结构\",{\"0\":{\"2182\":1}}],[\"表头效果\",{\"1\":{\"1319\":1}}],[\"表格如下\",{\"1\":{\"1973\":1}}],[\"表格标签\",{\"0\":{\"1319\":1}}],[\"表格和列表等等\",{\"1\":{\"1295\":1}}],[\"表格\",{\"0\":{\"1182\":1},\"1\":{\"1319\":3}}],[\"表的主键会默认自动创建索引\",{\"1\":{\"1127\":1}}],[\"表的别名不要加\",{\"1\":{\"1072\":1}}],[\"表的操作\",{\"0\":{\"953\":1}}],[\"表2\",{\"1\":{\"1060\":1,\"1061\":1,\"1063\":1,\"1064\":1}}],[\"表1\",{\"1\":{\"1060\":1,\"1061\":1,\"1063\":1,\"1064\":1}}],[\"表明\",{\"1\":{\"1007\":2}}],[\"表名+id\",{\"1\":{\"983\":1}}],[\"表名必须描述该表的用途\",{\"1\":{\"983\":1}}],[\"表名称\",{\"1\":{\"958\":3,\"982\":2,\"989\":1,\"995\":1,\"1001\":1,\"1008\":1,\"1013\":1,\"1017\":1,\"1021\":1,\"1136\":1,\"1156\":2}}],[\"表名\",{\"1\":{\"954\":1,\"959\":1,\"960\":1,\"961\":1,\"964\":1,\"966\":1,\"967\":2,\"970\":1,\"971\":1,\"973\":2,\"975\":1,\"982\":1,\"983\":3,\"988\":2,\"994\":2,\"1012\":2,\"1024\":1,\"1025\":2,\"1026\":1,\"1028\":1,\"1033\":1,\"1034\":2,\"1035\":1,\"1036\":1,\"1037\":2,\"1039\":1,\"1040\":1,\"1041\":1,\"1042\":1,\"1116\":2,\"1117\":1,\"1131\":1,\"1133\":1,\"1134\":1,\"1135\":1}}],[\"表数范围\",{\"1\":{\"939\":2}}],[\"表\",{\"1\":{\"934\":1,\"976\":1,\"1027\":2,\"1029\":1}}],[\"表面上调用start方法\",{\"1\":{\"456\":1}}],[\"表面上调用stringbuilder的有参构造器\",{\"1\":{\"392\":1}}],[\"表面上调用stringbuilder的空构造器\",{\"1\":{\"392\":1}}],[\"表面是在调用无参数构造器\",{\"1\":{\"382\":1}}],[\"表达式必须都满足\",{\"1\":{\"2633\":1}}],[\"表达式jar\",{\"1\":{\"2538\":1}}],[\"表达式语言模块组成\",{\"1\":{\"2532\":1}}],[\"表达式语法\",{\"0\":{\"127\":1}}],[\"表达式的三元运算符\",{\"1\":{\"2334\":1}}],[\"表达式\",{\"1\":{\"2179\":1}}],[\"表达式2\",{\"1\":{\"1985\":1}}],[\"表达式1\",{\"1\":{\"1985\":1}}],[\"表达式支持简单\",{\"1\":{\"1617\":1}}],[\"表达式类型\",{\"1\":{\"1093\":2}}],[\"表达式输出\",{\"1\":{\"220\":1}}],[\"表单修饰符都是用来修饰v\",{\"1\":{\"1674\":1}}],[\"表单修饰符\",{\"0\":{\"1674\":1},\"1\":{\"1674\":1}}],[\"表单的验证和string对象有密切关系\",{\"1\":{\"1580\":1}}],[\"表单项内容不管输入的是字符串\",{\"1\":{\"1580\":1}}],[\"表单选择器\",{\"0\":{\"1553\":1}}],[\"表单提交时触发\",{\"1\":{\"1438\":1}}],[\"表单提交时的名称\",{\"1\":{\"1330\":1}}],[\"表单重置时触发\",{\"1\":{\"1438\":1}}],[\"表单事件\",{\"0\":{\"1437\":1}}],[\"表单元素必须有一个属性\",{\"1\":{\"1333\":1}}],[\"表单元素\",{\"0\":{\"1332\":1},\"1\":{\"1333\":1}}],[\"表单很像容器\",{\"1\":{\"1329\":1}}],[\"表单在\",{\"1\":{\"1329\":1}}],[\"表单使用post方式提交的数据\",{\"1\":{\"178\":1}}],[\"表单验证与正则表达式\",{\"0\":{\"1575\":1,\"3108\":1},\"1\":{\"58\":1}}],[\"表示必须提供\",{\"1\":{\"2840\":1}}],[\"表示请求中不能有参数1和参数2\",{\"1\":{\"2816\":1}}],[\"表示请求中必须有参数1和参数2\",{\"1\":{\"2816\":3}}],[\"表示无限等待\",{\"1\":{\"2715\":1}}],[\"表示不满足表达式的其他方法\",{\"1\":{\"2633\":1}}],[\"表示两个execution\",{\"1\":{\"2633\":1}}],[\"表示两位数字表示年份\",{\"1\":{\"1093\":1}}],[\"表示满足两个execution\",{\"1\":{\"2633\":1}}],[\"表示一组\",{\"1\":{\"2622\":1}}],[\"表示一个特定的时间瞬间\",{\"1\":{\"892\":1}}],[\"表示一个参数的谓词\",{\"1\":{\"846\":1}}],[\"表示外部引用资源\",{\"1\":{\"2601\":1}}],[\"表示包扫描\",{\"1\":{\"2601\":1}}],[\"表示对mybatis常规操作进行拦截\",{\"1\":{\"2516\":1}}],[\"表示参数的类型\",{\"1\":{\"2435\":1}}],[\"表示需要传递的参数\",{\"1\":{\"2435\":1}}],[\"表示返回值是一个list类型\",{\"1\":{\"2435\":1}}],[\"表示返回的数据\",{\"1\":{\"1721\":1}}],[\"表示调用该mapper的findemp方法\",{\"1\":{\"2435\":1}}],[\"表示延迟加载\",{\"1\":{\"2434\":1}}],[\"表示立刻加载\",{\"1\":{\"2434\":1}}],[\"表示懒加载\",{\"1\":{\"2433\":1,\"2435\":1}}],[\"表示插入之后\",{\"1\":{\"2410\":1}}],[\"表示在程序中明确定义的点\",{\"1\":{\"2621\":1}}],[\"表示在新增之后|之前执行<selectkey>中的sql命令\",{\"1\":{\"2410\":1}}],[\"表示在行内\",{\"1\":{\"1184\":1}}],[\"表示当前sql执行后需要存储的对象位置\",{\"1\":{\"2279\":1}}],[\"表示当前sql语句的名字resulttype\",{\"1\":{\"2279\":1}}],[\"表示当前mapper的名字\",{\"1\":{\"2279\":1}}],[\"表示当前字段依次递增\",{\"1\":{\"1010\":1}}],[\"表示当前字段不能为空\",{\"1\":{\"1005\":1}}],[\"表示是否触发全局ajax事件\",{\"1\":{\"2148\":1}}],[\"表示重复访问\",{\"1\":{\"1893\":1}}],[\"表示任意路径以及子路径\",{\"1\":{\"1840\":1}}],[\"表示任何类型\",{\"1\":{\"177\":1}}],[\"表示匹配任意字符\",{\"1\":{\"1839\":1}}],[\"表示指定下载文件的文件名\",{\"1\":{\"1807\":1}}],[\"表示执行成功catch\",{\"1\":{\"1722\":1}}],[\"表示用户选择的文本范围或光标的当前位置\",{\"1\":{\"1452\":1}}],[\"表示变量虽然已经声明\",{\"1\":{\"1358\":1}}],[\"表示没有值\",{\"1\":{\"1357\":1}}],[\"表示网页的主体部分\",{\"1\":{\"1295\":1}}],[\"表示独占一行\",{\"1\":{\"1184\":1}}],[\"表示方式跟标题一样\",{\"1\":{\"1182\":1}}],[\"表示居中对齐\",{\"1\":{\"1182\":1}}],[\"表示了默认的左对齐\",{\"1\":{\"1182\":1}}],[\"表示层级更深\",{\"1\":{\"1172\":1}}],[\"表示的是要查询的数据条数\",{\"1\":{\"1043\":1}}],[\"表示的是跳过的数据条数\",{\"1\":{\"1043\":1}}],[\"表示这个字段值非空的\",{\"1\":{\"985\":1}}],[\"表示注解可以在任何用到类型的地方使用\",{\"1\":{\"905\":1}}],[\"表示该针对每一次http请求都会产生一个新的bean\",{\"1\":{\"2552\":2}}],[\"表示该注解能卸载类型参数的声明语句中\",{\"1\":{\"905\":1}}],[\"表示该类型下的所有子类型\",{\"1\":{\"177\":1}}],[\"表示时间\",{\"1\":{\"892\":1}}],[\"表示日期时间\",{\"1\":{\"892\":1}}],[\"表示日期\",{\"1\":{\"892\":1}}],[\"表示先后执行顺序\",{\"1\":{\"840\":1}}],[\"表示head指针指向的位置在冲突中的内容\",{\"1\":{\"750\":1}}],[\"表示未跟踪状态\",{\"1\":{\"734\":2}}],[\"表示主键类型\",{\"1\":{\"2410\":1}}],[\"表示主键\",{\"1\":{\"2228\":2,\"2230\":1,\"2234\":1}}],[\"表示主分支untracked\",{\"1\":{\"734\":1}}],[\"表示主程序和测试程序都生效\",{\"1\":{\"680\":1,\"688\":1}}],[\"表示全局属性\",{\"1\":{\"726\":1}}],[\"表示可以在类上使用\",{\"1\":{\"554\":1}}],[\"表示\",{\"1\":{\"371\":1,\"374\":1,\"676\":1,\"843\":1,\"844\":1,\"1093\":1,\"1116\":1,\"1172\":1,\"1182\":2,\"1184\":1,\"1408\":1}}],[\"表示i的integer实例\",{\"1\":{\"363\":1}}],[\"表示还没有存放元素\",{\"1\":{\"279\":1}}],[\"表示响应的文档属于什么mime类型\",{\"1\":{\"205\":1}}],[\"表示响应消息送达时间\",{\"1\":{\"200\":1}}],[\"表示内容长度\",{\"1\":{\"204\":1}}],[\"表示浏览器应该在多少时间之后刷新文档\",{\"1\":{\"177\":1}}],[\"表示遍历出来的元素是否是最后一个\",{\"1\":{\"147\":1}}],[\"表示遍历出来的元素是否是第一个\",{\"1\":{\"147\":1}}],[\"表示遍历出来的元素是否是奇数或者是否是偶数\",{\"1\":{\"147\":1}}],[\"表示遍历的状态\",{\"1\":{\"147\":1}}],[\"表示访问\",{\"1\":{\"138\":1}}],[\"通知优先级\",{\"0\":{\"2645\":1}}],[\"通知类型\",{\"1\":{\"2623\":1}}],[\"通知\",{\"0\":{\"2623\":1,\"2639\":1}}],[\"通用\",{\"1\":{\"2179\":1,\"2214\":1,\"2516\":1}}],[\"通配选择器\",{\"1\":{\"1548\":1}}],[\"通配符的泛型\",{\"1\":{\"244\":1}}],[\"通配符\",{\"0\":{\"243\":1}}],[\"通俗来讲\",{\"1\":{\"1372\":1}}],[\"通俗点说就是在运行时代码可以根据某些条件改变自身结构\",{\"1\":{\"572\":1}}],[\"通讯\",{\"0\":{\"508\":1,\"514\":1}}],[\"通讯协议\",{\"0\":{\"495\":1}}],[\"通常\",{\"1\":{\"2685\":1}}],[\"通常会自行检测到\",{\"1\":{\"2437\":1}}],[\"通常会有css样式丰富页面的显示效果\",{\"1\":{\"2101\":1}}],[\"通常参考html转义\",{\"1\":{\"2356\":1,\"2358\":1}}],[\"通常配合select\",{\"1\":{\"2257\":1}}],[\"通常在跨域编码不同时使用\",{\"1\":{\"2155\":1}}],[\"通常在本地和远程的内容编码不同时使用\",{\"1\":{\"2154\":1}}],[\"通常放到一个文件中\",{\"1\":{\"2090\":1}}],[\"通常返回给客户端的就是一个html文本\",{\"1\":{\"1927\":1}}],[\"通常就是所在类的全名\",{\"1\":{\"1287\":1}}],[\"通常就是相对路径\",{\"1\":{\"386\":1,\"389\":1}}],[\"通常要查询的多个表之间都存在关联关系\",{\"1\":{\"1055\":1}}],[\"通常与主键一起使用\",{\"1\":{\"1010\":1}}],[\"通常和ispresent方法一起使用\",{\"1\":{\"853\":1}}],[\"通常用于\",{\"1\":{\"2523\":1}}],[\"通常用于ssl加密服务器的链接\",{\"1\":{\"187\":1}}],[\"通常用来释放资源\",{\"1\":{\"525\":1}}],[\"通常用来申请资源\",{\"1\":{\"525\":1}}],[\"通常情况下parametertype属性可以不写\",{\"1\":{\"2352\":1}}],[\"通常情况下textstatus和errorthrown只有其中一个包含信息\",{\"1\":{\"2145\":1}}],[\"通常情况下\",{\"1\":{\"397\":1,\"1002\":1}}],[\"通常记作a0\",{\"1\":{\"226\":1}}],[\"通常指定压缩方法\",{\"1\":{\"177\":1}}],[\"通常是保存进物理数据库\",{\"1\":{\"2688\":1}}],[\"通常是通过namespace+sqlid+args+offset\",{\"1\":{\"2473\":1}}],[\"通常是用来处理in中的参数\",{\"1\":{\"2463\":1}}],[\"通常是没有动态的元素内容\",{\"1\":{\"1641\":1}}],[\"通常是将他转换为file对象\",{\"1\":{\"384\":1}}],[\"通常是我们编写的代码出现问题\",{\"1\":{\"29\":1}}],[\"通常是我们的编译器在执行编译前对语法规范进行检查\",{\"1\":{\"29\":1}}],[\"通常是程序级的错误\",{\"1\":{\"29\":1}}],[\"通过监听器监听javaweb项目中servletcontext创建的时候\",{\"1\":{\"2911\":1}}],[\"通过扩展适配器可以对更多类型的处理器进行执行\",{\"1\":{\"2772\":1}}],[\"通过将一组相关操作组合为一个要么全部成功要么全部失败的序列\",{\"1\":{\"2684\":1}}],[\"通过将开发团队前后端分离化\",{\"1\":{\"1945\":1}}],[\"通过目标方法签名对象获取方法名\",{\"1\":{\"2651\":1}}],[\"通过一个表达式来确定aop要增强的是哪个或者那些方法\",{\"1\":{\"2632\":1}}],[\"通过一行代码\",{\"1\":{\"1998\":1,\"2001\":1}}],[\"通过全参构造方法注入\",{\"1\":{\"2558\":1}}],[\"通过全参构造赋值\",{\"0\":{\"2558\":1},\"1\":{\"2556\":1}}],[\"通过无参构造方法初始化\",{\"1\":{\"2557\":1}}],[\"通过反射获取指定路径的字节码文件class\",{\"1\":{\"2549\":1}}],[\"通过applicationcontext对象获取容器中已经注册的bean对象\",{\"1\":{\"2543\":1,\"2546\":1}}],[\"通过auto\",{\"1\":{\"939\":1}}],[\"通过接口的引用对象来实现方法\",{\"1\":{\"2540\":1}}],[\"通过切面编程我们可以在不修改原有代码的情况下实现功能的增加\",{\"1\":{\"2523\":1}}],[\"通过序列化\",{\"1\":{\"2481\":1}}],[\"通过代理模式由mybatis提供接口的实现类对象\",{\"1\":{\"2371\":1}}],[\"通过方法参数传递的属性具有最高优先级\",{\"1\":{\"2333\":1}}],[\"通过框架\",{\"1\":{\"2197\":1}}],[\"通过后台代码也可以实现跨域\",{\"1\":{\"2172\":1}}],[\"通过过滤器跨域\",{\"0\":{\"2172\":1}}],[\"通过过滤器控制\",{\"1\":{\"2059\":1}}],[\"通过getjson方实现跨域请求\",{\"0\":{\"2171\":1}}],[\"通过joinpoint对象获取目标方法签名对象\",{\"1\":{\"2651\":1}}],[\"通过joinpoint对象获取外界调用目标方法时传入的实参列表组成的数组\",{\"1\":{\"2651\":1}}],[\"通过jquery\",{\"1\":{\"2131\":1,\"2169\":1,\"2170\":1}}],[\"通过js创建标签\",{\"1\":{\"1505\":1}}],[\"通过在后台与服务器进行少量数据交换\",{\"1\":{\"2108\":1}}],[\"通过在不同点检查程序状态\",{\"1\":{\"530\":1}}],[\"通过sqlsessionfactorybuilder对象使用配置文件的inputstream流构建一个sqlsessionfactory对象\",{\"1\":{\"2281\":1,\"2282\":1,\"2374\":1}}],[\"通过set方法设置属性值的\",{\"1\":{\"2796\":1}}],[\"通过set方法注入连接池\",{\"1\":{\"2666\":1}}],[\"通过set赋值\",{\"0\":{\"2557\":1},\"1\":{\"2556\":1}}],[\"通过service中提供的count方法可以查询总的记录数\",{\"1\":{\"2218\":1}}],[\"通过session监听器实现计数\",{\"1\":{\"2088\":1}}],[\"通过statement对象执行sql语句时\",{\"1\":{\"1250\":1}}],[\"通过statement发送sql命令并得到结果\",{\"1\":{\"1210\":1,\"1215\":1}}],[\"通过stream流的多个工序加工得到我们想要的商品\",{\"1\":{\"857\":1}}],[\"通过string函数转换成str\",{\"1\":{\"405\":1}}],[\"通过之前的案例我们发现\",{\"1\":{\"2010\":1}}],[\"通过上述代码查看我们发现\",{\"1\":{\"1934\":1}}],[\"通过上面的对比\",{\"1\":{\"888\":1}}],[\"通过输出流的形式响应给了浏览器\",{\"1\":{\"1933\":1}}],[\"通过查看代码我们发现\",{\"1\":{\"1933\":1}}],[\"通过request对象\",{\"1\":{\"2793\":1}}],[\"通过req对象\",{\"1\":{\"1831\":1}}],[\"通过resources类获取指定配置文件的inputstream流\",{\"1\":{\"2281\":1,\"2282\":1,\"2374\":1}}],[\"通过response对象将数据响应给浏览器\",{\"1\":{\"1931\":1}}],[\"通过字符串拼接html文档特别繁琐\",{\"1\":{\"1927\":1}}],[\"通过字节码信息可以获取构造器\",{\"1\":{\"585\":1}}],[\"通过字节码包名获取\",{\"0\":{\"579\":1},\"1\":{\"575\":1,\"579\":1}}],[\"通过字节码获取对象实例化\",{\"1\":{\"568\":1}}],[\"通过web\",{\"1\":{\"1899\":1}}],[\"通过window\",{\"1\":{\"1478\":1}}],[\"通过new关键字创建cookie对象\",{\"1\":{\"1887\":1}}],[\"通过next\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"通过next指向后个节点\",{\"1\":{\"261\":1}}],[\"通过继承的方法\",{\"1\":{\"1831\":1}}],[\"通过调用init\",{\"1\":{\"1818\":1}}],[\"通过httpsession对象中的invalidate\",{\"1\":{\"1899\":1}}],[\"通过httpservletrequest对象获取cookie\",{\"1\":{\"1888\":1}}],[\"通过httpservletrequest设置请求编码\",{\"1\":{\"1811\":1}}],[\"通过httpservletresponse对象将cookie写回给客户端浏览器\",{\"1\":{\"1887\":1}}],[\"通过httpservletresponse设置响应编码\",{\"1\":{\"1813\":1}}],[\"通过history的操作我们可以实现翻阅浏览器历史网页\",{\"1\":{\"1463\":1}}],[\"通过mime\",{\"1\":{\"1805\":1}}],[\"通过maven导入commons\",{\"1\":{\"651\":1}}],[\"通过mapper\",{\"1\":{\"2380\":1}}],[\"通过map\",{\"1\":{\"291\":2,\"292\":1}}],[\"通过启动参数来指定启动tomcat副本运行指定目录中的web项目\",{\"1\":{\"1779\":1}}],[\"通过对xml中元素的配置\",{\"1\":{\"1752\":1}}],[\"通过对象获取\",{\"0\":{\"577\":1},\"1\":{\"575\":1,\"577\":1}}],[\"通过对象名字获取这个枚举对象\",{\"1\":{\"562\":1}}],[\"通过对象属性设置\",{\"0\":{\"440\":1}}],[\"通过下面的例子我们来了解vue的好处\",{\"1\":{\"1612\":1}}],[\"通过下标得到元素\",{\"1\":{\"262\":1}}],[\"通过元素的名字进行定位\",{\"1\":{\"1508\":1}}],[\"通过这种技术可以解决http协议本身无法记录用户状态情况\",{\"1\":{\"1894\":1}}],[\"通过这种机制可以实现在浏览器端保留一些用户信息\",{\"1\":{\"1884\":1}}],[\"通过这个对象提供的方法\",{\"1\":{\"1797\":1}}],[\"通过这个对象获取文件的各种信息\",{\"1\":{\"384\":1}}],[\"通过这两个对象可以获得屏幕和浏览器软件的一些信息\",{\"1\":{\"1464\":1}}],[\"通过type属性的不同值\",{\"1\":{\"1333\":1}}],[\"通过属性来增加表框\",{\"1\":{\"1319\":1}}],[\"通过属性文件理解log4j的主要api\",{\"1\":{\"1285\":1}}],[\"通过执行sql语句进而执行攻击者所要的操作\",{\"1\":{\"1237\":1}}],[\"通过c标签注入\",{\"1\":{\"2559\":1}}],[\"通过c\",{\"1\":{\"2020\":1}}],[\"通过classpathxmlapplicationcontext获取spring\",{\"1\":{\"2543\":1,\"2546\":1}}],[\"通过class\",{\"1\":{\"1217\":1}}],[\"通过content\",{\"1\":{\"164\":1}}],[\"通过使用连接及子查询\",{\"1\":{\"1145\":1}}],[\"通过使用注解\",{\"1\":{\"533\":1}}],[\"通过前面章节的学习\",{\"1\":{\"1145\":1}}],[\"通过取别名的方式来虚拟成两张表\",{\"1\":{\"1068\":1}}],[\"通过操作sql来完成\",{\"1\":{\"1001\":1}}],[\"通过数据库管理系统\",{\"1\":{\"930\":1}}],[\"通过应用程序操作数据\",{\"1\":{\"913\":1}}],[\"通过该方法在映射器中找到这个接口的字节码文件\",{\"1\":{\"2380\":1}}],[\"通过该容器可以运行servlet或者jsp来处理请求\",{\"1\":{\"1767\":1}}],[\"通过该类静态方法提供了大量的常用temporaladjuster\",{\"1\":{\"900\":1}}],[\"通过该技术\",{\"1\":{\"167\":1}}],[\"通过for循环\",{\"1\":{\"888\":1}}],[\"通过futuretask对象\",{\"1\":{\"450\":1}}],[\"通过已有的串行流转换为并行流\",{\"1\":{\"886\":1}}],[\"通过list接口中的parallelstream方法来获取\",{\"1\":{\"886\":1}}],[\"通过list直接获取并行的流\",{\"1\":{\"886\":1}}],[\"通过enhancer对象获得代理对象\",{\"1\":{\"2615\":1}}],[\"通过entryset\",{\"1\":{\"292\":1}}],[\"通过el表达式取出域中的值\",{\"1\":{\"2020\":1}}],[\"通过ecma\",{\"1\":{\"1372\":1}}],[\"通过empty创建空的对象\",{\"1\":{\"852\":1}}],[\"通过ofnullable创建对象\",{\"1\":{\"852\":1}}],[\"通过of创建对象\",{\"1\":{\"852\":1,\"853\":1}}],[\"通过标签\",{\"1\":{\"693\":1}}],[\"通过内置\",{\"0\":{\"578\":1}}],[\"通过类加载器获取\",{\"0\":{\"580\":1},\"1\":{\"575\":1,\"580\":1}}],[\"通过类的内置\",{\"1\":{\"575\":1,\"578\":1}}],[\"通过构造器创建bean实例\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"通过构造虚拟测试对\",{\"1\":{\"1941\":1}}],[\"通过构造获取socket\",{\"1\":{\"513\":1}}],[\"通过构造函数设置\",{\"0\":{\"441\":1}}],[\"通过构造函数将比较器传送到treeset中\",{\"1\":{\"287\":1}}],[\"通过proceedingjoinpoint\",{\"1\":{\"2644\":1}}],[\"通过processtemplate方法跳转视图\",{\"1\":{\"124\":1}}],[\"通过porxy动态代理获得一个代理对象\",{\"1\":{\"2608\":1}}],[\"通过port定位使用的软件程序\",{\"1\":{\"492\":1}}],[\"通过p标签注入\",{\"1\":{\"2559\":1}}],[\"通过ip定位计算机\",{\"1\":{\"492\":1}}],[\"通过阅读stringbuilder的底层源码\",{\"1\":{\"393\":1}}],[\"通过\",{\"1\":{\"291\":1,\"292\":2,\"1718\":1,\"2170\":2,\"2179\":1,\"2390\":1,\"2403\":1,\"2653\":1,\"2772\":1}}],[\"通过索引得到元素\",{\"1\":{\"263\":1}}],[\"通过黑名单机制禁用了几百种不再安全的加密算法\",{\"1\":{\"170\":1}}],[\"通过特定的语法\",{\"1\":{\"142\":1}}],[\"新时间日期\",{\"0\":{\"3060\":1}}],[\"新时间日期api\",{\"0\":{\"890\":1},\"1\":{\"51\":1}}],[\"新\",{\"1\":{\"2665\":3}}],[\"新密码\",{\"1\":{\"1121\":1,\"1122\":1}}],[\"新密码不需要加上引号\",{\"1\":{\"1121\":1}}],[\"新表名\",{\"1\":{\"962\":1}}],[\"新列\",{\"1\":{\"960\":1}}],[\"新浪等\",{\"1\":{\"919\":1}}],[\"新版\",{\"1\":{\"2290\":1}}],[\"新版日期时间api中\",{\"1\":{\"902\":1}}],[\"新版日期时间操作\",{\"1\":{\"893\":1}}],[\"新版时间操作\",{\"1\":{\"893\":1}}],[\"新版jdk8\",{\"1\":{\"893\":1}}],[\"新日期时间api\",{\"0\":{\"892\":1}}],[\"新建事务\",{\"1\":{\"2725\":1}}],[\"新建的文件在工作区\",{\"1\":{\"734\":1}}],[\"新建提交状态\",{\"0\":{\"733\":1}}],[\"新建文件夹\",{\"1\":{\"387\":1}}],[\"新建文件\",{\"1\":{\"384\":1,\"387\":1}}],[\"新功能\",{\"1\":{\"725\":1}}],[\"新value替换老的value\",{\"1\":{\"294\":1}}],[\"新的分页插件\",{\"1\":{\"2285\":1}}],[\"新的日期及时间的api位于java\",{\"1\":{\"892\":1}}],[\"新的节点中\",{\"1\":{\"338\":1}}],[\"新的临界值就是\",{\"1\":{\"280\":1}}],[\"新的servlet继承基类\",{\"1\":{\"124\":1}}],[\"新增showdatapage\",{\"1\":{\"2925\":1}}],[\"新增声明空间\",{\"0\":{\"2899\":1,\"2904\":1}}],[\"新增过滤器转换put和delete请求\",{\"1\":{\"2830\":1}}],[\"新增mvc的声明空间\",{\"1\":{\"2780\":1}}],[\"新增工程文件\",{\"0\":{\"2676\":1}}],[\"新增测试类\",{\"0\":{\"2341\":1}}],[\"新增xml文件映射\",{\"0\":{\"2340\":1}}],[\"新增empmapper\",{\"0\":{\"2339\":1}}],[\"新增emp实体类\",{\"0\":{\"2338\":1}}],[\"新增用户\",{\"0\":{\"2206\":1}}],[\"新增属性\",{\"0\":{\"1350\":1}}],[\"新增加的blob\",{\"1\":{\"1209\":1}}],[\"新增的抽象方法\",{\"1\":{\"816\":1,\"817\":1}}],[\"新增到尾部\",{\"1\":{\"260\":1}}],[\"新增到头部\",{\"1\":{\"260\":1}}],[\"新增一个元素\",{\"1\":{\"260\":1}}],[\"新增\",{\"0\":{\"1219\":1,\"2412\":1},\"1\":{\"251\":1,\"260\":1,\"532\":1,\"2667\":1,\"2674\":1}}],[\"分析\",{\"0\":{\"2424\":1,\"2427\":1,\"2430\":1}}],[\"分析资源依赖\",{\"1\":{\"114\":2}}],[\"分号\",{\"1\":{\"2301\":1}}],[\"分割\",{\"1\":{\"2301\":2}}],[\"分割线\",{\"0\":{\"1173\":1}}],[\"分工明确\",{\"1\":{\"2046\":1}}],[\"分隔格式\",{\"1\":{\"2029\":1}}],[\"分数\",{\"1\":{\"2022\":1}}],[\"分离视图层和业务逻辑层也使得web应用更易于维护和修改\",{\"1\":{\"2039\":1}}],[\"分离\",{\"0\":{\"1941\":1},\"1\":{\"1473\":1}}],[\"分布式缓存框架\",{\"1\":{\"2482\":1}}],[\"分布式需要\",{\"1\":{\"1226\":1}}],[\"分布式版本控制工具\",{\"1\":{\"723\":1}}],[\"分别引入\",{\"1\":{\"2186\":1}}],[\"分别用于监听三个域对象\",{\"1\":{\"2070\":1}}],[\"分别向四个域中放入数据\",{\"1\":{\"2018\":1}}],[\"分别经历四个阶段\",{\"1\":{\"1822\":1}}],[\"分别是\",{\"1\":{\"1674\":1,\"1749\":1,\"2075\":1,\"2078\":1,\"2083\":1}}],[\"分别是java\",{\"1\":{\"1209\":1}}],[\"分别为\",{\"1\":{\"1418\":1}}],[\"分别对500000000的数据进行求和\",{\"1\":{\"888\":1}}],[\"分\",{\"1\":{\"1198\":1,\"1417\":1,\"1458\":1,\"1459\":1}}],[\"分为\",{\"1\":{\"1069\":1}}],[\"分页插件\",{\"0\":{\"2284\":1},\"1\":{\"2516\":1}}],[\"分页\",{\"0\":{\"1043\":1},\"1\":{\"2214\":1}}],[\"分组\",{\"0\":{\"1042\":1}}],[\"分组计算\",{\"1\":{\"881\":1}}],[\"分钟\",{\"1\":{\"893\":4,\"2030\":1}}],[\"分钟中的秒数\",{\"1\":{\"374\":1}}],[\"分区操作\",{\"1\":{\"882\":1}}],[\"分享工程到github\",{\"0\":{\"792\":1}}],[\"分配主键自增\",{\"1\":{\"2228\":2,\"2230\":1,\"2234\":1}}],[\"分配不同的权限来管理和维护数据库\",{\"1\":{\"1114\":1}}],[\"分配了相应资源\",{\"1\":{\"482\":1}}],[\"分配一个新字符串\",{\"1\":{\"404\":1}}],[\"分地区\",{\"1\":{\"375\":1}}],[\"分段锁机制\",{\"1\":{\"311\":1}}],[\"分类\",{\"0\":{\"225\":1,\"1129\":1},\"1\":{\"1198\":1}}],[\"分支结构\",{\"0\":{\"1366\":1}}],[\"分支种类\",{\"0\":{\"801\":1}}],[\"分支案例\",{\"0\":{\"798\":1}}],[\"分支名\",{\"1\":{\"748\":3}}],[\"分支操作\",{\"0\":{\"748\":1}}],[\"分支的好处\",{\"0\":{\"747\":1}}],[\"分支概念\",{\"0\":{\"746\":1}}],[\"分支\",{\"0\":{\"144\":1,\"744\":1},\"1\":{\"728\":1,\"744\":1}}],[\"分支与迭代\",{\"0\":{\"143\":1}}],[\"分开\",{\"1\":{\"120\":1}}],[\"控制单元中的代码是可以正常访问的\",{\"1\":{\"2859\":1}}],[\"控制请求头\",{\"0\":{\"2819\":1}}],[\"控制请求参数\",{\"0\":{\"2816\":1}}],[\"控制对象单例多例和使用范围\",{\"1\":{\"2552\":1}}],[\"控制反转\",{\"0\":{\"2545\":1}}],[\"控制maven在构建过程中相关配置\",{\"1\":{\"2500\":1}}],[\"控制out对象的缓冲区\",{\"1\":{\"1959\":1}}],[\"控制前后端页面跳转\",{\"1\":{\"1927\":1}}],[\"控制交互逻辑\",{\"1\":{\"1786\":1}}],[\"控制层\",{\"1\":{\"1786\":1,\"2740\":1}}],[\"控制台可以直接输入方法中的代码\",{\"1\":{\"2859\":1}}],[\"控制台乱码\",{\"0\":{\"1810\":1}}],[\"控制台产生乱码的原因是在tomcat在输出日志中使用的是utf\",{\"1\":{\"1755\":1}}],[\"控制台程序\",{\"0\":{\"87\":1},\"1\":{\"87\":2}}],[\"控制用户程序跳转过程\",{\"1\":{\"1717\":1}}],[\"控制\",{\"1\":{\"1446\":1}}],[\"控制跳转的目标位置\",{\"1\":{\"1312\":1}}],[\"控制命令台必须重启才会生效\",{\"1\":{\"925\":1}}],[\"控制器可以根据用户的需求选择模型进行处理\",{\"1\":{\"2040\":1}}],[\"控制器也提供了一个好处\",{\"1\":{\"2040\":1}}],[\"控制器\",{\"1\":{\"120\":1,\"2034\":1,\"2531\":1}}],[\"既然我们希望使用单元方法的返回值来响应ajax请求的处理结果\",{\"1\":{\"2874\":1}}],[\"既然已经响应了\",{\"1\":{\"2862\":1}}],[\"既然\",{\"1\":{\"2319\":1}}],[\"既能在linux下运行\",{\"1\":{\"1548\":1}}],[\"既能够正常显示页面\",{\"1\":{\"119\":1}}],[\"既是一个历史名词\",{\"1\":{\"71\":1}}],[\"相当与一个new的操作\",{\"1\":{\"2552\":1}}],[\"相当于请求转发req\",{\"1\":{\"2760\":1}}],[\"相当于请求转发\",{\"1\":{\"2760\":1,\"2764\":1,\"2811\":1}}],[\"相当于使用\",{\"1\":{\"2559\":2}}],[\"相当于在面向对象语言和关系数据库之间搭建一个桥梁\",{\"1\":{\"2198\":1}}],[\"相当于在url地址栏最后后拼接一个callback=函数名\",{\"1\":{\"2170\":1}}],[\"相当于自动的给我们生成了一个servlet并将页面上html代码编入到这个servlet中\",{\"1\":{\"1929\":1}}],[\"相当于配置了全局的httpsession超时时间\",{\"1\":{\"1899\":1}}],[\"相当于去银行取钱\",{\"1\":{\"1883\":1}}],[\"相当于发生了获得焦点事件\",{\"1\":{\"1572\":1}}],[\"相当于​window\",{\"1\":{\"1546\":1}}],[\"相当于默认效果就是静态定位\",{\"1\":{\"1532\":1}}],[\"相当于\",{\"1\":{\"1287\":1,\"2559\":3,\"2878\":1}}],[\"相当于创建了\",{\"1\":{\"1135\":1}}],[\"相当于java代码中的switch\",{\"1\":{\"2449\":1}}],[\"相当于java的switch\",{\"1\":{\"1094\":1}}],[\"相当于java的if\",{\"1\":{\"1094\":1}}],[\"相当于java编译器替我们执行了integer\",{\"1\":{\"363\":1}}],[\"相当于java编译器替我们执行了\",{\"1\":{\"363\":1}}],[\"相当于执行了gettotal\",{\"1\":{\"826\":1}}],[\"相当于你在原项目的主分支上又建立了一个分支\",{\"1\":{\"757\":1}}],[\"相当于一个占位\",{\"1\":{\"238\":1}}],[\"相当于maven的pom\",{\"1\":{\"92\":1}}],[\"相当于前端的maven\",{\"1\":{\"90\":1}}],[\"相较于sqlsession的基本开发模式\",{\"1\":{\"2371\":1}}],[\"相比而言\",{\"1\":{\"2441\":1}}],[\"相比get\",{\"1\":{\"2163\":1}}],[\"相比使用object的wait\",{\"1\":{\"475\":1}}],[\"相应的web应用程序的存放位置\",{\"1\":{\"1768\":1}}],[\"相似sql只编译一次\",{\"1\":{\"1230\":1}}],[\"相差天数\",{\"1\":{\"899\":1}}],[\"相差月份\",{\"1\":{\"899\":1}}],[\"相差年份\",{\"1\":{\"899\":1}}],[\"相差的秒\",{\"1\":{\"899\":1}}],[\"相差的分钟\",{\"1\":{\"899\":1}}],[\"相差的小时\",{\"1\":{\"899\":1}}],[\"相差的天数\",{\"1\":{\"899\":1}}],[\"相反\",{\"1\":{\"295\":1}}],[\"相对自己的路径\",{\"1\":{\"1869\":1}}],[\"相对\",{\"1\":{\"1869\":1}}],[\"相对body进行位置的改变\",{\"1\":{\"1535\":1}}],[\"相对元素自身所在的原来的位置进行定位\",{\"1\":{\"1533\":1,\"1534\":1}}],[\"相对定位\",{\"0\":{\"1533\":1},\"1\":{\"1533\":1,\"1534\":1,\"1535\":1}}],[\"相对位置指的就是\",{\"1\":{\"387\":1}}],[\"相对这个参照物的路径\",{\"1\":{\"387\":1}}],[\"相对路径在使用时\",{\"1\":{\"1879\":1}}],[\"相对路径访问a1\",{\"1\":{\"1874\":1}}],[\"相对路径与绝对路径\",{\"0\":{\"1868\":1,\"1872\":1,\"1876\":1}}],[\"相对路径转绝对路径\",{\"1\":{\"1829\":2}}],[\"相对路径引入的app\",{\"1\":{\"1689\":1}}],[\"相对路径指的就是模块位置\",{\"1\":{\"387\":1}}],[\"相对路径\",{\"1\":{\"386\":2,\"387\":5,\"389\":2,\"390\":1,\"1868\":1,\"1876\":1}}],[\"相对于resource的路径\",{\"1\":{\"2550\":1}}],[\"相对于urlpatterns定义的路径绝对路径\",{\"1\":{\"1876\":1}}],[\"相对于当前servlet本身的位置\",{\"1\":{\"1872\":1}}],[\"相对于hashtable是线程安全的\",{\"1\":{\"298\":1}}],[\"相对于hashtable\",{\"1\":{\"298\":1}}],[\"相对于jdk1\",{\"1\":{\"295\":1}}],[\"相对于list\",{\"1\":{\"276\":1}}],[\"相对来说效率较高\",{\"1\":{\"261\":1}}],[\"相同目标方法上同时存在多个切面时\",{\"1\":{\"2645\":1}}],[\"相同的下标上可以存放多个value\",{\"1\":{\"294\":1}}],[\"相同的key会放到同样的位置\",{\"1\":{\"294\":1}}],[\"相同点\",{\"1\":{\"258\":1}}],[\"相同数据类型意味着在内存中存储时\",{\"1\":{\"226\":2}}],[\"相同数据类型\",{\"1\":{\"226\":1}}],[\"相关注解\",{\"0\":{\"2587\":1},\"1\":{\"2631\":1}}],[\"相关案例\",{\"0\":{\"2581\":1}}],[\"相关属性\",{\"0\":{\"2578\":1}}],[\"相关测试代码\",{\"0\":{\"2282\":1}}],[\"相关网站https\",{\"1\":{\"1611\":1}}],[\"相关的锁以原子方式释放\",{\"1\":{\"475\":1}}],[\"相关api\",{\"0\":{\"371\":1,\"372\":1}}],[\"相关概念\",{\"0\":{\"334\":1,\"343\":1,\"474\":1,\"727\":1,\"1882\":1,\"2090\":1}}],[\"相关源码\",{\"0\":{\"316\":1,\"319\":1}}],[\"相关代码\",{\"0\":{\"525\":1,\"1606\":1,\"1609\":1,\"1976\":1,\"2113\":1,\"2571\":1,\"2574\":1,\"2579\":1,\"2589\":1,\"2830\":1},\"1\":{\"245\":1,\"294\":1,\"1185\":1}}],[\"相关资料thymeleaf\",{\"1\":{\"117\":1}}],[\"本次服务运行期间都有效\",{\"1\":{\"2926\":1}}],[\"本次会话期间有效\",{\"1\":{\"2926\":1}}],[\"本次会话之内\",{\"1\":{\"1920\":1}}],[\"本次请求期间有效\",{\"1\":{\"2926\":1,\"2928\":1,\"2929\":1}}],[\"本次我们尝试对emp表进行操作\",{\"1\":{\"2337\":1}}],[\"本是apache的一个开源项目ibatis\",{\"1\":{\"2196\":1}}],[\"本质上也是使用的post请求方式\",{\"1\":{\"2829\":1}}],[\"本质上是静态代理\",{\"1\":{\"2627\":1}}],[\"本质上就是servlet\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"本质是一个字符串\",{\"1\":{\"2125\":2}}],[\"本身是手动提交事务时\",{\"1\":{\"2728\":1}}],[\"本身提供了非常丰富的内部对象供设计人员使用\",{\"1\":{\"1376\":1}}],[\"本身只能处理\",{\"1\":{\"115\":1}}],[\"本来直接将\",{\"1\":{\"1046\":1}}],[\"本地路径地址\",{\"1\":{\"2168\":1}}],[\"本地库\",{\"0\":{\"738\":1}}],[\"本地版本管理\",{\"1\":{\"723\":1}}],[\"本地仓库\",{\"1\":{\"705\":1,\"723\":1}}],[\"本地仓库地址更改到e\",{\"1\":{\"675\":1}}],[\"本地历史记录\",{\"1\":{\"634\":1}}],[\"本地化相关的格式\",{\"1\":{\"380\":1}}],[\"本地方法\",{\"1\":{\"371\":1}}],[\"本类中带参数构造器\",{\"1\":{\"294\":1}}],[\"本书中提到\",{\"1\":{\"71\":1}}],[\"入职日期\",{\"1\":{\"1211\":1}}],[\"入学日期\",{\"1\":{\"937\":2}}],[\"入队\",{\"1\":{\"328\":1,\"338\":1}}],[\"入口文件\",{\"1\":{\"114\":2}}],[\"入门案例\",{\"0\":{\"2180\":1}}],[\"入门\",{\"0\":{\"68\":1,\"81\":1}}],[\"入门体验\",{\"0\":{\"598\":1,\"3038\":1},\"1\":{\"44\":1}}],[\"转发给目标组件\",{\"1\":{\"2929\":1}}],[\"转发和重定向\",{\"0\":{\"2860\":1}}],[\"转发路径中\",{\"1\":{\"2764\":1}}],[\"转义文本\",{\"1\":{\"2030\":1}}],[\"转译字符\",{\"1\":{\"2560\":1}}],[\"转译之后的结果如下\",{\"1\":{\"1951\":1}}],[\"转译jsp页面\",{\"1\":{\"1935\":1}}],[\"转译时期\",{\"1\":{\"1930\":1}}],[\"转译时期和请求时期\",{\"1\":{\"1930\":1}}],[\"转为\",{\"1\":{\"1819\":1,\"1820\":1}}],[\"转为inetaddress\",{\"1\":{\"506\":1}}],[\"转化为0\",{\"1\":{\"1362\":1}}],[\"转账\",{\"1\":{\"1101\":1}}],[\"转移数据时统一转移\",{\"1\":{\"295\":1}}],[\"转移到其它url\",{\"1\":{\"192\":1}}],[\"转换文件格式输出\",{\"1\":{\"1191\":1}}],[\"转换成set\",{\"1\":{\"878\":1}}],[\"转换成list\",{\"1\":{\"878\":1}}],[\"转换成新的list数组\",{\"1\":{\"856\":1}}],[\"转换成一个静态文件\",{\"1\":{\"111\":1}}],[\"转换流在使用的时候可以指定编码格式\",{\"1\":{\"421\":1}}],[\"转换为\",{\"1\":{\"2140\":2}}],[\"转换为string类型\",{\"1\":{\"431\":1}}],[\"转换为10进制int\",{\"1\":{\"364\":1}}],[\"转换为数组+链表+红黑树的形式\",{\"1\":{\"295\":1}}],[\"转让方法\",{\"1\":{\"294\":1}}],[\"转成红黑树\",{\"1\":{\"279\":1}}],[\"转码结果写入一个文件\",{\"1\":{\"98\":1}}],[\"转码\",{\"1\":{\"98\":1}}],[\"从路径中获取参数的注解是\",{\"1\":{\"2794\":1}}],[\"从内存分析的角度来说\",{\"1\":{\"2658\":1}}],[\"从简单性\",{\"1\":{\"2520\":1}}],[\"从结果集中获取原始的地址数据\",{\"1\":{\"2509\":1}}],[\"从数据库中查询数据\",{\"1\":{\"2493\":1}}],[\"从数据库抽取数据\",{\"1\":{\"1145\":1}}],[\"从技术角度来讲并非字符串\",{\"1\":{\"2153\":1}}],[\"从域对象中移除数据\",{\"1\":{\"2017\":1}}],[\"从域对象中取出数据\",{\"1\":{\"2017\":1}}],[\"从域中取出数据\",{\"1\":{\"1972\":1,\"1980\":1}}],[\"从学习jsp到从jsp中向更高的技术进化需要一个过程\",{\"1\":{\"1950\":1}}],[\"从application域中读取数据\",{\"1\":{\"1925\":1}}],[\"从request域中读取数据\",{\"1\":{\"1917\":1,\"1921\":1}}],[\"从webapps中开始找\",{\"1\":{\"1868\":1}}],[\"从全局容器中获取数据\",{\"1\":{\"1829\":1}}],[\"从0\",{\"1\":{\"1551\":2}}],[\"从原理上讲\",{\"1\":{\"1548\":2}}],[\"从视图中消失\",{\"1\":{\"1519\":1}}],[\"从哪里开始\",{\"1\":{\"1406\":2}}],[\"从哪个索引开始删除\",{\"1\":{\"1400\":1}}],[\"从哪个索引开始\",{\"1\":{\"1399\":1}}],[\"从起始索引号提取字符串中指定数目的字符\",{\"1\":{\"1405\":1}}],[\"从后向前搜索字符串\",{\"1\":{\"1405\":1}}],[\"从连接池中获取链接\",{\"1\":{\"1275\":2}}],[\"从池中拿出第一个\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"从池中取出一个连接对象为客户服务\",{\"1\":{\"1272\":1}}],[\"从preparedstatement\",{\"1\":{\"1257\":1}}],[\"从\",{\"1\":{\"1257\":1,\"1372\":1,\"1415\":4,\"1558\":1,\"2317\":1,\"2334\":1}}],[\"从购物车中提交订单等等操作\",{\"1\":{\"1101\":1}}],[\"从表的外键列与主表被参照的列名字可以不相同\",{\"1\":{\"1002\":1}}],[\"从表的外键列一定要指向主表的主键列\",{\"1\":{\"1002\":1}}],[\"从表字段名\",{\"1\":{\"1000\":1}}],[\"从表名称\",{\"1\":{\"1000\":1}}],[\"从表名\",{\"1\":{\"983\":1}}],[\"从最终的结果来看\",{\"1\":{\"976\":1}}],[\"从主干分支分出\",{\"1\":{\"804\":1}}],[\"从客观来讲使用反射的确有破坏封装的可能性\",{\"1\":{\"597\":1}}],[\"从宏观上来讲是并发的多个任务\",{\"1\":{\"452\":1}}],[\"从下往上关闭\",{\"1\":{\"409\":1}}],[\"从队列中移除指定的元素实例\",{\"1\":{\"324\":1}}],[\"从而在使用spring进行web开发时\",{\"1\":{\"2740\":1}}],[\"从而在现有环境执行执行\",{\"1\":{\"96\":1}}],[\"从而长时间占用数据库资源\",{\"1\":{\"2715\":1}}],[\"从而提高工作效率和开发速度\",{\"1\":{\"2197\":1}}],[\"从而大大提高了应用的灵活性和重用性\",{\"1\":{\"2034\":1}}],[\"从而得到更好的开发和维护效率\",{\"1\":{\"2034\":1}}],[\"从而为后续的用户请求作好拦截的准备工作\",{\"1\":{\"2003\":1}}],[\"从而实现一些特殊的功能\",{\"1\":{\"1994\":1}}],[\"从而让整个应用都有路由功能\",{\"1\":{\"1718\":1}}],[\"从而时间子组件修改父组件的值\",{\"1\":{\"1715\":1}}],[\"从而形成jsp文件\",{\"1\":{\"1548\":1}}],[\"从而使html内容使用结构化的方式显示\",{\"1\":{\"1447\":1}}],[\"从而使众多的计算机可以方便地互相传递信息\",{\"1\":{\"492\":1}}],[\"从而能采集客户端信息\",{\"1\":{\"1329\":1}}],[\"从而回到sql语句执行之前的状态\",{\"1\":{\"1109\":1}}],[\"从而保证这多条sql语句执行同时成功或同时失败\",{\"1\":{\"1101\":1}}],[\"从而造成工作区中存在大量重复的文件\",{\"1\":{\"649\":1}}],[\"从而降低冲突的概率\",{\"1\":{\"294\":1}}],[\"从根对象触发\",{\"1\":{\"142\":1}}],[\"从图中我们可以看出\",{\"1\":{\"111\":1}}],[\"都无法获取数据\",{\"1\":{\"2929\":1}}],[\"都正常获取数据\",{\"1\":{\"2926\":3}}],[\"都使用return语句来完成资源的响应\",{\"1\":{\"2874\":1}}],[\"都有发现\",{\"1\":{\"2713\":1}}],[\"都进行了一系列的封装\",{\"1\":{\"2527\":1}}],[\"都只能提供一个查询参数\",{\"1\":{\"2371\":1}}],[\"都要记录到永久存储器中\",{\"1\":{\"2688\":1}}],[\"都要放行的资源\",{\"1\":{\"2063\":1}}],[\"都要重新实现这个run方法\",{\"1\":{\"456\":1}}],[\"都需要冲洗向视图中绘制\",{\"1\":{\"1613\":1}}],[\"都需要写在finally\",{\"1\":{\"512\":1}}],[\"都必须把整个项目导入到开发工具中\",{\"1\":{\"1939\":1}}],[\"都必须经过编译\",{\"1\":{\"1374\":2}}],[\"都必须在lock保护之内\",{\"1\":{\"475\":1}}],[\"都包含\",{\"1\":{\"1195\":1}}],[\"都不影响页面\",{\"1\":{\"1298\":1}}],[\"都不会执行到commit\",{\"1\":{\"1233\":1}}],[\"都不能改变这种执行方式\",{\"1\":{\"1099\":1}}],[\"都不相同\",{\"1\":{\"279\":1}}],[\"都满足\",{\"1\":{\"848\":1}}],[\"都可以看到\",{\"1\":{\"760\":1}}],[\"都可以添加进去\",{\"1\":{\"315\":1}}],[\"都能通过简洁直观的代码实现\",{\"1\":{\"1145\":1}}],[\"都能得到大幅度提升\",{\"1\":{\"919\":1}}],[\"都能够调用它的任意方法和属性\",{\"1\":{\"570\":1}}],[\"都能够知道这个类的所有属性和方法\",{\"1\":{\"570\":1}}],[\"都能创建用户对象\",{\"1\":{\"567\":1}}],[\"都在工作区\",{\"1\":{\"734\":1}}],[\"都在等待对方放弃自己需要的同步资源\",{\"1\":{\"484\":1}}],[\"都在集合中添加数据\",{\"1\":{\"313\":1}}],[\"都是隔离的\",{\"1\":{\"2687\":1}}],[\"都是直接new一个实现类的对象\",{\"1\":{\"2540\":1}}],[\"都是通过sqlsession对象的api完成增删改查\",{\"1\":{\"2371\":1}}],[\"都是由sqlsession调用自身方法发送sql命令并得到结果的\",{\"1\":{\"2371\":1}}],[\"都是关于是web应用程序的配置文件\",{\"1\":{\"1751\":1}}],[\"都是一个非常常见的概念\",{\"1\":{\"1728\":1}}],[\"都是一致的\",{\"1\":{\"956\":1}}],[\"都是会以文本类型进行渲染\",{\"1\":{\"1634\":1}}],[\"都是vue规定\",{\"1\":{\"1617\":1}}],[\"都是立即检查外键约束\",{\"1\":{\"1003\":1}}],[\"都是在原有的char数组上进行变更\",{\"1\":{\"393\":1}}],[\"都是读的原来的arr\",{\"1\":{\"313\":1}}],[\"都是引用数据类型\",{\"1\":{\"235\":1}}],[\"都是私有的\",{\"1\":{\"101\":1}}],[\"都会用类型处理器将获取的值以合适的方式转换成\",{\"1\":{\"2507\":1}}],[\"都会执行dofilter的方法\",{\"1\":{\"2006\":1}}],[\"都会执行一次内部的function\",{\"1\":{\"1574\":1}}],[\"都会先调用一下filter的dofilter方法\",{\"1\":{\"1995\":1}}],[\"都会释放原来的位置\",{\"1\":{\"1535\":1}}],[\"都会转成编码传送\",{\"1\":{\"1330\":1}}],[\"都会提交一次事务\",{\"1\":{\"1234\":1}}],[\"都会产生重要的影响\",{\"1\":{\"1045\":1}}],[\"都会报错\",{\"1\":{\"234\":1}}],[\"都会经过淘宝的镜像地址下载\",{\"1\":{\"93\":1}}],[\"有没有都新建事务\",{\"1\":{\"2737\":1}}],[\"有就用\",{\"1\":{\"2736\":1}}],[\"有就直接挂起\",{\"1\":{\"2735\":1}}],[\"有就抛出异常\",{\"1\":{\"2735\":1}}],[\"有可能因为遇到某些问题\",{\"1\":{\"2715\":1}}],[\"有可能会出现脏读\",{\"1\":{\"2693\":1}}],[\"有可能相同\",{\"1\":{\"294\":1}}],[\"有接口\",{\"1\":{\"2371\":1}}],[\"有助于发现问题\",{\"1\":{\"2294\":1}}],[\"有sql注入的风险\",{\"1\":{\"2248\":1}}],[\"有利于通过工程化\",{\"1\":{\"2040\":1}}],[\"有利软件工程化管理\",{\"0\":{\"2040\":1}}],[\"有一定优势\",{\"1\":{\"2163\":1}}],[\"有一些属性允许您指定小数点后的位数\",{\"1\":{\"2029\":1}}],[\"有一个更清晰的清单\",{\"1\":{\"1715\":1}}],[\"有一个参照物\",{\"1\":{\"387\":1}}],[\"有人都会认为jsp的执行性能会和servlet相差很多\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"有效预防\",{\"1\":{\"2179\":1}}],[\"有效范围\",{\"0\":{\"1915\":1,\"1919\":1,\"1923\":1}}],[\"有效的区分了日和机器的操作\",{\"1\":{\"902\":1}}],[\"有这个属性的元素设置display为none\",{\"1\":{\"1638\":1}}],[\"有很多根据vue拓展的独立的功能或库\",{\"1\":{\"1612\":1}}],[\"有很多客户端的连接\",{\"1\":{\"355\":1}}],[\"有类和对象\",{\"1\":{\"1403\":1}}],[\"有时候完成添加后需要立刻获取刚刚自增的主键\",{\"1\":{\"2408\":1}}],[\"有时候我们需要如下调整\",{\"1\":{\"900\":1}}],[\"有时甚至会显示不出来\",{\"1\":{\"1375\":1}}],[\"有get和post两种\",{\"1\":{\"1330\":1}}],[\"有等级3\",{\"1\":{\"1283\":1}}],[\"有三种\",{\"1\":{\"1257\":1}}],[\"有两种发送方式\",{\"1\":{\"1230\":1}}],[\"有两个可选参数\",{\"1\":{\"2155\":1}}],[\"有两个参数\",{\"1\":{\"2144\":1}}],[\"有两个包\",{\"1\":{\"1209\":1}}],[\"有两个date在不同的包\",{\"1\":{\"891\":1}}],[\"有两个概念非常重要\",{\"1\":{\"167\":1}}],[\"有左对齐\",{\"1\":{\"1182\":1}}],[\"有符号\",{\"1\":{\"939\":1}}],[\"有参返回值的接口\",{\"1\":{\"841\":1}}],[\"有以下几种形式\",{\"1\":{\"827\":1}}],[\"有默认约定好的目录结构\",{\"1\":{\"684\":1}}],[\"有的是web工程\",{\"1\":{\"653\":1}}],[\"有大量的第三方框架和工具可以供我们使用\",{\"1\":{\"649\":1}}],[\"有了name才可以提交数据\",{\"1\":{\"1333\":1}}],[\"有了jdbc\",{\"1\":{\"1205\":1}}],[\"有了构造器以后我就可以创建对象\",{\"1\":{\"585\":1}}],[\"有了这个对象\",{\"1\":{\"384\":1}}],[\"有它自身的产生\",{\"1\":{\"452\":1}}],[\"有返回值的存储过程\",{\"1\":{\"1147\":1}}],[\"有返回值\",{\"1\":{\"448\":1}}],[\"有哪些包装类\",{\"0\":{\"360\":1}}],[\"有意思的面试题\",{\"0\":{\"296\":1}}],[\"有序列表\",{\"0\":{\"1318\":1},\"1\":{\"1171\":1,\"1317\":1,\"1318\":1}}],[\"有序的\",{\"1\":{\"284\":1,\"299\":1}}],[\"有序\",{\"1\":{\"228\":1,\"249\":1,\"297\":1}}],[\"有限\",{\"1\":{\"226\":1}}],[\"有评价这个算法的具体指标\",{\"1\":{\"223\":1}}],[\"有设计解决的具体的流程\",{\"1\":{\"223\":1}}],[\"有黄色警告\",{\"1\":{\"114\":1}}],[\"有自己的作用域\",{\"1\":{\"101\":1}}],[\"有局部作用域\",{\"1\":{\"73\":1}}],[\"了解缓存\",{\"0\":{\"2469\":1}}],[\"了解iservice接口\",{\"0\":{\"2213\":1}}],[\"了解mybatis\",{\"0\":{\"2196\":1}}],[\"了解mybatisplus\",{\"0\":{\"2178\":1}}],[\"了解监听器\",{\"0\":{\"2065\":1}}],[\"了解响应\",{\"0\":{\"1803\":1}}],[\"了解请求结构\",{\"0\":{\"1798\":1}}],[\"了解vue\",{\"0\":{\"1611\":1}}],[\"了解\",{\"0\":{\"2700\":1,\"2793\":1,\"2847\":1,\"2852\":1},\"1\":{\"683\":1,\"685\":1,\"1293\":1,\"1369\":1,\"1370\":2,\"2699\":2,\"2835\":2}}],[\"了解http请求\",{\"0\":{\"172\":1}}],[\"了解http协议\",{\"0\":{\"153\":1}}],[\"了\",{\"1\":{\"100\":1}}],[\"类上\",{\"1\":{\"2834\":1}}],[\"类上的注解+方法上的注解\",{\"1\":{\"2764\":1}}],[\"类上的负边距设置第一行和最后一列的偏移\",{\"1\":{\"1601\":1}}],[\"类里面那些可以被增强的方法\",{\"1\":{\"2621\":1}}],[\"类和对象怎么协作\",{\"1\":{\"2197\":1}}],[\"类和对象的分割\",{\"1\":{\"2197\":1}}],[\"类即可进行强大的\",{\"1\":{\"2179\":1}}],[\"类的属性上\",{\"1\":{\"2798\":1}}],[\"类的全路径名\",{\"1\":{\"2633\":1}}],[\"类的全路径名name\",{\"1\":{\"2552\":1}}],[\"类的容器中\",{\"1\":{\"1601\":1}}],[\"类的对象是有限个\",{\"1\":{\"558\":1}}],[\"类用于\",{\"1\":{\"1595\":1}}],[\"类用于固定宽度并支持响应式布局的容器\",{\"1\":{\"1595\":1}}],[\"类选择器\",{\"0\":{\"1509\":1},\"1\":{\"1509\":1,\"1548\":3}}],[\"类可以进行日期的解析和格式化操作\",{\"1\":{\"897\":1}}],[\"类加载器子系统通过二进制字节流\",{\"1\":{\"570\":1}}],[\"类加载\",{\"1\":{\"533\":1}}],[\"类名和表名保持一致\",{\"1\":{\"1226\":1}}],[\"类名引用实例方法使用是有前提的\",{\"1\":{\"830\":1}}],[\"类名只能调用静态方法\",{\"1\":{\"830\":1}}],[\"类名\",{\"0\":{\"829\":1,\"830\":1,\"831\":1},\"1\":{\"466\":1,\"472\":1,\"827\":3,\"892\":1}}],[\"类名<e>\",{\"1\":{\"238\":1}}],[\"类型处理器\",{\"0\":{\"2506\":1}}],[\"类型内建的类型别名\",{\"1\":{\"2335\":1}}],[\"类型设置一个缩写名字\",{\"1\":{\"2324\":1}}],[\"类型别名可为\",{\"1\":{\"2324\":1}}],[\"类型校验\",{\"0\":{\"1345\":1}}],[\"类型\",{\"1\":{\"942\":1,\"954\":2,\"959\":1,\"960\":1,\"1360\":1,\"1372\":1,\"1485\":1,\"1801\":1,\"1849\":1,\"2507\":1,\"2607\":1}}],[\"类型和网络\",{\"1\":{\"922\":1}}],[\"类型参数声明如\",{\"1\":{\"905\":1}}],[\"类型注解\",{\"0\":{\"905\":1}}],[\"类型匹配补全\",{\"0\":{\"621\":1}}],[\"类型转换\",{\"1\":{\"373\":1}}],[\"类型互转\",{\"0\":{\"373\":1}}],[\"类型是node\",{\"1\":{\"279\":1}}],[\"类似cglib动态代理\",{\"1\":{\"2644\":1}}],[\"类似\",{\"1\":{\"2531\":1}}],[\"类似比较器\",{\"1\":{\"1401\":1}}],[\"类似自然语言\",{\"1\":{\"930\":1}}],[\"类似于标准的http\",{\"1\":{\"2552\":1}}],[\"类似于前端的事件绑定\",{\"1\":{\"2066\":1}}],[\"类似于\",{\"1\":{\"1611\":1,\"2256\":1}}],[\"类似于java中的方法\",{\"1\":{\"1368\":1}}],[\"类似于一张表格\",{\"1\":{\"1072\":1}}],[\"类似于复制的操作\",{\"1\":{\"295\":1}}],[\"类似于vue中的v\",{\"1\":{\"147\":1}}],[\"类似jsp\",{\"1\":{\"122\":1}}],[\"类似maven中的\",{\"1\":{\"94\":1}}],[\"类\",{\"0\":{\"1789\":1},\"1\":{\"100\":1,\"101\":1,\"534\":1,\"542\":1,\"575\":1,\"581\":1,\"2509\":1}}],[\"它支持简单的表达式\",{\"1\":{\"2835\":1}}],[\"它支持定制化\",{\"1\":{\"2196\":1}}],[\"它和\",{\"1\":{\"2835\":1}}],[\"它就相当于\",{\"1\":{\"2770\":1}}],[\"它就是我们开发中要编写的具体业务控制器\",{\"1\":{\"2773\":1}}],[\"它就是定义了脚本语言的所有属性\",{\"1\":{\"1372\":1}}],[\"它就是git的本地版本库\",{\"1\":{\"728\":1}}],[\"它除了保证一个事务不能读取另一个事务未提交的数据外\",{\"1\":{\"2722\":1}}],[\"它允许另外一个事务可以看到这个事务未提交的数据\",{\"1\":{\"2720\":1}}],[\"它允许测试人员利用程序内部的逻辑结构及有关信息\",{\"1\":{\"530\":1}}],[\"它发生在一个事务\",{\"1\":{\"2692\":1}}],[\"它通过\",{\"1\":{\"2623\":1}}],[\"它通常运行在tcp之上\",{\"1\":{\"154\":1,\"1324\":1}}],[\"它定义了相应的\",{\"1\":{\"2622\":1}}],[\"它定义了整体结构\",{\"1\":{\"2197\":1}}],[\"它自身还可以嵌套其它\",{\"1\":{\"2621\":1}}],[\"它具有内存和磁盘存储功能\",{\"1\":{\"2482\":1}}],[\"它们都是不区分大小写的\",{\"1\":{\"2335\":1}}],[\"它们分别是\",{\"1\":{\"1732\":1}}],[\"它仅用于\",{\"1\":{\"2324\":1}}],[\"它从不提交或回滚一个连接\",{\"1\":{\"2318\":1}}],[\"它在关闭连接时启用自动提交\",{\"1\":{\"2317\":1}}],[\"它在灵活地为用户提供服务的同时\",{\"1\":{\"920\":1}}],[\"它依赖从数据源获得的连接来管理事务作用域\",{\"1\":{\"2317\":1}}],[\"它基于ecmascript\",{\"1\":{\"2123\":1}}],[\"它使用文本表示一个\",{\"1\":{\"2125\":1}}],[\"它使程序员\",{\"1\":{\"2038\":1}}],[\"它使得我们的lambda表达式更加的精简\",{\"1\":{\"833\":1}}],[\"它本身并不引入新的功能\",{\"1\":{\"2034\":1}}],[\"它主要提供给java\",{\"1\":{\"2011\":1}}],[\"它主要用于对用户请求进行预处理\",{\"1\":{\"1994\":1}}],[\"它用于显示数据比较方便\",{\"1\":{\"1953\":1}}],[\"它用来替代传统的object的wait\",{\"1\":{\"475\":1}}],[\"它默认继承了httpjspbase\",{\"1\":{\"1932\":1}}],[\"它涉及到html本身的字符串处理\",{\"1\":{\"1928\":1}}],[\"它实现了html语法中可以嵌入java编码的扩展\",{\"1\":{\"1927\":1}}],[\"它运行在某个指定的虚拟主机\",{\"1\":{\"1768\":1}}],[\"它监听在8005端口以接收shutdown命令\",{\"1\":{\"1763\":1}}],[\"它可以实现局部刷新网页\",{\"1\":{\"1720\":1}}],[\"它可以对浏览器窗口进行访问和操作\",{\"1\":{\"1372\":1}}],[\"它即是由动态css语言less写成\",{\"1\":{\"1557\":1}}],[\"它\",{\"1\":{\"1548\":1}}],[\"它有多个作用\",{\"1\":{\"1546\":1}}],[\"它有三个子类\",{\"1\":{\"1479\":1}}],[\"它相对谁变化呢\",{\"1\":{\"1535\":1}}],[\"它包括任何web\",{\"1\":{\"2037\":1}}],[\"它包括\",{\"1\":{\"1527\":1}}],[\"它包含页目目录\",{\"1\":{\"600\":1}}],[\"它脱离文档流并且向左移动\",{\"1\":{\"1519\":1}}],[\"它脱离文档流并且向右移动\",{\"1\":{\"1519\":1}}],[\"它返回一个\",{\"1\":{\"1452\":1}}],[\"它表示一个浏览器窗口或一个框架\",{\"1\":{\"1450\":1}}],[\"它能够很好的融合与javascript或其他宿主语言\",{\"1\":{\"2162\":1}}],[\"它能够容纳各种各样的控件\",{\"1\":{\"1329\":1}}],[\"它能够更加精细的控制多线程的休眠与唤醒\",{\"1\":{\"475\":1}}],[\"它被用来组织多个窗口\",{\"1\":{\"1322\":1}}],[\"它被称为结果集\",{\"1\":{\"1259\":1}}],[\"它介于数据库和业务逻辑代码之间\",{\"1\":{\"1262\":1}}],[\"它代表符合sql语句条件的所有行\",{\"1\":{\"1259\":1}}],[\"它由一组用java语言编写的类和接口组成\",{\"1\":{\"1205\":1}}],[\"它帮助数据库高效的进行数据的检索\",{\"1\":{\"1125\":1}}],[\"它对数据库中数据的改变就是永久性的\",{\"1\":{\"1102\":1}}],[\"它是一种针对网络应用的设计和开发方式\",{\"1\":{\"2823\":1}}],[\"它是一种数据库查询和程序设计语言\",{\"1\":{\"930\":1}}],[\"它是访问定义和配置任何对象的媒介\",{\"1\":{\"2532\":1}}],[\"它是浏览器最核心也最基本的安全功能\",{\"1\":{\"2168\":1}}],[\"它是servlet技术中最实用的技术\",{\"1\":{\"1994\":1}}],[\"它是statement的子接口\",{\"1\":{\"1250\":1}}],[\"它是需要运行代码才会生成资源\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"它是轻量级的\",{\"1\":{\"1612\":1}}],[\"它是初创公司的首选框架\",{\"1\":{\"1612\":1}}],[\"它是渐进式框架\",{\"1\":{\"1612\":1}}],[\"它是在传统的网\",{\"1\":{\"1548\":1}}],[\"它是www的统一资源定位标志\",{\"1\":{\"1324\":1}}],[\"它是所有头部元素的容器\",{\"1\":{\"1292\":1}}],[\"它是mysql数据库中使用的配置文件\",{\"1\":{\"923\":1}}],[\"它是无法展示动态数据的\",{\"1\":{\"119\":1}}],[\"它跟其它分支没有区别\",{\"1\":{\"744\":1}}],[\"它执行结束以后才可以去执行其余的线程\",{\"1\":{\"458\":1}}],[\"它拥有更加灵活的操作方式以及api\",{\"1\":{\"359\":1}}],[\"它常被用做线程间的通信\",{\"1\":{\"346\":1}}],[\"它以\",{\"1\":{\"190\":1}}],[\"它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应\",{\"1\":{\"154\":1,\"1324\":1}}],[\"它会处理\",{\"1\":{\"2781\":1}}],[\"它会试着把运算符两边的操作数转换为数值类型\",{\"1\":{\"1987\":1}}],[\"它会向上一层一层的找父级节点是否有定位\",{\"1\":{\"1535\":1}}],[\"它会获取页面上所有这个元素\",{\"1\":{\"1508\":1}}],[\"它会开始于组成当前事务的所有statement中的第一个被执行的时候\",{\"1\":{\"1233\":1}}],[\"它会去掉片段外层标记\",{\"1\":{\"150\":1}}],[\"它会保留页面自身的标签\",{\"1\":{\"150\":1}}],[\"它不与浏览器\",{\"1\":{\"1372\":1}}],[\"它不仅仅指狭义上的数字\",{\"1\":{\"908\":1}}],[\"它不会保留页面自身的标签\",{\"1\":{\"150\":1}}],[\"它不支持\",{\"1\":{\"100\":1}}],[\"它的作用是在关系型数据库和对象之间作一个映射\",{\"1\":{\"2198\":1}}],[\"它的主要目的是将表示逻辑从servlet中分离出来\",{\"1\":{\"1927\":1}}],[\"它的主要作用是在静态页面上渲染显示动态数据\",{\"1\":{\"122\":1}}],[\"它的前身是live\",{\"1\":{\"1376\":1}}],[\"它的并发度是什么\",{\"1\":{\"311\":1}}],[\"它的key不允许为null\",{\"1\":{\"298\":1}}],[\"它的目标\",{\"1\":{\"68\":1}}],[\"它也可以轻易的与spring\",{\"1\":{\"122\":1}}],[\"它将根据模块的依赖关系进行静态分析\",{\"1\":{\"111\":1}}],[\"而已直接作为返回的数据\",{\"1\":{\"2876\":1,\"2878\":1}}],[\"而目前dispatcherservlet的底层会将单元方法的返回值按照请求转发或者重定向来处理\",{\"1\":{\"2874\":1}}],[\"而目前我们在单元方法中响应ajax请求\",{\"1\":{\"2874\":1}}],[\"而我们一直希望在单元方法中无论是否是ajax请求\",{\"1\":{\"2874\":1}}],[\"而我们中文的windows操作系统使用的是gbk编码\",{\"1\":{\"1755\":1}}],[\"而ajax的请求在被处理完成后\",{\"1\":{\"2874\":1}}],[\"而a→c是间接依赖\",{\"1\":{\"687\":1}}],[\"而requiresnew由于都是全新的事务\",{\"1\":{\"2733\":1}}],[\"而nested只有一个物理事务\",{\"1\":{\"2733\":1}}],[\"而never是上下文中不能有事务\",{\"1\":{\"2732\":1}}],[\"而b\",{\"1\":{\"2732\":1}}],[\"而所谓的b\",{\"1\":{\"2728\":1}}],[\"而同时\",{\"1\":{\"2728\":1}}],[\"而同步代码块锁将线程挡在了代码块的外部\",{\"1\":{\"472\":1}}],[\"而长时间占用资源\",{\"1\":{\"2715\":1}}],[\"而这种修改还没有提交到数据库中\",{\"1\":{\"2690\":1}}],[\"而这些输入大都是sql语法里的一些组合\",{\"1\":{\"1237\":1}}],[\"而原子性消除了系统只处理部分操作的可能性\",{\"1\":{\"2685\":1}}],[\"而myisam不支持\",{\"1\":{\"2683\":1}}],[\"而作为存放切入点表达式的类\",{\"1\":{\"2635\":1}}],[\"而使用beanfactory实现的时候\",{\"1\":{\"2572\":1}}],[\"而使用maven后每个jar包只在本地仓库中保存一份\",{\"1\":{\"649\":1}}],[\"而cachingexecutor可以看做是对baseexecutor的装饰\",{\"1\":{\"2492\":1}}],[\"而condition是需要与\",{\"1\":{\"475\":1}}],[\"而其中的insert\",{\"1\":{\"2480\":1}}],[\"而其他选择器从0开始\",{\"1\":{\"1552\":1}}],[\"而并不一定是在内存中\",{\"1\":{\"2480\":1}}],[\"而操作的表为user表\",{\"1\":{\"2223\":1}}],[\"而添加操作时需要手动将java对象的属性转换为数据库表的列字段\",{\"1\":{\"2198\":1}}],[\"而采用一种框架其实就是限制用户必须使用其规定的方案来实现\",{\"1\":{\"2197\":1}}],[\"而忽略其他层的存在\",{\"1\":{\"2043\":1}}],[\"而控制器部分负责协调模型和视图\",{\"1\":{\"2034\":1}}],[\"而后端也可以使用接口测试平台进行接口自测\",{\"1\":{\"1942\":1}}],[\"而后端代码中除了功能实现外\",{\"1\":{\"1941\":1}}],[\"而前后端分离模式在代码组织形式上有以下两种\",{\"1\":{\"1939\":1}}],[\"而前端项目中主要是一些html\",{\"1\":{\"1937\":1}}],[\"而hibernatetransactionmanager默认不支持\",{\"1\":{\"2733\":1}}],[\"而httpsession没有容量以及数量的限制\",{\"1\":{\"1902\":1}}],[\"而httpsession是安全的\",{\"1\":{\"1902\":1}}],[\"而httpsession是通过服务端来实现会话状态的维持\",{\"1\":{\"1882\":1}}],[\"而httpsession中的数据存放在服务器中\",{\"1\":{\"1902\":1}}],[\"而hello依赖log4j\",{\"1\":{\"652\":1}}],[\"而浏览器则通过mime类型来确定如何处理文档\",{\"1\":{\"1805\":1}}],[\"而要写username==\",{\"1\":{\"1580\":1}}],[\"而在某些情况下\",{\"1\":{\"1573\":1}}],[\"而脱离文档流就是在页面中不占位置了\",{\"1\":{\"1517\":1}}],[\"而脚本语言不需要事先编译\",{\"1\":{\"1374\":2}}],[\"而消息内容则具有一个类似mime的格式\",{\"1\":{\"1324\":1}}],[\"而statement不能防止sql注入\",{\"1\":{\"1249\":1}}],[\"而stringbuilder是线程不安全的\",{\"1\":{\"397\":1}}],[\"而批处理是\",{\"1\":{\"1230\":1}}],[\"而存储过程只是在第一次执行语法分析\",{\"1\":{\"1146\":1}}],[\"而如果把这个订单信息表进行拆分\",{\"1\":{\"1047\":1}}],[\"而仅仅是与商品编号相关\",{\"1\":{\"1047\":1}}],[\"而企业版只包含稳定之后的功能\",{\"1\":{\"920\":1}}],[\"而企业版是收费的\",{\"1\":{\"920\":1}}],[\"而对数据库可靠性要求比较高的企业可以选择企业版\",{\"1\":{\"920\":1}}],[\"而描述这些数据的符号也变得越来越复杂了\",{\"1\":{\"908\":1}}],[\"而lambda表达式使用时不关心接口名\",{\"1\":{\"835\":1}}],[\"而lock\",{\"1\":{\"475\":1}}],[\"而它所在的表达式被称为方法引用\",{\"1\":{\"827\":1}}],[\"而干活的时候\",{\"1\":{\"723\":1}}],[\"而且单表要比关联查询多张表速度要快\",{\"1\":{\"2434\":1}}],[\"而且是一个代价高昂的操作\",{\"1\":{\"2317\":1}}],[\"而且一旦字段如果太多修改工作量大\",{\"1\":{\"2126\":1}}],[\"而且相互分离\",{\"1\":{\"2034\":1}}],[\"而且大型的web应用程序的开发需要java\",{\"1\":{\"1927\":1}}],[\"而且web应用中的所有servlet都共享这个对象\",{\"1\":{\"1828\":1}}],[\"而且必须进行重写\",{\"1\":{\"1820\":1}}],[\"而且主表要先存在\",{\"1\":{\"1002\":1}}],[\"而且从小规模到大规模的应用都可以使用\",{\"1\":{\"919\":1}}],[\"而且也是将来引用此jar包的唯一路径\",{\"1\":{\"685\":1}}],[\"而且公司项目采用\",{\"1\":{\"655\":1}}],[\"而引入maven后\",{\"1\":{\"651\":1}}],[\"而没有锁住使用其他监视器的代码块\",{\"1\":{\"472\":1}}],[\"而是按照直接响应处理\",{\"1\":{\"2874\":1}}],[\"而是auto\",{\"1\":{\"2728\":1}}],[\"而是在程序运行时根据我们的在java代码中的\",{\"1\":{\"2607\":1}}],[\"而是直接从缓存中获取结果\",{\"1\":{\"2470\":1}}],[\"而是让容器来管理事务的整个生命周期\",{\"1\":{\"2318\":1}}],[\"而是为了实现数据转换\",{\"1\":{\"2124\":1}}],[\"而是因为jsp作为一种动态资源\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"而是传递给了目标组件\",{\"1\":{\"1861\":1}}],[\"而是通过为每个web项目创建一个独立的tomcat副本并在tomcat副本中通过的tomcat的context组件完成项目的目录指定\",{\"1\":{\"1779\":1}}],[\"而是通过data带有布尔值的进行渲染\",{\"1\":{\"1620\":1}}],[\"而是多种技术的综合应用\",{\"1\":{\"1720\":1}}],[\"而是元素\",{\"1\":{\"1632\":1}}],[\"而是空字符串\",{\"1\":{\"1580\":1}}],[\"而是出现\",{\"1\":{\"1361\":1}}],[\"而是以普通文本的形式进行展现\",{\"1\":{\"1299\":1}}],[\"而是简单粗暴的直接拼接字符串\",{\"1\":{\"1249\":1}}],[\"而是返回值true或false\",{\"1\":{\"1073\":1}}],[\"而是返回一个修改后的新的localdate对象\",{\"1\":{\"895\":1}}],[\"而是回车后以保密方式输入\",{\"1\":{\"925\":1}}],[\"而是有多种表现形式\",{\"1\":{\"908\":1}}],[\"而是生成一个新的实例\",{\"1\":{\"902\":1}}],[\"而是帮我们重新创建了对象\",{\"1\":{\"895\":1}}],[\"而是对于数据进行加工处理\",{\"1\":{\"857\":1}}],[\"而是和橙色代码块一起并发执行\",{\"1\":{\"438\":1}}],[\"而是使用效率比较高的h\",{\"1\":{\"296\":1}}],[\"而包装类是在基本数据类型的基础上\",{\"1\":{\"359\":1}}],[\"而非它们进入队列的顺序\",{\"1\":{\"354\":1}}],[\"而用户每按下一次\",{\"1\":{\"302\":1}}],[\"而item就是真正存放数据的属性\",{\"1\":{\"261\":1}}],[\"而offer不会\",{\"1\":{\"260\":1}}],[\"而不再重新把jsp编译成servelt\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"而不冲突\",{\"1\":{\"1546\":1}}],[\"而不仅仅是隐式地引用它时\",{\"1\":{\"1450\":1}}],[\"而不必写\",{\"1\":{\"1450\":2}}],[\"而不需要重启服务器\",{\"1\":{\"1750\":1}}],[\"而不需要像其他sql语句那样首先将其编译\",{\"1\":{\"1250\":1}}],[\"而不需要指明\",{\"1\":{\"930\":1}}],[\"而不可以在订单表中添加关于客户其它信息\",{\"1\":{\"1048\":1}}],[\"而不能返回null\",{\"1\":{\"2572\":1}}],[\"而不能间接相关\",{\"1\":{\"1048\":1}}],[\"而不能只与主键的某一部分相关\",{\"1\":{\"1047\":1}}],[\"而不是指b\",{\"1\":{\"2728\":1}}],[\"而不是出现异常\",{\"1\":{\"1987\":1}}],[\"而不是一个data对象\",{\"1\":{\"1705\":1}}],[\"而不是浮动\",{\"1\":{\"1601\":1}}],[\"而不是给submit按钮绑定onclick事件\",{\"1\":{\"1580\":1}}],[\"而不是报错\",{\"1\":{\"1361\":1}}],[\"而不是等待它们被自动释放\",{\"1\":{\"1255\":1}}],[\"而不是在应用程序中获得连接的方式上有什么不同\",{\"1\":{\"1209\":1}}],[\"而不是间接相关\",{\"0\":{\"1048\":1}}],[\"而不是字节的个数\",{\"1\":{\"941\":1}}],[\"而不是用getdeclaredmethods\",{\"1\":{\"597\":1}}],[\"而不是基本数据类型\",{\"1\":{\"238\":1}}],[\"而不是持久化存储\",{\"1\":{\"228\":1}}],[\"而不用担心现有环境是否支持\",{\"1\":{\"96\":1}}],[\"而post即可是字符也可是字节\",{\"1\":{\"188\":1}}],[\"而post则没有\",{\"1\":{\"188\":1}}],[\"而post中的参数不会被保留\",{\"1\":{\"188\":1}}],[\"而post支持多种编码方式\",{\"1\":{\"188\":1}}],[\"而post不会\",{\"1\":{\"188\":1}}],[\"而post不可以\",{\"1\":{\"188\":1}}],[\"而post会再次提交请求\",{\"1\":{\"188\":1}}],[\"而另一个则是session\",{\"1\":{\"161\":1}}],[\"而动态数据单靠html本身是无法做到的\",{\"1\":{\"119\":1}}],[\"而es2015\",{\"1\":{\"71\":1}}],[\"编程式事务管理\",{\"0\":{\"2700\":1},\"1\":{\"2699\":1}}],[\"编入java代码\",{\"1\":{\"1952\":3}}],[\"编写controller\",{\"0\":{\"2760\":1}}],[\"编写的各种日期时间类型处理器\",{\"1\":{\"2508\":1}}],[\"编写功能性代码\",{\"0\":{\"1790\":1}}],[\"编写登录程序\",{\"0\":{\"1240\":1}}],[\"编写程序\",{\"1\":{\"96\":1}}],[\"编码繁琐\",{\"1\":{\"2195\":1}}],[\"编码的字符串\",{\"1\":{\"1452\":2}}],[\"编码转为字符\",{\"1\":{\"1405\":1}}],[\"编码问题\",{\"0\":{\"1154\":1,\"2802\":1}}],[\"编码\",{\"1\":{\"684\":1,\"1405\":1}}],[\"编译jsp对应java文件\",{\"1\":{\"1935\":1}}],[\"编译\",{\"0\":{\"663\":1},\"1\":{\"709\":1,\"1146\":2,\"1683\":1}}],[\"编译部署的过程就是将鸡炖熟\",{\"1\":{\"659\":1}}],[\"编译好的web工程是一只煮熟的鸡\",{\"1\":{\"659\":1}}],[\"编译器直接丢弃这种策略的注释\",{\"1\":{\"553\":1}}],[\"编辑器编码辅助\",{\"0\":{\"638\":1}}],[\"编辑器基础知识\",{\"0\":{\"611\":1,\"3040\":1},\"1\":{\"44\":1}}],[\"包会自动依赖\",{\"1\":{\"2629\":2}}],[\"包扫描\",{\"0\":{\"2328\":1,\"2588\":1},\"1\":{\"2601\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1}}],[\"包扫描形式加载所有的mapper映射文件\",{\"1\":{\"2323\":1}}],[\"包头不包尾\",{\"1\":{\"1399\":1,\"1406\":1}}],[\"包围和解包围\",{\"0\":{\"617\":1}}],[\"包括使用不同语言编写的客户端如何通过\",{\"1\":{\"2823\":1}}],[\"包括物理事务\",{\"1\":{\"2730\":1}}],[\"包括上面四种通知对应的所有位置\",{\"1\":{\"2623\":1}}],[\"包括mapper\",{\"1\":{\"2497\":2}}],[\"包括库路径\",{\"1\":{\"1963\":1}}],[\"包括组件\",{\"1\":{\"1686\":1}}],[\"包括普通字符\",{\"1\":{\"1582\":1}}],[\"包括nasa的msnbc\",{\"1\":{\"1557\":1}}],[\"包括null\",{\"1\":{\"259\":1}}],[\"包括图片\",{\"1\":{\"1546\":1}}],[\"包括文档的标题\",{\"1\":{\"1292\":1}}],[\"包括类全名\",{\"1\":{\"1287\":1}}],[\"包括结果集可以向后滚动\",{\"1\":{\"1209\":1}}],[\"包括\",{\"1\":{\"382\":1,\"2319\":1,\"2530\":1,\"2531\":1,\"2532\":1,\"2775\":1}}],[\"包含全部的servlet\",{\"1\":{\"2759\":1}}],[\"包含支持类内的\",{\"1\":{\"2531\":1}}],[\"包含大小边界\",{\"1\":{\"2241\":1,\"2242\":1,\"2243\":1}}],[\"包含的功能为生产和消费的信息\",{\"1\":{\"2530\":1}}],[\"包含的script标签会在插入dom时执行\",{\"1\":{\"2141\":1}}],[\"包含的文件就好像是该jsp文件的一部分\",{\"1\":{\"1961\":1}}],[\"包含其他文件\",{\"1\":{\"1958\":1}}],[\"包含其他页面模板\",{\"0\":{\"148\":1}}],[\"包含有以下特点\",{\"1\":{\"1859\":1}}],[\"包含基础的依赖库\",{\"1\":{\"1682\":1}}],[\"包含了有帮助的命令行警告vue\",{\"1\":{\"1616\":1}}],[\"包含了功能强大的内置组件\",{\"1\":{\"1559\":1}}],[\"包含工具条与滚动条\",{\"1\":{\"1451\":2}}],[\"包含日期和时间\",{\"1\":{\"1198\":1}}],[\"包含一个但不包含另一个\",{\"1\":{\"1195\":1}}],[\"包含时区的时间\",{\"1\":{\"892\":1}}],[\"包含时分秒\",{\"1\":{\"892\":1}}],[\"包含年月日\",{\"1\":{\"892\":2}}],[\"包含返回true\",{\"1\":{\"853\":2}}],[\"包含父类\",{\"1\":{\"590\":2,\"591\":4}}],[\"包含在这个对象中的字符序列是不可改变的\",{\"1\":{\"397\":1}}],[\"包含以下属性\",{\"1\":{\"147\":1}}],[\"包\",{\"1\":{\"100\":1}}],[\"包名往往是\",{\"1\":{\"1263\":2}}],[\"包名\",{\"1\":{\"95\":4,\"430\":1}}],[\"包装类型中都重写了这个方法\",{\"1\":{\"272\":1}}],[\"包装类\",{\"0\":{\"286\":1,\"358\":1,\"3014\":1},\"1\":{\"38\":1,\"284\":1,\"299\":1}}],[\"更积极地基于垃圾收集器状态和弱引用规则移除对象\",{\"1\":{\"2481\":1}}],[\"更有超多自定义配置等您来使用\",{\"1\":{\"2179\":1}}],[\"更有强大的条件构造器\",{\"1\":{\"2179\":1}}],[\"更适合做移动项目\",{\"1\":{\"1943\":1}}],[\"更多详情可以了解\",{\"1\":{\"2896\":1}}],[\"更多ajax的学习可以回顾\",{\"1\":{\"2877\":1}}],[\"更多类型详见\",{\"1\":{\"1804\":1,\"1805\":1}}],[\"更多的处理器都会使tomcat支持更多的并发\",{\"1\":{\"1757\":1}}],[\"更多教程看官网\",{\"1\":{\"65\":1}}],[\"更好的硬件\",{\"1\":{\"1757\":1}}],[\"更加便捷的操作属性\",{\"1\":{\"1567\":1}}],[\"更易于维护代码\",{\"1\":{\"1380\":1}}],[\"更避免了重复文件太多而造成的混乱\",{\"1\":{\"649\":1}}],[\"更灵活\",{\"1\":{\"473\":1,\"2438\":1,\"2441\":1}}],[\"更容易被gc发现\",{\"1\":{\"338\":1}}],[\"更安全\",{\"0\":{\"170\":1}}],[\"更遑论\",{\"1\":{\"100\":1}}],[\"更新id为1\",{\"1\":{\"2827\":1}}],[\"更新时\",{\"1\":{\"2287\":1}}],[\"更新其他资源\",{\"1\":{\"1777\":1}}],[\"更新字节码和其他资源on\",{\"1\":{\"1777\":1}}],[\"更新等操作\",{\"1\":{\"1257\":1}}],[\"更新等功能\",{\"1\":{\"930\":1}}],[\"更新\",{\"1\":{\"1221\":1,\"1253\":1,\"2454\":1}}],[\"更新效率就很慢\",{\"1\":{\"1128\":1}}],[\"更新开始菜单快捷方式链接\",{\"1\":{\"922\":1}}],[\"更新windows防火墙规则\",{\"1\":{\"922\":1}}],[\"更新到最新版本\",{\"1\":{\"95\":1}}],[\"更新包\",{\"1\":{\"95\":1}}],[\"或是通过通配\",{\"1\":{\"2622\":1}}],[\"或是通过逻辑关系组合起来\",{\"1\":{\"2622\":1}}],[\"或是被赋与了null值\",{\"1\":{\"942\":1}}],[\"或delete\",{\"1\":{\"2437\":1}}],[\"或dopost\",{\"1\":{\"1769\":1}}],[\"或称为接口绑定\",{\"1\":{\"2371\":1}}],[\"或根据\",{\"1\":{\"2333\":1}}],[\"或类名和包名等\",{\"1\":{\"2319\":1}}],[\"或完全限定资源定位符\",{\"1\":{\"2319\":1}}],[\"或注解来配置和映射原生信息\",{\"1\":{\"2196\":1}}],[\"或getsession\",{\"1\":{\"1900\":1}}],[\"或文件的目录\",{\"1\":{\"1768\":1}}],[\"或username\",{\"1\":{\"1580\":1}}],[\"或0\",{\"1\":{\"1357\":1}}],[\"或理解为执行sql语句\",{\"1\":{\"1257\":1}}],[\"或之后的元素列表\",{\"1\":{\"1198\":1}}],[\"或应用程序相同的类加载器显式加载的那些驱动程序中查找合适的驱动程序\",{\"1\":{\"1256\":1}}],[\"或应用程序\",{\"1\":{\"1146\":1}}],[\"或lcase\",{\"1\":{\"1089\":1}}],[\"或>=any\",{\"1\":{\"1071\":1}}],[\"或>=all\",{\"1\":{\"1071\":1}}],[\"或多\",{\"1\":{\"1054\":2}}],[\"或ce\",{\"1\":{\"809\":1}}],[\"或其他代码托管中心\",{\"1\":{\"726\":1}}],[\"或点击下列图标开始调试程序\",{\"1\":{\"671\":1}}],[\"或超过指定的截止日期\",{\"1\":{\"479\":1}}],[\"或指定的等待时间结束\",{\"1\":{\"479\":1}}],[\"或者没有办法修改原有代码的情况下增强对象功能\",{\"1\":{\"2610\":1}}],[\"或者引用类型\",{\"1\":{\"2551\":1}}],[\"或者close\",{\"1\":{\"2478\":1}}],[\"或者ctrl\",{\"1\":{\"671\":1}}],[\"或者添加\",{\"1\":{\"2454\":1}}],[\"或者给sql语句前拼接\",{\"1\":{\"2454\":1}}],[\"或者是一个类型别名\",{\"1\":{\"2437\":1}}],[\"或者在\",{\"1\":{\"2334\":1}}],[\"或者通过\",{\"1\":{\"2075\":1}}],[\"或者动态资源\",{\"1\":{\"1996\":1}}],[\"或者设置tomcat中的server\",{\"1\":{\"1812\":1}}],[\"或者元素的属性\",{\"1\":{\"1480\":1}}],[\"或者allowpublickeyretrieval=true参数以允许客户端从服务器获取公钥\",{\"1\":{\"1216\":1}}],[\"或者对特定的数据集中更新时\",{\"1\":{\"1145\":1}}],[\"或者尝试一下方式执行更新\",{\"1\":{\"1001\":1}}],[\"或者直接抛出异常\",{\"1\":{\"889\":1}}],[\"或者点击下图按钮\",{\"1\":{\"671\":1}}],[\"或者客户端的喜好及能力\",{\"1\":{\"177\":1}}],[\"或者js文件\",{\"1\":{\"173\":1}}],[\"或者\",{\"1\":{\"98\":2,\"456\":1,\"630\":1,\"631\":1,\"632\":1,\"671\":1,\"786\":1,\"1054\":1,\"1171\":1,\"1645\":1,\"2154\":1,\"2360\":1,\"2374\":1,\"2588\":1}}],[\"或\",{\"1\":{\"94\":1,\"98\":2,\"614\":1,\"646\":2,\"656\":1,\"848\":1,\"1030\":1,\"1031\":4,\"1071\":2,\"1089\":1,\"1093\":2,\"1322\":2,\"1601\":1,\"2029\":2,\"2030\":3,\"2267\":1,\"2318\":1,\"2352\":1,\"2533\":1}}],[\"以非事务方法运行完毕后\",{\"1\":{\"2731\":1}}],[\"以非事务方法运行\",{\"1\":{\"2728\":1}}],[\"以非事务方式执行\",{\"1\":{\"2725\":1}}],[\"以非事务方式执行操作\",{\"1\":{\"2725\":1}}],[\"以rollbackfor为准\",{\"1\":{\"2717\":1}}],[\"以降低耦合性\",{\"1\":{\"2533\":1}}],[\"以降低相同率\",{\"1\":{\"294\":1}}],[\"以什么结尾\",{\"1\":{\"2464\":1}}],[\"以什么开头\",{\"1\":{\"2464\":1}}],[\"以什么格式接收后端响应给我们的信息\",{\"1\":{\"2132\":2}}],[\"以秒为单位\",{\"1\":{\"2301\":1,\"2715\":1}}],[\"以秒计时\",{\"1\":{\"177\":1}}],[\"以毫秒为单位\",{\"1\":{\"2301\":1}}],[\"以毫秒计\",{\"1\":{\"1452\":1}}],[\"以逗号分隔\",{\"1\":{\"2301\":2}}],[\"以分号分隔\",{\"1\":{\"2301\":1}}],[\"以配合默认内容类型\",{\"1\":{\"2153\":1}}],[\"以执行回调函数\",{\"1\":{\"2141\":1}}],[\"以提高程序的阅读性\",{\"1\":{\"2012\":1}}],[\"以定义变量举例\",{\"1\":{\"1951\":1}}],[\"以项目部署路径为基准路径\",{\"1\":{\"1876\":1}}],[\"以一个固定的路径作为定位文件的基准位置\",{\"1\":{\"1869\":1}}],[\"以一个固定的位置去定位其他文文件\",{\"1\":{\"1869\":1}}],[\"以当前文件所在的位置为基准位置绝对\",{\"1\":{\"1869\":1}}],[\"以当前文件本身的位置去定位其他文件\",{\"1\":{\"1869\":1}}],[\"以当前计算机时区获取时间\",{\"1\":{\"901\":1}}],[\"以便于应用设计者或实现者能集中精力于应用本身的特定细节\",{\"1\":{\"2197\":1}}],[\"以便浏览器知道以何种编码解析数据\",{\"1\":{\"1813\":1,\"1893\":1}}],[\"以便我们使用\",{\"1\":{\"384\":1}}],[\"以utf\",{\"1\":{\"1813\":1}}],[\"以适应多种请求方式\",{\"1\":{\"1765\":1}}],[\"以达到\",{\"1\":{\"1573\":1}}],[\"以实现网页数据和样式动态变化效果的编程\",{\"1\":{\"1476\":1}}],[\"以\",{\"1\":{\"1415\":1,\"1868\":1,\"1873\":1,\"1877\":1,\"1927\":1,\"2301\":2}}],[\"以介于\",{\"1\":{\"1411\":1}}],[\"以键值对的形式给出\",{\"1\":{\"1293\":1}}],[\"以模拟登录为例\",{\"1\":{\"1237\":1}}],[\"以string形式获取结果集当前行指定列名值\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"以string\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"以float形式获取结果集当前行指定列名值\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"以float形式获取结果集当前行指定列号值\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"以int形式获取结果集当前行指定列名值\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"以int形式获取结果集当前行指定列号值\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"以新密码登录\",{\"1\":{\"1155\":1}}],[\"以管理员权限运行cmd\",{\"1\":{\"1155\":1}}],[\"以数字表示年中的第几周\",{\"1\":{\"1093\":2}}],[\"以数字表示周中的天数\",{\"1\":{\"1093\":1}}],[\"以3位数字表示年中的天数\",{\"1\":{\"1093\":1}}],[\"以减少冗余数据\",{\"1\":{\"997\":1}}],[\"以来的\",{\"1\":{\"898\":1}}],[\"以来此\",{\"1\":{\"371\":1}}],[\"以免影响开发主线\",{\"1\":{\"744\":1}}],[\"以及html\",{\"1\":{\"2823\":1}}],[\"以及相应的\",{\"1\":{\"2625\":1}}],[\"以及参与到该项目之中的所有的员工信息\",{\"1\":{\"2429\":1}}],[\"以及\",{\"1\":{\"2250\":1,\"2454\":1,\"2533\":1}}],[\"以及控制流程\",{\"1\":{\"2197\":1}}],[\"以及最终由哪个视图为用户做出应答\",{\"1\":{\"2034\":1}}],[\"以及js脚本代码和文件\",{\"1\":{\"1928\":1}}],[\"以及向客户端浏览器响应的响应头\",{\"1\":{\"1802\":1}}],[\"以及修改的设定参数不同\",{\"1\":{\"1757\":1}}],[\"以及编译\",{\"1\":{\"1250\":1}}],[\"以及子网\",{\"1\":{\"928\":1}}],[\"以及指向master的一个指针叫head\",{\"1\":{\"728\":1}}],[\"以及一些媒体文件打开方式\",{\"1\":{\"206\":1}}],[\"以此确认本次提交是谁做的\",{\"1\":{\"726\":1}}],[\"以完成某个具体的构建任务\",{\"1\":{\"711\":1}}],[\"以不规范的方式获取的jar包也往往是不规范的\",{\"1\":{\"650\":1}}],[\"以收集编码辅助所需的详细信息\",{\"1\":{\"600\":1}}],[\"以发现程序错误\",{\"1\":{\"527\":1}}],[\"以前\",{\"1\":{\"475\":1}}],[\"以后的版本都是自动注册的\",{\"1\":{\"2508\":1}}],[\"以后学了js\",{\"1\":{\"1339\":1}}],[\"以后都是对结果进行调用\",{\"1\":{\"1146\":1}}],[\"以后用new\",{\"0\":{\"596\":1}}],[\"以后常用\",{\"1\":{\"380\":1}}],[\"以后获取时间差用\",{\"1\":{\"371\":1}}],[\"以后作为\",{\"1\":{\"294\":1}}],[\"以后所有的\",{\"1\":{\"93\":1}}],[\"以单向链表的形式存储\",{\"1\":{\"294\":1}}],[\"以1\",{\"1\":{\"253\":1,\"254\":1}}],[\"以原有类的继承关系为准\",{\"1\":{\"242\":1}}],[\"以线性表为例\",{\"1\":{\"226\":1}}],[\"以保证api的可用性\",{\"1\":{\"1941\":1}}],[\"以保证数据库中数据的准确性和一致性\",{\"1\":{\"981\":1}}],[\"以保证客户端能够区分出每次请求的响应内容\",{\"1\":{\"164\":2}}],[\"以保证尽量与官方服务同步\",{\"1\":{\"93\":1}}],[\"以下内容来自\",{\"1\":{\"2726\":1}}],[\"以下操作会导致一级缓存失效\",{\"1\":{\"2476\":1}}],[\"以下几个配置项需要大家特别理解\",{\"1\":{\"923\":1}}],[\"以下配置的意思是\",{\"1\":{\"114\":2}}],[\"以下简称\",{\"1\":{\"68\":1}}],[\"淘宝订单业务\",{\"1\":{\"355\":1}}],[\"淘宝\",{\"1\":{\"93\":1}}],[\"镜像是一个完整\",{\"1\":{\"93\":1}}],[\"镜像\",{\"1\":{\"93\":2}}],[\"修饰页面\",{\"1\":{\"1468\":1}}],[\"修饰html页面\",{\"1\":{\"1467\":1}}],[\"修饰符名称\",{\"1\":{\"1668\":1}}],[\"修饰符\",{\"0\":{\"1654\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"3114\":1},\"1\":{\"34\":1,\"116\":1,\"591\":1,\"817\":1,\"820\":1,\"1368\":1,\"2651\":1}}],[\"修理完毕并测试上线后\",{\"1\":{\"804\":1}}],[\"修改headers中的设置\",{\"1\":{\"2821\":1}}],[\"修改index\",{\"0\":{\"2786\":1}}],[\"修改路径\",{\"1\":{\"2752\":1}}],[\"修改web\",{\"0\":{\"2746\":1,\"2887\":1},\"1\":{\"2830\":1,\"2887\":1}}],[\"修改webpack\",{\"1\":{\"115\":1}}],[\"修改springmvc\",{\"1\":{\"2789\":1,\"2790\":1}}],[\"修改service层代码\",{\"0\":{\"2702\":1,\"2707\":1,\"2711\":1}}],[\"修改sqlmapconfig\",{\"0\":{\"2315\":1}}],[\"修改applicationcontext\",{\"0\":{\"2701\":1,\"2706\":1,\"2710\":1},\"1\":{\"2599\":1}}],[\"修改pom\",{\"1\":{\"2374\":1}}],[\"修改package\",{\"1\":{\"114\":1}}],[\"修改默认值的分隔符\",{\"1\":{\"2334\":1}}],[\"修改配置文件的格式化为自定义格式化\",{\"1\":{\"2299\":1}}],[\"修改项目编译版本\",{\"0\":{\"2269\":1}}],[\"修改项目文件\",{\"1\":{\"760\":1}}],[\"修改使用的maven\",{\"0\":{\"2266\":1}}],[\"修改条件\",{\"1\":{\"2245\":1,\"2246\":1,\"2250\":1}}],[\"修改值\",{\"1\":{\"2245\":1,\"2246\":1,\"2250\":1}}],[\"修改实体类\",{\"0\":{\"2234\":1}}],[\"修改用户\",{\"0\":{\"2211\":1}}],[\"修改用户密码\",{\"0\":{\"1120\":1}}],[\"修改包扫面路径\",{\"0\":{\"2188\":1}}],[\"修改链接文件\",{\"0\":{\"2187\":1}}],[\"修改tomcat监听端口\",{\"0\":{\"1756\":1}}],[\"修改conf目录中的logging\",{\"1\":{\"1755\":1}}],[\"修改class属性\",{\"0\":{\"1497\":1}}],[\"修改双向绑定为\",{\"1\":{\"1675\":1}}],[\"修改标签内容\",{\"1\":{\"1570\":1}}],[\"修改样式\",{\"1\":{\"1568\":1}}],[\"修改demo\",{\"0\":{\"2784\":1}}],[\"修改d1的css样式\",{\"1\":{\"1568\":1}}],[\"修改date原型\",{\"1\":{\"1417\":1}}],[\"修改xhtml文档内容与结构的标准方法\",{\"1\":{\"1447\":1}}],[\"修改浏览器的属性的方法\",{\"1\":{\"1446\":1}}],[\"修改连接池\",{\"0\":{\"1280\":1}}],[\"修改basedao\",{\"0\":{\"1275\":1}}],[\"修改日记模板的位置\",{\"1\":{\"1165\":1}}],[\"修改了数据库的默认字符集和校对规则后\",{\"1\":{\"1156\":1}}],[\"修改root账户的密码为\",{\"1\":{\"1155\":1}}],[\"修改maven的pom\",{\"0\":{\"2267\":1}}],[\"修改main\",{\"1\":{\"115\":1}}],[\"修改my\",{\"1\":{\"1155\":2}}],[\"修改完毕后\",{\"1\":{\"1154\":1}}],[\"修改完立即commit和push\",{\"1\":{\"753\":1}}],[\"修改内容\",{\"1\":{\"1499\":1,\"1500\":1,\"1501\":1}}],[\"修改内容2\",{\"1\":{\"1154\":1}}],[\"修改内容1\",{\"1\":{\"1154\":1}}],[\"修改普通用户密码\",{\"0\":{\"1122\":1}}],[\"修改管理员密码\",{\"0\":{\"1121\":1}}],[\"修改列的名字\",{\"0\":{\"960\":1}}],[\"修改表的默认字符集\",{\"1\":{\"1156\":1}}],[\"修改表的字段类型和约束\",{\"0\":{\"959\":1}}],[\"修改表中数据\",{\"1\":{\"973\":1}}],[\"修改表名\",{\"0\":{\"962\":1}}],[\"修改表\",{\"0\":{\"957\":1}}],[\"修改数据库的字符集和校对规则\",{\"1\":{\"1156\":1}}],[\"修改数据库的字符集\",{\"0\":{\"950\":1}}],[\"修改数据库对象\",{\"1\":{\"934\":1}}],[\"修改数据\",{\"0\":{\"973\":1},\"1\":{\"933\":1}}],[\"修改和删除操作\",{\"1\":{\"934\":1}}],[\"修改和删除的操作\",{\"1\":{\"933\":1}}],[\"修改和优化源代码的权利\",{\"1\":{\"920\":1}}],[\"修改这个文件可以达到更新配置的目的\",{\"1\":{\"923\":1}}],[\"修改等操作\",{\"1\":{\"920\":1}}],[\"修改后\",{\"1\":{\"895\":2}}],[\"修改时间\",{\"1\":{\"895\":1}}],[\"修改前\",{\"1\":{\"895\":1}}],[\"修改文件\",{\"1\":{\"763\":1}}],[\"修改文本\",{\"0\":{\"128\":1}}],[\"修改之前不更新最新代码\",{\"1\":{\"753\":1}}],[\"修改原有head指针指向的节点地址为自己\",{\"1\":{\"342\":1}}],[\"修改为线程安全的\",{\"0\":{\"306\":1}}],[\"修改指定下标的值\",{\"1\":{\"251\":1}}],[\"修改\",{\"0\":{\"895\":1,\"1221\":1,\"2364\":1,\"2414\":1},\"1\":{\"219\":1,\"251\":2,\"260\":1,\"292\":1,\"395\":2,\"973\":1,\"981\":1,\"1262\":1,\"1493\":1,\"2066\":1,\"2072\":1,\"2073\":1,\"2080\":1,\"2085\":1,\"2667\":1,\"2674\":1}}],[\"修改属性\",{\"0\":{\"129\":1},\"1\":{\"1567\":1}}],[\"修改npm镜像\",{\"0\":{\"93\":1}}],[\"最近最少使用\",{\"1\":{\"2481\":1}}],[\"最近的文件和位置\",{\"0\":{\"645\":1}}],[\"最低优先级的则是\",{\"1\":{\"2333\":1}}],[\"最长路径\",{\"1\":{\"1843\":1}}],[\"最早由sun公司定制并发布\",{\"1\":{\"1732\":1}}],[\"最早在1996年在网页中使用\",{\"1\":{\"163\":1}}],[\"最外层必须有默认暴露\",{\"1\":{\"1704\":1}}],[\"最强大的功能之一\",{\"1\":{\"1703\":1}}],[\"最新的是v15\",{\"1\":{\"1680\":1}}],[\"最新版\",{\"1\":{\"85\":1}}],[\"最左原则\",{\"1\":{\"1135\":1}}],[\"最高的隔离级别\",{\"1\":{\"1112\":1}}],[\"最大不活动时间\",{\"1\":{\"1898\":1,\"1899\":1}}],[\"最大并发数\",{\"1\":{\"1757\":1}}],[\"最大并发数与硬件性能和cpu数量都有很大关系的\",{\"1\":{\"1757\":1}}],[\"最大的区别在于\",{\"1\":{\"1601\":1}}],[\"最大安全整数\",{\"1\":{\"1408\":1}}],[\"最大\",{\"1\":{\"1041\":1}}],[\"最大值\",{\"1\":{\"880\":2,\"1347\":1,\"1408\":1}}],[\"最大取值integer\",{\"1\":{\"364\":1}}],[\"最常见的一种用法\",{\"1\":{\"828\":1}}],[\"最短路径者优先和先声明者优先\",{\"1\":{\"652\":1}}],[\"最典型的例子是\",{\"1\":{\"651\":1}}],[\"最小安全整数\",{\"1\":{\"1408\":1}}],[\"最小\",{\"1\":{\"1041\":1}}],[\"最小值\",{\"1\":{\"880\":2,\"1347\":1,\"1408\":1}}],[\"最小取值\",{\"1\":{\"364\":1}}],[\"最小的\",{\"1\":{\"294\":1}}],[\"最终的实现是在rendermergedoutputmodel中完成实现的\",{\"1\":{\"2868\":1}}],[\"最终的sql会合并\",{\"1\":{\"2250\":1}}],[\"最终进行自动化测试\",{\"1\":{\"1942\":1}}],[\"最终返回给浏览器\",{\"1\":{\"1938\":1}}],[\"最终获取服务器端的数据\",{\"1\":{\"1717\":1}}],[\"最终版本\",{\"1\":{\"1542\":1}}],[\"最终提交事务\",{\"1\":{\"1234\":1}}],[\"最终用户\",{\"0\":{\"913\":1},\"1\":{\"913\":1}}],[\"最终形成了blockingqueue\",{\"1\":{\"322\":1}}],[\"最终实现双向链表\",{\"1\":{\"261\":1}}],[\"最后对\",{\"1\":{\"2774\":1}}],[\"最后读取作为方法参数传递的属性\",{\"1\":{\"2333\":1}}],[\"最后\",{\"1\":{\"2101\":1}}],[\"最后到达资源\",{\"1\":{\"1998\":1,\"2001\":1}}],[\"最后filter再对服务器响应进行后处理\",{\"1\":{\"1994\":1}}],[\"最后把结果输出\",{\"1\":{\"1987\":1}}],[\"最后把项目部署到服务器上\",{\"1\":{\"1937\":1}}],[\"最后一次访问时间\",{\"1\":{\"1898\":1}}],[\"最后一个子节点\",{\"1\":{\"1485\":1}}],[\"最后一个对象后面用\",{\"1\":{\"561\":1}}],[\"最后才是执行sql语句\",{\"1\":{\"1250\":1}}],[\"最后根据每个request上的id号组合成正常的请求\",{\"1\":{\"167\":1}}],[\"最后会生成package\",{\"1\":{\"92\":1}}],[\"管理一组\",{\"1\":{\"1256\":1}}],[\"管理各种不同的jdbc驱动\",{\"1\":{\"1206\":1}}],[\"管理我们的代办事项\",{\"1\":{\"1191\":1}}],[\"管理维护和操作比较复杂而且价格昂贵\",{\"1\":{\"919\":1}}],[\"管理前端工程\",{\"1\":{\"90\":1}}],[\"管理员启动\",{\"1\":{\"48\":1}}],[\"服务设计模式\",{\"1\":{\"2823\":1}}],[\"服务的数量\",{\"1\":{\"2823\":1}}],[\"服务\",{\"1\":{\"2823\":1}}],[\"服务名称\",{\"1\":{\"922\":1}}],[\"服务器调用对应的单元方法处理ajax请求\",{\"1\":{\"2874\":1}}],[\"服务器抛出异常\",{\"1\":{\"2815\":1}}],[\"服务器数据改变判断的依据是last\",{\"1\":{\"2149\":1}}],[\"服务器对请求进行响应\",{\"1\":{\"2101\":1}}],[\"服务器自动调用监听器对象中的方法\",{\"1\":{\"2066\":1}}],[\"服务器将创建filter\",{\"1\":{\"2003\":1}}],[\"服务器上运行\",{\"1\":{\"1983\":1}}],[\"服务器根据jsessionid获取对应的httpsession对象\",{\"1\":{\"1894\":1}}],[\"服务器可以响应给浏览器一些cookie信息\",{\"1\":{\"1884\":1}}],[\"服务器可以根据请求头部给出的客户端信息\",{\"1\":{\"177\":1}}],[\"服务器端的servlet返回一个状态码为302的响应结果\",{\"1\":{\"1863\":1}}],[\"服务器端连接模块连接并验证\",{\"1\":{\"1250\":1}}],[\"服务器会创建httpsession\",{\"1\":{\"1894\":1}}],[\"服务器会为每一个web应用创建一个servletcontext对象\",{\"1\":{\"1828\":1}}],[\"服务器会定时去扫描这个文件\",{\"1\":{\"1750\":1}}],[\"服务器通过mime告知响应内容类型\",{\"1\":{\"1805\":1}}],[\"服务器通过这个server告诉浏览器服务器的类型\",{\"1\":{\"201\":1}}],[\"服务器的核心配置文件\",{\"1\":{\"1752\":1}}],[\"服务器的ip+端口号\",{\"1\":{\"1462\":1}}],[\"服务器单点故障\",{\"1\":{\"723\":1}}],[\"服务器线程类\",{\"1\":{\"513\":1}}],[\"服务器消息\",{\"1\":{\"513\":3}}],[\"服务器验证失败\",{\"1\":{\"511\":1,\"512\":1}}],[\"服务器验证成功\",{\"1\":{\"511\":1,\"512\":1}}],[\"服务器收到\",{\"1\":{\"511\":1,\"512\":1}}],[\"服务器\",{\"1\":{\"509\":1,\"510\":2,\"511\":1,\"512\":1,\"513\":1,\"515\":1,\"516\":1,\"517\":1}}],[\"服务器断开链接\",{\"1\":{\"498\":1}}],[\"服务器响应客户端断开请求\",{\"1\":{\"498\":1}}],[\"服务器响应客户端的请求\",{\"1\":{\"497\":1}}],[\"服务器中\",{\"1\":{\"355\":1}}],[\"服务器表明自己是从哪个网页url获得点击当前请求中的网址\",{\"1\":{\"177\":1}}],[\"服务器把response发送回给浏览器\",{\"1\":{\"173\":1}}],[\"服务器不跟踪每个客户端也不记录过去的请求\",{\"1\":{\"163\":1}}],[\"服务器处理完成后立即断开tcp连接\",{\"1\":{\"163\":1}}],[\"服务器模式\",{\"0\":{\"156\":1}}],[\"服务器关闭才关闭\",{\"1\":{\"132\":1}}],[\"服务器启动成功后\",{\"1\":{\"88\":1}}],[\"服务端会根据此编码将响应内容的字符转换为字节\",{\"1\":{\"1806\":2}}],[\"服务端出现异常\",{\"1\":{\"192\":1}}],[\"服务端是否支持https加密协议\",{\"1\":{\"177\":1}}],[\"服务端可以在客户端某个请求后\",{\"1\":{\"169\":1}}],[\"服务端推送\",{\"0\":{\"169\":1}}],[\"服务端永远是被动的等待客户端的请求\",{\"1\":{\"160\":1}}],[\"服务端程序\",{\"0\":{\"88\":1}}],[\"服务端渲染等多种设备场景\",{\"1\":{\"61\":1}}],[\"终结方法\",{\"1\":{\"861\":1}}],[\"终结\",{\"1\":{\"861\":2}}],[\"终端打印如下信息\",{\"1\":{\"88\":1}}],[\"终止当前的虚拟机执行\",{\"1\":{\"24\":1,\"26\":1}}],[\"w容器\",{\"0\":{\"3012\":1}}],[\"wbe\",{\"1\":{\"2761\":1}}],[\"wrapper的常用api\",{\"0\":{\"2238\":1}}],[\"wrapper接口是条件构造的抽象类\",{\"1\":{\"2237\":1}}],[\"wrapper接口\",{\"0\":{\"2237\":1}}],[\"wrapper\",{\"1\":{\"2214\":1,\"2259\":3,\"2260\":8,\"2289\":3}}],[\"writing\",{\"1\":{\"922\":1}}],[\"writer\",{\"1\":{\"1790\":2,\"1856\":2,\"1860\":2,\"1927\":2}}],[\"writeobject\",{\"1\":{\"428\":1,\"511\":1,\"512\":1,\"513\":1}}],[\"writeboolean\",{\"1\":{\"425\":1,\"511\":1,\"512\":1,\"513\":1}}],[\"writeint\",{\"1\":{\"425\":1}}],[\"writeutf\",{\"1\":{\"425\":1,\"509\":1,\"510\":2}}],[\"write容器\",{\"1\":{\"313\":1}}],[\"write\",{\"1\":{\"114\":1,\"407\":3,\"408\":3,\"409\":3,\"412\":2,\"415\":1,\"418\":1,\"421\":1,\"422\":1,\"1541\":1,\"1790\":1,\"1794\":1,\"1808\":1,\"1893\":1,\"2179\":1}}],[\"writehead\",{\"1\":{\"88\":1}}],[\"wd\",{\"1\":{\"1331\":1}}],[\"wsdl\",{\"1\":{\"2823\":1}}],[\"ws\",{\"1\":{\"1086\":1}}],[\"when>\",{\"1\":{\"2023\":4,\"2025\":7,\"2031\":7,\"2449\":2,\"2450\":8}}],[\"when\",{\"1\":{\"1094\":4,\"2023\":4,\"2025\":7,\"2031\":7}}],[\"where>\",{\"1\":{\"2446\":1,\"2447\":1,\"2450\":1,\"2453\":1,\"2456\":1}}],[\"where标签\",{\"0\":{\"2445\":1}}],[\"where和order\",{\"1\":{\"1148\":1}}],[\"where中使用默认值代替null\",{\"1\":{\"1148\":1}}],[\"where型\",{\"0\":{\"1071\":1},\"1\":{\"1069\":1}}],[\"where后面不可以使用聚合函数\",{\"1\":{\"1042\":1}}],[\"where\",{\"1\":{\"928\":1,\"956\":2,\"973\":7,\"975\":1,\"982\":1,\"1001\":5,\"1029\":1,\"1033\":1,\"1034\":2,\"1035\":1,\"1036\":1,\"1037\":2,\"1039\":1,\"1040\":1,\"1041\":1,\"1042\":2,\"1056\":1,\"1057\":1,\"1061\":1,\"1064\":1,\"1068\":1,\"1071\":2,\"1073\":2,\"1080\":1,\"1082\":2,\"1147\":3,\"1155\":2,\"1220\":1,\"1221\":1,\"1234\":1,\"1242\":1,\"1246\":2,\"1249\":2,\"1252\":1,\"1253\":3,\"1264\":1,\"1267\":2,\"1682\":1,\"2176\":1,\"2234\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":5,\"2245\":1,\"2246\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2250\":1,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":1,\"2257\":1,\"2258\":3,\"2287\":1,\"2344\":1,\"2354\":1,\"2356\":1,\"2358\":1,\"2365\":1,\"2368\":1,\"2385\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2394\":1,\"2398\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2406\":1,\"2407\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2423\":1,\"2425\":1,\"2426\":1,\"2428\":1,\"2429\":1,\"2431\":1,\"2435\":2,\"2444\":3,\"2447\":1,\"2450\":2,\"2453\":1,\"2454\":1,\"2456\":1,\"2459\":2,\"2466\":2,\"2467\":2,\"2503\":2,\"2672\":1,\"2673\":1,\"2674\":2,\"2679\":1,\"2680\":1,\"2697\":1,\"2918\":1}}],[\"white\",{\"1\":{\"1695\":2}}],[\"whitelistv4\",{\"1\":{\"845\":2}}],[\"while\",{\"0\":{\"1367\":2},\"1\":{\"220\":1,\"251\":1,\"260\":1,\"265\":1,\"266\":2,\"288\":1,\"292\":3,\"294\":2,\"305\":1,\"306\":1,\"348\":3,\"349\":3,\"356\":1,\"405\":3,\"409\":3,\"412\":2,\"415\":1,\"418\":1,\"421\":1,\"422\":2,\"459\":1,\"513\":1,\"518\":2,\"1222\":1,\"1227\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1266\":1,\"1275\":1,\"1367\":2,\"1458\":1,\"1459\":1,\"1800\":1,\"1801\":1,\"1831\":1,\"1976\":1,\"2049\":1,\"2052\":1}}],[\"w3school在线文档中有转译符号对应规则\",{\"1\":{\"2356\":1,\"2358\":1}}],[\"w3school\",{\"1\":{\"1344\":1}}],[\"w3\",{\"1\":{\"545\":1,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2267\":1,\"2485\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2746\":1,\"2748\":1,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2885\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"w3c\",{\"1\":{\"162\":1}}],[\"wallet\",{\"1\":{\"2695\":2,\"2697\":3}}],[\"was\",{\"1\":{\"2493\":1}}],[\"wap\",{\"1\":{\"2037\":1}}],[\"wangwuatguigu\",{\"1\":{\"760\":6}}],[\"wangwu\",{\"1\":{\"759\":2,\"2124\":1,\"2559\":1}}],[\"wangwu是另一个团队的人\",{\"1\":{\"759\":1}}],[\"war包的形式发布应用\",{\"1\":{\"1744\":1}}],[\"warn生效机制\",{\"1\":{\"1701\":1}}],[\"warning\",{\"1\":{\"1564\":1}}],[\"warn\",{\"1\":{\"1287\":1,\"1288\":1,\"1701\":2,\"2487\":1}}],[\"ward\",{\"1\":{\"1211\":1}}],[\"war\",{\"1\":{\"714\":1,\"715\":1,\"772\":1,\"1768\":1,\"1777\":1,\"1869\":1,\"1870\":3,\"1878\":1,\"2169\":2,\"2170\":2,\"2171\":2}}],[\"wait\",{\"1\":{\"489\":2,\"490\":2}}],[\"wav\",{\"1\":{\"208\":1}}],[\"w\",{\"1\":{\"374\":2,\"848\":1,\"1093\":2,\"1584\":4,\"1585\":2,\"1586\":1,\"1609\":4,\"2030\":2}}],[\"weaver就是织入器\",{\"1\":{\"2627\":1}}],[\"weaving\",{\"0\":{\"2626\":1}}],[\"weak\",{\"1\":{\"2481\":1}}],[\"welcome\",{\"1\":{\"1795\":2,\"1904\":1,\"2060\":1,\"2062\":1}}],[\"wells\",{\"1\":{\"1558\":1}}],[\"we\",{\"1\":{\"1683\":1}}],[\"weight\",{\"1\":{\"576\":4}}],[\"wechat\",{\"1\":{\"568\":6}}],[\"weekday\",{\"1\":{\"1093\":1}}],[\"weekofyear\",{\"1\":{\"1093\":1}}],[\"week\",{\"1\":{\"375\":1,\"376\":1,\"1093\":1,\"1349\":2}}],[\"wednesday\",{\"1\":{\"375\":2}}],[\"wed\",{\"1\":{\"371\":2}}],[\"web项目的开发与部署\",{\"0\":{\"3125\":1}}],[\"webmvc\",{\"1\":{\"2756\":1}}],[\"webmvc<\",{\"1\":{\"700\":1,\"2892\":1}}],[\"webapp\",{\"1\":{\"2744\":1}}],[\"webapps目录用来存放应用程序\",{\"1\":{\"1744\":1}}],[\"webapps\",{\"1\":{\"1744\":1,\"1767\":1,\"1876\":1}}],[\"web<\",{\"1\":{\"2186\":1,\"2756\":2,\"2892\":1}}],[\"weblistener注解就可以注册监听所有的session对象\",{\"1\":{\"2081\":1}}],[\"weblistener注解都可以\",{\"1\":{\"2075\":1}}],[\"weblistener\",{\"1\":{\"2079\":1,\"2080\":1,\"2087\":1,\"2088\":1}}],[\"weblogic\",{\"1\":{\"1735\":1}}],[\"webfilter\",{\"1\":{\"2050\":1,\"2052\":2,\"2063\":1}}],[\"web服务器会创建一个代表filter链的filterchain对象传递给该方法\",{\"1\":{\"2046\":1}}],[\"web服务器根据filter在web\",{\"1\":{\"2046\":1}}],[\"web服务器每次在调用web资源的service方法之前\",{\"1\":{\"1995\":1}}],[\"web开发人员一个标准通用的标签库\",{\"1\":{\"2011\":1}}],[\"web开发人员通过filter技术\",{\"1\":{\"1994\":1}}],[\"webinitparam\",{\"1\":{\"1849\":1,\"2052\":2}}],[\"web应用程序描述文件\",{\"1\":{\"1751\":1}}],[\"web容器关闭是\",{\"1\":{\"2006\":1}}],[\"web容器或应用服务器实现了servlet标准所以servlet需运行在web容器或应用服务器中\",{\"1\":{\"1782\":1}}],[\"web容器是开源免费的\",{\"1\":{\"1736\":1}}],[\"web容器\",{\"0\":{\"1736\":1}}],[\"webspring\",{\"1\":{\"2756\":1}}],[\"webshpere\",{\"1\":{\"1735\":1}}],[\"webservlet注解中属性\",{\"0\":{\"1849\":1}}],[\"webservlet将一个继承于javax\",{\"1\":{\"1848\":1}}],[\"webservlet\",{\"1\":{\"546\":1,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":1,\"2056\":1,\"2062\":1,\"2075\":1,\"2088\":1,\"2095\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2749\":1}}],[\"web工程对应war包\",{\"1\":{\"666\":1}}],[\"web工程中除了java程序和jsp页面\",{\"1\":{\"660\":1}}],[\"web工程和其编译结果的目录结构对比见下图\",{\"1\":{\"659\":1}}],[\"web工程\",{\"0\":{\"659\":1}}],[\"web\",{\"0\":{\"1736\":1,\"1751\":1,\"2531\":1,\"2884\":1},\"1\":{\"154\":1,\"545\":2,\"1292\":1,\"1329\":1,\"1557\":1,\"1559\":1,\"1749\":1,\"1751\":1,\"1772\":1,\"1775\":2,\"1791\":2,\"1795\":2,\"1831\":2,\"1834\":2,\"1856\":1,\"1860\":1,\"1864\":1,\"1910\":1,\"1934\":1,\"1999\":2,\"2003\":2,\"2006\":1,\"2047\":2,\"2058\":2,\"2075\":2,\"2185\":1,\"2531\":8,\"2740\":2,\"2746\":2,\"2759\":3,\"2763\":1,\"2765\":1,\"2779\":5,\"2780\":1,\"2789\":1,\"2807\":2,\"2823\":4,\"2829\":1,\"2830\":1,\"2898\":1,\"2901\":1,\"2910\":1,\"2911\":1,\"2912\":1}}],[\"webday09\",{\"1\":{\"138\":1}}],[\"webday07\",{\"1\":{\"135\":1}}],[\"webpack\",{\"0\":{\"111\":1},\"1\":{\"94\":1,\"111\":2,\"112\":3,\"114\":4,\"115\":1,\"1683\":1}}],[\"ww1\",{\"1\":{\"356\":1}}],[\"www\",{\"1\":{\"154\":1,\"162\":1,\"503\":1,\"545\":1,\"607\":1,\"680\":1,\"683\":2,\"714\":2,\"715\":2,\"772\":1,\"1176\":2,\"1189\":1,\"1293\":2,\"1312\":3,\"1327\":1,\"1331\":2,\"1344\":1,\"1439\":1,\"1460\":1,\"1462\":1,\"1549\":6,\"1561\":1,\"1579\":1,\"1586\":1,\"1609\":1,\"1660\":1,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1856\":1,\"1860\":1,\"1864\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2146\":1,\"2153\":1,\"2155\":3,\"2267\":1,\"2485\":1,\"2542\":4,\"2546\":4,\"2553\":4,\"2554\":4,\"2555\":4,\"2559\":6,\"2566\":6,\"2567\":9,\"2584\":7,\"2588\":28,\"2590\":7,\"2591\":7,\"2592\":7,\"2594\":7,\"2599\":7,\"2630\":10,\"2648\":10,\"2666\":19,\"2746\":1,\"2748\":1,\"2758\":22,\"2759\":1,\"2779\":22,\"2780\":25,\"2789\":25,\"2885\":1,\"2898\":25,\"2899\":25,\"2903\":25,\"2904\":25}}],[\"work目录用来存放tomcat在运行时的编译后文件\",{\"1\":{\"1744\":1}}],[\"worker\",{\"1\":{\"887\":4}}],[\"working\",{\"1\":{\"728\":1,\"729\":1}}],[\"work\",{\"1\":{\"576\":1,\"591\":7,\"1690\":1,\"1744\":1}}],[\"workspace\",{\"1\":{\"388\":1,\"390\":1}}],[\"words\",{\"1\":{\"1585\":2}}],[\"word2\",{\"1\":{\"1195\":3}}],[\"word1\",{\"1\":{\"1195\":3}}],[\"word\",{\"1\":{\"208\":1,\"1195\":3}}],[\"worstboy\",{\"1\":{\"150\":1}}],[\"worseboy\",{\"1\":{\"150\":1}}],[\"world<\",{\"1\":{\"2750\":1}}],[\"world\",{\"1\":{\"88\":1,\"114\":1,\"154\":1,\"1304\":1,\"2125\":2,\"2126\":4,\"2786\":1}}],[\"without\",{\"1\":{\"1690\":1}}],[\"with1\",{\"1\":{\"900\":2}}],[\"with\",{\"1\":{\"900\":4,\"1683\":1,\"2172\":1}}],[\"withdayofmonth\",{\"1\":{\"900\":1}}],[\"withhour\",{\"1\":{\"895\":1}}],[\"withyear\",{\"1\":{\"895\":1}}],[\"withmonth\",{\"1\":{\"379\":1,\"895\":1}}],[\"win7的话可以安装14版本\",{\"1\":{\"1680\":1}}],[\"window弹窗\",{\"0\":{\"1453\":1}}],[\"window对象方法\",{\"0\":{\"1452\":1}}],[\"window对象属性\",{\"0\":{\"1451\":1}}],[\"window对象\",{\"1\":{\"1450\":1}}],[\"window对象及常用方法\",{\"0\":{\"1449\":1}}],[\"window\",{\"1\":{\"1448\":2,\"1450\":8,\"1451\":3,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":2,\"1459\":2,\"1460\":2,\"1463\":1,\"1464\":2,\"1544\":1,\"2178\":2,\"2214\":1}}],[\"windows命令\",{\"1\":{\"1744\":1}}],[\"windows平台为\",{\"1\":{\"1287\":1}}],[\"windows服务\",{\"1\":{\"922\":1}}],[\"windows\",{\"1\":{\"177\":1,\"208\":2,\"674\":1,\"921\":1,\"922\":5,\"1152\":1}}],[\"win+r\",{\"1\":{\"925\":1}}],[\"winter\",{\"1\":{\"560\":1,\"561\":5,\"563\":1}}],[\"win64\",{\"1\":{\"177\":1}}],[\"wide\",{\"1\":{\"154\":1,\"1609\":3}}],[\"width=\",{\"1\":{\"1300\":2,\"1309\":1,\"1310\":2,\"1319\":1,\"1321\":2,\"1555\":1,\"1793\":1}}],[\"width=device\",{\"1\":{\"76\":1,\"1690\":1}}],[\"width\",{\"1\":{\"65\":1,\"76\":1,\"1300\":1,\"1309\":1,\"1433\":1,\"1464\":1,\"1482\":1,\"1496\":2,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1521\":12,\"1523\":3,\"1524\":3,\"1525\":4,\"1528\":1,\"1529\":2,\"1533\":4,\"1534\":4,\"1535\":6,\"1536\":1,\"1568\":3,\"1570\":1,\"1571\":1,\"1572\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":2,\"1650\":2,\"1690\":1,\"1695\":4,\"1698\":1,\"1927\":1,\"1928\":1,\"1976\":1,\"2025\":1,\"2031\":1,\"2159\":1}}],[\"will\",{\"1\":{\"65\":1,\"1690\":1}}],[\"引用了前面配置的appender\",{\"1\":{\"2487\":1}}],[\"引用的内容\",{\"1\":{\"1172\":1}}],[\"引用\",{\"0\":{\"1172\":1},\"1\":{\"2461\":1}}],[\"引用方法\",{\"1\":{\"856\":1}}],[\"引用类型可以重复放入\",{\"1\":{\"278\":1,\"281\":1}}],[\"引入util声明集合\",{\"0\":{\"2567\":1}}],[\"引入内部的bean\",{\"0\":{\"2563\":1},\"1\":{\"2563\":1}}],[\"引入中间类和中间类的映射文件\",{\"1\":{\"2440\":1}}],[\"引入一个中间表将一个多对多转为两个一对多\",{\"1\":{\"2440\":1}}],[\"引入依赖\",{\"0\":{\"2296\":1,\"2582\":1}}],[\"引入mybatisplus的依赖\",{\"1\":{\"2186\":1}}],[\"引入它不会对现有工程产生影响\",{\"1\":{\"2179\":1}}],[\"引入过滤器\",{\"0\":{\"1993\":1}}],[\"引入其他页面\",{\"1\":{\"1962\":1}}],[\"引入标签库的定义\",{\"1\":{\"1958\":1}}],[\"引入组件\",{\"0\":{\"1708\":1},\"1\":{\"1708\":1,\"1711\":1,\"1712\":1,\"1713\":1,\"1715\":1}}],[\"引入vue\",{\"0\":{\"1616\":1}}],[\"引入css文件\",{\"1\":{\"1563\":1,\"1564\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1}}],[\"引入工程目录\",{\"0\":{\"1562\":1}}],[\"引入jquery文件\",{\"1\":{\"1545\":1}}],[\"引入js文件\",{\"1\":{\"1718\":1,\"1721\":1}}],[\"引入js\",{\"0\":{\"64\":1}}],[\"引入外部资源注入\",{\"0\":{\"2599\":1},\"1\":{\"2599\":1}}],[\"引入外部的bean\",{\"0\":{\"2562\":1}}],[\"引入外部css资源\",{\"1\":{\"1472\":1}}],[\"引入外部js文件\",{\"1\":{\"1380\":1}}],[\"引入外部配置文件\",{\"0\":{\"2580\":1,\"3171\":1},\"1\":{\"216\":1,\"2906\":1}}],[\"引入网络资源\",{\"1\":{\"1309\":1}}],[\"引入本地资源\",{\"1\":{\"1309\":1}}],[\"引入图片的位置\",{\"1\":{\"1309\":1}}],[\"引入链接\",{\"0\":{\"1161\":1}}],[\"引入常量\",{\"0\":{\"632\":1}}],[\"引入形参\",{\"0\":{\"630\":1}}],[\"引入\",{\"0\":{\"321\":1,\"1466\":1}}],[\"引入了红黑树\",{\"1\":{\"295\":1}}],[\"引入了一个新的存储数据的结构\",{\"1\":{\"228\":1}}],[\"引入模块\",{\"1\":{\"103\":1,\"104\":1}}],[\"引擎\",{\"1\":{\"87\":1}}],[\"输出到文件\",{\"1\":{\"2308\":1,\"2374\":1}}],[\"输出到控制台\",{\"1\":{\"2308\":1,\"2374\":1}}],[\"输出分数是否及格\",{\"1\":{\"2022\":1}}],[\"输出流对象\",{\"0\":{\"1970\":1}}],[\"输出流程图\",{\"0\":{\"1185\":1}}],[\"输出一个\",{\"1\":{\"1287\":1}}],[\"输出一个回车换行符\",{\"1\":{\"1287\":1}}],[\"输出和当前线程相关联的ndc\",{\"1\":{\"1287\":1}}],[\"输出代码中指定的具体日志信息\",{\"1\":{\"1287\":1}}],[\"输出代码中的行号\",{\"1\":{\"1287\":1}}],[\"输出产生日志信息的方法名\",{\"1\":{\"1287\":1}}],[\"输出产生该日志事件的线程名\",{\"1\":{\"1287\":1}}],[\"输出自应用程序启动到输出该log信息耗费的毫秒数\",{\"1\":{\"1287\":1}}],[\"输出自定义异常信息\",{\"1\":{\"21\":2}}],[\"输出日志消息产生时所在的文件名称\",{\"1\":{\"1287\":1}}],[\"输出日志信息所属的类目\",{\"1\":{\"1287\":1}}],[\"输出日志信息的优先级\",{\"1\":{\"1287\":1}}],[\"输出日志事件的发生位置\",{\"1\":{\"1287\":1}}],[\"输出日志时间点的日期或时间\",{\"1\":{\"1287\":1}}],[\"输出公式\",{\"0\":{\"1184\":1}}],[\"输出结果\",{\"1\":{\"876\":1,\"2595\":1,\"2596\":1,\"2597\":1,\"2598\":1,\"2599\":1}}],[\"输出对象\",{\"1\":{\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1}}],[\"输出96\",{\"1\":{\"408\":1}}],[\"输出顺序与录入顺序一致\",{\"1\":{\"297\":1}}],[\"输出指针指向的值并移动指针\",{\"1\":{\"269\":1}}],[\"输出\",{\"1\":{\"132\":1,\"133\":1,\"134\":1,\"510\":1,\"885\":1,\"887\":1,\"888\":1,\"889\":1}}],[\"输出文件\",{\"1\":{\"114\":1}}],[\"输出路径\",{\"1\":{\"114\":1}}],[\"输入地址\",{\"1\":{\"2753\":1}}],[\"输入完毕后向后台servlet提交用户名和密码\",{\"1\":{\"1792\":1}}],[\"输入\",{\"1\":{\"87\":1}}],[\"进阶\",{\"0\":{\"2949\":1}}],[\"进阶查询\",{\"0\":{\"1202\":1}}],[\"进一步封装\",{\"1\":{\"2214\":1}}],[\"进而进行数学加法运算\",{\"1\":{\"1987\":1}}],[\"进而操作元素\",{\"1\":{\"1480\":1}}],[\"进而对程序进行改进\",{\"1\":{\"1282\":1}}],[\"进入项目目录\",{\"1\":{\"1684\":1}}],[\"进入产品配置环节\",{\"1\":{\"922\":1}}],[\"进入产品配置向导\",{\"1\":{\"922\":1}}],[\"进入编辑模式\",{\"1\":{\"738\":1}}],[\"进入电脑运行模式\",{\"1\":{\"674\":1}}],[\"进入到程序所在的目录\",{\"1\":{\"87\":1}}],[\"进程可进一步细化为线程\",{\"1\":{\"452\":1}}],[\"进程的生命周期\",{\"1\":{\"452\":1}}],[\"进程是动态的\",{\"1\":{\"452\":1}}],[\"进程作为资源分配的单位\",{\"1\":{\"452\":1}}],[\"进程\",{\"0\":{\"452\":1}}],[\"进行渲染将处理结果通过页面展示给用户\",{\"1\":{\"2774\":1}}],[\"进行手动配置封装\",{\"1\":{\"2419\":1}}],[\"进行手动激活\",{\"1\":{\"610\":1}}],[\"进行页面的组装和渲染\",{\"1\":{\"1938\":1}}],[\"进行配置\",{\"1\":{\"1818\":1}}],[\"进行打包的命令\",{\"1\":{\"1687\":1}}],[\"进行书写\",{\"1\":{\"1617\":1}}],[\"进行拼接\",{\"1\":{\"1470\":1}}],[\"进行下舍入\",{\"1\":{\"1411\":1}}],[\"进行交互\",{\"1\":{\"1330\":1}}],[\"进行回滚\",{\"1\":{\"1233\":1}}],[\"进行创建\",{\"1\":{\"934\":1}}],[\"进行最后阶段的集成测试\",{\"1\":{\"805\":1}}],[\"进行项目变动设置\",{\"1\":{\"676\":1}}],[\"进行激活提醒\",{\"1\":{\"620\":1}}],[\"进行连接查询\",{\"1\":{\"1072\":1}}],[\"进行连接\",{\"1\":{\"561\":1}}],[\"进行扩容\",{\"1\":{\"311\":1}}],[\"进行一些缓存的判断\",{\"1\":{\"202\":1}}],[\"进行转换\",{\"1\":{\"115\":1}}],[\"进行捕获\",{\"1\":{\"20\":1}}],[\"+objects\",{\"1\":{\"2651\":1}}],[\"+objectobjectentry\",{\"1\":{\"2351\":1}}],[\"+unametext\",{\"1\":{\"2114\":1}}],[\"+uname\",{\"1\":{\"2112\":1}}],[\"+userid\",{\"1\":{\"2830\":4}}],[\"+userinfo\",{\"1\":{\"511\":1,\"512\":1,\"513\":2}}],[\"+username+\",{\"1\":{\"1242\":1,\"2793\":1,\"2794\":1}}],[\"+username3\",{\"1\":{\"850\":1}}],[\"+username2\",{\"1\":{\"850\":1}}],[\"+username1\",{\"1\":{\"850\":1}}],[\"+user\",{\"1\":{\"356\":2}}],[\"+value+\",{\"1\":{\"2077\":1}}],[\"+value\",{\"1\":{\"2077\":2}}],[\"+文件名\",{\"1\":{\"1807\":1}}],[\"+文字内容\",{\"1\":{\"1183\":1}}],[\"+g+\",{\"1\":{\"1698\":1}}],[\"+$\",{\"1\":{\"1584\":1,\"2131\":1,\"2169\":1}}],[\"+号中\",{\"1\":{\"1362\":1}}],[\"+ename+\",{\"1\":{\"2459\":1}}],[\"+enter\",{\"1\":{\"671\":1}}],[\"+e\",{\"1\":{\"1286\":1,\"2176\":2}}],[\"+path+\",{\"1\":{\"2857\":1}}],[\"+password\",{\"1\":{\"1831\":1,\"2793\":1}}],[\"+pwd\",{\"1\":{\"2794\":1}}],[\"+pwd+\",{\"1\":{\"1242\":1}}],[\"+person\",{\"1\":{\"2605\":1}}],[\"+prop\",{\"1\":{\"1286\":1}}],[\"+poll\",{\"1\":{\"349\":3}}],[\"+loc+\",{\"1\":{\"1222\":1,\"1253\":1}}],[\"+localdatetime\",{\"1\":{\"895\":1}}],[\"+document\",{\"1\":{\"1730\":4}}],[\"+driver\",{\"1\":{\"1288\":1}}],[\"+dname+\",{\"1\":{\"1222\":1,\"1253\":1}}],[\"+deptno+\",{\"1\":{\"1222\":1,\"1253\":1}}],[\"+department+\",{\"1\":{\"1219\":1,\"1221\":1}}],[\"+date2\",{\"1\":{\"893\":6}}],[\"+^+数字+\",{\"1\":{\"1183\":1}}],[\"+空格\",{\"1\":{\"1171\":3}}],[\"+=\",{\"1\":{\"888\":1,\"1367\":2}}],[\"+beanname+\",{\"1\":{\"2574\":2}}],[\"+b+\",{\"1\":{\"1698\":1}}],[\"+b\",{\"1\":{\"644\":1}}],[\"+info+\",{\"1\":{\"2170\":1,\"2171\":1}}],[\"+integercount+\",{\"1\":{\"1893\":1}}],[\"+i1\",{\"1\":{\"1264\":1}}],[\"+id+\",{\"1\":{\"1219\":1,\"1220\":1,\"1221\":1}}],[\"+i\",{\"1\":{\"438\":2,\"440\":2,\"441\":2,\"445\":1,\"457\":2,\"458\":2,\"460\":2,\"461\":1,\"1215\":1,\"1220\":1,\"1221\":1,\"1253\":2,\"1264\":1}}],[\"+2\",{\"1\":{\"392\":1}}],[\"+2000\",{\"1\":{\"356\":1}}],[\"+foodname\",{\"1\":{\"2609\":2,\"2612\":1}}],[\"+filterconfig\",{\"1\":{\"2049\":1,\"2052\":1}}],[\"+file3\",{\"1\":{\"387\":2}}],[\"+file2\",{\"1\":{\"386\":9,\"387\":12,\"389\":12}}],[\"+file\",{\"1\":{\"384\":1,\"385\":1,\"386\":3,\"387\":4,\"388\":1,\"390\":6}}],[\"+f2结束调试\",{\"1\":{\"671\":1}}],[\"+f\",{\"1\":{\"390\":12}}],[\"+floor\",{\"1\":{\"368\":1}}],[\"+mybatis\",{\"1\":{\"2526\":1}}],[\"+money+\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"+money\",{\"1\":{\"1856\":2,\"1860\":2,\"1864\":3}}],[\"+msg2\",{\"1\":{\"840\":1}}],[\"+msg1\",{\"1\":{\"840\":1}}],[\"+msg\",{\"1\":{\"839\":1}}],[\"+minorversion\",{\"1\":{\"1831\":1}}],[\"+min\",{\"1\":{\"368\":1}}],[\"+max\",{\"1\":{\"368\":1}}],[\"+math\",{\"1\":{\"367\":7,\"382\":1}}],[\"+contextpath\",{\"1\":{\"1831\":1}}],[\"+connection\",{\"1\":{\"1274\":6,\"1280\":6,\"1288\":7}}],[\"+collect2\",{\"1\":{\"880\":1}}],[\"+collect1\",{\"1\":{\"880\":1}}],[\"+collect\",{\"1\":{\"880\":1}}],[\"+collection\",{\"1\":{\"219\":3}}],[\"+count+\",{\"1\":{\"513\":1}}],[\"+ceil\",{\"1\":{\"368\":1}}],[\"+arrays\",{\"1\":{\"1801\":1}}],[\"+arraylist\",{\"1\":{\"219\":1}}],[\"+address+\",{\"1\":{\"1219\":1,\"1221\":1}}],[\"+a\",{\"1\":{\"671\":1}}],[\"+accept\",{\"1\":{\"513\":1}}],[\"+abs\",{\"1\":{\"368\":1}}],[\"+realname\",{\"1\":{\"2049\":1,\"2052\":1}}],[\"+reqquestdate\",{\"1\":{\"2087\":1}}],[\"+requesturl+\",{\"1\":{\"2087\":1}}],[\"+req\",{\"1\":{\"1799\":2,\"1800\":1,\"1801\":1}}],[\"+remove\",{\"1\":{\"219\":1}}],[\"+r+\",{\"1\":{\"1698\":1}}],[\"+rows\",{\"1\":{\"1217\":1,\"1219\":1,\"1253\":1}}],[\"+round\",{\"1\":{\"368\":1}}],[\"+r\",{\"1\":{\"674\":1}}],[\"+random\",{\"1\":{\"368\":1}}],[\"+targetmethodexception\",{\"1\":{\"2653\":1}}],[\"+targetmethodreturn\",{\"1\":{\"2652\":1}}],[\"+take\",{\"1\":{\"356\":2}}],[\"+time2\",{\"1\":{\"893\":4}}],[\"+this\",{\"1\":{\"489\":4,\"490\":4,\"1730\":2}}],[\"+thread\",{\"1\":{\"348\":3,\"349\":3,\"465\":1,\"471\":1,\"480\":1}}],[\"+10000\",{\"1\":{\"356\":1}}],[\"+5000\",{\"1\":{\"356\":1}}],[\"+scookie\",{\"1\":{\"2857\":1}}],[\"+slanguage+\",{\"1\":{\"2857\":1}}],[\"+session\",{\"1\":{\"1898\":3}}],[\"+servletrequest\",{\"1\":{\"2076\":2,\"2077\":3}}],[\"+servletcontext\",{\"1\":{\"1831\":1}}],[\"+serverinfo\",{\"1\":{\"1831\":1}}],[\"+s\",{\"1\":{\"885\":1,\"887\":1}}],[\"+strust\",{\"1\":{\"2526\":1}}],[\"+student1\",{\"1\":{\"880\":1}}],[\"+student\",{\"1\":{\"880\":1}}],[\"+stackstr\",{\"1\":{\"303\":3}}],[\"+sum\",{\"1\":{\"835\":1}}],[\"+shift\",{\"1\":{\"671\":3}}],[\"+s1\",{\"1\":{\"431\":1}}],[\"+s2\",{\"1\":{\"431\":3}}],[\"+synchronousqueue3\",{\"1\":{\"348\":2}}],[\"+synchronousqueue1\",{\"1\":{\"348\":1}}],[\"+j\",{\"1\":{\"309\":3}}],[\"++count\",{\"1\":{\"2088\":1}}],[\"++\",{\"1\":{\"1360\":1}}],[\"++takeindex\",{\"1\":{\"328\":2}}],[\"++putindex\",{\"1\":{\"328\":2}}],[\"++size\",{\"1\":{\"279\":1}}],[\"++modcount\",{\"1\":{\"279\":1}}],[\"++bincount\",{\"1\":{\"279\":1}}],[\"+\",{\"0\":{\"1362\":1},\"1\":{\"87\":2,\"88\":1,\"102\":1,\"114\":2,\"219\":1,\"251\":2,\"260\":2,\"262\":7,\"274\":8,\"275\":8,\"278\":6,\"281\":6,\"287\":18,\"292\":9,\"294\":2,\"302\":2,\"309\":3,\"316\":2,\"348\":3,\"349\":3,\"352\":6,\"356\":11,\"363\":1,\"364\":2,\"390\":1,\"392\":1,\"395\":1,\"396\":1,\"405\":6,\"408\":2,\"409\":4,\"412\":8,\"415\":4,\"418\":4,\"421\":4,\"422\":4,\"425\":2,\"428\":11,\"431\":1,\"440\":2,\"441\":2,\"442\":2,\"445\":1,\"446\":3,\"457\":2,\"458\":2,\"465\":3,\"471\":3,\"480\":3,\"511\":7,\"512\":7,\"513\":9,\"523\":1,\"525\":1,\"560\":7,\"561\":7,\"600\":1,\"603\":1,\"604\":2,\"607\":1,\"608\":2,\"610\":2,\"616\":6,\"617\":4,\"618\":3,\"620\":2,\"621\":2,\"623\":2,\"624\":1,\"626\":1,\"627\":2,\"628\":2,\"630\":5,\"631\":5,\"632\":5,\"635\":5,\"636\":1,\"637\":3,\"638\":5,\"641\":4,\"642\":2,\"643\":3,\"644\":4,\"645\":3,\"646\":3,\"670\":2,\"671\":5,\"873\":2,\"885\":1,\"887\":1,\"888\":1,\"898\":1,\"937\":1,\"1028\":1,\"1172\":2,\"1226\":9,\"1241\":11,\"1264\":9,\"1274\":2,\"1280\":2,\"1288\":3,\"1360\":1,\"1362\":4,\"1370\":4,\"1409\":2,\"1412\":2,\"1417\":7,\"1419\":2,\"1420\":4,\"1421\":6,\"1423\":4,\"1424\":9,\"1425\":9,\"1439\":1,\"1458\":5,\"1459\":5,\"1548\":2,\"1574\":4,\"1584\":4,\"1799\":3,\"1801\":1,\"1892\":2,\"1909\":2,\"1985\":1,\"1987\":7,\"2061\":7,\"2076\":2,\"2077\":3,\"2097\":2,\"2239\":1,\"2286\":6,\"2289\":1,\"2299\":10,\"2351\":1,\"2605\":2,\"2651\":3,\"2697\":1,\"2765\":2,\"2864\":1,\"2870\":1,\"2873\":1}}],[\"+newvalue\",{\"1\":{\"2077\":1}}],[\"+new\",{\"1\":{\"1814\":1}}],[\"+nextmonth\",{\"1\":{\"900\":1}}],[\"+now\",{\"1\":{\"895\":2}}],[\"+nowdatetime\",{\"1\":{\"893\":10}}],[\"+name+\",{\"1\":{\"76\":1,\"1649\":3,\"1651\":3,\"2077\":3,\"2652\":1}}],[\"+num1\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"32\":1}}],[\"打造优秀的前后端团队\",{\"1\":{\"1947\":1}}],[\"打篮球\",{\"1\":{\"1629\":1}}],[\"打印日志的类\",{\"1\":{\"2487\":1}}],[\"打印堆栈跟踪信息\",{\"1\":{\"2301\":1}}],[\"打印九九乘法表\",{\"1\":{\"2025\":1}}],[\"打印对象\",{\"1\":{\"1970\":1}}],[\"打印当前窗口的内容\",{\"1\":{\"1452\":1}}],[\"打印整个student信息\",{\"1\":{\"876\":2}}],[\"打印异常信息\",{\"1\":{\"21\":2}}],[\"打开网络监控\",{\"1\":{\"2787\":1}}],[\"打开网页的基本流程\",{\"0\":{\"173\":1}}],[\"打开我们的first\",{\"1\":{\"2753\":1}}],[\"打开链接\",{\"1\":{\"2112\":1}}],[\"打开百度\",{\"1\":{\"1460\":1}}],[\"打开一个新的浏览器窗口或查找一个已命名的窗口\",{\"1\":{\"1452\":1}}],[\"打开控制命令台\",{\"1\":{\"925\":1}}],[\"打开用户设置\",{\"1\":{\"763\":1}}],[\"打开id\",{\"1\":{\"763\":1}}],[\"打开随处搜索\",{\"1\":{\"609\":1}}],[\"打开指定ip与接口的通信\",{\"1\":{\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1}}],[\"打开锁\",{\"1\":{\"480\":1}}],[\"打开取数据的锁\",{\"1\":{\"344\":1}}],[\"打开放数据的锁\",{\"1\":{\"344\":1}}],[\"打开命令行终端\",{\"1\":{\"87\":1}}],[\"打包\",{\"0\":{\"666\":1},\"1\":{\"709\":1}}],[\"打包规则应用到以css结尾的文件上\",{\"1\":{\"115\":1}}],[\"打包css\",{\"0\":{\"115\":1}}],[\"打包后的js文件名为bundle\",{\"1\":{\"114\":2}}],[\"打包后的文件放入当前目录的dist文件夹下\",{\"1\":{\"114\":2}}],[\"打包js\",{\"0\":{\"114\":1}}],[\"打包工具\",{\"1\":{\"111\":1}}],[\"创建多线程的方式\",{\"0\":{\"3023\":1}}],[\"创建多层目录\",{\"1\":{\"389\":1,\"390\":1}}],[\"创建前端页面\",{\"0\":{\"2914\":1}}],[\"创建静态资源\",{\"0\":{\"2785\":1}}],[\"创建log4j配置文件\",{\"0\":{\"2757\":1,\"2896\":1}}],[\"创建tomcat配置\",{\"1\":{\"2752\":1}}],[\"创建thread线程对象\",{\"1\":{\"449\":1,\"450\":1}}],[\"创建thread对象\",{\"1\":{\"444\":1}}],[\"创建jsp\",{\"0\":{\"2750\":1}}],[\"创建目录\",{\"1\":{\"2745\":1}}],[\"创建目录页\",{\"1\":{\"1162\":1}}],[\"创建还原点\",{\"1\":{\"2702\":1}}],[\"创建还原点transactionstatus\",{\"1\":{\"2702\":1}}],[\"创建代理对象并实现功能增强的声明并运行过程\",{\"1\":{\"2626\":1}}],[\"创建dao层\",{\"1\":{\"2594\":1}}],[\"创建date对象\",{\"0\":{\"1414\":1}}],[\"创建后置处理器\",{\"1\":{\"2574\":1}}],[\"创建后台的接口deptdao和实现类deptdaoimpl\",{\"1\":{\"1264\":1}}],[\"创建所需资源类\",{\"0\":{\"2539\":1}}],[\"创建空白项目\",{\"0\":{\"2536\":1}}],[\"创建address对象\",{\"1\":{\"2509\":1}}],[\"创建的\",{\"1\":{\"2508\":1}}],[\"创建的是一个对象\",{\"1\":{\"1705\":1}}],[\"创建conteoller层\",{\"0\":{\"2916\":1}}],[\"创建controller层\",{\"1\":{\"2761\":1}}],[\"创建config类\",{\"0\":{\"2601\":1}}],[\"创建common\",{\"1\":{\"114\":1}}],[\"创建cache时\",{\"1\":{\"2485\":1}}],[\"创建example对象\",{\"1\":{\"2503\":1}}],[\"创建ehcache配置文件\",{\"0\":{\"2485\":1}}],[\"创建empmapper\",{\"1\":{\"2374\":1}}],[\"创建empmapper接口\",{\"1\":{\"2374\":1}}],[\"创建测试单元类test1\",{\"1\":{\"2374\":1}}],[\"创建测试类\",{\"0\":{\"2192\":1},\"1\":{\"522\":1}}],[\"创建外部properties文件\",{\"0\":{\"2332\":1}}],[\"创建类p6spylogger\",{\"1\":{\"2299\":1}}],[\"创建插件配置类\",{\"0\":{\"2285\":1}}],[\"创建实体类emp\",{\"1\":{\"2374\":1}}],[\"创建实体类\",{\"0\":{\"2276\":1}}],[\"创建实体类dept\",{\"1\":{\"1264\":1,\"2276\":1}}],[\"创建逻辑删除字段\",{\"0\":{\"2233\":1}}],[\"创建接口\",{\"1\":{\"2539\":1}}],[\"创建接口中的抽象方法\",{\"0\":{\"2377\":1}}],[\"创建接口实现类\",{\"0\":{\"2217\":1},\"1\":{\"2539\":1}}],[\"创建接收消息的线程类\",{\"1\":{\"513\":1}}],[\"创建userservice接口\",{\"0\":{\"2216\":1}}],[\"创建util\",{\"1\":{\"372\":1}}],[\"创建utils\",{\"1\":{\"114\":1}}],[\"创建案例所需文件\",{\"0\":{\"2189\":1}}],[\"创建登录页面\",{\"0\":{\"1793\":1}}],[\"创建工程文件层级\",{\"0\":{\"2667\":1}}],[\"创建工程\",{\"0\":{\"1775\":1}}],[\"创建路由的实例vuerouter\",{\"1\":{\"1718\":1}}],[\"创建组件\",{\"0\":{\"1707\":1}}],[\"创建vue项目\",{\"0\":{\"1683\":1}}],[\"创建html文件\",{\"0\":{\"1563\":1}}],[\"创建元素\",{\"0\":{\"1503\":1},\"1\":{\"1571\":2}}],[\"创建时间\",{\"1\":{\"1898\":1}}],[\"创建时间的时候与预期不符\",{\"1\":{\"891\":1}}],[\"创建时\",{\"1\":{\"1385\":1}}],[\"创建定长数组\",{\"1\":{\"1384\":1}}],[\"创建了一个空数组\",{\"1\":{\"1383\":1}}],[\"创建了它的模板\",{\"1\":{\"895\":1}}],[\"创建数据源配置文件\",{\"0\":{\"2897\":1}}],[\"创建数据源和log4j配置文件\",{\"1\":{\"2374\":1}}],[\"创建数据库连接\",{\"1\":{\"1210\":1,\"1215\":1}}],[\"创建数据库\",{\"0\":{\"946\":1}}],[\"创建数据库表\",{\"1\":{\"937\":1,\"955\":1}}],[\"创建数据库对象\",{\"1\":{\"934\":1}}],[\"创建数组方式\",{\"0\":{\"1382\":1}}],[\"创建新连接\",{\"1\":{\"1288\":1}}],[\"创建5个链接对象\",{\"1\":{\"1288\":1}}],[\"创建pojo层\",{\"0\":{\"2915\":1}}],[\"创建pets类\",{\"1\":{\"2800\":1,\"2801\":1}}],[\"创建person的对象\",{\"0\":{\"596\":1}}],[\"创建propertiesutil\",{\"0\":{\"1279\":1}}],[\"创建连接\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"创建连接池文件\",{\"0\":{\"1274\":1}}],[\"创建包\",{\"1\":{\"1264\":1}}],[\"创建日期\",{\"1\":{\"1198\":1}}],[\"创建name字段的索引\",{\"1\":{\"1148\":1}}],[\"创建视图\",{\"0\":{\"1139\":1}}],[\"创建唯一索引\",{\"0\":{\"1134\":1}}],[\"创建唯一约束并命名\",{\"1\":{\"994\":1}}],[\"创建唯一约束\",{\"1\":{\"994\":1}}],[\"创建索引\",{\"0\":{\"1132\":1}}],[\"创建用户\",{\"0\":{\"1115\":1}}],[\"创建主键约束并命名\",{\"1\":{\"988\":1}}],[\"创建主键约束\",{\"1\":{\"988\":1}}],[\"创建复合索引\",{\"0\":{\"1135\":1}}],[\"创建复合主键方式\",{\"1\":{\"987\":1}}],[\"创建复制文件对象\",{\"1\":{\"409\":1}}],[\"创建单值索引\",{\"0\":{\"1133\":1}}],[\"创建单一主键方式二\",{\"1\":{\"987\":1}}],[\"创建单一主键方式一\",{\"1\":{\"987\":1}}],[\"创建单层目录\",{\"1\":{\"389\":1,\"390\":1}}],[\"创建表后\",{\"0\":{\"988\":1,\"994\":1,\"1007\":1,\"1012\":1}}],[\"创建表时创建\",{\"0\":{\"987\":1,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1}}],[\"创建表\",{\"0\":{\"954\":1,\"1239\":1},\"1\":{\"985\":1}}],[\"创建指定的日期时间\",{\"1\":{\"893\":1}}],[\"创建忽略规则文件\",{\"0\":{\"772\":1}}],[\"创建service层\",{\"0\":{\"2917\":1},\"1\":{\"2594\":1}}],[\"创建servlet对象后立即调用该方法完成其他初始化工作\",{\"1\":{\"1817\":1}}],[\"创建servlet\",{\"0\":{\"1794\":1,\"2749\":1}}],[\"创建spring配置文件\",{\"0\":{\"2903\":1}}],[\"创建springframework提供的characterencodingfilter过滤器\",{\"1\":{\"2807\":1}}],[\"创建springmvc配置文件\",{\"0\":{\"2758\":1,\"2898\":1}}],[\"创建spring\",{\"0\":{\"2542\":1},\"1\":{\"2542\":1}}],[\"创建springboot项目\",{\"0\":{\"2185\":1}}],[\"创建sqlmapconfig\",{\"1\":{\"2374\":1}}],[\"创建sql命令发送器statement\",{\"1\":{\"1210\":1,\"1215\":1}}],[\"创建ssh\",{\"1\":{\"763\":1}}],[\"创建stringbuilder的对象\",{\"1\":{\"392\":1}}],[\"创建分支\",{\"0\":{\"780\":1},\"1\":{\"748\":1}}],[\"创建项目结构\",{\"0\":{\"2275\":1}}],[\"创建项目环境\",{\"0\":{\"2184\":1}}],[\"创建项目和模块\",{\"1\":{\"1214\":1}}],[\"创建项目并引入jdbc\",{\"0\":{\"1214\":1}}],[\"创建项目\",{\"0\":{\"678\":1,\"2263\":1},\"1\":{\"1264\":1}}],[\"创建mapper层\",{\"0\":{\"2918\":1}}],[\"创建mapper\",{\"0\":{\"2378\":1}}],[\"创建mapper接口\",{\"0\":{\"2191\":1}}],[\"创建maven\",{\"0\":{\"2884\":1}}],[\"创建maven骨架\",{\"1\":{\"2744\":1}}],[\"创建mavenweb模块\",{\"0\":{\"2744\":1},\"1\":{\"2884\":1}}],[\"创建maven测试模块\",{\"0\":{\"2537\":1}}],[\"创建maven项目\",{\"0\":{\"2262\":1},\"1\":{\"2263\":1}}],[\"创建maven程序\",{\"0\":{\"677\":1}}],[\"创建main\",{\"1\":{\"114\":1}}],[\"创建自定义注解\",{\"0\":{\"548\":1}}],[\"创建独立的测试单元包\",{\"1\":{\"522\":1}}],[\"创建等待池\",{\"1\":{\"478\":1}}],[\"创建futuretask对象\",{\"1\":{\"449\":1,\"450\":1}}],[\"创建file对象\",{\"1\":{\"415\":1,\"421\":1}}],[\"创建线程任务对象\",{\"1\":{\"444\":1,\"449\":1,\"450\":1}}],[\"创建线程的方式\",{\"0\":{\"435\":1},\"1\":{\"40\":1}}],[\"创建字节流\",{\"1\":{\"418\":1}}],[\"创建输出对象\",{\"1\":{\"409\":1}}],[\"创建文件输出流\",{\"1\":{\"409\":1}}],[\"创建文件输入流\",{\"1\":{\"409\":1}}],[\"创建文件\",{\"1\":{\"386\":1}}],[\"创建10个线程\",{\"1\":{\"309\":1}}],[\"创建长度为newcapacity的数组\",{\"1\":{\"294\":1}}],[\"创建比较器对象\",{\"1\":{\"287\":1}}],[\"创建比较器类继承comparator接口\",{\"1\":{\"287\":1}}],[\"创建一个enhancer对象\",{\"1\":{\"2615\":1}}],[\"创建一个maven工程项目\",{\"1\":{\"2374\":1}}],[\"创建一个sqlsessionfactorybuilder对象\",{\"1\":{\"2281\":1,\"2282\":1,\"2374\":1}}],[\"创建一个日志记录器\",{\"1\":{\"1286\":1}}],[\"创建一个dao模式的项目\",{\"0\":{\"1264\":1}}],[\"创建一个默认\",{\"1\":{\"1255\":1}}],[\"创建一个\",{\"1\":{\"1255\":3,\"1452\":2}}],[\"创建一个工程并不等于构建一个项目\",{\"1\":{\"657\":1}}],[\"创建一个内容可变的字符串\",{\"1\":{\"397\":1}}],[\"创建一个integer对象并返回\",{\"1\":{\"364\":1}}],[\"创建一个队列\",{\"1\":{\"337\":1}}],[\"创建一个独立的线程\",{\"1\":{\"327\":1}}],[\"创建一个集合\",{\"1\":{\"318\":1}}],[\"创建一个线程池\",{\"1\":{\"305\":1,\"306\":1}}],[\"创建一个hashset集合\",{\"1\":{\"278\":1,\"283\":1}}],[\"创建一个arraylist集合\",{\"1\":{\"234\":2}}],[\"创建一个文件夹webpack\",{\"1\":{\"114\":1}}],[\"创建迭代器对象\",{\"1\":{\"220\":1}}],[\"创建对象\",{\"1\":{\"219\":1,\"445\":1,\"1266\":1,\"1275\":1,\"2538\":1}}],[\"创建模板\",{\"0\":{\"149\":1},\"1\":{\"1165\":1,\"1198\":1}}],[\"创建配置文件\",{\"0\":{\"1278\":1},\"1\":{\"98\":1}}],[\"创建\",{\"0\":{\"596\":1},\"1\":{\"87\":1,\"88\":1,\"1822\":1,\"1916\":1,\"1920\":1,\"1924\":1,\"2461\":1}}],[\"官方网站https\",{\"1\":{\"1611\":1}}],[\"官方网址http\",{\"1\":{\"1541\":1}}],[\"官方网址\",{\"1\":{\"61\":1,\"1739\":1}}],[\"官方只做bug维护\",{\"1\":{\"1542\":2}}],[\"官方说明文档\",{\"1\":{\"930\":1}}],[\"官方下载地址\",{\"1\":{\"921\":1}}],[\"官网是\",{\"1\":{\"2520\":1}}],[\"官网说明\",{\"1\":{\"2214\":1}}],[\"官网地址\",{\"0\":{\"808\":1},\"1\":{\"2213\":1}}],[\"官网\",{\"1\":{\"85\":1,\"1327\":1}}],[\"下的操作互不影响\",{\"1\":{\"2480\":1}}],[\"下的index文件\",{\"1\":{\"728\":1}}],[\"下层不知道上层的存在\",{\"1\":{\"2043\":1}}],[\"下拉列表\",{\"1\":{\"1340\":1}}],[\"下拉框\",{\"0\":{\"1340\":1}}],[\"下划线\",{\"0\":{\"1302\":1}}],[\"下\",{\"1\":{\"1285\":1}}],[\"下方的那一行\",{\"1\":{\"1155\":1}}],[\"下方添加skip\",{\"1\":{\"1155\":1}}],[\"下生成\",{\"1\":{\"763\":1}}],[\"下班前一定要提交代码\",{\"1\":{\"753\":1}}],[\"下午3\",{\"1\":{\"380\":2}}],[\"下午03时17分13秒\",{\"1\":{\"380\":1}}],[\"下午8\",{\"1\":{\"371\":1}}],[\"下单成功后60s之后给用户发送短信通知\",{\"1\":{\"355\":1}}],[\"下单之后如果三十分钟之内没有付款就自动取消订单\",{\"1\":{\"355\":1}}],[\"下面以a\",{\"1\":{\"2726\":1}}],[\"下面的代码中创建了两个sqlsession\",{\"1\":{\"2479\":1}}],[\"下面的图片说明了盒子模型\",{\"1\":{\"1527\":1}}],[\"下面的文字就是普通的文本\",{\"1\":{\"1298\":1}}],[\"下面这些标签可用在\",{\"1\":{\"1292\":1}}],[\"下面这种方式好\",{\"1\":{\"260\":1}}],[\"下面我们来看看cachingexecutor类中的query\",{\"1\":{\"2494\":1}}],[\"下面我们将介绍一下常用的关系型数据库管理系统\",{\"1\":{\"919\":1}}],[\"下面我们就以stringbuilder为例讲解底层内存\",{\"1\":{\"391\":1}}],[\"下面是一些为常见的\",{\"1\":{\"2335\":1}}],[\"下面是一些关键类\",{\"1\":{\"892\":1}}],[\"下面是eat方法\",{\"1\":{\"538\":1}}],[\"下面\",{\"1\":{\"288\":1}}],[\"下面两个条件之一\",{\"1\":{\"279\":1}}],[\"下一页\",{\"1\":{\"1463\":1}}],[\"下一步下一步就可以\",{\"1\":{\"1680\":1}}],[\"下一步\",{\"1\":{\"671\":1,\"725\":5}}],[\"下一个匹配\",{\"0\":{\"646\":1}}],[\"下一个地址也为空\",{\"1\":{\"340\":1}}],[\"下一个node节点的地址\",{\"1\":{\"338\":1}}],[\"下一个元素的地址\",{\"1\":{\"262\":1}}],[\"下一代\",{\"1\":{\"71\":1}}],[\"下限\",{\"0\":{\"248\":1}}],[\"下标\",{\"1\":{\"142\":1,\"2800\":1}}],[\"下增加\",{\"1\":{\"115\":2}}],[\"下载文件名乱码\",{\"0\":{\"1814\":1}}],[\"下载bootstrap文件\",{\"0\":{\"1561\":1}}],[\"下载好后上传到linux系统\",{\"1\":{\"809\":1}}],[\"下载地址是\",{\"1\":{\"809\":1}}],[\"下载速度快\",{\"1\":{\"675\":1}}],[\"下载\",{\"0\":{\"1739\":1},\"1\":{\"85\":1}}],[\"当username为root时\",{\"1\":{\"2818\":1}}],[\"当username为11111时正常访问\",{\"1\":{\"2818\":1}}],[\"当配置了<mvc\",{\"1\":{\"2780\":1}}],[\"当类上使用该注解时访问的路径应该是\",{\"1\":{\"2764\":1}}],[\"当处于存在事务的上下文环境中运行时\",{\"1\":{\"2731\":1}}],[\"当异常范围与rollbackfor设定的一致时\",{\"1\":{\"2717\":1}}],[\"当不确定是哪一层\",{\"1\":{\"2587\":1}}],[\"当某个具体类型mybatis靠内置的类型处理器无法识别时\",{\"1\":{\"2509\":1}}],[\"当借助cachemanager\",{\"1\":{\"2485\":1}}],[\"当数据库中只包含事务成功提交的结果时\",{\"1\":{\"2686\":1}}],[\"当数据量大的时候可以借助一些第三方缓存框架或redis缓存来协助保存mybatis的二级缓存数据\",{\"1\":{\"2472\":1}}],[\"当数据传递到本地也会生成摘要信息\",{\"1\":{\"702\":1}}],[\"当下次遇到一模一样的查询sql时候不在执行sql与数据库交互\",{\"1\":{\"2470\":1}}],[\"当第一个条件前带有\",{\"1\":{\"2452\":1}}],[\"当第一个条件前带有and时\",{\"1\":{\"2446\":1}}],[\"当第一个filter的dofilter方法被调用时\",{\"1\":{\"2046\":1}}],[\"当语句块中存在语句时\",{\"1\":{\"2446\":1,\"2452\":1}}],[\"当开启时\",{\"1\":{\"2434\":2}}],[\"当开发人员编写好filter\",{\"1\":{\"1995\":1}}],[\"当属性名和查询出的数据表字段名相同\",{\"1\":{\"2422\":1,\"2428\":1}}],[\"当要更新一条记录的时候\",{\"1\":{\"2287\":1}}],[\"当出现多条时会报错\",{\"1\":{\"2240\":1}}],[\"当发送信息至服务器时\",{\"1\":{\"2146\":1}}],[\"当datatype为script时\",{\"1\":{\"2139\":1}}],[\"当服务器处理请求时\",{\"1\":{\"2103\":1}}],[\"当任何一个账户处于登录状态时\",{\"1\":{\"2088\":1}}],[\"当范围对象的状态发生变化的时候\",{\"1\":{\"2066\":1}}],[\"当与minintegerdigits属性一同使用时\",{\"1\":{\"2029\":1}}],[\"当与现代化的工具链以及各种支持类库结合使用时\",{\"1\":{\"1611\":1}}],[\"当\",{\"1\":{\"2029\":1}}],[\"当type=\",{\"1\":{\"2029\":1}}],[\"当tomcat初始化一个servlet时\",{\"1\":{\"1818\":1,\"1832\":1}}],[\"当tomcat启动时会去加载webapps目录下的应用程序\",{\"1\":{\"1744\":1}}],[\"当web应用移除或服务器停止时才销毁\",{\"1\":{\"2005\":1}}],[\"当iserrorpage=true\",{\"1\":{\"1971\":1}}],[\"当jsp中发生了异常时\",{\"1\":{\"1960\":1}}],[\"当jsp网页在执行时\",{\"1\":{\"1933\":1}}],[\"当页面发生错误时\",{\"1\":{\"1960\":1}}],[\"当再重复调用执行时\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"当到达指定的超时时间后\",{\"1\":{\"1899\":1}}],[\"当参数为false时则只去根据sessionid查找是否有与这个客户端浏览器对应的httpsession\",{\"1\":{\"1897\":1}}],[\"当参数为true时与getsession\",{\"1\":{\"1897\":1}}],[\"当使用相对路径时\",{\"1\":{\"1869\":1}}],[\"当容器启动时会创建servletcontext对象并一直缓存该对象\",{\"1\":{\"1830\":1}}],[\"当容器在销毁servlet之前会调用一次destory方法\",{\"1\":{\"1823\":1}}],[\"当浏览器发起一个ajax请求给服务器\",{\"1\":{\"2874\":1}}],[\"当浏览器端接收到这种响应结果后\",{\"1\":{\"1863\":1}}],[\"当浏览器基于get方式请求我们创建servlet时\",{\"1\":{\"1826\":1}}],[\"当浏览器请求一个servlet时\",{\"1\":{\"1787\":1}}],[\"当失去焦点\",{\"1\":{\"1777\":1}}],[\"当代码改变的时候\",{\"1\":{\"1777\":1}}],[\"当接收客户端发来的https请求时\",{\"1\":{\"1765\":1}}],[\"当接口抽象方法有返回值时\",{\"1\":{\"828\":1}}],[\"当程序访问成功时\",{\"1\":{\"1721\":1}}],[\"当程序发生错误时\",{\"1\":{\"602\":1}}],[\"当一个事务正在访问数据并且对数据进行了修改\",{\"1\":{\"2690\":1}}],[\"当一个url与多个servlet的匹配规则可以匹配时\",{\"1\":{\"1843\":1}}],[\"当一个声明改变时\",{\"1\":{\"1705\":1}}],[\"当一个线程调用了join方法\",{\"1\":{\"458\":1}}],[\"当内容的小于等于0的时候\",{\"1\":{\"1701\":1}}],[\"当内容的数量大于100的时候\",{\"1\":{\"1701\":2}}],[\"当拉动滚动条的时候\",{\"1\":{\"1536\":1}}],[\"当给一个元素设置了绝对定位的时候\",{\"1\":{\"1535\":1}}],[\"当给一个变量赋值为\",{\"1\":{\"1352\":1}}],[\"当框\",{\"1\":{\"1519\":1}}],[\"当把框\",{\"1\":{\"1519\":1}}],[\"当鼠标指针移出元素时触发\",{\"1\":{\"1432\":1}}],[\"当鼠标指针移动到元素上时触发\",{\"1\":{\"1432\":1}}],[\"当用户双击某个对象时调用的事件句柄\",{\"1\":{\"1432\":1}}],[\"当用户点击某个对象时调用的事件句柄\",{\"1\":{\"1432\":1}}],[\"当用户填写完信息后做提交\",{\"1\":{\"1329\":1}}],[\"当事件发生后\",{\"1\":{\"1374\":1}}],[\"当时服务端需要对数据进行验证\",{\"1\":{\"1372\":1}}],[\"当多个线程并发执行时\",{\"1\":{\"1272\":1}}],[\"当请求完成时\",{\"1\":{\"1272\":1}}],[\"当需要和数据源进行交互的时候则使用这个接口\",{\"1\":{\"1262\":1}}],[\"当该编译语句被执行时\",{\"1\":{\"1250\":1}}],[\"当该扩展名文件被访问的时候\",{\"1\":{\"206\":1}}],[\"当客户请求访问与过滤器关联的url的时候\",{\"1\":{\"2004\":1}}],[\"当客户请求到来时\",{\"1\":{\"1272\":1}}],[\"当客户端浏览器第一次访问servlet时返回\",{\"1\":{\"1893\":2}}],[\"当客户端浏览器第一次请求servlet时\",{\"1\":{\"1823\":1}}],[\"当客户端浏览器再次请求这个servlet时\",{\"1\":{\"1823\":1}}],[\"当客户端浏览器通过http协议访问服务器时\",{\"1\":{\"1797\":1}}],[\"当客户端发送一条sql语句给dbms时\",{\"1\":{\"1250\":1}}],[\"当客户发送一条sql语句给dbms后\",{\"1\":{\"1250\":1}}],[\"当它的\",{\"1\":{\"1223\":1}}],[\"当执行这个事务中的sql语句的过程中\",{\"1\":{\"1109\":1}}],[\"当执行到绿色代码块时\",{\"1\":{\"438\":1}}],[\"当这个事务中的sql语句执行完毕之后\",{\"1\":{\"1108\":1}}],[\"当在类上添加\",{\"1\":{\"2764\":1}}],[\"当在一个事务中执行多个操作时\",{\"1\":{\"1099\":1}}],[\"当在同一个位置上放入元素的时候\",{\"1\":{\"294\":1}}],[\"当创建主键约束时\",{\"1\":{\"986\":1}}],[\"当你想明确地引用当前窗口\",{\"1\":{\"1450\":1}}],[\"当你的项目中需要用到上百个jar包时\",{\"1\":{\"651\":1}}],[\"当你拿到一个新的从未使用过的jar包\",{\"1\":{\"651\":1}}],[\"当你在浏览器输入url的时候\",{\"1\":{\"173\":1}}],[\"当运行\",{\"1\":{\"553\":1}}],[\"当年龄过小的时候\",{\"1\":{\"538\":1}}],[\"当年龄过大的时候\",{\"1\":{\"538\":1}}],[\"当我们前端使用错误的请求方法时\",{\"1\":{\"2815\":1}}],[\"当我们访问指定url时\",{\"1\":{\"2812\":1}}],[\"当我们访问后\",{\"1\":{\"2765\":1}}],[\"当我们获得一次请求后\",{\"1\":{\"2473\":1}}],[\"当我们使用正确的请求方法时\",{\"1\":{\"2815\":1}}],[\"当我们使用dept属性时\",{\"1\":{\"2435\":1}}],[\"当我们使用stream流处理数据后\",{\"1\":{\"880\":1,\"881\":1}}],[\"当我们直接执行测试后\",{\"1\":{\"2435\":1}}],[\"当我们直接资指定索引插入值时\",{\"1\":{\"1386\":1}}],[\"当我们执行成功后\",{\"1\":{\"2409\":1,\"2410\":1}}],[\"当我们在jsp上修改了代码时\",{\"1\":{\"1933\":1}}],[\"当我们第一发送请求一个jsp资源时\",{\"1\":{\"1929\":1}}],[\"当我们点击内部的盒子时\",{\"1\":{\"1656\":1}}],[\"当我们点击触发内部的盒子的时候\",{\"1\":{\"1656\":1}}],[\"当我们用对象获取属性和调用方法时\",{\"1\":{\"1424\":1}}],[\"当我们用构造方法创建一个类时\",{\"1\":{\"1423\":1}}],[\"当我们修改数组长度属性时\",{\"1\":{\"1386\":1}}],[\"当我们有多条sql语句需要发送到数据库执行的时候\",{\"1\":{\"1230\":1}}],[\"当我们创建一个联合索引\",{\"1\":{\"1135\":1}}],[\"当我们需要组装更新的字段数据的时候\",{\"1\":{\"2259\":1}}],[\"当我们需要对单表的curd做复杂条件处理的时候我们就需要借助wrapper接口来处理\",{\"1\":{\"2236\":1}}],[\"当我们需要对集合中的元素进行操作的时候\",{\"1\":{\"856\":1}}],[\"当我们需要通过浏览器访问java程序时就必须将包含java程序的web工程编译的结果\",{\"1\":{\"659\":1}}],[\"当我们改变这个string的参数时\",{\"1\":{\"393\":1}}],[\"当我们想在指定位置后面添加字符串时\",{\"1\":{\"265\":1}}],[\"当字符串无法转换成int时\",{\"1\":{\"364\":1}}],[\"当生产者线程调用put之类的方法加入元素时\",{\"1\":{\"354\":1}}],[\"当其他元素放置元素时\",{\"1\":{\"334\":1}}],[\"当其他线程取出数据时\",{\"1\":{\"334\":1}}],[\"当相同位置的链表长度超过8个的时候\",{\"1\":{\"295\":1}}],[\"当entry数组上存储的数量达到最大扩容因子限定的长度时\",{\"1\":{\"294\":1}}],[\"当涉及到重写操作时\",{\"1\":{\"244\":1}}],[\"当http协议头部中字段connection\",{\"1\":{\"159\":1}}],[\"当建立好了一个连接之后\",{\"1\":{\"159\":1}}],[\"当前requestscope\",{\"1\":{\"2929\":1}}],[\"当前jsp页面内有效\",{\"1\":{\"2921\":1}}],[\"当前jsp对象本身\",{\"1\":{\"1971\":1}}],[\"当前请求是\",{\"1\":{\"2866\":1,\"2867\":1}}],[\"当前代码是return\",{\"1\":{\"2764\":1}}],[\"当前代码块操作\",{\"1\":{\"616\":1}}],[\"当前时间\",{\"1\":{\"2299\":1,\"2301\":1}}],[\"当前在线人数为\",{\"1\":{\"2088\":1}}],[\"当前迭代的元素本身\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"当前页面内可用\",{\"1\":{\"1968\":1}}],[\"当前页面可以接收异常对象\",{\"1\":{\"1960\":1}}],[\"当前页面锚点跳转\",{\"0\":{\"1314\":1}}],[\"当前web服务内\",{\"1\":{\"1923\":1}}],[\"当前节点是否有子节点\",{\"1\":{\"1486\":1}}],[\"当前屏幕高度\",{\"1\":{\"1464\":1}}],[\"当前屏幕宽度\",{\"1\":{\"1464\":1}}],[\"当前地址栏中的\",{\"1\":{\"1462\":4}}],[\"当前连接池超过设定最大上限\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"当前步骤完成后重启\",{\"1\":{\"810\":1}}],[\"当前用户登录\",{\"1\":{\"759\":1}}],[\"当前模块的版本\",{\"1\":{\"685\":1}}],[\"当前项目运行在上一个案例\",{\"1\":{\"2925\":1}}],[\"当前项目部署名\",{\"1\":{\"1799\":1}}],[\"当前项目的模块名称\",{\"1\":{\"685\":1}}],[\"当前项目路径\",{\"1\":{\"130\":1}}],[\"当前的\",{\"1\":{\"732\":1}}],[\"当前的maven模块的坐标信息\",{\"1\":{\"680\":1,\"714\":1,\"715\":1}}],[\"当前的名字\",{\"1\":{\"390\":1}}],[\"当前类的每一个对象内部有一个\",{\"1\":{\"1424\":1}}],[\"当前类的注解\",{\"1\":{\"593\":1,\"594\":1}}],[\"当前类对象和原型的关系\",{\"0\":{\"1424\":1}}],[\"当前类所在的包名\",{\"1\":{\"594\":1}}],[\"当前类所在的包\",{\"1\":{\"593\":1,\"594\":1}}],[\"当前线程放入等待池\",{\"1\":{\"479\":1}}],[\"当前线程将一直处于休眠状态\",{\"1\":{\"475\":1}}],[\"当前存储char数组的长度\",{\"1\":{\"392\":1}}],[\"当前链中的最后一个节点的下一个元素\",{\"1\":{\"262\":1}}],[\"当前链中最后一个节点变为n\",{\"1\":{\"262\":1}}],[\"当前链中第一个节点变为n\",{\"1\":{\"262\":1}}],[\"当前元素的所有\",{\"1\":{\"1574\":1}}],[\"当前元素为绝对定位\",{\"1\":{\"1535\":1}}],[\"当前元素\",{\"1\":{\"262\":1,\"263\":1,\"1574\":1}}],[\"当前所在的这个类\",{\"1\":{\"241\":1}}],[\"当前文件所在路径\",{\"1\":{\"114\":1}}],[\"当然我们也可以使用transactionstatus对象手动创建还原点和回滚事件\",{\"1\":{\"2702\":1}}],[\"当然我们可以直接指定注册的id\",{\"1\":{\"2587\":1}}],[\"当然我们可以sqlsession\",{\"1\":{\"2360\":1}}],[\"当然是通过条件过滤\",{\"1\":{\"1055\":1}}],[\"当然也可以存储在磁盘文件中\",{\"1\":{\"2199\":1}}],[\"当然也可以直接使用document\",{\"1\":{\"1478\":1}}],[\"当然也可以使用alt+\",{\"1\":{\"620\":1}}],[\"当然也可以是具有更复杂结构的数据元素\",{\"1\":{\"226\":2}}],[\"当然\",{\"1\":{\"84\":1,\"272\":1,\"610\":1,\"1145\":1,\"2230\":1}}],[\"当除数为0的时候\",{\"1\":{\"32\":1}}],[\"箭头函数后处理返回结果res\",{\"1\":{\"1721\":1}}],[\"箭头函数多用于匿名函数的定义\",{\"1\":{\"80\":1}}],[\"箭头函数提供了一种更加简洁的函数书写方式\",{\"1\":{\"80\":1}}],[\"箭头函数\",{\"0\":{\"80\":1}}],[\"定\",{\"1\":{\"2223\":1}}],[\"定时器\",{\"0\":{\"1457\":1}}],[\"定一个比较器类\",{\"1\":{\"275\":1}}],[\"定义转换器\",{\"1\":{\"2799\":1}}],[\"定义全局日志级别调试阶段推荐debug\",{\"1\":{\"2308\":1,\"2374\":1}}],[\"定义监听器\",{\"1\":{\"2074\":1}}],[\"定义jsp页面所用的脚本语言\",{\"1\":{\"1959\":1}}],[\"定义jsp页面的描述信息\",{\"1\":{\"1959\":1}}],[\"定义网页依赖属性\",{\"1\":{\"1958\":1}}],[\"定义在server\",{\"1\":{\"1766\":1}}],[\"定义组件\",{\"1\":{\"1718\":1}}],[\"定义变量表示月份\",{\"1\":{\"1366\":1}}],[\"定义form表单\",{\"1\":{\"1330\":1}}],[\"定义\",{\"0\":{\"1196\":1},\"1\":{\"1290\":1}}],[\"定义常用的排版样式\",{\"1\":{\"1167\":1}}],[\"定义一个函数\",{\"1\":{\"1379\":1}}],[\"定义一个\",{\"1\":{\"1147\":1}}],[\"定义一个没有返回值\",{\"1\":{\"1147\":1}}],[\"定义一个重复注解的容器\",{\"1\":{\"904\":1}}],[\"定义重复注解\",{\"1\":{\"904\":1}}],[\"定义两个队伍进行操作\",{\"1\":{\"876\":1}}],[\"定义测试方法\",{\"1\":{\"522\":1}}],[\"定义为同步方法\",{\"1\":{\"472\":1}}],[\"定义了一组体系架构原则\",{\"1\":{\"2823\":1}}],[\"定义了一个float类型的变量\",{\"1\":{\"294\":1}}],[\"定义了在\",{\"1\":{\"2623\":1}}],[\"定义了对数据要执行那些操作的接口和实现类\",{\"1\":{\"1263\":1}}],[\"定义了辅助变量\",{\"1\":{\"279\":1}}],[\"定义成员\",{\"1\":{\"102\":1}}],[\"定义文件2\",{\"1\":{\"103\":1,\"107\":1,\"110\":1}}],[\"定义文件\",{\"1\":{\"102\":1,\"106\":1,\"109\":1}}],[\"定义方法\",{\"1\":{\"78\":2}}],[\"定义方法简写\",{\"0\":{\"78\":1}}],[\"定义长字符串\",{\"1\":{\"76\":1}}],[\"定位\",{\"0\":{\"1530\":1,\"3103\":1},\"1\":{\"57\":1}}],[\"$$\",{\"1\":{\"2560\":2}}],[\"$emit\",{\"1\":{\"1715\":1}}],[\"$mount\",{\"1\":{\"1689\":1}}],[\"$lis\",{\"1\":{\"1574\":8}}],[\"$是jquery是使用最多的符号\",{\"1\":{\"1546\":1}}],[\"$1\",{\"1\":{\"1417\":4}}],[\"$2你好吗5980947\",{\"1\":{\"396\":1}}],[\"$23你好累45980947\",{\"1\":{\"395\":1}}],[\"$23我好累45980947\",{\"1\":{\"395\":1}}],[\"$23\",{\"1\":{\"395\":1}}],[\"$23445980947\",{\"1\":{\"395\":1,\"396\":1}}],[\"$\",{\"0\":{\"2157\":1,\"2160\":1,\"2162\":1,\"2164\":1},\"1\":{\"76\":2,\"78\":2,\"127\":1,\"132\":1,\"133\":1,\"134\":1,\"136\":2,\"137\":3,\"140\":3,\"141\":2,\"142\":5,\"145\":3,\"146\":1,\"147\":3,\"1184\":3,\"1545\":4,\"1546\":1,\"1548\":31,\"1549\":9,\"1552\":15,\"1555\":13,\"1567\":7,\"1568\":9,\"1570\":9,\"1571\":15,\"1572\":11,\"1573\":4,\"1574\":5,\"1579\":15,\"1585\":4,\"1586\":16,\"1588\":4,\"1589\":3,\"1590\":4,\"1591\":3,\"1978\":1,\"1980\":8,\"1981\":10,\"1982\":3,\"1985\":1,\"1987\":7,\"1988\":3,\"1989\":4,\"1990\":1,\"1991\":5,\"2020\":8,\"2022\":13,\"2023\":4,\"2025\":12,\"2031\":10,\"2088\":1,\"2131\":6,\"2132\":4,\"2155\":1,\"2158\":1,\"2159\":2,\"2160\":1,\"2161\":2,\"2163\":3,\"2164\":1,\"2165\":2,\"2166\":6,\"2169\":6,\"2170\":7,\"2171\":7,\"2176\":6,\"2312\":1,\"2332\":4,\"2334\":3,\"2352\":1,\"2374\":4,\"2584\":4,\"2599\":1,\"2666\":4,\"2877\":3,\"2903\":4,\"2906\":4}}],[\"除零不会出现异常\",{\"1\":{\"1361\":1}}],[\"除法的结果中如果没有小数位\",{\"1\":{\"1361\":1}}],[\"除去子标签的数组\",{\"1\":{\"1198\":1}}],[\"除非设置了cache参数\",{\"1\":{\"2141\":1}}],[\"除非当前项目没有给定部署名\",{\"1\":{\"1876\":1}}],[\"除非我们的项目没有设置项目名\",{\"1\":{\"1868\":1}}],[\"除非特殊要求\",{\"1\":{\"1542\":1}}],[\"除非项目真的导入太慢了我们再增大此参数\",{\"1\":{\"676\":1}}],[\"除非手动设置\",{\"1\":{\"188\":1}}],[\"除了防止脏读\",{\"1\":{\"2723\":1}}],[\"除了实体类增加关联属性外\",{\"1\":{\"2432\":1}}],[\"除了可以查询还可以使用set设置修改的字段\",{\"1\":{\"2250\":1}}],[\"除了include指令标签可以实现引入以外\",{\"1\":{\"1961\":1}}],[\"除了第一次的编译会花较久的时间之外\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"除了这两个属性之外\",{\"1\":{\"1450\":1}}],[\"除了上面列出的属性和方法\",{\"1\":{\"1450\":1}}],[\"除了终结方法外\",{\"1\":{\"861\":1}}],[\"除了必须的添加\",{\"1\":{\"856\":1}}],[\"除了以程序构建能力为特色之外\",{\"1\":{\"655\":1}}],[\"除了主线程\",{\"1\":{\"453\":1}}],[\"除了表头和表尾元素外\",{\"1\":{\"226\":1}}],[\"除了作为普通字符串\",{\"1\":{\"76\":1}}],[\"除此之外该域没有办法实现数据共享\",{\"1\":{\"1915\":1}}],[\"除此之外\",{\"1\":{\"170\":1}}],[\"除数为0\",{\"1\":{\"32\":1}}],[\"除数不可以为0\",{\"1\":{\"27\":1}}],[\"除数不能为0\",{\"1\":{\"17\":1}}],[\"`http\",{\"1\":{\"2931\":1}}],[\"`hello\",{\"1\":{\"78\":2}}],[\"`upwd`\",{\"1\":{\"2881\":1}}],[\"`uname`\",{\"1\":{\"2881\":1}}],[\"`uid`\",{\"1\":{\"2881\":2}}],[\"`userinfo`\",{\"1\":{\"2881\":1}}],[\"`username`\",{\"1\":{\"1239\":1}}],[\"`wallet\",{\"1\":{\"2695\":1}}],[\"`wallet`\",{\"1\":{\"2695\":1}}],[\"`name`\",{\"1\":{\"2695\":1}}],[\"`id`\",{\"1\":{\"2695\":3}}],[\"`fk\",{\"1\":{\"2417\":3}}],[\"`projectrecord`\",{\"1\":{\"2417\":11}}],[\"`projects`\",{\"1\":{\"2417\":6}}],[\"`pname`\",{\"1\":{\"2417\":1}}],[\"`pid`\",{\"1\":{\"2417\":7}}],[\"`password`\",{\"1\":{\"1239\":1}}],[\"`money`\",{\"1\":{\"1239\":1,\"2417\":1,\"2695\":1}}],[\"`aid`\",{\"1\":{\"1239\":2}}],[\"`account`\",{\"1\":{\"1239\":1}}],[\"`age`\",{\"1\":{\"937\":1,\"965\":1}}],[\"`rename\",{\"1\":{\"962\":1}}],[\"`emp`\",{\"1\":{\"2417\":1}}],[\"`empno`\",{\"1\":{\"2417\":4}}],[\"`email`\",{\"1\":{\"937\":1,\"965\":1}}],[\"`enterdate`\",{\"1\":{\"937\":1,\"965\":1}}],[\"`classname`\",{\"1\":{\"937\":1,\"965\":1}}],[\"`sex`\",{\"1\":{\"937\":1,\"965\":1}}],[\"`sname`\",{\"1\":{\"937\":1,\"965\":1}}],[\"`sno`\",{\"1\":{\"937\":1,\"965\":1}}],[\"`t\",{\"1\":{\"937\":1,\"965\":1}}],[\"``\",{\"1\":{\"1180\":2}}],[\"```java\",{\"1\":{\"905\":1}}],[\"```\",{\"1\":{\"905\":1}}],[\"``void\",{\"1\":{\"470\":1}}],[\"``synchronized``\",{\"1\":{\"470\":1}}],[\"`<head>\",{\"1\":{\"76\":1}}],[\"`$\",{\"1\":{\"76\":2}}],[\"`\",{\"1\":{\"76\":3,\"78\":2,\"959\":1,\"960\":1,\"961\":1,\"962\":1,\"1179\":3,\"1180\":2}}],[\"模式中的\",{\"1\":{\"2770\":1}}],[\"模式\",{\"1\":{\"2179\":1,\"2293\":1}}],[\"模仿百度搜索\",{\"0\":{\"1331\":1}}],[\"模糊查询\",{\"0\":{\"2405\":1},\"1\":{\"2457\":1}}],[\"模糊查询操作\",{\"1\":{\"1147\":2}}],[\"模糊查询是处理字符串的时候进行部分匹配\",{\"1\":{\"1035\":1}}],[\"模拟sql注入\",{\"0\":{\"1238\":1}}],[\"模拟卖票\",{\"0\":{\"442\":1,\"446\":1}}],[\"模拟linedlist代码\",{\"0\":{\"262\":1}}],[\"模拟通讯\",{\"0\":{\"507\":1,\"3030\":1},\"1\":{\"41\":1,\"518\":1}}],[\"模板名称\",{\"1\":{\"149\":1}}],[\"模板字符串的拼接方法\",{\"1\":{\"76\":1}}],[\"模板字符串相当于加强版的字符串\",{\"1\":{\"76\":1}}],[\"模板字符串\",{\"0\":{\"76\":1}}],[\"模型层\",{\"1\":{\"2740\":1}}],[\"模型部分包含了应用程序的业务逻辑和业务数据\",{\"1\":{\"2034\":1}}],[\"模型\",{\"1\":{\"120\":1,\"2531\":1}}],[\"模块的基础之上\",{\"1\":{\"2532\":1}}],[\"模块的功能\",{\"1\":{\"2531\":1}}],[\"模块之间有规范了\",{\"1\":{\"2371\":1}}],[\"模块是否记录较长时间运行的语句\",{\"1\":{\"2301\":1}}],[\"模块执行时间设置\",{\"1\":{\"2301\":2}}],[\"模块可以依赖jar文件中的代码\",{\"1\":{\"1214\":1}}],[\"模块\",{\"0\":{\"2531\":1,\"2884\":1},\"1\":{\"100\":1,\"115\":1,\"2530\":5,\"2531\":3,\"2532\":3,\"2533\":5,\"2740\":1}}],[\"模块化\",{\"0\":{\"99\":1}}],[\"模块安装的位置\",{\"1\":{\"94\":1}}],[\"u9fa5\",{\"1\":{\"1584\":1}}],[\"u4e00\",{\"1\":{\"1584\":1}}],[\"ullamco\",{\"1\":{\"1606\":1}}],[\"ul\",{\"1\":{\"1548\":2}}],[\"ul>li\",{\"1\":{\"1548\":2}}],[\"ul>\",{\"1\":{\"1317\":2,\"1549\":2,\"1574\":1,\"1606\":1}}],[\"uername\",{\"1\":{\"1341\":1,\"1342\":1}}],[\"u=1833909874\",{\"1\":{\"1309\":1}}],[\"using\",{\"1\":{\"1216\":1,\"2417\":3,\"2695\":1}}],[\"usecache=\",{\"1\":{\"2480\":1}}],[\"usecache控制当前sql语句是否启用缓存\",{\"1\":{\"2480\":1}}],[\"usegeneratedkeys=\",{\"1\":{\"2409\":2}}],[\"usegeneratedkeys\",{\"0\":{\"2409\":1}}],[\"usenanotime=false\",{\"1\":{\"2301\":1}}],[\"usedeprecatedexecutor\",{\"1\":{\"2285\":1}}],[\"useserverprepstmts=true\",{\"1\":{\"1251\":1,\"1252\":1}}],[\"useserverprepstmts\",{\"1\":{\"1251\":1}}],[\"usessl=false\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"1976\":1,\"2187\":1,\"2278\":1,\"2293\":1,\"2332\":1,\"2374\":1,\"2501\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"useunicode=true\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"1976\":1,\"2187\":1,\"2278\":1,\"2293\":1,\"2332\":1,\"2374\":1,\"2501\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"usealthashing\",{\"1\":{\"294\":4}}],[\"use\",{\"1\":{\"115\":1,\"905\":2,\"926\":1,\"928\":1,\"951\":1,\"1156\":1,\"1683\":1,\"1928\":1,\"2179\":1,\"2588\":2,\"2592\":2}}],[\"usercontroller\",{\"1\":{\"2916\":1}}],[\"userdaoimpl\",{\"1\":{\"2631\":2,\"2634\":2}}],[\"userdaoimplb\",{\"1\":{\"2594\":3,\"2595\":4,\"2596\":2,\"2597\":3,\"2598\":2,\"2599\":2}}],[\"userdaoimpla\",{\"1\":{\"2594\":3}}],[\"userdao\",{\"1\":{\"2594\":3,\"2595\":2,\"2596\":3,\"2597\":3,\"2598\":3,\"2599\":3,\"2631\":4,\"2649\":4}}],[\"user销毁\",{\"1\":{\"2571\":2}}],[\"user初始化\",{\"1\":{\"2571\":2}}],[\"user属性赋值\",{\"1\":{\"2571\":2}}],[\"user构造\",{\"1\":{\"2571\":2}}],[\"user06\",{\"1\":{\"2555\":2,\"2559\":2}}],[\"user05\",{\"1\":{\"2555\":2,\"2559\":2}}],[\"user04\",{\"1\":{\"2554\":1,\"2555\":2,\"2559\":2}}],[\"user03==user04\",{\"1\":{\"2554\":1}}],[\"user03\",{\"1\":{\"2554\":4,\"2555\":1,\"2558\":2}}],[\"user02\",{\"1\":{\"2554\":4,\"2555\":1,\"2558\":2}}],[\"user01==user02\",{\"1\":{\"2554\":1}}],[\"user01\",{\"1\":{\"2553\":2,\"2554\":1,\"2555\":1,\"2557\":2,\"2560\":2}}],[\"userpage\",{\"1\":{\"2286\":13}}],[\"userpwd\",{\"1\":{\"511\":2,\"512\":2,\"513\":2}}],[\"userquerywrapper\",{\"1\":{\"2253\":3,\"2254\":3,\"2255\":3,\"2256\":6,\"2257\":3,\"2258\":3}}],[\"userupdatewrapper\",{\"1\":{\"2245\":3,\"2246\":3,\"2250\":4}}],[\"user5\",{\"1\":{\"2128\":2}}],[\"userx\",{\"1\":{\"1980\":2,\"1981\":2}}],[\"usermapper\",{\"1\":{\"2191\":1,\"2192\":3,\"2203\":1,\"2204\":1,\"2205\":1,\"2206\":1,\"2208\":1,\"2209\":1,\"2210\":1,\"2211\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2245\":1,\"2246\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2250\":1,\"2917\":3,\"2918\":4}}],[\"usermap\",{\"1\":{\"1972\":2,\"1980\":1,\"1981\":1,\"2205\":4,\"2210\":4}}],[\"user>\",{\"1\":{\"1972\":2,\"2217\":1}}],[\"usertip\",{\"1\":{\"1579\":5,\"1586\":3}}],[\"user==null\",{\"1\":{\"2916\":1}}],[\"user=new\",{\"1\":{\"1972\":1}}],[\"user=propertiesutil\",{\"1\":{\"1288\":1}}],[\"user=\",{\"1\":{\"1155\":2}}],[\"user按钮添加其他新账户\",{\"1\":{\"922\":1}}],[\"userserviceimpl实现类\",{\"1\":{\"2595\":1,\"2596\":1,\"2597\":1,\"2598\":1}}],[\"userserviceimpl\",{\"1\":{\"2217\":1,\"2219\":1,\"2220\":1,\"2594\":5,\"2595\":1,\"2602\":5,\"2917\":1}}],[\"userservice\",{\"1\":{\"2216\":1,\"2217\":1,\"2219\":1,\"2220\":1,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2259\":1,\"2260\":2,\"2286\":1,\"2594\":1,\"2595\":1,\"2916\":3,\"2917\":2,\"2926\":3,\"2928\":3,\"2929\":3,\"2931\":3}}],[\"users=json\",{\"1\":{\"2128\":1}}],[\"users\",{\"0\":{\"1753\":1},\"1\":{\"674\":1,\"675\":1,\"773\":1,\"987\":1,\"1156\":2,\"1749\":1,\"1759\":1,\"1779\":2,\"1972\":5,\"1980\":1,\"1981\":1,\"2192\":2,\"2203\":2,\"2205\":2,\"2220\":2,\"2242\":2,\"2247\":2,\"2248\":2,\"2249\":2,\"2260\":4,\"2925\":4,\"2926\":3,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"userinfo\",{\"1\":{\"511\":9,\"512\":9,\"513\":9,\"2881\":2,\"2918\":1}}],[\"userid=null\",{\"1\":{\"2560\":1,\"2571\":1}}],[\"userid=6\",{\"1\":{\"2559\":1}}],[\"userid=5\",{\"1\":{\"2559\":1}}],[\"userid=4\",{\"1\":{\"2559\":1}}],[\"userid=3\",{\"1\":{\"2558\":1}}],[\"userid=2\",{\"1\":{\"2558\":1}}],[\"userid=1\",{\"1\":{\"2557\":1}}],[\"userid=\",{\"1\":{\"356\":1,\"2501\":1,\"2559\":2}}],[\"userid\",{\"1\":{\"356\":9,\"2552\":4,\"2557\":1,\"2558\":1,\"2560\":1,\"2571\":4,\"2631\":2,\"2830\":8}}],[\"user4\",{\"1\":{\"79\":2,\"2128\":2}}],[\"user3=new\",{\"1\":{\"1972\":1}}],[\"user3\",{\"1\":{\"79\":3,\"1972\":2,\"2128\":2}}],[\"user1=new\",{\"1\":{\"1972\":1}}],[\"user1用户只能在localhost这个ip登录mysql服务器\",{\"1\":{\"1115\":1}}],[\"user1\",{\"1\":{\"78\":2,\"79\":3,\"1115\":1,\"1116\":1,\"1972\":2,\"2128\":2,\"2591\":8,\"2592\":8}}],[\"user2=new\",{\"1\":{\"1972\":1}}],[\"user2用户可以在任何电脑上登录mysql服务器\",{\"1\":{\"1115\":1}}],[\"user2\",{\"1\":{\"77\":2,\"78\":2,\"79\":2,\"1115\":1,\"1116\":1,\"1972\":2,\"2128\":2}}],[\"useragent\",{\"1\":{\"1464\":1}}],[\"userage\",{\"1\":{\"75\":2}}],[\"username+\",{\"1\":{\"1831\":1}}],[\"usernamea\",{\"1\":{\"1242\":2,\"1252\":2}}],[\"username3\",{\"1\":{\"850\":2}}],[\"username2\",{\"1\":{\"850\":1,\"1330\":1}}],[\"username1\",{\"1\":{\"850\":1,\"2553\":1,\"2587\":2}}],[\"username=xiaoqiang\",{\"1\":{\"2571\":1}}],[\"username=<张三>\",{\"1\":{\"2560\":1}}],[\"username=高七\",{\"1\":{\"2559\":1}}],[\"username=赵六\",{\"1\":{\"2559\":1}}],[\"username=王五\",{\"1\":{\"2559\":1}}],[\"username=李四\",{\"1\":{\"2558\":1}}],[\"username=张三\",{\"1\":{\"2558\":1}}],[\"username=admin\",{\"1\":{\"2557\":1}}],[\"username=aaa\",{\"1\":{\"2159\":1}}],[\"username=root\",{\"1\":{\"2187\":1,\"2332\":1,\"2374\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"username=nana\",{\"1\":{\"1330\":2}}],[\"username=\",{\"1\":{\"356\":1,\"1241\":1,\"1759\":1,\"1976\":1,\"2061\":1,\"2559\":2}}],[\"username\",{\"0\":{\"2151\":1},\"1\":{\"75\":2,\"129\":1,\"133\":2,\"140\":1,\"356\":9,\"511\":2,\"512\":2,\"513\":2,\"1080\":1,\"1239\":1,\"1241\":9,\"1242\":3,\"1246\":2,\"1249\":2,\"1252\":4,\"1330\":1,\"1555\":3,\"1579\":6,\"1580\":1,\"1586\":3,\"1793\":1,\"1794\":1,\"1831\":2,\"1897\":1,\"1898\":3,\"1907\":1,\"1909\":3,\"1911\":1,\"1917\":1,\"1921\":1,\"1972\":4,\"1976\":1,\"1980\":4,\"1981\":4,\"1982\":2,\"2060\":1,\"2061\":9,\"2062\":3,\"2093\":1,\"2095\":2,\"2132\":2,\"2155\":1,\"2159\":3,\"2166\":6,\"2278\":1,\"2332\":5,\"2334\":7,\"2374\":3,\"2552\":4,\"2557\":1,\"2558\":1,\"2560\":1,\"2571\":8,\"2574\":1,\"2584\":2,\"2631\":2,\"2666\":2,\"2793\":4,\"2794\":3,\"2817\":2,\"2903\":2,\"2906\":2,\"2914\":1,\"2916\":2,\"2917\":3,\"2918\":1}}],[\"user\",{\"0\":{\"1911\":1},\"1\":{\"75\":3,\"77\":2,\"79\":3,\"110\":3,\"138\":3,\"146\":1,\"177\":1,\"356\":13,\"676\":1,\"726\":2,\"731\":2,\"773\":1,\"913\":1,\"925\":1,\"928\":4,\"1095\":1,\"1115\":3,\"1119\":1,\"1155\":2,\"1216\":1,\"1256\":1,\"1288\":3,\"1579\":2,\"1586\":2,\"1909\":5,\"1910\":5,\"1911\":1,\"1928\":1,\"1960\":1,\"1972\":18,\"1980\":3,\"1981\":3,\"1982\":1,\"2055\":1,\"2056\":3,\"2060\":2,\"2061\":4,\"2062\":6,\"2063\":3,\"2093\":1,\"2094\":1,\"2095\":7,\"2096\":3,\"2128\":15,\"2182\":2,\"2183\":2,\"2190\":1,\"2204\":3,\"2206\":4,\"2208\":4,\"2211\":4,\"2220\":2,\"2223\":1,\"2224\":2,\"2228\":4,\"2230\":2,\"2234\":2,\"2239\":1,\"2240\":4,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":3,\"2245\":7,\"2246\":7,\"2247\":1,\"2248\":1,\"2249\":1,\"2250\":7,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":1,\"2257\":1,\"2258\":3,\"2293\":1,\"2332\":1,\"2334\":3,\"2374\":1,\"2552\":3,\"2553\":12,\"2554\":10,\"2555\":9,\"2557\":6,\"2558\":12,\"2559\":18,\"2560\":6,\"2571\":12,\"2574\":7,\"2587\":2,\"2588\":2,\"2590\":6,\"2599\":1,\"2601\":1,\"2915\":1,\"2916\":2,\"2917\":2,\"2918\":2}}],[\"u用户名\",{\"1\":{\"1152\":1}}],[\"ucase\",{\"1\":{\"1089\":1}}],[\"uk\",{\"1\":{\"994\":2}}],[\"uid\",{\"1\":{\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1972\":1,\"2224\":1,\"2226\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2253\":1,\"2254\":3,\"2256\":1,\"2258\":1,\"2881\":2,\"2915\":1}}],[\"u><\",{\"1\":{\"1302\":1}}],[\"u><b><\",{\"1\":{\"1302\":1}}],[\"u>\",{\"1\":{\"873\":1,\"1187\":1,\"1302\":1}}],[\"udp\",{\"0\":{\"499\":1,\"514\":1}}],[\"ublic\",{\"1\":{\"371\":1}}],[\"u\",{\"1\":{\"356\":2,\"644\":1,\"873\":2,\"925\":1,\"1093\":2}}],[\"ur1\",{\"1\":{\"2823\":1}}],[\"uri可以在对应的tld文件中找到\",{\"1\":{\"2014\":1}}],[\"uri\",{\"1\":{\"1964\":1}}],[\"uri=\",{\"1\":{\"1964\":1,\"2014\":1,\"2016\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2028\":1,\"2031\":2}}],[\"uriencoding=\",{\"1\":{\"1812\":1}}],[\"uri所标识的资源\",{\"1\":{\"184\":1}}],[\"uroot\",{\"1\":{\"925\":1,\"928\":1,\"1121\":1,\"1155\":3}}],[\"url路径\",{\"0\":{\"2810\":1}}],[\"url地址\",{\"1\":{\"2158\":1,\"2161\":1,\"2165\":1}}],[\"url地址信息\",{\"1\":{\"1721\":1}}],[\"urldecoder\",{\"1\":{\"1889\":1,\"1892\":1}}],[\"urlpattern决定了位置绝对基准路径\",{\"1\":{\"1872\":1}}],[\"urlpatterns=\",{\"1\":{\"1917\":1,\"1921\":1,\"1925\":1}}],[\"urlpatterns影响相对路径\",{\"1\":{\"1874\":1}}],[\"urlpatterns\",{\"1\":{\"1849\":1,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1909\":1,\"1910\":1,\"1917\":1,\"1921\":1,\"1925\":1,\"2052\":2,\"2056\":1,\"2062\":1,\"2063\":1,\"2075\":1,\"2088\":1,\"2096\":1}}],[\"url映射方式\",{\"0\":{\"1845\":1}}],[\"url网络路径\",{\"1\":{\"1380\":1}}],[\"urlencoded\",{\"1\":{\"2146\":1,\"2153\":1,\"2155\":3}}],[\"urlencoder\",{\"1\":{\"1889\":1,\"1892\":1}}],[\"urlencode\",{\"1\":{\"1330\":1}}],[\"url错误\",{\"1\":{\"1216\":1}}],[\"url指定的域名还需要配置域名服务器或本地hosts文件\",{\"1\":{\"812\":1}}],[\"url=propertiesutil\",{\"1\":{\"1280\":1,\"1288\":1}}],[\"url=jdbc\",{\"1\":{\"1278\":1,\"2187\":1,\"2332\":1,\"2374\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"url=\",{\"1\":{\"810\":1,\"1976\":1,\"2322\":3}}],[\"url>\",{\"1\":{\"675\":1}}],[\"url\",{\"0\":{\"1835\":1,\"1836\":1,\"2135\":1,\"2322\":1,\"3131\":1},\"1\":{\"177\":1,\"210\":1,\"545\":1,\"1215\":2,\"1217\":2,\"1219\":2,\"1220\":2,\"1221\":2,\"1222\":2,\"1227\":2,\"1231\":2,\"1234\":2,\"1235\":2,\"1242\":2,\"1252\":2,\"1253\":5,\"1256\":6,\"1264\":3,\"1266\":3,\"1274\":2,\"1280\":3,\"1288\":3,\"1317\":1,\"1321\":1,\"1324\":2,\"1330\":1,\"1345\":2,\"1791\":1,\"1795\":1,\"1831\":2,\"1834\":2,\"1838\":1,\"1839\":1,\"1840\":1,\"1841\":1,\"1842\":1,\"1844\":5,\"1846\":2,\"1847\":2,\"1976\":1,\"1999\":5,\"2047\":2,\"2058\":1,\"2131\":1,\"2132\":2,\"2155\":1,\"2158\":2,\"2161\":4,\"2163\":3,\"2165\":4,\"2169\":1,\"2170\":1,\"2176\":1,\"2278\":1,\"2301\":2,\"2319\":1,\"2322\":1,\"2332\":2,\"2333\":2,\"2374\":2,\"2584\":2,\"2666\":2,\"2759\":1,\"2807\":1,\"2829\":1,\"2830\":1,\"2833\":1,\"2834\":2,\"2835\":1,\"2843\":5,\"2845\":1,\"2903\":2,\"2906\":2,\"2910\":1,\"2912\":1}}],[\"upwd=\",{\"1\":{\"2918\":1}}],[\"upwd\",{\"1\":{\"2881\":2,\"2915\":1}}],[\"up\",{\"1\":{\"1452\":1,\"1665\":1,\"1683\":2}}],[\"upper\",{\"1\":{\"1089\":1}}],[\"updating\",{\"1\":{\"922\":2}}],[\"update>\",{\"1\":{\"2365\":1,\"2414\":1,\"2453\":1,\"2456\":1}}],[\"updateempbycondtion\",{\"1\":{\"2453\":4,\"2456\":4}}],[\"updateemp\",{\"1\":{\"2364\":1,\"2365\":1,\"2366\":1,\"2667\":5,\"2674\":2}}],[\"updatewrapper\",{\"0\":{\"2259\":1}}],[\"updatewrapper<>\",{\"1\":{\"2245\":1,\"2246\":1,\"2250\":1,\"2259\":1}}],[\"updatewrapper<user>\",{\"1\":{\"2245\":1,\"2246\":1,\"2250\":1,\"2259\":1}}],[\"updaterows\",{\"1\":{\"2211\":2}}],[\"updateuser1\",{\"1\":{\"2211\":1}}],[\"updatebyid\",{\"0\":{\"2211\":1},\"1\":{\"2211\":1,\"2289\":1}}],[\"updatedept\",{\"1\":{\"2413\":1,\"2414\":4}}],[\"updated\",{\"1\":{\"1730\":2}}],[\"update等\",{\"1\":{\"1116\":1}}],[\"update\",{\"1\":{\"95\":2,\"928\":1,\"933\":1,\"973\":7,\"1000\":1,\"1001\":6,\"1116\":1,\"1155\":2,\"1221\":1,\"1233\":1,\"1234\":1,\"1253\":1,\"1777\":3,\"2179\":1,\"2239\":1,\"2240\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2245\":3,\"2246\":3,\"2247\":1,\"2248\":1,\"2250\":3,\"2255\":1,\"2259\":2,\"2289\":2,\"2336\":1,\"2365\":1,\"2414\":1,\"2417\":2,\"2437\":1,\"2453\":2,\"2456\":2,\"2480\":1,\"2674\":5,\"2679\":1,\"2680\":1,\"2697\":2}}],[\"upgrade\",{\"1\":{\"177\":1}}],[\"unrepeatableread\",{\"0\":{\"2691\":1}}],[\"unrecognized\",{\"1\":{\"208\":1}}],[\"unpackwars=\",{\"1\":{\"1767\":1}}],[\"unde\",{\"1\":{\"1606\":2}}],[\"undefined它也是一个保留字\",{\"1\":{\"1358\":1}}],[\"undefined\",{\"0\":{\"1358\":1},\"1\":{\"1352\":1}}],[\"unbind\",{\"1\":{\"1572\":3}}],[\"unshift\",{\"0\":{\"1398\":1},\"1\":{\"1398\":1}}],[\"uncommitted\",{\"0\":{\"2720\":1},\"1\":{\"1112\":1,\"1113\":2,\"2693\":2}}],[\"unchecked\",{\"1\":{\"328\":1,\"875\":1}}],[\"uname+\",{\"1\":{\"2857\":1}}],[\"unamecheckservlet\",{\"1\":{\"2114\":1,\"2115\":2,\"2131\":3,\"2169\":2,\"2170\":3,\"2171\":3}}],[\"unametext\",{\"1\":{\"2114\":3}}],[\"unameinfo\",{\"1\":{\"2114\":3,\"2131\":4,\"2169\":4,\"2170\":4,\"2171\":4}}],[\"unameinfodom\",{\"1\":{\"2114\":5}}],[\"unamei\",{\"1\":{\"2114\":2,\"2131\":4,\"2169\":4,\"2170\":4,\"2171\":4}}],[\"unamedom=document\",{\"1\":{\"2114\":1}}],[\"uname=\",{\"1\":{\"2112\":1,\"2114\":1,\"2131\":1,\"2169\":1,\"2918\":1}}],[\"uname6\",{\"1\":{\"1338\":1}}],[\"uname3\",{\"1\":{\"1333\":1}}],[\"uname2\",{\"1\":{\"1333\":1}}],[\"uname\",{\"1\":{\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1080\":1,\"1333\":1,\"1341\":2,\"1342\":2,\"2114\":1,\"2115\":3,\"2128\":1,\"2131\":4,\"2169\":1,\"2170\":6,\"2171\":6,\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2253\":1,\"2254\":1,\"2256\":1,\"2258\":1,\"2857\":1,\"2881\":2,\"2915\":1}}],[\"unmodified\",{\"1\":{\"734\":1}}],[\"untracked\",{\"1\":{\"734\":1}}],[\"unused\",{\"1\":{\"543\":2}}],[\"unknownhostexception\",{\"1\":{\"503\":2}}],[\"uniform\",{\"1\":{\"1324\":1}}],[\"unix平台为\",{\"1\":{\"1287\":1}}],[\"unix系统\",{\"1\":{\"920\":1}}],[\"unicode\",{\"1\":{\"1156\":3,\"1405\":2}}],[\"union\",{\"1\":{\"1065\":1}}],[\"union联合查询\",{\"0\":{\"1065\":1}}],[\"unique\",{\"0\":{\"990\":1},\"1\":{\"981\":1,\"993\":1,\"994\":4,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1134\":1}}],[\"unit\",{\"0\":{\"2966\":1},\"1\":{\"324\":1,\"356\":1,\"479\":2,\"1683\":1}}],[\"uninstall\",{\"1\":{\"95\":2,\"1682\":1}}],[\"unlock之间才可以使用\",{\"1\":{\"475\":1}}],[\"unlock\",{\"1\":{\"316\":2,\"478\":1,\"480\":1,\"490\":2}}],[\"unless=\",{\"1\":{\"145\":1}}],[\"unless\",{\"1\":{\"145\":1}}],[\"ut\",{\"1\":{\"1606\":4,\"2334\":3}}],[\"utcstring\",{\"1\":{\"1415\":1}}],[\"utc\",{\"1\":{\"942\":2,\"1415\":2}}],[\"utm\",{\"1\":{\"845\":3}}],[\"util标签使用\",{\"1\":{\"2567\":1}}],[\"util引入\",{\"1\":{\"2567\":1}}],[\"util=\",{\"1\":{\"2567\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"util和java\",{\"1\":{\"891\":1}}],[\"utildemo\",{\"1\":{\"371\":1}}],[\"util\",{\"0\":{\"370\":1,\"371\":1},\"1\":{\"287\":2,\"292\":1,\"352\":1,\"356\":3,\"370\":4,\"371\":1,\"372\":8,\"373\":4,\"378\":1,\"891\":2,\"1226\":1,\"1274\":1,\"1275\":2,\"1755\":1,\"1972\":2,\"1976\":1,\"1987\":2,\"1988\":2,\"1989\":2,\"1990\":2,\"1991\":2,\"2022\":1,\"2023\":1,\"2282\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2567\":5,\"2666\":4,\"2758\":4,\"2779\":4,\"2780\":4,\"2789\":4,\"2799\":1,\"2898\":4,\"2899\":5,\"2903\":4,\"2904\":5}}],[\"utils\",{\"1\":{\"114\":3}}],[\"utf8mb4\",{\"1\":{\"2417\":6}}],[\"utf8\",{\"1\":{\"1156\":6,\"1239\":2}}],[\"utf\",{\"1\":{\"65\":1,\"76\":1,\"422\":1,\"515\":2,\"516\":3,\"517\":3,\"518\":3,\"545\":1,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1293\":2,\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1322\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1482\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1548\":1,\"1549\":2,\"1552\":2,\"1555\":2,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1690\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1791\":1,\"1793\":1,\"1795\":1,\"1801\":2,\"1806\":1,\"1811\":1,\"1812\":1,\"1813\":1,\"1831\":1,\"1834\":1,\"1856\":2,\"1860\":2,\"1870\":1,\"1892\":2,\"1907\":1,\"1908\":1,\"1927\":2,\"1960\":1,\"1997\":2,\"1999\":1,\"2047\":1,\"2052\":1,\"2058\":1,\"2075\":1,\"2092\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":2,\"2132\":2,\"2155\":1,\"2159\":3,\"2166\":2,\"2169\":1,\"2170\":2,\"2171\":2,\"2176\":1,\"2267\":1,\"2278\":1,\"2279\":1,\"2312\":1,\"2374\":2,\"2485\":1,\"2487\":1,\"2501\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2746\":1,\"2757\":1,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2896\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1,\"2918\":1}}],[\"uat\",{\"1\":{\"1616\":1}}],[\"ua\",{\"1\":{\"76\":1,\"1690\":1}}],[\"解耦合方式参数注入\",{\"1\":{\"2794\":1}}],[\"解耦合方式\",{\"0\":{\"2794\":1},\"1\":{\"2841\":1}}],[\"解绑方法的运行\",{\"1\":{\"2081\":1}}],[\"解绑定事件\",{\"1\":{\"1572\":1}}],[\"解除绑定时触发\",{\"1\":{\"2081\":1}}],[\"解除绑定\",{\"1\":{\"1572\":1}}],[\"解码一个\",{\"1\":{\"1452\":1}}],[\"解雇日期\",{\"1\":{\"1211\":1}}],[\"解散班级\",{\"1\":{\"1001\":1}}],[\"解析后对应的名字class\",{\"1\":{\"2548\":1}}],[\"解析xml配置文件\",{\"0\":{\"2548\":1}}],[\"解析完以后可以在浏览器中将页面进行展示\",{\"1\":{\"1325\":1}}],[\"解析器解析sql为解析树\",{\"1\":{\"1250\":1}}],[\"解析为一个日期\",{\"1\":{\"1093\":1}}],[\"解析重复注解\",{\"1\":{\"904\":1}}],[\"解析url\",{\"0\":{\"130\":1}}],[\"解决了一个用户不同请求的数据共享问题\",{\"1\":{\"2923\":1,\"2924\":1}}],[\"解决了一次请求内的资源的数据共享问题\",{\"1\":{\"2922\":1}}],[\"解决幻读需要锁表\",{\"1\":{\"2692\":1}}],[\"解决不可重复读的问题只需锁住满足条件的行\",{\"1\":{\"2692\":1}}],[\"解决方式\",{\"1\":{\"1755\":1}}],[\"解决方案\",{\"0\":{\"826\":1}}],[\"解决控制台乱码\",{\"0\":{\"1755\":1},\"1\":{\"1810\":1}}],[\"解决冲突\",{\"0\":{\"783\":1}}],[\"解决重复输入密码问题\",{\"0\":{\"761\":1}}],[\"解决异常处理\",{\"0\":{\"17\":1}}],[\"解压就可使用\",{\"1\":{\"1740\":1}}],[\"解压目录d\",{\"1\":{\"675\":1}}],[\"解压maven的核心程序\",{\"1\":{\"674\":1}}],[\"解释器会把程序代码翻译成可执行的格式\",{\"1\":{\"1374\":2}}],[\"解释\",{\"1\":{\"307\":1}}],[\"解题流程\",{\"1\":{\"223\":1}}],[\"解构\",{\"1\":{\"75\":1}}],[\"解构数组赋值\",{\"1\":{\"75\":1}}],[\"解构赋值是对赋值运算符的扩展\",{\"1\":{\"75\":1}}],[\"解构赋值\",{\"0\":{\"75\":1}}],[\"声明类型的全限定名\",{\"1\":{\"2651\":1}}],[\"声明类似于\",{\"1\":{\"2625\":1}}],[\"声明方式如下\",{\"1\":{\"2635\":1}}],[\"声明式事务管理\",{\"0\":{\"2704\":1},\"1\":{\"2699\":1}}],[\"声明式事务\",{\"0\":{\"2524\":1}}],[\"声明servlet是否支持异步操作模式\",{\"1\":{\"1849\":1}}],[\"声明一个servlet\",{\"1\":{\"1791\":1,\"1795\":1}}],[\"声明一个脚注\",{\"1\":{\"1183\":1}}],[\"声明\",{\"1\":{\"696\":1}}],[\"声明和用法\",{\"0\":{\"643\":1}}],[\"声明阶段不能确定这个容器到底实际存的是什么类型的对象\",{\"1\":{\"233\":1}}],[\"声明对象简写\",{\"0\":{\"77\":1}}],[\"声明后不允许改变\",{\"1\":{\"74\":1}}],[\"声明的变量\",{\"1\":{\"73\":1}}],[\"声明的变量没有局部作用域\",{\"1\":{\"73\":1}}],[\"与springmvc一样我们需要新增\",{\"1\":{\"2904\":1}}],[\"与stringbuffer相似\",{\"1\":{\"397\":1}}],[\"与mandatory相反\",{\"1\":{\"2732\":1}}],[\"与b\",{\"1\":{\"2728\":1}}],[\"与接口的层级保持一致\",{\"1\":{\"2375\":1}}],[\"与现代化的工具以及各种支持类库结合使用时\",{\"1\":{\"1943\":1}}],[\"与状态cookie\",{\"1\":{\"1885\":1}}],[\"与其它大型框架不同的是\",{\"1\":{\"1611\":1}}],[\"与操作平台无关\",{\"1\":{\"1374\":1}}],[\"与主键绑定\",{\"1\":{\"991\":1}}],[\"与主表主键字段完全一样\",{\"1\":{\"983\":1}}],[\"与系统名相同\",{\"1\":{\"983\":1}}],[\"与应用程序彼此独立的数据集合\",{\"1\":{\"909\":1}}],[\"与项目的实际功能无关\",{\"1\":{\"770\":1}}],[\"与动态语言相对应的\",{\"1\":{\"573\":1}}],[\"与此同时\",{\"1\":{\"1946\":1}}],[\"与此\",{\"1\":{\"475\":1}}],[\"与采用synchronized相比\",{\"1\":{\"473\":1}}],[\"与内核的数量有关\",{\"1\":{\"452\":1}}],[\"与生俱来就更加擅长操作各种类\",{\"1\":{\"359\":1}}],[\"与hashset一样\",{\"1\":{\"290\":1}}],[\"与iterator以及iterable的关系\",{\"0\":{\"267\":1}}],[\"与listiterator\",{\"0\":{\"264\":1}}],[\"与offer一样都是添加操作\",{\"1\":{\"260\":1}}],[\"与arraylist的区别\",{\"0\":{\"258\":1}}],[\"与之转换承接\",{\"1\":{\"244\":1}}],[\"与原有的类的继承关系无关\",{\"1\":{\"242\":1}}],[\"与\",{\"0\":{\"226\":1,\"281\":1,\"370\":1,\"1042\":1,\"1376\":1,\"1377\":1,\"2125\":1,\"2559\":1},\"1\":{\"73\":1,\"242\":1,\"281\":1,\"363\":1,\"1250\":1,\"1411\":2,\"2185\":1,\"2289\":1}}],[\"只读\",{\"0\":{\"2714\":1}}],[\"只扫描component\",{\"1\":{\"2588\":1,\"2592\":1}}],[\"只扫描指定的标签注解\",{\"1\":{\"2588\":1}}],[\"只提供了映射文件\",{\"1\":{\"2371\":1}}],[\"只做增强不做改变\",{\"1\":{\"2179\":1}}],[\"只关心结果的取得\",{\"1\":{\"2043\":1}}],[\"只关心抽象方法的参数列表和返回值类型\",{\"1\":{\"835\":1}}],[\"只实例化一次\",{\"1\":{\"1826\":1}}],[\"只实现了javaee平台下部分技术标准\",{\"1\":{\"1736\":1}}],[\"只匹配input标签$\",{\"1\":{\"1555\":1}}],[\"只支持最新的浏览器\",{\"1\":{\"1542\":1}}],[\"只保留整数部分\",{\"1\":{\"1411\":1}}],[\"只包含其中一个\",{\"1\":{\"1195\":1}}],[\"只要像平时操作对象一样操作它就可以了\",{\"1\":{\"2198\":1}}],[\"只要在web\",{\"1\":{\"2081\":1}}],[\"只要前端进行变动即可\",{\"1\":{\"1946\":1}}],[\"只要前后端沟通约定好应用所需接口以及接口参数\",{\"1\":{\"1946\":1}}],[\"只要接口与数据格式不变\",{\"1\":{\"1946\":1}}],[\"只要您具备\",{\"1\":{\"1559\":1}}],[\"只要是这个元素的后代\",{\"1\":{\"1513\":1}}],[\"只要输入了\",{\"1\":{\"1439\":1}}],[\"只要计算机安装了支持javascript的浏览器\",{\"1\":{\"1374\":1}}],[\"只要有一个与其相适应的解释器就可以执行\",{\"1\":{\"1374\":2}}],[\"只要不混用即可\",{\"1\":{\"1352\":1}}],[\"只要部分列\",{\"1\":{\"956\":1}}],[\"只要重写方法有问题\",{\"1\":{\"541\":1,\"542\":1}}],[\"只需要添加对应的配置类\",{\"1\":{\"2285\":1}}],[\"只需要知道调用哪个存储过程就可以了\",{\"1\":{\"1146\":1}}],[\"只需要从客户端\",{\"1\":{\"1146\":1}}],[\"只需提出\",{\"1\":{\"930\":1}}],[\"只需传送请求方法和路径\",{\"1\":{\"157\":1}}],[\"只安装客户端\",{\"1\":{\"922\":1}}],[\"只安装服务器端\",{\"1\":{\"922\":1}}],[\"只取前n个数据\",{\"1\":{\"865\":1}}],[\"只取需要的方法即可\",{\"1\":{\"107\":1,\"110\":1}}],[\"只依据程序的需求规格说明书\",{\"1\":{\"529\":1}}],[\"只返回三个值\",{\"1\":{\"364\":1}}],[\"只不过该字符串用于表述一种规则\",{\"1\":{\"1585\":1}}],[\"只不过是linkedblockingqueue使用了两把锁\",{\"1\":{\"344\":1}}],[\"只不过响应体将不会被返回\",{\"1\":{\"182\":1}}],[\"只会执行一次查询\",{\"1\":{\"2435\":1}}],[\"只会删除一层目录\",{\"1\":{\"389\":1,\"390\":1}}],[\"只会替换相同的长度\",{\"1\":{\"300\":1}}],[\"只会创建一条tcp连接\",{\"1\":{\"166\":1}}],[\"只替换value不替换值\",{\"1\":{\"294\":1}}],[\"只有requestscope\",{\"1\":{\"2928\":1}}],[\"只有保证转出和转入的金额一致才能构成事务\",{\"1\":{\"2686\":1}}],[\"只有一个bean类\",{\"0\":{\"2655\":1}}],[\"只有执行update\",{\"1\":{\"2481\":1}}],[\"只有立即加载\",{\"1\":{\"2438\":1}}],[\"只有登录过之后可以反复进入welcome\",{\"1\":{\"2059\":1}}],[\"只有数学运算的功能\",{\"1\":{\"1987\":1}}],[\"只有在运行期才会有调用依赖关系\",{\"1\":{\"1948\":1}}],[\"只有在一些大型项目中才可能被使用\",{\"1\":{\"1943\":1}}],[\"只有请求转发不需要写项目部署名\",{\"1\":{\"1879\":1}}],[\"只有目标资源生成的响应结果才会被发送到客户端\",{\"1\":{\"1855\":1}}],[\"只有此处从1开始\",{\"1\":{\"1552\":1}}],[\"只有28\",{\"1\":{\"1372\":1}}],[\"只有放在form表单中的内容才会被收集并提交\",{\"1\":{\"1330\":1}}],[\"只有当a账户中的转出和b账户中转入操作都执行成功后才能看到a账户中的金额减少以及b账户中的金额增多\",{\"1\":{\"2687\":1}}],[\"只有当超过这个时间才进行记录\",{\"1\":{\"2301\":2}}],[\"只有当请求参数为datatype为jsonp或者script\",{\"1\":{\"2155\":1}}],[\"只有当请求时datatype为\",{\"1\":{\"2154\":1}}],[\"只有当前类\",{\"1\":{\"591\":1}}],[\"只有当浏览器使用持久http连接时才需要这个数据\",{\"1\":{\"204\":1}}],[\"只有有参数的才是元注解\",{\"1\":{\"551\":1}}],[\"只有上面条件不成立时\",{\"1\":{\"279\":1}}],[\"只能在已有事务的方法中被调用\",{\"1\":{\"2729\":1}}],[\"只能一个一个mapper标签的对xml进行注册\",{\"1\":{\"2340\":1}}],[\"只能调用一次\",{\"1\":{\"2248\":1}}],[\"只能传出一个自定义事件\",{\"1\":{\"1714\":1}}],[\"只能被动使用\",{\"1\":{\"1573\":1}}],[\"只能通过浏览器实现信息浏览或动态交互\",{\"1\":{\"1374\":1}}],[\"只能使用接口名调用\",{\"1\":{\"822\":1}}],[\"只能选择设置其中某一个\",{\"1\":{\"764\":1}}],[\"只能season内部自己调用\",{\"1\":{\"560\":1,\"561\":1}}],[\"只能存放引用数据类型的数据\",{\"1\":{\"219\":1}}],[\"只能声明一次\",{\"1\":{\"73\":1}}],[\"只是设置了json参数的ajax\",{\"1\":{\"2162\":1}}],[\"只是用来指导我们改善应用程序的架构\",{\"1\":{\"2034\":1}}],[\"只是不能修改\",{\"1\":{\"1333\":1}}],[\"只是当前的那个浏览器给你一个友好的显示\",{\"1\":{\"1330\":1}}],[\"只是在\",{\"1\":{\"2223\":1}}],[\"只是在数据中添加了状态标记\",{\"1\":{\"979\":1}}],[\"只是在使用位置声明\",{\"1\":{\"73\":1}}],[\"只是增加到栈空间\",{\"1\":{\"736\":1}}],[\"只是所有的线程都处于阻塞状态\",{\"1\":{\"484\":1}}],[\"只是查看的效果\",{\"1\":{\"346\":1}}],[\"只是返回了添加的数据\",{\"1\":{\"303\":1}}],[\"只是将user1指向user的空间地址\",{\"1\":{\"79\":1}}],[\"只涵盖基本数据类型\",{\"1\":{\"72\":1}}],[\"内层异常仅回滚内层\",{\"1\":{\"2737\":1}}],[\"内层\",{\"1\":{\"2737\":1}}],[\"内层nested\",{\"1\":{\"2737\":1}}],[\"内层回滚不影响外部\",{\"1\":{\"2737\":1}}],[\"内层点击\",{\"1\":{\"1656\":1,\"1658\":1,\"1659\":1,\"1661\":1}}],[\"内含分布式唯一\",{\"1\":{\"2179\":1}}],[\"内置\",{\"1\":{\"2179\":1}}],[\"内置全局拦截插件\",{\"1\":{\"2179\":1}}],[\"内置性能分析插件\",{\"1\":{\"2179\":1}}],[\"内置分页插件\",{\"1\":{\"2179\":1}}],[\"内置代码生成器\",{\"1\":{\"2179\":1}}],[\"内置通用\",{\"1\":{\"2179\":1}}],[\"内置的\",{\"1\":{\"1617\":1}}],[\"内置对象完全有jsp自行去维护\",{\"1\":{\"1966\":1}}],[\"内置对象\",{\"1\":{\"142\":1,\"1968\":1,\"1969\":1,\"1970\":1,\"1971\":1}}],[\"内置对象的方法可以直接调用\",{\"1\":{\"140\":1}}],[\"内边距全部设置为0\",{\"1\":{\"1529\":1}}],[\"内边距是透明的\",{\"1\":{\"1527\":1}}],[\"内边距\",{\"1\":{\"1527\":1}}],[\"内嵌式和链接式的引入不能使用同一标签\",{\"1\":{\"1380\":1}}],[\"内嵌式引入方式\",{\"1\":{\"1379\":1}}],[\"内嵌式\",{\"0\":{\"1379\":1}}],[\"内嵌框架\",{\"0\":{\"1321\":1},\"1\":{\"1321\":1}}],[\"内嵌框架是用于在网页中嵌入一个网页并让它在网页中显示\",{\"1\":{\"1320\":1}}],[\"内联样式\",{\"0\":{\"1470\":1},\"1\":{\"1470\":1,\"1473\":1}}],[\"内联超链接\",{\"0\":{\"1175\":1}}],[\"内联变量\",{\"0\":{\"631\":1}}],[\"内连接查询\",{\"0\":{\"1055\":1}}],[\"内\",{\"1\":{\"759\":1}}],[\"内行\",{\"1\":{\"656\":1}}],[\"内观\",{\"1\":{\"570\":1}}],[\"内省\",{\"1\":{\"570\":1}}],[\"内部bean\",{\"1\":{\"2563\":1}}],[\"内部的bean无需设置id\",{\"1\":{\"2563\":1}}],[\"内部通过大量io流形式发送页面内容\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"内部\",{\"1\":{\"1689\":1}}],[\"内部存放的是公用的组件\",{\"1\":{\"1686\":1}}],[\"内部也可以存放表达式\",{\"1\":{\"1617\":1}}],[\"内部是对data数据管理中心的属性进行渲染\",{\"1\":{\"1617\":1}}],[\"内部样式\",{\"0\":{\"1471\":1},\"1\":{\"1471\":1,\"1473\":1}}],[\"内部信息发生变化的同时\",{\"1\":{\"1439\":1}}],[\"内部保存了从1970年1月1日\",{\"1\":{\"898\":1}}],[\"内部类\",{\"1\":{\"581\":1}}],[\"内部类node就是链表的节点的对象对应的类\",{\"1\":{\"338\":1}}],[\"内部进行二次散列\",{\"1\":{\"294\":1}}],[\"内部相当于\",{\"1\":{\"294\":1}}],[\"内部比较器\",{\"0\":{\"274\":1},\"1\":{\"271\":1,\"287\":1}}],[\"内部遍历的时候用object即可\",{\"1\":{\"244\":1}}],[\"内存地址是一样的\",{\"1\":{\"393\":1}}],[\"内存分析\",{\"0\":{\"432\":1},\"1\":{\"302\":1}}],[\"内存结构原理\",{\"0\":{\"252\":1}}],[\"内存\",{\"1\":{\"224\":1}}],[\"内容编码类型默认为\",{\"1\":{\"2146\":1}}],[\"内容需要放置在列中\",{\"1\":{\"1601\":1}}],[\"内容发生改变了\",{\"1\":{\"1439\":1}}],[\"内容改变\",{\"1\":{\"1439\":1}}],[\"内容不区分大小写\",{\"1\":{\"973\":1}}],[\"内容不同\",{\"1\":{\"33\":1}}],[\"内容简单\",{\"1\":{\"163\":1}}],[\"内容\",{\"1\":{\"114\":2,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"1172\":2,\"1527\":1,\"2560\":2}}],[\"内容类型\",{\"1\":{\"88\":1}}],[\"内建函数等通用语法\",{\"1\":{\"72\":1}}],[\"内建对象\",{\"1\":{\"72\":1}}],[\"运算查询字段\",{\"1\":{\"1028\":1}}],[\"运算查询\",{\"0\":{\"1028\":1},\"1\":{\"1028\":1}}],[\"运算符的分类\",{\"0\":{\"1985\":1}}],[\"运算符和对象\",{\"1\":{\"1372\":1}}],[\"运算符\",{\"0\":{\"1360\":1},\"1\":{\"72\":1,\"1360\":1}}],[\"运行结果\",{\"1\":{\"2571\":1}}],[\"运行代码\",{\"0\":{\"2293\":1}}],[\"运行效果\",{\"1\":{\"2286\":1,\"2584\":1}}],[\"运行原理\",{\"1\":{\"1746\":1,\"1747\":1}}],[\"运行shutdown\",{\"1\":{\"1742\":1}}],[\"运行startup\",{\"1\":{\"1741\":1}}],[\"运行快\",{\"1\":{\"1374\":2}}],[\"运行信息\",{\"1\":{\"1282\":1}}],[\"运行\",{\"0\":{\"670\":1},\"1\":{\"1930\":1}}],[\"运行项目\",{\"0\":{\"601\":1,\"2753\":1}}],[\"运行与调试\",{\"0\":{\"599\":1}}],[\"运行指定方法\",{\"1\":{\"590\":1}}],[\"运行时结构不可变的语言就是静态语言\",{\"1\":{\"573\":1}}],[\"运行时被读取\",{\"1\":{\"533\":1}}],[\"运行时异常\",{\"1\":{\"30\":2,\"33\":1}}],[\"运行时异常runtimeexception\",{\"1\":{\"29\":1}}],[\"运行线程\",{\"1\":{\"450\":1}}],[\"运行程序\",{\"0\":{\"104\":1}}],[\"运行服务器程序\",{\"1\":{\"88\":1}}],[\"运行并调试\",{\"0\":{\"669\":1,\"3046\":1},\"1\":{\"44\":1}}],[\"关联查询\",{\"0\":{\"2421\":1}}],[\"关联tomcat容器\",{\"1\":{\"1775\":1}}],[\"关联条件\",{\"1\":{\"1060\":1,\"1061\":1,\"1063\":1,\"1064\":1}}],[\"关系运算符\",{\"0\":{\"1988\":1},\"1\":{\"1988\":1}}],[\"关系选择器\",{\"0\":{\"1511\":1,\"1513\":1},\"1\":{\"1513\":2}}],[\"关系\",{\"1\":{\"1248\":1,\"1258\":1}}],[\"关系型数据库和非关系数据库\",{\"0\":{\"919\":1}}],[\"关系型数据库和非关系型数据库\",{\"1\":{\"916\":1}}],[\"关系型数据库和非关系型数据库四种\",{\"1\":{\"916\":1}}],[\"关系型数据库在超大规模和高并发的web2\",{\"1\":{\"918\":1}}],[\"关系型数据库是目前主流的数据库技术\",{\"1\":{\"917\":1}}],[\"关系型数据库模型是将复杂的数据结构用较为简单的二元关系\",{\"1\":{\"917\":1}}],[\"关系型数据库\",{\"0\":{\"917\":1}}],[\"关系图\",{\"0\":{\"268\":1}}],[\"关于mybatis的mapper使用\",{\"1\":{\"2918\":1}}],[\"关于过滤器\",{\"1\":{\"2912\":1}}],[\"关于监听器\",{\"1\":{\"2911\":1}}],[\"关于域对象\",{\"1\":{\"2911\":1}}],[\"关于三大组件与执行原理\",{\"1\":{\"2901\":1}}],[\"关于包扫描\",{\"1\":{\"2900\":1}}],[\"关于依赖\",{\"1\":{\"2538\":1}}],[\"关于面向对象的java语言\",{\"1\":{\"2198\":1}}],[\"关于表单状态选择\",{\"0\":{\"1555\":1}}],[\"关于表单项选择\",{\"0\":{\"1554\":1}}],[\"关于jquery的使用需要先导入jquery的js文件\",{\"1\":{\"1546\":1}}],[\"关于日期对象格式化处理\",{\"1\":{\"1417\":1}}],[\"关于\",{\"0\":{\"1223\":1,\"1361\":1,\"1362\":1,\"1363\":1,\"1364\":1}}],[\"关于资料库\",{\"0\":{\"1158\":1}}],[\"关于sql的关键字和函数名等不区分大小写\",{\"1\":{\"1156\":1}}],[\"关于同步监视器\",{\"0\":{\"466\":1}}],[\"关于二叉树的遍历\",{\"1\":{\"288\":1}}],[\"关键词\",{\"1\":{\"92\":1}}],[\"关键字说明\",{\"1\":{\"1115\":1,\"1116\":1}}],[\"关键字\",{\"1\":{\"72\":1,\"973\":1,\"1148\":2,\"1372\":1,\"2866\":1}}],[\"关闭链接\",{\"1\":{\"2282\":1,\"2374\":1}}],[\"关闭页面\",{\"1\":{\"1460\":1}}],[\"关闭浏览器窗口\",{\"1\":{\"1452\":1}}],[\"关闭窗口\",{\"1\":{\"1372\":1}}],[\"关闭连接\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"关闭\",{\"0\":{\"1742\":1},\"1\":{\"1223\":1}}],[\"关闭sqlsessionfactory对象\",{\"1\":{\"2281\":1}}],[\"关闭statement对象和connection对象的语法形式为\",{\"1\":{\"1223\":1}}],[\"关闭socket资源\",{\"1\":{\"26\":1}}],[\"关闭resultset\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"关闭安全模式\",{\"1\":{\"1191\":1}}],[\"关闭mysql57服务\",{\"1\":{\"1155\":1}}],[\"关闭发送端接口\",{\"1\":{\"515\":1,\"516\":1,\"517\":1,\"518\":1}}],[\"关闭锁\",{\"1\":{\"480\":1}}],[\"关闭流\",{\"1\":{\"405\":3,\"409\":1,\"509\":2,\"510\":2,\"511\":2,\"512\":2,\"513\":2}}],[\"关闭空闲连接\",{\"1\":{\"355\":1}}],[\"关闭取数据的锁\",{\"1\":{\"344\":1}}],[\"关闭放数据的锁\",{\"1\":{\"344\":1}}],[\"关闭线程\",{\"1\":{\"305\":1,\"306\":1}}],[\"关闭io流资源\",{\"1\":{\"26\":1}}],[\"关闭数据库资源resultset\",{\"1\":{\"1210\":1,\"1215\":1}}],[\"关闭数据库资源\",{\"1\":{\"26\":1}}],[\"但由于url中存在参数\",{\"1\":{\"2929\":1}}],[\"但使用\",{\"1\":{\"2878\":1}}],[\"但使用jquery能大幅提高开发效率\",{\"1\":{\"1541\":1}}],[\"但需要遵循下列规则\",{\"1\":{\"2763\":1}}],[\"但外部事务回滚将导致嵌套事务回滚\",{\"1\":{\"2733\":1}}],[\"但并不是所有的操作序列都可以称为事务\",{\"1\":{\"2684\":1}}],[\"但出现了缓存命中的提示\",{\"1\":{\"2479\":1}}],[\"但mybatis\",{\"1\":{\"2437\":1}}],[\"但在实体类中叫做name\",{\"1\":{\"2422\":1}}],[\"但在后续的代码中并没有修正\",{\"1\":{\"252\":1,\"293\":1}}],[\"但必须pojo类的属性名和查询到的数据库表的字段名一致\",{\"1\":{\"2419\":1}}],[\"但首先\",{\"1\":{\"2319\":1}}],[\"但仅部分浏览器支持\",{\"1\":{\"2136\":1}}],[\"但处理订购产品的方式是一样的\",{\"1\":{\"2037\":1}}],[\"但如果是由于外部原因导致的数据库故障\",{\"1\":{\"2688\":1}}],[\"但如果不一致\",{\"1\":{\"2226\":1}}],[\"但如果此引擎的连接器收到一个发往非非明确定义虚拟主机的请求时则需要将此请求发往一个默认的虚拟主机进行处理\",{\"1\":{\"1766\":1}}],[\"但如果系统中存在几十上百的jar包\",{\"1\":{\"652\":1}}],[\"但绝大多数情况下servlet只用\",{\"1\":{\"1548\":1}}],[\"但绝大多数情\",{\"1\":{\"1548\":1}}],[\"但不支持继承和多态\",{\"1\":{\"1376\":1}}],[\"但却没有赋值\",{\"1\":{\"1358\":1}}],[\"但仍允许应用程序继续运行warn\",{\"1\":{\"1284\":1}}],[\"但只是每次插入的值不同\",{\"1\":{\"1250\":1}}],[\"但校对速度稍慢\",{\"1\":{\"1156\":1}}],[\"但准确度稍差\",{\"1\":{\"1156\":1}}],[\"但允许有空值\",{\"1\":{\"1129\":1}}],[\"但对数据的增\",{\"1\":{\"1128\":1}}],[\"但约束与索引除外\",{\"0\":{\"1077\":1}}],[\"但结果没有意义\",{\"1\":{\"1028\":1}}],[\"但innodb不能识别\",{\"1\":{\"1003\":1}}],[\"但具体是如何操作的呢\",{\"1\":{\"930\":1}}],[\"但其实有的时候jar包多了项目仍然无法正常工作\",{\"1\":{\"652\":1}}],[\"但其根本思想是一致的\",{\"1\":{\"294\":1}}],[\"但java可以称之为\",{\"1\":{\"573\":1}}],[\"但每个内核中还是单线程的\",{\"1\":{\"452\":1}}],[\"但每个单独的网页文件的请求和应答仍然需要使用各自的连接\",{\"1\":{\"164\":1}}],[\"但效率低\",{\"1\":{\"298\":1}}],[\"但效率高\",{\"1\":{\"258\":1}}],[\"但有且只有一个\",{\"1\":{\"290\":1}}],[\"但有时也是泛指\",{\"1\":{\"71\":1}}],[\"但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果\",{\"1\":{\"164\":1}}],[\"但服务器必须按照客户端请求的先后顺序依次回送相应的结果\",{\"1\":{\"164\":1}}],[\"但是当前的目录看起来还是很混乱\",{\"1\":{\"2790\":1}}],[\"但是当运行java程序时\",{\"1\":{\"553\":1}}],[\"但是也是在正常使用的\",{\"1\":{\"2777\":1}}],[\"但是此时我们访问时会发现出现错误\",{\"1\":{\"2764\":1}}],[\"但是可能出现幻像读\",{\"1\":{\"2722\":1}}],[\"但是可能会出现不可重复读和幻像读\",{\"1\":{\"2721\":1}}],[\"但是可以继续使用param\",{\"1\":{\"2390\":1,\"2403\":1}}],[\"但是可以写多个$\",{\"1\":{\"1546\":1}}],[\"但是可以通过事务回滚\",{\"1\":{\"975\":1}}],[\"但是可以保证内部的数据不被破坏\",{\"1\":{\"311\":1}}],[\"但是b账户并没有成功存款\",{\"1\":{\"2698\":1}}],[\"但是不推荐\",{\"1\":{\"2587\":1}}],[\"但是不建议改\",{\"1\":{\"294\":1}}],[\"但是事实上\",{\"1\":{\"2538\":1}}],[\"但是事实上是一种后台技术\",{\"1\":{\"1929\":1}}],[\"但是安全\",{\"1\":{\"2481\":1}}],[\"但是后续判断的语句将不再执行\",{\"1\":{\"2449\":1}}],[\"但是后续的被执行的线程也无法执行同步代码块\",{\"1\":{\"468\":1}}],[\"但是却是基于强大的ognl表达式实现的\",{\"1\":{\"2441\":1}}],[\"但是却是方法的内部\",{\"1\":{\"472\":1}}],[\"但是增加的属性都写到一个实体类中\",{\"1\":{\"2440\":1}}],[\"但是除此之外这个函数也是可以跨域使用的\",{\"1\":{\"2163\":1}}],[\"但是无法验证用户名是否已经存在\",{\"1\":{\"2111\":1}}],[\"但是仍然避免不了还是要在页面中书写一些java代码\",{\"1\":{\"2010\":1}}],[\"但是jsp的编码风格是在html中嵌入少量java代码\",{\"1\":{\"1953\":1}}],[\"但是jsp和servlet关联比较紧密\",{\"1\":{\"1950\":1}}],[\"但是js中定义函数的语法相对简单很多\",{\"1\":{\"1368\":1}}],[\"但是代码分别存放在两个工程中\",{\"1\":{\"1940\":1}}],[\"但是在ajax这样异步的程序\",{\"1\":{\"2106\":1}}],[\"但是在线人数要保存在application域中\",{\"1\":{\"2088\":1}}],[\"但是在有些时候我们是需要服务端能够记录客户端浏览器的访问状态的\",{\"1\":{\"1882\":1}}],[\"但是在实现类中仍有大量的jdbc代码重复\",{\"1\":{\"1264\":1}}],[\"但是相同的url不能同时映射到两个servlet中\",{\"1\":{\"1845\":1}}],[\"但是需要使用紧耦合的方式获取参数\",{\"1\":{\"2805\":1}}],[\"但是需要大量的字符串拼接处理\",{\"1\":{\"1928\":1}}],[\"但是需要将servletreuqest\",{\"1\":{\"1819\":1}}],[\"但是需要注意的是\",{\"1\":{\"1216\":1}}],[\"但是原理不一样\",{\"1\":{\"1624\":1}}],[\"但是$\",{\"1\":{\"1546\":1}}],[\"但是功能比window\",{\"1\":{\"1546\":1}}],[\"但是一般我们会配合使用父级为相对定位\",{\"1\":{\"1535\":1}}],[\"但是一般我们会进行人为的控制\",{\"1\":{\"1510\":1}}],[\"但是其内部ajax请求的资源的是\",{\"1\":{\"2169\":1}}],[\"但是其他操作都可以\",{\"1\":{\"1333\":1}}],[\"但是其对硬件的要求很高\",{\"1\":{\"919\":1}}],[\"但是浏览器也不会报错\",{\"1\":{\"1299\":1}}],[\"但是它是jdbc中查询数据的一种手段\",{\"1\":{\"1225\":1}}],[\"但是如果写就要写对\",{\"1\":{\"2352\":1}}],[\"但是如果每个盒子都有自己的点击事件\",{\"1\":{\"1656\":1}}],[\"但是如果\",{\"1\":{\"1216\":1}}],[\"但是如果系统经常会访问\",{\"1\":{\"1046\":1}}],[\"但是对于数据值是否区分大小写\",{\"1\":{\"1156\":1}}],[\"但是要知道\",{\"1\":{\"1824\":1}}],[\"但是要注意子表的外键列不能为not\",{\"1\":{\"1003\":1}}],[\"但是要传入对象\",{\"1\":{\"587\":1,\"588\":1}}],[\"但是数据类型必须一样\",{\"1\":{\"1002\":1}}],[\"但是拆分出来的表与表之间是有着关联关系的\",{\"1\":{\"997\":1}}],[\"但是两者还是有很多区别的\",{\"1\":{\"976\":1}}],[\"但是用起来非常繁琐\",{\"1\":{\"919\":1}}],[\"但是由于注解功能受限\",{\"1\":{\"2441\":1}}],[\"但是由于httpsession对象的生命周期不固定\",{\"1\":{\"1903\":1}}],[\"但是由于其并不提供sql支持\",{\"1\":{\"919\":1}}],[\"但是由于元素不会均匀分布\",{\"1\":{\"296\":1}}],[\"但是map接口并没有实现collection接口\",{\"1\":{\"859\":1}}],[\"但是owner变成自己\",{\"1\":{\"757\":1}}],[\"但是是否能够传递还要取决于被传递者的使用范围\",{\"1\":{\"693\":1}}],[\"但是是值可以重复\",{\"1\":{\"290\":1}}],[\"但是假如你没有配置的话\",{\"1\":{\"676\":1}}],[\"但是合理的运用反射\",{\"1\":{\"597\":1}}],[\"但是反射是针对字符串编程\",{\"1\":{\"567\":1}}],[\"但是加上了这个注解生成的文档中就会带着注解了\",{\"1\":{\"555\":1}}],[\"但是lock锁是api级别的\",{\"1\":{\"473\":1}}],[\"但是没有封装\",{\"1\":{\"1403\":1}}],[\"但是没有访问修饰符也没有返回值类型关键字和异常列表\",{\"1\":{\"1368\":1}}],[\"但是没有锁住使用其他同步监视器的代码块\",{\"1\":{\"468\":1}}],[\"但是没有开锁open\",{\"1\":{\"467\":1}}],[\"但是从jvm的层面来看\",{\"1\":{\"453\":1}}],[\"但是我们仍需要了解sqlsession的基本api实现crud的功能以及参数的传递\",{\"1\":{\"2336\":1}}],[\"但是我们可以需要使用鼠标右键\",{\"1\":{\"1671\":1}}],[\"但是我们自定义的枚举类的上层父类\",{\"1\":{\"561\":1}}],[\"但是我们不可以获取到文件\",{\"1\":{\"400\":1}}],[\"但是我们还是需要去了解他\",{\"1\":{\"256\":1}}],[\"但是这样子我们并不推荐\",{\"1\":{\"2777\":1}}],[\"但是这就奇怪了\",{\"1\":{\"2492\":1}}],[\"但是这种开发形式存在以下缺点\",{\"1\":{\"2371\":1}}],[\"但是这种写法并不好\",{\"1\":{\"384\":1}}],[\"但是这会导致每次创建一个新的工程就需要将jar包重复复制到lib目录下\",{\"1\":{\"649\":1}}],[\"但是这个所谓的\",{\"1\":{\"1145\":1}}],[\"但是这个类型是什么呢\",{\"1\":{\"238\":1}}],[\"但是这个网站在国内速度很慢\",{\"1\":{\"93\":1}}],[\"但是目前来说在实际开发中我们是淘汰使用的\",{\"1\":{\"304\":1}}],[\"但是设计者觉得没有必要删除\",{\"1\":{\"294\":1}}],[\"但是abreastmap实现类也是实现了map接口\",{\"1\":{\"293\":1}}],[\"但是abreastlist实现类也是实现了list接口\",{\"1\":{\"252\":1}}],[\"但是只能有一个null\",{\"1\":{\"277\":1}}],[\"但是现在确定的是这个类型一定是一个引用数据类型\",{\"1\":{\"238\":1}}],[\"但是缺点就是容易造成占用资源不释放的问题\",{\"1\":{\"159\":1}}],[\"但是\",{\"1\":{\"23\":1,\"100\":1,\"234\":1,\"702\":1,\"919\":1,\"1114\":1,\"1145\":1,\"1691\":1}}],[\"等后缀\",{\"1\":{\"2454\":1}}],[\"等前缀\",{\"1\":{\"2454\":1}}],[\"等方法实现\",{\"1\":{\"2336\":1}}],[\"等多种数据库\",{\"1\":{\"2179\":1}}],[\"等多种方式的渲染\",{\"1\":{\"61\":1}}],[\"等级\",{\"1\":{\"2022\":1}}],[\"等价于\",{\"1\":{\"1451\":1,\"2161\":1,\"2163\":1,\"2165\":1}}],[\"等同符\",{\"1\":{\"1364\":1}}],[\"等同于修改\",{\"1\":{\"290\":1}}],[\"等值符\",{\"1\":{\"1363\":1}}],[\"等于\",{\"1\":{\"364\":2,\"1030\":1}}],[\"等待客户端发送请求的超时时间\",{\"1\":{\"1765\":1}}],[\"等待响应\",{\"1\":{\"509\":1}}],[\"等待的绝对时间\",{\"1\":{\"479\":1}}],[\"等待池的api\",{\"0\":{\"479\":1}}],[\"等待池\",{\"1\":{\"338\":2}}],[\"等待队列\",{\"1\":{\"328\":1}}],[\"等\",{\"1\":{\"178\":1,\"1028\":1,\"1355\":1,\"2155\":1,\"2516\":1,\"2526\":1}}],[\"等所有的文件都下载成功后\",{\"1\":{\"173\":1}}],[\"等概念\",{\"1\":{\"100\":1}}],[\"等等\",{\"1\":{\"71\":1,\"2740\":1}}],[\"涵盖了\",{\"1\":{\"71\":1}}],[\"也存在许多静态文件\",{\"1\":{\"2782\":1}}],[\"也成为传统dao模式\",{\"1\":{\"2336\":1}}],[\"也可自定义拦截规则\",{\"1\":{\"2179\":1}}],[\"也可以根据名称注入\",{\"1\":{\"2593\":1}}],[\"也可以根据比较器进行指定排序\",{\"1\":{\"868\":1}}],[\"也可以采用\",{\"1\":{\"2301\":1}}],[\"也可以修改httpservletresponse头和数据\",{\"1\":{\"1995\":1}}],[\"也可以修改httpservletrequest\",{\"1\":{\"1995\":1}}],[\"也可以对httpservletresponse进行后处理\",{\"1\":{\"1994\":1}}],[\"也可以实现引入\",{\"1\":{\"1961\":1}}],[\"也可以说dom也是归bom管的\",{\"1\":{\"1447\":1}}],[\"也可以在\",{\"1\":{\"2332\":1}}],[\"也可以在转发之后\",{\"1\":{\"1860\":1}}],[\"也可以在其后指定格式\",{\"1\":{\"1287\":1}}],[\"也可以在github上直接进行修改\",{\"1\":{\"760\":1}}],[\"也可以将其看作相互之间有关系的sql命令组织在一起形成的一个小程序\",{\"1\":{\"1145\":1}}],[\"也可以自定义唯一性约束名\",{\"1\":{\"992\":1}}],[\"也可以多个列组合值的唯一\",{\"1\":{\"992\":1}}],[\"也可以是对象格式\",{\"1\":{\"2155\":1}}],[\"也可以是表达式moustache\",{\"1\":{\"1617\":1}}],[\"也可以是多个字段\",{\"1\":{\"985\":1}}],[\"也可以是宇符\",{\"1\":{\"226\":2}}],[\"也可以用\",{\"1\":{\"927\":1}}],[\"也可以理解为lambda表达式的缩写形式\",{\"1\":{\"833\":1}}],[\"也可以重写接口默认方法\",{\"1\":{\"822\":1}}],[\"也可以通过email发送url地址告知\",{\"1\":{\"760\":1}}],[\"也可以直接打开文件进行设置\",{\"1\":{\"726\":1}}],[\"也可以按照旁边的提示使用ctrl+shift+u快速切换\",{\"1\":{\"605\":1}}],[\"也可以使用相对路径\",{\"1\":{\"1768\":1}}],[\"也可以使用git\",{\"1\":{\"734\":1}}],[\"也可以使用alt\",{\"1\":{\"603\":1}}],[\"也可以使用特有的方法\",{\"1\":{\"249\":1,\"276\":1}}],[\"也可以利用反射的原理\",{\"1\":{\"466\":1}}],[\"也可以创建一个专门的同步监视器\",{\"1\":{\"466\":1}}],[\"也可以配置项目的npm运行命令\",{\"1\":{\"114\":1}}],[\"也更为安全\",{\"1\":{\"2162\":1}}],[\"也更容易控制\",{\"1\":{\"1209\":1}}],[\"也有可能不再同一个web服务器上\",{\"1\":{\"1863\":1}}],[\"也ok\",{\"1\":{\"1777\":1}}],[\"也叫作fmt标签\",{\"1\":{\"2027\":1}}],[\"也叫\",{\"1\":{\"1617\":1}}],[\"也叫元数据\",{\"1\":{\"532\":1}}],[\"也完全能够为复杂的单页应用提供驱动\",{\"1\":{\"1611\":1,\"1943\":1}}],[\"也能在其他操作系\",{\"1\":{\"1548\":1}}],[\"也称为最左特性\",{\"1\":{\"1135\":1}}],[\"也要保存一下索引文件\",{\"1\":{\"1128\":1}}],[\"也会包含在a\",{\"1\":{\"2728\":1}}],[\"也会动态修改数组的长度\",{\"1\":{\"1386\":1}}],[\"也会直接更改数组的长度\",{\"1\":{\"1386\":1}}],[\"也会直接删除主键索引\",{\"1\":{\"986\":1}}],[\"也会有\",{\"1\":{\"1198\":1}}],[\"也会变动\",{\"1\":{\"427\":1}}],[\"也不能相互影响\",{\"1\":{\"2687\":1}}],[\"也不要在使用req和resp对象做其他操作了\",{\"1\":{\"1856\":1}}],[\"也不必在订单信息表中多次输入客户信息的内容\",{\"1\":{\"1048\":1}}],[\"也不允许出现空值\",{\"1\":{\"986\":1}}],[\"也不限制超过列的指定宽度的值的显示\",{\"1\":{\"939\":1}}],[\"也不建议勾选\",{\"1\":{\"676\":1}}],[\"也锁住所有使用该锁的所有代码块\",{\"1\":{\"468\":2}}],[\"也就是没有刷新间隔\",{\"1\":{\"2481\":1}}],[\"也就是\",{\"1\":{\"2316\":1,\"2765\":1}}],[\"也就是通过条件构造器来处理\",{\"1\":{\"2236\":1}}],[\"也就是通常所说的页面或者是界面\",{\"1\":{\"2034\":1}}],[\"也就是在scripts这个对象中的key就是npm\",{\"1\":{\"1687\":1}}],[\"也就是给你一套vue的结构\",{\"1\":{\"1682\":1}}],[\"也就是用户可以看到的内容\",{\"1\":{\"1295\":1}}],[\"也就是发送一个批sql到数据库\",{\"1\":{\"1230\":1}}],[\"也就是我们所说的公历\",{\"1\":{\"892\":1}}],[\"也就是说a\",{\"1\":{\"2728\":1}}],[\"也就是说事务发生前和发生后\",{\"1\":{\"2686\":1}}],[\"也就是说在一个数据库表中\",{\"1\":{\"1047\":1}}],[\"也就是说\",{\"1\":{\"859\":1,\"1217\":1,\"1249\":1,\"1424\":1,\"1425\":2,\"1450\":1,\"1932\":1,\"1933\":1,\"2687\":1,\"2729\":1}}],[\"也就是说队列中元素的顺序是按到期时间排序的\",{\"1\":{\"354\":1}}],[\"也就是加锁\",{\"1\":{\"462\":1}}],[\"也都需要借助队列结构实现合理和优化的分配\",{\"1\":{\"321\":1}}],[\"也是高级程序员面试中经常会问到的源码\",{\"1\":{\"2528\":1}}],[\"也是cache接口的默认实现\",{\"1\":{\"2492\":1}}],[\"也是默认格式\",{\"1\":{\"2155\":1}}],[\"也是父子组件之间唯一的传值方式\",{\"1\":{\"1710\":1}}],[\"也是基于bootstrap源码进行性能优化而来\",{\"1\":{\"1557\":1}}],[\"也是有限制\",{\"1\":{\"1145\":1}}],[\"也是一个架子\",{\"1\":{\"2197\":1}}],[\"也是一个泛指\",{\"1\":{\"71\":1}}],[\"也是一种加密方式\",{\"1\":{\"1095\":1}}],[\"也是甲骨文公司的核心产品\",{\"1\":{\"919\":1}}],[\"也是比较常用的方式\",{\"1\":{\"829\":1}}],[\"也是为了接口的扩展性\",{\"1\":{\"819\":1}}],[\"也是node\",{\"1\":{\"90\":1}}],[\"也方便了复杂对象中数据字段获取\",{\"1\":{\"75\":1}}],[\"也标志着百度开源正式进入开源发展的快车道\",{\"1\":{\"61\":1}}],[\"因而通信速度很快\",{\"1\":{\"157\":1}}],[\"因为使用response对象在单元方法中直接对此次请求进行了响应\",{\"1\":{\"2862\":1}}],[\"因为rest模式的web服务与复杂的soap和xml\",{\"1\":{\"2823\":1}}],[\"因为请求中的参数以及controller处理单元返回的参数有多种格式\",{\"1\":{\"2772\":1}}],[\"因为二级缓存中可能会有其他程序已经查出来的数据\",{\"1\":{\"2471\":1}}],[\"因为满足了一个条件后\",{\"1\":{\"2450\":1}}],[\"因为已经跳转到新的页面\",{\"1\":{\"2103\":1}}],[\"因为多个视图能共享一个模型\",{\"1\":{\"2037\":1}}],[\"因为模型与控制器和视图相分离\",{\"1\":{\"2036\":1}}],[\"因为jsp的本质是servlet\",{\"1\":{\"1966\":1}}],[\"因为jsp本质就是servlet\",{\"1\":{\"1951\":1}}],[\"因为jsp在执行第一次后\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"因为这会影响请求转发和响应重定向的相对路径写法\",{\"1\":{\"1879\":1}}],[\"因为这个数据是还没有提交的数据\",{\"1\":{\"2690\":1}}],[\"因为这个枚举类底层没有属性\",{\"1\":{\"561\":1}}],[\"因为这个方法的具体实现不是通过java写的\",{\"1\":{\"371\":1}}],[\"因为这个方法是静态的\",{\"1\":{\"371\":1}}],[\"因为这个0\",{\"1\":{\"294\":1}}],[\"因为这个时候除了元素的类型不确定\",{\"1\":{\"233\":1}}],[\"因为如果没有使用动态属性\",{\"1\":{\"1649\":1}}],[\"因为主要区分是涉及到页面的加载性能\",{\"1\":{\"1625\":1}}],[\"因为它不再处于文档流中\",{\"1\":{\"1519\":1}}],[\"因为它使得开发和部署是那么的直截了当\",{\"1\":{\"1324\":1}}],[\"因为从莫种意义上来讲这种方式真正做到了\",{\"1\":{\"1473\":1}}],[\"因为更新表时\",{\"1\":{\"1128\":1}}],[\"因为并发操作\",{\"1\":{\"1111\":1}}],[\"因为两个关联查询的表是同一张表\",{\"1\":{\"1068\":1}}],[\"因为两张表都是多的一方\",{\"1\":{\"1051\":1}}],[\"因为两者的差异非常小\",{\"1\":{\"71\":1}}],[\"因为订单中可能会有多种商品\",{\"1\":{\"1047\":1}}],[\"因为varchar类型能够根据字符串的实际长度来动态改变所占字节的大小\",{\"1\":{\"941\":1}}],[\"因为解决办法一样\",{\"1\":{\"783\":1}}],[\"因为我们可以启动的时候多花点时间部署\",{\"1\":{\"2555\":1}}],[\"因为我们创建git版本库时\",{\"1\":{\"729\":1}}],[\"因为我们需要遵守封装的规则\",{\"1\":{\"596\":1}}],[\"因为我已经配置了m2\",{\"1\":{\"676\":1}}],[\"因为maven中内置了两条依赖原则\",{\"1\":{\"652\":1}}],[\"因为反射可以无视封装的特性\",{\"1\":{\"597\":1}}],[\"因为inetaddress\",{\"1\":{\"503\":1}}],[\"因为生产者和消费者是两个独立的线程\",{\"1\":{\"489\":1}}],[\"因为锁仍旧close\",{\"1\":{\"468\":1}}],[\"因为路径中很容易出现\",{\"1\":{\"384\":1}}],[\"因为==比较的是两个对象的地址\",{\"1\":{\"364\":1}}],[\"因为此方法可能会通过缓存频繁请求的值来显着提高空间和时间性能\",{\"1\":{\"363\":1}}],[\"因为peek不会将元素从队列中拿走\",{\"1\":{\"346\":1}}],[\"因为原容器没有变化\",{\"1\":{\"313\":1}}],[\"因为他们底层默认使用了synchronized将整个容器锁了起来\",{\"1\":{\"304\":1}}],[\"因为构造器私有化了\",{\"1\":{\"300\":1}}],[\"因为底层在计算value的位置时\",{\"1\":{\"296\":1}}],[\"因为底层是以hash表的方式来存储的\",{\"1\":{\"290\":1}}],[\"因为\",{\"1\":{\"240\":1,\"472\":1,\"888\":1}}],[\"因为参数直接暴露在url上\",{\"1\":{\"188\":1}}],[\"因为es6的模块化无法在node\",{\"1\":{\"105\":1,\"108\":1}}],[\"因此称为不可重复读\",{\"1\":{\"2691\":1}}],[\"因此部署一个后置处理器同部署其他的bean并没有什么区别\",{\"1\":{\"2572\":1}}],[\"因此这些对象不能被修改\",{\"1\":{\"2481\":1}}],[\"因此需要将\",{\"1\":{\"2318\":1}}],[\"因此每个部分都可以独立的改变而不影响其他部分\",{\"1\":{\"2034\":1}}],[\"因此客户端只要有浏览器就能浏览\",{\"1\":{\"1927\":1}}],[\"因此源servlet生成的响应结果不会被发送到客户端\",{\"1\":{\"1855\":1}}],[\"因此我们需要先进行用户配置后才能使用tomcat\",{\"1\":{\"1758\":1}}],[\"因此一般项目来说\",{\"1\":{\"1542\":1}}],[\"因此往往以索引文件的形式存放在磁盘中\",{\"1\":{\"1125\":1}}],[\"因此不能回滚\",{\"1\":{\"976\":1}}],[\"因此mysql能够更快速\",{\"1\":{\"920\":1}}],[\"因此任何人都可以在general\",{\"1\":{\"919\":1}}],[\"因此为了让我们使用lambda表达式更加的方便\",{\"1\":{\"835\":1}}],[\"因此白盒测试又称为结构测试\",{\"1\":{\"530\":1}}],[\"因此黑盒测试又叫功能测试\",{\"1\":{\"529\":1}}],[\"因此是线程不安全的\",{\"1\":{\"290\":1}}],[\"因此此时把元素的类型设计成一个参数\",{\"1\":{\"233\":1}}],[\"因此\",{\"1\":{\"70\":1,\"71\":2,\"976\":1,\"1766\":1,\"2317\":1,\"2333\":1}}],[\"简洁和清晰的层次结构使得json\",{\"1\":{\"2123\":1}}],[\"简洁\",{\"1\":{\"1145\":1}}],[\"简化用户第一次使用的体验时间\",{\"1\":{\"2555\":1}}],[\"简化我们对于api的使用\",{\"1\":{\"2527\":1}}],[\"简化我们的处理操作\",{\"1\":{\"900\":1}}],[\"简化开发\",{\"0\":{\"2522\":1}}],[\"简化代码\",{\"1\":{\"873\":1}}],[\"简化配置文件\",{\"0\":{\"544\":1}}],[\"简单实现restful\",{\"0\":{\"2825\":1}}],[\"简单实用\",{\"0\":{\"2677\":1}}],[\"简单\",{\"1\":{\"2438\":2}}],[\"简单修改即可使用\",{\"1\":{\"1559\":1}}],[\"简单性\",{\"1\":{\"1374\":1}}],[\"简单点说\",{\"1\":{\"1372\":1}}],[\"简单点我们可以理解为\",{\"1\":{\"334\":1}}],[\"简单使用jdbc\",{\"0\":{\"1215\":1}}],[\"简单使用\",{\"0\":{\"1213\":1}}],[\"简单易用的写作语法\",{\"1\":{\"1167\":1}}],[\"简单易用以及非过程化等特点\",{\"1\":{\"930\":1}}],[\"简单模板的创建\",{\"0\":{\"1165\":1}}],[\"简单地说\",{\"1\":{\"920\":1,\"1145\":1}}],[\"简单来说redirectview实现了链接的重定向\",{\"1\":{\"2868\":1}}],[\"简单来说\",{\"1\":{\"1262\":1,\"1476\":1,\"1769\":1,\"1927\":1}}],[\"简单来说就是\",{\"1\":{\"797\":1}}],[\"简单来讲分为三步走策略\",{\"1\":{\"2547\":1}}],[\"简单来讲就是创建对应的接口\",{\"1\":{\"2336\":1}}],[\"简单来讲\",{\"1\":{\"308\":1,\"323\":1,\"2380\":1}}],[\"简单看下源码\",{\"1\":{\"288\":1}}],[\"简单快速\",{\"0\":{\"157\":1}}],[\"简单的\",{\"0\":{\"3081\":1}}],[\"简单的转账案例\",{\"0\":{\"2694\":1}}],[\"简单的使用\",{\"0\":{\"2670\":1}}],[\"简单的一个demo来模拟以下情景\",{\"1\":{\"2605\":1}}],[\"简单的demo\",{\"0\":{\"2376\":1}}],[\"简单的应用实例\",{\"0\":{\"1825\":1}}],[\"简单的语法格式\",{\"1\":{\"1616\":1}}],[\"简单的盒子模型\",{\"0\":{\"1528\":1}}],[\"简单的查询语法\",{\"0\":{\"1200\":1}}],[\"简单的分支\",{\"0\":{\"799\":1}}],[\"简单的线程测试\",{\"1\":{\"438\":1}}],[\"简单的额io输入\",{\"1\":{\"422\":1}}],[\"简单的说\",{\"1\":{\"83\":1}}],[\"简单的jdbcdemo\",{\"0\":{\"1212\":1},\"1\":{\"54\":1}}],[\"简介\",{\"0\":{\"82\":1,\"100\":1,\"354\":1,\"1262\":1,\"1927\":1,\"2520\":1}}],[\"简写为$\",{\"1\":{\"1546\":1}}],[\"简写\",{\"1\":{\"78\":1,\"1293\":1}}],[\"简称rest\",{\"1\":{\"2823\":1}}],[\"简称fn\",{\"1\":{\"2013\":1}}],[\"简称fmt\",{\"1\":{\"2013\":1}}],[\"简称c\",{\"1\":{\"2013\":1}}],[\"简称为容器\",{\"1\":{\"228\":1}}],[\"简称\",{\"1\":{\"71\":2,\"721\":1,\"2014\":1,\"2178\":1}}],[\"标注\",{\"1\":{\"2825\":1}}],[\"标志来设计表单\",{\"1\":{\"1329\":1}}],[\"标记\",{\"1\":{\"374\":1,\"1548\":1}}],[\"标识符\",{\"1\":{\"374\":1}}],[\"标签的配置\",{\"1\":{\"2780\":1}}],[\"标签的先后顺序需要遵守左侧的层级\",{\"1\":{\"2315\":1}}],[\"标签可以让我们在sql中对参数1进行动态的处理\",{\"1\":{\"2458\":1}}],[\"标签库的定位\",{\"1\":{\"2014\":1}}],[\"标签和方法之间的映射关系在对应的tld文件中描述\",{\"1\":{\"2014\":1}}],[\"标签名选择器\",{\"1\":{\"1555\":1}}],[\"标签名\",{\"1\":{\"1548\":1}}],[\"标签名获取\",{\"1\":{\"1490\":1}}],[\"标签选择器\",{\"1\":{\"1548\":3,\"1555\":1}}],[\"标签<html>\",{\"1\":{\"1325\":1}}],[\"标签是用在网页中的一种html标签\",{\"1\":{\"1295\":1}}],[\"标签中可用标签\",{\"0\":{\"1293\":1,\"1294\":1,\"1296\":1}}],[\"标签之前\",{\"1\":{\"1292\":1}}],[\"标签放在文档的开始处\",{\"1\":{\"1292\":1}}],[\"标签限定了文档的开始点和结束点\",{\"1\":{\"1290\":1}}],[\"标签\",{\"0\":{\"1291\":1,\"1342\":1,\"2022\":1},\"1\":{\"1198\":1,\"1292\":1,\"2706\":1}}],[\"标签体原始值\",{\"1\":{\"130\":2}}],[\"标签体新值\",{\"1\":{\"128\":1,\"130\":1}}],[\"标签>\",{\"1\":{\"127\":1}}],[\"标签并配置其中的属性\",{\"1\":{\"115\":2}}],[\"标准通用标记语言下的一个应用\",{\"1\":{\"2823\":1}}],[\"标准通用标记语言下的一个子集\",{\"1\":{\"2823\":1}}],[\"标准通用标记语言的子集\",{\"1\":{\"1548\":1}}],[\"标准返回字符串的日期格式\",{\"1\":{\"1415\":1}}],[\"标准\",{\"1\":{\"71\":4,\"1372\":1}}],[\"标题标签\",{\"0\":{\"1299\":1},\"1\":{\"1299\":1}}],[\"标题六\",{\"1\":{\"1169\":1}}],[\"标题五\",{\"1\":{\"1169\":1}}],[\"标题四\",{\"1\":{\"1169\":1}}],[\"标题三\",{\"1\":{\"1169\":1}}],[\"标题二\",{\"1\":{\"1169\":1}}],[\"标题一\",{\"1\":{\"1169\":1}}],[\"标题\",{\"0\":{\"1169\":1},\"1\":{\"62\":1,\"1198\":1}}],[\"就创建一个spring容器\",{\"1\":{\"2911\":1}}],[\"就创建一个node\",{\"1\":{\"279\":1}}],[\"就相当于应用的根目录\",{\"1\":{\"2834\":1}}],[\"就相当于restrict方式\",{\"1\":{\"1003\":1}}],[\"就使用当前事务\",{\"1\":{\"2737\":1}}],[\"就使用for循环比较\",{\"1\":{\"279\":1}}],[\"就加入当前事务\",{\"1\":{\"2737\":1}}],[\"就在当前事务中嵌套其他事务\",{\"1\":{\"2737\":1}}],[\"就在于是否重复\",{\"1\":{\"318\":1}}],[\"就将原来挂起\",{\"1\":{\"2737\":1}}],[\"就把当前事务挂起\",{\"1\":{\"2725\":1}}],[\"就抛出异常\",{\"1\":{\"2725\":1,\"2737\":1}}],[\"就以非事务方式执行\",{\"1\":{\"2725\":1}}],[\"就新建一个事务\",{\"1\":{\"2725\":1,\"2737\":2}}],[\"就能够明确告诉数据库\",{\"1\":{\"2714\":1}}],[\"就能够取消他们的前一次操作\",{\"1\":{\"2102\":1,\"2106\":1}}],[\"就好像发生了幻觉一样\",{\"1\":{\"2692\":1}}],[\"就好比使用一个<script>\",{\"1\":{\"2170\":1}}],[\"就用component\",{\"1\":{\"2587\":1}}],[\"就查询数据库\",{\"1\":{\"2478\":1}}],[\"就需要设置特定的属性来修改分隔属性名和默认值的字符\",{\"1\":{\"2334\":1}}],[\"就需要使用\",{\"1\":{\"115\":1}}],[\"就更新失败\",{\"1\":{\"2287\":1}}],[\"就响应用户请求\",{\"1\":{\"2104\":1}}],[\"就必须要很小心地来获取预期的结果了\",{\"1\":{\"2029\":1}}],[\"就算在jsp中可以使用el表达式取出域对象中的数据\",{\"1\":{\"2010\":1}}],[\"就算自己命名了主键约束名也没用\",{\"1\":{\"986\":1}}],[\"就直接执行第一次所产生的servlet\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"就直接执行前面所产生的servlet\",{\"1\":{\"1933\":1}}],[\"就直接把文档的内容添加到源servlet的响应结果中\",{\"1\":{\"1858\":1}}],[\"就直接break\",{\"1\":{\"279\":1}}],[\"就读取文档中的数据把它发送到客户端\",{\"1\":{\"1854\":1}}],[\"就删除该行即可\",{\"1\":{\"1755\":1}}],[\"就业指导<\",{\"1\":{\"1552\":1}}],[\"就访问一次数据库\",{\"1\":{\"1230\":1}}],[\"就应该使用while循环\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"就要使用resultset的next\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"就可访问所有数据库\",{\"1\":{\"1205\":1}}],[\"就可以获取到了封装了该方法信息的joinpoint对象\",{\"1\":{\"2637\":1}}],[\"就可以获取包含在响应消息头度中的元信息\",{\"1\":{\"182\":1}}],[\"就可以使用客户编号来引用客户信息表中的记录\",{\"1\":{\"1048\":1}}],[\"就可以用它来产生该类型的所有对象\",{\"1\":{\"570\":1}}],[\"就可以相对减少一点延迟时间\",{\"1\":{\"169\":1}}],[\"就可以发出下一次请求\",{\"1\":{\"164\":1}}],[\"就非常完美了\",{\"1\":{\"1047\":1}}],[\"就说明该数据库表满足了第一范式\",{\"1\":{\"1046\":1}}],[\"就默认和列名相同\",{\"1\":{\"992\":1}}],[\"就返回该值\",{\"1\":{\"853\":4}}],[\"就返回false\",{\"1\":{\"316\":1}}],[\"就对应加载那个字节码信息\",{\"1\":{\"570\":1}}],[\"就变成了文字拼接\",{\"1\":{\"1362\":1}}],[\"就变成\",{\"1\":{\"561\":1}}],[\"就具备了继承性\",{\"1\":{\"556\":1}}],[\"就有错误提示\",{\"1\":{\"541\":1,\"542\":1}}],[\"就餐人数\",{\"1\":{\"538\":1}}],[\"就形成了线程的死锁\",{\"1\":{\"484\":1}}],[\"就锁住了所有的同步方法\",{\"1\":{\"472\":1}}],[\"就绪\",{\"1\":{\"467\":1}}],[\"就近原则\",{\"1\":{\"368\":1}}],[\"就永远阻塞\",{\"1\":{\"337\":1}}],[\"就不需要再给dispatcherservlet返回值了\",{\"1\":{\"2862\":1}}],[\"就不需要再去和复杂的sql语句打交道了\",{\"1\":{\"2198\":1}}],[\"就不用再写包的全类路径了\",{\"1\":{\"2327\":1}}],[\"就不能返回jsp\",{\"1\":{\"2878\":1}}],[\"就不能再使用arg\",{\"1\":{\"2390\":1,\"2403\":1}}],[\"就不能在中间定义内嵌式代码\",{\"1\":{\"1380\":1}}],[\"就不能加入\",{\"1\":{\"279\":1}}],[\"就不再阻塞了\",{\"1\":{\"337\":1}}],[\"就这么地了\",{\"1\":{\"294\":1}}],[\"就调用他们的相应的service\",{\"1\":{\"1858\":1}}],[\"就调用它们的service\",{\"1\":{\"1854\":1}}],[\"就调用treeifybin\",{\"1\":{\"279\":1}}],[\"就调用\",{\"1\":{\"279\":1}}],[\"就放在该位置\",{\"1\":{\"279\":1}}],[\"就放弃添加\",{\"1\":{\"279\":1}}],[\"就会执行到具体的controller控制单元\",{\"1\":{\"2812\":1}}],[\"就会增强系统的运行速度\",{\"1\":{\"2777\":1}}],[\"就会发现多了一些原本不存在的记录\",{\"1\":{\"2692\":1}}],[\"就会自动重新加载这个文件\",{\"1\":{\"1750\":1}}],[\"就会自动完成注册\",{\"1\":{\"1217\":1}}],[\"就会触发\",{\"1\":{\"1439\":1}}],[\"就会存在这个\",{\"1\":{\"1198\":1}}],[\"就会出现异常\",{\"1\":{\"373\":1}}],[\"就会扩容到16\",{\"1\":{\"280\":1}}],[\"就会进行树化\",{\"1\":{\"279\":1,\"280\":1}}],[\"就会创建一个长度为10的数组\",{\"1\":{\"255\":1}}],[\"就都可以通过thymeleaf来设定新值\",{\"1\":{\"127\":1}}],[\"就是请求转发\",{\"1\":{\"2866\":1}}],[\"就是\",{\"1\":{\"2843\":1}}],[\"就是说数据库操作只是\",{\"1\":{\"2728\":1}}],[\"就是说必须在lock\",{\"1\":{\"475\":1}}],[\"就是创建属性时给对象属性赋值\",{\"1\":{\"2551\":1}}],[\"就是利于数据库表间的外键关联关系进行自动的级联查询操作\",{\"1\":{\"2432\":1}}],[\"就是持久层\",{\"1\":{\"2199\":1}}],[\"就是一系列为了解决特定问题而定义的一系列接口和实现类\",{\"1\":{\"2197\":1}}],[\"就是一个泛型类\",{\"1\":{\"238\":1}}],[\"就是两个页面具有相同的协议\",{\"1\":{\"2168\":1}}],[\"就是可以使用控制器来联接不同的模型和视图去完成用户的需求\",{\"1\":{\"2040\":1}}],[\"就是可以点击\",{\"1\":{\"1339\":1}}],[\"就是他this对象\",{\"1\":{\"1971\":1}}],[\"就是相对路径\",{\"1\":{\"1868\":1}}],[\"就是用事先定义好的一些特定字符\",{\"1\":{\"1582\":1}}],[\"就是元素出现在它本该出现的位置\",{\"1\":{\"1532\":1}}],[\"就是把浏览器当前页面对应的文档抽象成一个对象\",{\"1\":{\"1448\":1}}],[\"就是把整个浏览器抽象成一个对象\",{\"1\":{\"1448\":1}}],[\"就是把别人的项目clone一份\",{\"1\":{\"757\":1}}],[\"就是第三种引入方式\",{\"1\":{\"1380\":1}}],[\"就是第一次扩容\",{\"1\":{\"279\":1}}],[\"就是文本框中的具体内容\",{\"1\":{\"1333\":1}}],[\"就是定义一个接口\",{\"1\":{\"1262\":1}}],[\"就是建立一个接口\",{\"1\":{\"1262\":1}}],[\"就是默认没有开启预编译\",{\"1\":{\"1251\":1}}],[\"就是因为它没有把单引号做转义\",{\"1\":{\"1249\":1}}],[\"就是方法引用\",{\"1\":{\"826\":1}}],[\"就是你电脑本地硬盘目录\",{\"1\":{\"728\":1}}],[\"就是单独用户git自己的命令行窗口\",{\"1\":{\"725\":1}}],[\"就是将本地工作区代码上传到本地仓库中\",{\"1\":{\"723\":1}}],[\"就是将本地仓库代码上传到远程仓库\",{\"1\":{\"723\":1}}],[\"就是将远程仓库代码下载到本地仓库\",{\"1\":{\"723\":1}}],[\"就是将远程仓库复制到本地\",{\"1\":{\"723\":1}}],[\"就是支持多线程的\",{\"1\":{\"452\":1}}],[\"就是为了将h的高位利用起来\",{\"1\":{\"294\":1}}],[\"就是我们的匿名内部类\",{\"1\":{\"288\":1}}],[\"就是我们加入一个节点node\",{\"1\":{\"279\":1}}],[\"就是在计算机的缓存\",{\"1\":{\"224\":1}}],[\"就是运行在服务端的\",{\"1\":{\"83\":1}}],[\"就是指网络地址\",{\"1\":{\"1324\":1}}],[\"就是指\",{\"1\":{\"71\":1}}],[\"就开始制定\",{\"1\":{\"71\":1}}],[\"版本开始\",{\"1\":{\"2317\":1}}],[\"版本冲突\",{\"0\":{\"749\":1}}],[\"版本穿梭\",{\"1\":{\"731\":1}}],[\"版本库\",{\"0\":{\"728\":1},\"1\":{\"728\":1}}],[\"版本库是集中放在中央服务器的\",{\"1\":{\"723\":1}}],[\"版本控制工具\",{\"0\":{\"723\":1}}],[\"版本统一管理\",{\"0\":{\"698\":1}}],[\"版本号\",{\"1\":{\"683\":1,\"685\":1,\"731\":1,\"742\":1}}],[\"版本\",{\"0\":{\"1558\":1},\"1\":{\"290\":1,\"297\":1,\"298\":1,\"363\":1}}],[\"版以后的\",{\"1\":{\"71\":1}}],[\"版了\",{\"1\":{\"71\":1}}],[\"版发布后\",{\"1\":{\"71\":1}}],[\"版\",{\"1\":{\"70\":1,\"71\":1}}],[\"的环境上\",{\"1\":{\"2925\":1}}],[\"的名称\",{\"1\":{\"2855\":1}}],[\"的第二级访问目录\",{\"1\":{\"2834\":1}}],[\"的第一级访问目录\",{\"1\":{\"2834\":1}}],[\"的第一个版本\",{\"1\":{\"71\":1}}],[\"的第一版\",{\"1\":{\"70\":1}}],[\"的资源\",{\"1\":{\"2827\":3}}],[\"的接口设计\",{\"1\":{\"2823\":1}}],[\"的影响非常大\",{\"1\":{\"2823\":1}}],[\"的存在降低了组件之间的耦合性\",{\"1\":{\"2770\":1}}],[\"的事务类型声明为never\",{\"1\":{\"2732\":1}}],[\"的事务继续执行\",{\"1\":{\"2731\":1}}],[\"的事务被挂起直至b\",{\"1\":{\"2731\":1}}],[\"的sql操作在同一个物理事务中\",{\"1\":{\"2728\":1}}],[\"的物理事务也是auto\",{\"1\":{\"2728\":1}}],[\"的物理事务就要先提交\",{\"1\":{\"2728\":1}}],[\"的过程\",{\"1\":{\"2626\":1}}],[\"的过程我们叫部署\",{\"1\":{\"659\":1}}],[\"的目标对象\",{\"1\":{\"2624\":1}}],[\"的形式\",{\"1\":{\"2584\":1}}],[\"的bean初始化之后\",{\"1\":{\"2574\":1}}],[\"的bean初始化之前\",{\"1\":{\"2574\":1}}],[\"的breaking\",{\"1\":{\"1557\":1}}],[\"的集成\",{\"1\":{\"2533\":1}}],[\"的集合\",{\"1\":{\"1145\":1}}],[\"的核心容器是其他模块建立的基础\",{\"1\":{\"2532\":1}}],[\"的核心库只关注视图层\",{\"1\":{\"1611\":1,\"1943\":1}}],[\"的抽象层\",{\"1\":{\"2530\":1}}],[\"的用途不仅仅限于服务器端的开发\",{\"1\":{\"2520\":1}}],[\"的属性名称\",{\"1\":{\"2437\":1}}],[\"的配置\",{\"1\":{\"2433\":1}}],[\"的配置文件由4个xml组成\",{\"1\":{\"1749\":1}}],[\"的操作方式\",{\"1\":{\"2371\":1}}],[\"的别名为\",{\"1\":{\"2330\":1}}],[\"的首字母小写的非限定类名来作为它的别名\",{\"1\":{\"2330\":1}}],[\"的行为已经由上述元素配置完了\",{\"1\":{\"2319\":1}}],[\"的提交和回滚功能\",{\"1\":{\"2317\":1}}],[\"的文件名\",{\"1\":{\"2301\":1}}],[\"的最后注意\",{\"1\":{\"2248\":1}}],[\"的最小\",{\"1\":{\"1408\":1}}],[\"的异常\",{\"1\":{\"2226\":1}}],[\"的基础上只做增强不做改变\",{\"1\":{\"2178\":1}}],[\"的基础知识\",{\"1\":{\"1559\":1}}],[\"的增强工具\",{\"1\":{\"2178\":1}}],[\"的简单使用\",{\"0\":{\"2130\":1}}],[\"的实例对象\",{\"1\":{\"2003\":1}}],[\"的伪后端\",{\"1\":{\"1941\":1}}],[\"的虚拟主机\",{\"1\":{\"1766\":1}}],[\"的每一个对象\",{\"1\":{\"1630\":1,\"1631\":1}}],[\"的每一个值\",{\"1\":{\"1626\":1,\"1628\":1}}],[\"的循环指令\",{\"1\":{\"1626\":1}}],[\"的作用是通过一个布尔表达式进行对dom的上树和下树的渲染\",{\"1\":{\"1619\":1}}],[\"的作用是动态获取上下文路径\",{\"1\":{\"130\":1}}],[\"的容器框架\",{\"1\":{\"2520\":1}}],[\"的容器\",{\"1\":{\"1595\":1,\"1596\":1}}],[\"的方式\",{\"1\":{\"2728\":1}}],[\"的方式实现\",{\"1\":{\"1862\":1}}],[\"的方式操作元素样式\",{\"1\":{\"1568\":1}}],[\"的方法来进行补全操作\",{\"1\":{\"622\":1}}],[\"的方法\",{\"1\":{\"357\":1,\"1900\":1}}],[\"的定制\",{\"1\":{\"1559\":1}}],[\"的自动定位\",{\"1\":{\"1558\":1}}],[\"的自然对数\",{\"1\":{\"1411\":2}}],[\"的区别\",{\"1\":{\"1555\":1}}],[\"的web应用是跨平台的\",{\"1\":{\"1548\":1}}],[\"的执行时间要早\",{\"1\":{\"1546\":1}}],[\"的一个重要标志\",{\"1\":{\"2843\":1}}],[\"的一个子集\",{\"1\":{\"2123\":1}}],[\"的一个属性\",{\"1\":{\"1424\":1}}],[\"的一大优势是\",{\"1\":{\"1601\":1}}],[\"的一系列sql命令\",{\"1\":{\"1145\":1}}],[\"的毫秒数\",{\"1\":{\"1415\":1}}],[\"的分钟差\",{\"1\":{\"1415\":1}}],[\"的指数\",{\"1\":{\"1411\":1}}],[\"的角度\",{\"1\":{\"1411\":1}}],[\"的反正切值\",{\"1\":{\"1411\":1}}],[\"的反正弦值\",{\"1\":{\"1411\":1}}],[\"的反余弦值\",{\"1\":{\"1411\":1}}],[\"的绝对值\",{\"1\":{\"1411\":1}}],[\"的平方根\",{\"1\":{\"1411\":1}}],[\"的平方根的倒数\",{\"1\":{\"1411\":1}}],[\"的对数\",{\"1\":{\"1411\":2}}],[\"的引入方式\",{\"0\":{\"1378\":1}}],[\"的特点\",{\"0\":{\"1373\":1}}],[\"的开发始于\",{\"1\":{\"1372\":1}}],[\"的正式名称是\",{\"1\":{\"1372\":1}}],[\"的livescript发展而来的\",{\"1\":{\"1372\":1}}],[\"的数据类型的声明统统是var\",{\"1\":{\"1352\":1}}],[\"的数据通信的基础\",{\"1\":{\"154\":1}}],[\"的组合\",{\"1\":{\"1287\":1,\"2196\":1}}],[\"的连接\",{\"1\":{\"1256\":3}}],[\"的时候将数据放入到二级缓存\",{\"1\":{\"2478\":1}}],[\"的时候针对允许空的列有用\",{\"1\":{\"2437\":1}}],[\"的时候\",{\"1\":{\"1135\":1}}],[\"的字段\",{\"1\":{\"1048\":1,\"2250\":1}}],[\"的常见操作\",{\"1\":{\"893\":1}}],[\"的距离\",{\"1\":{\"892\":2}}],[\"的项目url\",{\"1\":{\"760\":1}}],[\"的master分支并不是一个特殊分支\",{\"1\":{\"744\":1}}],[\"的账号没有任何关系\",{\"1\":{\"726\":1}}],[\"的先后顺序指的是dependency标签配置的先后顺序\",{\"1\":{\"696\":1}}],[\"的安装目录所在\",{\"1\":{\"676\":1}}],[\"的比例在持续增长\",{\"1\":{\"655\":1}}],[\"的面向项目的方法\",{\"1\":{\"655\":1}}],[\"的缺省构建规则有较高的可重用性\",{\"1\":{\"655\":1}}],[\"的线程在接到信号或被中断之前一直处于等待状态\",{\"1\":{\"475\":1}}],[\"的声明空间\",{\"1\":{\"2899\":1,\"2904\":1}}],[\"的声明\",{\"1\":{\"427\":1}}],[\"的位置上\",{\"1\":{\"294\":1}}],[\"的具体实现\",{\"0\":{\"269\":1}}],[\"的创建\",{\"1\":{\"240\":1}}],[\"的创造者\",{\"1\":{\"70\":1}}],[\"的语言告诉客户端本次请求的处理结果\",{\"1\":{\"190\":1}}],[\"的缩写\",{\"1\":{\"154\":1}}],[\"的\",{\"1\":{\"87\":1,\"294\":1,\"475\":2,\"676\":1,\"729\":1,\"1001\":1,\"1372\":1,\"1411\":1,\"2196\":1,\"2301\":1,\"2531\":1,\"2859\":1}}],[\"的地方\",{\"1\":{\"71\":1}}],[\"的下一代标准\",{\"1\":{\"71\":1}}],[\"的关系是\",{\"1\":{\"70\":1}}],[\"发具体的页面\",{\"1\":{\"2775\":1}}],[\"发往此server用于实现关闭tomcat实例的命令字符串\",{\"1\":{\"1763\":1}}],[\"发明了这门语言\",{\"1\":{\"1372\":1}}],[\"发起连接\",{\"1\":{\"925\":1}}],[\"发生该异常不回滚\",{\"1\":{\"2717\":1}}],[\"发生该异常才回滚\",{\"1\":{\"2716\":1}}],[\"发生\",{\"1\":{\"475\":1}}],[\"发生了重置事件\",{\"1\":{\"1439\":1}}],[\"发生了提交事件\",{\"1\":{\"1439\":1}}],[\"发生了线程切换\",{\"1\":{\"467\":1}}],[\"发生了不正常的现象\",{\"1\":{\"16\":1}}],[\"发现第一个sqlsession会首先去二级缓存中查找\",{\"1\":{\"2478\":1}}],[\"发现重启后\",{\"1\":{\"2098\":1}}],[\"发现\",{\"1\":{\"1217\":1}}],[\"发现同步监视器close状态\",{\"1\":{\"467\":1}}],[\"发现同步监视器open状态\",{\"1\":{\"467\":2}}],[\"发现其中引用了很多其他文件\",{\"1\":{\"173\":1}}],[\"发送的数据将被转换为对象以配合\",{\"1\":{\"2155\":1}}],[\"发送的数据将被转换为对象\",{\"1\":{\"2153\":1}}],[\"发送请求前可以修改xmlhttprequest对象的函数\",{\"1\":{\"2142\":1}}],[\"发送请求的地址\",{\"1\":{\"2135\":1}}],[\"发送到服务器的数据为string类型时\",{\"1\":{\"2155\":1}}],[\"发送到服务器的数据\",{\"1\":{\"2140\":1}}],[\"发送异步请求\",{\"1\":{\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1}}],[\"发送给服务器\",{\"1\":{\"1894\":1}}],[\"发送json\",{\"0\":{\"1726\":1}}],[\"发送数据包\",{\"1\":{\"515\":1,\"516\":1,\"517\":1,\"518\":1}}],[\"发送端打开~~~\",{\"1\":{\"515\":1,\"516\":1,\"517\":1,\"518\":1}}],[\"发送响应数据\",{\"1\":{\"88\":1}}],[\"发送\",{\"1\":{\"88\":1,\"492\":1}}],[\"发布过程初始化后\",{\"1\":{\"2574\":1}}],[\"发布版本分支\",{\"0\":{\"805\":1}}],[\"发布准备和维护设立了独立的分支\",{\"1\":{\"797\":1}}],[\"发布站点\",{\"1\":{\"710\":1}}],[\"发布为联邦数据处理标准\",{\"1\":{\"702\":1}}],[\"发布\",{\"1\":{\"70\":1}}],[\"月名表示月份\",{\"1\":{\"1093\":1}}],[\"月份数字\",{\"1\":{\"2030\":1}}],[\"月份有误\",{\"1\":{\"1366\":2}}],[\"月份\",{\"1\":{\"895\":1,\"1417\":1}}],[\"月份是从0开始\",{\"1\":{\"378\":1}}],[\"月中的某一天\",{\"1\":{\"2030\":1}}],[\"月中的星期数\",{\"1\":{\"374\":1}}],[\"月中的天数\",{\"1\":{\"374\":1}}],[\"月中的周数\",{\"1\":{\"374\":1}}],[\"月发布\",{\"1\":{\"71\":2}}],[\"月\",{\"1\":{\"70\":1,\"71\":1,\"371\":2,\"373\":1,\"893\":8,\"1198\":1,\"1372\":1,\"1415\":2}}],[\"月正式发布了\",{\"1\":{\"68\":1}}],[\"要不然就会接收失败\",{\"1\":{\"2796\":1}}],[\"要不要\",{\"1\":{\"1298\":4,\"1299\":8}}],[\"要点3\",{\"1\":{\"2651\":1}}],[\"要点2\",{\"1\":{\"2651\":1}}],[\"要点1\",{\"1\":{\"2651\":1}}],[\"要慎重考虑\",{\"1\":{\"2647\":1}}],[\"要保证相同类型的目标对象在容器中只有一个实例\",{\"1\":{\"2578\":1,\"2579\":1}}],[\"要保证当前对象的属性值和目标对象的id值一致\",{\"1\":{\"2578\":1,\"2579\":1}}],[\"要去除什么后缀\",{\"1\":{\"2455\":1}}],[\"要去除什么前缀\",{\"1\":{\"2455\":1}}],[\"要增加什么后缀\",{\"1\":{\"2455\":1}}],[\"要增加什么前缀\",{\"1\":{\"2455\":1}}],[\"要启用这个特性\",{\"1\":{\"2334\":1}}],[\"要实现从js对象转换为json字符串\",{\"1\":{\"2126\":1}}],[\"要实现从json字符串转换为js对象\",{\"1\":{\"2126\":1}}],[\"要显示的日期\",{\"1\":{\"2030\":1}}],[\"要显示的数字\",{\"1\":{\"2029\":1}}],[\"要遍历的数组\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"要遍历的数据\",{\"1\":{\"147\":2}}],[\"要加项目部署名\",{\"1\":{\"1876\":1}}],[\"要等\",{\"1\":{\"1683\":1}}],[\"要等几分钟\",{\"1\":{\"1682\":1}}],[\"要给form标签绑定onsubmit事件\",{\"1\":{\"1580\":1}}],[\"要引用当前窗口根本不需要特殊的语法\",{\"1\":{\"1450\":1}}],[\"要失去焦点\",{\"1\":{\"1439\":1}}],[\"要注意\",{\"1\":{\"1357\":1}}],[\"要想实行编程复杂\",{\"1\":{\"1283\":1}}],[\"要想结果准确\",{\"1\":{\"296\":1}}],[\"要操作的每个表格都应该有对应的接口和实现类\",{\"1\":{\"1263\":1}}],[\"要操作的每个表格都应该有对应的实体类\",{\"1\":{\"1263\":1}}],[\"要把一些字段作为主键\",{\"1\":{\"985\":1}}],[\"要设计主键\",{\"1\":{\"985\":1}}],[\"要求请求参数的\",{\"1\":{\"2835\":1}}],[\"要求实现org\",{\"1\":{\"2481\":1}}],[\"要求实体类必须实现序列化接口\",{\"1\":{\"2479\":1}}],[\"要求指定namespace+id的全名称\",{\"1\":{\"2437\":1}}],[\"要求这条sql必须在insert操作之后\",{\"1\":{\"2408\":1}}],[\"要求为function类型的参数\",{\"1\":{\"2142\":1,\"2143\":1,\"2144\":1,\"2145\":1,\"2147\":1}}],[\"要求为object或string类型的参数\",{\"1\":{\"2140\":1}}],[\"要求为boolean类型的参数\",{\"1\":{\"2138\":1,\"2139\":1,\"2148\":1,\"2149\":1,\"2153\":1}}],[\"要求为number类型的参数\",{\"1\":{\"2137\":1}}],[\"要求为string类型的参数\",{\"1\":{\"2135\":1,\"2136\":1,\"2141\":1,\"2146\":1,\"2150\":1,\"2151\":1,\"2152\":1,\"2154\":1}}],[\"要求是整数类型\",{\"1\":{\"939\":1}}],[\"要求的\",{\"1\":{\"364\":1}}],[\"要使用mybatisplus的service完成crud操作\",{\"1\":{\"2216\":1}}],[\"要使用centos7版本安装\",{\"1\":{\"807\":1}}],[\"要使用这些jar包最简单的方法就是复制粘贴到web\",{\"1\":{\"649\":1}}],[\"要负责管理生产环境下出现的紧急修复的代码\",{\"1\":{\"804\":1}}],[\"要了解构建的含义我们应该由浅入深的从以下三个层面来看\",{\"1\":{\"657\":1}}],[\"要继续\",{\"1\":{\"600\":1}}],[\"要匹配\",{\"1\":{\"425\":1}}],[\"要写入的字符的数量\",{\"1\":{\"407\":1}}],[\"要么全不执行\",{\"1\":{\"2685\":1}}],[\"要么全部执行\",{\"1\":{\"2685\":1}}],[\"要么全都不执行\",{\"1\":{\"1233\":1}}],[\"要么全都执行成功\",{\"1\":{\"1233\":1}}],[\"要么重写\",{\"1\":{\"1820\":1}}],[\"要么重写doget\",{\"1\":{\"1820\":1}}],[\"要么显示编译后的文本\",{\"1\":{\"1638\":1}}],[\"要么都不做\",{\"1\":{\"2683\":1}}],[\"要么都不执行\",{\"1\":{\"1233\":1}}],[\"要么都不发生\",{\"1\":{\"1102\":1}}],[\"要么数据库管理系统将放弃所作的所有修改\",{\"1\":{\"1099\":1}}],[\"要么所有的事务都被提交\",{\"1\":{\"1099\":1}}],[\"要么是0\",{\"1\":{\"364\":1}}],[\"要么自己处理要么再继续向外抛出异常\",{\"1\":{\"33\":1}}],[\"要进行判断\",{\"1\":{\"279\":1}}],[\"要指向n\",{\"1\":{\"262\":1}}],[\"要讲清楚这个问题\",{\"1\":{\"70\":1}}],[\"年开始\",{\"1\":{\"1372\":1}}],[\"年龄平均值\",{\"1\":{\"880\":2}}],[\"年龄和\",{\"1\":{\"880\":2}}],[\"年龄最小的是\",{\"1\":{\"880\":2}}],[\"年龄最大的是\",{\"1\":{\"880\":2}}],[\"年龄\",{\"1\":{\"538\":1,\"937\":2,\"2182\":1}}],[\"年中的天数\",{\"1\":{\"374\":1}}],[\"年中的周数\",{\"1\":{\"374\":1}}],[\"年中的月份\",{\"1\":{\"374\":1}}],[\"年月日\",{\"1\":{\"372\":2,\"892\":1}}],[\"年\",{\"1\":{\"68\":1,\"70\":1,\"71\":4,\"371\":1,\"373\":1,\"374\":1,\"893\":4,\"1198\":1,\"1372\":2,\"1415\":2}}],[\"年度最受欢迎的中国开源软件\",{\"1\":{\"61\":1}}],[\"语法2\",{\"1\":{\"1494\":1}}],[\"语法1\",{\"1\":{\"1493\":1}}],[\"语法格式\",{\"0\":{\"817\":1,\"820\":1,\"827\":1},\"1\":{\"817\":1}}],[\"语法\",{\"0\":{\"236\":1,\"464\":1,\"470\":1,\"476\":1,\"1330\":1,\"2158\":1,\"2161\":1,\"2163\":1,\"2165\":1,\"2433\":1,\"2443\":1,\"2446\":1,\"2449\":1,\"2452\":1,\"2455\":1,\"2458\":1,\"2461\":1,\"2464\":1,\"2633\":1},\"1\":{\"147\":1,\"150\":1,\"734\":1,\"827\":1,\"1029\":1,\"1548\":1,\"1549\":1,\"1551\":1,\"1552\":1,\"1554\":1,\"1555\":1}}],[\"语法错误\",{\"1\":{\"29\":1}}],[\"语义更加清晰明了\",{\"1\":{\"75\":1}}],[\"语句及其执行时间\",{\"1\":{\"2294\":1}}],[\"语句以及其执行时间\",{\"1\":{\"2179\":1}}],[\"语句发送到数据库中\",{\"1\":{\"1257\":1}}],[\"语句发送到数据库\",{\"1\":{\"1255\":2}}],[\"语句只编译一次\",{\"1\":{\"1230\":1}}],[\"语句中加入子查询\",{\"1\":{\"1082\":1}}],[\"语句的结果集\",{\"1\":{\"1065\":1}}],[\"语句补全\",{\"0\":{\"623\":1}}],[\"语句表示如果当前table\",{\"1\":{\"279\":1}}],[\"语句\",{\"1\":{\"72\":1,\"1372\":1,\"1452\":1}}],[\"语言相关\",{\"1\":{\"1372\":1}}],[\"语言格式\",{\"1\":{\"1179\":1}}],[\"语言跟字符集的区别\",{\"1\":{\"177\":1}}],[\"语言\",{\"1\":{\"71\":1}}],[\"语言的下一个版本\",{\"1\":{\"71\":1}}],[\"语言的下一代标准\",{\"1\":{\"68\":1}}],[\"语言可以用来编写复杂的大型应用程序\",{\"1\":{\"68\":1}}],[\"自己定义的controller处理单元\",{\"1\":{\"2773\":1}}],[\"自己创建类实现messageformattingstrategy接口重写formatmessage方法即可\",{\"1\":{\"2299\":1}}],[\"自关联映射\",{\"1\":{\"2440\":1}}],[\"自启动servlet\",{\"1\":{\"1849\":1}}],[\"自\",{\"1\":{\"1559\":1}}],[\"自我介绍\",{\"1\":{\"1341\":1}}],[\"自带换行效果\",{\"1\":{\"1299\":1}}],[\"自身表emp\",{\"1\":{\"1211\":1}}],[\"自连接查询是一种特殊的多表连接查询\",{\"1\":{\"1068\":1}}],[\"自连接查询\",{\"0\":{\"1068\":1}}],[\"自增主键回填\",{\"0\":{\"2408\":1},\"1\":{\"2412\":1}}],[\"自增\",{\"0\":{\"1009\":1}}],[\"自从java5中引用注解以来\",{\"1\":{\"904\":1}}],[\"自动加载处理映射器和处理器适配器\",{\"1\":{\"2780\":1,\"2789\":1}}],[\"自动加载\",{\"1\":{\"2780\":1}}],[\"自动配置\",{\"0\":{\"2780\":1},\"1\":{\"2901\":1}}],[\"自动注入获取transactiontemplate对象\",{\"1\":{\"2702\":1}}],[\"自动注入dept\",{\"1\":{\"2579\":1}}],[\"自动生成代理对象\",{\"1\":{\"2630\":1,\"2648\":1}}],[\"自动进行了依赖传递\",{\"1\":{\"2538\":1}}],[\"自动延迟加载\",{\"1\":{\"2437\":1}}],[\"自动转义\",{\"1\":{\"2179\":1}}],[\"自动补充0\",{\"1\":{\"2031\":1}}],[\"自动补全上下文适用的提醒\",{\"1\":{\"621\":1}}],[\"自动启动服务\",{\"1\":{\"1684\":1}}],[\"自动获取焦点\",{\"1\":{\"1350\":1}}],[\"自动提交为true\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"自动超链接\",{\"0\":{\"1176\":1}}],[\"自动事务\",{\"0\":{\"1104\":1}}],[\"自动增加约束\",{\"1\":{\"981\":1}}],[\"自动引用父类\",{\"1\":{\"715\":1}}],[\"自动化构建\",{\"0\":{\"656\":1}}],[\"自动拆箱是将封装类型自动转换为基本数据类型\",{\"1\":{\"361\":1}}],[\"自动拆箱\",{\"1\":{\"361\":1,\"362\":1,\"363\":2}}],[\"自动装箱就是将基本数据类型自动转换为封装类型\",{\"1\":{\"361\":1}}],[\"自动装箱\",{\"1\":{\"361\":1,\"362\":1,\"363\":2}}],[\"自定义转换器\",{\"0\":{\"2799\":1}}],[\"自定义类型处理\",{\"0\":{\"2509\":1}}],[\"自定义类型需要重新\",{\"1\":{\"869\":1}}],[\"自定义缓存类\",{\"1\":{\"2481\":1}}],[\"自定义格式化\",{\"0\":{\"2299\":1}}],[\"自定义格式模式\",{\"1\":{\"2030\":1}}],[\"自定义日志打印\",{\"1\":{\"2298\":1}}],[\"自定义标签\",{\"1\":{\"1963\":1}}],[\"自定义头\",{\"1\":{\"1808\":1}}],[\"自定义项目名\",{\"1\":{\"1775\":1}}],[\"自定义组件\",{\"0\":{\"1706\":1}}],[\"自定义动画\",{\"0\":{\"1591\":1}}],[\"自定义构造函数创建对象\",{\"0\":{\"1420\":1}}],[\"自定义对象\",{\"0\":{\"1418\":1}}],[\"自定义排序规则\",{\"1\":{\"1401\":1}}],[\"自定义字段\",{\"1\":{\"1198\":1}}],[\"自定义安装\",{\"1\":{\"922\":1}}],[\"自定义一个方法将student对象中的name转换成大写并返回\",{\"1\":{\"854\":1}}],[\"自定义注解\",{\"0\":{\"547\":1}}],[\"自定义的格式\",{\"1\":{\"380\":1}}],[\"自定义引用类型\",{\"0\":{\"287\":1},\"1\":{\"284\":1,\"299\":1}}],[\"自定义引用类型的比较\",{\"0\":{\"273\":1}}],[\"自定义异常\",{\"0\":{\"35\":1}}],[\"自学参考\",{\"1\":{\"68\":1}}],[\"咖啡\",{\"1\":{\"65\":1}}],[\"5p\",{\"1\":{\"2312\":2,\"2757\":1,\"2896\":1}}],[\"5level\",{\"1\":{\"2487\":1}}],[\"5l\",{\"1\":{\"2204\":1}}],[\"5js中的注释\",{\"1\":{\"1952\":1}}],[\"5th<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"5e\",{\"1\":{\"1409\":1,\"1412\":1}}],[\"5<\",{\"1\":{\"1319\":1,\"2629\":1,\"2665\":2,\"2889\":2,\"2890\":1}}],[\"5月26日\",{\"1\":{\"1301\":6,\"1305\":1}}],[\"5月\",{\"1\":{\"1301\":1}}],[\"5及之后useserverprepstmts默认false\",{\"1\":{\"1251\":1}}],[\"5个以内\",{\"1\":{\"1148\":1}}],[\"5个字符\",{\"1\":{\"937\":1,\"955\":1}}],[\"59\",{\"1\":{\"899\":1,\"942\":6,\"1415\":7,\"2563\":1}}],[\"576px\",{\"1\":{\"1600\":1}}],[\"57\",{\"1\":{\"897\":4,\"2562\":1}}],[\"54\",{\"1\":{\"892\":1}}],[\"52\",{\"1\":{\"873\":1,\"880\":1,\"893\":2,\"899\":1,\"2030\":1}}],[\"5中才出现的\",{\"1\":{\"475\":1}}],[\"5后新增新一代的线程同步方式\",{\"1\":{\"473\":1}}],[\"5后\",{\"1\":{\"447\":1}}],[\"501\",{\"1\":{\"1975\":1}}],[\"50px\",{\"1\":{\"1529\":2,\"1535\":2,\"1536\":1,\"1591\":1,\"1650\":2,\"1695\":3}}],[\"50==0\",{\"1\":{\"1231\":1,\"1235\":1}}],[\"50\",{\"1\":{\"442\":1,\"446\":1,\"891\":1,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1215\":1,\"1322\":1,\"1409\":1,\"1412\":1,\"1927\":1,\"1928\":1,\"2182\":1,\"2679\":1}}],[\"500px\",{\"1\":{\"1310\":2,\"1525\":2,\"1533\":2,\"1534\":2,\"1535\":4}}],[\"500000\",{\"1\":{\"2417\":1}}],[\"500000000\",{\"1\":{\"888\":1}}],[\"5000\",{\"1\":{\"1211\":1,\"1459\":1,\"1588\":1,\"1589\":1,\"1590\":2,\"1825\":2}}],[\"500\",{\"1\":{\"192\":1,\"1211\":1,\"1757\":1,\"1808\":1,\"1975\":1,\"2025\":1,\"2031\":1,\"2697\":1}}],[\"5开始\",{\"1\":{\"397\":1}}],[\"5新增了一个stringbuilder类\",{\"1\":{\"397\":1}}],[\"51条插入的时候出现异常\",{\"1\":{\"1235\":1}}],[\"51\",{\"1\":{\"380\":1,\"1416\":4,\"1417\":1}}],[\"58\",{\"1\":{\"379\":2}}],[\"5就扩容的话\",{\"1\":{\"296\":1}}],[\"5倍\",{\"1\":{\"255\":1,\"258\":1}}],[\"5倍扩容\",{\"1\":{\"253\":1,\"254\":1}}],[\"5以后默认的存储引擎\",{\"1\":{\"2683\":1}}],[\"5以后都是基于注解的\",{\"1\":{\"534\":1}}],[\"5以后新出的特性\",{\"1\":{\"361\":1}}],[\"5以后\",{\"1\":{\"235\":1}}],[\"5之后\",{\"0\":{\"561\":1}}],[\"5之前默认的存储引擎\",{\"1\":{\"2683\":1}}],[\"5之前\",{\"0\":{\"560\":1}}],[\"5之前只能把元素类型设计为object\",{\"1\":{\"233\":1}}],[\"5之\",{\"1\":{\"233\":1}}],[\"565z\",{\"1\":{\"898\":1}}],[\"56\",{\"1\":{\"226\":2,\"379\":3,\"892\":1}}],[\"5xx\",{\"0\":{\"198\":1}}],[\"537\",{\"1\":{\"177\":2}}],[\"53\",{\"1\":{\"65\":1}}],[\"5\",{\"0\":{\"666\":1,\"694\":1,\"698\":1,\"699\":1,\"700\":1},\"1\":{\"65\":1,\"71\":2,\"177\":1,\"274\":2,\"275\":2,\"278\":1,\"283\":1,\"294\":3,\"327\":1,\"349\":3,\"363\":1,\"364\":1,\"367\":1,\"368\":1,\"375\":2,\"379\":1,\"395\":2,\"396\":2,\"405\":2,\"408\":1,\"409\":2,\"825\":1,\"826\":1,\"830\":2,\"837\":1,\"867\":2,\"868\":4,\"869\":2,\"870\":3,\"871\":2,\"872\":2,\"873\":4,\"874\":1,\"876\":1,\"885\":7,\"886\":1,\"887\":7,\"893\":1,\"898\":1,\"937\":2,\"955\":1,\"965\":1,\"972\":5,\"1001\":2,\"1093\":1,\"1155\":2,\"1198\":1,\"1211\":1,\"1251\":1,\"1340\":1,\"1366\":2,\"1384\":2,\"1386\":1,\"1388\":1,\"1389\":1,\"1391\":1,\"1400\":2,\"1401\":2,\"1406\":1,\"1416\":4,\"1541\":1,\"1543\":1,\"1545\":1,\"1546\":1,\"1548\":1,\"1549\":2,\"1552\":2,\"1555\":1,\"1558\":1,\"1563\":1,\"1564\":1,\"1567\":1,\"1579\":3,\"1585\":1,\"1586\":2,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":2,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1622\":1,\"1631\":1,\"1687\":1,\"1730\":1,\"2183\":1,\"2186\":1,\"2244\":2,\"2258\":2,\"2267\":1,\"2286\":1,\"2292\":1,\"2317\":1,\"2374\":1,\"2479\":1,\"2500\":1,\"2559\":1,\"2615\":1,\"2690\":1,\"2691\":1,\"2692\":1,\"2877\":1,\"2894\":1}}],[\"55\",{\"1\":{\"65\":1,\"374\":1}}],[\"6l\",{\"1\":{\"2206\":1,\"2208\":1,\"2209\":1,\"2211\":1}}],[\"6<\",{\"1\":{\"2186\":1,\"2629\":1,\"2894\":1}}],[\"693\",{\"1\":{\"1411\":1}}],[\"695081900\",{\"1\":{\"379\":2}}],[\"67\",{\"1\":{\"1321\":1}}],[\"6显示长度\",{\"1\":{\"937\":1,\"955\":1}}],[\"6种\",{\"1\":{\"292\":1}}],[\"644\",{\"1\":{\"893\":1}}],[\"64\",{\"1\":{\"279\":1,\"809\":1,\"810\":1,\"1452\":2}}],[\"6以后新出的方法\",{\"1\":{\"260\":1}}],[\"601\",{\"1\":{\"2493\":1}}],[\"60px\",{\"1\":{\"1529\":1}}],[\"60\",{\"1\":{\"234\":2,\"1890\":1,\"1892\":1,\"2022\":3,\"2023\":1,\"2679\":1}}],[\"65526\",{\"1\":{\"939\":1}}],[\"65535\",{\"1\":{\"494\":1}}],[\"65\",{\"1\":{\"65\":1}}],[\"6\",{\"0\":{\"667\":1,\"697\":1,\"701\":1,\"702\":1,\"703\":1,\"704\":1,\"705\":1,\"706\":1},\"1\":{\"65\":1,\"68\":2,\"71\":4,\"251\":1,\"272\":1,\"294\":2,\"327\":1,\"364\":1,\"367\":3,\"368\":2,\"371\":2,\"375\":2,\"380\":2,\"395\":2,\"396\":2,\"431\":1,\"837\":1,\"876\":1,\"937\":1,\"955\":1,\"1366\":2,\"1386\":1,\"1388\":1,\"1389\":1,\"1391\":2,\"1400\":3,\"1401\":2,\"1406\":1,\"1415\":2,\"1416\":1,\"1555\":1,\"1579\":1,\"1584\":1,\"1585\":2,\"1586\":2,\"1631\":1,\"1687\":2,\"1730\":1,\"2186\":1,\"2244\":2,\"2559\":1,\"2615\":1,\"2690\":1,\"2691\":1,\"2692\":1}}],[\"6650\",{\"1\":{\"845\":1}}],[\"666\",{\"1\":{\"842\":1,\"843\":1,\"844\":1}}],[\"66\",{\"1\":{\"65\":1,\"251\":1}}],[\"奶茶\",{\"1\":{\"65\":1}}],[\"茉莉\",{\"1\":{\"65\":1}}],[\"<generatorconfiguration>\",{\"1\":{\"2501\":1}}],[\"<groupid>javax\",{\"1\":{\"2748\":2,\"2893\":2}}],[\"<groupid>junit<\",{\"1\":{\"680\":1,\"683\":1,\"685\":1,\"688\":1,\"714\":2,\"715\":1,\"2267\":1,\"2374\":1,\"2538\":1,\"2629\":1,\"2665\":1}}],[\"<groupid>aopalliance<\",{\"1\":{\"2629\":1,\"2665\":1,\"2756\":1,\"2889\":1}}],[\"<groupid>ch\",{\"1\":{\"2484\":1}}],[\"<groupid>commons\",{\"1\":{\"683\":1,\"697\":1,\"2629\":1,\"2665\":1,\"2891\":1}}],[\"<groupid>com\",{\"1\":{\"683\":2,\"714\":2,\"715\":2,\"2186\":3,\"2267\":1,\"2292\":1,\"2374\":1,\"2500\":1,\"2582\":1,\"2665\":1,\"2748\":1,\"2756\":1,\"2875\":1,\"2885\":1,\"2890\":1,\"2891\":1}}],[\"<groupid>log4j<\",{\"1\":{\"2307\":1,\"2374\":1}}],[\"<groupid>p6spy<\",{\"1\":{\"2296\":1}}],[\"<groupid>org\",{\"1\":{\"700\":3,\"2186\":7,\"2267\":2,\"2292\":1,\"2311\":1,\"2374\":2,\"2484\":1,\"2500\":3,\"2538\":1,\"2614\":1,\"2629\":4,\"2665\":6,\"2756\":11,\"2889\":2,\"2890\":3,\"2891\":4,\"2892\":2,\"2894\":2}}],[\"<groupid>mysql<\",{\"1\":{\"683\":1,\"2186\":1,\"2267\":1,\"2374\":1,\"2500\":1,\"2582\":1,\"2665\":1,\"2756\":1,\"2890\":1}}],[\"<groupid>maven<\",{\"1\":{\"680\":1,\"714\":1,\"715\":1}}],[\"<when\",{\"1\":{\"2449\":2,\"2450\":8}}],[\"<where>\",{\"1\":{\"2447\":1,\"2450\":1,\"2453\":1,\"2456\":1}}],[\"<where>语句块<\",{\"1\":{\"2446\":1}}],[\"<welcome\",{\"1\":{\"1795\":2}}],[\"<web\",{\"1\":{\"545\":1,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2746\":1,\"2759\":1}}],[\"<jdbcconnection\",{\"1\":{\"2501\":1}}],[\"<jmxprefix>\",{\"1\":{\"2301\":1}}],[\"<javaclientgenerator\",{\"1\":{\"2501\":1}}],[\"<javamodelgenerator\",{\"1\":{\"2501\":1}}],[\"<java\",{\"1\":{\"2186\":1}}],[\"<jsp\",{\"1\":{\"1962\":1}}],[\"<60\",{\"1\":{\"2022\":1,\"2023\":1}}],[\"<cache\",{\"1\":{\"2481\":1,\"2486\":1}}],[\"<choose>\",{\"1\":{\"2449\":1,\"2450\":1}}],[\"<collection\",{\"1\":{\"2428\":1,\"2431\":1,\"2433\":1,\"2435\":1}}],[\"<constructor\",{\"1\":{\"2558\":6}}],[\"<console\",{\"1\":{\"2312\":1,\"2757\":1,\"2896\":1}}],[\"<configuration\",{\"1\":{\"2312\":1,\"2487\":1,\"2757\":1,\"2896\":1}}],[\"<configuration>\",{\"1\":{\"2186\":1,\"2278\":1,\"2374\":1}}],[\"<connector\",{\"1\":{\"1756\":1,\"1757\":1,\"1765\":1,\"1812\":1}}],[\"<context>\",{\"1\":{\"2092\":1}}],[\"<context\",{\"1\":{\"1747\":1,\"1768\":1,\"1831\":2,\"2501\":1,\"2584\":1,\"2588\":5,\"2590\":1,\"2591\":1,\"2592\":4,\"2594\":1,\"2599\":2,\"2630\":1,\"2648\":1,\"2666\":2,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2900\":1,\"2903\":2,\"2905\":1,\"2906\":1,\"2911\":1}}],[\"<c\",{\"1\":{\"2017\":3,\"2018\":4,\"2019\":4,\"2020\":4,\"2022\":7,\"2023\":6,\"2025\":11,\"2031\":9}}],[\"<10\",{\"1\":{\"1952\":1}}],[\"<null><\",{\"1\":{\"2560\":1}}],[\"<name>mybatisplusdemo<\",{\"1\":{\"2186\":1}}],[\"<name>nexus\",{\"1\":{\"675\":1}}],[\"<noscript>\",{\"1\":{\"1690\":1}}],[\"<keygen>\",{\"1\":{\"1438\":1}}],[\"<optional>true<\",{\"1\":{\"2186\":1}}],[\"<option>\",{\"1\":{\"2176\":5}}],[\"<option\",{\"1\":{\"1340\":6,\"1439\":5,\"1555\":3,\"2176\":1}}],[\"<ol>\",{\"1\":{\"1952\":1}}],[\"<ol><li><\",{\"1\":{\"1318\":1}}],[\"<ol\",{\"1\":{\"1317\":1,\"1318\":1,\"1609\":1}}],[\"<fmt\",{\"1\":{\"2030\":2,\"2031\":2}}],[\"<filtering>true<\",{\"1\":{\"2505\":2}}],[\"<filter\",{\"1\":{\"1999\":4,\"2047\":8,\"2049\":2,\"2058\":4,\"2807\":4,\"2829\":4,\"2830\":4,\"2912\":4}}],[\"<filter>\",{\"1\":{\"1999\":1,\"2047\":2,\"2049\":1,\"2058\":1,\"2807\":1,\"2829\":1,\"2830\":1,\"2912\":1}}],[\"<foreach\",{\"1\":{\"2464\":1,\"2466\":1,\"2467\":1}}],[\"<form>\",{\"1\":{\"1514\":1}}],[\"<form\",{\"1\":{\"1330\":2,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1439\":1,\"1555\":1,\"1579\":1,\"1586\":1,\"1793\":1,\"1907\":1,\"2055\":1,\"2060\":1,\"2094\":1,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":4,\"2857\":1,\"2859\":1,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2914\":1}}],[\"<font\",{\"1\":{\"1306\":1,\"1567\":1,\"1579\":10,\"1586\":8}}],[\"<font><\",{\"1\":{\"1306\":1}}],[\"<frame\",{\"1\":{\"1322\":6}}],[\"<frameset\",{\"1\":{\"1322\":3}}],[\"<frameset><\",{\"1\":{\"1322\":1}}],[\"<load\",{\"1\":{\"2910\":1}}],[\"<logger\",{\"1\":{\"2487\":1}}],[\"<loggers>\",{\"1\":{\"2312\":1,\"2757\":1,\"2896\":1}}],[\"<location>\",{\"1\":{\"1960\":2}}],[\"<localrepository>e\",{\"1\":{\"675\":1}}],[\"<ltlowerthen\",{\"1\":{\"1985\":1}}],[\"<label\",{\"1\":{\"1341\":1,\"1342\":1}}],[\"<list>\",{\"1\":{\"2566\":2}}],[\"<listener\",{\"1\":{\"2075\":1,\"2911\":1}}],[\"<listener>\",{\"1\":{\"2075\":1,\"2911\":1}}],[\"<li\",{\"1\":{\"1549\":1,\"1606\":4,\"1609\":4,\"1627\":1,\"1628\":1,\"1629\":1}}],[\"<li>1<\",{\"1\":{\"1952\":1}}],[\"<li>前端<\",{\"1\":{\"1574\":1}}],[\"<li>大数据<\",{\"1\":{\"1574\":1}}],[\"<li>python<\",{\"1\":{\"1574\":1,\"2159\":1}}],[\"<li>ai<\",{\"1\":{\"1574\":1}}],[\"<li>无问西东<\",{\"1\":{\"1549\":1}}],[\"<li>\",{\"1\":{\"1549\":9}}],[\"<li>java<\",{\"1\":{\"1574\":1,\"2159\":1}}],[\"<li>javase<\",{\"1\":{\"1317\":1,\"1318\":1}}],[\"<li>js<\",{\"1\":{\"1317\":1,\"1318\":1}}],[\"<li>css<\",{\"1\":{\"1317\":1,\"1318\":1,\"2159\":1}}],[\"<li>html<\",{\"1\":{\"1317\":1,\"1318\":1,\"2159\":1}}],[\"<li>mysql<\",{\"1\":{\"1317\":1,\"1318\":1,\"2159\":1}}],[\"<li>oracle<\",{\"1\":{\"1317\":1,\"1318\":1}}],[\"<li>出门<\",{\"1\":{\"1317\":1}}],[\"<li>洗漱<\",{\"1\":{\"1317\":1}}],[\"<li>吃早饭<\",{\"1\":{\"1317\":1}}],[\"<li>上厕所<\",{\"1\":{\"1317\":1}}],[\"<li>穿衣服<\",{\"1\":{\"1317\":1}}],[\"<li>睁眼<\",{\"1\":{\"1317\":1}}],[\"<link\",{\"1\":{\"1293\":1,\"1331\":1,\"1472\":1,\"1563\":1,\"1564\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"2786\":1}}],[\"<link>\",{\"1\":{\"1292\":1,\"1293\":1}}],[\"<e>\",{\"1\":{\"2493\":2}}],[\"<ehcache\",{\"1\":{\"2485\":1}}],[\"<entry\",{\"1\":{\"2566\":3}}],[\"<encoder>\",{\"1\":{\"2487\":1}}],[\"<environment\",{\"1\":{\"2278\":1,\"2374\":1}}],[\"<environments\",{\"1\":{\"2278\":1,\"2374\":1}}],[\"<engine\",{\"1\":{\"1766\":1}}],[\"<exclude>\",{\"1\":{\"2186\":1}}],[\"<excludes>\",{\"1\":{\"2186\":1}}],[\"<exclusion>\",{\"1\":{\"697\":1}}],[\"<exclusions>\",{\"1\":{\"697\":1}}],[\"<error\",{\"1\":{\"1960\":4}}],[\"<embed\",{\"1\":{\"1310\":4}}],[\"<em>倾斜<\",{\"1\":{\"1187\":1}}],[\"<bean\",{\"1\":{\"2542\":1,\"2546\":1,\"2548\":1,\"2553\":2,\"2554\":2,\"2555\":3,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":2,\"2563\":3,\"2564\":3,\"2566\":7,\"2567\":4,\"2571\":1,\"2574\":2,\"2579\":3,\"2584\":1,\"2588\":1,\"2666\":2,\"2701\":2,\"2706\":1,\"2710\":1,\"2765\":1,\"2779\":5,\"2780\":1,\"2789\":1,\"2799\":2,\"2898\":1,\"2901\":1,\"2903\":4,\"2906\":1,\"2907\":2,\"2908\":1}}],[\"<beans\",{\"1\":{\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"<bind\",{\"1\":{\"2458\":1,\"2459\":1}}],[\"<build>\",{\"1\":{\"2186\":1,\"2500\":1,\"2505\":1}}],[\"<button\",{\"1\":{\"1564\":9,\"1613\":2,\"1614\":2,\"1621\":2,\"1622\":2,\"1640\":2,\"1645\":3,\"1646\":1,\"1650\":2,\"1662\":1,\"1664\":2,\"1667\":1,\"1670\":1,\"1672\":1,\"1701\":2,\"1707\":1,\"1711\":1,\"1712\":1,\"1715\":2,\"1730\":1,\"2120\":1,\"2786\":1}}],[\"<base\",{\"1\":{\"1869\":1,\"1870\":1}}],[\"<base>\",{\"1\":{\"1292\":1,\"1293\":1}}],[\"<br>\",{\"1\":{\"1606\":1}}],[\"<br\",{\"1\":{\"1305\":1,\"1310\":1,\"1341\":1,\"1439\":1,\"1458\":1,\"1459\":1,\"1572\":1,\"1649\":2,\"1651\":2,\"1698\":2,\"1870\":3,\"1972\":4,\"1980\":12,\"1981\":4,\"1982\":1,\"1987\":6,\"1988\":3,\"1989\":4,\"1990\":1,\"1991\":5,\"2020\":4,\"2022\":1,\"2025\":1,\"2055\":2,\"2060\":2,\"2094\":1,\"2231\":1}}],[\"<b\",{\"1\":{\"1188\":1}}],[\"<b>加粗<\",{\"1\":{\"1187\":1,\"1302\":1}}],[\"<body>\",{\"1\":{\"1292\":1,\"1293\":1,\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1325\":1,\"1326\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1482\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1616\":1,\"1617\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1656\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1690\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"1928\":1,\"1951\":1,\"1952\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2131\":1,\"2132\":2,\"2159\":2,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2750\":1,\"2786\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"<body\",{\"1\":{\"65\":1,\"1442\":1,\"1464\":1}}],[\"<超链接地址>\",{\"1\":{\"1176\":1}}],[\"<util\",{\"1\":{\"2567\":1}}],[\"<update\",{\"1\":{\"2365\":1,\"2414\":1,\"2453\":1,\"2456\":1}}],[\"<users\",{\"1\":{\"2128\":1}}],[\"<user\",{\"1\":{\"1759\":1}}],[\"<ul>\",{\"1\":{\"1574\":1}}],[\"<ul><li><\",{\"1\":{\"1317\":1}}],[\"<ul\",{\"1\":{\"1317\":1,\"1549\":2,\"1606\":1}}],[\"<u>下划线<\",{\"1\":{\"1187\":1,\"1302\":1}}],[\"<u>\",{\"1\":{\"873\":1}}],[\"<url>http\",{\"1\":{\"675\":1}}],[\"<url\",{\"1\":{\"545\":1,\"1791\":1,\"1795\":1,\"1831\":2,\"1834\":2,\"1838\":1,\"1839\":1,\"1840\":1,\"1841\":1,\"1842\":1,\"1844\":4,\"1846\":2,\"1847\":2,\"1999\":5,\"2047\":2,\"2058\":1,\"2759\":1,\"2807\":1,\"2829\":1,\"2830\":1,\"2910\":1,\"2912\":1}}],[\"<resource>\",{\"1\":{\"2505\":2}}],[\"<resources>\",{\"1\":{\"2505\":1}}],[\"<result\",{\"1\":{\"2422\":2,\"2425\":9,\"2428\":9,\"2431\":9,\"2435\":2}}],[\"<resultmap\",{\"1\":{\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":1}}],[\"<relativepath\",{\"1\":{\"2186\":1}}],[\"<relativepath>\",{\"1\":{\"714\":1,\"715\":1}}],[\"<root\",{\"1\":{\"2312\":1,\"2487\":1,\"2757\":1,\"2896\":1}}],[\"<rollingfile\",{\"1\":{\"2312\":1}}],[\"<role\",{\"1\":{\"1759\":6}}],[\"<router\",{\"1\":{\"1718\":3}}],[\"<r>\",{\"1\":{\"867\":1}}],[\"<value>php<\",{\"1\":{\"2566\":3}}],[\"<value>mysql<\",{\"1\":{\"2566\":3}}],[\"<value>java<\",{\"1\":{\"2566\":3}}],[\"<value><\",{\"1\":{\"2560\":1}}],[\"<v>\",{\"1\":{\"841\":2}}],[\"<version>8\",{\"1\":{\"2267\":1,\"2374\":1,\"2500\":1,\"2582\":1,\"2665\":1,\"2756\":1,\"2890\":1}}],[\"<version>3\",{\"1\":{\"2186\":1,\"2267\":1,\"2292\":1,\"2296\":1,\"2374\":1,\"2500\":1,\"2894\":1}}],[\"<version>0\",{\"1\":{\"2186\":1,\"2500\":1}}],[\"<version>2\",{\"1\":{\"2186\":1,\"2311\":1,\"2748\":1,\"2756\":1,\"2875\":1,\"2891\":2,\"2893\":1,\"2894\":1}}],[\"<version>$\",{\"1\":{\"700\":3}}],[\"<version>5\",{\"1\":{\"683\":1,\"2538\":1,\"2614\":1,\"2629\":2,\"2665\":5,\"2756\":9,\"2889\":2,\"2890\":3,\"2891\":2,\"2892\":2}}],[\"<version>4\",{\"1\":{\"680\":1,\"683\":1,\"685\":1,\"688\":1,\"714\":2,\"715\":1,\"2267\":1,\"2374\":1,\"2538\":1,\"2629\":1,\"2665\":1,\"2748\":1,\"2893\":1}}],[\"<version>1\",{\"1\":{\"680\":1,\"683\":3,\"714\":3,\"715\":3,\"2186\":1,\"2267\":2,\"2307\":1,\"2374\":3,\"2484\":2,\"2500\":2,\"2582\":1,\"2629\":4,\"2665\":4,\"2748\":1,\"2756\":3,\"2885\":1,\"2889\":1,\"2890\":1,\"2891\":2}}],[\"<文件名称>\",{\"1\":{\"736\":1,\"737\":1}}],[\"<if\",{\"1\":{\"2443\":1,\"2444\":8,\"2447\":8,\"2453\":7,\"2456\":7}}],[\"<iframe\",{\"1\":{\"1321\":3}}],[\"<id\",{\"1\":{\"2422\":1,\"2425\":2,\"2428\":2,\"2431\":4,\"2435\":1}}],[\"<id>nexus\",{\"1\":{\"675\":1}}],[\"<img\",{\"1\":{\"1309\":3,\"1339\":1,\"1518\":1,\"1532\":1,\"1609\":4,\"1649\":3,\"1651\":3,\"2060\":2,\"2786\":1}}],[\"<i><u><b>加粗倾斜下划线<\",{\"1\":{\"1302\":1}}],[\"<i><\",{\"1\":{\"1302\":1}}],[\"<i>倾斜<\",{\"1\":{\"1187\":1,\"1302\":1}}],[\"<include>\",{\"1\":{\"2505\":1}}],[\"<includes>\",{\"1\":{\"2505\":1}}],[\"<include\",{\"1\":{\"2461\":1,\"2462\":1}}],[\"<insert\",{\"1\":{\"2362\":1,\"2409\":1,\"2410\":1}}],[\"<ins>下划线<\",{\"1\":{\"1187\":1}}],[\"<init\",{\"1\":{\"1834\":4,\"2049\":4,\"2058\":1,\"2759\":1,\"2807\":1,\"2910\":1,\"2912\":1}}],[\"<initsize\",{\"1\":{\"1288\":1}}],[\"<input=\",{\"1\":{\"1438\":1}}],[\"<input>\",{\"1\":{\"1438\":2}}],[\"<input\",{\"1\":{\"65\":1,\"129\":1,\"1330\":4,\"1331\":2,\"1333\":3,\"1334\":1,\"1335\":2,\"1336\":4,\"1337\":1,\"1338\":1,\"1339\":3,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":2,\"1346\":1,\"1347\":1,\"1349\":4,\"1350\":2,\"1379\":1,\"1380\":3,\"1436\":1,\"1439\":3,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":3,\"1459\":3,\"1460\":2,\"1462\":1,\"1463\":3,\"1488\":1,\"1489\":2,\"1490\":4,\"1491\":4,\"1493\":2,\"1494\":2,\"1496\":1,\"1497\":1,\"1499\":2,\"1500\":2,\"1501\":2,\"1505\":1,\"1514\":4,\"1555\":6,\"1567\":4,\"1568\":4,\"1570\":4,\"1571\":8,\"1572\":4,\"1579\":5,\"1586\":5,\"1588\":3,\"1589\":3,\"1590\":4,\"1653\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1698\":3,\"1793\":3,\"1907\":3,\"2055\":3,\"2060\":3,\"2094\":3,\"2114\":3,\"2128\":1,\"2131\":3,\"2132\":2,\"2159\":1,\"2166\":1,\"2169\":3,\"2170\":3,\"2171\":3,\"2793\":3,\"2794\":3,\"2796\":7,\"2798\":2,\"2800\":5,\"2801\":5,\"2814\":1,\"2817\":3,\"2820\":1,\"2830\":6,\"2857\":2,\"2859\":1,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2877\":1,\"2914\":3}}],[\"<mvc\",{\"1\":{\"2780\":3,\"2789\":7,\"2790\":1,\"2799\":1,\"2898\":2,\"2901\":1,\"2902\":1}}],[\"<map>\",{\"1\":{\"2566\":1}}],[\"<mapper\",{\"1\":{\"2278\":1,\"2279\":1,\"2320\":3,\"2321\":3,\"2322\":3,\"2374\":2,\"2918\":1}}],[\"<mappers>\",{\"1\":{\"2278\":1,\"2320\":1,\"2321\":1,\"2322\":1,\"2323\":1,\"2374\":1}}],[\"<maven\",{\"1\":{\"2267\":2,\"2374\":2,\"2629\":2,\"2665\":2}}],[\"<manager\",{\"1\":{\"2092\":1}}],[\"<maxsize\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"<module>\",{\"1\":{\"718\":4}}],[\"<modules>\",{\"1\":{\"718\":1}}],[\"<modelversion>4\",{\"1\":{\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"2267\":1,\"2748\":1,\"2885\":1}}],[\"<mirrorof>central<\",{\"1\":{\"675\":1}}],[\"<mirror>\",{\"1\":{\"675\":1}}],[\"<meta>\",{\"1\":{\"1292\":2,\"1293\":1}}],[\"<meta\",{\"1\":{\"65\":1,\"76\":3,\"1293\":6,\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1322\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1482\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1690\":3,\"1695\":1,\"1698\":1,\"1701\":1,\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"2131\":1,\"2132\":2,\"2159\":2,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"<sqlmapgenerator\",{\"1\":{\"2501\":1}}],[\"<sql\",{\"1\":{\"2461\":3,\"2462\":1}}],[\"<sizebasedtriggeringpolicy\",{\"1\":{\"2312\":1}}],[\"<sayvue3\",{\"1\":{\"1715\":1}}],[\"<sayvue2\",{\"1\":{\"1713\":1}}],[\"<sayvue1\",{\"1\":{\"1712\":1}}],[\"<sayvue\",{\"1\":{\"1711\":1}}],[\"<span\",{\"1\":{\"1571\":4,\"1579\":1,\"1586\":1,\"1609\":4,\"1695\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"<span><\",{\"1\":{\"1571\":1}}],[\"<span>text<span>\",{\"1\":{\"1571\":1}}],[\"<span>thank\",{\"1\":{\"1482\":2}}],[\"<span>xxx<\",{\"1\":{\"1570\":1}}],[\"<span>span<\",{\"1\":{\"1548\":1}}],[\"<span>\",{\"1\":{\"1513\":1}}],[\"<span>啊啊啊啊啊<\",{\"1\":{\"1512\":3}}],[\"<span>文字<\",{\"1\":{\"1499\":1,\"1500\":1}}],[\"<span>hello<\",{\"1\":{\"1482\":1}}],[\"<spring\",{\"1\":{\"699\":1}}],[\"<set>\",{\"1\":{\"2453\":1,\"2566\":1}}],[\"<set>语句块<\",{\"1\":{\"2452\":1}}],[\"<setting\",{\"1\":{\"2315\":1,\"2374\":1,\"2434\":2}}],[\"<settings>\",{\"1\":{\"2315\":1,\"2374\":1,\"2434\":1}}],[\"<session\",{\"1\":{\"1899\":2}}],[\"<service\",{\"1\":{\"1764\":1}}],[\"<server\",{\"1\":{\"1763\":1}}],[\"<servlet\",{\"1\":{\"545\":4,\"1791\":4,\"1795\":4,\"1831\":8,\"1834\":12,\"1838\":2,\"1839\":2,\"1840\":2,\"1841\":2,\"1842\":2,\"1844\":8,\"1846\":2,\"1847\":4,\"1999\":10,\"2759\":4,\"2910\":4}}],[\"<servlet>\",{\"1\":{\"545\":1,\"1791\":1,\"1795\":1,\"1831\":2,\"1834\":4,\"1999\":2,\"2759\":1,\"2910\":1}}],[\"<selectkey\",{\"1\":{\"2410\":1}}],[\"<select>\",{\"1\":{\"1438\":1}}],[\"<select\",{\"1\":{\"1340\":1,\"1439\":1,\"1555\":1,\"2176\":3,\"2279\":1,\"2344\":1,\"2347\":1,\"2350\":1,\"2354\":1,\"2356\":1,\"2358\":1,\"2378\":1,\"2385\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2394\":1,\"2398\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2406\":1,\"2407\":1,\"2413\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":2,\"2444\":1,\"2447\":1,\"2450\":1,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2480\":1,\"2918\":1}}],[\"<sup>上标<\",{\"1\":{\"1187\":1}}],[\"<sub>下标<\",{\"1\":{\"1187\":1}}],[\"<s>删除线<\",{\"1\":{\"1187\":1}}],[\"<store\",{\"1\":{\"2092\":1}}],[\"<strong>we\",{\"1\":{\"1690\":1}}],[\"<strong>加粗<\",{\"1\":{\"1187\":1}}],[\"<style\",{\"1\":{\"1471\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1528\":1,\"1529\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1650\":1,\"1695\":1,\"1698\":1,\"1701\":1}}],[\"<style><\",{\"1\":{\"1704\":1}}],[\"<style>\",{\"1\":{\"1292\":1,\"1293\":1,\"1433\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1638\":1,\"1691\":2,\"1707\":1,\"1708\":1,\"1711\":2,\"1712\":2,\"1713\":2,\"1715\":2,\"1928\":1,\"1952\":1,\"1976\":1,\"2025\":1,\"2031\":1}}],[\"<stirng>\",{\"1\":{\"409\":1}}],[\"<scope>provided<\",{\"1\":{\"2267\":1,\"2374\":1,\"2748\":2}}],[\"<scope>test<\",{\"1\":{\"680\":1,\"683\":1,\"685\":1,\"688\":1,\"2186\":1,\"2267\":1,\"2374\":1,\"2538\":1,\"2629\":1,\"2665\":1,\"2756\":2,\"2891\":1}}],[\"<script>\",{\"1\":{\"74\":1,\"78\":1,\"1292\":1,\"1293\":1,\"1361\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1545\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1613\":1,\"1614\":1,\"1616\":1,\"1617\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1691\":2,\"1704\":2,\"1707\":1,\"1708\":1,\"1711\":2,\"1712\":2,\"1713\":2,\"1715\":2,\"1952\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2131\":1,\"2132\":2,\"2155\":1,\"2159\":1,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2877\":1}}],[\"<script\",{\"1\":{\"65\":2,\"1379\":1,\"1380\":3,\"1544\":1,\"1545\":1,\"1548\":2,\"1549\":2,\"1552\":2,\"1555\":2,\"1563\":3,\"1564\":3,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":3,\"1602\":3,\"1606\":3,\"1609\":3,\"1614\":1,\"1616\":1,\"1617\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1656\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1695\":2,\"1698\":2,\"1701\":2,\"2131\":1,\"2132\":2,\"2159\":1,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2786\":1,\"2877\":1}}],[\"<<<<<<<\",{\"1\":{\"750\":2}}],[\"<<1\",{\"1\":{\"392\":1}}],[\"<<=\",{\"1\":{\"294\":1}}],[\"<=4000\",{\"1\":{\"1976\":1}}],[\"<=3000\",{\"1\":{\"1976\":1}}],[\"<=2000\",{\"1\":{\"1976\":1}}],[\"<=1500\",{\"1\":{\"1976\":1}}],[\"<=1000\",{\"1\":{\"1976\":1}}],[\"<=lelower\",{\"1\":{\"1985\":1}}],[\"<=l\",{\"1\":{\"1927\":1,\"1928\":1}}],[\"<=h\",{\"1\":{\"1927\":1,\"1928\":1}}],[\"<=any\",{\"1\":{\"1071\":1}}],[\"<=all\",{\"1\":{\"1071\":1}}],[\"<=>\",{\"1\":{\"1030\":1}}],[\"<=0\",{\"1\":{\"356\":1}}],[\"<=\",{\"1\":{\"328\":1,\"338\":1,\"363\":1,\"364\":1,\"376\":1,\"465\":1,\"471\":1,\"480\":1,\"489\":2,\"490\":2,\"888\":1,\"1030\":1,\"1360\":1,\"1366\":3,\"1367\":3,\"1579\":2,\"1622\":1,\"1701\":1,\"1988\":1}}],[\"<0\",{\"1\":{\"272\":1}}],[\"<>里面就是一个参数类型\",{\"1\":{\"238\":1}}],[\"<>\",{\"1\":{\"235\":1,\"1030\":1,\"2246\":1}}],[\"<tbody>\",{\"1\":{\"2925\":1}}],[\"<tx\",{\"1\":{\"2706\":1,\"2710\":3,\"2903\":1,\"2908\":1}}],[\"<typehandler\",{\"1\":{\"2509\":1}}],[\"<typehandlers>\",{\"1\":{\"2509\":1}}],[\"<typealias\",{\"1\":{\"2326\":1}}],[\"<typealiases>\",{\"1\":{\"2326\":1,\"2329\":1,\"2374\":1}}],[\"<template>\",{\"1\":{\"1691\":2,\"1704\":1,\"1707\":1,\"1708\":1,\"1711\":2,\"1712\":2,\"1713\":2,\"1715\":2}}],[\"<textarea>\",{\"1\":{\"1438\":2}}],[\"<textarea\",{\"1\":{\"1341\":1,\"1555\":1,\"1701\":1}}],[\"<thead>\",{\"1\":{\"2925\":1}}],[\"<th\",{\"1\":{\"1544\":5,\"1545\":5}}],[\"<th>工号<\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"<th>islast<\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"<th>isfirst<\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"<th>索引<\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"<th>薪资等级<\",{\"1\":{\"1976\":1,\"2025\":1,\"2031\":1}}],[\"<th>薪资<\",{\"1\":{\"1976\":1,\"2025\":1,\"2031\":1}}],[\"<th>部门号<\",{\"1\":{\"1976\":1,\"2025\":1,\"2031\":1}}],[\"<th>补助<\",{\"1\":{\"1976\":1,\"2025\":1,\"2031\":1}}],[\"<th>入职日期<\",{\"1\":{\"1976\":1,\"2025\":1,\"2031\":1}}],[\"<th>职务<\",{\"1\":{\"1976\":1,\"2025\":1,\"2031\":1}}],[\"<th>上级编号<\",{\"1\":{\"1976\":1,\"2025\":1,\"2031\":1}}],[\"<th>编号<\",{\"1\":{\"1976\":1}}],[\"<th>身高<\",{\"1\":{\"1630\":1}}],[\"<th>性别<\",{\"1\":{\"1630\":1}}],[\"<th>年龄<\",{\"1\":{\"1630\":1}}],[\"<th>年纪<\",{\"1\":{\"1319\":1}}],[\"<th>序号<\",{\"1\":{\"1630\":1,\"2025\":1,\"2031\":1}}],[\"<th>成绩<\",{\"1\":{\"1319\":1}}],[\"<th>姓名<\",{\"1\":{\"1319\":1,\"1630\":1,\"1976\":1,\"2025\":2,\"2031\":2}}],[\"<th>学号<\",{\"1\":{\"1319\":1}}],[\"<table\",{\"1\":{\"1319\":1,\"1544\":1,\"1545\":1,\"1555\":1,\"1579\":1,\"1586\":1,\"1630\":1,\"1631\":1,\"1793\":1,\"1976\":1,\"2025\":1,\"2031\":1,\"2501\":1,\"2925\":1}}],[\"<table><tr><th><\",{\"1\":{\"1319\":1}}],[\"<table>\",{\"1\":{\"147\":1,\"1928\":1}}],[\"<title>hello\",{\"1\":{\"2750\":1}}],[\"<title>ajax数据响应格式<\",{\"1\":{\"2120\":1}}],[\"<title>$title\",{\"1\":{\"2055\":1,\"2060\":1,\"2088\":1,\"2094\":1,\"2114\":1,\"2128\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1}}],[\"<title>$title$<\",{\"1\":{\"1951\":1}}],[\"<title>title<\",{\"1\":{\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"1928\":1,\"1952\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2060\":2,\"2124\":1,\"2132\":2,\"2159\":2,\"2166\":1,\"2786\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"<title>表单选择器<\",{\"1\":{\"1555\":1}}],[\"<title>位置选择器<\",{\"1\":{\"1552\":1}}],[\"<title>属性选择器<\",{\"1\":{\"1549\":1}}],[\"<title>基本选择器<\",{\"1\":{\"1548\":1}}],[\"<title>页面分析<\",{\"1\":{\"1482\":1}}],[\"<title><\",{\"1\":{\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1322\":1,\"1330\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1690\":1,\"1695\":1,\"1698\":1,\"1701\":1}}],[\"<title>文本标签<\",{\"1\":{\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1}}],[\"<title>百度一下\",{\"1\":{\"1293\":1,\"1331\":1}}],[\"<title>\",{\"1\":{\"1292\":1,\"1293\":1}}],[\"<title>document<\",{\"1\":{\"76\":1}}],[\"<t>\",{\"1\":{\"241\":1,\"841\":1,\"846\":1,\"875\":1,\"905\":1,\"2702\":1}}],[\"<td>requestparam<\",{\"1\":{\"2925\":1}}],[\"<td>requestscope<\",{\"1\":{\"2925\":1}}],[\"<td>applicationscope<\",{\"1\":{\"2925\":1}}],[\"<td>uname<\",{\"1\":{\"2925\":1}}],[\"<td>message<\",{\"1\":{\"2925\":1}}],[\"<td>$\",{\"1\":{\"2025\":13,\"2031\":11,\"2925\":8}}],[\"<td><\",{\"1\":{\"1976\":9}}],[\"<td><input\",{\"1\":{\"1555\":4}}],[\"<td>您的email\",{\"1\":{\"1579\":1,\"1586\":1}}],[\"<td>您的姓名\",{\"1\":{\"1579\":1,\"1586\":1}}],[\"<td>再输入一遍密码\",{\"1\":{\"1579\":1,\"1586\":1}}],[\"<td>输入密码\",{\"1\":{\"1579\":1,\"1586\":1}}],[\"<td>自我介绍<\",{\"1\":{\"1555\":1}}],[\"<td>籍贯<\",{\"1\":{\"1555\":1}}],[\"<td>电子邮箱<\",{\"1\":{\"1555\":1}}],[\"<td>年龄<\",{\"1\":{\"1555\":1}}],[\"<td>性别<\",{\"1\":{\"1555\":1}}],[\"<td>确认密码<\",{\"1\":{\"1555\":1}}],[\"<td>密码<\",{\"1\":{\"1793\":1}}],[\"<td>密\",{\"1\":{\"1555\":1}}],[\"<td>\",{\"1\":{\"1555\":4,\"1579\":4,\"1586\":4,\"1630\":5,\"1793\":2,\"1927\":1,\"1928\":1,\"1976\":1,\"2025\":1,\"2031\":3}}],[\"<td>用户名<\",{\"1\":{\"1555\":1,\"1793\":1}}],[\"<td>cancer<\",{\"1\":{\"1545\":1}}],[\"<td>can<\",{\"1\":{\"1544\":1}}],[\"<td>tastestory<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>virgo<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>sessionscope<\",{\"1\":{\"2925\":1}}],[\"<td>sep\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>scope<\",{\"1\":{\"2925\":1}}],[\"<td>scorpio<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>sagittarius<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>girlwing<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>nov\",{\"1\":{\"1544\":2,\"1545\":2}}],[\"<td>w15<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>w13<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>w210<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>w610<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>fresheggs<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>jun\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>isaac<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>1095245<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>1038818<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>1307994<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>1118159<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"<td>18<\",{\"1\":{\"1319\":1}}],[\"<td>19<\",{\"1\":{\"1319\":1}}],[\"<td>小明<\",{\"1\":{\"1319\":1}}],[\"<td>3007<\",{\"1\":{\"1319\":1}}],[\"<td>30<\",{\"1\":{\"1319\":1}}],[\"<td>丽丽<\",{\"1\":{\"1319\":1}}],[\"<td\",{\"1\":{\"147\":2,\"1319\":3,\"1555\":1,\"1579\":1,\"1586\":1,\"1631\":1,\"1793\":1}}],[\"<trim\",{\"1\":{\"2455\":1,\"2456\":1}}],[\"<transactionmanager\",{\"1\":{\"2278\":1,\"2317\":1,\"2318\":1,\"2374\":1}}],[\"<tr>\",{\"1\":{\"1319\":3,\"1544\":5,\"1545\":5,\"1555\":9,\"1579\":5,\"1586\":5,\"1793\":2,\"1927\":1,\"1928\":1,\"1976\":2,\"2025\":2,\"2031\":2,\"2925\":5}}],[\"<tr\",{\"1\":{\"147\":1,\"1319\":1,\"1630\":1,\"1631\":1,\"1793\":1}}],[\"<aop\",{\"1\":{\"2630\":1,\"2648\":9,\"2710\":3}}],[\"<array>\",{\"1\":{\"2566\":1,\"2799\":1}}],[\"<artifactid>jackson\",{\"1\":{\"2875\":1,\"2891\":1}}],[\"<artifactid>javax\",{\"1\":{\"2748\":2,\"2893\":2}}],[\"<artifactid>junit\",{\"1\":{\"2756\":1,\"2891\":1}}],[\"<artifactid>junit<\",{\"1\":{\"680\":1,\"683\":1,\"685\":1,\"688\":1,\"714\":2,\"715\":1,\"2267\":1,\"2374\":1,\"2538\":1,\"2629\":1,\"2665\":1}}],[\"<artifactid>aopalliance<\",{\"1\":{\"2629\":1,\"2665\":1,\"2756\":1,\"2889\":1}}],[\"<artifactid>aspectjweaver<\",{\"1\":{\"2629\":1}}],[\"<artifactid>c3p0<\",{\"1\":{\"2500\":1}}],[\"<artifactid>commons\",{\"1\":{\"683\":1,\"697\":1,\"2629\":1,\"2665\":1,\"2891\":1}}],[\"<artifactid>logback\",{\"1\":{\"2484\":1}}],[\"<artifactid>log4j\",{\"1\":{\"2311\":1,\"2756\":1,\"2891\":1}}],[\"<artifactid>log4j<\",{\"1\":{\"2307\":1,\"2374\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"2186\":3,\"2267\":1,\"2374\":1,\"2629\":1,\"2665\":1,\"2756\":1,\"2891\":1}}],[\"<artifactid>p6spy<\",{\"1\":{\"2296\":1}}],[\"<artifactid>freemarker<\",{\"1\":{\"2292\":1}}],[\"<artifactid>springmvc\",{\"1\":{\"2748\":1,\"2885\":1}}],[\"<artifactid>spring\",{\"1\":{\"700\":3,\"2186\":4,\"2538\":1,\"2614\":1,\"2629\":2,\"2665\":5,\"2756\":8,\"2889\":2,\"2890\":3,\"2891\":1,\"2892\":2}}],[\"<artifactid>druid<\",{\"1\":{\"683\":1,\"2186\":1,\"2582\":1,\"2665\":1,\"2756\":1,\"2890\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"2267\":1,\"2374\":1,\"2500\":1,\"2894\":1}}],[\"<artifactid>mybatistest02<\",{\"1\":{\"2267\":1,\"2374\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"2186\":1,\"2292\":1,\"2484\":1,\"2500\":2,\"2894\":1}}],[\"<artifactid>mybatisplusdemo<\",{\"1\":{\"2186\":1}}],[\"<artifactid>mysql\",{\"1\":{\"683\":1,\"2186\":1,\"2267\":1,\"2374\":1,\"2500\":1,\"2582\":1,\"2665\":1,\"2756\":1,\"2890\":1}}],[\"<artifactid>mavendemo01<\",{\"1\":{\"714\":2,\"715\":2}}],[\"<artifactid>mavendemo<\",{\"1\":{\"683\":1}}],[\"<artifactid>hello<\",{\"1\":{\"680\":1,\"714\":1,\"715\":1}}],[\"<association\",{\"1\":{\"2425\":1,\"2431\":1}}],[\"<appender\",{\"1\":{\"2487\":2}}],[\"<appenderref\",{\"1\":{\"2312\":2,\"2757\":1,\"2896\":1}}],[\"<appenders>\",{\"1\":{\"2312\":1,\"2757\":1,\"2896\":1}}],[\"<any\",{\"1\":{\"1071\":1}}],[\"<all\",{\"1\":{\"1071\":1}}],[\"<a\",{\"1\":{\"130\":1,\"138\":1,\"240\":1,\"1189\":1,\"1312\":7,\"1314\":8,\"1315\":1,\"1463\":1,\"1479\":1,\"1515\":1,\"1549\":10,\"1606\":4,\"1609\":2,\"1660\":1,\"1870\":6}}],[\"<policies>\",{\"1\":{\"2312\":1}}],[\"<plugin>\",{\"1\":{\"2186\":1,\"2500\":1}}],[\"<plugins>\",{\"1\":{\"2186\":1,\"2500\":1}}],[\"<persons\",{\"1\":{\"2124\":1}}],[\"<pre>\",{\"1\":{\"1304\":1}}],[\"<pre><\",{\"1\":{\"1304\":1}}],[\"<properties\",{\"1\":{\"2332\":1,\"2334\":2,\"2374\":1}}],[\"<properties>\",{\"1\":{\"699\":1,\"2186\":1,\"2267\":1,\"2374\":1,\"2629\":1,\"2665\":1}}],[\"<property\",{\"1\":{\"2278\":4,\"2317\":1,\"2318\":1,\"2332\":6,\"2334\":4,\"2374\":6,\"2501\":4,\"2557\":3,\"2560\":3,\"2562\":2,\"2563\":4,\"2564\":4,\"2566\":5,\"2567\":1,\"2571\":1,\"2574\":1,\"2579\":1,\"2584\":4,\"2666\":5,\"2701\":2,\"2706\":1,\"2710\":1,\"2765\":2,\"2779\":2,\"2780\":2,\"2789\":2,\"2799\":1,\"2901\":1,\"2903\":9,\"2906\":4,\"2907\":4,\"2908\":1}}],[\"<project\",{\"1\":{\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"2267\":1,\"2629\":1,\"2665\":1,\"2748\":1,\"2885\":1}}],[\"<pattern>\",{\"1\":{\"2487\":1}}],[\"<patternlayout\",{\"1\":{\"2312\":2,\"2757\":1,\"2896\":1}}],[\"<package\",{\"1\":{\"2323\":1,\"2329\":1,\"2374\":3}}],[\"<packaging>war<\",{\"1\":{\"2748\":1,\"2885\":1}}],[\"<packaging>jar<\",{\"1\":{\"2186\":1,\"2267\":1,\"2374\":1,\"2629\":1,\"2665\":1}}],[\"<packaging>pom<\",{\"1\":{\"714\":1,\"715\":1}}],[\"<param\",{\"1\":{\"1831\":4,\"1834\":8,\"2049\":8,\"2058\":2,\"2759\":2,\"2807\":2,\"2910\":2,\"2911\":2,\"2912\":2}}],[\"<parent>\",{\"1\":{\"714\":1,\"715\":1,\"2186\":1}}],[\"<p>爱好\",{\"1\":{\"2796\":1}}],[\"<p>性别\",{\"1\":{\"2796\":1}}],[\"<p>年龄<input\",{\"1\":{\"2796\":1}}],[\"<p>姓名<input\",{\"1\":{\"2796\":1}}],[\"<p>测试使用map接收参数<\",{\"1\":{\"2801\":1}}],[\"<p>测试使用list接收参数<\",{\"1\":{\"2800\":1}}],[\"<p>测试日期转换<\",{\"1\":{\"2798\":1}}],[\"<p>测试pojo<\",{\"1\":{\"2796\":1}}],[\"<p>测试解耦合方式参数注入<\",{\"1\":{\"2794\":1}}],[\"<p>测试紧耦合方式参数注入<\",{\"1\":{\"2793\":1}}],[\"<p>this\",{\"1\":{\"2786\":1}}],[\"<p>thinking\",{\"1\":{\"1314\":3}}],[\"<p>ccccccccccccccccccc<\",{\"1\":{\"1695\":4}}],[\"<p>bbbbbbbbbbbbbbbb<\",{\"1\":{\"1695\":4}}],[\"<p>aaaaaaaaaaaaaaaaaa<\",{\"1\":{\"1695\":4}}],[\"<p>我的名字是\",{\"1\":{\"1653\":1}}],[\"<p>praesent\",{\"1\":{\"1609\":2}}],[\"<p>nulla\",{\"1\":{\"1609\":1}}],[\"<p>sed\",{\"1\":{\"1606\":2}}],[\"<p>ut\",{\"1\":{\"1606\":1}}],[\"<p>lorem\",{\"1\":{\"1606\":1,\"1609\":1}}],[\"<p>使用了\",{\"1\":{\"1596\":1}}],[\"<p>这是一些文本\",{\"1\":{\"1596\":1}}],[\"<p>9\",{\"1\":{\"1552\":1}}],[\"<p>8\",{\"1\":{\"1552\":1}}],[\"<p>7\",{\"1\":{\"1552\":1}}],[\"<p>6\",{\"1\":{\"1552\":1}}],[\"<p>5\",{\"1\":{\"1552\":1}}],[\"<p>5月26日\",{\"1\":{\"1301\":2}}],[\"<p>4\",{\"1\":{\"1552\":1}}],[\"<p>3\",{\"1\":{\"1552\":1}}],[\"<p>2\",{\"1\":{\"1552\":1}}],[\"<p>13\",{\"1\":{\"1552\":1}}],[\"<p>12\",{\"1\":{\"1552\":1}}],[\"<p>11\",{\"1\":{\"1552\":1}}],[\"<p>10\",{\"1\":{\"1552\":1}}],[\"<p>1\",{\"1\":{\"1552\":1}}],[\"<p>div\",{\"1\":{\"1548\":1}}],[\"<p>你好<\",{\"1\":{\"1536\":7}}],[\"<p>奶粉<\",{\"1\":{\"1314\":3}}],[\"<p>大宝<\",{\"1\":{\"1314\":3}}],[\"<p>华为p40<\",{\"1\":{\"1314\":3}}],[\"<p>\",{\"1\":{\"1301\":1,\"1548\":2,\"1634\":1,\"1637\":1,\"1638\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1701\":1,\"2796\":1,\"2798\":1,\"2800\":2,\"2801\":2}}],[\"<p><\",{\"1\":{\"1301\":1}}],[\"<p>被抽取出来的头部内容<\",{\"1\":{\"149\":1}}],[\"<p>请求参数获取\",{\"1\":{\"136\":1,\"137\":1}}],[\"<p\",{\"1\":{\"128\":1,\"132\":1,\"133\":1,\"134\":1,\"136\":2,\"137\":3,\"140\":3,\"141\":2,\"142\":4,\"145\":3,\"146\":3,\"1548\":2,\"1620\":4,\"1621\":4,\"1622\":6,\"1624\":1,\"1634\":1,\"1635\":3,\"1640\":1,\"1643\":1,\"1650\":2,\"1701\":1,\"1730\":1}}],[\"<标签\",{\"1\":{\"127\":1}}],[\"<directory>src\",{\"1\":{\"2505\":2}}],[\"<diskstore\",{\"1\":{\"2485\":1}}],[\"<div><\",{\"1\":{\"1622\":1}}],[\"<div>我是div<\",{\"1\":{\"1528\":1}}],[\"<div>\",{\"1\":{\"1513\":1,\"1548\":1,\"1552\":4,\"1704\":1,\"1707\":1,\"1711\":2,\"1712\":2,\"1713\":2,\"1715\":2}}],[\"<div>啊啊啊啊啊<\",{\"1\":{\"1512\":1}}],[\"<div>啊啊啊啊啊<br\",{\"1\":{\"1512\":1}}],[\"<div\",{\"1\":{\"65\":1,\"146\":1,\"149\":1,\"150\":3,\"1433\":1,\"1482\":1,\"1488\":3,\"1489\":5,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1505\":1,\"1521\":16,\"1523\":4,\"1524\":4,\"1525\":5,\"1529\":2,\"1533\":4,\"1534\":4,\"1535\":6,\"1536\":1,\"1568\":2,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1579\":3,\"1586\":3,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":2,\"1602\":9,\"1606\":6,\"1609\":10,\"1614\":1,\"1616\":1,\"1617\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1656\":3,\"1658\":4,\"1659\":4,\"1660\":1,\"1661\":4,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1690\":1,\"1691\":1,\"1695\":5,\"1698\":2,\"1701\":1,\"1708\":1,\"1718\":1,\"1730\":1,\"2159\":2}}],[\"<datasource\",{\"1\":{\"2278\":1,\"2332\":1,\"2334\":2,\"2374\":1}}],[\"<defaultcache\",{\"1\":{\"2485\":1}}],[\"<defaultrolloverstrategy\",{\"1\":{\"2312\":1}}],[\"<delete\",{\"1\":{\"2368\":1,\"2415\":1}}],[\"<del>你好\",{\"1\":{\"1303\":1}}],[\"<del><\",{\"1\":{\"1303\":1}}],[\"<del>删除线<\",{\"1\":{\"1187\":1}}],[\"<description>mybatisplusdemo<\",{\"1\":{\"2186\":1}}],[\"<dependencymanagement>\",{\"1\":{\"714\":1}}],[\"<dependencymanagement>标签\",{\"0\":{\"714\":1}}],[\"<dependency>\",{\"1\":{\"680\":1,\"683\":4,\"685\":1,\"688\":1,\"700\":3,\"714\":2,\"715\":1,\"2186\":7,\"2267\":4,\"2292\":2,\"2296\":1,\"2307\":1,\"2311\":1,\"2374\":5,\"2484\":2,\"2500\":4,\"2538\":2,\"2582\":2,\"2614\":1,\"2629\":7,\"2665\":11,\"2748\":2,\"2756\":14,\"2875\":1,\"2889\":3,\"2890\":5,\"2891\":6,\"2892\":2,\"2893\":2,\"2894\":2}}],[\"<dependencies>\",{\"1\":{\"94\":1,\"680\":1,\"683\":1,\"688\":1,\"714\":2,\"715\":2,\"2186\":1,\"2267\":1,\"2374\":1,\"2500\":2,\"2538\":1,\"2614\":1,\"2629\":1,\"2665\":1,\"2748\":1,\"2756\":1}}],[\"<host\",{\"1\":{\"1767\":1}}],[\"<hellovue><\",{\"1\":{\"1708\":1}}],[\"<head><\",{\"1\":{\"1326\":1}}],[\"<head>\",{\"1\":{\"65\":1,\"1292\":2,\"1293\":1,\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1322\":1,\"1325\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1482\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1690\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"1928\":1,\"1951\":1,\"1952\":1,\"1972\":1,\"1976\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2131\":1,\"2132\":2,\"2159\":2,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2750\":1,\"2786\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"<h5>火车<\",{\"1\":{\"1609\":1}}],[\"<h5>公路<\",{\"1\":{\"1609\":1}}],[\"<h5>山川<\",{\"1\":{\"1609\":1}}],[\"<h5>江河<\",{\"1\":{\"1609\":1}}],[\"<h5>媒体\",{\"1\":{\"1299\":1}}],[\"<h3>优秀学员<\",{\"1\":{\"1606\":1}}],[\"<h3>我们的课程<\",{\"1\":{\"1606\":1}}],[\"<h3>我们的优秀讲师<\",{\"1\":{\"1606\":1}}],[\"<h3>我们公司<\",{\"1\":{\"1606\":1}}],[\"<h3>测试文字<\",{\"1\":{\"1571\":1}}],[\"<h3>注册用户<\",{\"1\":{\"1555\":1}}],[\"<h3>媒体\",{\"1\":{\"1299\":1}}],[\"<h3\",{\"1\":{\"1548\":2}}],[\"<h2>hello\",{\"1\":{\"2786\":1}}],[\"<h2>欢迎进入<\",{\"1\":{\"1606\":1}}],[\"<h2>我是h2标题<\",{\"1\":{\"1508\":1,\"1509\":1,\"1510\":1}}],[\"<h2>媒体\",{\"1\":{\"1299\":1}}],[\"<h2\",{\"1\":{\"1508\":2,\"1509\":2,\"1510\":2}}],[\"<h1\",{\"1\":{\"1470\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1515\":1,\"1596\":2}}],[\"<h1>my\",{\"1\":{\"2750\":1}}],[\"<h1>hello<\",{\"1\":{\"2159\":1}}],[\"<h1>this\",{\"1\":{\"1808\":1,\"2861\":2}}],[\"<h1>父组件传递过来的值\",{\"1\":{\"1715\":1}}],[\"<h1>父组件的值\",{\"1\":{\"1711\":1,\"1712\":1,\"1713\":1}}],[\"<h1>aaa<\",{\"1\":{\"1635\":1}}],[\"<h1>\",{\"1\":{\"1614\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1707\":1,\"1711\":1,\"1712\":1,\"1715\":1}}],[\"<h1>点击操作的元素<\",{\"1\":{\"1613\":1}}],[\"<h1>牛气冲天<\",{\"1\":{\"1570\":2}}],[\"<h1>这是标题<\",{\"1\":{\"1513\":10}}],[\"<h1>这是一个标题<\",{\"1\":{\"1471\":1,\"1472\":1}}],[\"<h1>我是一个标题<\",{\"1\":{\"1508\":2,\"1509\":2,\"1510\":2}}],[\"<h1>我是<i>一个<\",{\"1\":{\"1508\":1,\"1509\":1,\"1510\":1}}],[\"<h1>一刻也不能分割<\",{\"1\":{\"1499\":1,\"1500\":1}}],[\"<h1>学习java的顺序<\",{\"1\":{\"1317\":1,\"1318\":1}}],[\"<h1>起床以后需要做的事<\",{\"1\":{\"1317\":1}}],[\"<h1>图书<\",{\"1\":{\"1314\":1}}],[\"<h1>母婴产品<\",{\"1\":{\"1314\":1}}],[\"<h1>化妆品<\",{\"1\":{\"1314\":1}}],[\"<h1>手机<\",{\"1\":{\"1314\":1}}],[\"<h1>媒体\",{\"1\":{\"1299\":1}}],[\"<h1><\",{\"1\":{\"1299\":1}}],[\"<hr\",{\"1\":{\"1300\":3,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1567\":1,\"1676\":1,\"1980\":4,\"1981\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"2020\":2,\"2022\":3}}],[\"<h8>媒体\",{\"1\":{\"1299\":1}}],[\"<h7>媒体\",{\"1\":{\"1299\":1}}],[\"<h6>媒体\",{\"1\":{\"1299\":1}}],[\"<h4>媒体\",{\"1\":{\"1299\":1}}],[\"<https\",{\"1\":{\"1176\":1}}],[\"<html>\",{\"1\":{\"1292\":1,\"1293\":1,\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1322\":1,\"1326\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1482\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1928\":1,\"1951\":1,\"1952\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2750\":1,\"2786\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"<html\",{\"1\":{\"65\":1,\"1690\":1,\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"1927\":1,\"2132\":2,\"2159\":2,\"2166\":1}}],[\"<\",{\"0\":{\"243\":1,\"247\":1,\"248\":1},\"1\":{\"65\":5,\"74\":1,\"76\":1,\"78\":1,\"130\":1,\"140\":1,\"141\":1,\"145\":1,\"146\":2,\"147\":5,\"149\":1,\"150\":4,\"244\":1,\"251\":1,\"260\":1,\"263\":2,\"279\":1,\"288\":1,\"294\":1,\"305\":1,\"306\":1,\"309\":6,\"316\":1,\"364\":2,\"371\":1,\"376\":1,\"395\":1,\"396\":1,\"405\":1,\"438\":3,\"440\":2,\"441\":2,\"442\":1,\"445\":1,\"446\":1,\"457\":2,\"458\":2,\"460\":2,\"461\":1,\"545\":8,\"675\":1,\"680\":8,\"683\":11,\"685\":5,\"688\":5,\"697\":3,\"699\":2,\"700\":6,\"714\":17,\"715\":14,\"718\":2,\"891\":1,\"905\":2,\"1030\":1,\"1231\":1,\"1235\":1,\"1266\":2,\"1274\":1,\"1275\":2,\"1280\":1,\"1293\":16,\"1298\":5,\"1299\":13,\"1300\":5,\"1301\":8,\"1302\":5,\"1303\":5,\"1304\":6,\"1305\":5,\"1306\":5,\"1309\":5,\"1310\":6,\"1312\":10,\"1314\":4,\"1315\":4,\"1317\":8,\"1318\":6,\"1319\":10,\"1321\":5,\"1322\":7,\"1326\":2,\"1330\":8,\"1331\":7,\"1333\":7,\"1334\":6,\"1335\":6,\"1336\":6,\"1337\":6,\"1338\":6,\"1339\":8,\"1340\":8,\"1341\":10,\"1342\":8,\"1343\":6,\"1345\":7,\"1346\":6,\"1347\":6,\"1348\":6,\"1349\":9,\"1350\":1,\"1360\":1,\"1361\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1366\":5,\"1367\":5,\"1369\":15,\"1370\":15,\"1379\":6,\"1380\":7,\"1388\":1,\"1416\":1,\"1433\":7,\"1436\":5,\"1439\":8,\"1442\":5,\"1454\":5,\"1455\":5,\"1456\":5,\"1458\":5,\"1459\":5,\"1460\":5,\"1462\":5,\"1463\":5,\"1464\":5,\"1470\":5,\"1471\":6,\"1472\":5,\"1482\":5,\"1488\":5,\"1489\":6,\"1490\":6,\"1491\":6,\"1493\":5,\"1494\":5,\"1496\":7,\"1497\":7,\"1499\":7,\"1500\":7,\"1501\":6,\"1505\":7,\"1508\":5,\"1509\":5,\"1510\":5,\"1512\":5,\"1513\":7,\"1514\":6,\"1515\":10,\"1518\":5,\"1521\":24,\"1523\":6,\"1524\":6,\"1525\":6,\"1528\":5,\"1529\":6,\"1532\":5,\"1533\":7,\"1534\":8,\"1535\":12,\"1536\":5,\"1544\":13,\"1545\":12,\"1548\":11,\"1549\":18,\"1552\":10,\"1555\":24,\"1563\":6,\"1564\":6,\"1567\":6,\"1568\":9,\"1570\":7,\"1571\":7,\"1572\":7,\"1573\":5,\"1574\":7,\"1579\":26,\"1585\":5,\"1586\":22,\"1588\":6,\"1589\":6,\"1590\":6,\"1591\":6,\"1596\":10,\"1602\":15,\"1606\":23,\"1609\":23,\"1613\":5,\"1614\":7,\"1616\":3,\"1617\":3,\"1620\":5,\"1621\":5,\"1622\":5,\"1624\":3,\"1627\":4,\"1628\":4,\"1629\":4,\"1630\":10,\"1631\":6,\"1634\":5,\"1635\":4,\"1637\":4,\"1638\":5,\"1640\":4,\"1643\":4,\"1646\":3,\"1649\":5,\"1650\":5,\"1651\":5,\"1653\":4,\"1656\":5,\"1658\":7,\"1659\":7,\"1660\":3,\"1661\":6,\"1662\":4,\"1664\":5,\"1667\":5,\"1670\":4,\"1672\":4,\"1675\":5,\"1676\":5,\"1677\":5,\"1690\":8,\"1691\":3,\"1695\":12,\"1698\":7,\"1701\":11,\"1704\":4,\"1707\":5,\"1708\":4,\"1711\":10,\"1712\":10,\"1713\":9,\"1715\":10,\"1718\":3,\"1730\":2,\"1791\":6,\"1793\":12,\"1795\":8,\"1831\":8,\"1834\":12,\"1838\":1,\"1839\":1,\"1840\":2,\"1841\":2,\"1842\":2,\"1844\":6,\"1846\":2,\"1847\":3,\"1870\":5,\"1899\":1,\"1907\":5,\"1908\":4,\"1927\":5,\"1928\":11,\"1933\":1,\"1951\":8,\"1952\":13,\"1957\":1,\"1958\":3,\"1960\":14,\"1962\":3,\"1964\":1,\"1972\":18,\"1976\":14,\"1980\":8,\"1981\":9,\"1982\":6,\"1987\":8,\"1988\":6,\"1989\":6,\"1990\":6,\"1991\":8,\"1999\":13,\"2014\":1,\"2016\":1,\"2018\":9,\"2019\":6,\"2020\":7,\"2022\":10,\"2023\":9,\"2025\":35,\"2028\":1,\"2031\":29,\"2047\":7,\"2049\":5,\"2055\":5,\"2058\":5,\"2060\":13,\"2075\":3,\"2088\":4,\"2092\":3,\"2094\":5,\"2114\":6,\"2120\":5,\"2124\":5,\"2128\":5,\"2131\":5,\"2132\":10,\"2155\":1,\"2159\":11,\"2166\":5,\"2169\":5,\"2170\":7,\"2171\":5,\"2176\":14,\"2186\":21,\"2244\":4,\"2258\":2,\"2267\":14,\"2278\":8,\"2279\":5,\"2292\":3,\"2296\":1,\"2307\":1,\"2311\":1,\"2312\":9,\"2315\":1,\"2317\":1,\"2318\":1,\"2320\":2,\"2321\":2,\"2322\":2,\"2323\":2,\"2326\":1,\"2329\":2,\"2332\":3,\"2334\":11,\"2344\":1,\"2347\":1,\"2350\":1,\"2354\":1,\"2356\":1,\"2358\":1,\"2362\":1,\"2365\":1,\"2368\":1,\"2374\":35,\"2377\":1,\"2378\":1,\"2385\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2394\":1,\"2398\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":2,\"2413\":1,\"2414\":1,\"2415\":1,\"2422\":6,\"2425\":5,\"2428\":6,\"2431\":7,\"2434\":1,\"2435\":4,\"2444\":9,\"2447\":10,\"2449\":1,\"2450\":11,\"2453\":10,\"2456\":10,\"2459\":1,\"2461\":2,\"2462\":1,\"2464\":1,\"2466\":2,\"2467\":2,\"2484\":4,\"2485\":4,\"2487\":12,\"2500\":17,\"2501\":16,\"2505\":6,\"2509\":2,\"2538\":3,\"2542\":3,\"2546\":3,\"2553\":3,\"2554\":2,\"2555\":2,\"2557\":2,\"2558\":5,\"2559\":4,\"2560\":8,\"2562\":1,\"2563\":5,\"2564\":2,\"2566\":18,\"2567\":5,\"2571\":1,\"2574\":2,\"2579\":4,\"2582\":4,\"2584\":3,\"2588\":12,\"2590\":3,\"2591\":3,\"2592\":6,\"2594\":2,\"2599\":3,\"2614\":2,\"2629\":20,\"2630\":4,\"2648\":14,\"2665\":24,\"2666\":9,\"2701\":4,\"2706\":3,\"2710\":16,\"2746\":2,\"2748\":5,\"2750\":4,\"2756\":28,\"2757\":6,\"2758\":3,\"2759\":9,\"2765\":4,\"2779\":9,\"2780\":6,\"2786\":5,\"2789\":8,\"2790\":1,\"2793\":5,\"2794\":4,\"2796\":7,\"2798\":6,\"2799\":7,\"2800\":6,\"2801\":6,\"2807\":6,\"2814\":4,\"2817\":5,\"2820\":5,\"2829\":4,\"2830\":12,\"2857\":5,\"2859\":5,\"2861\":8,\"2863\":4,\"2864\":4,\"2866\":4,\"2867\":4,\"2869\":4,\"2870\":4,\"2872\":4,\"2873\":4,\"2875\":1,\"2877\":5,\"2885\":1,\"2889\":6,\"2890\":10,\"2891\":12,\"2892\":3,\"2893\":4,\"2894\":4,\"2896\":6,\"2898\":6,\"2899\":2,\"2900\":1,\"2901\":3,\"2902\":1,\"2903\":18,\"2904\":2,\"2905\":1,\"2906\":3,\"2907\":8,\"2908\":4,\"2910\":5,\"2911\":3,\"2912\":5,\"2914\":13,\"2918\":4,\"2925\":20}}],[\"案例二\",{\"1\":{\"1831\":1,\"1834\":1}}],[\"案例一\",{\"1\":{\"1831\":1,\"1834\":1}}],[\"案例\",{\"0\":{\"65\":1,\"428\":1,\"488\":1,\"568\":1,\"585\":1,\"588\":1,\"591\":1,\"594\":1,\"1147\":1,\"1406\":1,\"1409\":1,\"1412\":1,\"1416\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1596\":1,\"1602\":1,\"1844\":1,\"2290\":1,\"2435\":1,\"2444\":1,\"2447\":1,\"2450\":1,\"2453\":1,\"2456\":1,\"2459\":1,\"2462\":1,\"2465\":1,\"2475\":1,\"2479\":1},\"1\":{\"817\":1,\"827\":1}}],[\"yy\",{\"1\":{\"2301\":2}}],[\"yyyymmddhhmmss\",{\"1\":{\"2312\":1}}],[\"yyyy年mm月dd日\",{\"1\":{\"2031\":1}}],[\"yyyy\",{\"1\":{\"374\":1,\"380\":2,\"891\":1,\"897\":1,\"942\":4,\"1198\":1,\"1285\":1,\"1287\":1,\"1417\":1,\"2087\":1,\"2128\":1,\"2166\":1,\"2308\":1,\"2312\":2,\"2374\":1,\"2757\":1,\"2798\":2,\"2799\":1,\"2896\":1}}],[\"yyy\",{\"1\":{\"300\":1,\"1844\":1}}],[\"y+\",{\"1\":{\"1417\":1}}],[\"yen\",{\"1\":{\"2031\":1}}],[\"yellowgreen\",{\"1\":{\"1528\":1,\"1544\":1,\"1545\":1}}],[\"yellow\",{\"1\":{\"1510\":1,\"1513\":1,\"1514\":1,\"1515\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1533\":1,\"1534\":1,\"1544\":1,\"1568\":1,\"1572\":2,\"1588\":1,\"1589\":1,\"1591\":1,\"1606\":1}}],[\"yes\",{\"1\":{\"1216\":1,\"1683\":1}}],[\"year\",{\"1\":{\"374\":1,\"375\":2,\"942\":1,\"1093\":3,\"1414\":1,\"1787\":1,\"1790\":1}}],[\"york\",{\"1\":{\"1211\":1}}],[\"your\",{\"1\":{\"1683\":1}}],[\"yours\",{\"1\":{\"786\":1}}],[\"you<\",{\"1\":{\"1482\":1}}],[\"you\",{\"1\":{\"1185\":2,\"1482\":1,\"1683\":1}}],[\"yaml\",{\"0\":{\"1198\":1}}],[\"yaml数据\",{\"1\":{\"1196\":1}}],[\"yaxis\",{\"1\":{\"62\":1,\"65\":1}}],[\"y的模\",{\"1\":{\"1092\":1}}],[\"yum\",{\"1\":{\"810\":4}}],[\"yum安装gitlab\",{\"1\":{\"809\":1}}],[\"y\",{\"1\":{\"62\":1,\"75\":2,\"87\":1,\"92\":1,\"98\":1,\"114\":1,\"302\":1,\"364\":2,\"374\":1,\"810\":2,\"873\":6,\"1092\":4,\"1093\":2,\"1411\":8,\"1451\":1,\"1482\":1,\"2030\":1}}],[\"轴到点\",{\"1\":{\"1411\":1}}],[\"轴\",{\"1\":{\"62\":2}}],[\"xiaoqiang\",{\"1\":{\"2571\":1,\"2574\":1}}],[\"xhr\",{\"1\":{\"2112\":3,\"2114\":7,\"2120\":7,\"2128\":7}}],[\"xhr=new\",{\"1\":{\"2112\":1}}],[\"xhtml\",{\"1\":{\"122\":1}}],[\"x=new\",{\"1\":{\"1917\":1,\"1921\":1,\"1925\":1}}],[\"x=1234\",{\"1\":{\"1376\":1}}],[\"xl\",{\"1\":{\"1600\":1}}],[\"xn+y\",{\"1\":{\"1552\":1}}],[\"x版本的\",{\"1\":{\"1542\":1}}],[\"x版本就可以了\",{\"1\":{\"1542\":1}}],[\"xor`\",{\"1\":{\"1031\":1}}],[\"x>y\",{\"1\":{\"873\":1}}],[\"x86\",{\"1\":{\"809\":1,\"810\":1}}],[\"xstream\",{\"1\":{\"2530\":1}}],[\"xsd\",{\"1\":{\"545\":1,\"680\":2,\"683\":2,\"714\":4,\"715\":4,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2267\":2,\"2485\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":2,\"2584\":2,\"2588\":8,\"2590\":2,\"2591\":2,\"2592\":2,\"2594\":2,\"2599\":2,\"2630\":3,\"2648\":3,\"2666\":6,\"2746\":1,\"2748\":1,\"2758\":7,\"2759\":1,\"2779\":7,\"2780\":8,\"2789\":8,\"2885\":1,\"2898\":8,\"2899\":8,\"2903\":8,\"2904\":8}}],[\"xsi\",{\"1\":{\"545\":1,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2267\":1,\"2485\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2746\":1,\"2748\":1,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2885\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"xsi=\",{\"1\":{\"545\":1,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2267\":1,\"2485\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2746\":1,\"2748\":1,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2885\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"x以后也是基于注解的\",{\"1\":{\"534\":1}}],[\"xxxx\",{\"1\":{\"736\":1,\"1293\":1,\"1683\":1,\"2206\":1,\"2208\":1,\"2211\":1}}],[\"xxxxxxxx\",{\"1\":{\"1683\":1}}],[\"xxxxx\",{\"1\":{\"591\":1,\"773\":1,\"1683\":2}}],[\"xxxxtest\",{\"1\":{\"522\":1}}],[\"xxx\",{\"1\":{\"363\":2,\"1035\":1,\"1844\":1,\"2299\":2,\"2503\":2}}],[\"xx\",{\"1\":{\"300\":1,\"364\":1,\"1000\":2,\"2206\":1,\"2208\":1,\"2211\":1,\"2259\":3}}],[\"xbitmap\",{\"1\":{\"208\":1}}],[\"x64\",{\"1\":{\"177\":1}}],[\"x中\",{\"1\":{\"167\":1}}],[\"xml放行规则\",{\"1\":{\"2790\":1}}],[\"xml方式管理事务\",{\"0\":{\"2709\":1},\"1\":{\"2908\":1}}],[\"xml方式实现\",{\"1\":{\"2699\":1}}],[\"xml注册文件中的内容\",{\"1\":{\"2543\":1,\"2546\":1}}],[\"xmlbeans\",{\"1\":{\"2530\":1}}],[\"xml的配置中\",{\"1\":{\"2777\":1}}],[\"xml的配置如下\",{\"1\":{\"2505\":1}}],[\"xml的规则\",{\"1\":{\"2763\":1}}],[\"xml的每一个元素都对应了\",{\"1\":{\"1752\":1}}],[\"xmlmapper\",{\"1\":{\"2501\":1}}],[\"xml映射文件\",{\"0\":{\"2279\":1}}],[\"xml需要放到resources根目录下\",{\"1\":{\"2275\":1}}],[\"xml数据文件中等等\",{\"1\":{\"2199\":1}}],[\"xml依赖\",{\"0\":{\"2186\":1,\"2484\":1,\"2500\":1,\"2538\":1}}],[\"xmlhttprequest对象和一个描述成功请求类型的字符串\",{\"1\":{\"2143\":1}}],[\"xmlhttprequest对象是惟一的参数\",{\"1\":{\"2142\":1}}],[\"xmlhttprequest对象\",{\"1\":{\"2114\":1,\"2155\":2}}],[\"xmlhttprequest\",{\"1\":{\"2112\":1,\"2114\":1,\"2120\":1,\"2128\":1,\"2142\":1,\"2143\":1,\"2145\":1,\"2155\":3}}],[\"xml进行初始化配置\",{\"1\":{\"2048\":1}}],[\"xml配置文件\",{\"0\":{\"2542\":1},\"1\":{\"2789\":1}}],[\"xml配置文件编辑时需要注意标签的先后顺序\",{\"1\":{\"2315\":1}}],[\"xml配置文件而是使用\",{\"1\":{\"1848\":1}}],[\"xml配置\",{\"1\":{\"2003\":1}}],[\"xml或其他格式文档的web网页\",{\"1\":{\"1927\":1}}],[\"xml勾选上\",{\"1\":{\"1775\":1}}],[\"xml项目的配置文件\",{\"1\":{\"1772\":1}}],[\"xml中怕配置了视图解析器\",{\"1\":{\"2859\":1}}],[\"xml中注册dispatcherservlet时\",{\"1\":{\"2788\":1}}],[\"xml中导入spring依赖大礼包\",{\"1\":{\"2756\":1}}],[\"xml中\",{\"0\":{\"2584\":1},\"1\":{\"2713\":1,\"2763\":1}}],[\"xml中进行配置\",{\"1\":{\"2505\":1}}],[\"xml中打开延迟加载的开关\",{\"1\":{\"2434\":1}}],[\"xml中出现相同的id\",{\"1\":{\"2345\":1}}],[\"xml中配置hiddenhttpmethodfilter过滤器将post请求转换为put或者delete请求\",{\"1\":{\"2829\":1}}],[\"xml中配置编码过滤器\",{\"1\":{\"2807\":1}}],[\"xml中配置处理器映射器和处理器适配器\",{\"1\":{\"2777\":1}}],[\"xml中配置dispatcherservlet的servlet\",{\"1\":{\"2761\":1}}],[\"xml中配置前端控制器\",{\"0\":{\"2759\":1},\"1\":{\"2910\":1}}],[\"xml中配置或者通过\",{\"1\":{\"2081\":1}}],[\"xml中配置监听器\",{\"1\":{\"2074\":1}}],[\"xml中配置filter拦截哪些资源\",{\"1\":{\"1996\":1}}],[\"xml中配置的全局的初始信息\",{\"1\":{\"1831\":2}}],[\"xml中配置servlet的映射路径\",{\"0\":{\"1791\":1}}],[\"xml中的\",{\"1\":{\"2441\":1}}],[\"xml中的namespace路径匹配\",{\"1\":{\"2380\":1}}],[\"xml中的查询语句\",{\"0\":{\"2378\":1}}],[\"xml中的id属性保持一致\",{\"1\":{\"2376\":1}}],[\"xml中的uri编码\",{\"1\":{\"1812\":1}}],[\"xml中的service标记中\",{\"1\":{\"1766\":1}}],[\"xml中创建自定义标签\",{\"0\":{\"699\":1}}],[\"xml文档的应用程序接口\",{\"1\":{\"1447\":1}}],[\"xml文件放到resources目录下\",{\"1\":{\"2375\":1}}],[\"xml文件负责到resources下\",{\"1\":{\"2310\":1}}],[\"xml文件需要与代码层中com\",{\"1\":{\"2275\":1}}],[\"xml文件指定超时时间\",{\"1\":{\"1899\":1}}],[\"xml文件\",{\"0\":{\"2312\":1,\"2315\":1,\"2909\":1},\"1\":{\"1826\":1,\"2374\":3}}],[\"xml文件中新增requestmappinghandlermapping与requestmappinghandleradapter的bean注入\",{\"1\":{\"2779\":1}}],[\"xml文件中的内容即可\",{\"1\":{\"2746\":1}}],[\"xml文件中的<settings>标签配置开启二级缓存\",{\"1\":{\"2478\":1}}],[\"xml文件中的<servlet>节点\",{\"1\":{\"1832\":1}}],[\"xml文件中的注册顺序\",{\"1\":{\"2046\":1}}],[\"xml文件中配置了httpsession的超时时间对应的是tomcat中所有的web项目都有效\",{\"1\":{\"1899\":1}}],[\"xml文件中配置httpsession的销毁时间\",{\"1\":{\"1899\":1}}],[\"xml文件中配置逻辑视图路径\",{\"1\":{\"124\":1}}],[\"xml文件中指定httpsession的超时时间\",{\"1\":{\"1899\":1}}],[\"xml文件中支持将多个url映射到一个servlet中\",{\"1\":{\"1845\":1}}],[\"xml文件中当前<servlet>标签中所有<init\",{\"1\":{\"1833\":1}}],[\"xml文件中<servlet>标签中<init\",{\"1\":{\"1833\":1}}],[\"xml文件中<context\",{\"1\":{\"1829\":1}}],[\"xml文件中所有param\",{\"1\":{\"1829\":1}}],[\"xml文件中\",{\"1\":{\"1818\":1}}],[\"xml文件配置的时间就是默认超时时间\",{\"1\":{\"1900\":1}}],[\"xml文件配置\",{\"1\":{\"1759\":1}}],[\"xml文件来改变tomcat的监听端口\",{\"1\":{\"1756\":1}}],[\"xml文件描述整个模块的思想\",{\"1\":{\"683\":1}}],[\"xml<\",{\"1\":{\"714\":1,\"715\":1,\"2505\":1,\"2759\":1,\"2910\":1,\"2911\":1}}],[\"xmlschema\",{\"1\":{\"545\":1,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2267\":1,\"2485\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2746\":1,\"2748\":1,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2885\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"xmlns\",{\"1\":{\"545\":4,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1791\":4,\"1795\":4,\"1831\":4,\"1834\":4,\"1999\":4,\"2047\":4,\"2058\":4,\"2075\":4,\"2267\":1,\"2485\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":3,\"2566\":3,\"2567\":4,\"2584\":2,\"2588\":8,\"2590\":2,\"2591\":2,\"2592\":2,\"2594\":2,\"2599\":2,\"2630\":3,\"2648\":3,\"2666\":6,\"2746\":4,\"2748\":1,\"2758\":7,\"2759\":4,\"2779\":7,\"2780\":8,\"2789\":8,\"2885\":1,\"2898\":8,\"2899\":8,\"2903\":8,\"2904\":8}}],[\"xmlns=\",{\"1\":{\"545\":1,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2267\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2746\":1,\"2748\":1,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2885\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"xml\",{\"0\":{\"680\":1,\"1750\":1,\"1751\":1,\"1752\":1,\"1753\":1,\"1795\":1,\"2267\":1,\"2278\":1,\"2339\":1,\"2385\":1,\"2394\":1,\"2398\":1,\"2701\":1,\"2706\":1,\"2710\":1,\"2746\":1,\"2887\":1},\"1\":{\"92\":1,\"208\":2,\"545\":4,\"675\":1,\"676\":2,\"680\":1,\"683\":1,\"714\":4,\"715\":4,\"772\":1,\"1720\":1,\"1732\":1,\"1749\":4,\"1750\":1,\"1751\":1,\"1779\":1,\"1791\":4,\"1795\":4,\"1808\":1,\"1831\":5,\"1834\":5,\"1934\":1,\"1960\":2,\"1999\":4,\"2047\":4,\"2058\":4,\"2075\":5,\"2092\":2,\"2108\":2,\"2141\":1,\"2155\":1,\"2161\":1,\"2165\":1,\"2179\":3,\"2196\":1,\"2267\":1,\"2278\":2,\"2279\":1,\"2282\":1,\"2293\":1,\"2312\":1,\"2320\":3,\"2322\":3,\"2324\":1,\"2344\":1,\"2347\":1,\"2350\":1,\"2354\":1,\"2356\":1,\"2358\":1,\"2374\":3,\"2388\":1,\"2389\":1,\"2390\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2422\":1,\"2435\":2,\"2444\":1,\"2447\":1,\"2450\":1,\"2453\":1,\"2456\":1,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2485\":1,\"2487\":2,\"2497\":2,\"2501\":2,\"2530\":1,\"2542\":2,\"2543\":1,\"2546\":2,\"2550\":1,\"2553\":4,\"2554\":3,\"2555\":3,\"2557\":2,\"2558\":3,\"2559\":5,\"2560\":2,\"2562\":2,\"2563\":2,\"2564\":2,\"2566\":3,\"2567\":3,\"2571\":2,\"2574\":2,\"2579\":2,\"2584\":1,\"2588\":4,\"2590\":3,\"2591\":3,\"2592\":3,\"2594\":3,\"2599\":2,\"2630\":1,\"2648\":1,\"2666\":2,\"2672\":1,\"2673\":1,\"2674\":1,\"2678\":1,\"2679\":1,\"2680\":1,\"2697\":1,\"2746\":4,\"2757\":1,\"2758\":1,\"2759\":4,\"2763\":1,\"2777\":1,\"2779\":1,\"2780\":2,\"2789\":1,\"2799\":1,\"2830\":1,\"2887\":1,\"2896\":1,\"2898\":1,\"2899\":1,\"2903\":2,\"2904\":1,\"2907\":1,\"2918\":2}}],[\"x\",{\"0\":{\"3168\":1},\"1\":{\"62\":1,\"75\":2,\"76\":1,\"94\":1,\"208\":8,\"240\":1,\"263\":8,\"328\":4,\"332\":1,\"333\":1,\"338\":4,\"364\":2,\"873\":6,\"1092\":8,\"1181\":1,\"1235\":1,\"1287\":1,\"1293\":1,\"1310\":1,\"1331\":1,\"1370\":2,\"1384\":1,\"1406\":2,\"1411\":29,\"1451\":1,\"1482\":1,\"1542\":4,\"1690\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"2029\":1,\"2146\":1,\"2153\":1,\"2155\":3,\"2172\":1}}],[\"xaxis\",{\"1\":{\"62\":1,\"65\":1}}],[\"被增强功能的对象\",{\"1\":{\"2624\":1}}],[\"被代理的目标类编译得到的字节码文件\",{\"1\":{\"2627\":1}}],[\"被代理的对象\",{\"1\":{\"2624\":1}}],[\"被代理的类\",{\"1\":{\"2605\":1}}],[\"被代理类\",{\"1\":{\"2609\":1}}],[\"被代理类的接口class对象\",{\"1\":{\"2608\":1}}],[\"被代理类的类加载器\",{\"1\":{\"2608\":1}}],[\"被用于大型复杂分布式web\",{\"1\":{\"2482\":1}}],[\"被删除状态\",{\"1\":{\"2231\":1}}],[\"被引入的jsp页面会生成\",{\"1\":{\"1962\":1}}],[\"被引入的jsp页面会生成独立的java代码\",{\"1\":{\"1962\":1}}],[\"被引入的jsp页面不会生成java代码\",{\"1\":{\"1962\":1}}],[\"被引入的网页和当前页生成代码后形成了一个java文件\",{\"1\":{\"1962\":2}}],[\"被引用的方法也必须由返回值\",{\"1\":{\"828\":1}}],[\"被引用的方法\",{\"1\":{\"828\":1}}],[\"被包含的文件可以是jsp文件\",{\"1\":{\"1961\":1}}],[\"被监听8080端口并处理http\",{\"1\":{\"1769\":1}}],[\"被设计为可以自底向上逐层应用\",{\"1\":{\"1611\":1,\"1943\":1}}],[\"被占用了\",{\"1\":{\"1533\":1,\"1534\":1}}],[\"被称为\",{\"1\":{\"1374\":1}}],[\"被称为introspection\",{\"1\":{\"570\":1}}],[\"被标记的字段需要符合约束限定\",{\"1\":{\"1015\":1}}],[\"被美国国家标准协会\",{\"1\":{\"930\":1}}],[\"被纳入版本控制\",{\"1\":{\"734\":1}}],[\"被它修饰的annotation将具有继承性\",{\"1\":{\"556\":1}}],[\"被default修饰了\",{\"1\":{\"503\":1}}],[\"被cpu调度的概率就高\",{\"1\":{\"457\":1}}],[\"被catch后面的\",{\"1\":{\"19\":1}}],[\"被final修饰\",{\"1\":{\"364\":1,\"366\":1}}],[\"被gc\",{\"1\":{\"338\":1}}],[\"被其他线程抢先的情况造成错误\",{\"1\":{\"334\":1}}],[\"被抽象为\",{\"1\":{\"62\":1}}],[\"提升用于体验感\",{\"1\":{\"2111\":1}}],[\"提升开发效率\",{\"0\":{\"1946\":1}}],[\"提升性能\",{\"1\":{\"308\":1,\"1148\":1}}],[\"提示用户进行登录\",{\"1\":{\"2063\":1}}],[\"提示用户进入登录页进行登录操作\",{\"1\":{\"2059\":1}}],[\"提示ok\",{\"1\":{\"1579\":1,\"1586\":1}}],[\"提示找不到资源\",{\"1\":{\"1312\":1}}],[\"提示框组件\",{\"1\":{\"62\":1}}],[\"提前下载所需rpm\",{\"0\":{\"809\":1}}],[\"提前给客户端推送必要的资源\",{\"1\":{\"169\":1}}],[\"提交的数据也应该能够恢复\",{\"1\":{\"2688\":1}}],[\"提交的sql\",{\"1\":{\"2301\":2}}],[\"提交的参数名必须和pojo的属性名保持一致\",{\"1\":{\"2796\":1}}],[\"提交的参数\",{\"1\":{\"2131\":1,\"2169\":1,\"2170\":1}}],[\"提交的项目内容\",{\"1\":{\"760\":1}}],[\"提交按钮\",{\"0\":{\"1343\":1},\"1\":{\"1330\":1,\"1331\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1349\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"提交按钮等\",{\"1\":{\"1329\":1}}],[\"提交数据\",{\"1\":{\"1439\":1,\"2112\":1}}],[\"提交数据为\",{\"1\":{\"1335\":1}}],[\"提交数据长度没有限制\",{\"1\":{\"1330\":1}}],[\"提交数据长度有限制\",{\"1\":{\"1330\":1}}],[\"提交数据不可见\",{\"1\":{\"1330\":1}}],[\"提交数据可见\",{\"1\":{\"1330\":1}}],[\"提交方式\",{\"1\":{\"1330\":1}}],[\"提交到后端\",{\"1\":{\"1330\":1}}],[\"提交到的地址\",{\"1\":{\"1330\":1}}],[\"提交到本地库\",{\"0\":{\"779\":1},\"1\":{\"731\":1}}],[\"提交和回滚事务\",{\"0\":{\"1107\":1}}],[\"提交事务\",{\"0\":{\"1108\":1},\"1\":{\"936\":1,\"1235\":1,\"2691\":1,\"2692\":1}}],[\"提交pull\",{\"1\":{\"759\":1}}],[\"提交之前不更新最新代码\",{\"1\":{\"753\":1}}],[\"提交指定文件\",{\"1\":{\"736\":1}}],[\"提交更改\",{\"1\":{\"729\":1}}],[\"提交git版本库分两步执行\",{\"0\":{\"729\":1}}],[\"提交\",{\"1\":{\"723\":1,\"1231\":2,\"1233\":1,\"1235\":2,\"2055\":1,\"2060\":1,\"2094\":1,\"2360\":1}}],[\"提交给标准化组织\",{\"1\":{\"70\":1}}],[\"提取字符串中两个指定的索引号之间的字符\",{\"1\":{\"1405\":1}}],[\"提取字符串的片断\",{\"1\":{\"1405\":1}}],[\"提取basedao\",{\"0\":{\"1265\":1}}],[\"提取代码段为方法\",{\"1\":{\"628\":1}}],[\"提取方法\",{\"0\":{\"628\":1}}],[\"提取后\",{\"1\":{\"627\":1}}],[\"提取变量\",{\"0\":{\"627\":1},\"1\":{\"627\":1}}],[\"提供消息头名称required\",{\"1\":{\"2850\":1}}],[\"提供更多更强大的功能\",{\"1\":{\"2550\":1}}],[\"提供更多的子类\",{\"1\":{\"481\":1}}],[\"提供与\",{\"1\":{\"2533\":1}}],[\"提供的基类\",{\"1\":{\"2214\":1}}],[\"提供全表\",{\"1\":{\"2179\":1}}],[\"提供data和type两个参数\",{\"1\":{\"2147\":1,\"2155\":1}}],[\"提供了不同的映射器实现不同的\",{\"1\":{\"2771\":1}}],[\"提供了不同的实现类\",{\"1\":{\"2699\":1}}],[\"提供了类工具的支持和类加载器的实现\",{\"1\":{\"2533\":1}}],[\"提供了面向切面编程实现\",{\"1\":{\"2533\":1}}],[\"提供了\",{\"1\":{\"2532\":2}}],[\"提供了在\",{\"1\":{\"2531\":1}}],[\"提供了基本的\",{\"1\":{\"2531\":1}}],[\"提供了基于\",{\"1\":{\"1559\":1,\"2508\":1}}],[\"提供了的集成层\",{\"1\":{\"2530\":1}}],[\"提供了一个支持对象\",{\"1\":{\"2530\":1}}],[\"提供了一个\",{\"1\":{\"2530\":1}}],[\"提供了一套响应式\",{\"1\":{\"1599\":1}}],[\"提供了多套标签库\",{\"1\":{\"2012\":1}}],[\"提供了数据验证的基本功能\",{\"1\":{\"1372\":1}}],[\"提供了对这些行中数据的访问\",{\"1\":{\"1259\":1}}],[\"提供了相应的接口和对应的实现类\",{\"1\":{\"473\":1}}],[\"提供不同两种方法\",{\"1\":{\"902\":1}}],[\"提供枚举类的有限的\",{\"1\":{\"560\":1,\"561\":1}}],[\"提供加减操作\",{\"1\":{\"379\":1}}],[\"提供一个构造器\",{\"1\":{\"262\":1}}],[\"提供直观\",{\"1\":{\"61\":1}}],[\"提高系统的可伸缩性\",{\"1\":{\"2823\":1}}],[\"提高程序的开发效率\",{\"1\":{\"2527\":1}}],[\"提高程序的响应速度\",{\"1\":{\"1272\":1}}],[\"提高程序响应速度\",{\"1\":{\"2470\":1}}],[\"提高效率而生\",{\"1\":{\"2178\":1}}],[\"提高的代码复用度\",{\"1\":{\"1380\":1}}],[\"提高group\",{\"1\":{\"1148\":1}}],[\"提高执行性能\",{\"1\":{\"1146\":1}}],[\"提高存储效率\",{\"1\":{\"941\":1}}],[\"提高开发效率\",{\"1\":{\"747\":1}}],[\"提高了安全性\",{\"1\":{\"1230\":1}}],[\"提高了sql的复用性\",{\"1\":{\"1142\":1}}],[\"提高了并发的性能\",{\"1\":{\"313\":1}}],[\"提高了代码的健壮性\",{\"1\":{\"260\":1}}],[\"提高了吞吐量\",{\"1\":{\"166\":1}}],[\"提高阶段\",{\"0\":{\"2940\":1},\"1\":{\"1\":1}}],[\"9<\",{\"1\":{\"2894\":1}}],[\"9a\",{\"1\":{\"1585\":1,\"1586\":1}}],[\"9之后推荐使用\",{\"1\":{\"1572\":1}}],[\"95\",{\"1\":{\"1330\":2}}],[\"950\",{\"1\":{\"1211\":1}}],[\"9007199254740991\",{\"1\":{\"1409\":2,\"1412\":2}}],[\"90\",{\"1\":{\"1082\":1,\"1216\":1,\"1534\":1,\"2022\":2,\"2023\":1,\"2025\":1,\"2031\":1}}],[\"9050691344308365540l\",{\"1\":{\"511\":1,\"512\":1,\"513\":1}}],[\"9233372036854775807\",{\"1\":{\"939\":1}}],[\"9233372036854775808\",{\"1\":{\"939\":1}}],[\"970\",{\"1\":{\"2030\":1}}],[\"972\",{\"1\":{\"889\":1}}],[\"978\",{\"1\":{\"374\":1}}],[\"96\",{\"1\":{\"374\":1,\"408\":1}}],[\"98\",{\"1\":{\"234\":2}}],[\"992px\",{\"1\":{\"1600\":1}}],[\"999\",{\"1\":{\"1415\":4}}],[\"9999\",{\"1\":{\"515\":2,\"516\":2,\"517\":2,\"518\":2,\"942\":2,\"1211\":1}}],[\"99\",{\"1\":{\"65\":1,\"1386\":2,\"2245\":1,\"2246\":1,\"2250\":1}}],[\"93\",{\"1\":{\"65\":1}}],[\"9\",{\"1\":{\"61\":1,\"65\":3,\"162\":1,\"234\":1,\"238\":1,\"272\":2,\"275\":1,\"294\":1,\"367\":4,\"368\":3,\"373\":1,\"837\":1,\"887\":1,\"972\":1,\"973\":1,\"1211\":2,\"1366\":2,\"1386\":1,\"1388\":1,\"1389\":1,\"1391\":1,\"1400\":3,\"1401\":2,\"1406\":1,\"1579\":1,\"1584\":3,\"1585\":1,\"1631\":1,\"1665\":1,\"1779\":1,\"2025\":1,\"2296\":1,\"2500\":1,\"2629\":1,\"2891\":1}}],[\"和接口\",{\"1\":{\"2903\":1,\"2907\":1}}],[\"和处理请求方法之间的对应关系\",{\"1\":{\"2833\":1}}],[\"和xml\",{\"1\":{\"2823\":1}}],[\"和持久性\",{\"1\":{\"2684\":1}}],[\"和myisam\",{\"1\":{\"2683\":1}}],[\"和其他对象连接起来\",{\"1\":{\"2626\":1}}],[\"和其他的队列一样是fifo\",{\"1\":{\"326\":1}}],[\"和id类似\",{\"1\":{\"2552\":1}}],[\"和面向切面\",{\"1\":{\"2520\":1}}],[\"和性能\",{\"1\":{\"2482\":1}}],[\"和端口号\",{\"1\":{\"2168\":1}}],[\"和一些静态资源\",{\"1\":{\"2063\":1}}],[\"和追尾\",{\"1\":{\"2029\":1}}],[\"和我们编写的servlet程序一样\",{\"1\":{\"2003\":1}}],[\"和<\",{\"1\":{\"1951\":1}}],[\"和后端项目独立部署到不同的服务器上\",{\"1\":{\"1937\":1}}],[\"和html本身资源已经存在\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"和httpservletresponse\",{\"1\":{\"1820\":1}}],[\"和文件本身位置无关\",{\"1\":{\"1869\":1}}],[\"和tomcat\",{\"1\":{\"1776\":1}}],[\"和特殊符号中文空格等\",{\"1\":{\"1775\":1}}],[\"和特殊字符\",{\"1\":{\"1582\":1}}],[\"和使用说明\",{\"1\":{\"1686\":1}}],[\"和public不同的是assets文件夹会被webpack打包\",{\"1\":{\"1686\":1}}],[\"和assets不同的是public不会被webopack进行打包\",{\"1\":{\"1686\":1}}],[\"和add方法执行的底层一样\",{\"1\":{\"303\":1}}],[\"和v\",{\"1\":{\"1634\":1,\"1635\":1}}],[\"和val\",{\"1\":{\"1570\":1}}],[\"和removeattr\",{\"1\":{\"1567\":1}}],[\"和require\",{\"1\":{\"101\":1}}],[\"和css\",{\"1\":{\"1559\":1}}],[\"和jspsourceimports两个接口\",{\"1\":{\"1932\":1}}],[\"和jsp\",{\"1\":{\"1548\":1}}],[\"和$\",{\"1\":{\"1546\":1,\"1555\":1}}],[\"和实际内容\",{\"1\":{\"1527\":1}}],[\"和全局方法\",{\"1\":{\"1408\":2}}],[\"和比最接近\",{\"1\":{\"1408\":1}}],[\"和0取余数\",{\"1\":{\"1361\":1}}],[\"和body是并列的概念\",{\"1\":{\"1322\":2}}],[\"和数据库表格一一对应的类\",{\"1\":{\"1263\":1}}],[\"和数组接口能够是应用程序操作大块的数据类型\",{\"1\":{\"1209\":1}}],[\"和编译所花的时间可能比执行sql语句花的时间还要多\",{\"1\":{\"1250\":1}}],[\"和字符集与校对规则有关\",{\"1\":{\"1156\":1}}],[\"和字符集有关\",{\"1\":{\"1087\":1}}],[\"和空格\",{\"1\":{\"1072\":1}}],[\"和lock\",{\"1\":{\"475\":1}}],[\"和指定值\",{\"1\":{\"382\":1}}],[\"和新的数组容量传进去\",{\"1\":{\"294\":1}}],[\"和准备加入的key比较后相同\",{\"1\":{\"279\":1}}],[\"和请求消息相比\",{\"1\":{\"190\":1}}],[\"和流\",{\"1\":{\"167\":1}}],[\"和springboot完美整合\",{\"1\":{\"123\":1}}],[\"和移动设备上\",{\"1\":{\"61\":1}}],[\"和\",{\"0\":{\"1361\":1,\"1622\":1},\"1\":{\"61\":1,\"70\":2,\"72\":1,\"105\":1,\"108\":1,\"241\":1,\"279\":1,\"328\":1,\"334\":1,\"364\":1,\"371\":1,\"382\":1,\"492\":1,\"738\":1,\"760\":1,\"763\":1,\"814\":2,\"848\":1,\"869\":2,\"882\":1,\"1001\":1,\"1093\":1,\"1135\":1,\"1154\":1,\"1372\":2,\"1438\":2,\"1555\":2,\"1578\":1,\"1601\":2,\"1819\":2,\"1820\":2,\"2034\":1,\"2125\":1,\"2196\":1,\"2250\":1,\"2256\":2,\"2482\":1,\"2530\":3,\"2531\":1,\"2532\":1,\"2623\":1,\"2780\":1,\"2823\":1,\"2835\":1}}],[\"z0\",{\"1\":{\"1584\":1}}],[\"za\",{\"1\":{\"1584\":2,\"1585\":2,\"1586\":2}}],[\"zahngsan3\",{\"1\":{\"77\":1}}],[\"z++\",{\"1\":{\"1367\":1}}],[\"zoneid\",{\"1\":{\"901\":2}}],[\"zoneld\",{\"1\":{\"901\":1}}],[\"zonedtime\",{\"1\":{\"901\":1}}],[\"zoneddate\",{\"1\":{\"901\":1}}],[\"zoneddatetime\",{\"1\":{\"892\":1,\"901\":7}}],[\"zone\",{\"1\":{\"374\":2}}],[\"zs1\",{\"1\":{\"356\":1}}],[\"zz\",{\"1\":{\"300\":1}}],[\"zip解压到一个非中文无空格的目录下\",{\"1\":{\"674\":1}}],[\"zip\",{\"1\":{\"117\":1,\"208\":2,\"772\":1}}],[\"z\",{\"0\":{\"1534\":1},\"1\":{\"75\":2,\"226\":2,\"302\":1,\"374\":2,\"1355\":2,\"1367\":3,\"1411\":4,\"1534\":4,\"1582\":1,\"1584\":1,\"1585\":2,\"1586\":2,\"2030\":1}}],[\"zrender\",{\"1\":{\"61\":2}}],[\"zhaoliu\",{\"1\":{\"2559\":1}}],[\"zhaoss2\",{\"1\":{\"1514\":1}}],[\"zhaoss1\",{\"1\":{\"1514\":2}}],[\"zhangsanatguigu\",{\"1\":{\"760\":4}}],[\"zhangsan\",{\"1\":{\"759\":3,\"1579\":1,\"1713\":3,\"2052\":1,\"2075\":1,\"2124\":3,\"2132\":2,\"2166\":3,\"2558\":1,\"2598\":2,\"2612\":6,\"2695\":1,\"2881\":1}}],[\"zhangsan和lisi是一个团队的人\",{\"1\":{\"759\":1}}],[\"zhang3\",{\"1\":{\"75\":1,\"78\":2,\"79\":1}}],[\"zh\",{\"1\":{\"61\":1,\"65\":1}}],[\"作出过滤的方法\",{\"1\":{\"1998\":1,\"2001\":1}}],[\"作出响应\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"作者\",{\"1\":{\"1683\":1}}],[\"作为简易日志的log4j将失效\",{\"1\":{\"2487\":1}}],[\"作为占位符处理\",{\"1\":{\"2352\":1}}],[\"作为key的字段大小写需要完全和db中保持一致\",{\"1\":{\"2351\":1}}],[\"作为key的字段\",{\"1\":{\"2351\":1}}],[\"作为一种软件行业的从业人员\",{\"1\":{\"1950\":1}}],[\"作为一种好的编程风格\",{\"1\":{\"1223\":1}}],[\"作为控制层使用\",{\"1\":{\"1927\":1}}],[\"作为匹配规则\",{\"1\":{\"1839\":1}}],[\"作为参数调用jspservlet的doget\",{\"1\":{\"1769\":1}}],[\"作为结尾\",{\"1\":{\"1352\":1}}],[\"作为拥有丰富的可视化图表类型和深度交互能力的开源可视化库\",{\"1\":{\"61\":1}}],[\"作用与api\",{\"0\":{\"1829\":1,\"1833\":1}}],[\"作用域范围\",{\"1\":{\"2921\":1,\"2922\":1,\"2923\":1,\"2924\":1}}],[\"作用域\",{\"1\":{\"1718\":2}}],[\"作用域传参\",{\"0\":{\"2919\":1,\"3186\":1},\"1\":{\"217\":1}}],[\"作用是记录的当前项目安装的相关依赖版本\",{\"1\":{\"1686\":1}}],[\"作用是git再提交代码的时候指定相关忽略格式文件\",{\"1\":{\"1686\":1}}],[\"作用是实现表单和数据的双向绑定\",{\"1\":{\"1652\":1}}],[\"作用是为了区分元素\",{\"1\":{\"1628\":1}}],[\"作用是遍历数组\",{\"1\":{\"1626\":1}}],[\"作用2\",{\"1\":{\"1546\":1}}],[\"作用1\",{\"1\":{\"1546\":1}}],[\"作用一致\",{\"1\":{\"1408\":2}}],[\"作用返回查询结果的条数\",{\"1\":{\"1147\":1}}],[\"作用\",{\"0\":{\"1935\":1,\"2781\":1,\"2833\":1,\"2838\":1,\"2843\":1,\"2848\":1,\"2853\":1},\"1\":{\"748\":1,\"939\":1,\"940\":1,\"1206\":1,\"1312\":1,\"1325\":1,\"1849\":1,\"2922\":1,\"2923\":1,\"2924\":1}}],[\"作用将integer\",{\"1\":{\"364\":1}}],[\"作用给一些数值进行初始化的\",{\"1\":{\"294\":1}}],[\"作用不同\",{\"1\":{\"33\":1}}],[\"小花\",{\"1\":{\"2166\":1}}],[\"小黄\",{\"1\":{\"2166\":1}}],[\"小白\",{\"1\":{\"2166\":1}}],[\"小黑\",{\"1\":{\"2166\":1}}],[\"小数点\",{\"1\":{\"2029\":1}}],[\"小数点后最小的位数\",{\"1\":{\"2029\":1}}],[\"小数点后最大的位数\",{\"1\":{\"2029\":1}}],[\"小数部分为1位\",{\"1\":{\"940\":1}}],[\"小巧\",{\"1\":{\"1943\":1}}],[\"小周\",{\"1\":{\"1630\":1}}],[\"小红\",{\"1\":{\"1630\":1,\"1972\":1}}],[\"小明\",{\"1\":{\"1629\":1,\"1630\":1,\"1972\":1}}],[\"小刚\",{\"1\":{\"1456\":1,\"1630\":1}}],[\"小整数值\",{\"1\":{\"939\":1}}],[\"小时制的小时\",{\"1\":{\"2030\":4}}],[\"小时\",{\"1\":{\"893\":4,\"895\":1,\"1417\":1,\"2030\":2}}],[\"小时中的分钟数\",{\"1\":{\"374\":1}}],[\"小结\",{\"0\":{\"833\":1}}],[\"小练习\",{\"0\":{\"376\":1}}],[\"小于15<\",{\"1\":{\"1621\":1,\"1622\":1}}],[\"小于10<\",{\"1\":{\"1621\":1,\"1622\":1}}],[\"小于\",{\"1\":{\"364\":1,\"1030\":1}}],[\"小于等于\",{\"1\":{\"34\":1,\"1030\":1}}],[\"小\",{\"1\":{\"288\":1}}],[\"小幅修订的\",{\"1\":{\"71\":1}}],[\"小米\",{\"1\":{\"61\":1}}],[\"联想\",{\"1\":{\"61\":1}}],[\"华为\",{\"1\":{\"61\":1}}],[\"腾讯\",{\"1\":{\"61\":1}}],[\"其处理结果需要直接响应\",{\"1\":{\"2874\":1}}],[\"其语法和jstl类似\",{\"1\":{\"2441\":1}}],[\"其本质是对jdbc的封装\",{\"1\":{\"2196\":1}}],[\"其核心思想是把前端项目\",{\"1\":{\"1937\":1}}],[\"其设计的目的是为了和应用层协议解耦\",{\"1\":{\"1819\":1}}],[\"其根本是一个简化的<span>servlet<\",{\"1\":{\"1548\":1}}],[\"其局限性是显而易见的\",{\"1\":{\"1145\":1}}],[\"其它条件\",{\"1\":{\"1057\":1}}],[\"其区别主要体现在以下几个方面\",{\"1\":{\"976\":1}}],[\"其主要原因是程序没有细致地过滤用户输入的数据\",{\"1\":{\"1237\":1}}],[\"其主要包括\",{\"1\":{\"933\":1,\"934\":1,\"935\":1,\"936\":1}}],[\"其主要负责数据库的运营和维护\",{\"1\":{\"912\":1}}],[\"其基本结构是使用select子句\",{\"1\":{\"932\":1}}],[\"其前身是\",{\"1\":{\"930\":1}}],[\"其发展前景是无可限量的\",{\"1\":{\"920\":1}}],[\"其具有体积小\",{\"1\":{\"920\":1}}],[\"其余方法均为非终结方法\",{\"1\":{\"861\":1}}],[\"其余两者扩容的长度都是1\",{\"1\":{\"255\":1}}],[\"其实底层相当于执行了\",{\"1\":{\"2550\":1}}],[\"其实底层是基于copyonwritearraylist的addifabsent\",{\"1\":{\"319\":1}}],[\"其实大家在前面看相关的api的时候会注意到都会有一个condition参数\",{\"1\":{\"2260\":1}}],[\"其实\",{\"1\":{\"2125\":1}}],[\"其实执行性能上的差别只在第一次的执行\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"其实就是在运行一个servlet\",{\"1\":{\"1931\":1}}],[\"其实此时该文件夹已经被删除或者剩下一个空文件夹\",{\"1\":{\"928\":1}}],[\"其实免费的社区版也支持多种数据类型和正规的sql查询语言\",{\"1\":{\"920\":1}}],[\"其实这个算法就是取模运算\",{\"1\":{\"294\":1}}],[\"其地址就会被存放至栈顶\",{\"1\":{\"302\":1}}],[\"其中innodb支持事务处理机制\",{\"1\":{\"2683\":1}}],[\"其中前端工程师再开发完成之后可以独自进行mock测试\",{\"1\":{\"1942\":1}}],[\"其中httpjspbase又继承了httpservlet\",{\"1\":{\"1932\":1}}],[\"其中key为string类型value为string\",{\"1\":{\"1801\":1}}],[\"其中2的最新版本的是2\",{\"1\":{\"1558\":1}}],[\"其中校验语法\",{\"1\":{\"1250\":1}}],[\"其中一个\",{\"1\":{\"1184\":1}}],[\"其中一些数据\",{\"0\":{\"1080\":1}}],[\"其中monday为周中第一天\",{\"1\":{\"1093\":1}}],[\"其中sunday为周中第一天\",{\"1\":{\"1093\":1}}],[\"其中\",{\"1\":{\"1093\":1,\"2034\":1,\"2789\":1}}],[\"其中check约束是mysql8中提供的支持\",{\"1\":{\"981\":1}}],[\"其中具有代表性的数据库管理系统有\",{\"1\":{\"917\":1}}],[\"其中dbms是数据库系统的基础和核心\",{\"1\":{\"914\":1}}],[\"其中每个时区都对应着id\",{\"1\":{\"901\":1}}],[\"其中注意\",{\"1\":{\"537\":1}}],[\"其中127\",{\"1\":{\"493\":1}}],[\"其中file\",{\"1\":{\"384\":1}}],[\"其中java\",{\"1\":{\"370\":1}}],[\"其中的对象只能在其到期时才能从队列中取走\",{\"1\":{\"354\":1}}],[\"其中通过prev指向前一\",{\"1\":{\"261\":1}}],[\"其中甚至包括阿里巴巴\",{\"1\":{\"61\":1}}],[\"其他异常回滚\",{\"1\":{\"2717\":1}}],[\"其他异常不回滚\",{\"1\":{\"2716\":1}}],[\"其他有需要的地方引用这个切入点表达式\",{\"1\":{\"2635\":1}}],[\"其他模块\",{\"0\":{\"2533\":1}}],[\"其他三个对象\",{\"0\":{\"1971\":1}}],[\"其他客户端浏览器对应的httpsession对象会继续保存不会被销毁\",{\"1\":{\"1899\":1}}],[\"其他资源\",{\"1\":{\"1772\":1}}],[\"其他大量改进\",{\"1\":{\"1558\":1}}],[\"其他页面锚点跳转\",{\"0\":{\"1315\":1}}],[\"其他重要操作的信息\",{\"1\":{\"1282\":1}}],[\"其他任何情况都会清空事务日志\",{\"1\":{\"1100\":1}}],[\"其他函数\",{\"0\":{\"1095\":1}}],[\"其他处理\",{\"0\":{\"1091\":1}}],[\"其他未指定的列\",{\"1\":{\"972\":1}}],[\"其他操作\",{\"1\":{\"729\":1}}],[\"其他默认即可\",{\"1\":{\"725\":1}}],[\"其他runtime\",{\"0\":{\"692\":1}}],[\"其他某个线程中断当前线程\",{\"1\":{\"475\":1}}],[\"其他某个线程调用此\",{\"1\":{\"475\":2}}],[\"其他线程有机会访问其他同步监视器的代码块\",{\"1\":{\"468\":1}}],[\"其他线程无法访问其中的任何一个代码块\",{\"1\":{\"468\":1}}],[\"其他的部分是确定的\",{\"1\":{\"233\":1}}],[\"其他都可以加载别人已经写好的模块\",{\"1\":{\"100\":1}}],[\"其他命令\",{\"0\":{\"95\":1}}],[\"其他新特性\",{\"0\":{\"903\":1,\"3061\":1},\"1\":{\"51\":1}}],[\"其他语言\",{\"0\":{\"2945\":1},\"1\":{\"1\":1}}],[\"气候监测等众多领域\",{\"1\":{\"61\":1}}],[\"医疗\",{\"1\":{\"61\":1}}],[\"科研院所应用\",{\"1\":{\"61\":1}}],[\"孵化器项目之前\",{\"1\":{\"61\":1}}],[\"孵化器\",{\"1\":{\"61\":1}}],[\"孵化器赞助的\",{\"1\":{\"61\":1}}],[\"项目工程初始化\",{\"0\":{\"2664\":1}}],[\"项目都是以\",{\"1\":{\"2520\":1}}],[\"项目环境\",{\"0\":{\"2373\":1}}],[\"项目代码\",{\"0\":{\"2176\":1}}],[\"项目代码的层级关系更加的清楚明了\",{\"1\":{\"1264\":1}}],[\"项目搭建\",{\"0\":{\"2175\":1}}],[\"项目重启免登录\",{\"0\":{\"2089\":1}}],[\"项目分层结构设计\",{\"0\":{\"2042\":1}}],[\"项目运行\",{\"1\":{\"1968\":1}}],[\"项目运行任何时间有效\",{\"1\":{\"1924\":1}}],[\"项目关闭\",{\"1\":{\"1924\":1}}],[\"项目启动\",{\"1\":{\"1924\":1}}],[\"项目名\",{\"1\":{\"1779\":1}}],[\"项目名+\",{\"1\":{\"1777\":1}}],[\"项目名称唯一\",{\"1\":{\"683\":1,\"685\":1}}],[\"项目名称\",{\"1\":{\"92\":1,\"1683\":1}}],[\"项目存放路径中注意不要出现\",{\"1\":{\"1775\":1}}],[\"项目中任何一个request对象的销毁都会触发该方法的执行\",{\"1\":{\"2076\":1}}],[\"项目中任何一个request对象的销毁都会触发该方法的执行requestinitialized\",{\"1\":{\"2076\":1}}],[\"项目中任何一个request对象的创建并初始化都会触发该方法的执行\",{\"1\":{\"2076\":2}}],[\"项目中缺乏前后端\",{\"1\":{\"1940\":1}}],[\"项目中所有的页面切换页面显示都是在这个组件基础上渲染的\",{\"1\":{\"1691\":1}}],[\"项目中的dependencies标签\",{\"1\":{\"714\":1}}],[\"项目相关配置信息等等\",{\"1\":{\"1686\":1}}],[\"项目的相关模块\",{\"1\":{\"1686\":1}}],[\"项目的核心区域\",{\"1\":{\"1686\":1}}],[\"项目的依赖中心\",{\"1\":{\"1686\":1}}],[\"项目对象模型\",{\"1\":{\"683\":1}}],[\"项目结构\",{\"0\":{\"679\":1}}],[\"项目才可以运行\",{\"1\":{\"660\":1}}],[\"项目发文时使用\",{\"1\":{\"655\":1}}],[\"项目规模增加到一定程度后\",{\"1\":{\"654\":1}}],[\"项目经理该如何划分项目的模块\",{\"1\":{\"653\":1}}],[\"项目视图是主要工具窗囗之一\",{\"1\":{\"600\":1}}],[\"项目视图\",{\"0\":{\"600\":1}}],[\"项目打包到生产环境的时候不包含的依赖\",{\"1\":{\"94\":1}}],[\"项目目录\",{\"1\":{\"94\":1}}],[\"项目描述\",{\"1\":{\"92\":1,\"1683\":1}}],[\"项目版本号\",{\"1\":{\"92\":1}}],[\"项目初始化\",{\"0\":{\"92\":1}}],[\"项目全票通过进入\",{\"1\":{\"61\":1}}],[\"项目实践\",{\"0\":{\"2941\":1},\"1\":{\"1\":1}}],[\"全参构造初始化注入\",{\"1\":{\"2559\":2}}],[\"全参构造初始化\",{\"1\":{\"2558\":2}}],[\"全参构造\",{\"1\":{\"2552\":1}}],[\"全限定域名\",{\"1\":{\"1766\":1}}],[\"全限定路径\",{\"1\":{\"21\":1}}],[\"全屏宽度\",{\"1\":{\"1601\":1}}],[\"全新自定义选项\",{\"1\":{\"1558\":1}}],[\"全国政\",{\"1\":{\"1305\":1}}],[\"全国政协委员许洪玲建议在社区举办家长课堂\",{\"1\":{\"1301\":9}}],[\"全文替换\",{\"1\":{\"641\":1}}],[\"全文查找字符串\",{\"1\":{\"641\":1}}],[\"全部代码块操作\",{\"1\":{\"616\":1}}],[\"全部修饰符\",{\"1\":{\"590\":2,\"591\":3}}],[\"全部\",{\"1\":{\"584\":2,\"585\":3,\"587\":2,\"588\":3,\"591\":1}}],[\"全称java\",{\"1\":{\"1927\":1}}],[\"全称\",{\"1\":{\"313\":1}}],[\"全局开关\",{\"1\":{\"2434\":1}}],[\"全局配置\",{\"0\":{\"2225\":1,\"2229\":1,\"2235\":1}}],[\"全局的工作\",{\"1\":{\"2197\":1}}],[\"全局容器\",{\"1\":{\"1829\":1}}],[\"全局导航\",{\"0\":{\"605\":1}}],[\"全局域\",{\"0\":{\"132\":1},\"1\":{\"132\":1}}],[\"全局卸载\",{\"1\":{\"95\":1}}],[\"全局更新\",{\"1\":{\"95\":1}}],[\"全局安装\",{\"1\":{\"94\":1,\"112\":1}}],[\"全球著名开源社区\",{\"1\":{\"61\":1}}],[\"开头表示结对路径\",{\"1\":{\"2764\":1}}],[\"开头和结尾的所有的0不保留\",{\"1\":{\"2031\":1}}],[\"开头是相对路径\",{\"1\":{\"1873\":1,\"1877\":1}}],[\"开头的路径是绝对路径\",{\"1\":{\"1873\":1,\"1877\":1}}],[\"开头\",{\"1\":{\"1868\":2,\"2834\":1}}],[\"开启缓存\",{\"0\":{\"2474\":1,\"2478\":1}}],[\"开启\",{\"0\":{\"1251\":1},\"1\":{\"2293\":1}}],[\"开启mysql57服务\",{\"1\":{\"1155\":1}}],[\"开启事务注解\",{\"1\":{\"2706\":1,\"2903\":1,\"2908\":1}}],[\"开启事务b\",{\"1\":{\"2690\":1,\"2691\":1,\"2692\":1}}],[\"开启事务a\",{\"1\":{\"2690\":1,\"2691\":1,\"2692\":1}}],[\"开启事务\",{\"0\":{\"1106\":1},\"1\":{\"936\":1}}],[\"开放源代码\",{\"1\":{\"920\":1}}],[\"开放源码等优点\",{\"1\":{\"919\":1,\"920\":1}}],[\"开源免费\",{\"1\":{\"1736\":2}}],[\"开源\",{\"1\":{\"1559\":1}}],[\"开源的特点是给予了用户根据自己需要修改dbms的自由\",{\"1\":{\"920\":1}}],[\"开源项目就会在大家共同的努力下不断壮大和完善\",{\"1\":{\"757\":1}}],[\"开源基金会孵化的项目\",{\"1\":{\"61\":1}}],[\"开始扫描外部文件\",{\"1\":{\"2906\":1}}],[\"开始取证~\",{\"1\":{\"2605\":1}}],[\"开始计数\",{\"1\":{\"1551\":2}}],[\"开始计算返回字符串最后出现的位置\",{\"1\":{\"1405\":1}}],[\"开始timeout\",{\"1\":{\"1459\":1}}],[\"开始interval\",{\"1\":{\"1458\":1}}],[\"开始安装\",{\"1\":{\"725\":1}}],[\"开始菜单\",{\"1\":{\"725\":1}}],[\"开始\",{\"1\":{\"478\":1,\"2334\":1}}],[\"开始争抢\",{\"1\":{\"462\":1}}],[\"开始写入字符的偏移量len\",{\"1\":{\"407\":1}}],[\"开始强制获取\",{\"1\":{\"327\":1}}],[\"开发集成特性\",{\"1\":{\"2531\":1}}],[\"开发阶段\",{\"1\":{\"2306\":1}}],[\"开发效率提高\",{\"0\":{\"2038\":1}}],[\"开发人员如果调用了filterchain对象的dofilter方法\",{\"1\":{\"2046\":1}}],[\"开发人员可以利用jstl和el来开发web程序\",{\"1\":{\"2012\":1}}],[\"开发人员通过init方法的参数\",{\"1\":{\"2003\":1}}],[\"开发servlet\",{\"0\":{\"1997\":1}}],[\"开发filter\",{\"0\":{\"1998\":1},\"1\":{\"1996\":1}}],[\"开发后台资源\",{\"1\":{\"1996\":1}}],[\"开发能力必然会有所提升\",{\"1\":{\"1947\":1}}],[\"开发独立化\",{\"1\":{\"1947\":1}}],[\"开发环境使用\",{\"1\":{\"2294\":1}}],[\"开发环境版本\",{\"1\":{\"1616\":1}}],[\"开发环境可以清晰的看清源码\",{\"1\":{\"1616\":1}}],[\"开发更加快捷\",{\"1\":{\"1557\":1}}],[\"开发中建议使用\",{\"1\":{\"1535\":1}}],[\"开发者在使用框架是直接调用封装好的api可以省去很多代码编写\",{\"1\":{\"2197\":1}}],[\"开发者无需关心具体操作\",{\"1\":{\"2179\":1}}],[\"开发者默认\",{\"1\":{\"922\":1}}],[\"开发者只需要实现核心的业务逻辑\",{\"1\":{\"100\":1}}],[\"开发的直接面对最终用户的应用程序\",{\"1\":{\"911\":1}}],[\"开发完成后会合并到开发分支\",{\"1\":{\"806\":1}}],[\"开发分支\",{\"0\":{\"803\":1}}],[\"开发团队的规模也与日俱增\",{\"1\":{\"653\":1}}],[\"开发工具和部署工具可以通过这些补充信息进行验证或者进行部署\",{\"1\":{\"533\":1}}],[\"开发步骤\",{\"0\":{\"124\":1,\"522\":1,\"1788\":1}}],[\"开发时的依赖包\",{\"1\":{\"94\":1}}],[\"开发必备工具\",{\"0\":{\"7\":1,\"2950\":1},\"1\":{\"3\":1}}],[\"是roy\",{\"1\":{\"2823\":1}}],[\"是整个流程控制的中心\",{\"1\":{\"2770\":1}}],[\"是目前最主流的mvc框架之一\",{\"1\":{\"2741\":1}}],[\"是数据库环境中的逻辑工作单位\",{\"1\":{\"2683\":1}}],[\"是spring内部使用的接口\",{\"1\":{\"2550\":1}}],[\"是运行时查询和操作对象图的强大的表达式语言\",{\"1\":{\"2532\":1}}],[\"是运行在服务端的\",{\"1\":{\"84\":1}}],[\"是工厂模式的经典实现\",{\"1\":{\"2532\":1}}],[\"是分层的全栈式的轻量级开发框架\",{\"1\":{\"2520\":1}}],[\"是mybatis是否启用懒加载的全局开关\",{\"1\":{\"2434\":1}}],[\"是mysql的管理员用户\",{\"1\":{\"925\":1}}],[\"是开启的手动提交\",{\"1\":{\"2360\":1}}],[\"是最顶级的类\",{\"1\":{\"2237\":1}}],[\"是最复杂的一个dom对象\",{\"1\":{\"1477\":1}}],[\"是jtsl中的第二大组成部分\",{\"1\":{\"2027\":1}}],[\"是java的原生注解\",{\"1\":{\"2593\":1}}],[\"是java代码规范编写的典范\",{\"1\":{\"2528\":1}}],[\"是java语言编写的一种动态资源\",{\"1\":{\"1786\":1}}],[\"是javaee平台下的技术标准\",{\"1\":{\"1782\":1}}],[\"是java\",{\"1\":{\"1250\":1,\"1548\":1}}],[\"是不展示任何信息的\",{\"1\":{\"1980\":1}}],[\"是不是nan\",{\"1\":{\"1409\":1,\"1412\":1}}],[\"是不是一颗红黑树\",{\"1\":{\"279\":1}}],[\"是通过对象的属性的get方法获取的\",{\"1\":{\"1980\":1}}],[\"是通过对等待池的限定来实现的\",{\"1\":{\"334\":1}}],[\"是我们学习后面的知识的一种知识积累\",{\"1\":{\"1950\":1}}],[\"是比较消耗资源的\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"是由jcp\",{\"1\":{\"2011\":1}}],[\"是由sun公司主导创建的一种动态网页技术标准\",{\"1\":{\"1927\":1}}],[\"是由一些ascii字符构成\",{\"1\":{\"1374\":2}}],[\"是虚拟的路径\",{\"1\":{\"1873\":1,\"1877\":1}}],[\"是虚拟机级别的\",{\"1\":{\"473\":1}}],[\"是服务器通知浏览器\",{\"1\":{\"1862\":1}}],[\"是对原始繁琐的jdbc\",{\"1\":{\"2669\":1}}],[\"是对浏览器屏蔽\",{\"1\":{\"1861\":1}}],[\"是对象\",{\"1\":{\"430\":1}}],[\"是tomcat的安装目录\",{\"1\":{\"1779\":1}}],[\"是tomcat副本的工作目录catalina\",{\"1\":{\"1779\":1}}],[\"是客户端的技术\",{\"1\":{\"1720\":1}}],[\"是双大括号学名\",{\"1\":{\"1617\":1}}],[\"是window对象的一个属性\",{\"1\":{\"1462\":1}}],[\"是with\",{\"1\":{\"379\":1}}],[\"是其根对象\",{\"1\":{\"1448\":2}}],[\"是其他方法的基础\",{\"1\":{\"328\":1}}],[\"是访问\",{\"1\":{\"1446\":1,\"1447\":1}}],[\"是索引\",{\"1\":{\"1389\":1}}],[\"是为小服\",{\"1\":{\"1548\":1}}],[\"是为了操作文档出现的\",{\"1\":{\"1448\":1}}],[\"是为了操作浏览器出现的\",{\"1\":{\"1448\":1}}],[\"是为了扩展netscape\",{\"1\":{\"1376\":1}}],[\"是为完成特定任务\",{\"1\":{\"452\":1}}],[\"是浏览器的一种特性\",{\"1\":{\"1372\":1}}],[\"是正式的\",{\"1\":{\"1372\":1}}],[\"是所谓的非程序语言\",{\"1\":{\"1145\":1}}],[\"是字符的个数\",{\"1\":{\"972\":1}}],[\"是结构化查询语言的简称\",{\"1\":{\"930\":1}}],[\"是用来定义和管理数据的软件\",{\"1\":{\"910\":1}}],[\"是指当b的外层a\",{\"1\":{\"2728\":1}}],[\"是指一种创建交互式\",{\"1\":{\"2108\":1}}],[\"是指任何实现了这个servlet接口的类\",{\"1\":{\"1548\":2}}],[\"是指对数据库管理系统进行操作的人员\",{\"1\":{\"912\":1}}],[\"是指对客观事物进行描述并可以鉴别的符号\",{\"1\":{\"908\":1}}],[\"是指使用超线程技术\",{\"1\":{\"452\":1}}],[\"是线程安全的\",{\"1\":{\"892\":1}}],[\"是因为git\",{\"1\":{\"744\":1}}],[\"是在服务器端执行的\",{\"1\":{\"1927\":1}}],[\"是在数据库管理系统基础上\",{\"1\":{\"911\":1}}],[\"是在远程服务器上的git仓库\",{\"1\":{\"723\":1}}],[\"是在开发人员自己电脑上的git仓库\",{\"1\":{\"723\":1}}],[\"是个男孩\",{\"1\":{\"564\":1}}],[\"是个女孩\",{\"1\":{\"564\":1}}],[\"是基于注解的\",{\"1\":{\"534\":1}}],[\"是同时有多个内核\",{\"1\":{\"452\":1}}],[\"是并发\",{\"1\":{\"452\":1}}],[\"是并行\",{\"1\":{\"452\":1}}],[\"是并列关系\",{\"1\":{\"242\":1}}],[\"是按照时间片来执行的\",{\"1\":{\"452\":1}}],[\"是按照什么结构来组织管理我们的数据\",{\"1\":{\"224\":1}}],[\"是程序的一次执行过程\",{\"1\":{\"452\":1}}],[\"是程序的入口\",{\"1\":{\"16\":1,\"17\":1,\"30\":2,\"32\":1,\"364\":1,\"371\":1,\"373\":1,\"392\":1,\"396\":1,\"503\":1,\"506\":1,\"543\":1,\"560\":1,\"561\":1,\"562\":1,\"563\":1,\"564\":1}}],[\"是一款优秀的持久层框架\",{\"1\":{\"2196\":1}}],[\"是一套用于构建用户界面的渐进式框架\",{\"1\":{\"1611\":1}}],[\"是一种广泛使用的开源java分布式缓存\",{\"1\":{\"2482\":1}}],[\"是一种内存型缓存\",{\"1\":{\"2473\":1}}],[\"是一种临时存储少量数据至内存或者是磁盘的一种技术\",{\"1\":{\"2470\":1}}],[\"是一种约定\",{\"1\":{\"2168\":1}}],[\"是一种轻量级的数据交换格式\",{\"1\":{\"2123\":1}}],[\"是一种处理错误提示页的功能除了jsp有的错误提示页功能\",{\"1\":{\"1960\":1}}],[\"是一种动态页面技术\",{\"1\":{\"1927\":1}}],[\"是一种浏览器行为\",{\"1\":{\"1865\":1}}],[\"是一种真正的面向对象的语言\",{\"1\":{\"1376\":1}}],[\"是一种基于对象的语言\",{\"1\":{\"1376\":1}}],[\"是一种由欧洲计算机制造商协会\",{\"1\":{\"1372\":1}}],[\"是一种数据的临时存储方案\",{\"1\":{\"1225\":1}}],[\"是一种用于执行sql语句的java\",{\"1\":{\"1205\":1}}],[\"是一种密码散列函数\",{\"1\":{\"702\":1}}],[\"是一张单独的表存了业务表的数据\",{\"1\":{\"1143\":1}}],[\"是一类在运行时可以改变其结构的语言\",{\"1\":{\"572\":1}}],[\"是一段静态的代码\",{\"1\":{\"452\":1}}],[\"是一个不可分割的工作单位\",{\"1\":{\"2683\":1}}],[\"是一个独立的aop框架\",{\"1\":{\"2627\":1}}],[\"是一个功能强大且成熟的面向切面编程\",{\"1\":{\"2533\":1}}],[\"是一个轻量级控制反转\",{\"1\":{\"2520\":1}}],[\"是一个基本概念上的结构\",{\"1\":{\"2197\":1}}],[\"是一个基于java的持久层框架\",{\"1\":{\"2196\":1}}],[\"是一个框子\",{\"1\":{\"2197\":1}}],[\"是一个\",{\"1\":{\"2178\":1}}],[\"是一个字符串\",{\"1\":{\"2124\":1}}],[\"是一个用于企业级web开发平台\",{\"1\":{\"1732\":1}}],[\"是一个数据访问接口\",{\"1\":{\"1262\":1}}],[\"是一个客户端软件\",{\"1\":{\"925\":1}}],[\"是一个可以为null的容器对象\",{\"1\":{\"851\":1}}],[\"是一个隐藏文件夹\",{\"1\":{\"732\":1}}],[\"是一个程序内部的一条执行路径\",{\"1\":{\"452\":1}}],[\"是一个动的过程\",{\"1\":{\"452\":1}}],[\"是一个前端资源加载\",{\"1\":{\"111\":1}}],[\"是一个正在由\",{\"1\":{\"61\":1}}],[\"是从jdk1\",{\"1\":{\"361\":1}}],[\"是唯一的\",{\"1\":{\"284\":1,\"299\":1}}],[\"是hashmap的子类\",{\"1\":{\"282\":1}}],[\"是null或者\",{\"1\":{\"279\":1}}],[\"是node\",{\"1\":{\"90\":1}}],[\"是泛型方法\",{\"1\":{\"241\":1}}],[\"是否只读\",{\"1\":{\"2481\":1}}],[\"是否过滤二进制字段\",{\"1\":{\"2301\":1}}],[\"是否显示纳秒\",{\"1\":{\"2301\":1}}],[\"是否通过jmx暴露属性\",{\"1\":{\"2301\":1}}],[\"是否自动刷新\",{\"1\":{\"2301\":1}}],[\"是否从浏览器的缓存中加载信息\",{\"1\":{\"2155\":1}}],[\"是否发送异步请求\",{\"1\":{\"2155\":1}}],[\"是否对数字分组\",{\"1\":{\"2029\":1}}],[\"是否必要\",{\"1\":{\"2029\":1,\"2030\":1}}],[\"是否必须有此\",{\"1\":{\"2855\":1}}],[\"是否必须有此消息头\",{\"1\":{\"2850\":1}}],[\"是否必须提供占位符\",{\"1\":{\"2845\":1}}],[\"是否必须\",{\"1\":{\"1713\":1}}],[\"是否使用阻塞性缓存blockingcache\",{\"1\":{\"2481\":1}}],[\"是否使用异步方式\",{\"1\":{\"2114\":1}}],[\"是否使用规则引擎\",{\"1\":{\"1683\":1}}],[\"是否使用索引\",{\"1\":{\"1136\":1}}],[\"是否安装路由\",{\"1\":{\"1683\":1}}],[\"是否启用预编译缓存\",{\"1\":{\"1251\":1}}],[\"是否开启延迟加载\",{\"1\":{\"2434\":1}}],[\"是否开启日志过滤\",{\"1\":{\"2301\":1}}],[\"是否开启慢sql记录\",{\"1\":{\"2298\":1}}],[\"是否开启预编译\",{\"1\":{\"1251\":1}}],[\"是否开启公平策略\",{\"1\":{\"478\":1}}],[\"是否存在\",{\"1\":{\"390\":1}}],[\"是否存在下一个元素\",{\"1\":{\"220\":1}}],[\"是否隐藏\",{\"1\":{\"386\":2,\"387\":1,\"389\":2,\"390\":1}}],[\"是否是一个文件\",{\"1\":{\"386\":2,\"387\":1,\"389\":2,\"390\":1}}],[\"是否是一个目录\",{\"1\":{\"386\":2,\"387\":1,\"389\":2,\"390\":1}}],[\"是否是泛型类\",{\"1\":{\"241\":1}}],[\"是否可写\",{\"1\":{\"386\":2,\"387\":1,\"389\":2}}],[\"是否可读\",{\"1\":{\"386\":2,\"387\":1,\"389\":2}}],[\"是否为空\",{\"1\":{\"303\":1}}],[\"是否为null\",{\"1\":{\"279\":1}}],[\"是否支持压缩\",{\"1\":{\"177\":1}}],[\"是设定某种扩展名的文件用一种应用程序来打开的方式类型\",{\"1\":{\"206\":1}}],[\"是哪种浏览器\",{\"1\":{\"177\":1}}],[\"是让\",{\"1\":{\"115\":1}}],[\"是将\",{\"1\":{\"115\":1}}],[\"是全球最大的模块生态系统\",{\"1\":{\"90\":1}}],[\"是使得\",{\"1\":{\"68\":1}}],[\"是\",{\"1\":{\"68\":1,\"548\":1,\"1112\":6,\"1548\":1,\"1703\":1,\"1750\":1,\"1752\":1,\"2029\":1,\"2030\":1,\"2125\":1,\"2843\":1}}],[\"什么时缓存\",{\"0\":{\"2470\":1}}],[\"什么时候使用查询\",{\"1\":{\"1197\":1}}],[\"什么时候使用搜索\",{\"1\":{\"1197\":1}}],[\"什么时候有效\",{\"1\":{\"683\":1,\"685\":1}}],[\"什么是restful风格\",{\"0\":{\"2823\":1}}],[\"什么是aop切面编程\",{\"0\":{\"2619\":1}}],[\"什么是ajax\",{\"0\":{\"2108\":1}}],[\"什么是持久层\",{\"0\":{\"2199\":1}}],[\"什么是orm\",{\"0\":{\"2198\":1}}],[\"什么是框架\",{\"0\":{\"2197\":1}}],[\"什么是跨域\",{\"0\":{\"2168\":1}}],[\"什么是异步交互\",{\"0\":{\"2104\":1}}],[\"什么是同步交互\",{\"0\":{\"2101\":1}}],[\"什么是监听器\",{\"0\":{\"2066\":1}}],[\"什么是过滤链\",{\"0\":{\"2046\":1}}],[\"什么是过滤器\",{\"0\":{\"1994\":1}}],[\"什么是mvc模式\",{\"0\":{\"2034\":1}}],[\"什么是mime\",{\"0\":{\"206\":1}}],[\"什么是el表达式\",{\"0\":{\"1978\":1}}],[\"什么是echarts动态图表\",{\"0\":{\"61\":1}}],[\"什么是内置对象\",{\"0\":{\"1966\":1}}],[\"什么是指令标签\",{\"0\":{\"1956\":1}}],[\"什么是组件\",{\"0\":{\"1704\":1}}],[\"什么是容器\",{\"0\":{\"1594\":1}}],[\"什么是正则表达式\",{\"0\":{\"1582\":1}}],[\"什么是浮动\",{\"0\":{\"1517\":1}}],[\"什么是document\",{\"0\":{\"1477\":1}}],[\"什么是dom编程\",{\"0\":{\"1476\":1}}],[\"什么是dom\",{\"0\":{\"1447\":1}}],[\"什么是window对象\",{\"0\":{\"1450\":1}}],[\"什么是bom\",{\"0\":{\"1446\":1}}],[\"什么是事件\",{\"0\":{\"1428\":1}}],[\"什么是事务\",{\"0\":{\"1233\":1}}],[\"什么是jstl\",{\"0\":{\"2011\":1}}],[\"什么是javaee\",{\"0\":{\"1732\":1}}],[\"什么是javascrip\",{\"0\":{\"1372\":1}}],[\"什么是jquery\",{\"0\":{\"1541\":1}}],[\"什么是jdbc\",{\"0\":{\"1205\":1}}],[\"什么是html\",{\"0\":{\"1325\":1}}],[\"什么是http协议\",{\"0\":{\"154\":1}}],[\"什么是日志log\",{\"0\":{\"1282\":1},\"1\":{\"2304\":1}}],[\"什么是sql注入\",{\"0\":{\"1237\":1}}],[\"什么是批处理\",{\"0\":{\"1230\":1}}],[\"什么是存储过程\",{\"0\":{\"1145\":1}}],[\"什么是注解\",{\"0\":{\"533\":1}}],[\"什么是包装类\",{\"0\":{\"359\":1}}],[\"什么是泛型\",{\"0\":{\"233\":1}}],[\"什么是算法和数据结构\",{\"0\":{\"222\":1}}],[\"什么是npm\",{\"0\":{\"90\":1}}],[\"什么是node\",{\"0\":{\"83\":1}}],[\"什么都不做\",{\"1\":{\"21\":2}}],[\"什么都不写\",{\"1\":{\"21\":2}}],[\"概括来说就是一句话\",{\"1\":{\"2715\":1}}],[\"概览\",{\"0\":{\"399\":1}}],[\"概念引入与环境准备\",{\"0\":{\"2738\":1,\"3177\":1},\"1\":{\"217\":1}}],[\"概念\",{\"0\":{\"122\":1,\"313\":1,\"326\":1,\"336\":1,\"346\":1,\"351\":1,\"384\":1,\"400\":1,\"520\":1,\"527\":1,\"532\":1,\"558\":1,\"570\":1,\"657\":1,\"687\":1,\"757\":1,\"985\":1,\"991\":1,\"997\":1,\"1005\":1,\"1010\":1,\"1015\":1,\"1019\":1,\"1099\":1,\"1125\":1,\"1427\":1,\"1728\":1,\"1913\":1,\"2497\":1,\"2618\":1}}],[\"概念与安装\",{\"0\":{\"906\":1,\"3062\":1},\"1\":{\"52\":1}}],[\"概述\",{\"0\":{\"60\":1,\"720\":1,\"930\":1,\"981\":1,\"1329\":1,\"1444\":1,\"1475\":1,\"1527\":1,\"1531\":1,\"2669\":1}}],[\"对具体的用户请求进行处理\",{\"1\":{\"2773\":1}}],[\"对处理器进行执行\",{\"1\":{\"2772\":1}}],[\"对一个查询操作来说\",{\"1\":{\"2714\":1}}],[\"对没实现接口的类应用切面\",{\"1\":{\"2660\":1}}],[\"对实现了接口的类应用切面\",{\"1\":{\"2660\":1}}],[\"对类成员的访问以及异常处理程序块的执行等等\",{\"1\":{\"2621\":1}}],[\"对程序的功能进行拓展\",{\"1\":{\"2619\":1}}],[\"对程序的所有逻辑路径进行测试\",{\"1\":{\"530\":1}}],[\"对某个方法进行增强\",{\"1\":{\"2608\":1}}],[\"对此\",{\"1\":{\"2576\":1}}],[\"对流行的对象关系映射\",{\"1\":{\"2530\":1}}],[\"对这个生成的实现类采用动态代理的形式\",{\"1\":{\"2380\":1}}],[\"对页面进行局部修改\",{\"1\":{\"2109\":1}}],[\"对网页的某部分进行更新\",{\"1\":{\"2108\":1}}],[\"对那个\",{\"1\":{\"1999\":1}}],[\"对响应作出过滤\",{\"1\":{\"1998\":1,\"2001\":1}}],[\"对请求作出过滤\",{\"1\":{\"1998\":1,\"2001\":1}}],[\"对web服务器管理的所有web资源\",{\"1\":{\"1994\":1}}],[\"对基准路径\",{\"1\":{\"1872\":1}}],[\"对http传输内容类型进行了全面定义\",{\"1\":{\"1805\":1}}],[\"对hello的依赖\",{\"1\":{\"689\":1}}],[\"对浏览器作出响应\",{\"1\":{\"1790\":1}}],[\"对项目进行启动之前的配置\",{\"1\":{\"1777\":1}}],[\"对eslint的校验\",{\"1\":{\"1687\":1}}],[\"对元素的显示和隐藏进行逻辑判断\",{\"1\":{\"1624\":1}}],[\"对所有的请求进行过滤\",{\"1\":{\"2054\":1}}],[\"对所有的行动态实现隔行变色\",{\"1\":{\"1544\":1}}],[\"对所选表达式快速求值\",{\"1\":{\"671\":1}}],[\"对json的处理\",{\"1\":{\"1726\":1}}],[\"对javascript进行了封装\",{\"1\":{\"1541\":1}}],[\"对junit的依赖\",{\"1\":{\"690\":1}}],[\"对\",{\"1\":{\"1411\":1,\"1451\":6,\"2823\":1}}],[\"对数进行上舍入\",{\"1\":{\"1411\":1}}],[\"对数据所做的任何改变\",{\"1\":{\"2688\":1}}],[\"对数据库进行管理\",{\"1\":{\"919\":1}}],[\"对数据库进行操作\",{\"1\":{\"917\":1}}],[\"对数据的操作基本上都建立在一个或多个表格上\",{\"1\":{\"917\":1}}],[\"对数据采用算法进行计算生成摘要信息\",{\"1\":{\"702\":1}}],[\"对dao层代码进行了封装\",{\"1\":{\"1263\":1}}],[\"对sql进行预编译处理\",{\"1\":{\"1247\":1}}],[\"对stringbuilder没有影响\",{\"1\":{\"395\":1,\"396\":1}}],[\"对t\",{\"1\":{\"1072\":1}}],[\"对查询结果进行分组前\",{\"1\":{\"1042\":1}}],[\"对mysql进行了全方位的强力支持\",{\"1\":{\"920\":1}}],[\"对已存在的localdate对象\",{\"1\":{\"895\":1}}],[\"对已存在的key继续添加数据\",{\"1\":{\"292\":1}}],[\"对给定参数执行操作\",{\"1\":{\"842\":1}}],[\"对给定参数执行此操作\",{\"1\":{\"839\":2}}],[\"对相同数据\",{\"1\":{\"702\":1}}],[\"对中文进行编码\",{\"1\":{\"1892\":1}}],[\"对中\",{\"1\":{\"534\":1}}],[\"对票数进行判断\",{\"1\":{\"471\":1}}],[\"对目录\",{\"1\":{\"400\":1}}],[\"对目录开始操作\",{\"1\":{\"390\":1}}],[\"对空值的判断\",{\"1\":{\"294\":1}}],[\"对当前这个链表进行树化\",{\"1\":{\"279\":1}}],[\"对于需要映射的参数使用\",{\"1\":{\"2825\":1}}],[\"对于需要传递的参数使用\",{\"1\":{\"2825\":1}}],[\"对于所有的请求都进行捕捉\",{\"1\":{\"2788\":1}}],[\"对于复杂的路径\",{\"1\":{\"2765\":1}}],[\"对于项目的功能都可以进行轻松快速的测试\",{\"1\":{\"2525\":1}}],[\"对于sqlsessionfactory对象\",{\"1\":{\"2907\":1}}],[\"对于sql中的敏感符号\",{\"1\":{\"2356\":1,\"2358\":1}}],[\"对于servlet的配置不在依赖于web\",{\"1\":{\"1848\":1}}],[\"对于某些驱动程序来说\",{\"1\":{\"2317\":1}}],[\"对于java来说\",{\"1\":{\"2197\":1}}],[\"对于简单的\",{\"1\":{\"2179\":1}}],[\"对于实体类中必须实现serializable\",{\"1\":{\"2093\":1}}],[\"对于前端工程师来说常用的就是vue\",{\"1\":{\"1943\":1}}],[\"对于我们我们来说\",{\"1\":{\"1937\":1}}],[\"对于单台数据库服务器来说\",{\"1\":{\"1757\":1}}],[\"对于原生的javascript的事件\",{\"1\":{\"1645\":1}}],[\"对于邮箱\",{\"1\":{\"1580\":1}}],[\"对于表单的提交\",{\"1\":{\"1580\":1}}],[\"对于应用程序的调试是最有用的\",{\"1\":{\"1284\":1}}],[\"对于多于连接池中连接数的请求\",{\"1\":{\"1272\":1}}],[\"对于多个消费者和多个生产者的情况\",{\"1\":{\"490\":1}}],[\"对于obsidian的设置也都是存储在\",{\"1\":{\"1158\":1}}],[\"对于设置有自增约束字段的值会从删除前表中该字段的最大值加1开始自增\",{\"1\":{\"976\":1}}],[\"对于自定义数据类型需要重新equals\",{\"1\":{\"869\":1}}],[\"对于可能出错的代码\",{\"1\":{\"671\":1}}],[\"对于重复的代码会提醒一起替换\",{\"1\":{\"628\":1}}],[\"对于已经键入的表达式\",{\"1\":{\"622\":1}}],[\"对于任意一个对象\",{\"1\":{\"570\":1}}],[\"对于任意一个类\",{\"1\":{\"570\":1}}],[\"对于关闭时\",{\"1\":{\"512\":1}}],[\"对于同一个锁\",{\"1\":{\"475\":1}}],[\"对于两个integer类型数值进行比较\",{\"1\":{\"364\":1}}],[\"对于基本类型的比较\",{\"1\":{\"272\":1}}],[\"对于无序的\",{\"1\":{\"228\":1}}],[\"对集合遍历查看\",{\"1\":{\"234\":2}}],[\"对应多个\",{\"1\":{\"2430\":1}}],[\"对应动作\",{\"1\":{\"2237\":1}}],[\"对应object的notifyall\",{\"1\":{\"475\":1}}],[\"对应object的notify\",{\"1\":{\"475\":1}}],[\"对应object的wait\",{\"1\":{\"475\":1}}],[\"对应位置元素取出后就置为null\",{\"1\":{\"328\":1}}],[\"对应的在实体类中添加一个isdel属性\",{\"1\":{\"2234\":1}}],[\"对应的mapper和实体对象\",{\"1\":{\"2217\":1}}],[\"对应的\",{\"1\":{\"2179\":1}}],[\"对应的键盘键名称\",{\"1\":{\"1668\":1}}],[\"对应的vue事件方法清单\",{\"1\":{\"1616\":1,\"1617\":1}}],[\"对应的容器类有两个\",{\"1\":{\"1594\":1}}],[\"对应的学生\",{\"1\":{\"1001\":1}}],[\"对应的真实结构如果是跳转结构\",{\"1\":{\"227\":1}}],[\"对应的真实结构如果是紧密结构\",{\"1\":{\"227\":1}}],[\"对应的就有了长链接\",{\"1\":{\"159\":1}}],[\"对应包装类\",{\"1\":{\"219\":1,\"360\":1}}],[\"对参数的数据类型get只接受ascii字符\",{\"1\":{\"188\":1}}],[\"对端可以通过帧中的表示知道该帧属于哪个请求\",{\"1\":{\"167\":1}}],[\"对前端工程师更友好\",{\"1\":{\"123\":1}}],[\"对其他文件不可见\",{\"1\":{\"101\":1}}],[\"对象功能的实现往往要依赖属性的值\",{\"1\":{\"2551\":1}}],[\"对象作为value存储起来map\",{\"1\":{\"2549\":1}}],[\"对象关系映射\",{\"1\":{\"2198\":1}}],[\"对象必须为key\",{\"1\":{\"2140\":1}}],[\"对象可以帮助我们发送异步请求\",{\"1\":{\"2114\":1}}],[\"对象增修改了数据\",{\"1\":{\"2077\":1}}],[\"对象增加了数据\",{\"1\":{\"2077\":1}}],[\"对象删除了数据\",{\"1\":{\"2077\":1}}],[\"对象初始化\",{\"1\":{\"2076\":1}}],[\"对象销毁了\",{\"1\":{\"2076\":1}}],[\"对象自身的创建和销毁的监听器\",{\"1\":{\"2069\":1}}],[\"对象之前被调用\",{\"1\":{\"2005\":1}}],[\"对象在窗口中含有一个框架\",{\"1\":{\"1451\":1}}],[\"对象相关的其他\",{\"1\":{\"1450\":1}}],[\"对象还实现了核心\",{\"1\":{\"1450\":1}}],[\"对象是全局对象\",{\"1\":{\"1450\":1}}],[\"对象简谱\",{\"1\":{\"2123\":1}}],[\"对象简单理解就是把浏览器抽象成一个对象\",{\"1\":{\"1450\":1}}],[\"对象简写\",{\"1\":{\"77\":1}}],[\"对象转换为字符串\",{\"1\":{\"1415\":3}}],[\"对象中属性的创建和消除的监听器\",{\"1\":{\"2069\":1}}],[\"对象中月份的一天\",{\"1\":{\"1415\":1}}],[\"对象中月份\",{\"1\":{\"1415\":1}}],[\"对象中月的某一天\",{\"1\":{\"1415\":1}}],[\"对象中的月份\",{\"1\":{\"1415\":1}}],[\"对象中的秒钟\",{\"1\":{\"1415\":1}}],[\"对象中的分钟\",{\"1\":{\"1415\":2}}],[\"对象中的毫秒\",{\"1\":{\"1415\":2}}],[\"对象中的小时\",{\"1\":{\"1415\":2}}],[\"对象中的年份\",{\"1\":{\"1415\":2}}],[\"对象中的属性和属性名一致就可以简写\",{\"1\":{\"77\":1}}],[\"对象返回四位数的年份\",{\"1\":{\"1415\":1}}],[\"对象返回周中的一天\",{\"1\":{\"1415\":1}}],[\"对象返回月中的一天\",{\"1\":{\"1415\":1}}],[\"对象返回月份\",{\"1\":{\"1415\":2}}],[\"对象返回一周中的某一天\",{\"1\":{\"1415\":1}}],[\"对象返回一个月中的某一天\",{\"1\":{\"1415\":1}}],[\"对象以四位数字返回年份\",{\"1\":{\"1415\":1}}],[\"对象来调用数据库存储过程\",{\"1\":{\"1255\":1}}],[\"对象来将参数化的\",{\"1\":{\"1255\":1}}],[\"对象来将\",{\"1\":{\"1255\":1}}],[\"对象当前持有的所有数据库锁\",{\"1\":{\"1255\":2}}],[\"对象的idclass\",{\"1\":{\"2552\":1}}],[\"对象的信息\",{\"1\":{\"2125\":1}}],[\"对象的字符串表示法\",{\"1\":{\"2125\":1}}],[\"对象的关系\",{\"0\":{\"2125\":1},\"1\":{\"2125\":1}}],[\"对象的创建\",{\"0\":{\"1897\":1}}],[\"对象的数组\",{\"1\":{\"1451\":1}}],[\"对象的数据库和\",{\"1\":{\"1255\":1}}],[\"对象的只读引用\",{\"1\":{\"1451\":4}}],[\"对象的\",{\"1\":{\"1450\":1}}],[\"对象的原始值\",{\"1\":{\"1415\":1}}],[\"对象的时间部分转换为字符串\",{\"1\":{\"1415\":2}}],[\"对象的日期部分转换为字符串\",{\"1\":{\"1415\":2}}],[\"对象的秒钟\",{\"1\":{\"1415\":1}}],[\"对象的秒数\",{\"1\":{\"1415\":1}}],[\"对象的分钟\",{\"1\":{\"1415\":2}}],[\"对象的毫秒\",{\"1\":{\"1415\":2}}],[\"对象的小时\",{\"1\":{\"1415\":2}}],[\"对象的名字必须传正确\",{\"1\":{\"562\":1}}],[\"对象时就指定了sql语句\",{\"1\":{\"1250\":1}}],[\"对象名\",{\"1\":{\"561\":1,\"1421\":1}}],[\"对象类\",{\"1\":{\"511\":1,\"512\":1,\"513\":1}}],[\"对象传输通讯\",{\"0\":{\"511\":1}}],[\"对象流\",{\"1\":{\"425\":1}}],[\"对象属于file类的对象\",{\"1\":{\"384\":1}}],[\"对象表示的毫秒数\",{\"1\":{\"371\":1}}],[\"对象\",{\"0\":{\"828\":1,\"1713\":1,\"2924\":1},\"1\":{\"142\":1,\"288\":2,\"366\":1,\"509\":1,\"513\":1,\"572\":1,\"587\":1,\"588\":1,\"827\":1,\"1223\":1,\"1255\":1,\"1259\":1,\"1352\":2,\"1415\":1,\"1451\":5,\"1452\":1,\"1626\":1,\"1628\":1,\"1630\":1,\"1631\":1,\"2214\":1}}],[\"对象拓展运算符\",{\"0\":{\"79\":1}}],[\"对象和原型\",{\"0\":{\"1402\":1,\"3095\":1},\"1\":{\"56\":1}}],[\"对不起\",{\"1\":{\"17\":3,\"19\":1,\"21\":1,\"27\":3}}],[\"数值型\",{\"0\":{\"1354\":1}}],[\"数值选择\",{\"0\":{\"1347\":1}}],[\"数值函数\",{\"0\":{\"1092\":1}}],[\"数字分组分隔符\",{\"1\":{\"2029\":1}}],[\"数字分组可以用来在每三个数字中插入一个逗号\",{\"1\":{\"2029\":1}}],[\"数字\",{\"1\":{\"1580\":1}}],[\"数字和\",{\"1\":{\"1362\":1}}],[\"数字类型都是number\",{\"1\":{\"1361\":1}}],[\"数字+\",{\"1\":{\"1171\":1}}],[\"数字形式表示小时\",{\"1\":{\"1093\":1}}],[\"数字形式表示月中的天数\",{\"1\":{\"1093\":1}}],[\"数字形式的小时\",{\"1\":{\"1093\":1}}],[\"数字表示月份\",{\"1\":{\"1093\":1}}],[\"数字越大优先级越大\",{\"1\":{\"457\":1}}],[\"数量\",{\"1\":{\"880\":3}}],[\"数组注入\",{\"1\":{\"2566\":1}}],[\"数组为array\",{\"1\":{\"2464\":1}}],[\"数组都引用了与当前\",{\"1\":{\"1450\":1}}],[\"数组排序\",{\"0\":{\"1401\":1}}],[\"数组的常用方法\",{\"0\":{\"1390\":1}}],[\"数组的使用\",{\"0\":{\"1381\":1,\"3094\":1},\"1\":{\"56\":1}}],[\"数组遍历\",{\"0\":{\"1387\":1}}],[\"数组元素和长度\",{\"0\":{\"1386\":1}}],[\"数组其他类型可以叫做复合数据类型\",{\"1\":{\"1352\":1}}],[\"数组某个位置内部的数组\",{\"1\":{\"311\":1}}],[\"数组不能扩容\",{\"1\":{\"311\":1}}],[\"数组并没有达到最大利用率就被扩容了\",{\"1\":{\"296\":1}}],[\"数组满了才扩容\",{\"1\":{\"296\":1}}],[\"数组扩容的界限值\",{\"1\":{\"294\":2}}],[\"数组+单向链表\",{\"1\":{\"294\":1}}],[\"数组+链表+红黑树\",{\"1\":{\"277\":1,\"311\":1}}],[\"数组+链表\",{\"1\":{\"277\":1}}],[\"数组是hashmap$node\",{\"1\":{\"282\":1}}],[\"数组table+双向链表\",{\"1\":{\"282\":1}}],[\"数组使用到了临界值12\",{\"1\":{\"280\":1}}],[\"数组长度为0\",{\"1\":{\"1991\":1}}],[\"数组长度\",{\"1\":{\"280\":1}}],[\"数组长度是16\",{\"1\":{\"280\":1}}],[\"数组存储\",{\"1\":{\"228\":1}}],[\"数组中元素的个数reentrantlock\",{\"1\":{\"330\":1}}],[\"数组中元素的个数\",{\"1\":{\"328\":1}}],[\"数组中的容量\",{\"1\":{\"303\":2}}],[\"数组中实际元素的数量是没有办法获取的\",{\"1\":{\"228\":1}}],[\"数组中只能存放同一种类型的数据\",{\"1\":{\"228\":1}}],[\"数组中只能存放这个类型的数据\",{\"1\":{\"228\":1}}],[\"数组一旦声明了类型以后\",{\"1\":{\"228\":1}}],[\"数组一旦指定了长度\",{\"1\":{\"228\":2}}],[\"数组\",{\"0\":{\"832\":1},\"1\":{\"225\":1,\"227\":2,\"228\":1,\"261\":1,\"302\":1,\"332\":1,\"333\":1,\"581\":1,\"827\":1,\"1389\":1}}],[\"数据转换工厂\",{\"1\":{\"2799\":1}}],[\"数据表的列名或者列别名\",{\"1\":{\"2437\":1}}],[\"数据源准备\",{\"0\":{\"2695\":1}}],[\"数据源配置文件\",{\"1\":{\"2666\":1}}],[\"数据源的一些定制信息\",{\"1\":{\"2301\":1}}],[\"数据源的提供者的\",{\"1\":{\"2301\":1}}],[\"数据源的\",{\"1\":{\"2301\":1}}],[\"数据源\",{\"0\":{\"2881\":1},\"1\":{\"2293\":1,\"2374\":1}}],[\"数据过滤方法\",{\"1\":{\"2155\":1}}],[\"数据回显使用原生js代码也比较繁琐\",{\"1\":{\"2129\":1}}],[\"数据处理起来会非常麻烦\",{\"1\":{\"2122\":1}}],[\"数据名\",{\"1\":{\"1978\":1,\"2022\":1}}],[\"数据接口规范流程\",{\"0\":{\"1942\":1}}],[\"数据如何应用\",{\"1\":{\"1808\":1}}],[\"数据存储等程序\",{\"1\":{\"1769\":1}}],[\"数据更新之后\",{\"1\":{\"1730\":1}}],[\"数据更新前\",{\"1\":{\"1730\":1}}],[\"数据更新不会引起视图的更新\",{\"1\":{\"1639\":1}}],[\"数据已经挂载\",{\"1\":{\"1730\":1}}],[\"数据挂载前\",{\"1\":{\"1730\":1}}],[\"数据管理中心\",{\"1\":{\"1616\":1,\"1617\":1}}],[\"数据动态变化和动画特效等\",{\"1\":{\"1372\":1}}],[\"数据和数据类型都显示\",{\"1\":{\"1352\":1}}],[\"数据访问\",{\"0\":{\"2530\":1},\"1\":{\"1262\":1,\"2530\":1}}],[\"数据在\",{\"1\":{\"1235\":1}}],[\"数据准备\",{\"0\":{\"1211\":1,\"2174\":1,\"2417\":1}}],[\"数据共享\",{\"1\":{\"1142\":1}}],[\"数据是重复的\",{\"1\":{\"1128\":1}}],[\"数据是​linkedhashmap$entry类型\",{\"1\":{\"282\":1}}],[\"数据还在\",{\"1\":{\"979\":1}}],[\"数据不存在\",{\"1\":{\"978\":1}}],[\"数据类型不同\",{\"1\":{\"1364\":1}}],[\"数据类型\",{\"0\":{\"1353\":1},\"1\":{\"958\":3}}],[\"数据类型和运算符\",{\"0\":{\"1351\":1,\"3092\":1},\"1\":{\"56\":1}}],[\"数据没有\",{\"1\":{\"956\":1}}],[\"数据控制语言\",{\"0\":{\"935\":1}}],[\"数据定义语言\",{\"0\":{\"934\":1}}],[\"数据定义和数据控制功能于一体\",{\"1\":{\"930\":1}}],[\"数据操作语言\",{\"0\":{\"933\":1}}],[\"数据操纵\",{\"1\":{\"930\":1}}],[\"数据查询语言\",{\"0\":{\"932\":1}}],[\"数据文件夹位置\",{\"1\":{\"923\":1}}],[\"数据发送使用数据包\",{\"1\":{\"499\":1}}],[\"数据链路层\",{\"1\":{\"495\":2}}],[\"数据信息等资源\",{\"1\":{\"492\":1}}],[\"数据\",{\"0\":{\"908\":1},\"1\":{\"348\":3,\"349\":3,\"1614\":1,\"2018\":1,\"2155\":1,\"2162\":1}}],[\"数据的总额依然匹配\",{\"1\":{\"2686\":1}}],[\"数据的名称\",{\"1\":{\"2018\":1}}],[\"数据的名字\",{\"1\":{\"1981\":1}}],[\"数据的获取\",{\"0\":{\"1898\":1}}],[\"数据的取值范围不同\",{\"1\":{\"942\":1}}],[\"数据的顺序一致\",{\"1\":{\"282\":1}}],[\"数据的读取操作\",{\"1\":{\"245\":1}}],[\"数据的写入操作\",{\"1\":{\"245\":1}}],[\"数据的状态\",{\"1\":{\"147\":2}}],[\"数据库和\",{\"0\":{\"2953\":1}}],[\"数据库和jdbc\",{\"0\":{\"10\":1},\"1\":{\"4\":1}}],[\"数据库相关依赖\",{\"0\":{\"2890\":1}}],[\"数据库连接\",{\"1\":{\"2756\":1}}],[\"数据库连接池\",{\"1\":{\"2186\":1,\"2500\":1}}],[\"数据库是允许多用户并发访问的\",{\"1\":{\"2693\":1}}],[\"数据库处于一致性状态\",{\"1\":{\"2686\":1}}],[\"数据库准备\",{\"0\":{\"2663\":1}}],[\"数据库链接\",{\"1\":{\"2582\":1}}],[\"数据库的连接信息\",{\"1\":{\"2501\":1}}],[\"数据库的权限\",{\"1\":{\"935\":1}}],[\"数据库层次\",{\"1\":{\"2440\":3}}],[\"数据库使用mysql数据库\",{\"1\":{\"2186\":1}}],[\"数据库表格中的每一个字段就是实体类的一个属性\",{\"1\":{\"1226\":1}}],[\"数据库表列类型\",{\"0\":{\"938\":1}}],[\"数据库厂商微软\",{\"1\":{\"1206\":1}}],[\"数据库厂商\",{\"0\":{\"1206\":1}}],[\"数据库默认隔离级别\",{\"1\":{\"1112\":1}}],[\"数据库名称\",{\"1\":{\"1156\":1}}],[\"数据库名\",{\"1\":{\"946\":1,\"948\":1,\"950\":1,\"951\":1,\"952\":1,\"958\":3,\"983\":1,\"1116\":2,\"1152\":1}}],[\"数据库定义语言\",{\"0\":{\"944\":1}}],[\"数据库经过几十年的发展\",{\"1\":{\"916\":1}}],[\"数据库类型\",{\"0\":{\"915\":1}}],[\"数据库系统还维护着满足特定查找算法的数据结构\",{\"1\":{\"1125\":1}}],[\"数据库系统\",{\"0\":{\"914\":1},\"1\":{\"914\":1}}],[\"数据库管理人员\",{\"1\":{\"930\":1}}],[\"数据库管理员和最终用户构成\",{\"1\":{\"914\":1}}],[\"数据库管理员\",{\"0\":{\"912\":1},\"1\":{\"912\":1}}],[\"数据库管理系统\",{\"0\":{\"910\":1},\"1\":{\"910\":1,\"914\":1}}],[\"数据库应用程序\",{\"0\":{\"911\":1},\"1\":{\"911\":1,\"914\":1}}],[\"数据库基本概念\",{\"0\":{\"907\":1}}],[\"数据库\",{\"0\":{\"909\":1},\"1\":{\"228\":1,\"909\":1,\"934\":1,\"1117\":1}}],[\"数据格式返回日期字符串\",{\"1\":{\"1415\":1}}],[\"数据格式\",{\"0\":{\"2117\":1,\"3150\":1},\"1\":{\"213\":1}}],[\"数据可以试试ascii字符也可以是字节型数据\",{\"1\":{\"181\":1}}],[\"数据被包含在请求体中\",{\"1\":{\"181\":1}}],[\"数据封装到bean中作为model模型贯穿三层架构\",{\"1\":{\"120\":1}}],[\"数据大屏\",{\"1\":{\"61\":1}}],[\"数据结构上的优化\",{\"1\":{\"295\":1}}],[\"数据结构\",{\"0\":{\"224\":1,\"301\":1,\"3009\":1},\"1\":{\"37\":1}}],[\"常规对list的操作\",{\"0\":{\"2566\":1}}],[\"常规注册实体类\",{\"1\":{\"2553\":1}}],[\"常规使用\",{\"0\":{\"2553\":1},\"1\":{\"2553\":1}}],[\"常量值1\",{\"1\":{\"1094\":2}}],[\"常量名\",{\"1\":{\"561\":1}}],[\"常量\",{\"1\":{\"561\":1}}],[\"常量在初始化完成赋值后不可以再次更改\",{\"1\":{\"74\":1}}],[\"常见系统修饰符\",{\"0\":{\"1668\":1}}],[\"常见\",{\"1\":{\"1369\":3}}],[\"常见终结方法包括count和foreach方法\",{\"1\":{\"861\":1}}],[\"常见的注解如下\",{\"1\":{\"2631\":1}}],[\"常见的应用服务\",{\"1\":{\"1735\":1}}],[\"常见的事件\",{\"0\":{\"1430\":1}}],[\"常见的对象有array\",{\"1\":{\"1403\":1}}],[\"常见的非关系型数据库管理系统有memcached\",{\"1\":{\"918\":1}}],[\"常见的数据库类型\",{\"0\":{\"916\":1}}],[\"常见的引用方式\",{\"1\":{\"827\":1}}],[\"常见的文档注解\",{\"0\":{\"537\":1}}],[\"常见api\",{\"0\":{\"386\":1,\"389\":1}}],[\"常见注解\",{\"0\":{\"2831\":1,\"3183\":1},\"1\":{\"217\":1}}],[\"常见状态码及含义\",{\"0\":{\"192\":1}}],[\"常见问题解决\",{\"0\":{\"1149\":1,\"1216\":1,\"3073\":1},\"1\":{\"52\":1}}],[\"常用\",{\"0\":{\"3036\":1}}],[\"常用注解\",{\"0\":{\"2222\":1}}],[\"常用注解与条件构造器\",{\"0\":{\"2221\":1,\"3157\":1},\"1\":{\"214\":1}}],[\"常用于统计在线人数和在线用户\",{\"1\":{\"2066\":1}}],[\"常用forward\",{\"1\":{\"1861\":1}}],[\"常用keycode\",{\"0\":{\"1665\":1}}],[\"常用对象\",{\"0\":{\"1403\":1}}],[\"常用快捷键\",{\"0\":{\"1159\":1}}],[\"常用命令预览\",{\"0\":{\"731\":1}}],[\"常用的逆向工程方式是通过数据库的表生成代码\",{\"1\":{\"2497\":1}}],[\"常用的基于javaee的三大开源框架\",{\"1\":{\"2197\":1}}],[\"常用的事件修饰符\",{\"0\":{\"1657\":1}}],[\"常用的调用方法\",{\"1\":{\"568\":1}}],[\"常用的api\",{\"0\":{\"324\":1}}],[\"常用属性\",{\"0\":{\"2725\":1},\"1\":{\"367\":1,\"368\":1}}],[\"常用方法子类season可以直接拿过来使用\",{\"1\":{\"562\":1}}],[\"常用方法\",{\"0\":{\"219\":1,\"251\":1,\"260\":1,\"278\":1,\"283\":1,\"292\":1,\"367\":1,\"382\":1,\"394\":1,\"431\":1,\"562\":1},\"1\":{\"300\":1,\"364\":1,\"367\":1,\"368\":1}}],[\"常用插件\",{\"0\":{\"2283\":1,\"3159\":1},\"1\":{\"214\":1}}],[\"常用api\",{\"0\":{\"582\":1,\"1405\":1,\"1408\":1,\"1411\":1,\"1415\":1,\"1432\":1,\"1435\":1,\"1438\":1,\"1441\":1},\"1\":{\"43\":1,\"2637\":1}}],[\"常用操作\",{\"0\":{\"26\":1}}],[\"常用类\",{\"0\":{\"38\":1,\"2962\":1},\"1\":{\"6\":1}}],[\"函数来连接参数和通配符\",{\"1\":{\"2407\":1}}],[\"函数的一个简化版本\",{\"1\":{\"2162\":1}}],[\"函数的使用\",{\"0\":{\"1368\":1}}],[\"函数返回的值将由jquery进一步处理\",{\"1\":{\"2147\":1,\"2155\":1}}],[\"函数标签库\",{\"1\":{\"2013\":1}}],[\"函数参数和返回值\",{\"0\":{\"1370\":1}}],[\"函数名=new\",{\"1\":{\"1369\":1}}],[\"函数名=function\",{\"1\":{\"1369\":1}}],[\"函数名\",{\"1\":{\"1369\":1}}],[\"函数定义的三种方式\",{\"0\":{\"1369\":1}}],[\"函数可以处理值为null如果列的值为null则返回默认值\",{\"1\":{\"1041\":1}}],[\"函数拼接\",{\"0\":{\"2407\":1},\"1\":{\"861\":5,\"2457\":1}}],[\"函数调用的是key键值类型自带的哈希函数\",{\"1\":{\"294\":1}}],[\"函数体\",{\"1\":{\"80\":1}}],[\"函数\",{\"0\":{\"1083\":1,\"3068\":1},\"1\":{\"52\":1,\"101\":1,\"934\":1,\"983\":1,\"1041\":1,\"1086\":1,\"1087\":1,\"1088\":1,\"1089\":1,\"1090\":1,\"1091\":1,\"1092\":1,\"1093\":1,\"1094\":1,\"1095\":1,\"2161\":1,\"2162\":1,\"2163\":1,\"2165\":1}}],[\"函数式接口的由来\",{\"0\":{\"835\":1}}],[\"函数式接口\",{\"0\":{\"834\":1,\"3057\":1},\"1\":{\"51\":1,\"835\":1}}],[\"接着另一个并发事务\",{\"1\":{\"2692\":1}}],[\"接着服务器端接收到请求后\",{\"1\":{\"2101\":1}}],[\"接着将请求交给servlet进行处理并生成响应\",{\"1\":{\"1994\":1}}],[\"接着执行后续的代码\",{\"1\":{\"467\":1}}],[\"接触绑定的指定事件\",{\"1\":{\"1572\":1}}],[\"接触绑定的所有事件\",{\"1\":{\"1572\":1}}],[\"接受反馈\",{\"1\":{\"516\":1,\"517\":1,\"518\":1}}],[\"接收响应的数据\",{\"1\":{\"2132\":2}}],[\"接收参数\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"接收shutdown指令的端口\",{\"1\":{\"1763\":1}}],[\"接收请求\",{\"1\":{\"546\":1}}],[\"接收端上线~\",{\"1\":{\"515\":1,\"516\":1,\"517\":1,\"518\":1}}],[\"接收数据\",{\"1\":{\"492\":1}}],[\"接收以后\",{\"1\":{\"19\":1}}],[\"接下来将使用一个登录案例来整合前面学的springmvc和mybatis等技术\",{\"1\":{\"2879\":1}}],[\"接下来我们将使用jackson包来处理\",{\"1\":{\"2875\":1}}],[\"接下来我们将简单学习一下\",{\"1\":{\"2808\":1}}],[\"接下来我们将简单的以druid连接池为例\",{\"1\":{\"2581\":1}}],[\"接下来我们详细了解一下\",{\"1\":{\"2713\":1}}],[\"接下来我们使用静态代理的方式创建一个代理类\",{\"1\":{\"2605\":1}}],[\"接下来我们创建一个查询所有数据的方法\",{\"1\":{\"2376\":1}}],[\"接下来我们继续学习对数据的增删改功能\",{\"1\":{\"2360\":1}}],[\"接下来我们就对比一下这些差异\",{\"1\":{\"1952\":1}}],[\"接下来我们就使用一下jquery中新的遍历方式\",{\"1\":{\"1574\":1}}],[\"接下来我们了解一下栈\",{\"1\":{\"302\":1}}],[\"接下来的表格中列出了这些字符\",{\"1\":{\"2029\":1}}],[\"接下来的其他操作和数据库故障不应该对其有任何影响\",{\"1\":{\"1102\":1}}],[\"接下来的一串与运算和异或运算\",{\"1\":{\"294\":1}}],[\"接口直接实现dointransaction\",{\"1\":{\"2702\":1}}],[\"接口环境\",{\"0\":{\"2631\":1}}],[\"接口是上下文模块的焦点\",{\"1\":{\"2532\":1}}],[\"接口或者继承\",{\"1\":{\"2509\":1}}],[\"接口的全限定名导入\",{\"1\":{\"2321\":1}}],[\"接口的使用\",{\"0\":{\"2251\":1}}],[\"接口中定义了此应用程序中将会用到的所有事务方法\",{\"1\":{\"1262\":1}}],[\"接口中定义的默认方法\",{\"1\":{\"817\":1}}],[\"接口中的两个方法都要将传入的bean返回\",{\"1\":{\"2572\":1}}],[\"接口中的抽象方法的名字需要与mapper\",{\"1\":{\"2376\":1}}],[\"接口中的方法参数列表由我们自己决定\",{\"1\":{\"2371\":1}}],[\"接口中的静态方法\",{\"1\":{\"821\":1}}],[\"接口中的默认方法有两中使用方式\",{\"1\":{\"818\":1}}],[\"接口中只能存在\",{\"1\":{\"814\":1}}],[\"接口名\",{\"1\":{\"817\":1,\"820\":1,\"821\":1}}],[\"接口名称\",{\"1\":{\"814\":2}}],[\"接口新增了\",{\"1\":{\"814\":1}}],[\"接口=实现类\",{\"1\":{\"480\":1}}],[\"接口\",{\"0\":{\"592\":1},\"1\":{\"427\":1,\"515\":1,\"516\":1,\"517\":1,\"518\":1,\"581\":1,\"1264\":1,\"2093\":1,\"2214\":1,\"2406\":1,\"2407\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2550\":1,\"2605\":1,\"2609\":1,\"2667\":1}}],[\"接口不能创建对象\",{\"1\":{\"219\":1}}],[\"接口增强\",{\"0\":{\"813\":1,\"3055\":1},\"1\":{\"51\":1}}],[\"宿主机直接链接到虚拟机中的环境配置\",{\"1\":{\"50\":1}}],[\"8900\",{\"1\":{\"2674\":2}}],[\"8+string\",{\"1\":{\"2593\":1}}],[\"8已经实现全部的jsr310\",{\"1\":{\"2508\":1}}],[\"8以前一直是个头疼的问题\",{\"1\":{\"2508\":1}}],[\"8编译开发\",{\"1\":{\"2269\":1}}],[\"8编码处理数据\",{\"1\":{\"1813\":1}}],[\"8编码为gbk即可\",{\"1\":{\"1810\":1}}],[\"8编码\",{\"1\":{\"1755\":1}}],[\"8f\",{\"1\":{\"2213\":1}}],[\"8e\",{\"1\":{\"2213\":1}}],[\"8<\",{\"1\":{\"2049\":1,\"2058\":1,\"2629\":1,\"2665\":1,\"2807\":1,\"2912\":1}}],[\"8443\",{\"1\":{\"1756\":1,\"1757\":1,\"1765\":1,\"1812\":1}}],[\"8及之前可用\",{\"1\":{\"1572\":1}}],[\"8岁的男孩儿李四正在睡觉\",{\"1\":{\"1424\":1,\"1425\":1}}],[\"8岁的李四正在吃牛角面包\",{\"1\":{\"1424\":1,\"1425\":1}}],[\"8kbps\",{\"1\":{\"1372\":1}}],[\"8d\",{\"1\":{\"1330\":2}}],[\"8来解析这个html文档\",{\"1\":{\"1293\":1}}],[\"8字符集的校对规则\",{\"1\":{\"1156\":1}}],[\"8字节\",{\"1\":{\"939\":1,\"940\":1}}],[\"8之后\",{\"1\":{\"814\":1}}],[\"8之前\",{\"1\":{\"814\":1,\"816\":1}}],[\"8新增api\",{\"1\":{\"378\":1}}],[\"8是如何进行数据迁移的\",{\"1\":{\"311\":1}}],[\"8是如何扩容的\",{\"1\":{\"311\":1}}],[\"8链表转红黑树的时机是什么\",{\"1\":{\"311\":1}}],[\"8实现的原理是什么\",{\"1\":{\"311\":1}}],[\"8解決了jdk1\",{\"1\":{\"311\":1}}],[\"8中新增了静态方法\",{\"1\":{\"819\":1}}],[\"8中的日期api\",{\"0\":{\"377\":1}}],[\"8中实现有什么差别\",{\"1\":{\"311\":1}}],[\"8中\",{\"1\":{\"295\":1}}],[\"8做了一些优化\",{\"1\":{\"295\":1}}],[\"8的增强\",{\"0\":{\"814\":1}}],[\"8的linkedlist的源码是一致的\",{\"1\":{\"263\":1}}],[\"8的区别\",{\"0\":{\"255\":1}}],[\"8时\",{\"1\":{\"255\":1,\"295\":2}}],[\"81\",{\"1\":{\"177\":1}}],[\"8020\",{\"1\":{\"1330\":2,\"2169\":1}}],[\"8005\",{\"1\":{\"1763\":1}}],[\"800\",{\"1\":{\"1211\":1}}],[\"800px\",{\"1\":{\"65\":1}}],[\"80px\",{\"1\":{\"1188\":1}}],[\"80\",{\"1\":{\"367\":2,\"368\":1,\"1505\":1,\"1976\":1,\"2022\":2,\"2023\":1}}],[\"8080\",{\"1\":{\"135\":1,\"138\":1,\"505\":1,\"506\":3,\"545\":1,\"1743\":1,\"1756\":1,\"1757\":1,\"1769\":1,\"1812\":1,\"1869\":1,\"1870\":1,\"2168\":4,\"2169\":2,\"2170\":2,\"2171\":2,\"2753\":1,\"2764\":1,\"2820\":1,\"2857\":1,\"2926\":3,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"8899\",{\"1\":{\"2363\":1,\"2366\":1,\"2369\":1,\"2453\":1,\"2456\":1,\"2672\":1}}],[\"8859\",{\"1\":{\"1801\":1,\"1814\":1}}],[\"888\",{\"1\":{\"1264\":2}}],[\"8888\",{\"1\":{\"88\":3,\"509\":2,\"510\":2,\"511\":2,\"512\":2,\"513\":2,\"515\":1,\"516\":2,\"517\":2,\"518\":2,\"1765\":1,\"1838\":2,\"1839\":3,\"1840\":3,\"1841\":4,\"1842\":4,\"2168\":1}}],[\"88\",{\"1\":{\"65\":1,\"888\":2}}],[\"822\",{\"1\":{\"374\":1}}],[\"82\",{\"1\":{\"65\":1}}],[\"8601日历系统\",{\"1\":{\"892\":1}}],[\"86\",{\"1\":{\"65\":1}}],[\"838\",{\"1\":{\"942\":2}}],[\"8388607\",{\"1\":{\"939\":1}}],[\"8388608\",{\"1\":{\"939\":1}}],[\"83\",{\"1\":{\"65\":1,\"234\":2}}],[\"85\",{\"1\":{\"65\":1}}],[\"8\",{\"0\":{\"254\":1,\"295\":1,\"711\":1},\"1\":{\"49\":3,\"65\":3,\"76\":1,\"234\":1,\"238\":1,\"277\":1,\"294\":3,\"327\":1,\"372\":1,\"375\":1,\"412\":1,\"418\":1,\"421\":1,\"422\":1,\"515\":2,\"516\":3,\"517\":3,\"518\":3,\"545\":1,\"674\":1,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"809\":1,\"810\":1,\"837\":1,\"896\":1,\"899\":1,\"921\":1,\"922\":1,\"923\":3,\"925\":1,\"972\":4,\"1001\":1,\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"1285\":1,\"1293\":3,\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1322\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":3,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1388\":1,\"1389\":1,\"1391\":1,\"1400\":3,\"1401\":2,\"1424\":1,\"1425\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1482\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1548\":1,\"1549\":2,\"1552\":2,\"1555\":2,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":2,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1631\":1,\"1690\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1775\":2,\"1776\":1,\"1791\":1,\"1793\":1,\"1795\":1,\"1801\":2,\"1806\":2,\"1811\":1,\"1812\":1,\"1813\":2,\"1831\":1,\"1834\":1,\"1856\":4,\"1860\":4,\"1870\":1,\"1892\":2,\"1893\":1,\"1907\":1,\"1908\":1,\"1927\":3,\"1928\":1,\"1951\":1,\"1952\":1,\"1960\":2,\"1972\":1,\"1976\":2,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":2,\"1989\":1,\"1990\":1,\"1991\":1,\"1997\":4,\"1999\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2047\":1,\"2052\":1,\"2055\":1,\"2058\":1,\"2060\":3,\"2075\":1,\"2088\":1,\"2092\":1,\"2094\":1,\"2096\":2,\"2114\":1,\"2115\":2,\"2120\":1,\"2121\":2,\"2124\":1,\"2128\":3,\"2131\":3,\"2132\":2,\"2155\":1,\"2159\":4,\"2166\":3,\"2169\":1,\"2170\":3,\"2171\":3,\"2176\":3,\"2187\":1,\"2267\":1,\"2278\":2,\"2279\":1,\"2293\":1,\"2312\":1,\"2332\":1,\"2374\":3,\"2485\":1,\"2487\":1,\"2501\":2,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2583\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":2,\"2746\":1,\"2750\":1,\"2757\":1,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2786\":1,\"2789\":1,\"2793\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2877\":1,\"2896\":1,\"2897\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1,\"2914\":3,\"2918\":1,\"2925\":1}}],[\"dynamic\",{\"1\":{\"2417\":2}}],[\"dtdmapper3\",{\"1\":{\"2279\":1,\"2374\":1,\"2918\":1}}],[\"dtd\",{\"1\":{\"2278\":3,\"2279\":2,\"2374\":5,\"2501\":3,\"2918\":2}}],[\"d+\",{\"1\":{\"1417\":1}}],[\"d5\",{\"1\":{\"1416\":2,\"1489\":1}}],[\"d4\",{\"1\":{\"1416\":11,\"1417\":1,\"1489\":1}}],[\"d3\",{\"1\":{\"1416\":2,\"1488\":1,\"1489\":1}}],[\"d2\",{\"1\":{\"1416\":2,\"1488\":1,\"1489\":1,\"1568\":5}}],[\"d1\",{\"1\":{\"1416\":2,\"1433\":2,\"1482\":1,\"1488\":2,\"1489\":1,\"1499\":2,\"1500\":2,\"1505\":3,\"1568\":7,\"1570\":8,\"1571\":10,\"1572\":13,\"1573\":3,\"1588\":6,\"1589\":5,\"1590\":6,\"1591\":3,\"2159\":3}}],[\"dname=\",{\"1\":{\"1221\":1,\"1226\":1,\"1253\":1,\"1264\":1,\"2414\":1}}],[\"dname\",{\"1\":{\"1211\":5,\"1222\":3,\"1226\":9,\"1227\":3,\"1253\":3,\"1264\":9,\"2276\":1,\"2409\":1,\"2410\":1,\"2414\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2435\":3,\"2503\":2,\"2679\":1,\"2680\":1}}],[\"dns随意填写常用dna\",{\"1\":{\"49\":1}}],[\"driven><\",{\"1\":{\"2898\":1,\"2901\":1}}],[\"driven>替代注解处理器和适配器的配置\",{\"1\":{\"2780\":1}}],[\"driven>\",{\"1\":{\"2780\":3,\"2898\":1,\"2901\":1,\"2903\":1,\"2908\":1}}],[\"driven\",{\"1\":{\"2706\":2,\"2780\":1,\"2789\":1,\"2799\":1,\"2903\":1,\"2908\":1}}],[\"driverclassname\",{\"1\":{\"2584\":1,\"2666\":1,\"2903\":1,\"2906\":1}}],[\"driverclassname=com\",{\"1\":{\"2187\":1}}],[\"driverclass=\",{\"1\":{\"2501\":1}}],[\"driverlist=\",{\"1\":{\"2301\":1}}],[\"driverlist=com\",{\"1\":{\"2298\":1}}],[\"driver来做代理\",{\"1\":{\"2298\":1}}],[\"driver为com\",{\"1\":{\"2297\":1}}],[\"driver=propertiesutil\",{\"1\":{\"1280\":1,\"1288\":1}}],[\"driver=com\",{\"1\":{\"1278\":1,\"2332\":1,\"2374\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"driver路径错误\",{\"1\":{\"1216\":1}}],[\"drivermanager\",{\"1\":{\"1215\":3,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":4,\"1256\":1,\"1264\":2,\"1266\":2,\"1274\":2,\"1280\":1,\"1288\":1,\"1976\":1}}],[\"drivermanager类\",{\"0\":{\"1256\":1},\"1\":{\"1206\":1}}],[\"driver\",{\"1\":{\"1215\":5,\"1216\":2,\"1217\":4,\"1219\":3,\"1220\":3,\"1221\":3,\"1222\":3,\"1227\":3,\"1231\":3,\"1234\":3,\"1235\":3,\"1242\":3,\"1252\":3,\"1253\":6,\"1264\":4,\"1266\":4,\"1274\":3,\"1278\":1,\"1280\":3,\"1288\":3,\"1976\":1,\"2187\":1,\"2278\":2,\"2298\":1,\"2301\":1,\"2332\":3,\"2374\":3,\"2501\":1,\"2583\":1,\"2584\":1,\"2666\":2,\"2897\":1,\"2903\":1,\"2906\":1}}],[\"drink\",{\"1\":{\"2609\":4}}],[\"druidmysql\",{\"1\":{\"2756\":1}}],[\"druiddatasource\",{\"1\":{\"2187\":1,\"2584\":1,\"2666\":1,\"2903\":1,\"2906\":1}}],[\"druid\",{\"1\":{\"2186\":2,\"2187\":1,\"2584\":1,\"2665\":1,\"2666\":1,\"2903\":1,\"2906\":1}}],[\"dropped\",{\"1\":{\"1558\":1}}],[\"drop\",{\"1\":{\"934\":1,\"952\":1,\"961\":1,\"966\":1,\"989\":1,\"995\":1,\"1001\":3,\"1008\":1,\"1013\":1,\"1017\":1,\"1021\":1,\"1116\":1,\"1119\":1,\"1136\":1,\"1141\":1,\"1147\":1,\"2182\":1}}],[\"dump\",{\"1\":{\"2274\":1}}],[\"duplicate\",{\"1\":{\"1216\":1}}],[\"due\",{\"1\":{\"1198\":1}}],[\"durability\",{\"0\":{\"2688\":1},\"1\":{\"1102\":1,\"2684\":1}}],[\"duration计算时间差\",{\"1\":{\"899\":1}}],[\"duration\",{\"1\":{\"892\":1,\"899\":4}}],[\"dcloud\",{\"1\":{\"1327\":1}}],[\"dcl用来授予或回收访问\",{\"1\":{\"935\":1}}],[\"dcl\",{\"0\":{\"935\":1,\"1114\":1}}],[\"dml操作错误\",{\"1\":{\"1286\":1}}],[\"dml和dql执行完毕后\",{\"1\":{\"1271\":1}}],[\"dml主要用于对数据库中的数据进行增加\",{\"1\":{\"933\":1}}],[\"dml\",{\"0\":{\"933\":1,\"968\":1}}],[\"dbtype\",{\"1\":{\"2285\":1}}],[\"dbutil\",{\"1\":{\"1286\":1}}],[\"dbutils<\",{\"1\":{\"683\":2}}],[\"db2tables\",{\"1\":{\"2501\":1}}],[\"db2无论稳定性\",{\"1\":{\"919\":1}}],[\"db2是ibm公司著名的关系型数据库产品\",{\"1\":{\"919\":1}}],[\"db2\",{\"1\":{\"917\":1,\"919\":1,\"2179\":1}}],[\"db2等也是有很大优势的\",{\"1\":{\"920\":1}}],[\"db2等\",{\"1\":{\"910\":1}}],[\"dbs\",{\"1\":{\"914\":1}}],[\"dba\",{\"1\":{\"912\":1,\"930\":1}}],[\"dbas\",{\"1\":{\"911\":1}}],[\"dbms直接运行编译后的sql语句\",{\"1\":{\"1250\":1}}],[\"dbms总是需要校验sql语句的语法格式是否正确\",{\"1\":{\"1250\":1}}],[\"dbms\",{\"1\":{\"910\":1,\"930\":1}}],[\"db\",{\"1\":{\"909\":1,\"930\":1,\"1156\":3,\"2225\":1,\"2229\":1,\"2235\":3,\"2334\":2}}],[\"dvcs\",{\"1\":{\"721\":1}}],[\"d类ip地址\",{\"1\":{\"493\":1}}],[\"dduser\",{\"1\":{\"1841\":1,\"1842\":1}}],[\"ddl主要用针对是数据库对象\",{\"1\":{\"934\":1}}],[\"ddl\",{\"0\":{\"934\":1,\"944\":1}}],[\"ddl和dml\",{\"0\":{\"943\":1},\"1\":{\"52\":1}}],[\"ddd\",{\"1\":{\"337\":4}}],[\"ddddd\",{\"1\":{\"260\":4}}],[\"dd\",{\"1\":{\"265\":1,\"266\":1,\"300\":1,\"374\":1,\"380\":2,\"891\":1,\"897\":1,\"942\":3,\"1198\":1,\"1285\":1,\"1287\":1,\"1417\":1,\"2087\":1,\"2128\":1,\"2166\":1,\"2298\":1,\"2308\":1,\"2312\":2,\"2374\":1,\"2757\":1,\"2798\":2,\"2799\":1,\"2896\":1}}],[\"dinnerproxy\",{\"1\":{\"2609\":3}}],[\"dinner\",{\"1\":{\"2609\":11}}],[\"di处理的是对象的属性赋值和互相依赖的关系\",{\"1\":{\"2551\":1}}],[\"di\",{\"0\":{\"2551\":1},\"1\":{\"2532\":1,\"2551\":1}}],[\"diskexpirythreadintervalseconds=\",{\"1\":{\"2485\":1}}],[\"dispatcherservlet会将调用单元方法的形参名作为请求数据的键名获取请求数据\",{\"1\":{\"2794\":1}}],[\"dispatcherservlet在其service方法中将请求数据根据需求从request对象中获取出来后\",{\"1\":{\"2794\":1}}],[\"dispatcherservlet中的service方法直接将此次请求的request对象传递给调用的单元方法即可\",{\"1\":{\"2793\":1}}],[\"dispatcherservlet未能收到正确的controller处理单元位置\",{\"1\":{\"2788\":1}}],[\"dispatcherservlet此时捕捉到资源请求\",{\"1\":{\"2788\":1}}],[\"dispatcherservlet发现是jsp文件\",{\"1\":{\"2788\":1}}],[\"dispatcherservlet\",{\"0\":{\"2770\":1},\"1\":{\"2770\":2}}],[\"dispatcherservlet将view对象渲染view对象为视图层\",{\"1\":{\"2768\":1}}],[\"dispatcherservlet再次携带modelandview对象请求viewresolver视图解析器解析\",{\"1\":{\"2768\":1}}],[\"dispatcherservlet根据handlermapping处理器映射器反馈的位置\",{\"1\":{\"2768\":1}}],[\"dispatcherservlet查询handlermapping处理器映射器中当前请求的位置\",{\"1\":{\"2768\":1}}],[\"dispatcherservlet<\",{\"1\":{\"2759\":1,\"2910\":1}}],[\"disposition\",{\"1\":{\"1807\":2,\"1814\":1}}],[\"displayname\",{\"1\":{\"1849\":1}}],[\"displaystate\",{\"1\":{\"1695\":2}}],[\"display\",{\"1\":{\"1579\":3,\"1586\":3,\"1588\":1,\"1589\":1,\"1590\":1,\"1638\":1,\"1695\":3,\"1698\":1}}],[\"disabled生效机制\",{\"1\":{\"1701\":2}}],[\"disabled\",{\"1\":{\"1333\":1,\"1555\":5}}],[\"disabled=\",{\"1\":{\"1333\":1,\"1555\":1,\"1701\":2}}],[\"disabled禁用\",{\"1\":{\"1333\":1}}],[\"distrubute\",{\"1\":{\"1209\":1}}],[\"distributed\",{\"1\":{\"721\":1}}],[\"distinct前面不能先出现列名\",{\"1\":{\"1026\":1}}],[\"distinct\",{\"0\":{\"869\":1},\"1\":{\"869\":3,\"1026\":1}}],[\"dist\",{\"1\":{\"114\":1}}],[\"dist2\",{\"1\":{\"98\":3}}],[\"dist1\",{\"1\":{\"98\":3}}],[\"did\",{\"1\":{\"736\":1}}],[\"diff\",{\"1\":{\"729\":1}}],[\"differ\",{\"1\":{\"294\":1}}],[\"div2\",{\"1\":{\"1573\":5}}],[\"div02\",{\"1\":{\"1535\":4}}],[\"div01\",{\"1\":{\"1535\":4}}],[\"div下面的所有h1标签样式都会改变\",{\"1\":{\"1513\":1}}],[\"div属于块级元素\",{\"1\":{\"1512\":1}}],[\"div\",{\"1\":{\"1499\":1,\"1500\":1,\"1501\":1,\"1512\":1,\"1513\":1,\"1528\":1,\"1548\":1,\"1552\":1,\"2651\":1,\"2652\":1,\"2653\":1}}],[\"div1=document\",{\"1\":{\"1572\":1}}],[\"div1\",{\"1\":{\"1496\":3,\"1497\":3,\"1505\":9,\"1572\":1,\"1573\":4}}],[\"div标签的原始内容\",{\"1\":{\"150\":3}}],[\"divide\",{\"1\":{\"102\":2}}],[\"div>是整个vue项目的根标签\",{\"1\":{\"1690\":1}}],[\"div>h1\",{\"1\":{\"1513\":1}}],[\"div>\",{\"1\":{\"65\":1,\"146\":1,\"149\":1,\"150\":3,\"1433\":1,\"1482\":1,\"1488\":3,\"1489\":5,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1505\":1,\"1512\":2,\"1513\":1,\"1521\":16,\"1523\":4,\"1524\":4,\"1525\":5,\"1528\":1,\"1529\":2,\"1533\":4,\"1534\":4,\"1535\":6,\"1536\":1,\"1548\":1,\"1552\":4,\"1568\":2,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1579\":3,\"1586\":3,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":2,\"1602\":9,\"1606\":6,\"1609\":10,\"1614\":1,\"1616\":1,\"1617\":1,\"1620\":1,\"1621\":1,\"1622\":2,\"1624\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1656\":3,\"1658\":4,\"1659\":4,\"1660\":1,\"1661\":4,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1690\":1,\"1691\":1,\"1695\":5,\"1698\":2,\"1701\":1,\"1704\":1,\"1707\":1,\"1708\":1,\"1711\":2,\"1712\":2,\"1713\":2,\"1715\":2,\"1718\":1,\"1730\":1,\"2159\":2}}],[\"dirty\",{\"0\":{\"2690\":1}}],[\"directive\",{\"1\":{\"1957\":1}}],[\"directory>\",{\"1\":{\"2505\":2}}],[\"directory=\",{\"1\":{\"2092\":1}}],[\"directory\",{\"1\":{\"676\":1,\"728\":1,\"729\":1}}],[\"dirname\",{\"1\":{\"114\":2}}],[\"dir\",{\"1\":{\"98\":2}}],[\"d\",{\"0\":{\"2951\":2,\"2953\":1,\"2968\":1,\"2972\":1,\"2973\":2,\"2976\":1,\"3053\":1,\"3064\":3,\"3066\":1,\"3067\":1,\"3069\":1,\"3080\":1,\"3081\":1,\"3084\":1,\"3085\":1,\"3099\":1,\"3107\":1,\"3175\":1},\"1\":{\"94\":1,\"98\":2,\"303\":5,\"357\":15,\"371\":8,\"372\":4,\"374\":2,\"375\":2,\"384\":2,\"385\":1,\"387\":6,\"388\":1,\"390\":3,\"405\":3,\"408\":2,\"409\":2,\"412\":4,\"415\":2,\"418\":2,\"421\":2,\"422\":2,\"425\":1,\"428\":2,\"431\":1,\"674\":3,\"1093\":2,\"1285\":1,\"1287\":2,\"1363\":4,\"1364\":4,\"1406\":2,\"1414\":4,\"1584\":7,\"1585\":2,\"1586\":1,\"1609\":12,\"1747\":1,\"1768\":1,\"1975\":1,\"1976\":1,\"2022\":1,\"2023\":1,\"2030\":2,\"2087\":1,\"2092\":1,\"2293\":2,\"2308\":1,\"2312\":3,\"2374\":1,\"2423\":1,\"2425\":1,\"2426\":3,\"2428\":3,\"2485\":1,\"2487\":1,\"2757\":1,\"2896\":1}}],[\"d参数将依赖添加到devdependencies节点\",{\"1\":{\"94\":1}}],[\"deregisterdrivers=true\",{\"1\":{\"2298\":1}}],[\"deactivation\",{\"1\":{\"1777\":1}}],[\"deadline\",{\"1\":{\"479\":2}}],[\"deeppink\",{\"1\":{\"1470\":1}}],[\"debug查看源码的切入点是\",{\"1\":{\"2517\":1}}],[\"debug=\",{\"1\":{\"2487\":1}}],[\"debug\",{\"1\":{\"1286\":1,\"1288\":1,\"2298\":1,\"2301\":3,\"2312\":2,\"2487\":3,\"2757\":2}}],[\"debug03\",{\"1\":{\"279\":1}}],[\"denied\",{\"1\":{\"1216\":1}}],[\"declaringtypename\",{\"1\":{\"2651\":3}}],[\"declarpointcut\",{\"1\":{\"2635\":3}}],[\"declaredmethods\",{\"1\":{\"591\":2}}],[\"declaredfields\",{\"1\":{\"588\":2}}],[\"declaredconstructor\",{\"1\":{\"585\":2}}],[\"declaredconstructors\",{\"1\":{\"585\":2}}],[\"declared\",{\"1\":{\"73\":1}}],[\"declare\",{\"1\":{\"65\":1}}],[\"decode\",{\"1\":{\"1889\":1,\"1892\":1}}],[\"december\",{\"1\":{\"893\":2}}],[\"dec\",{\"1\":{\"891\":1}}],[\"details\",{\"1\":{\"845\":1}}],[\"deployed\",{\"1\":{\"1777\":1}}],[\"deployment选项\",{\"1\":{\"1777\":1}}],[\"deptbatchdelete\",{\"1\":{\"2676\":5,\"2680\":1}}],[\"deptbatchupdate\",{\"1\":{\"2676\":5,\"2679\":1,\"2680\":1}}],[\"deptbatchadd\",{\"1\":{\"2676\":5,\"2678\":2,\"2679\":1}}],[\"deptbyid\",{\"1\":{\"2413\":1,\"2414\":3}}],[\"deptexample\",{\"1\":{\"2503\":4}}],[\"dept2\",{\"1\":{\"2475\":1}}],[\"deptmap\",{\"1\":{\"2422\":2}}],[\"deptmapper\",{\"0\":{\"2279\":1},\"1\":{\"2275\":1,\"2278\":1,\"2279\":1,\"2409\":6,\"2410\":6,\"2413\":6,\"2414\":7,\"2415\":6,\"2422\":6,\"2428\":2,\"2435\":3,\"2475\":4,\"2503\":2}}],[\"dept在数据库中存在dname字段\",{\"1\":{\"2422\":1}}],[\"deptid\",{\"1\":{\"2413\":1}}],[\"deptlist\",{\"1\":{\"2282\":3,\"2348\":2,\"2422\":2,\"2503\":2}}],[\"dept1==dept2\",{\"1\":{\"2475\":1}}],[\"dept1s\",{\"1\":{\"2428\":2,\"2431\":2}}],[\"dept1\",{\"1\":{\"1264\":2,\"2428\":2,\"2475\":1}}],[\"deptdao\",{\"1\":{\"1264\":6,\"1267\":1,\"2539\":2,\"2540\":3,\"2542\":1,\"2543\":5,\"2546\":6,\"2548\":1,\"2549\":1,\"2550\":3,\"2676\":8}}],[\"deptdaoimpl2\",{\"1\":{\"1267\":1}}],[\"deptdaoimpl\",{\"1\":{\"1263\":1,\"1264\":2,\"2539\":1,\"2540\":1,\"2542\":1,\"2546\":1,\"2548\":1,\"2549\":1,\"2676\":2,\"2678\":1,\"2679\":1,\"2680\":1}}],[\"deptdao>\",{\"1\":{\"1263\":1}}],[\"deptserviceimpl\",{\"1\":{\"2676\":2}}],[\"deptservice\",{\"1\":{\"2676\":3,\"2678\":4,\"2679\":4,\"2680\":4}}],[\"depts\",{\"1\":{\"1227\":4,\"2676\":10,\"2678\":7,\"2679\":7,\"2680\":2}}],[\"deptslist\",{\"1\":{\"1227\":2}}],[\"deptnos\",{\"1\":{\"2676\":5,\"2680\":5}}],[\"deptno<\",{\"1\":{\"2462\":1}}],[\"deptno=resultset\",{\"1\":{\"1976\":1}}],[\"deptno=\",{\"1\":{\"1220\":1,\"1221\":1,\"1226\":1,\"1253\":3,\"1264\":2,\"1267\":2,\"2414\":1,\"2415\":1,\"2435\":1,\"2679\":1,\"2680\":1}}],[\"deptno字段\",{\"1\":{\"1211\":1}}],[\"deptno\",{\"1\":{\"1211\":25,\"1222\":3,\"1226\":9,\"1227\":3,\"1253\":5,\"1264\":9,\"1976\":3,\"2025\":1,\"2031\":1,\"2276\":1,\"2356\":2,\"2357\":1,\"2358\":2,\"2362\":1,\"2374\":1,\"2388\":2,\"2389\":2,\"2390\":4,\"2394\":2,\"2395\":1,\"2398\":2,\"2401\":2,\"2402\":2,\"2403\":2,\"2409\":3,\"2410\":2,\"2413\":2,\"2414\":1,\"2415\":2,\"2422\":2,\"2423\":2,\"2425\":8,\"2426\":3,\"2428\":11,\"2431\":2,\"2435\":11,\"2444\":3,\"2447\":3,\"2450\":3,\"2453\":3,\"2456\":3,\"2462\":1,\"2503\":2,\"2667\":6,\"2673\":3,\"2674\":1}}],[\"dept\",{\"1\":{\"1211\":11,\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1226\":4,\"1227\":8,\"1231\":1,\"1235\":1,\"1253\":4,\"1263\":3,\"1264\":28,\"1267\":15,\"2276\":1,\"2279\":2,\"2282\":4,\"2326\":2,\"2409\":9,\"2410\":9,\"2413\":4,\"2414\":5,\"2415\":1,\"2422\":2,\"2423\":1,\"2425\":6,\"2426\":1,\"2428\":1,\"2435\":10,\"2475\":2,\"2501\":2,\"2503\":1,\"2579\":7,\"2678\":8,\"2679\":9,\"2680\":6}}],[\"depth\",{\"1\":{\"845\":1}}],[\"department\",{\"1\":{\"1082\":1,\"1211\":1,\"1219\":2,\"1221\":2,\"1253\":6}}],[\"dependencies\",{\"1\":{\"1687\":1}}],[\"dependencies>\",{\"1\":{\"680\":1,\"683\":1,\"688\":1,\"714\":2,\"715\":2,\"2186\":1,\"2267\":1,\"2374\":1,\"2500\":2,\"2538\":1,\"2614\":1,\"2629\":1,\"2665\":1,\"2748\":1,\"2756\":1}}],[\"dependency\",{\"1\":{\"2551\":1}}],[\"dependencymanagement>\",{\"1\":{\"714\":1}}],[\"dependency>\",{\"1\":{\"680\":1,\"683\":4,\"685\":1,\"688\":1,\"700\":3,\"714\":2,\"715\":1,\"2186\":7,\"2267\":4,\"2292\":2,\"2296\":1,\"2307\":1,\"2311\":1,\"2374\":5,\"2484\":2,\"2500\":4,\"2538\":2,\"2582\":2,\"2614\":1,\"2629\":7,\"2665\":11,\"2748\":2,\"2756\":14,\"2875\":1,\"2889\":3,\"2890\":5,\"2891\":6,\"2892\":2,\"2893\":2,\"2894\":2}}],[\"deprecated\",{\"0\":{\"542\":1},\"1\":{\"542\":2}}],[\"destoryuser\",{\"1\":{\"2571\":2,\"2574\":1}}],[\"destory\",{\"1\":{\"1825\":1,\"2001\":1}}],[\"destroy\",{\"1\":{\"545\":1,\"546\":1,\"1817\":1,\"1822\":1,\"1825\":1,\"1998\":1,\"2001\":1,\"2005\":1,\"2047\":2,\"2052\":2,\"2057\":1,\"2063\":1,\"2571\":1,\"2574\":1}}],[\"desc\",{\"1\":{\"937\":1,\"964\":1,\"1039\":1,\"2247\":1,\"2254\":1,\"2299\":1}}],[\"description>\",{\"1\":{\"2186\":1}}],[\"description\",{\"1\":{\"92\":1,\"1293\":1,\"1683\":1,\"1849\":1,\"1897\":1,\"1898\":1,\"2276\":1,\"2374\":1}}],[\"deque<string>\",{\"1\":{\"357\":1}}],[\"deque<e>\",{\"1\":{\"357\":1}}],[\"deque是具备的\",{\"1\":{\"357\":1}}],[\"dequeue\",{\"1\":{\"328\":1,\"338\":1}}],[\"delval\",{\"1\":{\"2234\":1}}],[\"del>\",{\"1\":{\"1187\":1,\"1303\":2}}],[\"delect\",{\"0\":{\"974\":1,\"975\":1}}],[\"deleterestful\",{\"1\":{\"2830\":1}}],[\"deleterows\",{\"1\":{\"2208\":2,\"2209\":2,\"2210\":2}}],[\"delete语句才会刷新\",{\"1\":{\"2481\":1}}],[\"delete在操作是会清空整个namespace的缓存\",{\"1\":{\"2480\":1}}],[\"delete>\",{\"1\":{\"2368\":1,\"2415\":1}}],[\"deleteemp\",{\"1\":{\"2367\":1,\"2368\":1,\"2369\":1,\"2667\":5,\"2674\":2}}],[\"deleted\",{\"1\":{\"2240\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2247\":1,\"2248\":1}}],[\"deleted=0\",{\"1\":{\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2245\":1,\"2246\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2250\":1}}],[\"deleted=1\",{\"1\":{\"2239\":1}}],[\"deletedept\",{\"1\":{\"1264\":3,\"1267\":1,\"2415\":4}}],[\"deleteuser3\",{\"1\":{\"2210\":1}}],[\"deleteuser2\",{\"1\":{\"2209\":1}}],[\"deleteuser1\",{\"1\":{\"2208\":1}}],[\"deletebymap\",{\"0\":{\"2210\":1},\"1\":{\"2210\":1}}],[\"deletebyid\",{\"0\":{\"2208\":1},\"1\":{\"2208\":1}}],[\"deletebatchids\",{\"0\":{\"2209\":1},\"1\":{\"2209\":1}}],[\"delete或者backspace\",{\"1\":{\"1665\":1}}],[\"delete掉从表的匹配记录\",{\"1\":{\"1003\":1}}],[\"delete记录时\",{\"1\":{\"1003\":2}}],[\"delete操作\",{\"1\":{\"1003\":1}}],[\"delete操作删除表中记录后\",{\"1\":{\"976\":1}}],[\"delete操作执行成功后会返回已删除的行数\",{\"1\":{\"976\":1}}],[\"delete操作可以回滚\",{\"1\":{\"976\":1}}],[\"delete操作是将表中所有记录一条一条删除直到删除完\",{\"1\":{\"976\":1}}],[\"delete为数据操作语言dml\",{\"1\":{\"976\":1}}],[\"delete和truncate的区别\",{\"1\":{\"976\":1}}],[\"deletecharat\",{\"1\":{\"395\":1,\"396\":1}}],[\"delete\",{\"0\":{\"184\":1},\"1\":{\"386\":2,\"387\":1,\"389\":2,\"390\":1,\"395\":1,\"396\":1,\"617\":1,\"933\":1,\"967\":1,\"973\":1,\"975\":1,\"1000\":1,\"1001\":5,\"1116\":1,\"1220\":1,\"1233\":1,\"1253\":1,\"1264\":1,\"1267\":1,\"1665\":1,\"2155\":1,\"2172\":1,\"2179\":1,\"2183\":1,\"2235\":3,\"2239\":2,\"2336\":1,\"2368\":1,\"2369\":1,\"2415\":1,\"2417\":2,\"2674\":1,\"2827\":1,\"2830\":4,\"2843\":1}}],[\"delayed\",{\"1\":{\"356\":3}}],[\"delayqueue<user>\",{\"1\":{\"356\":2}}],[\"delayqueue是一个无界的blockingqueue\",{\"1\":{\"354\":1}}],[\"delayqueue\",{\"0\":{\"353\":1},\"1\":{\"356\":5}}],[\"demo09\",{\"1\":{\"876\":1}}],[\"demo08\",{\"1\":{\"875\":1}}],[\"demo07\",{\"1\":{\"874\":1}}],[\"demo06\",{\"1\":{\"832\":1,\"873\":2}}],[\"demo05\",{\"1\":{\"831\":1}}],[\"demo04\",{\"1\":{\"594\":1,\"830\":1,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":1,\"868\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":1}}],[\"demo02\",{\"1\":{\"568\":1,\"581\":1,\"588\":1,\"828\":1,\"859\":2}}],[\"demo03\",{\"1\":{\"511\":1,\"568\":1,\"591\":1,\"829\":1,\"860\":1}}],[\"demo01\",{\"1\":{\"412\":1,\"568\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":2,\"585\":1,\"825\":1,\"826\":2,\"856\":2}}],[\"democopy\",{\"1\":{\"409\":1,\"412\":2,\"415\":1,\"418\":1,\"421\":1}}],[\"demo2\",{\"1\":{\"239\":1,\"240\":2}}],[\"demo\",{\"0\":{\"1529\":1,\"1808\":1,\"3081\":1,\"3116\":1},\"1\":{\"239\":1,\"241\":1,\"244\":1,\"386\":5,\"387\":13,\"389\":5,\"408\":1,\"409\":1,\"412\":2,\"415\":1,\"418\":1,\"421\":1,\"422\":1,\"685\":1,\"1779\":1,\"1838\":5,\"1839\":4,\"1840\":3,\"1841\":4,\"1842\":4}}],[\"demo演示\",{\"0\":{\"113\":1}}],[\"devdependencies\",{\"1\":{\"1687\":1}}],[\"devdependencies节点\",{\"1\":{\"94\":1}}],[\"development\",{\"1\":{\"2278\":2,\"2374\":2}}],[\"developer\",{\"1\":{\"922\":1}}],[\"develop\",{\"0\":{\"803\":1}}],[\"dev\",{\"1\":{\"94\":1,\"98\":1,\"114\":2,\"115\":1,\"921\":1,\"1616\":1,\"1684\":1,\"2332\":1,\"2374\":1}}],[\"devide\",{\"1\":{\"32\":3}}],[\"deferredloads\",{\"1\":{\"2493\":2}}],[\"deferredload\",{\"1\":{\"2493\":3}}],[\"definition\",{\"0\":{\"934\":1}}],[\"defined\",{\"1\":{\"73\":1}}],[\"def\",{\"1\":{\"392\":1}}],[\"deflate\",{\"1\":{\"177\":1}}],[\"defaultsqlsession类的update\",{\"1\":{\"2517\":1}}],[\"defaults\",{\"1\":{\"2517\":1}}],[\"defaultstatus\",{\"1\":{\"1451\":1}}],[\"defaultcache标签各属性说明\",{\"1\":{\"2485\":1}}],[\"defaultcache>\",{\"1\":{\"2485\":1}}],[\"default=\",{\"1\":{\"2020\":4,\"2278\":1,\"2374\":1}}],[\"defaulthost\",{\"1\":{\"1766\":1}}],[\"defaulthost=\",{\"1\":{\"1766\":1}}],[\"default里面罗列\",{\"1\":{\"1704\":1}}],[\"default方式\",{\"1\":{\"1003\":1}}],[\"default\",{\"0\":{\"709\":1,\"1018\":1,\"2719\":1},\"1\":{\"65\":1,\"109\":1,\"294\":5,\"817\":2,\"838\":1,\"841\":2,\"846\":3,\"859\":1,\"922\":1,\"923\":2,\"937\":8,\"965\":8,\"981\":1,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1154\":1,\"1156\":4,\"1239\":4,\"1366\":1,\"1691\":1,\"1704\":2,\"1707\":1,\"1708\":1,\"1711\":2,\"1712\":2,\"1713\":4,\"1715\":2,\"2030\":4,\"2161\":1,\"2165\":1,\"2182\":3,\"2301\":1,\"2334\":2,\"2417\":1,\"2555\":1,\"2588\":2,\"2592\":2,\"2674\":1,\"2678\":1,\"2695\":3,\"2710\":1,\"2881\":1}}],[\"danger\",{\"1\":{\"1564\":1}}],[\"dark\",{\"1\":{\"1564\":1}}],[\"darkseagreen\",{\"1\":{\"1319\":1}}],[\"darcs\",{\"1\":{\"723\":1}}],[\"dallas\",{\"1\":{\"1211\":1}}],[\"dayname\",{\"1\":{\"1093\":1}}],[\"dayofweek\",{\"1\":{\"1093\":1}}],[\"day\",{\"1\":{\"375\":1,\"376\":1,\"1093\":5,\"1198\":1,\"1414\":1}}],[\"dat\",{\"0\":{\"371\":1}}],[\"databind<\",{\"1\":{\"2875\":1,\"2891\":1}}],[\"databasename\",{\"1\":{\"2301\":1}}],[\"databasedialectbooleanformat=boolean\",{\"1\":{\"2301\":1}}],[\"databasedialectdateformat=dd\",{\"1\":{\"2301\":1}}],[\"databases\",{\"1\":{\"926\":1,\"947\":1}}],[\"database\",{\"1\":{\"909\":1,\"910\":1,\"911\":1,\"912\":1,\"914\":1,\"922\":1,\"946\":1,\"948\":1,\"949\":1,\"950\":1,\"952\":1,\"1095\":1,\"1152\":1,\"1156\":3,\"1205\":1}}],[\"data是ajax返回的原始数据\",{\"1\":{\"2147\":1,\"2155\":1}}],[\"data是一个函数\",{\"1\":{\"1704\":1}}],[\"datafilter\",{\"0\":{\"2147\":1},\"1\":{\"2155\":1}}],[\"data可能是xmldoc\",{\"1\":{\"2144\":1}}],[\"datatype\",{\"0\":{\"2141\":1},\"1\":{\"2132\":2,\"2155\":1,\"2161\":2,\"2163\":1,\"2165\":2,\"2170\":2,\"2176\":1}}],[\"data=new\",{\"1\":{\"1831\":1}}],[\"datalist\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"datasourcetransactionmanager\",{\"1\":{\"2701\":1,\"2706\":1,\"2710\":1,\"2903\":1,\"2908\":1}}],[\"datasource>\",{\"1\":{\"2278\":1,\"2332\":1,\"2334\":2,\"2374\":1}}],[\"datasource\",{\"1\":{\"2187\":5,\"2301\":1,\"2584\":1,\"2666\":3,\"2701\":4,\"2706\":3,\"2710\":3,\"2903\":6,\"2906\":1,\"2907\":2,\"2908\":3}}],[\"datasource对象就会自动的返回连接池中的连接\",{\"1\":{\"1209\":1}}],[\"datasource数据源接口\",{\"1\":{\"1209\":1}}],[\"dataset\",{\"1\":{\"65\":2}}],[\"dataview语法\",{\"0\":{\"1199\":1}}],[\"dataview\",{\"1\":{\"1198\":1}}],[\"datadir=c\",{\"1\":{\"923\":1}}],[\"datademo\",{\"1\":{\"425\":1}}],[\"datagrampacket\",{\"1\":{\"515\":7,\"516\":14,\"517\":14,\"518\":14}}],[\"datagramsocket\",{\"1\":{\"515\":10,\"516\":12,\"517\":16,\"518\":16}}],[\"datainputstream\",{\"1\":{\"425\":7,\"509\":5,\"510\":10,\"511\":5,\"512\":7,\"513\":7}}],[\"dataoutputstream\",{\"1\":{\"425\":7,\"509\":5,\"510\":10,\"511\":5,\"512\":7,\"513\":7}}],[\"data\",{\"0\":{\"932\":1,\"933\":1,\"934\":1,\"935\":1,\"2140\":1,\"2530\":1},\"1\":{\"208\":1,\"515\":2,\"516\":4,\"517\":4,\"518\":4,\"908\":1,\"923\":1,\"1262\":1,\"1266\":2,\"1275\":2,\"1606\":4,\"1609\":11,\"1614\":1,\"1616\":1,\"1617\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1704\":2,\"1707\":1,\"1711\":2,\"1712\":2,\"1713\":2,\"1715\":2,\"1721\":1,\"1730\":1,\"1831\":2,\"2112\":1,\"2131\":1,\"2132\":2,\"2144\":1,\"2147\":2,\"2155\":4,\"2158\":2,\"2161\":4,\"2163\":3,\"2165\":4,\"2169\":1,\"2170\":1,\"2176\":1,\"2190\":1,\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2276\":1,\"2374\":1,\"2425\":2,\"2428\":2,\"2431\":2,\"2435\":2,\"2552\":1,\"2565\":2,\"2571\":1,\"2579\":2,\"2590\":1,\"2591\":1,\"2592\":1,\"2667\":1,\"2697\":1,\"2796\":1,\"2800\":2,\"2801\":2,\"2915\":1}}],[\"date>\",{\"1\":{\"2799\":1}}],[\"datestyle\",{\"1\":{\"2030\":1}}],[\"datestring\",{\"1\":{\"1414\":1}}],[\"date对象的格式化方法\",{\"1\":{\"1417\":1}}],[\"date对象\",{\"0\":{\"1413\":1}}],[\"date对象等等\",{\"1\":{\"1403\":1}}],[\"datediff\",{\"1\":{\"1093\":1}}],[\"datetimeformat\",{\"1\":{\"2798\":2}}],[\"datetimeformat注解来表示当前字段需要转换为date类型\",{\"1\":{\"2798\":1}}],[\"datetimeformatter1\",{\"1\":{\"380\":3}}],[\"datetimeformatter\",{\"0\":{\"380\":1},\"1\":{\"380\":10,\"892\":1,\"897\":8}}],[\"datetime\",{\"1\":{\"893\":2,\"942\":1,\"1093\":4}}],[\"date是非线程安全的\",{\"1\":{\"891\":1}}],[\"date是java\",{\"1\":{\"370\":1}}],[\"date只有日期\",{\"1\":{\"891\":1}}],[\"date同时包含日期和时间\",{\"1\":{\"891\":1}}],[\"date种年份是从1900开始\",{\"1\":{\"378\":1}}],[\"date类型字段记录日志时使用的日期格式\",{\"1\":{\"2301\":1}}],[\"date类\",{\"1\":{\"378\":1}}],[\"dateformat=new\",{\"1\":{\"2799\":1}}],[\"dateformat=\",{\"1\":{\"2301\":1}}],[\"dateformat=yyyy\",{\"1\":{\"2298\":1}}],[\"dateformat\",{\"1\":{\"374\":6,\"2799\":1}}],[\"date4\",{\"1\":{\"372\":1}}],[\"date3\",{\"1\":{\"372\":1}}],[\"date2的日期间隔\",{\"1\":{\"1093\":1}}],[\"date2\",{\"1\":{\"372\":1,\"373\":2,\"893\":2,\"1093\":1}}],[\"date1\",{\"1\":{\"372\":1,\"893\":2,\"1093\":1,\"2562\":2}}],[\"date相互转换\",{\"1\":{\"372\":1}}],[\"date的对象\",{\"1\":{\"372\":1}}],[\"date的联系\",{\"1\":{\"372\":1}}],[\"date的区别\",{\"1\":{\"372\":1}}],[\"date的父类\",{\"1\":{\"370\":1}}],[\"date和java\",{\"1\":{\"372\":3}}],[\"date用于除了数据库以外的任何地方\",{\"1\":{\"370\":1}}],[\"date\",{\"0\":{\"200\":1,\"370\":2,\"372\":1},\"1\":{\"370\":7,\"371\":4,\"372\":19,\"373\":11,\"374\":10,\"375\":6,\"376\":7,\"380\":3,\"459\":1,\"479\":1,\"828\":5,\"891\":5,\"896\":4,\"897\":1,\"899\":2,\"937\":2,\"942\":1,\"955\":1,\"965\":1,\"972\":1,\"1093\":15,\"1198\":1,\"1211\":1,\"1226\":1,\"1349\":2,\"1359\":1,\"1370\":1,\"1414\":4,\"1415\":39,\"1416\":6,\"1417\":1,\"1458\":1,\"1459\":1,\"1808\":1,\"1897\":1,\"1898\":1,\"1928\":1,\"1976\":2,\"2030\":2,\"2087\":1,\"2128\":5,\"2166\":4,\"2192\":1,\"2276\":1,\"2282\":2,\"2289\":1,\"2363\":1,\"2374\":4,\"2377\":1,\"2425\":1,\"2428\":1,\"2435\":1,\"2508\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2574\":2,\"2615\":1,\"2667\":1,\"2674\":2,\"2798\":1,\"2799\":5}}],[\"dao封装\",{\"1\":{\"2740\":1}}],[\"daoaspectbyxml\",{\"1\":{\"2648\":2}}],[\"daoaspect\",{\"1\":{\"2640\":1,\"2641\":1,\"2642\":1,\"2643\":1,\"2644\":1}}],[\"dao对象\",{\"1\":{\"1976\":1}}],[\"dao层\",{\"1\":{\"1976\":1}}],[\"dao模式的结构\",{\"0\":{\"1263\":1}}],[\"dao模式\",{\"0\":{\"1261\":1}}],[\"dao\",{\"0\":{\"1260\":1},\"1\":{\"54\":1,\"1262\":1,\"1263\":2,\"1264\":2,\"1274\":1,\"1275\":1,\"2542\":1,\"2546\":1,\"2548\":1,\"2549\":1,\"2634\":5,\"2640\":1,\"2641\":1,\"2642\":1,\"2643\":1,\"2644\":1,\"2648\":1}}],[\"dointransaction方法中发生异常将自动回滚\",{\"1\":{\"2702\":1}}],[\"dointransaction方法中实现我们原有代码功能\",{\"1\":{\"2702\":1}}],[\"dointransaction\",{\"1\":{\"2702\":2}}],[\"doquery\",{\"1\":{\"2493\":1}}],[\"dofilter\",{\"1\":{\"1998\":4,\"2001\":4,\"2004\":1,\"2047\":4,\"2052\":4,\"2057\":2,\"2063\":3}}],[\"dofilter方法中有一个filterchain对象\",{\"1\":{\"1995\":1}}],[\"dopost\",{\"1\":{\"1820\":2}}],[\"doxxx\",{\"1\":{\"1820\":1}}],[\"do<\",{\"1\":{\"1791\":1,\"1795\":1,\"1831\":2,\"1834\":2,\"1838\":1,\"1839\":1,\"1844\":1,\"1846\":1,\"1847\":1,\"1999\":3,\"2047\":2,\"2058\":1}}],[\"doesn\",{\"1\":{\"1690\":1,\"2226\":1}}],[\"down\",{\"0\":{\"3077\":1},\"1\":{\"1665\":1}}],[\"downloads\",{\"1\":{\"921\":1}}],[\"download\",{\"1\":{\"676\":1,\"772\":1,\"1561\":1}}],[\"doloremque\",{\"1\":{\"1606\":2}}],[\"dolore\",{\"1\":{\"1606\":1}}],[\"dolor\",{\"1\":{\"1606\":1,\"1609\":1}}],[\"done\",{\"1\":{\"1195\":1}}],[\"doget方法能够被执行并处理get请求的原因是\",{\"1\":{\"1826\":1}}],[\"doget\",{\"1\":{\"1820\":1}}],[\"dog\",{\"1\":{\"372\":4}}],[\"do\",{\"0\":{\"1367\":1},\"1\":{\"288\":1,\"1367\":1,\"1541\":1,\"1606\":1,\"1793\":1,\"1838\":2,\"1839\":2,\"1840\":3,\"1841\":2,\"1842\":2,\"1844\":3,\"1856\":3,\"1860\":3,\"1864\":3,\"1874\":1,\"1878\":1,\"1907\":1,\"1909\":2,\"1910\":1,\"1917\":4,\"1921\":3,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":1,\"2052\":2,\"2055\":1,\"2056\":1,\"2060\":1,\"2062\":1,\"2063\":1,\"2075\":1,\"2088\":1,\"2094\":1,\"2095\":1,\"2096\":1,\"2098\":2,\"2114\":2,\"2115\":1,\"2128\":2,\"2131\":3,\"2132\":2,\"2159\":2,\"2166\":4,\"2169\":3,\"2170\":3,\"2171\":3,\"2176\":2,\"2749\":1,\"2753\":1,\"2824\":1}}],[\"double\",{\"1\":{\"272\":4,\"274\":6,\"275\":4,\"360\":3,\"382\":2,\"576\":4,\"880\":1,\"940\":3,\"1211\":6,\"1976\":5,\"2374\":2,\"2388\":1,\"2389\":1,\"2390\":1,\"2425\":2,\"2428\":2,\"2435\":2,\"2667\":2,\"2695\":1}}],[\"docourt\",{\"1\":{\"2605\":6}}],[\"docbase\",{\"1\":{\"1768\":1}}],[\"docbase=\",{\"1\":{\"1747\":1,\"1768\":1}}],[\"docs\",{\"1\":{\"1561\":1}}],[\"doc\",{\"1\":{\"401\":1}}],[\"document来访问\",{\"1\":{\"1478\":1}}],[\"document对象中的每一个分支点都是一个node对象\",{\"1\":{\"1479\":1}}],[\"document对象本身是一种树形结构的文档对象\",{\"1\":{\"1478\":1}}],[\"document对象是window对象的一个成员属性\",{\"1\":{\"1478\":1}}],[\"document对象如何获取\",{\"0\":{\"1478\":1}}],[\"document对象代表整个html文档\",{\"1\":{\"1477\":1}}],[\"documented\",{\"0\":{\"555\":1},\"1\":{\"552\":1}}],[\"document\",{\"1\":{\"65\":1,\"114\":1,\"208\":2,\"1442\":1,\"1448\":2,\"1450\":1,\"1451\":2,\"1458\":1,\"1485\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":2,\"1500\":2,\"1501\":1,\"1505\":5,\"1544\":1,\"1546\":2,\"1573\":1,\"1613\":3}}],[\"doctype\",{\"1\":{\"65\":1,\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1322\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1482\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1690\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"2132\":2,\"2159\":2,\"2166\":1,\"2278\":1,\"2279\":1,\"2374\":2,\"2501\":1,\"2918\":1}}],[\"domainobjectname=\",{\"1\":{\"2501\":1}}],[\"domainobjectname属性指定生成出来的实体类的类名\",{\"1\":{\"2501\":1}}],[\"domain\",{\"1\":{\"1766\":1,\"2330\":1}}],[\"dom对象\",{\"1\":{\"1573\":1,\"1574\":1}}],[\"dom对象转换为jquery\",{\"1\":{\"1573\":1}}],[\"dom对象如何调用jquery函数\",{\"1\":{\"1573\":1}}],[\"dom对象和jquery对象之间的方法和属性是不通用\",{\"1\":{\"1573\":1}}],[\"dom对象和jquery对象转换\",{\"0\":{\"1573\":1}}],[\"dom操作繁琐之极\",{\"1\":{\"1539\":1}}],[\"dom操作的内容\",{\"0\":{\"1480\":1}}],[\"dom节点分类node\",{\"0\":{\"1479\":1}}],[\"dom的顶层是document对象\",{\"1\":{\"1447\":1}}],[\"dom是跨平台与跨语言的\",{\"1\":{\"1447\":1}}],[\"dom是documentobject\",{\"1\":{\"1447\":1}}],[\"dom标准是由w3c制定与维护\",{\"1\":{\"1447\":1}}],[\"dom由一系列对象组成\",{\"1\":{\"1447\":1}}],[\"dom提供一种结构化的文档描述方式\",{\"1\":{\"1447\":1}}],[\"dom用于xhtml\",{\"1\":{\"1447\":1}}],[\"dom可以简单理解为\",{\"1\":{\"1372\":1}}],[\"dom渲染引擎\",{\"1\":{\"87\":1}}],[\"dom\",{\"1\":{\"65\":2,\"72\":1,\"1372\":2,\"1432\":1,\"1435\":1,\"1438\":1,\"1441\":1,\"1448\":1,\"1573\":1}}],[\"dom编程就是使用document对象的api完成对网页html文档进行动态修改\",{\"1\":{\"1476\":1}}],[\"dom编程`\",{\"1\":{\"1448\":1}}],[\"dom编程可以实现网页内容校验和动态变化的效果\",{\"1\":{\"1372\":1}}],[\"dom编程\",{\"0\":{\"1474\":1},\"1\":{\"56\":1}}],[\"dql主要用于数据的查询\",{\"1\":{\"932\":1}}],[\"dql\",{\"0\":{\"932\":1,\"1022\":1,\"1023\":1,\"1044\":1},\"1\":{\"52\":2}}],[\"子组件不可以直接修改父组件的值\",{\"1\":{\"1714\":1}}],[\"子组件修改父组件参数\",{\"0\":{\"1714\":1}}],[\"子组件\",{\"1\":{\"1711\":1,\"1712\":1,\"1713\":1,\"1715\":1}}],[\"子组件通过props接受对应的参数\",{\"1\":{\"1710\":1}}],[\"子级节点使用绝对定位\",{\"1\":{\"1535\":1}}],[\"子代选择器只改变子标签的样式\",{\"1\":{\"1513\":1}}],[\"子任务\",{\"1\":{\"1198\":1}}],[\"子句\",{\"1\":{\"1082\":1}}],[\"子句的作用是筛选满足条件的组\",{\"1\":{\"1042\":1}}],[\"子查询的复制操作\",{\"0\":{\"1074\":1}}],[\"子查询的结果是多行多列的结果\",{\"1\":{\"1072\":1}}],[\"子查询的分类\",{\"0\":{\"1070\":1}}],[\"子查询结果\",{\"1\":{\"1071\":9}}],[\"子查询是多值结果\",{\"1\":{\"1071\":1}}],[\"子查询是单值结果\",{\"1\":{\"1071\":1}}],[\"子查询必须使用\",{\"1\":{\"1069\":1}}],[\"子查询\",{\"0\":{\"1069\":1}}],[\"子表将外键列设置成一个默认的值\",{\"1\":{\"1003\":1}}],[\"子线程===\",{\"1\":{\"460\":1}}],[\"子线程也不要继续执行了\",{\"1\":{\"460\":1}}],[\"子线程\",{\"1\":{\"439\":1,\"440\":1,\"441\":1}}],[\"子类中重写父类的方法\",{\"1\":{\"2615\":1}}],[\"子类eat\",{\"1\":{\"541\":1,\"542\":1}}],[\"子类\",{\"0\":{\"325\":1,\"335\":1,\"345\":1,\"350\":1,\"353\":1},\"1\":{\"372\":2,\"374\":2,\"375\":1}}],[\"子类父类中\",{\"1\":{\"34\":1}}],[\"子网掩码与上述虚拟机软件配置一致\",{\"1\":{\"49\":1}}],[\"网格列是通过跨越指定的\",{\"1\":{\"1601\":1}}],[\"网格每一行需要放在设置了\",{\"1\":{\"1601\":1}}],[\"网格系统规则\",{\"0\":{\"1601\":1}}],[\"网格分类\",{\"0\":{\"1600\":1}}],[\"网景\",{\"1\":{\"1372\":1}}],[\"网页中用来给访问者填写信息\",{\"1\":{\"1329\":1}}],[\"网页就被显示出来了\",{\"1\":{\"173\":1}}],[\"网络资源路径\",{\"1\":{\"2322\":1}}],[\"网络用语\",{\"1\":{\"1717\":1}}],[\"网络传输的三大基石\",{\"0\":{\"1324\":1}}],[\"网络层\",{\"1\":{\"495\":2}}],[\"网络通讯最重要的要素是\",{\"1\":{\"492\":1}}],[\"网络自身内部的各种计算资源\",{\"1\":{\"321\":1}}],[\"网络浏览器多会将用户最近访问过的网址组织为一个栈\",{\"1\":{\"302\":1}}],[\"网络连接就是持久的\",{\"1\":{\"177\":1}}],[\"网络编程\",{\"0\":{\"41\":1,\"2965\":1},\"1\":{\"6\":1}}],[\"网段ip应为\",{\"1\":{\"48\":1}}],[\"b的账户发生了存款\",{\"1\":{\"2698\":1}}],[\"btree\",{\"1\":{\"2417\":3,\"2695\":1}}],[\"btn\",{\"1\":{\"1564\":18}}],[\"btoa\",{\"1\":{\"1452\":1}}],[\"bgcolor=\",{\"1\":{\"1319\":2}}],[\"bgcolor\",{\"1\":{\"1319\":1}}],[\"bdstatic\",{\"1\":{\"1309\":1}}],[\"b><\",{\"1\":{\"1302\":1}}],[\"b>\",{\"1\":{\"1187\":1,\"1188\":1,\"1302\":2}}],[\"b表里面的外键\",{\"1\":{\"1056\":1}}],[\"bno\",{\"1\":{\"987\":2}}],[\"bname=php\",{\"1\":{\"2566\":1,\"2567\":1}}],[\"bname=mysql\",{\"1\":{\"2566\":1,\"2567\":1}}],[\"bname=java\",{\"1\":{\"2566\":1,\"2567\":1}}],[\"bname=\",{\"1\":{\"2566\":6,\"2567\":3}}],[\"bname\",{\"1\":{\"987\":1,\"2565\":1}}],[\"bnana\",{\"1\":{\"274\":1,\"275\":1}}],[\"b3\",{\"1\":{\"870\":2,\"2566\":2,\"2567\":1}}],[\"b2\",{\"1\":{\"870\":2,\"1870\":3,\"2566\":2,\"2567\":1}}],[\"b1\",{\"1\":{\"870\":2,\"1870\":3,\"2566\":2,\"2567\":1}}],[\"blueviolet\",{\"1\":{\"1525\":1,\"1606\":1}}],[\"blue\",{\"1\":{\"1496\":1,\"1497\":1,\"1508\":1,\"1515\":1,\"1571\":1,\"1927\":1,\"1928\":1,\"1976\":1,\"2025\":1,\"2031\":1}}],[\"bluej\",{\"1\":{\"772\":1}}],[\"blur\",{\"1\":{\"1452\":1}}],[\"black\",{\"1\":{\"1695\":2,\"1698\":1,\"2159\":1}}],[\"blank\",{\"1\":{\"1312\":3}}],[\"blake\",{\"1\":{\"1211\":1}}],[\"blocking\",{\"1\":{\"2481\":1}}],[\"blocking=\",{\"1\":{\"2481\":1}}],[\"blockingqueue继承queue\",{\"1\":{\"322\":1}}],[\"blockingqueue\",{\"0\":{\"322\":1}}],[\"block\",{\"1\":{\"1195\":1,\"1609\":8,\"1695\":3,\"1698\":1}}],[\"blob\",{\"1\":{\"941\":1}}],[\"blogmapper\",{\"1\":{\"2320\":1,\"2321\":1,\"2322\":1}}],[\"blog\",{\"1\":{\"845\":5,\"2330\":1}}],[\"b依赖c\",{\"1\":{\"687\":1}}],[\"bjmeturing\",{\"1\":{\"2155\":2}}],[\"bjsxt\",{\"1\":{\"545\":1}}],[\"bj1\",{\"1\":{\"275\":2}}],[\"b类ip地址\",{\"1\":{\"493\":1}}],[\"browser中的after\",{\"1\":{\"1777\":1}}],[\"browser\",{\"1\":{\"1769\":1}}],[\"browserslist\",{\"1\":{\"1687\":1}}],[\"brothers\",{\"1\":{\"1392\":2}}],[\"br\",{\"1\":{\"1505\":4}}],[\"brendan\",{\"1\":{\"1372\":1}}],[\"break\",{\"1\":{\"279\":2,\"305\":1,\"306\":1,\"349\":3,\"356\":1,\"518\":2,\"564\":2,\"1366\":4}}],[\"branch\",{\"1\":{\"728\":1,\"734\":1,\"748\":2}}],[\"brand+\",{\"1\":{\"489\":2,\"490\":2}}],[\"brand\",{\"1\":{\"489\":11,\"490\":11,\"1834\":1}}],[\"b与c之间的ascii差值\",{\"1\":{\"431\":2}}],[\"bb\",{\"1\":{\"265\":1,\"266\":1,\"300\":1,\"820\":2,\"878\":8,\"879\":4,\"1171\":2,\"1695\":1}}],[\"bbbb\",{\"1\":{\"817\":1}}],[\"bbbbb\",{\"1\":{\"260\":8}}],[\"bbb\",{\"1\":{\"48\":2,\"337\":3,\"392\":1,\"1808\":1,\"1856\":1,\"1860\":1,\"1864\":1}}],[\"birthdate=mon\",{\"1\":{\"2562\":1,\"2563\":1,\"2564\":1}}],[\"birthdate\",{\"1\":{\"2562\":1,\"2563\":1,\"2564\":1,\"2796\":2,\"2798\":3}}],[\"birthday\",{\"1\":{\"1787\":1,\"1790\":1,\"2128\":1}}],[\"billie\",{\"1\":{\"2183\":1,\"2205\":1}}],[\"bisque\",{\"1\":{\"1319\":1,\"1533\":1,\"1534\":1}}],[\"bigint\",{\"1\":{\"939\":1,\"2182\":1}}],[\"bifunction<u\",{\"1\":{\"873\":1}}],[\"bifunction<string\",{\"1\":{\"830\":1}}],[\"bit\",{\"1\":{\"294\":1}}],[\"bitmap\",{\"1\":{\"208\":1}}],[\"bin文件夹内部的vue\",{\"1\":{\"1687\":1}}],[\"bind标签\",{\"0\":{\"2457\":1},\"1\":{\"2457\":1}}],[\"bind自定义属性传入值\",{\"1\":{\"1710\":1}}],[\"bind的属性\",{\"1\":{\"1649\":1}}],[\"bind属性的作用是将普通的w3c属性变为动态属性\",{\"1\":{\"1648\":1}}],[\"bind\",{\"0\":{\"1648\":1},\"1\":{\"1572\":3,\"1649\":1,\"1651\":1,\"2458\":1}}],[\"bin目录下的文件mysql\",{\"1\":{\"925\":1}}],[\"bin或d\",{\"1\":{\"674\":1}}],[\"bin\",{\"1\":{\"674\":2,\"925\":1,\"1156\":1,\"1239\":3,\"1744\":1}}],[\"bincount\",{\"1\":{\"279\":2}}],[\"binaryoperator<u>\",{\"1\":{\"873\":1}}],[\"binaryoperator<t>\",{\"1\":{\"873\":2}}],[\"binarysearch\",{\"1\":{\"300\":1}}],[\"binarysearch必须在有序的集合中查找\",{\"1\":{\"300\":1}}],[\"binary\",{\"1\":{\"208\":1,\"941\":2}}],[\"bijiao03\",{\"1\":{\"275\":1}}],[\"bijiao01\",{\"1\":{\"275\":1}}],[\"b=\",{\"1\":{\"1374\":1,\"1712\":1}}],[\"b=4\",{\"1\":{\"176\":1}}],[\"b=2>1\",{\"1\":{\"1356\":1}}],[\"b=2\",{\"1\":{\"75\":1}}],[\"buffer类\",{\"0\":{\"3019\":1}}],[\"buffer\",{\"1\":{\"1959\":1}}],[\"bufferedoutputstream\",{\"0\":{\"418\":1},\"1\":{\"418\":5}}],[\"bufferedinputstream\",{\"0\":{\"417\":1},\"1\":{\"418\":6}}],[\"bufferedwriter\",{\"0\":{\"415\":1},\"1\":{\"415\":5,\"422\":6}}],[\"bufferedreader\",{\"0\":{\"414\":1},\"1\":{\"415\":5,\"422\":6}}],[\"built\",{\"1\":{\"1690\":1}}],[\"builder与\",{\"0\":{\"3019\":1}}],[\"builder\",{\"1\":{\"2293\":6,\"2320\":3,\"2321\":3,\"2323\":1}}],[\"build>\",{\"1\":{\"2186\":1,\"2500\":1,\"2505\":1}}],[\"build\",{\"1\":{\"1683\":1,\"1687\":3,\"2282\":3,\"2360\":2,\"2374\":3,\"2629\":2,\"2665\":2}}],[\"but\",{\"1\":{\"1690\":1}}],[\"button>\",{\"1\":{\"1564\":9,\"1613\":2,\"1614\":2,\"1621\":2,\"1622\":2,\"1640\":2,\"1645\":3,\"1646\":1,\"1650\":2,\"1662\":1,\"1664\":2,\"1667\":1,\"1670\":1,\"1672\":1,\"1701\":2,\"1707\":1,\"1711\":1,\"1712\":1,\"1715\":2,\"1730\":1,\"2120\":1,\"2786\":1}}],[\"button\",{\"0\":{\"1339\":1},\"1\":{\"65\":1,\"1339\":1,\"1379\":1,\"1380\":3,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":2,\"1459\":2,\"1460\":2,\"1462\":1,\"1463\":3,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":2,\"1494\":2,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":2,\"1555\":3,\"1564\":9,\"1567\":4,\"1568\":4,\"1570\":3,\"1571\":8,\"1572\":3,\"1588\":3,\"1589\":3,\"1590\":4,\"1609\":2,\"2120\":1,\"2128\":1,\"2132\":2,\"2159\":1,\"2166\":1,\"2877\":1}}],[\"bug修理分支\",{\"0\":{\"804\":1}}],[\"buyticket\",{\"1\":{\"470\":1,\"471\":2}}],[\"buyticketthread\",{\"1\":{\"465\":1,\"471\":3,\"480\":1}}],[\"bucketindex位置\",{\"1\":{\"294\":1}}],[\"bucketindex\",{\"1\":{\"294\":8}}],[\"bundle\",{\"1\":{\"114\":1,\"1563\":2,\"1564\":2,\"1596\":2,\"1602\":2,\"1606\":2,\"1609\":2}}],[\"baomidou<\",{\"1\":{\"2186\":1,\"2292\":1}}],[\"baomidou\",{\"1\":{\"2183\":5,\"2213\":1}}],[\"batis普通模式的开发\",{\"0\":{\"3161\":1}}],[\"batis\",{\"0\":{\"2994\":1,\"3154\":1}}],[\"batchargs\",{\"1\":{\"2677\":1}}],[\"batchupdate\",{\"1\":{\"2677\":1,\"2678\":1,\"2679\":1,\"2680\":1}}],[\"batch\",{\"1\":{\"2301\":3}}],[\"batchinserts\",{\"1\":{\"2220\":1}}],[\"batc\",{\"1\":{\"2298\":1}}],[\"bat启动脚本运行时\",{\"1\":{\"1779\":1}}],[\"bat启动脚本启动tomcat\",{\"1\":{\"1779\":1}}],[\"bat结尾的\",{\"1\":{\"1744\":1}}],[\"bat文件或者直接关闭掉启动窗口\",{\"1\":{\"1742\":1}}],[\"bat文件\",{\"1\":{\"1741\":1}}],[\"banner0619\",{\"1\":{\"1609\":1}}],[\"banana\",{\"1\":{\"1393\":2,\"1394\":2,\"1395\":2,\"1396\":2,\"1397\":2,\"1398\":2,\"1399\":1,\"1401\":2}}],[\"back\",{\"1\":{\"1463\":1}}],[\"backtick\",{\"1\":{\"1180\":2}}],[\"backgroundcolor\",{\"1\":{\"1545\":3}}],[\"background=\",{\"1\":{\"1319\":1}}],[\"background\",{\"1\":{\"115\":1,\"1319\":1,\"1433\":1,\"1496\":1,\"1497\":1,\"1514\":2,\"1521\":16,\"1523\":4,\"1524\":4,\"1525\":5,\"1528\":1,\"1529\":2,\"1533\":4,\"1534\":4,\"1535\":6,\"1536\":1,\"1544\":3,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1567\":1,\"1568\":3,\"1571\":1,\"1572\":4,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":2,\"1602\":6,\"1650\":3,\"1695\":2,\"1698\":1}}],[\"baiud\",{\"1\":{\"1176\":1}}],[\"baidu\",{\"1\":{\"502\":1,\"503\":1,\"1176\":1,\"1189\":1,\"1293\":2,\"1312\":3,\"1331\":2,\"1439\":1,\"1460\":1,\"1462\":1,\"1549\":5,\"1579\":1,\"1586\":1,\"1660\":1,\"1856\":1,\"1860\":1,\"1864\":1,\"1891\":2}}],[\"bazaar\",{\"1\":{\"723\":1}}],[\"basepackage\",{\"1\":{\"2903\":1,\"2907\":1}}],[\"basepackages\",{\"1\":{\"2601\":1,\"2649\":1}}],[\"basetypehandler<address>\",{\"1\":{\"2509\":1}}],[\"basetypehandler\",{\"1\":{\"2509\":1}}],[\"baseexecutor\",{\"1\":{\"2493\":1}}],[\"baseexecutor类中的关键方法\",{\"1\":{\"2493\":1}}],[\"basemapper简单的crud\",{\"0\":{\"2201\":1}}],[\"basemapper<user>\",{\"1\":{\"2191\":1}}],[\"basemapper与iservice\",{\"0\":{\"2200\":1},\"1\":{\"214\":1}}],[\"base标签的作用是在相对路径之前自动补充base\",{\"1\":{\"1870\":1}}],[\"base标签可以简化相对路径\",{\"1\":{\"1869\":1}}],[\"base中的内容\",{\"1\":{\"1869\":1}}],[\"base基准路径\",{\"0\":{\"1869\":1}}],[\"base是否有默认值\",{\"1\":{\"1779\":1}}],[\"base\",{\"0\":{\"3156\":1},\"1\":{\"1452\":2,\"1779\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":2,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2900\":1,\"2903\":1,\"2905\":1}}],[\"basequery\",{\"1\":{\"1266\":1,\"1267\":1,\"1275\":1,\"2176\":1}}],[\"baseupdate\",{\"1\":{\"1266\":1,\"1267\":2,\"1275\":1}}],[\"basedao\",{\"1\":{\"1266\":1,\"1267\":1,\"1275\":1,\"2176\":1}}],[\"basedir=\",{\"1\":{\"923\":1}}],[\"bash\",{\"1\":{\"726\":1,\"810\":1}}],[\"bash需要安装的\",{\"1\":{\"725\":1}}],[\"basic\",{\"1\":{\"208\":1}}],[\"badboy\",{\"1\":{\"150\":1}}],[\"babel的配置文件\",{\"1\":{\"1686\":1}}],[\"babelrc\",{\"1\":{\"98\":1}}],[\"babel是一个广泛使用的转码器\",{\"1\":{\"96\":1}}],[\"babel\",{\"0\":{\"96\":1},\"1\":{\"97\":2,\"98\":5,\"1686\":1}}],[\"bar2\",{\"1\":{\"2140\":2}}],[\"bar1\",{\"1\":{\"2140\":2}}],[\"bar\",{\"1\":{\"65\":5,\"2301\":1}}],[\"b\",{\"0\":{\"1063\":1,\"1064\":1,\"2949\":1,\"2953\":1,\"2976\":1,\"3080\":1,\"3081\":1,\"3084\":1,\"3097\":1,\"3175\":1},\"1\":{\"73\":3,\"75\":1,\"102\":8,\"114\":2,\"226\":2,\"238\":5,\"240\":5,\"241\":4,\"272\":8,\"303\":7,\"327\":5,\"348\":1,\"349\":1,\"357\":4,\"387\":3,\"390\":4,\"408\":1,\"431\":3,\"434\":1,\"522\":1,\"523\":4,\"525\":4,\"643\":2,\"816\":2,\"817\":3,\"875\":5,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1043\":2,\"1054\":6,\"1056\":1,\"1057\":1,\"1091\":1,\"1093\":1,\"1356\":1,\"1363\":4,\"1364\":4,\"1370\":5,\"1374\":1,\"1401\":2,\"1406\":2,\"1489\":3,\"1499\":1,\"1500\":1,\"1544\":2,\"1568\":4,\"1570\":1,\"1617\":2,\"1698\":4,\"1712\":1,\"1870\":3,\"1917\":1,\"1921\":1,\"1925\":1,\"1951\":1,\"1972\":1,\"1975\":1,\"1976\":1,\"1987\":1,\"1991\":2,\"2022\":1,\"2023\":1,\"2125\":2,\"2126\":4,\"2220\":2,\"2728\":2,\"2729\":1,\"2731\":1}}],[\"bydeptno\",{\"1\":{\"2673\":2}}],[\"bydeptnoandsal\",{\"1\":{\"2391\":2,\"2395\":2,\"2399\":2,\"2404\":2}}],[\"bytype\",{\"1\":{\"2578\":1,\"2579\":1}}],[\"bytes1\",{\"1\":{\"516\":6,\"517\":6,\"518\":6}}],[\"bytes\",{\"1\":{\"412\":4,\"418\":4,\"515\":6,\"516\":6,\"517\":6,\"518\":6,\"1198\":1}}],[\"byte\",{\"1\":{\"360\":3,\"412\":2,\"418\":2,\"515\":4,\"516\":8,\"517\":8,\"518\":8,\"564\":1}}],[\"bytecode\",{\"1\":{\"208\":1}}],[\"byname\",{\"1\":{\"2578\":1,\"2579\":2}}],[\"byempno\",{\"1\":{\"2386\":2,\"2672\":2}}],[\"byebye\",{\"1\":{\"518\":2}}],[\"by中常出现的字段推荐创建索引\",{\"1\":{\"1148\":1}}],[\"by语句的效率\",{\"1\":{\"1148\":1}}],[\"by\",{\"0\":{\"1038\":1,\"1042\":1},\"1\":{\"65\":1,\"294\":1,\"364\":1,\"1039\":1,\"1040\":1,\"1042\":1,\"1072\":3,\"1115\":3,\"1928\":1,\"2247\":1,\"2254\":1,\"2503\":1}}],[\"bea\",{\"1\":{\"1735\":1}}],[\"beanpropertyrowmapper<>\",{\"1\":{\"2672\":1,\"2673\":1}}],[\"beanpropertyrowmapper<emp>\",{\"1\":{\"2672\":1,\"2673\":1}}],[\"beanprocesser\",{\"1\":{\"2574\":1}}],[\"beanpostprocessor\",{\"1\":{\"2574\":1}}],[\"beanpostprocesser\",{\"1\":{\"2574\":1}}],[\"beanname\",{\"1\":{\"2574\":4}}],[\"bean后置处理器引入\",{\"0\":{\"2572\":1}}],[\"bean对象的引用\",{\"0\":{\"2561\":1},\"1\":{\"2576\":1}}],[\"bean标签常用的属性\",{\"1\":{\"2552\":1}}],[\"bean>\",{\"1\":{\"2542\":1,\"2546\":1,\"2548\":1,\"2553\":2,\"2554\":2,\"2555\":3,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":2,\"2563\":3,\"2564\":3,\"2566\":7,\"2567\":4,\"2571\":1,\"2574\":2,\"2579\":3,\"2584\":1,\"2588\":1,\"2666\":2,\"2701\":2,\"2706\":1,\"2710\":1,\"2765\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2799\":2,\"2898\":1,\"2901\":1,\"2903\":4,\"2906\":1,\"2907\":2,\"2908\":1}}],[\"beanfactory的子接口\",{\"1\":{\"2550\":1}}],[\"beanfactory接口\",{\"1\":{\"2550\":1}}],[\"beanfactory\",{\"1\":{\"2532\":1,\"2550\":1}}],[\"beansexception\",{\"1\":{\"2574\":2}}],[\"beans>\",{\"1\":{\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"beans\",{\"1\":{\"2532\":3,\"2538\":1,\"2542\":4,\"2546\":4,\"2553\":4,\"2554\":4,\"2555\":4,\"2559\":4,\"2566\":4,\"2567\":4,\"2584\":4,\"2588\":16,\"2590\":4,\"2591\":4,\"2592\":4,\"2594\":4,\"2599\":4,\"2629\":1,\"2630\":4,\"2648\":4,\"2666\":4,\"2758\":4,\"2779\":4,\"2780\":4,\"2789\":4,\"2898\":4,\"2899\":4,\"2903\":4,\"2904\":4}}],[\"bean\",{\"0\":{\"3168\":1,\"3172\":1},\"1\":{\"1263\":1,\"2285\":1,\"2288\":1,\"2290\":2,\"2330\":1,\"2532\":1,\"2572\":1,\"2574\":6,\"2588\":1}}],[\"bean的id\",{\"1\":{\"2574\":2}}],[\"bean的获取\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"bean的自动注入\",{\"0\":{\"2575\":1,\"2577\":1,\"3170\":1},\"1\":{\"216\":1}}],[\"bean的生命周期\",{\"0\":{\"2568\":1,\"3169\":1},\"1\":{\"216\":1}}],[\"beecommended\",{\"1\":{\"1683\":1}}],[\"been\",{\"1\":{\"73\":1}}],[\"between\",{\"0\":{\"1033\":1,\"2241\":1},\"1\":{\"899\":7,\"1033\":1,\"2241\":2,\"2245\":2}}],[\"before标签配置前置通知\",{\"1\":{\"2648\":1}}],[\"before注解会使方法在执行测试单元前执行\",{\"1\":{\"2282\":1,\"2374\":1}}],[\"before注解以后\",{\"1\":{\"524\":1}}],[\"beforesend\",{\"0\":{\"2142\":1},\"1\":{\"2155\":1}}],[\"beforeupdate\",{\"1\":{\"1730\":2}}],[\"beforemount\",{\"1\":{\"1730\":2}}],[\"beforecreate\",{\"1\":{\"1730\":2}}],[\"beforer修饰的那个方法中加入\",{\"1\":{\"524\":1}}],[\"before\",{\"0\":{\"524\":1,\"2640\":1},\"1\":{\"524\":1,\"525\":1,\"535\":1,\"841\":3,\"888\":2,\"1571\":2,\"2282\":2,\"2374\":1,\"2623\":1,\"2635\":1,\"2640\":2,\"2644\":1,\"2648\":1,\"2651\":1}}],[\"begin=\",{\"1\":{\"2025\":2}}],[\"begin\",{\"1\":{\"260\":4,\"376\":2,\"1147\":2,\"2025\":1}}],[\"be\",{\"1\":{\"65\":1,\"364\":3,\"1690\":1}}],[\"boundsql\",{\"1\":{\"2493\":7}}],[\"bounded\",{\"1\":{\"294\":1}}],[\"boy\",{\"1\":{\"1831\":1,\"1917\":1,\"1921\":1,\"2598\":2,\"2599\":2}}],[\"bottom\",{\"1\":{\"1533\":1,\"1534\":1,\"1695\":1}}],[\"bottom四个属性\",{\"1\":{\"1533\":1,\"1534\":1}}],[\"both\",{\"0\":{\"1525\":1},\"1\":{\"1091\":1,\"1525\":2,\"2030\":1}}],[\"box\",{\"1\":{\"1527\":2}}],[\"boxed\",{\"1\":{\"889\":2}}],[\"borge\",{\"1\":{\"1392\":2}}],[\"borderradius\",{\"1\":{\"1591\":1}}],[\"border=\",{\"1\":{\"1319\":1,\"1555\":1,\"1579\":1,\"1586\":1,\"1630\":1,\"1631\":1,\"1649\":3,\"1651\":3,\"1793\":1,\"2925\":1}}],[\"border\",{\"1\":{\"65\":1,\"1319\":1,\"1482\":1,\"1496\":2,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1512\":2,\"1527\":1,\"1528\":1,\"1529\":1,\"1552\":1,\"1568\":2,\"1570\":1,\"1571\":7,\"1572\":1,\"1602\":6,\"1606\":4,\"1695\":3,\"1698\":1,\"1927\":2,\"1928\":2,\"1976\":2,\"2025\":2,\"2031\":2,\"2159\":1}}],[\"boston\",{\"1\":{\"1211\":1}}],[\"bonus\",{\"1\":{\"1211\":2}}],[\"bob\",{\"1\":{\"1185\":1}}],[\"boo\",{\"1\":{\"1622\":3}}],[\"boostrap4下载地址\",{\"1\":{\"1561\":1}}],[\"boostrap中文网\",{\"1\":{\"1561\":1}}],[\"boot\",{\"0\":{\"2983\":1,\"2998\":1,\"3106\":1,\"3110\":1,\"3111\":1},\"1\":{\"2186\":5,\"2290\":1}}],[\"boot<\",{\"1\":{\"2186\":4}}],[\"bootcss\",{\"1\":{\"1561\":2}}],[\"bootstrap4\",{\"1\":{\"1601\":1}}],[\"bootstrap的响应式\",{\"1\":{\"1559\":1}}],[\"bootstrap团队发布了bootstrap\",{\"1\":{\"1558\":1}}],[\"bootstrap一经推出后颇受欢迎\",{\"1\":{\"1557\":1}}],[\"bootstrap提供了优雅的html和css规范\",{\"1\":{\"1557\":1}}],[\"bootstrap是美国twitter公司的设计师mark\",{\"1\":{\"1557\":1}}],[\"bootstrap简介\",{\"0\":{\"1557\":1}}],[\"bootstrap开发案例\",{\"0\":{\"1603\":1},\"1\":{\"66\":1}}],[\"bootstrap容器与栅格系统\",{\"0\":{\"1592\":1},\"1\":{\"66\":1}}],[\"bootstrap\",{\"0\":{\"66\":1},\"1\":{\"11\":1,\"1559\":3,\"1563\":5,\"1564\":5,\"1594\":1,\"1596\":7,\"1599\":1,\"1601\":2,\"1602\":5,\"1606\":5,\"1609\":5}}],[\"bookmap\",{\"1\":{\"2565\":1,\"2566\":1}}],[\"booklist2\",{\"1\":{\"2565\":1,\"2566\":1,\"2567\":1}}],[\"booklist\",{\"1\":{\"2565\":1,\"2566\":1,\"2567\":2}}],[\"bookset\",{\"1\":{\"2565\":1,\"2566\":1}}],[\"books\",{\"1\":{\"2565\":1,\"2566\":1}}],[\"bookstore\",{\"1\":{\"1156\":1}}],[\"book\",{\"1\":{\"987\":1,\"2565\":1,\"2566\":9,\"2567\":6}}],[\"boolean类型字段记录日志时使用的日期格式\",{\"1\":{\"2301\":1}}],[\"boolean类型相加\",{\"1\":{\"1362\":1}}],[\"boolean\",{\"1\":{\"219\":1,\"263\":1,\"279\":3,\"281\":1,\"294\":3,\"316\":2,\"319\":1,\"324\":3,\"328\":1,\"360\":3,\"364\":1,\"386\":8,\"389\":9,\"407\":1,\"478\":2,\"479\":2,\"489\":3,\"490\":3,\"511\":2,\"512\":2,\"513\":2,\"846\":1,\"848\":3,\"870\":6,\"1223\":2,\"1255\":1,\"1259\":2,\"1356\":1,\"1486\":1,\"1849\":1,\"2220\":1,\"2255\":1,\"2259\":1}}],[\"body是用在网页中的一种html标签\",{\"1\":{\"1295\":1}}],[\"body标签中\",{\"1\":{\"1293\":1}}],[\"body中\",{\"1\":{\"188\":1}}],[\"body之间有个空行\",{\"1\":{\"174\":1}}],[\"body\",{\"0\":{\"178\":1,\"1294\":1},\"1\":{\"115\":1,\"174\":1,\"1295\":2}}],[\"body><\",{\"1\":{\"1927\":1}}],[\"body>\",{\"1\":{\"65\":1,\"1293\":1,\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1326\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1482\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1616\":1,\"1617\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1656\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1690\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"1928\":1,\"1951\":1,\"1952\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2131\":1,\"2132\":2,\"2159\":2,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2750\":1,\"2786\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"bom中其他对象\",{\"0\":{\"1461\":1}}],[\"bom与dom的关系\",{\"0\":{\"1448\":1}}],[\"bom的顶层是window对象\",{\"1\":{\"1446\":1}}],[\"bom的定义\",{\"1\":{\"72\":1}}],[\"bom没有统一的标准\",{\"1\":{\"1446\":1}}],[\"bom有一系列对象组成\",{\"1\":{\"1446\":1}}],[\"bom是browserobject\",{\"1\":{\"1446\":1}}],[\"bom可以理解为\",{\"1\":{\"1372\":1}}],[\"bom\",{\"1\":{\"1372\":2,\"1448\":1}}],[\"bom编程可以实现动态控制浏览器本身行为的效果\",{\"1\":{\"1372\":1}}],[\"bom编程\",{\"0\":{\"1443\":1},\"1\":{\"56\":1,\"1448\":1}}],[\"如上述代码\",{\"1\":{\"2764\":1}}],[\"如上图应该是dispatcherservlet\",{\"1\":{\"2763\":1}}],[\"如datasourcetransactionmanager默认支持\",{\"1\":{\"2733\":1}}],[\"如硬盘被损坏\",{\"1\":{\"2688\":1}}],[\"如需注册\",{\"1\":{\"2508\":1}}],[\"如需同步请求\",{\"1\":{\"2155\":1}}],[\"如<>\",{\"1\":{\"2356\":1,\"2358\":1}}],[\"如struts1\",{\"1\":{\"2740\":1}}],[\"如spring\",{\"1\":{\"2318\":1}}],[\"如servlet\",{\"1\":{\"1736\":1,\"1785\":1}}],[\"如select\",{\"1\":{\"1116\":1}}],[\"如磁盘\",{\"1\":{\"2199\":1}}],[\"如内存中的对象\",{\"1\":{\"2199\":1}}],[\"如丝般顺滑\",{\"1\":{\"2179\":1}}],[\"如听见请求头\",{\"1\":{\"2155\":1}}],[\"如脚本语言\",{\"1\":{\"1958\":1}}],[\"如网页的编码方式\",{\"1\":{\"1956\":1}}],[\"如网易\",{\"1\":{\"919\":1}}],[\"如很多政府和事业单位的项目中就存在大量的jsp应用情况\",{\"1\":{\"1950\":1}}],[\"如此一来整个应用的开发效率必然会有质的提升\",{\"1\":{\"1946\":1}}],[\"如此之类\",{\"1\":{\"209\":1}}],[\"如获取当前客户端浏览器的访问服务端的次数时就需要会话状态的维持\",{\"1\":{\"1882\":1}}],[\"如html\",{\"1\":{\"1785\":1}}],[\"如wex5前端开源框架等\",{\"1\":{\"1557\":1}}],[\"如只写alert\",{\"1\":{\"1450\":1}}],[\"如c\",{\"1\":{\"1374\":2}}],[\"如有小数位\",{\"1\":{\"1361\":1}}],[\"如登录注册\",{\"1\":{\"1329\":1}}],[\"如下\",{\"1\":{\"2779\":1,\"2789\":1}}],[\"如下图\",{\"1\":{\"2727\":1,\"2730\":1}}],[\"如下图所示\",{\"1\":{\"652\":1,\"922\":1,\"1519\":1}}],[\"如下面这两个表所示的设计就是一个满足第三范式的数据库表\",{\"1\":{\"1048\":1}}],[\"如下所示\",{\"1\":{\"1047\":1}}],[\"如下表所示\",{\"1\":{\"1046\":1,\"1047\":1}}],[\"如表所示\",{\"1\":{\"981\":1}}],[\"如删除4行记录\",{\"1\":{\"976\":1}}],[\"如图1\",{\"1\":{\"917\":1}}],[\"如学生管理系统\",{\"1\":{\"911\":1}}],[\"如筛选\",{\"1\":{\"857\":1}}],[\"如优化import\",{\"1\":{\"635\":1}}],[\"如java\",{\"1\":{\"573\":1}}],[\"如\",{\"1\":{\"380\":3,\"502\":1,\"617\":1,\"1116\":1,\"1135\":1,\"1287\":1,\"1355\":1,\"1376\":1,\"1479\":3,\"1920\":1,\"2297\":1,\"2332\":1,\"2334\":2,\"2335\":2,\"2530\":1,\"2587\":1,\"2782\":1}}],[\"如何考虑使用它的\",{\"1\":{\"2823\":1}}],[\"如何拿到主键呢\",{\"1\":{\"2408\":1}}],[\"如何记录日志\",{\"0\":{\"1283\":1}}],[\"如何实现connection对象的反复使用呢\",{\"1\":{\"1271\":1}}],[\"如何判断一条sql执行的性能是否高效\",{\"1\":{\"1136\":1}}],[\"如何写入当前的时间\",{\"1\":{\"972\":1}}],[\"如何保证数据的安全性和完整性\",{\"1\":{\"910\":1}}],[\"如何高效的获取和维护数据\",{\"1\":{\"910\":1}}],[\"如何科学的组织和存储数据\",{\"1\":{\"910\":1}}],[\"如何配置ssh\",{\"0\":{\"763\":1}}],[\"如何配置聚合\",{\"0\":{\"718\":1}}],[\"如何分工呢\",{\"1\":{\"653\":1}}],[\"如何管理等是确定的\",{\"1\":{\"233\":1}}],[\"如何组织管理数据的\",{\"1\":{\"224\":1}}],[\"如期发布\",{\"1\":{\"71\":1}}],[\"如子网ip为\",{\"1\":{\"48\":1}}],[\"如果路径前的关键字是forward\",{\"1\":{\"2866\":1}}],[\"如果参数名与url中的名字保持一致\",{\"1\":{\"2826\":1}}],[\"如果参数名不一致\",{\"1\":{\"2794\":1}}],[\"如果原来有\",{\"1\":{\"2737\":1}}],[\"如果原始数据有效则执行拆分\",{\"1\":{\"2509\":1}}],[\"如果a\",{\"1\":{\"2732\":1}}],[\"如果a依赖b\",{\"1\":{\"687\":1}}],[\"如果当a是非事务执行\",{\"1\":{\"2728\":1}}],[\"如果当前事物不存在\",{\"1\":{\"2729\":1}}],[\"如果当前上下文中不存在事务\",{\"1\":{\"2727\":1}}],[\"如果当前存在事务\",{\"1\":{\"2725\":4}}],[\"如果当前没有事务\",{\"1\":{\"2725\":4}}],[\"如果当前没有可用空间\",{\"1\":{\"324\":2}}],[\"如果当前元素是迭代的最后一个元素\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"如果当前元素是迭代的第一个元素\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"如果当前对象中没有\",{\"1\":{\"1424\":1}}],[\"如果当前集合长度大于参数则进行截取\",{\"1\":{\"865\":1,\"866\":1}}],[\"如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值一样\",{\"1\":{\"279\":1}}],[\"如果b\",{\"1\":{\"2728\":1}}],[\"如果base标签不写\",{\"1\":{\"1869\":1,\"1870\":1}}],[\"如果事务切面优先级高\",{\"1\":{\"2647\":1}}],[\"如果变量名字直接为接口\",{\"1\":{\"2596\":1}}],[\"如果返回的是null那么我们通过getbean方法将得不到目标\",{\"1\":{\"2572\":1}}],[\"如果本地缓存中没有查询到数据\",{\"1\":{\"2493\":1}}],[\"如果再mybatis中配置了具体的日志指向\",{\"1\":{\"2487\":1}}],[\"如果再读再复制\",{\"1\":{\"313\":1}}],[\"如果缓存命中了则会释放对应的锁\",{\"1\":{\"2481\":1}}],[\"如果二级缓存没有命中\",{\"1\":{\"2471\":1}}],[\"如果满足条件1\",{\"1\":{\"2443\":1}}],[\"如果sql查询到的字段与pojo的属性名不一致\",{\"1\":{\"2419\":1}}],[\"如果servlet上嵌入html字符串处理就比较麻烦\",{\"1\":{\"1953\":1}}],[\"如果属性\",{\"1\":{\"2334\":1}}],[\"如果jmx设置为true\",{\"1\":{\"2301\":1}}],[\"如果jsp中配置的错误页和web\",{\"1\":{\"1960\":1}}],[\"如果jsp没有更新时\",{\"1\":{\"1933\":1}}],[\"如果修改有两种方式\",{\"1\":{\"2299\":1}}],[\"如果\",{\"1\":{\"2287\":1,\"2301\":1}}],[\"如果实体封装的属性和数据库的字段不一致\",{\"1\":{\"2439\":1}}],[\"如果实体类中的字段名字与数据库中的字段名字不符的话\",{\"1\":{\"2422\":1}}],[\"如果实体类中的字段与数据库不一致\",{\"1\":{\"2228\":1}}],[\"如果实体类中的字段与数据库一致\",{\"1\":{\"2228\":1}}],[\"如果实例化的时候不明确的指定类的泛型\",{\"1\":{\"238\":1}}],[\"如果表名和我们的实体类的名称不一致的话\",{\"1\":{\"2223\":1}}],[\"如果表单项内容为空\",{\"1\":{\"1580\":1}}],[\"如果将开发完成的软件比作是一套已经装修完毕的新房\",{\"1\":{\"2197\":1}}],[\"如果缺少了同源策略\",{\"1\":{\"2168\":1}}],[\"如果该方法返回false\",{\"1\":{\"2155\":1}}],[\"如果该值是keep\",{\"1\":{\"177\":1}}],[\"如果已经存在一个事务中\",{\"1\":{\"2725\":1}}],[\"如果已经不是字符串\",{\"1\":{\"2140\":1}}],[\"如果已到达流的末尾则为\",{\"1\":{\"404\":2}}],[\"如果响应的数据是一个对象或者对象集合\",{\"1\":{\"2122\":1}}],[\"如果服务器给我们响应的数据非常简答\",{\"1\":{\"2119\":1}}],[\"如果发生回滚\",{\"1\":{\"2727\":1}}],[\"如果发生如下情况\",{\"1\":{\"2081\":1}}],[\"如果发送信息不希望被转换\",{\"1\":{\"2155\":1}}],[\"如果发现jsp网页有更新修改时\",{\"1\":{\"1933\":1}}],[\"如果登录过\",{\"1\":{\"2063\":1}}],[\"如果没登录\",{\"1\":{\"2063\":1}}],[\"如果没有在springmvc\",{\"1\":{\"2777\":1}}],[\"如果没有配置\",{\"1\":{\"2315\":1}}],[\"如果没有登录\",{\"1\":{\"2059\":1}}],[\"如果没有登录过\",{\"1\":{\"1904\":1,\"1910\":1}}],[\"如果没有超时或者没有调用invalidate\",{\"1\":{\"1900\":1}}],[\"如果没有sessionid则不会创建新的httpsession对象\",{\"1\":{\"1897\":1}}],[\"如果没有sdk\",{\"1\":{\"1775\":1}}],[\"如果没有则直接读取系统环境变量中的值作为他们的默认值\",{\"1\":{\"1779\":1}}],[\"如果没有使用number修饰符\",{\"1\":{\"1676\":1}}],[\"如果没有对应继续向下执行\",{\"1\":{\"1250\":1}}],[\"如果没有指定等级\",{\"1\":{\"1003\":1}}],[\"如果没有io包\",{\"1\":{\"651\":1}}],[\"如果没有被加载\",{\"1\":{\"570\":1}}],[\"如果没有的话则在创建一个新的\",{\"1\":{\"433\":1}}],[\"如果没有元素则等待指定的时间\",{\"1\":{\"324\":1}}],[\"如果没有元素则一直等待\",{\"1\":{\"324\":1}}],[\"如果没有空余空间则等待\",{\"1\":{\"324\":1}}],[\"如果没有\",{\"1\":{\"279\":1,\"1568\":1,\"1775\":1,\"2046\":1,\"2737\":3}}],[\"如果没有就显示null\",{\"1\":{\"21\":1}}],[\"如果对应的位置没有值怎么办\",{\"1\":{\"2031\":1}}],[\"如果对象包含值\",{\"1\":{\"853\":2}}],[\"如果type属性为percent或number\",{\"1\":{\"2029\":1}}],[\"如果table\",{\"1\":{\"280\":1}}],[\"如果table对应的索引位置\",{\"1\":{\"279\":1}}],[\"如果除以0\",{\"1\":{\"1987\":1}}],[\"如果省略域标志\",{\"1\":{\"1981\":1}}],[\"如果开发团队能完成前后端分离的转型\",{\"1\":{\"1947\":1}}],[\"如果开启缓存\",{\"1\":{\"1250\":1}}],[\"如果希望能够独立运行就需要借助基于node\",{\"1\":{\"1937\":1}}],[\"如果希望跳过前面几个元素\",{\"1\":{\"866\":1}}],[\"如果用于向浏览器响应页面资源操作非常繁琐\",{\"1\":{\"1927\":1}}],[\"如果用户名和密码为\",{\"1\":{\"1909\":1}}],[\"如果用户使用\",{\"1\":{\"1216\":1}}],[\"如果用户在使用社区版时出现了问题\",{\"1\":{\"920\":1}}],[\"如果计数器为0或者cookie为空则表明初次访问\",{\"1\":{\"1893\":1}}],[\"如果for循环走还没有取到计数器\",{\"1\":{\"1893\":1}}],[\"如果finally与return一起的时候\",{\"1\":{\"23\":1}}],[\"如果cookie不为空切计数器不为0\",{\"1\":{\"1893\":1}}],[\"如果catch代码块中出现以下情况\",{\"1\":{\"23\":1}}],[\"如果catch捕获异常成功\",{\"1\":{\"20\":1}}],[\"如果catch中异常类型和你出的异常类型不匹配的话\",{\"1\":{\"20\":1}}],[\"如果catch中异常类型和你出的异常类型匹配的话\",{\"1\":{\"20\":1}}],[\"如果存储的数据中含有中文\",{\"1\":{\"1889\":1}}],[\"如果源servlet在进行请求转发之前\",{\"1\":{\"1855\":1}}],[\"如果目标组件为html文档\",{\"1\":{\"1858\":1}}],[\"如果目标资源文件系统中的静态html文档\",{\"1\":{\"1854\":1}}],[\"如果目标资源为servlet或jsp\",{\"1\":{\"1854\":1,\"1858\":1}}],[\"如果目标长度长于复制的数组\",{\"1\":{\"300\":1}}],[\"如果生成的是偶数\",{\"1\":{\"1787\":1}}],[\"如果生成的是奇数\",{\"1\":{\"1787\":1}}],[\"如果上下文中存在事务\",{\"1\":{\"2733\":1}}],[\"如果上下文中已经存在事务\",{\"1\":{\"2727\":1}}],[\"如果上一步没有勾选web\",{\"1\":{\"1776\":1}}],[\"如果上面条件成立\",{\"1\":{\"279\":1}}],[\"如果未找到则交给在engine中defaulthost指定的主机处理\",{\"1\":{\"1767\":1}}],[\"如果每个请求都含有很多的数据库操作\",{\"1\":{\"1757\":1}}],[\"如果逻辑很复杂需要大量的计算\",{\"1\":{\"1757\":1}}],[\"如果还是不行\",{\"1\":{\"1755\":1}}],[\"如果之前已经安装了其他tomcat并且还配置了catalina\",{\"1\":{\"1740\":1}}],[\"如果之前配置过则删除\",{\"1\":{\"763\":1}}],[\"如果下次vue进行编译的时候会按照这个文件进行编译\",{\"1\":{\"1686\":1}}],[\"如果只使用鼠标修饰符\",{\"1\":{\"1673\":1}}],[\"如果只有一个参数\",{\"1\":{\"80\":1}}],[\"如果方法运行没有出现异常\",{\"1\":{\"2642\":1}}],[\"如果方法运行过程中出现异常\",{\"1\":{\"2641\":1}}],[\"如果方法中没有传入值\",{\"1\":{\"1647\":1}}],[\"如果方法的返回值类型是void就不能写\",{\"1\":{\"537\":1}}],[\"如果页面的涉及范围特别大并且不是特别频繁的切换使用v\",{\"1\":{\"1625\":1}}],[\"如果页面切换的特别频繁使用v\",{\"1\":{\"1625\":1}}],[\"如果您想了解有关flexbox的更多信息\",{\"1\":{\"1601\":1}}],[\"如果父级节点有定位\",{\"1\":{\"1535\":1}}],[\"如果父类不指定泛型\",{\"1\":{\"239\":1}}],[\"如果直到找到body了也没有定位\",{\"1\":{\"1535\":1}}],[\"如果浮动元素的高度不同\",{\"1\":{\"1519\":1}}],[\"如果包含框太窄\",{\"1\":{\"1519\":1}}],[\"如果把所有三个框都向左移动\",{\"1\":{\"1519\":1}}],[\"如果函数中有返回值\",{\"1\":{\"1370\":1}}],[\"如果类型相同\",{\"1\":{\"1364\":1}}],[\"如果类型不一致\",{\"1\":{\"1363\":2}}],[\"如果类型一致\",{\"1\":{\"1363\":2}}],[\"如果都是number那么就是算数中的加法\",{\"1\":{\"1362\":1}}],[\"如果和0取余数\",{\"1\":{\"1361\":1,\"1987\":1}}],[\"如果多个用户同时开启事务并对同一数据进行读写操作的话\",{\"1\":{\"2693\":1}}],[\"如果多个mapper\",{\"1\":{\"2345\":1}}],[\"如果多个框架用frameset标签用cols\",{\"1\":{\"1322\":1}}],[\"如果多个生产者和多个消费者时\",{\"1\":{\"489\":1}}],[\"如果正确响应success\",{\"1\":{\"1792\":2}}],[\"如果正确\",{\"1\":{\"1250\":1}}],[\"如果出现错误\",{\"1\":{\"1250\":1}}],[\"如果出现异常\",{\"1\":{\"1234\":1}}],[\"如果datasource对象实现与一个支持连接池的中间层的服务器一起工作\",{\"1\":{\"1209\":1}}],[\"如果任务有自定义标记则为\",{\"1\":{\"1198\":1}}],[\"如果为true或者默认不配置\",{\"1\":{\"1689\":1}}],[\"如果为\",{\"1\":{\"1198\":1}}],[\"如果为空则l该用户可以不需要密码登陆服务器\",{\"1\":{\"1115\":1}}],[\"如果为空返回null\",{\"1\":{\"854\":1}}],[\"如果文件名中有日期\",{\"1\":{\"1198\":1}}],[\"如果文件存在则删除\",{\"1\":{\"387\":1}}],[\"如果数据库系统只执行这些操作中的一部分\",{\"1\":{\"2685\":1}}],[\"如果数据库表中的所有字段值都是不可分解的原子值\",{\"1\":{\"1046\":1}}],[\"如果数据不是字符串\",{\"1\":{\"2155\":1}}],[\"如果数据类型不同\",{\"1\":{\"1364\":1}}],[\"如果数据量非常巨大\",{\"1\":{\"1128\":1}}],[\"如果value提前写好\",{\"1\":{\"1333\":1}}],[\"如果value1不为空\",{\"1\":{\"1094\":1}}],[\"如果value是真\",{\"1\":{\"1094\":1}}],[\"如果第二个参数是0\",{\"1\":{\"1400\":1}}],[\"如果第二个参数为true\",{\"1\":{\"407\":1}}],[\"如果第1个字段相等\",{\"1\":{\"1040\":1}}],[\"如果子表中有匹配的记录\",{\"1\":{\"1003\":1}}],[\"如果子类标注了版本号\",{\"1\":{\"714\":1}}],[\"如果使用item和index的时候一定要使用括号包裹起来\",{\"1\":{\"1632\":1}}],[\"如果使用预编译功能\",{\"1\":{\"1250\":1}}],[\"如果使用了外键约束的表\",{\"1\":{\"1001\":1}}],[\"如果使用tab选中\",{\"1\":{\"624\":1}}],[\"如果创建唯一约束时未指定名称\",{\"1\":{\"992\":1}}],[\"如果列使用了非空约束\",{\"1\":{\"972\":1}}],[\"如果超过\",{\"1\":{\"972\":1}}],[\"如果超过数组长度\",{\"1\":{\"393\":1}}],[\"如果配置出错\",{\"1\":{\"922\":1}}],[\"如果需要提交很大的数据量\",{\"1\":{\"2163\":1}}],[\"如果需要在出错时执行函数\",{\"1\":{\"2160\":1,\"2164\":1}}],[\"如果需要发送同步请求\",{\"1\":{\"2138\":1}}],[\"如果需要servlet在服务启动时就实例化并初始化\",{\"1\":{\"1825\":1}}],[\"如果需要使用其他协议\",{\"1\":{\"1765\":1}}],[\"如果需要\",{\"1\":{\"1156\":1}}],[\"如果需要获取的类型为具体的实现\",{\"1\":{\"878\":1}}],[\"如果需要将所有数据归纳得到一个数据\",{\"1\":{\"873\":1}}],[\"如果需要将数据排序\",{\"1\":{\"868\":1}}],[\"如果需要判断数据是否匹配指定的条件\",{\"1\":{\"870\":1}}],[\"如果需要去除重复的数据\",{\"1\":{\"869\":1}}],[\"如果调用对象包含值\",{\"1\":{\"853\":4}}],[\"如果lambda表达式所要实现的方案\",{\"1\":{\"827\":1}}],[\"如果接口中新增抽象方法\",{\"1\":{\"816\":1}}],[\"如果想编写自己的mybatis插件可以通过实现org\",{\"1\":{\"2516\":1}}],[\"如果想区分请求方式\",{\"1\":{\"1820\":1}}],[\"如果想要更换图标样式\",{\"1\":{\"1317\":1}}],[\"如果想要表示确定的1个字符\",{\"1\":{\"1035\":1}}],[\"如果想要表示0~n个字符\",{\"1\":{\"1035\":1}}],[\"如果想让该用户可以从任意远程主机登陆\",{\"1\":{\"1115\":1}}],[\"如果想访问external\",{\"1\":{\"812\":1}}],[\"如果想将你的修改合并到原项目中时\",{\"1\":{\"757\":1}}],[\"如果想直接生成\",{\"1\":{\"92\":1}}],[\"如果要多个参数\",{\"1\":{\"2371\":1}}],[\"如果要发送dom树信息或者其他不希望转换的信息\",{\"1\":{\"2153\":1}}],[\"如果要产生修改我们应该注意线程安全问题\",{\"1\":{\"1824\":1}}],[\"如果要使用的话\",{\"1\":{\"1824\":1}}],[\"如果要授予该用户对所有数据库和表的相应操作权限则可用\",{\"1\":{\"1116\":1}}],[\"如果要授予所的权限则使用all\",{\"1\":{\"1116\":1}}],[\"如果要保证查询出某张表的全部数据情况下进行连接查询\",{\"1\":{\"1058\":1}}],[\"如果要获取订单的商品信息\",{\"1\":{\"1047\":1}}],[\"如果要访问哪个数据库\",{\"1\":{\"926\":1}}],[\"如果要修改公共文件\",{\"1\":{\"753\":1}}],[\"如果要处理其他类型的文件\",{\"1\":{\"115\":1}}],[\"如果某连接器支持的协议是http\",{\"1\":{\"1765\":1}}],[\"如果某个元素是父元素中唯一的子元素\",{\"1\":{\"1552\":1}}],[\"如果某个类使用了被\",{\"1\":{\"556\":1}}],[\"如果某一个分支开发失败\",{\"1\":{\"747\":1}}],[\"如果日志很多\",{\"1\":{\"739\":1}}],[\"如果遇到jar包下载不全等其他问题\",{\"1\":{\"685\":1}}],[\"如果设置成provided的话\",{\"1\":{\"680\":1,\"688\":1}}],[\"如果在springmvc\",{\"1\":{\"2777\":1,\"2859\":1}}],[\"如果在a\",{\"1\":{\"2698\":1}}],[\"如果在加入cache元素的前提下让个别select\",{\"1\":{\"2480\":1}}],[\"如果在tomcat的web\",{\"1\":{\"1899\":1}}],[\"如果在请求中包含了jsessionid\",{\"1\":{\"1897\":1}}],[\"如果在请求中没有jsessionid\",{\"1\":{\"1897\":1}}],[\"如果在缓存中能够找到这个servlet就不会再做次实例化处理\",{\"1\":{\"1826\":1}}],[\"如果在缓存外\",{\"1\":{\"364\":1}}],[\"如果在某个业务中需要执行多条sql语句\",{\"1\":{\"1101\":1}}],[\"如果在方法声明中使用ctrl\",{\"1\":{\"643\":1}}],[\"如果指向查找类\",{\"1\":{\"609\":1}}],[\"如果myanno注解使用了\",{\"1\":{\"556\":1}}],[\"如果注解没有加retention元注解\",{\"1\":{\"553\":1}}],[\"如果自定义注解没有参数\",{\"1\":{\"551\":1}}],[\"如果自定义注解内部参数自带默认值\",{\"1\":{\"551\":1}}],[\"如果自定义注解只有一个参数\",{\"1\":{\"550\":1}}],[\"如果自动装箱值在\",{\"1\":{\"364\":1}}],[\"如果锁多了就会效率低\",{\"1\":{\"465\":1}}],[\"如果处理流包裹着节点流的话\",{\"1\":{\"418\":1}}],[\"如果读取不到则返回\",{\"1\":{\"405\":3}}],[\"如果删除目录的话\",{\"1\":{\"390\":1}}],[\"如果跟math中方法重复了\",{\"1\":{\"368\":1}}],[\"如果传入的数字≥integercache\",{\"1\":{\"364\":1}}],[\"如果取值在\",{\"1\":{\"364\":1}}],[\"如果取元素时队列为空\",{\"1\":{\"334\":1}}],[\"如果getdelay方法返回的值大于0\",{\"1\":{\"354\":1}}],[\"如果此方法返回的值小０或者等于０\",{\"1\":{\"354\":1}}],[\"如果此列表为空\",{\"1\":{\"260\":2}}],[\"如果队列为空\",{\"1\":{\"337\":1}}],[\"如果队列满\",{\"1\":{\"337\":1}}],[\"如果时间到了\",{\"1\":{\"337\":1}}],[\"如果放数据时达到最大长度\",{\"1\":{\"334\":1}}],[\"如果达到队列最大长度则指向0\",{\"1\":{\"332\":1,\"333\":1}}],[\"如果立即可行且不违反容量限制\",{\"1\":{\"324\":2}}],[\"如果一级缓存也没有命中\",{\"1\":{\"2471\":1}}],[\"如果一段是字符串\",{\"1\":{\"1362\":1}}],[\"如果一个属性在不只一个地方进行了配置\",{\"1\":{\"2333\":1}}],[\"如果一个查询语句嵌套在另一个查询语句里面\",{\"1\":{\"1069\":1}}],[\"如果一个类中已经存在一个成员方法\",{\"1\":{\"828\":1}}],[\"如果一万个线程都添加操作\",{\"1\":{\"313\":1}}],[\"如果一条链表的元素个数到达treeify\",{\"1\":{\"279\":1}}],[\"如果添加相同的key\",{\"1\":{\"290\":1}}],[\"如果添加的不是第一个节点\",{\"1\":{\"263\":1}}],[\"如果添加的是第一个节点\",{\"1\":{\"263\":1}}],[\"如果相等\",{\"1\":{\"288\":1}}],[\"如果相同\",{\"1\":{\"279\":1}}],[\"如果按照长度大小排序\",{\"1\":{\"288\":1}}],[\"如果条链表的元素个数到达treeify\",{\"1\":{\"280\":1}}],[\"如果p\",{\"1\":{\"279\":1}}],[\"如果有多个切面嵌套的情况\",{\"1\":{\"2647\":1}}],[\"如果有多个包需要扫描\",{\"1\":{\"2588\":1}}],[\"如果有多个账号存在的话\",{\"1\":{\"764\":1}}],[\"如果有哪个客户端浏览器对应的httpsession的失效时间已到\",{\"1\":{\"1899\":1}}],[\"如果有则返回\",{\"1\":{\"1897\":1}}],[\"如果有字符串\",{\"1\":{\"1362\":1}}],[\"如果有结果直接返回结果\",{\"1\":{\"1250\":1}}],[\"如果有自增的字段可以在插值的时候使用null代替\",{\"1\":{\"972\":1}}],[\"如果有两个流希望何必成为一个流\",{\"1\":{\"875\":1}}],[\"如果有值就返回原有值\",{\"1\":{\"853\":3}}],[\"如果有值则返回\",{\"1\":{\"853\":3}}],[\"如果有重复的元素\",{\"1\":{\"316\":1}}],[\"如果有线程来读数据\",{\"1\":{\"313\":1}}],[\"如果有相同情况\",{\"1\":{\"279\":1}}],[\"如果有\",{\"1\":{\"279\":1,\"763\":1,\"2046\":1,\"2737\":3}}],[\"如果index在链表的后半段\",{\"1\":{\"263\":1}}],[\"如果index在链表的前半段\",{\"1\":{\"263\":1}}],[\"如果不提供将报错\",{\"1\":{\"2840\":1}}],[\"如果不一致\",{\"1\":{\"2826\":1}}],[\"如果不一致可以使用\",{\"1\":{\"2794\":1}}],[\"如果不指定\",{\"1\":{\"2141\":1,\"2155\":1}}],[\"如果不指定则为当前的程序编码格式一致\",{\"1\":{\"421\":1}}],[\"如果不存在事务\",{\"1\":{\"2733\":1}}],[\"如果不存在\",{\"1\":{\"2478\":1}}],[\"如果不存在返回null\",{\"1\":{\"2048\":1}}],[\"如果不存在则再次创建并指向新的地址\",{\"1\":{\"393\":1}}],[\"如果不包含纪元的年份小于\",{\"1\":{\"2030\":1}}],[\"如果不修改\",{\"1\":{\"1777\":1}}],[\"如果不考虑兼容低版本的浏览器可以使用2\",{\"1\":{\"1542\":1}}],[\"如果不是全字段插入数据的话\",{\"1\":{\"972\":1}}],[\"如果不是的话\",{\"1\":{\"296\":1}}],[\"如果不用命令设置\",{\"1\":{\"726\":1}}],[\"如果不写\",{\"1\":{\"680\":1,\"688\":1}}],[\"如果不了解这个情况\",{\"1\":{\"651\":1}}],[\"如果不注明则程序自动在编译时创建\",{\"1\":{\"427\":1}}],[\"如果不需要新的integer实例\",{\"1\":{\"363\":1}}],[\"如果不相同\",{\"1\":{\"279\":1}}],[\"如果不加的话\",{\"1\":{\"241\":1}}],[\"如果不清楚这个对象有哪些方法可以使用\",{\"1\":{\"140\":1}}],[\"如果请求的是html页面\",{\"1\":{\"209\":1}}],[\"如果是请求转发\",{\"1\":{\"2866\":1}}],[\"如果是单一默认属性\",{\"1\":{\"2809\":1}}],[\"如果是单列\",{\"1\":{\"992\":1}}],[\"如果是数组\",{\"1\":{\"2140\":1}}],[\"如果是基于get方式提交的\",{\"1\":{\"1826\":1}}],[\"如果是post请求就执行dopost方法\",{\"1\":{\"1826\":1}}],[\"如果是ios系统\",{\"1\":{\"1668\":1}}],[\"如果是windows系统代表的是键盘的徽标键\",{\"1\":{\"1668\":1}}],[\"如果是使用window对象调用的方法和访问的属性\",{\"1\":{\"1454\":1,\"1455\":1,\"1456\":1}}],[\"如果是布尔类型和number相加\",{\"1\":{\"1362\":1}}],[\"如果是本地用户可用localhost\",{\"1\":{\"1115\":1}}],[\"如果是组合列\",{\"1\":{\"992\":1}}],[\"如果是多列组合的主键约束\",{\"1\":{\"986\":1}}],[\"如果是登录本机\",{\"1\":{\"925\":1}}],[\"如果是跨平台项目\",{\"1\":{\"725\":2}}],[\"如果是0\",{\"1\":{\"296\":1}}],[\"如果是1的话\",{\"1\":{\"296\":1}}],[\"如果是一个对象就不用比较equals了\",{\"1\":{\"294\":1}}],[\"如果是一颗红黑树\",{\"1\":{\"279\":1}}],[\"如果是第一个元素的话\",{\"1\":{\"263\":1}}],[\"如果是js就是js代码\",{\"1\":{\"209\":1}}],[\"如果是纯数据就是返回纯数据\",{\"1\":{\"209\":1}}],[\"如果是用默认值则直接回车即可\",{\"1\":{\"92\":1}}],[\"如果值是close则表示基于短连接方式\",{\"1\":{\"177\":1}}],[\"如果它值为true\",{\"1\":{\"145\":2}}],[\"如果安装时想指定特定的版本\",{\"1\":{\"94\":1}}],[\"如果你做的是单表的查询并且封装的实体和数据库的字段一一对应\",{\"1\":{\"2439\":1}}],[\"如果你匹配的是一个javabean\",{\"1\":{\"2437\":1}}],[\"如果你在属性名中使用了\",{\"1\":{\"2334\":1}}],[\"如果你在地址栏看到中文\",{\"1\":{\"1330\":1}}],[\"如果你的应用有德语\",{\"1\":{\"1156\":1}}],[\"如果你又没有对工作区做任何修改\",{\"1\":{\"729\":1}}],[\"如果你放入的元素\",{\"1\":{\"294\":1}}],[\"如果你是后端程序员\",{\"1\":{\"84\":1}}],[\"如果你是一个前端程序员\",{\"1\":{\"84\":1}}],[\"如果你熟悉javascript\",{\"1\":{\"84\":1}}],[\"如果内部直接时返回值\",{\"1\":{\"80\":1}}],[\"如果继承的是检查异常\",{\"1\":{\"36\":1}}],[\"如果继承的是运行时异常\",{\"1\":{\"36\":1}}],[\"如果我们将controller层中返回viod方法\",{\"1\":{\"2859\":1}}],[\"如果我们把它设置成只读\",{\"1\":{\"2714\":1}}],[\"如果我们有其他类还想使用代理那就必须再写一个代理类\",{\"1\":{\"2606\":1}}],[\"如果我们想在spring容器中完成bean实例化\",{\"1\":{\"2572\":1}}],[\"如果我们想要得到resultset里的所有记录\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"如果我们想要详细修改冲突内容则点击close\",{\"1\":{\"786\":1}}],[\"如果我们的主键字段不是id\",{\"1\":{\"2226\":1}}],[\"如果我们在web项目中配置了超时时间\",{\"1\":{\"1899\":1}}],[\"如果我们没有必要区分请求方式的差异\",{\"1\":{\"1820\":1}}],[\"如果我们设置了系统修饰符\",{\"1\":{\"1668\":1}}],[\"如果我们对timestamp类型的字段没有明确赋值\",{\"1\":{\"942\":1}}],[\"如果我们需要点击某个事件\",{\"1\":{\"1671\":1}}],[\"如果我们需要找到某些数据\",{\"1\":{\"871\":1}}],[\"如果我们需要将流中的元素映射到另一个流中\",{\"1\":{\"867\":1}}],[\"如果我们需要源码和文档的时候我们到时候再针对某个依赖包进行联网下载即可\",{\"1\":{\"676\":1}}],[\"如果我们要产生某个类的对象\",{\"1\":{\"570\":1}}],[\"如果我们不写position属性的话\",{\"1\":{\"1532\":1}}],[\"如果我们不指定长度时\",{\"1\":{\"336\":1}}],[\"如果我们不想finally代码块执行\",{\"1\":{\"26\":1}}],[\"如果我们输入非int类型的数据时会出现\",{\"1\":{\"16\":1}}],[\"如果输入除数为时会出现\",{\"1\":{\"16\":1}}],[\">类型\",{\"1\":{\"2800\":2,\"2801\":2}}],[\">代码段1<\",{\"1\":{\"2461\":1}}],[\">代码段<\",{\"1\":{\"2461\":1}}],[\">语句块<\",{\"1\":{\"2455\":1}}],[\">语句2<\",{\"1\":{\"2449\":1}}],[\">语句1<\",{\"1\":{\"2443\":1,\"2449\":1}}],[\">之后在数据库中仍旧能看到此条数据记录\",{\"1\":{\"2231\":1}}],[\">触发<\",{\"1\":{\"2120\":1}}],[\">g<\",{\"1\":{\"2025\":1,\"2031\":1}}],[\">gtgreaterthen\",{\"1\":{\"1985\":1}}],[\">f<\",{\"1\":{\"2025\":1,\"2031\":1}}],[\">不及格<\",{\"1\":{\"2022\":1}}],[\">不能使用数字<\",{\"1\":{\"1579\":1}}],[\">不能为空<\",{\"1\":{\"1579\":1}}],[\">及格<\",{\"1\":{\"2022\":1}}],[\">两种方式书写代码\",{\"1\":{\"1951\":1}}],[\">两次密码不一致<\",{\"1\":{\"1579\":1,\"1586\":1}}],[\">中的代码也在该方法中穿插执行\",{\"1\":{\"1933\":1}}],[\">形式\",{\"1\":{\"1927\":1}}],[\">绝对路径跳转至b1<\",{\"1\":{\"1870\":1}}],[\">绝对路径跳转至a2<\",{\"1\":{\"1870\":1}}],[\">btn<\",{\"1\":{\"2786\":1}}],[\">b转账中发生了异常\",{\"1\":{\"2698\":1}}],[\">b进行了转账行为\",{\"1\":{\"2698\":1}}],[\">b<\",{\"1\":{\"2022\":1,\"2023\":1,\"2025\":1,\"2031\":1}}],[\">base相对路径跳转至b1<\",{\"1\":{\"1870\":1}}],[\">base相对路径跳转至a2<\",{\"1\":{\"1870\":1}}],[\">birthday<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\">相对路径跳转至b1<\",{\"1\":{\"1870\":1}}],[\">相对路径跳转至a2<\",{\"1\":{\"1870\":1}}],[\">扩展名\",{\"1\":{\"1843\":1}}],[\">文字2<\",{\"1\":{\"1718\":1}}],[\">文字1<\",{\"1\":{\"1718\":1}}],[\">文本<\",{\"1\":{\"127\":1}}],[\">清空<\",{\"1\":{\"1701\":1}}],[\">发布<\",{\"1\":{\"1701\":1}}],[\">点我<\",{\"1\":{\"1730\":1}}],[\">点我say\",{\"1\":{\"1646\":1}}],[\">点击减1<\",{\"1\":{\"1613\":1,\"1614\":1,\"1645\":1}}],[\">点击加1<\",{\"1\":{\"1613\":1,\"1614\":1,\"1645\":2}}],[\">点击\",{\"1\":{\"760\":1}}],[\">+1<\",{\"1\":{\"1640\":1,\"1650\":1,\"1662\":1,\"1664\":2,\"1667\":1,\"1670\":1,\"1672\":1,\"1707\":1,\"1711\":1,\"1712\":1,\"1715\":2}}],[\">测试<\",{\"1\":{\"1624\":1}}],[\">测试文字<\",{\"1\":{\"1571\":4,\"1573\":1}}],[\">减1<\",{\"1\":{\"1621\":1,\"1622\":1}}],[\">加1<\",{\"1\":{\"1621\":1,\"1622\":1}}],[\">加粗<\",{\"1\":{\"1188\":1}}],[\">当前数值大于15<\",{\"1\":{\"1621\":1}}],[\">当前数值大于10\",{\"1\":{\"1621\":1,\"1622\":1}}],[\">当前数值大于5\",{\"1\":{\"1621\":1,\"1622\":1}}],[\">当前数值小于5<\",{\"1\":{\"1621\":1,\"1622\":1}}],[\">next<\",{\"1\":{\"1609\":1}}],[\">name<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\">优秀学员<\",{\"1\":{\"1606\":1}}],[\">课程介绍<\",{\"1\":{\"1606\":1}}],[\">讲师介绍<\",{\"1\":{\"1606\":1}}],[\">主页<\",{\"1\":{\"1606\":1}}],[\">至少为5位非空格<\",{\"1\":{\"1586\":1}}],[\">格式必须是至少六位的非数字<\",{\"1\":{\"1586\":1}}],[\">邮箱格式有误<\",{\"1\":{\"1579\":1,\"1586\":1}}],[\">长度不能少于5位<\",{\"1\":{\"1579\":1}}],[\">长度必须在6位之上<\",{\"1\":{\"1579\":1}}],[\">ok<\",{\"1\":{\"1579\":4,\"1586\":4}}],[\">original\",{\"1\":{\"133\":1}}],[\">牛气冲天<\",{\"1\":{\"1567\":1}}],[\">link<\",{\"1\":{\"1564\":1}}],[\">light<\",{\"1\":{\"1564\":1}}],[\">localdatetime\",{\"1\":{\"380\":3}}],[\">warning<\",{\"1\":{\"1564\":1}}],[\">d<\",{\"1\":{\"2022\":1,\"2023\":1,\"2025\":1,\"2031\":1}}],[\">dark<\",{\"1\":{\"1564\":1}}],[\">danger<\",{\"1\":{\"1564\":1}}],[\">demo01\",{\"1\":{\"826\":1}}],[\">冀<\",{\"1\":{\"1555\":1}}],[\">津<\",{\"1\":{\"1555\":1}}],[\">京<\",{\"1\":{\"1555\":1}}],[\">太行山上<\",{\"1\":{\"1549\":1}}],[\">鲁冰花<\",{\"1\":{\"1549\":1}}],[\">阿甘正传<\",{\"1\":{\"1549\":1}}],[\">阿郎的故事<\",{\"1\":{\"1549\":1}}],[\">乱世佳人<\",{\"1\":{\"1549\":1}}],[\">单恋一枝花<\",{\"1\":{\"1549\":1}}],[\">月半小夜曲<\",{\"1\":{\"1549\":1}}],[\">羞答答的玫瑰静悄悄的开<\",{\"1\":{\"1549\":1}}],[\">小朋友\",{\"1\":{\"1549\":1}}],[\">青花瓷<\",{\"1\":{\"1549\":1}}],[\">青岛市<\",{\"1\":{\"1340\":1}}],[\">jsp<\",{\"1\":{\"1548\":1}}],[\">java\",{\"1\":{\"373\":2,\"1336\":1}}],[\">mobile<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\">33<\",{\"1\":{\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1}}],[\">222<\",{\"1\":{\"1535\":2}}],[\">22<\",{\"1\":{\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1}}],[\">2006<\",{\"1\":{\"1319\":1}}],[\">111<\",{\"1\":{\"1535\":2}}],[\">11<\",{\"1\":{\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1}}],[\">10\",{\"1\":{\"1348\":1}}],[\">1001<\",{\"1\":{\"1319\":1}}],[\">啊啊啊啊啊<\",{\"1\":{\"1512\":1}}],[\">我的第一个\",{\"1\":{\"1596\":2}}],[\">我的链接<\",{\"1\":{\"1479\":1}}],[\">我是大于20<\",{\"1\":{\"1622\":1}}],[\">我是5<\",{\"1\":{\"1622\":1}}],[\">我是第二行dom元素<\",{\"1\":{\"1620\":2}}],[\">我是第一行dom元素<\",{\"1\":{\"1620\":2}}],[\">我是div<\",{\"1\":{\"1529\":1}}],[\">我是标题<\",{\"1\":{\"1515\":1}}],[\">我是h2标题<\",{\"1\":{\"1508\":2,\"1509\":2,\"1510\":2}}],[\">我是一个标题<\",{\"1\":{\"1508\":1,\"1509\":1,\"1510\":1}}],[\">羽毛球\",{\"1\":{\"1490\":1,\"1491\":1}}],[\">足球\",{\"1\":{\"1490\":1,\"1491\":1}}],[\">篮球\",{\"1\":{\"1490\":1,\"1491\":1}}],[\">重庆<\",{\"1\":{\"1439\":1}}],[\">上海<\",{\"1\":{\"1439\":1}}],[\">天津<\",{\"1\":{\"1439\":1}}],[\">天津市<\",{\"1\":{\"1340\":1}}],[\">北京<\",{\"1\":{\"1439\":1}}],[\">用户名\",{\"1\":{\"1341\":1,\"1342\":1}}],[\">请在这里填写信息\",{\"1\":{\"1341\":1}}],[\">西安市<\",{\"1\":{\"1340\":1}}],[\">郑州市<\",{\"1\":{\"1340\":1}}],[\">哈尔滨市<\",{\"1\":{\"1340\":1}}],[\">c<\",{\"1\":{\"2022\":1,\"2023\":1,\"2025\":1,\"2031\":1}}],[\">constellation<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\">class<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\">class类具体的对象\",{\"1\":{\"568\":1}}],[\">c\",{\"1\":{\"1336\":1}}],[\">previous<\",{\"1\":{\"1609\":1}}],[\">primary<\",{\"1\":{\"1564\":1}}],[\">pagea<\",{\"1\":{\"1463\":1}}],[\">php\",{\"1\":{\"1336\":1}}],[\">python\",{\"1\":{\"1336\":1}}],[\">女\",{\"1\":{\"1335\":1,\"1555\":1,\"2796\":1}}],[\">男\",{\"1\":{\"1335\":1,\"1555\":1,\"2796\":1}}],[\">90\",{\"1\":{\"1319\":1}}],[\">超链接<\",{\"1\":{\"1315\":1,\"1515\":1}}],[\">书籍<\",{\"1\":{\"1314\":1}}],[\">母婴产品<\",{\"1\":{\"1314\":1}}],[\">化妆品<\",{\"1\":{\"1314\":1}}],[\">手机<\",{\"1\":{\"1314\":1}}],[\">建议父母持合格父母证上岗<\",{\"1\":{\"1306\":1}}],[\">热搜\",{\"1\":{\"1305\":1}}],[\">empno\",{\"1\":{\"2462\":1}}],[\">empdaoimpl\",{\"1\":{\"1263\":1}}],[\">e<\",{\"1\":{\"2022\":1,\"2025\":1,\"2031\":1}}],[\">enum枚举类要求对象\",{\"1\":{\"561\":1}}],[\">百度<\",{\"1\":{\"1189\":1,\"1660\":1}}],[\">age\",{\"1\":{\"2244\":3}}],[\">a<\",{\"1\":{\"2022\":1,\"2023\":1,\"2025\":1,\"2031\":1}}],[\">any\",{\"1\":{\"1071\":1}}],[\">all\",{\"1\":{\"1071\":1}}],[\">等比较运算符\",{\"1\":{\"1071\":1}}],[\">id\",{\"1\":{\"2244\":1}}],[\">info<\",{\"1\":{\"1564\":1}}],[\">int\",{\"1\":{\"362\":1,\"363\":1,\"364\":2}}],[\">integer\",{\"1\":{\"219\":1,\"362\":1,\"363\":1}}],[\">i>0\",{\"1\":{\"874\":1}}],[\">t\",{\"1\":{\"845\":2}}],[\">转换成大写\",{\"1\":{\"840\":1}}],[\">转换成小写\",{\"1\":{\"839\":1,\"840\":1}}],[\">这是第五个div<\",{\"1\":{\"1489\":1}}],[\">这是第四个div<\",{\"1\":{\"1489\":1}}],[\">这是第三个div<\",{\"1\":{\"1488\":1,\"1489\":1}}],[\">这是第二个div<\",{\"1\":{\"1488\":1,\"1489\":1}}],[\">这是第一个div<\",{\"1\":{\"1488\":1,\"1489\":1}}],[\">这是一个h1标题<\",{\"1\":{\"1470\":1}}],[\">这是一个超链接05<\",{\"1\":{\"1312\":1}}],[\">这是一个超链接04<\",{\"1\":{\"1312\":1}}],[\">这是一个超链接03<\",{\"1\":{\"1312\":1}}],[\">这是一个超链接02<\",{\"1\":{\"1312\":1}}],[\">这是一个超链接01<\",{\"1\":{\"1312\":1}}],[\">这个对象会被放入字节码信息中\",{\"1\":{\"570\":1}}],[\">这个过程叫做类的加载\",{\"1\":{\"570\":1}}],[\">这里显示老师的名字<\",{\"1\":{\"147\":1}}],[\">这里显示编号<\",{\"1\":{\"147\":1}}],[\">获取对象的名字\",{\"1\":{\"562\":1}}],[\">获取student的老师的名字<\",{\"1\":{\"142\":1}}],[\">获取student的第二个学校的名字<\",{\"1\":{\"142\":1}}],[\">获取student的学科名字<\",{\"1\":{\"142\":1}}],[\">获取student的名字<\",{\"1\":{\"142\":1}}],[\">即使有异常\",{\"1\":{\"480\":1}}],[\">替换\",{\"1\":{\"396\":1}}],[\">插入\",{\"1\":{\"396\":1}}],[\">util\",{\"1\":{\"372\":1}}],[\">success<\",{\"1\":{\"1564\":1}}],[\">secondary<\",{\"1\":{\"1564\":1}}],[\">servlet<\",{\"1\":{\"1548\":1}}],[\">s>0\",{\"1\":{\"874\":1}}],[\">sql\",{\"1\":{\"372\":2}}],[\">string\",{\"1\":{\"364\":1,\"380\":3}}],[\">大\",{\"1\":{\"288\":1}}],[\">=60\",{\"1\":{\"2022\":1,\"2023\":1}}],[\">=70\",{\"1\":{\"2022\":1,\"2023\":1}}],[\">=80\",{\"1\":{\"2022\":1,\"2023\":1}}],[\">=90\",{\"1\":{\"2022\":1,\"2023\":1}}],[\">=gegreaterthen\",{\"1\":{\"1985\":1}}],[\">=all\",{\"1\":{\"1071\":1}}],[\">=\",{\"1\":{\"279\":1,\"294\":2,\"316\":1,\"363\":1,\"364\":2,\"881\":2,\"1030\":1,\"1360\":1,\"1366\":3,\"1579\":1,\"1617\":1,\"1622\":1,\"1988\":1,\"2239\":1,\"2255\":1,\"2256\":1,\"2503\":2}}],[\">索引值\",{\"1\":{\"279\":1}}],[\">0\",{\"1\":{\"272\":1,\"1274\":1,\"1280\":1,\"1288\":1}}],[\">>bob\",{\"1\":{\"1185\":1}}],[\">>alice\",{\"1\":{\"1185\":1}}],[\">>john\",{\"1\":{\"1185\":3}}],[\">>>>\",{\"1\":{\"1570\":3}}],[\">>>>>>>\",{\"1\":{\"750\":1}}],[\">>>>>>>>>>\",{\"1\":{\"750\":1}}],[\">>>\",{\"1\":{\"279\":1,\"294\":4,\"1574\":2,\"2197\":1,\"2615\":1}}],[\">>\",{\"1\":{\"263\":1,\"1172\":1,\"1801\":1}}],[\">出错\",{\"1\":{\"245\":1}}],[\">王者<\",{\"1\":{\"146\":1}}],[\">钻石<\",{\"1\":{\"146\":1}}],[\">白银<\",{\"1\":{\"146\":1}}],[\">有数据<\",{\"1\":{\"145\":2}}],[\">没有数据<\",{\"1\":{\"145\":1}}],[\">判断anemptylist这个key是否为空<\",{\"1\":{\"141\":1}}],[\">判断anotemptylist这个key是否为空<\",{\"1\":{\"141\":1}}],[\">使用request域对象项目部署名<\",{\"1\":{\"140\":1}}],[\">使用request对象项目部署名<\",{\"1\":{\"140\":1}}],[\">使用request对象所属类的全限定名<\",{\"1\":{\"140\":1}}],[\">注册<\",{\"1\":{\"138\":1}}],[\">源文本<\",{\"1\":{\"132\":1,\"134\":1,\"136\":2,\"137\":3}}],[\">访问index\",{\"1\":{\"130\":1}}],[\">标签体原始值<\",{\"1\":{\"128\":1}}],[\"><null><\",{\"1\":{\"2560\":1}}],[\"><span\",{\"1\":{\"2114\":1}}],[\"><title>title<\",{\"1\":{\"1927\":1}}],[\"><head><meta\",{\"1\":{\"1927\":1}}],[\"><include\",{\"1\":{\"2461\":1}}],[\"><input\",{\"1\":{\"1698\":3}}],[\"><img\",{\"1\":{\"1312\":1}}],[\"><br>\",{\"1\":{\"1606\":4}}],[\"><br\",{\"1\":{\"1330\":2,\"1439\":1,\"1907\":2,\"1972\":8,\"2055\":1,\"2060\":1,\"2094\":1,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"><\",{\"1\":{\"65\":2,\"1293\":1,\"1310\":3,\"1312\":2,\"1314\":4,\"1321\":3,\"1330\":1,\"1380\":2,\"1525\":1,\"1533\":2,\"1534\":1,\"1536\":1,\"1545\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":6,\"1563\":3,\"1564\":3,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":5,\"1585\":1,\"1586\":5,\"1588\":2,\"1589\":2,\"1590\":2,\"1591\":2,\"1596\":3,\"1602\":3,\"1606\":3,\"1609\":9,\"1614\":1,\"1616\":1,\"1617\":1,\"1635\":2,\"1650\":1,\"1690\":2,\"1695\":1,\"1698\":2,\"1701\":2,\"1711\":1,\"1712\":1,\"1713\":1,\"1715\":1,\"1976\":8,\"1987\":6,\"1991\":4,\"2018\":4,\"2019\":4,\"2114\":1,\"2131\":2,\"2132\":2,\"2159\":1,\"2166\":1,\"2169\":2,\"2170\":2,\"2171\":2,\"2176\":1,\"2422\":3,\"2425\":11,\"2428\":11,\"2431\":13,\"2433\":1,\"2435\":4,\"2461\":2,\"2462\":1,\"2542\":1,\"2546\":1,\"2548\":1,\"2553\":2,\"2554\":2,\"2555\":3,\"2557\":3,\"2558\":6,\"2559\":3,\"2560\":2,\"2562\":3,\"2563\":3,\"2564\":5,\"2566\":9,\"2567\":4,\"2571\":1,\"2574\":2,\"2579\":3,\"2584\":4,\"2588\":1,\"2710\":1,\"2765\":2,\"2779\":2,\"2780\":2,\"2786\":1,\"2789\":8,\"2790\":1,\"2796\":2,\"2799\":1,\"2877\":1,\"2898\":3,\"2900\":1,\"2901\":1,\"2902\":1,\"2903\":12,\"2905\":1,\"2906\":5,\"2907\":4,\"2908\":2}}],[\">\",{\"0\":{\"243\":1},\"1\":{\"48\":1,\"65\":5,\"76\":3,\"129\":1,\"130\":1,\"140\":1,\"141\":1,\"145\":1,\"146\":2,\"147\":4,\"149\":1,\"150\":4,\"244\":4,\"245\":1,\"251\":1,\"263\":1,\"279\":1,\"288\":1,\"294\":1,\"348\":3,\"349\":3,\"374\":2,\"375\":1,\"395\":2,\"408\":1,\"421\":2,\"465\":1,\"471\":1,\"480\":1,\"545\":6,\"575\":3,\"584\":4,\"585\":7,\"587\":7,\"588\":10,\"590\":6,\"591\":23,\"593\":1,\"594\":10,\"634\":2,\"680\":6,\"683\":6,\"684\":2,\"685\":4,\"688\":3,\"697\":1,\"699\":1,\"714\":11,\"715\":10,\"718\":1,\"736\":1,\"738\":2,\"739\":3,\"741\":1,\"742\":2,\"760\":3,\"825\":2,\"826\":2,\"828\":1,\"829\":1,\"830\":1,\"831\":1,\"832\":3,\"835\":1,\"837\":1,\"838\":1,\"839\":1,\"840\":2,\"841\":3,\"842\":1,\"843\":2,\"844\":2,\"846\":4,\"847\":1,\"848\":2,\"853\":2,\"856\":2,\"860\":1,\"864\":1,\"867\":1,\"868\":1,\"870\":6,\"872\":2,\"873\":8,\"876\":3,\"880\":3,\"881\":2,\"882\":2,\"885\":1,\"887\":1,\"889\":1,\"891\":1,\"900\":1,\"1030\":1,\"1152\":1,\"1172\":3,\"1263\":5,\"1293\":20,\"1298\":2,\"1299\":2,\"1300\":5,\"1301\":2,\"1302\":2,\"1303\":2,\"1304\":2,\"1305\":3,\"1306\":2,\"1309\":5,\"1310\":5,\"1312\":7,\"1314\":1,\"1315\":1,\"1317\":5,\"1318\":3,\"1319\":4,\"1321\":2,\"1322\":11,\"1330\":9,\"1331\":7,\"1333\":7,\"1334\":4,\"1335\":3,\"1336\":3,\"1337\":4,\"1338\":4,\"1339\":9,\"1340\":5,\"1341\":8,\"1342\":6,\"1343\":4,\"1345\":6,\"1346\":4,\"1347\":4,\"1348\":3,\"1349\":10,\"1350\":2,\"1360\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":4,\"1380\":7,\"1433\":2,\"1436\":2,\"1438\":1,\"1439\":7,\"1442\":3,\"1454\":2,\"1455\":2,\"1456\":2,\"1458\":6,\"1459\":6,\"1460\":3,\"1462\":2,\"1463\":4,\"1464\":2,\"1470\":2,\"1471\":3,\"1472\":3,\"1473\":2,\"1479\":3,\"1482\":2,\"1488\":3,\"1489\":4,\"1490\":3,\"1491\":3,\"1493\":4,\"1494\":4,\"1496\":4,\"1497\":4,\"1499\":4,\"1500\":4,\"1501\":3,\"1505\":3,\"1508\":2,\"1509\":2,\"1510\":2,\"1512\":2,\"1513\":2,\"1514\":6,\"1515\":4,\"1518\":3,\"1521\":12,\"1523\":3,\"1524\":3,\"1525\":3,\"1528\":2,\"1529\":3,\"1532\":3,\"1533\":4,\"1534\":5,\"1535\":6,\"1536\":2,\"1544\":4,\"1545\":3,\"1548\":5,\"1549\":6,\"1552\":3,\"1555\":11,\"1563\":4,\"1564\":4,\"1567\":6,\"1568\":8,\"1570\":6,\"1571\":10,\"1572\":7,\"1573\":1,\"1574\":1,\"1579\":9,\"1585\":1,\"1586\":9,\"1588\":4,\"1589\":4,\"1590\":5,\"1591\":1,\"1596\":6,\"1600\":5,\"1602\":13,\"1606\":13,\"1609\":21,\"1613\":1,\"1614\":2,\"1616\":1,\"1617\":1,\"1620\":2,\"1621\":2,\"1622\":3,\"1624\":1,\"1627\":3,\"1628\":3,\"1629\":3,\"1630\":4,\"1631\":5,\"1634\":3,\"1635\":3,\"1637\":2,\"1638\":1,\"1640\":3,\"1643\":2,\"1646\":2,\"1649\":9,\"1650\":5,\"1651\":9,\"1653\":3,\"1656\":4,\"1658\":6,\"1659\":6,\"1660\":2,\"1661\":5,\"1662\":2,\"1664\":3,\"1667\":3,\"1670\":2,\"1672\":2,\"1675\":4,\"1676\":5,\"1677\":4,\"1690\":6,\"1691\":1,\"1695\":9,\"1698\":9,\"1701\":10,\"1708\":1,\"1718\":3,\"1730\":2,\"1747\":1,\"1756\":1,\"1757\":1,\"1759\":7,\"1763\":1,\"1764\":1,\"1765\":1,\"1766\":1,\"1767\":1,\"1768\":1,\"1791\":4,\"1793\":9,\"1795\":5,\"1801\":2,\"1812\":1,\"1831\":2,\"1834\":2,\"1843\":1,\"1869\":1,\"1870\":7,\"1907\":6,\"1908\":2,\"1928\":4,\"1951\":6,\"1952\":8,\"1957\":1,\"1958\":3,\"1960\":12,\"1962\":4,\"1964\":1,\"1972\":19,\"1976\":8,\"1980\":21,\"1981\":15,\"1982\":4,\"1987\":12,\"1988\":7,\"1989\":8,\"1990\":5,\"1991\":11,\"1999\":5,\"2014\":1,\"2016\":1,\"2018\":6,\"2019\":3,\"2020\":14,\"2022\":11,\"2023\":5,\"2025\":12,\"2028\":1,\"2031\":10,\"2047\":3,\"2055\":7,\"2058\":2,\"2060\":11,\"2075\":2,\"2088\":1,\"2092\":3,\"2094\":6,\"2114\":5,\"2120\":1,\"2124\":1,\"2128\":2,\"2131\":6,\"2132\":6,\"2159\":7,\"2166\":3,\"2169\":6,\"2170\":6,\"2171\":6,\"2176\":5,\"2186\":6,\"2246\":1,\"2253\":1,\"2256\":2,\"2259\":1,\"2260\":2,\"2263\":2,\"2267\":8,\"2269\":2,\"2278\":12,\"2279\":5,\"2292\":1,\"2293\":3,\"2312\":12,\"2315\":1,\"2317\":2,\"2318\":2,\"2320\":4,\"2321\":4,\"2322\":4,\"2323\":2,\"2326\":1,\"2329\":2,\"2332\":9,\"2334\":15,\"2335\":2,\"2344\":1,\"2347\":1,\"2350\":1,\"2354\":1,\"2356\":1,\"2358\":1,\"2362\":1,\"2365\":1,\"2368\":1,\"2374\":37,\"2377\":1,\"2378\":1,\"2385\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2394\":1,\"2398\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":2,\"2413\":1,\"2414\":1,\"2415\":1,\"2422\":6,\"2425\":5,\"2428\":6,\"2431\":7,\"2434\":2,\"2435\":4,\"2444\":9,\"2447\":9,\"2450\":9,\"2453\":8,\"2456\":9,\"2458\":1,\"2459\":2,\"2461\":2,\"2462\":1,\"2464\":1,\"2466\":2,\"2467\":2,\"2480\":1,\"2481\":1,\"2484\":2,\"2485\":5,\"2486\":1,\"2487\":13,\"2500\":8,\"2501\":20,\"2505\":1,\"2509\":2,\"2542\":3,\"2546\":3,\"2552\":10,\"2553\":3,\"2554\":2,\"2555\":2,\"2556\":2,\"2557\":2,\"2558\":5,\"2559\":4,\"2560\":10,\"2562\":1,\"2563\":5,\"2564\":2,\"2566\":13,\"2567\":5,\"2570\":5,\"2571\":1,\"2573\":5,\"2574\":2,\"2579\":4,\"2582\":2,\"2584\":4,\"2587\":2,\"2588\":15,\"2590\":4,\"2591\":4,\"2592\":8,\"2594\":3,\"2599\":5,\"2608\":4,\"2609\":2,\"2629\":11,\"2630\":6,\"2648\":21,\"2665\":22,\"2666\":16,\"2677\":1,\"2678\":1,\"2679\":1,\"2680\":1,\"2701\":6,\"2706\":5,\"2710\":17,\"2740\":8,\"2746\":2,\"2748\":2,\"2750\":1,\"2756\":13,\"2757\":6,\"2758\":4,\"2759\":5,\"2765\":4,\"2779\":14,\"2780\":8,\"2786\":3,\"2789\":10,\"2790\":1,\"2793\":5,\"2794\":4,\"2796\":6,\"2798\":3,\"2799\":7,\"2800\":4,\"2801\":4,\"2807\":2,\"2814\":2,\"2817\":5,\"2820\":3,\"2829\":1,\"2830\":12,\"2857\":4,\"2859\":3,\"2861\":2,\"2863\":2,\"2864\":2,\"2866\":2,\"2867\":2,\"2869\":2,\"2870\":2,\"2872\":2,\"2873\":2,\"2877\":2,\"2885\":1,\"2889\":3,\"2890\":5,\"2891\":6,\"2892\":1,\"2893\":2,\"2894\":2,\"2896\":6,\"2898\":6,\"2899\":2,\"2900\":1,\"2901\":3,\"2902\":1,\"2903\":18,\"2904\":2,\"2905\":1,\"2906\":3,\"2907\":8,\"2908\":4,\"2910\":1,\"2911\":1,\"2912\":1,\"2914\":7,\"2918\":4,\"2925\":2}}],[\"导\",{\"1\":{\"2692\":1}}],[\"导包\",{\"1\":{\"1960\":1}}],[\"导包等等\",{\"1\":{\"1956\":1}}],[\"导致程序卡住\",{\"1\":{\"2715\":1}}],[\"导致索引失效\",{\"1\":{\"1148\":1}}],[\"导致当前线程等待\",{\"1\":{\"479\":2}}],[\"导致共享的资源出现问题\",{\"1\":{\"462\":1}}],[\"导致无法反序列化\",{\"1\":{\"427\":1}}],[\"导致的异常\",{\"1\":{\"29\":1}}],[\"导入工程的依赖文件\",{\"1\":{\"2888\":1}}],[\"导入包\",{\"0\":{\"2875\":1}}],[\"导入tx声明空间\",{\"1\":{\"2706\":1,\"2710\":1}}],[\"导入外部配置依赖\",{\"1\":{\"2666\":1}}],[\"导入maven依赖\",{\"0\":{\"2665\":1},\"1\":{\"2696\":1}}],[\"导入配置文件\",{\"1\":{\"2599\":1}}],[\"导入druid依赖和mysql\",{\"1\":{\"2582\":1}}],[\"导入pom\",{\"0\":{\"2484\":1,\"2500\":1,\"2538\":1}}],[\"导入log4j2\",{\"0\":{\"2310\":1}}],[\"导入log4j1\",{\"0\":{\"2306\":1}}],[\"导入log4j日志框架\",{\"0\":{\"2303\":1},\"1\":{\"2487\":1}}],[\"导入无参构造函数\",{\"1\":{\"2276\":1,\"2425\":1,\"2428\":1,\"2435\":1}}],[\"导入全参构造函数\",{\"1\":{\"2276\":1,\"2425\":1,\"2428\":1,\"2435\":1}}],[\"导入语句\",{\"0\":{\"2028\":1}}],[\"导入核心标签库\",{\"0\":{\"2016\":1}}],[\"导入要使用的java类\",{\"1\":{\"1959\":1}}],[\"导入顺序\",{\"1\":{\"1563\":1,\"1564\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1}}],[\"导入各个层级的接口和页面之后的项目\",{\"1\":{\"1264\":1}}],[\"导入数据库\",{\"0\":{\"2274\":1},\"1\":{\"2663\":1}}],[\"导入数据\",{\"0\":{\"1153\":1}}],[\"导入和导出数据\",{\"0\":{\"1151\":1}}],[\"导入依赖\",{\"0\":{\"2756\":1,\"2888\":1}}],[\"导入依赖包的时候是否自动下载源码和文档\",{\"1\":{\"676\":1}}],[\"导入依赖jar包\",{\"1\":{\"522\":1}}],[\"导入的jar包不够\",{\"1\":{\"651\":1}}],[\"导入指定的file类\",{\"1\":{\"404\":1,\"407\":1}}],[\"导入模块\",{\"0\":{\"103\":1,\"107\":1,\"110\":1},\"1\":{\"101\":1,\"105\":1,\"108\":1,\"2752\":1}}],[\"导出数据\",{\"0\":{\"1152\":1}}],[\"导出成员\",{\"1\":{\"102\":1}}],[\"导出模块\",{\"0\":{\"102\":1,\"106\":1,\"109\":1}}],[\"导航栏\",{\"0\":{\"1604\":1}}],[\"导航语言\",{\"1\":{\"142\":1}}],[\"导航\",{\"0\":{\"639\":1,\"3044\":1},\"1\":{\"44\":1}}],[\"基础\",{\"0\":{\"2948\":1}}],[\"基础写法思路\",{\"0\":{\"2281\":1},\"1\":{\"2336\":1,\"2907\":1}}],[\"基础框架\",{\"0\":{\"13\":1,\"2956\":1},\"1\":{\"4\":1}}],[\"基准\",{\"1\":{\"1869\":2}}],[\"基于注解方式实现\",{\"1\":{\"2699\":1}}],[\"基于注解的di\",{\"0\":{\"2593\":1}}],[\"基于注解的ioc\",{\"0\":{\"2586\":1}}],[\"基于垃圾回收器状态和软引用规则移除对象\",{\"1\":{\"2481\":1}}],[\"基于代理的开发存在以下优点\",{\"1\":{\"2371\":1}}],[\"基于普通模式的开发\",{\"1\":{\"2336\":1}}],[\"基于接口的代理模式开发\",{\"1\":{\"2321\":1}}],[\"基于\",{\"0\":{\"3168\":1},\"1\":{\"2179\":1}}],[\"基于文件形式保存在系统的指定目录中\",{\"1\":{\"1890\":1}}],[\"基于java语言编写的服务端程序\",{\"1\":{\"1782\":1}}],[\"基于对象和面向对象javascript是脚本语言\",{\"1\":{\"1376\":1}}],[\"基于对象的语言\",{\"1\":{\"1374\":1}}],[\"基于xml管理bean\",{\"0\":{\"2544\":1},\"1\":{\"216\":1}}],[\"基于v8\",{\"1\":{\"87\":1}}],[\"基于google的v8引擎\",{\"1\":{\"83\":1}}],[\"基本集合使用\",{\"1\":{\"2566\":1}}],[\"基本集合注入\",{\"1\":{\"2566\":1}}],[\"基本的底层操作已经封装完毕\",{\"1\":{\"2197\":1}}],[\"基本淘汰\",{\"1\":{\"2155\":1}}],[\"基本结构见下图\",{\"1\":{\"2374\":1}}],[\"基本结构\",{\"0\":{\"1772\":1}}],[\"基本结构如下\",{\"1\":{\"1691\":1}}],[\"基本用法\",{\"0\":{\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1}}],[\"基本使用\",{\"0\":{\"1620\":1,\"1624\":1,\"1627\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1653\":1},\"1\":{\"1620\":1}}],[\"基本选择器\",{\"0\":{\"1507\":1,\"1548\":1},\"1\":{\"1508\":1,\"1509\":1,\"1510\":1}}],[\"基本和java中的一致\",{\"1\":{\"1365\":1}}],[\"基本和sql的语法一致\",{\"1\":{\"1199\":1}}],[\"基本补全\",{\"0\":{\"610\":1,\"620\":1}}],[\"基本概念\",{\"0\":{\"492\":1}}],[\"基本数据类型的数组使用stream中的静态方法of是不行的\",{\"1\":{\"860\":1}}],[\"基本数据类型的数组是不行的\",{\"1\":{\"860\":1}}],[\"基本数据类型\",{\"1\":{\"360\":1,\"581\":1}}],[\"基本数据类型自动装箱\",{\"1\":{\"219\":1}}],[\"基本原理\",{\"0\":{\"329\":1,\"339\":1,\"2498\":1},\"1\":{\"294\":1}}],[\"基本类型的比较\",{\"0\":{\"272\":1}}],[\"基本上任何其他\",{\"1\":{\"2520\":1}}],[\"基本上整体代码结构与arraylist一致\",{\"1\":{\"256\":1}}],[\"基本上是同一个标准\",{\"1\":{\"71\":1}}],[\"基本内置对象\",{\"0\":{\"140\":1}}],[\"基本语法为\",{\"1\":{\"1978\":1}}],[\"基本语法是\",{\"1\":{\"80\":1}}],[\"基本语法\",{\"0\":{\"72\":1,\"1711\":1,\"1712\":1,\"1713\":1,\"1715\":1}}],[\"基本操作\",{\"0\":{\"606\":1,\"3039\":1},\"1\":{\"44\":1}}],[\"基金会宣布\",{\"1\":{\"61\":1}}],[\"初次登录时需要为gitlab的root用户设置密码\",{\"1\":{\"812\":1}}],[\"初始状态下记录指针指向第一条记录的前面\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"初始结果为0int\",{\"1\":{\"330\":2}}],[\"初始结果为0\",{\"1\":{\"328\":2}}],[\"初始化bean\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"初始化这个对象object\",{\"1\":{\"2549\":1}}],[\"初始化lombok依赖\",{\"1\":{\"2185\":1}}],[\"初始化方法\",{\"0\":{\"2003\":1},\"1\":{\"1998\":1,\"2001\":1}}],[\"初始化值\",{\"1\":{\"1613\":1}}],[\"初始化3个div\",{\"1\":{\"1521\":1}}],[\"初始化参数\",{\"1\":{\"1280\":1,\"1288\":1}}],[\"初始化连接异常\",{\"1\":{\"1288\":1}}],[\"初始化连接\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"初始化连接池\",{\"1\":{\"1274\":1,\"1280\":1}}],[\"初始化pool\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"初始化表案例\",{\"0\":{\"937\":1}}],[\"初始化数据\",{\"0\":{\"2183\":1}}],[\"初始化数据库\",{\"1\":{\"922\":1}}],[\"初始化数组长度为16\",{\"1\":{\"294\":1}}],[\"初始化配置\",{\"1\":{\"811\":1}}],[\"初始化时创建的线程数\",{\"1\":{\"1757\":1}}],[\"初始化时没有这个index文件\",{\"1\":{\"736\":1}}],[\"初始化时默认传一个结点\",{\"1\":{\"340\":1}}],[\"初始化版本库\",{\"0\":{\"732\":1}}],[\"初始化本地库\",{\"0\":{\"777\":1},\"1\":{\"731\":1}}],[\"初始化对象\",{\"1\":{\"584\":1}}],[\"初始化inetsocketaddress对象\",{\"1\":{\"505\":1}}],[\"初始化10张票\",{\"1\":{\"442\":1,\"446\":1}}],[\"初始化string的长度是\",{\"1\":{\"392\":1}}],[\"初始化\",{\"0\":{\"331\":1,\"340\":1},\"1\":{\"732\":1,\"1279\":1,\"1728\":1,\"1822\":1,\"1825\":1,\"2282\":1,\"2374\":1}}],[\"初始化锁以及等待池\",{\"1\":{\"331\":1}}],[\"初始化锁\",{\"1\":{\"328\":1}}],[\"初始化底层数组长度\",{\"1\":{\"331\":1}}],[\"初始化底层数组\",{\"1\":{\"328\":1}}],[\"初始化以后可以随时使用\",{\"1\":{\"328\":1}}],[\"初始化默认创建一个长度为16的entry数组\",{\"1\":{\"294\":1}}],[\"初始化长度为10\",{\"1\":{\"258\":1}}],[\"初始化项目\",{\"1\":{\"94\":1,\"98\":1,\"114\":1}}],[\"初识\",{\"0\":{\"3045\":1,\"3050\":1,\"3089\":1,\"3093\":1,\"3098\":1,\"3104\":1,\"3106\":1,\"3112\":1,\"3126\":1,\"3149\":1,\"3167\":1}}],[\"初识cookie和session\",{\"0\":{\"1881\":1}}],[\"初识css\",{\"0\":{\"1465\":1},\"1\":{\"57\":1}}],[\"初识spring\",{\"0\":{\"2518\":1},\"1\":{\"216\":1}}],[\"初识servlet\",{\"0\":{\"1781\":1},\"1\":{\"210\":1}}],[\"初识ajax\",{\"0\":{\"2099\":1},\"1\":{\"213\":1}}],[\"初识监听器\",{\"0\":{\"2064\":1,\"3147\":1},\"1\":{\"212\":1}}],[\"初识过滤器\",{\"0\":{\"1992\":1,\"3142\":1},\"1\":{\"212\":1}}],[\"初识vue\",{\"0\":{\"1610\":1},\"1\":{\"116\":1}}],[\"初识bootstrap\",{\"0\":{\"1556\":1},\"1\":{\"66\":1}}],[\"初识javaweb目录结构\",{\"0\":{\"1771\":1}}],[\"初识javascript\",{\"0\":{\"1371\":1},\"1\":{\"56\":1}}],[\"初识jquery\",{\"0\":{\"1537\":1},\"1\":{\"58\":1}}],[\"初识html\",{\"0\":{\"1323\":1},\"1\":{\"55\":1}}],[\"初识git\",{\"0\":{\"719\":1},\"1\":{\"46\":1}}],[\"初识maven\",{\"0\":{\"647\":1},\"1\":{\"45\":1}}],[\"初识反射\",{\"0\":{\"565\":1,\"3035\":1},\"1\":{\"43\":1}}],[\"初识网络编程\",{\"0\":{\"491\":1,\"3029\":1},\"1\":{\"41\":1}}],[\"初识多线程\",{\"0\":{\"451\":1,\"3024\":1},\"1\":{\"40\":1}}],[\"初级开发工程师\",{\"0\":{\"2\":1,\"2935\":1},\"1\":{\"1\":1}}],[\"队列为空\",{\"1\":{\"337\":1}}],[\"队列可以指定容量指定长度3\",{\"1\":{\"337\":1}}],[\"队列还是满的\",{\"1\":{\"337\":1}}],[\"队列\",{\"0\":{\"320\":1,\"3013\":1},\"1\":{\"37\":1,\"225\":1,\"302\":1}}],[\"并放置到servletcontext对象中\",{\"1\":{\"2911\":1}}],[\"并放到编译目录中\",{\"1\":{\"2505\":1}}],[\"并响应给前端用户\",{\"1\":{\"2768\":1}}],[\"并接收到modelandview对象返回给dispatcherservlet\",{\"1\":{\"2768\":1}}],[\"并被dispatcherservlet拦截\",{\"1\":{\"2768\":1}}],[\"并设置初始化的springmvc路径\",{\"1\":{\"2761\":1}}],[\"并向里面注入datasource\",{\"1\":{\"2666\":1}}],[\"并对其切面\",{\"0\":{\"2659\":1}}],[\"并对其是否能满足设计要求进行评估的过程\",{\"1\":{\"527\":1}}],[\"并对接口切面\",{\"0\":{\"2658\":1}}],[\"并交给我们\",{\"1\":{\"2644\":1}}],[\"并使用前端页面进行访问\",{\"1\":{\"2859\":1}}],[\"并使用\",{\"1\":{\"2639\":1}}],[\"并创建\",{\"1\":{\"2626\":1}}],[\"并指定他的类型\",{\"1\":{\"2543\":1,\"2546\":1}}],[\"并指向实体表的记录\",{\"1\":{\"1128\":1}}],[\"并指向这个位置\",{\"1\":{\"393\":1}}],[\"并通过如下方式注册\",{\"1\":{\"2508\":1}}],[\"并覆盖之前读取过的同名属性\",{\"1\":{\"2333\":2}}],[\"并可以进行动态替换\",{\"1\":{\"2332\":1}}],[\"并重新映射到id字段\",{\"1\":{\"2228\":1,\"2230\":1,\"2234\":1}}],[\"并重写compare方法\",{\"1\":{\"271\":1,\"275\":1}}],[\"并作为返回值传递\",{\"1\":{\"2155\":1}}],[\"并作为回调函数参数传递\",{\"1\":{\"2141\":1}}],[\"并根据datatype参数进行处理后的数据\",{\"1\":{\"2144\":1}}],[\"并根据请求内容动态地生成html\",{\"1\":{\"1927\":1}}],[\"并根据请求方式复写\",{\"1\":{\"1820\":1}}],[\"并有效地提升网络传输效率\",{\"1\":{\"2123\":1}}],[\"并反馈给用户\",{\"1\":{\"2104\":1}}],[\"并由apache的jakarta小组来维护\",{\"1\":{\"2011\":1}}],[\"并由美国国家标准技术研究所\",{\"1\":{\"702\":1}}],[\"并调用其init方法\",{\"1\":{\"2003\":1}}],[\"并调用一次init方法\",{\"1\":{\"1826\":1}}],[\"并配置对哪个web资源进行拦截后\",{\"1\":{\"1995\":1}}],[\"并再一次在新的线程中执行service方法\",{\"1\":{\"1823\":1}}],[\"并等待engine的回应\",{\"1\":{\"1769\":1}}],[\"并集选择器$\",{\"1\":{\"1548\":1}}],[\"并集选择器\",{\"1\":{\"1548\":1}}],[\"并替换与正则表达式匹配的子串\",{\"1\":{\"1405\":1}}],[\"并从起始位置\",{\"1\":{\"1405\":1}}],[\"并未使用严格的数据类型\",{\"1\":{\"1374\":1}}],[\"并处于\",{\"1\":{\"1292\":1}}],[\"并释放此\",{\"1\":{\"1255\":2}}],[\"并给出前台反馈信息\",{\"1\":{\"1237\":1}}],[\"并于1986年10月\",{\"1\":{\"930\":1}}],[\"并在执行位置之前和之后自定义增强的功能\",{\"1\":{\"2644\":1}}],[\"并在projectrecord实体类中创建emp的属性\",{\"1\":{\"2430\":1}}],[\"并在\",{\"1\":{\"1933\":1}}],[\"并在新的线程中执行service方法处理请求\",{\"1\":{\"1823\":1}}],[\"并在新的字符串中返回被提取的部分\",{\"1\":{\"1405\":1}}],[\"并在单独的选项卡中控制\",{\"1\":{\"1164\":1}}],[\"并在哥哥框架和项目中被广泛使用\",{\"1\":{\"904\":1}}],[\"并在src中创建以下文件\",{\"1\":{\"114\":1}}],[\"并不一定永远是一个好办法\",{\"1\":{\"2371\":1}}],[\"并不希望有其他的按键组合\",{\"1\":{\"1668\":1}}],[\"并不是vue去设计的\",{\"1\":{\"1704\":1}}],[\"并不是一门新语言\",{\"1\":{\"1541\":1}}],[\"并不是直接修改了原有的localdate\",{\"1\":{\"895\":1}}],[\"并不会直接与数据库打交道\",{\"1\":{\"913\":1}}],[\"并不会修改原有的信息\",{\"1\":{\"895\":1}}],[\"并不会等待执行完毕\",{\"1\":{\"438\":1}}],[\"并没有提供一个很好的解决方案\",{\"1\":{\"2319\":1}}],[\"并没有实现元素的删除\",{\"1\":{\"1624\":1}}],[\"并没有完全增加\",{\"1\":{\"889\":1}}],[\"并没有使用h\",{\"1\":{\"296\":1}}],[\"并非单一线程\",{\"1\":{\"887\":1}}],[\"并行流的数据安全问题\",{\"1\":{\"889\":2}}],[\"并行流的线程安全问题\",{\"0\":{\"889\":1}}],[\"并行流的操作\",{\"0\":{\"887\":1},\"1\":{\"887\":1}}],[\"并行流\",{\"1\":{\"888\":4}}],[\"并行流和串行流的对比\",{\"0\":{\"888\":1}}],[\"并行的stream流\",{\"0\":{\"884\":1}}],[\"并回后\",{\"1\":{\"804\":1}}],[\"并回主干分支\",{\"1\":{\"804\":1}}],[\"并赋值\",{\"1\":{\"674\":1}}],[\"并启动服务器才行\",{\"1\":{\"659\":1}}],[\"并同时下载这个jar包所依赖的其他jar包\",{\"1\":{\"650\":1}}],[\"并为所有的\",{\"1\":{\"2530\":1}}],[\"并为这个httpsession对象生成一个jsessionid\",{\"1\":{\"1897\":1}}],[\"并为这些行添加黄色灯泡\",{\"1\":{\"604\":1}}],[\"并为线程创建名字\",{\"1\":{\"445\":1}}],[\"并输出到html文件中\",{\"1\":{\"536\":1}}],[\"并输出html页面\",{\"1\":{\"88\":1}}],[\"并把它们注册为后置处理器\",{\"1\":{\"2572\":1}}],[\"并把返回的数据放入被选元素中\",{\"1\":{\"2157\":1}}],[\"并把该注解当成一个修饰符使用\",{\"1\":{\"533\":1}}],[\"并把这个位置的对象\",{\"1\":{\"279\":1}}],[\"并执行相应的处理\",{\"1\":{\"533\":1}}],[\"并返回错误日志\",{\"1\":{\"2702\":1}}],[\"并返回新的字符串\",{\"1\":{\"1405\":1}}],[\"并返回转换后的流\",{\"1\":{\"867\":1}}],[\"并返回当前读取的数量\",{\"1\":{\"405\":2}}],[\"并返回替换前的值\",{\"1\":{\"294\":1}}],[\"并进行处理\",{\"1\":{\"354\":1}}],[\"并进入文件夹\",{\"1\":{\"114\":1}}],[\"并修改为null\",{\"1\":{\"342\":1}}],[\"并发执行的事务之间既不能看到对方的中间状态\",{\"1\":{\"2687\":1}}],[\"并发执行的各个事务之间不能互相干扰\",{\"1\":{\"1102\":1}}],[\"并发数设置参数有如下几个\",{\"1\":{\"1757\":1}}],[\"并发量的差异还是满大的\",{\"1\":{\"1757\":1}}],[\"并发能力问题涉及整个系统架构和业务逻辑\",{\"1\":{\"1757\":1}}],[\"并发情况下\",{\"1\":{\"336\":1}}],[\"并发读的时候不需要锁定容器\",{\"1\":{\"313\":1}}],[\"并发使用线程向同一个集合中塞入数据\",{\"1\":{\"305\":1,\"306\":1}}],[\"并发容器\",{\"0\":{\"308\":1,\"3011\":1},\"1\":{\"37\":1}}],[\"并将其注册到请求映射表中\",{\"1\":{\"2781\":1}}],[\"并将datasource属性注入到数据源中\",{\"1\":{\"2706\":1,\"2710\":1}}],[\"并将\",{\"1\":{\"2701\":2}}],[\"并将后置处理器添加到容器中\",{\"1\":{\"2574\":1}}],[\"并将httpsession的jsessionid以cookie形式响应给浏览器\",{\"1\":{\"1894\":1}}],[\"并将它们连接在一起返回\",{\"1\":{\"1405\":1}}],[\"并将对象指向常量池中的位置\",{\"1\":{\"433\":1}}],[\"并将原有的内容复制到新的地址中继续操作\",{\"1\":{\"393\":1}}],[\"并将原数组的value复制到新的数组\",{\"1\":{\"294\":1}}],[\"并将这种语言称为\",{\"1\":{\"70\":1}}],[\"并且后台的session不失效\",{\"1\":{\"2923\":1,\"2924\":1}}],[\"并且将数据保存到flashmap中\",{\"1\":{\"2868\":1}}],[\"并且将产生响应的异常\",{\"1\":{\"1233\":1}}],[\"并且构造方法参数\",{\"1\":{\"2781\":1}}],[\"并且同时将上下文中的事务挂起\",{\"1\":{\"2730\":1}}],[\"并且其他的事务对于转账操作的事务是不能产生任何影响的\",{\"1\":{\"2687\":1}}],[\"并且是相互依赖的\",{\"1\":{\"2685\":1}}],[\"并且是get方式请求时\",{\"1\":{\"2155\":1}}],[\"并且效率低下\",{\"1\":{\"2606\":1}}],[\"并且事先我们可能并不知道我们要代理哪个类\",{\"1\":{\"2606\":1}}],[\"并且还要事先知道我们要代理哪个类才能写代理类\",{\"1\":{\"2606\":1}}],[\"并且还保证设计质量\",{\"1\":{\"2197\":1}}],[\"并且在泛型中指定\",{\"1\":{\"2217\":1}}],[\"并且在我们自定义的servlet中又重写了httpservlet中的doget方法\",{\"1\":{\"1826\":1}}],[\"并且他们完成的还是基础\",{\"1\":{\"2197\":1}}],[\"并且可以被js直接使用\",{\"1\":{\"2162\":1}}],[\"并且可能缓存此范围之外的其他值\",{\"1\":{\"363\":1}}],[\"并且type是get时才会用于强制修改字符集\",{\"1\":{\"2154\":1}}],[\"并且table的大小>=min\",{\"1\":{\"279\":1}}],[\"并且自定义了\",{\"1\":{\"1933\":1}}],[\"并且记住了当前所有依赖的关联关系\",{\"1\":{\"1686\":1}}],[\"并且只有列可以是行的直接子节点\",{\"1\":{\"1601\":1}}],[\"并且编写一个单独的类来实现这个接口在逻辑上对应这个特定的数据存储\",{\"1\":{\"1262\":1}}],[\"并且它通过一套getxxx方法\",{\"1\":{\"1259\":1}}],[\"并且中间以separator作为分隔符\",{\"1\":{\"1086\":1}}],[\"并且组合的值不允许重复\",{\"1\":{\"986\":1}}],[\"并且不会自动扩充\",{\"1\":{\"940\":1}}],[\"并且已经启动\",{\"1\":{\"923\":1}}],[\"并且大型网站也开始使用mysql数据库\",{\"1\":{\"919\":1}}],[\"并且大多数人都懒得去改动它\",{\"1\":{\"744\":1}}],[\"并且性能高\",{\"1\":{\"919\":1}}],[\"并且调用里面的方法\",{\"1\":{\"567\":1}}],[\"并且需要判空\",{\"1\":{\"512\":1}}],[\"并且具有更好的扩展性\",{\"1\":{\"481\":1}}],[\"并且碰巧将当前线程选为被唤醒的线程\",{\"1\":{\"475\":1}}],[\"并且出于线程调度的目的\",{\"1\":{\"475\":1}}],[\"并且必须为空目录\",{\"1\":{\"389\":1,\"390\":1}}],[\"并且新数组的长度加1操作\",{\"1\":{\"316\":2}}],[\"并且\",{\"1\":{\"280\":1,\"294\":1,\"1580\":1}}],[\"并且满足\",{\"1\":{\"279\":1}}],[\"并且如果队列满了add会抛出异常\",{\"1\":{\"260\":1}}],[\"并且得重复传输\",{\"1\":{\"168\":1}}],[\"并下移指针\",{\"1\":{\"220\":1}}],[\"并采用二进制格式编码\",{\"1\":{\"167\":1}}],[\"并广泛被各行业企业以及事业单位\",{\"1\":{\"61\":1}}],[\"并列\",{\"1\":{\"27\":1}}],[\"同\",{\"1\":{\"2932\":1}}],[\"同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互\",{\"1\":{\"2168\":1}}],[\"同源策略\",{\"1\":{\"2168\":1}}],[\"同servlet一样\",{\"1\":{\"2048\":1}}],[\"同servlet对象一样\",{\"1\":{\"2000\":1}}],[\"同名方法会有覆盖情况\",{\"1\":{\"1647\":1}}],[\"同no\",{\"1\":{\"1003\":1}}],[\"同一个sqlsession两次查询期间提交了事务\",{\"1\":{\"2476\":1}}],[\"同一个sqlsession两次查询期间手动清空了缓存\",{\"1\":{\"2476\":1}}],[\"同一个sqlsession两次查询期间执行了任何一次增删改操作\",{\"1\":{\"2476\":1}}],[\"同一个sqlsession但是查询条件发生了变化\",{\"1\":{\"2476\":1}}],[\"同一个表可以有多个唯一约束\",{\"1\":{\"992\":1}}],[\"同一个元素类型\",{\"1\":{\"581\":1}}],[\"同一个维度\",{\"1\":{\"581\":1}}],[\"同一个类中\",{\"1\":{\"34\":1,\"2635\":1}}],[\"同优先级别的线程\",{\"1\":{\"457\":1}}],[\"同常在使用中需要先获取数据再存放数据\",{\"1\":{\"346\":1}}],[\"同arraylistblockingqueue\",{\"1\":{\"344\":1}}],[\"同样的条件\",{\"1\":{\"2692\":2}}],[\"同样的技术解决同样的问题会产生不同流程和风格的解决方案\",{\"1\":{\"2197\":1}}],[\"同样是perpetualcache这个类\",{\"1\":{\"2492\":1}}],[\"同样可以保证减少开发时间\",{\"1\":{\"2197\":1}}],[\"同样我们使用他的实现类linkedlist\",{\"1\":{\"357\":1}}],[\"同样\",{\"1\":{\"321\":1,\"609\":1,\"1209\":1,\"1450\":1,\"2036\":1}}],[\"同时在单元方法上直接声明对应的形参接收请求数据即可\",{\"1\":{\"2794\":1}}],[\"同时在单元方法上声明形参httpservletrequest来接收request实参即可\",{\"1\":{\"2793\":1}}],[\"同时该bean仅在当前http\",{\"1\":{\"2552\":2}}],[\"同时projectrecord表中又通过empno与emp表关联\",{\"1\":{\"2430\":1}}],[\"同时package\",{\"1\":{\"94\":1}}],[\"同时将对映射文件的操作调低\",{\"1\":{\"2306\":1}}],[\"同时表结构中的id字段也修改为uid字段\",{\"1\":{\"2226\":1}}],[\"同时指定对应的实体类\",{\"1\":{\"2191\":1}}],[\"同时验证登录\",{\"1\":{\"1910\":1}}],[\"同时客户端浏览器会根据此编码方式显示响应内容\",{\"1\":{\"1806\":1}}],[\"同时注意\",{\"1\":{\"1775\":1}}],[\"同时也可配置关于缓存设置\",{\"1\":{\"2470\":1}}],[\"同时也对ajax提交和回显已经进行了封装\",{\"1\":{\"2129\":1}}],[\"同时也能兼顾后台对象信息的特点\",{\"1\":{\"2124\":1}}],[\"同时也易于机器解析和生成\",{\"1\":{\"2123\":1}}],[\"同时也不能阻止事件的冒泡\",{\"1\":{\"1659\":2}}],[\"同时也是一个完整的java程序\",{\"1\":{\"1935\":1}}],[\"同时也是连接运算符\",{\"1\":{\"1362\":1}}],[\"同时也是目前使用最广泛的关系型数据库操作语言\",{\"1\":{\"930\":1}}],[\"同时触发了所有盒子的事件\",{\"1\":{\"1656\":1}}],[\"同时bootstrap还给我们提供了大量的常用网页组件\",{\"1\":{\"1559\":1}}],[\"同时对多个字段进行排序\",{\"1\":{\"1040\":1}}],[\"同时它也是一个支持多线程高并发多用户的关系型数据库管理系统\",{\"1\":{\"920\":1}}],[\"同时java中使用的历法是iso\",{\"1\":{\"892\":1}}],[\"同时用于格式化和解析的类在java\",{\"1\":{\"891\":1}}],[\"同时并行推进多个功能开发\",{\"1\":{\"747\":1}}],[\"同时推进多个任务\",{\"1\":{\"746\":1}}],[\"同时更快的响应用户请求\",{\"1\":{\"705\":1}}],[\"同时加载当前目录下的pom文件\",{\"1\":{\"693\":1}}],[\"同时\",{\"1\":{\"359\":1,\"2790\":1}}],[\"同时ai又是ai+1的直接前驱\",{\"1\":{\"226\":1}}],[\"同时保留页面自身标记\",{\"1\":{\"150\":1}}],[\"同时上千的配置项和不同层面的扩展机制带来了灵活的定制能力\",{\"1\":{\"61\":1}}],[\"同步请求将锁住浏览器\",{\"1\":{\"2138\":1}}],[\"同步交互的不足之处\",{\"1\":{\"2103\":1}}],[\"同步交互可以实现这个需求\",{\"1\":{\"2102\":1}}],[\"同步交互与异步交互\",{\"0\":{\"2100\":1}}],[\"同步update\",{\"1\":{\"1003\":1}}],[\"同步锁\",{\"1\":{\"475\":1}}],[\"同步器\",{\"1\":{\"475\":1}}],[\"同步方法的锁是this\",{\"1\":{\"472\":1}}],[\"同步方法是将线程挡在了方法的外部\",{\"1\":{\"472\":1}}],[\"同步方法\",{\"0\":{\"469\":1},\"1\":{\"482\":1}}],[\"同步监视器\",{\"1\":{\"464\":1,\"471\":1}}],[\"同步代码块只是锁住使用该同步监视器的代码块\",{\"1\":{\"472\":1}}],[\"同步代码块的效率要高于同步方法\",{\"1\":{\"472\":1}}],[\"同步代码块中能发生cpu的切换吗\",{\"1\":{\"468\":1}}],[\"同步代码块执行完毕\",{\"1\":{\"467\":1}}],[\"同步代码块\",{\"0\":{\"463\":1},\"1\":{\"482\":1,\"889\":1}}],[\"同步频率目前为\",{\"1\":{\"93\":1}}],[\"同步类容器\",{\"0\":{\"304\":1,\"3010\":1},\"1\":{\"37\":1}}],[\"栈和队列的物理结构实现\",{\"1\":{\"321\":1}}],[\"栈\",{\"0\":{\"301\":1,\"3009\":1},\"1\":{\"37\":1,\"225\":1,\"302\":1}}],[\"718\",{\"1\":{\"1411\":1}}],[\"79\",{\"1\":{\"1416\":2}}],[\"7976931348623157e+308\",{\"1\":{\"1409\":1,\"1412\":1}}],[\"7934\",{\"1\":{\"1211\":1}}],[\"7900\",{\"1\":{\"1211\":1}}],[\"7902\",{\"1\":{\"1211\":2}}],[\"7876\",{\"1\":{\"1211\":1}}],[\"7844\",{\"1\":{\"1211\":1}}],[\"7839\",{\"1\":{\"1211\":4,\"2363\":1}}],[\"768px\",{\"1\":{\"1600\":1}}],[\"761626004\",{\"1\":{\"1309\":1}}],[\"7654\",{\"1\":{\"1211\":1}}],[\"7698\",{\"1\":{\"1211\":6}}],[\"7499\",{\"1\":{\"1211\":1,\"2344\":1,\"2355\":1,\"2386\":1,\"2417\":3,\"2423\":1,\"2425\":1,\"2444\":1,\"2447\":1,\"2450\":2,\"2466\":1,\"2467\":1}}],[\"70\",{\"1\":{\"2022\":2,\"2023\":1,\"2679\":1}}],[\"707\",{\"1\":{\"1411\":1}}],[\"70cfvhsh\",{\"1\":{\"1309\":1}}],[\"700px\",{\"1\":{\"1321\":2}}],[\"700\",{\"1\":{\"1211\":1,\"1757\":1}}],[\"706128800\",{\"1\":{\"379\":6}}],[\"70348971907l\",{\"1\":{\"36\":2}}],[\"7==0\",{\"1\":{\"376\":1}}],[\"7是如何扩容的\",{\"1\":{\"311\":1}}],[\"7说说其put的机制\",{\"1\":{\"311\":1}}],[\"7实现的原理是什么\",{\"1\":{\"311\":1}}],[\"7中segment数\",{\"1\":{\"311\":1}}],[\"7中什么问题\",{\"1\":{\"311\":1}}],[\"7中\",{\"1\":{\"295\":2}}],[\"7566\",{\"1\":{\"1211\":3}}],[\"7521\",{\"1\":{\"1211\":1,\"2417\":3,\"2466\":1,\"2467\":1}}],[\"750453300\",{\"1\":{\"892\":1}}],[\"75赋值给loadfactor\",{\"1\":{\"294\":1}}],[\"75=12的时候\",{\"1\":{\"294\":1}}],[\"75=12\",{\"1\":{\"294\":1}}],[\"75f\",{\"1\":{\"294\":2}}],[\"75是一个比较合适的取值限定\",{\"1\":{\"296\":1}}],[\"75是大量运算得到的\",{\"1\":{\"294\":1}}],[\"75是经过大量运算后得到的最好值\",{\"1\":{\"294\":1}}],[\"75\",{\"1\":{\"280\":2,\"294\":1,\"296\":1}}],[\"7和jdk1\",{\"1\":{\"263\":1,\"311\":1}}],[\"7在初始化时\",{\"1\":{\"255\":1}}],[\"7与jdk1\",{\"0\":{\"255\":1}}],[\"7788\",{\"1\":{\"1211\":2}}],[\"7782\",{\"1\":{\"1211\":2}}],[\"77\",{\"1\":{\"65\":1,\"251\":1}}],[\"72\",{\"1\":{\"65\":1}}],[\"7369\",{\"1\":{\"1211\":1,\"2417\":4,\"2466\":1,\"2467\":1}}],[\"73\",{\"1\":{\"65\":1}}],[\"7\",{\"0\":{\"253\":1,\"294\":1,\"668\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":1},\"1\":{\"65\":1,\"277\":1,\"294\":3,\"295\":1,\"318\":2,\"327\":1,\"364\":1,\"375\":2,\"379\":3,\"380\":1,\"642\":1,\"809\":1,\"837\":1,\"876\":1,\"893\":2,\"972\":2,\"1155\":2,\"1211\":6,\"1306\":1,\"1366\":1,\"1372\":1,\"1388\":1,\"1389\":1,\"1391\":2,\"1400\":3,\"1401\":2,\"1406\":1,\"1567\":1,\"1584\":1,\"1602\":1,\"1631\":1,\"2691\":1,\"2756\":1}}],[\"7以后可以写为\",{\"1\":{\"235\":1}}],[\"7以后\",{\"1\":{\"27\":1}}],[\"l管理\",{\"0\":{\"3168\":1}}],[\"l表达式的使用\",{\"0\":{\"3141\":1}}],[\"l5新特性\",{\"0\":{\"3091\":1}}],[\"l标签\",{\"0\":{\"3088\":1}}],[\"l注入和预编译\",{\"0\":{\"3083\":1}}],[\"l优化\",{\"0\":{\"3072\":1}}],[\"l和\",{\"0\":{\"3064\":1,\"3069\":1}}],[\"l入门\",{\"0\":{\"3063\":1}}],[\"lru\",{\"1\":{\"2481\":2,\"2485\":1}}],[\"lg\",{\"1\":{\"1600\":1}}],[\"ln10\",{\"1\":{\"1411\":1}}],[\"ln2\",{\"1\":{\"1411\":1}}],[\"lsolation\",{\"1\":{\"1102\":1}}],[\"ls1\",{\"1\":{\"356\":1}}],[\"lpad\",{\"1\":{\"1091\":1}}],[\"lt\",{\"0\":{\"2239\":1},\"1\":{\"1301\":1,\"1551\":1,\"1552\":2,\"2022\":4,\"2055\":1,\"2060\":1,\"2088\":1,\"2094\":1,\"2114\":1,\"2128\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2560\":3}}],[\"ltrim\",{\"1\":{\"1090\":1}}],[\"lts\",{\"1\":{\"85\":1}}],[\"lmn\",{\"1\":{\"431\":1}}],[\"l为null\",{\"1\":{\"263\":1}}],[\"l\",{\"0\":{\"2974\":1,\"2978\":1,\"3000\":1,\"3064\":1,\"3066\":1,\"3067\":1,\"3069\":1,\"3089\":1,\"3143\":1,\"3164\":1},\"1\":{\"263\":4,\"635\":2,\"1093\":1,\"1285\":1,\"1287\":3,\"1927\":2,\"1928\":2,\"2308\":1,\"2312\":2,\"2374\":1,\"2757\":1,\"2896\":1}}],[\"lawyer\",{\"1\":{\"2605\":6}}],[\"layer\",{\"1\":{\"2199\":1}}],[\"layout\",{\"1\":{\"1285\":2,\"2308\":1,\"2374\":1}}],[\"layout=org\",{\"1\":{\"1285\":2,\"2308\":2,\"2374\":2}}],[\"launch选项\",{\"1\":{\"1777\":1}}],[\"laudantium\",{\"1\":{\"1606\":2}}],[\"lazyloadingenabled\",{\"1\":{\"2434\":2}}],[\"lazy=\",{\"1\":{\"1675\":1}}],[\"lazy修饰符是将input输入框的数据绑定v\",{\"1\":{\"1675\":1}}],[\"lazy\",{\"0\":{\"1675\":1},\"1\":{\"1674\":1,\"2433\":1,\"2434\":1,\"2435\":2,\"2555\":3}}],[\"laboris\",{\"1\":{\"1606\":1}}],[\"labore\",{\"1\":{\"1606\":1}}],[\"label\",{\"0\":{\"1342\":1}}],[\"label><input\",{\"1\":{\"1341\":1,\"1342\":1}}],[\"label标签\",{\"1\":{\"1341\":1,\"1342\":1}}],[\"lavender\",{\"1\":{\"1602\":6}}],[\"largeobject\",{\"1\":{\"941\":1}}],[\"laptop\",{\"1\":{\"502\":1,\"503\":1}}],[\"lang=\",{\"1\":{\"1690\":1,\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"1927\":1,\"2132\":2,\"2159\":2,\"2166\":1}}],[\"lang\",{\"1\":{\"287\":1,\"364\":6,\"366\":1,\"368\":1,\"430\":1,\"561\":2,\"562\":1,\"570\":1,\"584\":5,\"587\":9,\"590\":12,\"593\":4,\"1216\":1,\"1275\":1,\"1889\":1,\"2651\":1}}],[\"language=\",{\"1\":{\"1928\":1,\"1951\":1,\"1952\":1,\"1960\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2176\":1,\"2750\":1,\"2786\":1,\"2793\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"language\",{\"0\":{\"932\":1,\"933\":1,\"934\":1,\"935\":1,\"936\":1},\"1\":{\"177\":1,\"930\":1,\"1325\":1,\"1959\":1,\"2532\":2,\"2857\":1}}],[\"language对象\",{\"1\":{\"142\":1}}],[\"lambda\",{\"1\":{\"220\":1,\"2179\":2}}],[\"lambda表达式的冗余\",{\"0\":{\"825\":1}}],[\"lambda表达式\",{\"1\":{\"220\":1}}],[\"lastchild\",{\"1\":{\"1485\":1}}],[\"lastindexof\",{\"1\":{\"260\":2,\"1405\":1}}],[\"last\",{\"0\":{\"2248\":1},\"1\":{\"147\":1,\"262\":5,\"263\":4,\"302\":1,\"338\":5,\"1081\":1,\"1082\":1,\"1235\":2,\"1551\":1,\"1552\":5,\"2025\":2,\"2031\":2,\"2248\":1}}],[\"lib目录下已经有这两依赖了\",{\"1\":{\"2748\":1}}],[\"lib目录主要用来存放tomcat运行需要加载的jar包\",{\"1\":{\"1744\":1}}],[\"library\",{\"1\":{\"2011\":1}}],[\"libraries\",{\"1\":{\"1775\":1,\"1776\":1}}],[\"lib\",{\"1\":{\"1744\":1,\"1772\":1}}],[\"libero\",{\"1\":{\"1609\":1}}],[\"live\",{\"1\":{\"1572\":1}}],[\"li\",{\"1\":{\"1548\":2,\"1574\":1}}],[\"lightgreen\",{\"1\":{\"1572\":2}}],[\"lightgray\",{\"1\":{\"1571\":1}}],[\"light\",{\"1\":{\"1564\":1}}],[\"lightyellow\",{\"1\":{\"1545\":1}}],[\"lightskyblue\",{\"1\":{\"1529\":1}}],[\"lightblue\",{\"1\":{\"1496\":1,\"1497\":1}}],[\"li>\",{\"1\":{\"1317\":12,\"1318\":6,\"1549\":11,\"1574\":5,\"1606\":4,\"1609\":4,\"1627\":1,\"1628\":1,\"1629\":1,\"1952\":1,\"2159\":5}}],[\"li><\",{\"1\":{\"1317\":1,\"1318\":1}}],[\"literal\",{\"1\":{\"1180\":2}}],[\"license\",{\"1\":{\"920\":1}}],[\"license的许可下下载并根据个人需要对其缺陷进行修改\",{\"1\":{\"919\":1}}],[\"license的前提下任意修改这个项目了\",{\"1\":{\"757\":1}}],[\"limit方法可以对流进行截取处理\",{\"1\":{\"865\":1}}],[\"limit\",{\"0\":{\"865\":1},\"1\":{\"861\":1,\"865\":2,\"876\":1,\"1043\":1,\"2248\":2}}],[\"lisi\",{\"1\":{\"2075\":1,\"2124\":1,\"2453\":1,\"2456\":1,\"2558\":1,\"2695\":1}}],[\"lisiatguigu\",{\"1\":{\"760\":1,\"763\":2}}],[\"list集合接收参数\",{\"0\":{\"2800\":1}}],[\"list集合注入\",{\"1\":{\"2566\":1}}],[\"listmaps\",{\"1\":{\"2257\":1}}],[\"list方法等\",{\"1\":{\"2218\":1}}],[\"list>\",{\"1\":{\"1795\":2,\"2566\":2,\"2567\":1}}],[\"listfiles\",{\"1\":{\"389\":2,\"390\":1}}],[\"listiterator<string>\",{\"1\":{\"266\":1}}],[\"listiterator\",{\"0\":{\"266\":1},\"1\":{\"266\":1}}],[\"list3\",{\"1\":{\"244\":2}}],[\"list2stream\",{\"1\":{\"876\":2}}],[\"list2\",{\"1\":{\"242\":3,\"244\":2,\"876\":8}}],[\"list1stream\",{\"1\":{\"876\":2}}],[\"list1\",{\"1\":{\"242\":3,\"244\":2,\"248\":4,\"300\":6,\"876\":8}}],[\"list<object\",{\"1\":{\"2677\":1,\"2678\":1,\"2679\":1,\"2680\":1}}],[\"list<object>\",{\"1\":{\"242\":1,\"244\":3,\"247\":1,\"248\":1,\"2244\":1,\"2357\":1,\"2359\":1,\"2651\":1}}],[\"list<t>\",{\"1\":{\"2673\":1}}],[\"list<book>\",{\"1\":{\"2565\":1}}],[\"list<projects>\",{\"1\":{\"2431\":2}}],[\"list<projectrecord>\",{\"1\":{\"2431\":1}}],[\"list<person>\",{\"1\":{\"247\":1,\"248\":1}}],[\"list<dept1>\",{\"1\":{\"2428\":2}}],[\"list<dept>\",{\"1\":{\"1227\":3,\"1267\":1,\"2279\":1,\"2282\":1,\"2422\":2,\"2503\":1,\"2676\":8,\"2678\":2,\"2679\":2,\"2680\":1}}],[\"list<map<string\",{\"1\":{\"2243\":1,\"2257\":1}}],[\"list<area>\",{\"1\":{\"2176\":4}}],[\"list<emp1>\",{\"1\":{\"2428\":1}}],[\"list<emp>\",{\"1\":{\"1976\":5,\"2025\":2,\"2031\":2,\"2347\":1,\"2348\":1,\"2356\":1,\"2358\":1,\"2377\":1,\"2379\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2391\":1,\"2393\":1,\"2395\":1,\"2397\":1,\"2399\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2404\":1,\"2406\":2,\"2407\":2,\"2425\":2,\"2435\":1,\"2444\":3,\"2447\":3,\"2450\":4,\"2459\":1,\"2462\":2,\"2466\":2,\"2467\":2,\"2479\":2,\"2488\":2,\"2667\":4,\"2673\":2}}],[\"list<e>\",{\"1\":{\"233\":1,\"2493\":5}}],[\"list<user>\",{\"1\":{\"1972\":2,\"2192\":1,\"2203\":1,\"2205\":1,\"2220\":1,\"2242\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2253\":1,\"2254\":1,\"2256\":2,\"2258\":1,\"2260\":2,\"2926\":1,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"list<student>>>\",{\"1\":{\"881\":1}}],[\"list<student>>\",{\"1\":{\"881\":2,\"882\":1}}],[\"list<student>\",{\"1\":{\"247\":1,\"248\":1}}],[\"list<string>\",{\"1\":{\"242\":1,\"244\":3,\"306\":1,\"856\":3,\"876\":2,\"878\":1,\"1831\":3,\"1917\":3,\"1921\":3,\"1925\":3,\"2565\":1}}],[\"list<\",{\"1\":{\"244\":2,\"245\":1,\"247\":1,\"248\":1}}],[\"list<integer>\",{\"1\":{\"244\":3,\"889\":2,\"2467\":2,\"2676\":4,\"2680\":1}}],[\"lists\",{\"1\":{\"141\":2,\"142\":1,\"145\":3}}],[\"lists内置对象\",{\"1\":{\"141\":1}}],[\"list\",{\"1\":{\"93\":1,\"219\":2,\"244\":12,\"245\":5,\"247\":4,\"251\":23,\"260\":28,\"265\":8,\"266\":8,\"300\":12,\"305\":4,\"306\":4,\"315\":10,\"389\":3,\"390\":3,\"726\":1,\"886\":2,\"1198\":1,\"1266\":2,\"1275\":3,\"1317\":1,\"1545\":1,\"1831\":4,\"1917\":4,\"1921\":4,\"1925\":4,\"1972\":1,\"1976\":6,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":7,\"2025\":2,\"2031\":1,\"2128\":3,\"2132\":4,\"2166\":9,\"2179\":1,\"2214\":1,\"2253\":3,\"2254\":3,\"2256\":6,\"2258\":3,\"2260\":2,\"2282\":1,\"2377\":1,\"2435\":2,\"2467\":1,\"2493\":9,\"2567\":1,\"2651\":1}}],[\"listener>\",{\"1\":{\"2075\":1,\"2911\":1}}],[\"listener\",{\"1\":{\"2075\":2,\"2095\":1,\"2096\":2,\"2911\":1}}],[\"listen\",{\"1\":{\"88\":1}}],[\"list接口中常用方法\",{\"1\":{\"251\":1}}],[\"list接口下存在\",{\"1\":{\"249\":1}}],[\"list接口实现collection接口\",{\"1\":{\"249\":1,\"276\":1}}],[\"list接口\",{\"0\":{\"249\":1,\"3004\":1},\"1\":{\"37\":1,\"249\":1}}],[\"lifecycle\",{\"0\":{\"708\":1,\"709\":1,\"710\":1}}],[\"lifo\",{\"1\":{\"302\":1}}],[\"lili=34565677\",{\"1\":{\"292\":1}}],[\"lili\",{\"1\":{\"292\":5}}],[\"lint\",{\"1\":{\"1683\":1,\"1687\":3}}],[\"linux命令\",{\"1\":{\"1744\":1}}],[\"linux\",{\"1\":{\"1552\":1}}],[\"linux系统等多种操作系统平台\",{\"1\":{\"920\":1}}],[\"linus\",{\"1\":{\"1392\":2}}],[\"link>\",{\"1\":{\"1718\":2}}],[\"link标签引入外部资源\",{\"1\":{\"1293\":1}}],[\"link\",{\"1\":{\"922\":1,\"1198\":1,\"1472\":1,\"1515\":1,\"1564\":1,\"1606\":4,\"1718\":2,\"2377\":2,\"2574\":2,\"2615\":1}}],[\"linkedblockingqueue<e>\",{\"1\":{\"338\":1}}],[\"linkedblockingqueue<>\",{\"1\":{\"337\":1}}],[\"linkedblockingqueue<object>\",{\"1\":{\"337\":1}}],[\"linkedblockingqueue是一个有边界的队列\",{\"1\":{\"336\":1}}],[\"linkedblockingqueue\",{\"0\":{\"335\":1},\"1\":{\"337\":2,\"338\":2}}],[\"linkedhashmap\",{\"0\":{\"297\":1},\"1\":{\"289\":1}}],[\"linkedhashset<>\",{\"1\":{\"283\":1}}],[\"linkedhashset<integer>\",{\"1\":{\"283\":1}}],[\"linkedhashset加入顺序和取出元素\",{\"1\":{\"282\":1}}],[\"linkedhashset\",{\"0\":{\"282\":1},\"1\":{\"276\":1,\"282\":2}}],[\"linkedlist\",{\"1\":{\"263\":1,\"1274\":1}}],[\"linkedlist中维护了两个属性first和last分别指向首节点和尾节点\",{\"1\":{\"261\":1}}],[\"linkedlist底层维护了一个双向链表\",{\"1\":{\"261\":1}}],[\"linkedlist底层实现了双向链表和双端队列特点\",{\"1\":{\"259\":1}}],[\"linkedlist<connection>\",{\"1\":{\"1274\":2,\"1280\":2,\"1288\":2}}],[\"linkedlist<savepoint>\",{\"1\":{\"1235\":2}}],[\"linkedlist<string>\",{\"1\":{\"260\":1}}],[\"linkedlist<e>\",{\"1\":{\"263\":1}}],[\"linkedlist<>\",{\"1\":{\"260\":1,\"357\":1,\"2678\":1,\"2679\":1,\"2680\":1}}],[\"linkedlist常用方法\",{\"1\":{\"260\":1}}],[\"linkedlist实现类\",{\"1\":{\"249\":1}}],[\"linklast\",{\"1\":{\"263\":2}}],[\"linedlist底层代码\",{\"0\":{\"263\":1}}],[\"linedlist是链表\",{\"1\":{\"261\":1}}],[\"linedlist\",{\"0\":{\"259\":1}}],[\"line\",{\"0\":{\"176\":1},\"1\":{\"174\":1,\"725\":1,\"1195\":1,\"1198\":1,\"1695\":1}}],[\"likeright\",{\"0\":{\"2243\":1},\"1\":{\"2243\":1}}],[\"likeleft\",{\"0\":{\"2243\":1}}],[\"like模糊查询\",{\"0\":{\"1035\":1}}],[\"like\",{\"0\":{\"2243\":1},\"1\":{\"177\":1,\"1035\":2,\"1076\":1,\"1078\":1,\"1079\":2,\"1082\":1,\"1106\":1,\"1147\":3,\"1156\":4,\"2243\":2,\"2245\":2,\"2246\":2,\"2250\":2,\"2253\":2,\"2256\":3,\"2257\":2,\"2406\":1,\"2407\":1,\"2459\":2,\"2503\":2}}],[\"li4\",{\"1\":{\"79\":1}}],[\"le\",{\"0\":{\"2239\":1},\"1\":{\"2025\":6,\"2031\":6}}],[\"leading\",{\"1\":{\"1091\":1}}],[\"len个字符长的子串替换为字符串instr\",{\"1\":{\"1088\":1}}],[\"len\",{\"1\":{\"316\":8,\"407\":1,\"832\":2,\"1088\":1,\"1091\":3}}],[\"lengthcharat\",{\"1\":{\"1580\":1}}],[\"length属性\",{\"1\":{\"1406\":1}}],[\"length来计算value的位置\",{\"1\":{\"296\":1}}],[\"length字段来判断当前请求的数据是否已经全部接收\",{\"1\":{\"164\":1}}],[\"length\",{\"0\":{\"204\":1},\"1\":{\"30\":2,\"279\":3,\"288\":2,\"294\":8,\"296\":1,\"316\":3,\"328\":2,\"364\":1,\"386\":2,\"387\":1,\"389\":2,\"390\":1,\"392\":1,\"395\":1,\"396\":1,\"431\":1,\"515\":2,\"516\":4,\"517\":4,\"518\":4,\"830\":2,\"832\":2,\"850\":3,\"856\":2,\"876\":1,\"1087\":2,\"1266\":2,\"1275\":2,\"1386\":2,\"1388\":1,\"1406\":1,\"1417\":3,\"1451\":1,\"1458\":1,\"1459\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1544\":1,\"1555\":1,\"1574\":1,\"1579\":4,\"1580\":1,\"1586\":1,\"1701\":4,\"2124\":1,\"2128\":1}}],[\"left=\",{\"1\":{\"1664\":1}}],[\"left和right不会同时使用\",{\"1\":{\"1533\":1,\"1534\":1}}],[\"left\",{\"1\":{\"288\":1,\"1060\":1,\"1061\":1,\"1072\":2,\"1091\":1,\"1148\":1,\"1300\":1,\"1518\":1,\"1521\":6,\"1523\":3,\"1524\":3,\"1525\":3,\"1528\":1,\"1529\":3,\"1533\":1,\"1534\":2,\"1535\":4,\"1665\":1,\"1695\":1,\"2423\":1,\"2425\":1,\"2426\":1,\"2428\":1,\"2429\":1,\"2431\":2}}],[\"level=\",{\"1\":{\"2312\":1,\"2487\":2,\"2757\":1,\"2896\":1}}],[\"level\",{\"1\":{\"146\":3,\"1113\":2,\"1897\":1,\"1898\":3}}],[\"less\",{\"1\":{\"111\":1,\"1541\":1,\"1552\":1,\"1558\":1}}],[\"let则不会提前\",{\"1\":{\"73\":1}}],[\"let只能声明一次\",{\"1\":{\"73\":1}}],[\"let声明的变量时局部变量\",{\"1\":{\"73\":1}}],[\"let声明变量\",{\"0\":{\"73\":1}}],[\"let\",{\"1\":{\"73\":6,\"75\":2,\"76\":3,\"77\":4,\"78\":3,\"79\":7,\"80\":4}}],[\"legend\",{\"1\":{\"62\":1,\"65\":1}}],[\"lombok包\",{\"1\":{\"2665\":1}}],[\"lombok\",{\"1\":{\"2267\":1,\"2374\":1,\"2629\":1,\"2665\":2,\"2756\":1,\"2891\":1}}],[\"lombok依赖\",{\"1\":{\"2186\":1}}],[\"lookup\",{\"1\":{\"2186\":1}}],[\"loop\",{\"1\":{\"1185\":1}}],[\"lone\",{\"1\":{\"1392\":4}}],[\"longtext\",{\"1\":{\"941\":1}}],[\"longstream\",{\"1\":{\"888\":2}}],[\"long\",{\"1\":{\"36\":2,\"309\":6,\"324\":1,\"356\":7,\"360\":3,\"371\":3,\"380\":2,\"386\":1,\"389\":1,\"428\":1,\"479\":1,\"511\":1,\"512\":1,\"513\":1,\"861\":1,\"863\":2,\"865\":1,\"866\":1,\"880\":1,\"888\":7,\"2030\":2,\"2190\":1,\"2219\":1,\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2289\":2,\"2299\":1}}],[\"losal\",{\"1\":{\"1211\":7}}],[\"lost\",{\"1\":{\"316\":1}}],[\"lokkit\",{\"1\":{\"810\":2}}],[\"lowsal\",{\"1\":{\"1211\":1}}],[\"lower\",{\"1\":{\"1089\":1}}],[\"low\",{\"1\":{\"363\":2,\"364\":7}}],[\"loadpage\",{\"1\":{\"2159\":1}}],[\"loadonstartup\",{\"1\":{\"1849\":1}}],[\"loadclass\",{\"1\":{\"575\":1,\"580\":1}}],[\"loadfactor\",{\"1\":{\"294\":6}}],[\"load\",{\"0\":{\"2157\":1},\"1\":{\"294\":3,\"1279\":1,\"2157\":2,\"2158\":1,\"2159\":2,\"2493\":1,\"2910\":1}}],[\"loader\",{\"1\":{\"115\":9,\"2608\":1,\"2609\":1}}],[\"loader和\",{\"1\":{\"115\":1}}],[\"lotus\",{\"1\":{\"208\":2}}],[\"loc=\",{\"1\":{\"1221\":1,\"1226\":1,\"1253\":1,\"1264\":1,\"2414\":1}}],[\"locator\",{\"1\":{\"1324\":1}}],[\"location表示本地资源目录\",{\"1\":{\"2789\":1}}],[\"location=\",{\"1\":{\"2584\":1,\"2599\":1,\"2666\":1,\"2789\":6,\"2790\":1,\"2898\":1,\"2902\":1,\"2903\":1,\"2906\":1}}],[\"location>\",{\"1\":{\"1960\":2}}],[\"location对象\",{\"0\":{\"1462\":1},\"1\":{\"1462\":1}}],[\"location\",{\"1\":{\"1211\":1,\"1451\":3,\"1462\":5}}],[\"localoutputparametercache\",{\"1\":{\"2493\":1}}],[\"localcachescope\",{\"1\":{\"2493\":1}}],[\"localcache\",{\"1\":{\"2493\":4}}],[\"localstorage\",{\"1\":{\"1451\":1}}],[\"localrepository>\",{\"1\":{\"675\":1}}],[\"localrepository<\",{\"1\":{\"675\":1}}],[\"localrepository\",{\"1\":{\"675\":1}}],[\"local\",{\"1\":{\"380\":4,\"676\":1,\"897\":1}}],[\"localtimestamp\",{\"1\":{\"1093\":1}}],[\"localtime用的不如localdatetime多\",{\"1\":{\"379\":1}}],[\"localtime\",{\"0\":{\"379\":1},\"1\":{\"379\":6,\"892\":2,\"893\":4,\"899\":5,\"901\":1,\"1093\":1}}],[\"localdatelocaltimelocaldatetime\",{\"1\":{\"893\":1}}],[\"localdatetime是不带时区的\",{\"1\":{\"901\":1}}],[\"localdatetime3\",{\"1\":{\"379\":2}}],[\"localdatetime2\",{\"1\":{\"379\":2}}],[\"localdatetime1\",{\"1\":{\"379\":2}}],[\"localdatetime\",{\"0\":{\"379\":1},\"1\":{\"379\":24,\"380\":9,\"892\":1,\"893\":4,\"895\":4,\"897\":4,\"900\":11,\"901\":2,\"2289\":1,\"2299\":1}}],[\"localdate\",{\"0\":{\"379\":1},\"1\":{\"379\":7,\"892\":2,\"893\":4,\"896\":4,\"899\":5,\"901\":1}}],[\"localhost目录中生成一个该项目的xml文件名称为\",{\"1\":{\"1779\":1}}],[\"localhost指代的是本机的ip地址\",{\"1\":{\"503\":1}}],[\"localhost\",{\"1\":{\"88\":1,\"135\":1,\"138\":1,\"502\":1,\"503\":1,\"506\":4,\"515\":3,\"516\":6,\"517\":6,\"518\":6,\"545\":1,\"1115\":1,\"1116\":1,\"1216\":1,\"1251\":1,\"1743\":1,\"1766\":1,\"1767\":1,\"1838\":2,\"1839\":3,\"1840\":3,\"1841\":4,\"1842\":4,\"2168\":1,\"2169\":2,\"2170\":2,\"2171\":2,\"2297\":1,\"2753\":1,\"2764\":1,\"2820\":1,\"2926\":3,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"loc\",{\"1\":{\"1211\":6,\"1222\":3,\"1226\":9,\"1227\":3,\"1253\":3,\"1264\":9,\"2276\":1,\"2409\":1,\"2410\":1,\"2414\":1,\"2422\":2,\"2425\":3,\"2428\":3,\"2435\":3,\"2679\":1,\"2680\":1}}],[\"locked\",{\"1\":{\"489\":5,\"490\":5}}],[\"lock只有代码块锁\",{\"1\":{\"481\":1}}],[\"lock是显式锁\",{\"1\":{\"481\":1}}],[\"lock和synchronized的区别\",{\"0\":{\"481\":1}}],[\"lock可提供多种锁方案\",{\"1\":{\"473\":1}}],[\"lock锁的api\",{\"0\":{\"478\":1}}],[\"lock锁\",{\"0\":{\"473\":1},\"1\":{\"473\":1}}],[\"lock\",{\"1\":{\"94\":1,\"316\":10,\"328\":6,\"330\":1,\"475\":1,\"476\":2,\"478\":1,\"480\":5,\"482\":1,\"490\":10,\"1686\":1}}],[\"logaspect\",{\"1\":{\"2635\":1}}],[\"logback\",{\"1\":{\"2487\":2}}],[\"logback<\",{\"1\":{\"2484\":1}}],[\"logpath\",{\"1\":{\"2312\":1}}],[\"logmessageformat=com\",{\"1\":{\"2298\":2,\"2299\":1,\"2301\":1}}],[\"log=com\",{\"1\":{\"2298\":1}}],[\"logimpl\",{\"1\":{\"2315\":1,\"2374\":1}}],[\"logic\",{\"1\":{\"2235\":3}}],[\"logincheckcontroller\",{\"1\":{\"2096\":2}}],[\"logincontroller\",{\"0\":{\"2056\":1},\"1\":{\"2055\":1,\"2056\":2,\"2060\":1,\"2062\":2,\"2063\":1,\"2094\":1,\"2095\":2}}],[\"loginfilter\",{\"1\":{\"2063\":1}}],[\"loginservlet<\",{\"1\":{\"1795\":1}}],[\"loginservlet\",{\"0\":{\"1909\":1},\"1\":{\"1794\":1,\"1907\":1,\"1909\":2,\"2112\":1}}],[\"loginout\",{\"1\":{\"356\":2}}],[\"login\",{\"0\":{\"1907\":1,\"2055\":1},\"1\":{\"176\":1,\"356\":4,\"1793\":1,\"1795\":1,\"1909\":1,\"1910\":1,\"2055\":1,\"2060\":2,\"2063\":2,\"2914\":1,\"2916\":1}}],[\"logout\",{\"1\":{\"2088\":2}}],[\"logo\",{\"1\":{\"2060\":2}}],[\"log10e\",{\"1\":{\"1411\":1}}],[\"log2e\",{\"1\":{\"1411\":1}}],[\"loggers>\",{\"1\":{\"2312\":1,\"2757\":1,\"2896\":1}}],[\"logger=logger\",{\"1\":{\"1288\":1}}],[\"logger\",{\"1\":{\"1286\":6,\"1288\":12,\"2487\":1}}],[\"logging\",{\"1\":{\"1755\":1,\"2193\":1,\"2298\":1,\"2301\":1,\"2311\":1,\"2665\":1,\"2756\":1,\"2891\":1}}],[\"logging<\",{\"1\":{\"697\":2,\"2629\":2,\"2665\":2,\"2891\":2}}],[\"loggit\",{\"1\":{\"739\":1}}],[\"logfile=spy\",{\"1\":{\"2301\":1}}],[\"logfile=org\",{\"1\":{\"1285\":1,\"2308\":1,\"2374\":1}}],[\"logfile\",{\"1\":{\"1285\":4,\"2308\":5,\"2374\":5}}],[\"log4j2\",{\"1\":{\"2756\":1,\"2891\":1}}],[\"log4j1\",{\"1\":{\"2374\":1}}],[\"log4j<\",{\"1\":{\"2311\":1,\"2756\":1,\"2891\":1}}],[\"log4j\",{\"1\":{\"1285\":14,\"2308\":13,\"2315\":1,\"2374\":14,\"2756\":1}}],[\"log4j日志的级别\",{\"0\":{\"1284\":1},\"1\":{\"2304\":1}}],[\"log4j日志框架\",{\"0\":{\"1281\":1,\"3087\":1},\"1\":{\"54\":1,\"2896\":1}}],[\"logngblob\",{\"1\":{\"941\":1}}],[\"logs目录用来存放tomcat在运行过程中产生的日志文件\",{\"1\":{\"1744\":1}}],[\"logs\",{\"1\":{\"772\":1,\"1744\":1}}],[\"log\",{\"1\":{\"73\":4,\"74\":1,\"75\":4,\"76\":4,\"77\":2,\"78\":2,\"79\":4,\"80\":4,\"87\":1,\"88\":1,\"103\":2,\"106\":2,\"109\":2,\"739\":2,\"772\":2,\"1285\":1,\"1383\":1,\"1384\":1,\"1385\":2,\"1386\":5,\"1388\":1,\"1389\":1,\"1391\":1,\"1392\":2,\"1393\":1,\"1394\":2,\"1395\":1,\"1396\":1,\"1397\":2,\"1398\":1,\"1399\":1,\"1400\":2,\"1401\":2,\"1406\":7,\"1409\":12,\"1411\":1,\"1412\":12,\"1416\":13,\"1417\":1,\"1419\":4,\"1420\":3,\"1421\":4,\"1423\":3,\"1424\":6,\"1425\":4,\"1433\":6,\"1439\":6,\"1442\":1,\"1455\":1,\"1456\":1,\"1459\":1,\"1462\":4,\"1488\":1,\"1489\":2,\"1490\":2,\"1491\":2,\"1493\":2,\"1494\":2,\"1567\":3,\"1568\":3,\"1570\":3,\"1572\":1,\"1573\":7,\"1585\":1,\"1640\":2,\"1656\":3,\"1658\":3,\"1659\":3,\"1661\":3,\"1721\":1,\"1730\":6,\"2124\":4,\"2128\":4,\"2132\":2,\"2166\":5,\"2193\":1,\"2301\":11,\"2308\":1,\"2312\":3,\"2374\":1,\"2877\":1}}],[\"不影响外层\",{\"1\":{\"2737\":1}}],[\"不然会死锁\",{\"1\":{\"2735\":1}}],[\"不适用分布缓存\",{\"1\":{\"2482\":1}}],[\"不灵活\",{\"1\":{\"2438\":1}}],[\"不换行显示\",{\"1\":{\"2301\":2}}],[\"不格式化语句\",{\"1\":{\"2301\":1}}],[\"不对\",{\"1\":{\"2287\":1}}],[\"不调用or则默认为使用\",{\"1\":{\"2245\":1}}],[\"不在同一个域下\",{\"1\":{\"2141\":1}}],[\"不关心结果的实现过程\",{\"1\":{\"2043\":1}}],[\"不关心结果如何使用\",{\"1\":{\"2043\":1}}],[\"不包含纪元的年份\",{\"1\":{\"2030\":1}}],[\"不包括注解的\",{\"1\":{\"555\":1}}],[\"不包括\",{\"1\":{\"382\":1}}],[\"不显示\",{\"1\":{\"2029\":1}}],[\"不显示出来\",{\"1\":{\"1338\":1}}],[\"不推荐开启懒加载\",{\"1\":{\"2555\":1}}],[\"不推荐使用\",{\"1\":{\"1988\":1}}],[\"不推荐和windows的命令行窗口混用\",{\"1\":{\"725\":1}}],[\"不利于后期的维护扩展\",{\"1\":{\"2371\":1}}],[\"不利于后期的维护\",{\"1\":{\"1927\":1}}],[\"不以\",{\"1\":{\"1868\":1,\"1873\":1,\"1877\":1}}],[\"不应该在源servlet中提交响应结果\",{\"1\":{\"1855\":1}}],[\"不匹配\",{\"1\":{\"1838\":1,\"1839\":1,\"1840\":1,\"1841\":2}}],[\"不再通过dispatcherservlet了\",{\"1\":{\"2862\":1}}],[\"不再需要强转\",{\"1\":{\"1820\":1}}],[\"不再支持\",{\"1\":{\"1558\":1}}],[\"不再支持链式调用\",{\"1\":{\"861\":1}}],[\"不接受冒泡上来的事件\",{\"1\":{\"1659\":2}}],[\"不兼容ie678\",{\"1\":{\"1542\":2}}],[\"不常用\",{\"1\":{\"1369\":2}}],[\"不安全\",{\"1\":{\"1330\":1}}],[\"不需要\",{\"1\":{\"2437\":1}}],[\"不需要写一行jdbc代码\",{\"1\":{\"2196\":1}}],[\"不需要我们做复杂的处理\",{\"1\":{\"2119\":1}}],[\"不需要我们手动去new\",{\"1\":{\"1217\":1}}],[\"不需要等待返回\",{\"1\":{\"2104\":1}}],[\"不需要在项目中编写页面了\",{\"1\":{\"1937\":1}}],[\"不需要频繁的更新和重启项目\",{\"1\":{\"1933\":1}}],[\"不需要编译\",{\"1\":{\"1374\":2}}],[\"不需要再输入用户名和密码了\",{\"1\":{\"763\":1}}],[\"不删除数据只修改数据标识来记录状态\",{\"1\":{\"1148\":1}}],[\"不遵循最左原则\",{\"1\":{\"1135\":1}}],[\"不考虑事务的隔离性会引发的问题\",{\"0\":{\"1111\":1}}],[\"不必书写\",{\"1\":{\"1082\":1}}],[\"不管是selectlist\",{\"1\":{\"2371\":1}}],[\"不管是什么样的jar包\",{\"1\":{\"706\":1}}],[\"不管子查询在哪里\",{\"1\":{\"1069\":1}}],[\"不想要的记录呢\",{\"1\":{\"1055\":1}}],[\"不允许跨服务\",{\"1\":{\"1872\":1}}],[\"不允许在外部罗列方法名称\",{\"1\":{\"1647\":1}}],[\"不允许操作\",{\"1\":{\"1001\":1}}],[\"不允许重复\",{\"1\":{\"986\":1}}],[\"不允许同时存在两个并行的响应\",{\"1\":{\"164\":1}}],[\"不使用阻塞性缓存\",{\"1\":{\"2481\":1}}],[\"不使用序列\",{\"1\":{\"939\":1}}],[\"不使用泛型\",{\"1\":{\"234\":1}}],[\"不过它仅仅在基于portlet的web应用中才有意义lazy\",{\"1\":{\"2552\":1}}],[\"不过tomcat并没有配置任何默认的用户\",{\"1\":{\"1758\":1}}],[\"不过注解有一个最大的限制是\",{\"1\":{\"904\":1}}],[\"不过要注意的是方法引用只能引用已经存在的方法\",{\"1\":{\"833\":1}}],[\"不保存数据\",{\"1\":{\"857\":1}}],[\"不保证映射的顺序\",{\"1\":{\"290\":1}}],[\"不满足\",{\"1\":{\"848\":1}}],[\"不参与服务器上部署运行\",{\"1\":{\"770\":1}}],[\"不勾选\",{\"1\":{\"725\":1}}],[\"不仅仅可以增强接口中定义的方法还可以增强一个类的其他方法\",{\"1\":{\"2616\":1}}],[\"不仅仅存在于jsp\",{\"1\":{\"1952\":1}}],[\"不仅仅存在于jsp页面\",{\"1\":{\"1952\":2}}],[\"不仅易于上手\",{\"1\":{\"1611\":1,\"1943\":1}}],[\"不仅如此\",{\"1\":{\"650\":1}}],[\"不仅极大的节约了存储空间\",{\"1\":{\"649\":1}}],[\"不限制修饰符\",{\"1\":{\"588\":1}}],[\"不太安全可靠\",{\"1\":{\"499\":1}}],[\"不会滚的异常\",{\"0\":{\"2717\":1}}],[\"不会自动缓存结果\",{\"1\":{\"2141\":1}}],[\"不会响应给浏览器\",{\"1\":{\"1952\":2}}],[\"不会被编入java代码\",{\"1\":{\"1952\":1}}],[\"不会在浏览器中显示而是直接做下载处理\",{\"1\":{\"1807\":2}}],[\"不会用value\",{\"1\":{\"1333\":1}}],[\"不会返回已删除的行量\",{\"1\":{\"976\":1}}],[\"不会对其他分支有任何影响\",{\"1\":{\"747\":1}}],[\"不会生成版本记录\",{\"1\":{\"738\":1}}],[\"不会保留在内存中\",{\"1\":{\"553\":1}}],[\"不会干扰原有代码\",{\"1\":{\"520\":1}}],[\"不会出现提示\",{\"1\":{\"484\":1}}],[\"不会出现异常\",{\"1\":{\"484\":1}}],[\"不会相互影响\",{\"1\":{\"379\":1}}],[\"不开启数据库物理事务\",{\"1\":{\"2728\":1}}],[\"不开启\",{\"1\":{\"478\":1}}],[\"不要求实体类对象实现serializable接口\",{\"1\":{\"2473\":1}}],[\"不要书写没有必要的多层次路径\",{\"1\":{\"1879\":1}}],[\"不要作出任何的响应处理\",{\"1\":{\"1856\":1}}],[\"不要忘记修改catalina\",{\"1\":{\"1740\":1}}],[\"不要将框架集合放入body中\",{\"1\":{\"1322\":2}}],[\"不要将run\",{\"1\":{\"472\":1}}],[\"不要有超过5个以上的表连接\",{\"1\":{\"1148\":1}}],[\"不要使用\",{\"1\":{\"773\":1}}],[\"不要读作\",{\"1\":{\"656\":1}}],[\"不要安装到中文目录其他默认即可\",{\"1\":{\"85\":1}}],[\"不建议使用\",{\"1\":{\"461\":1}}],[\"不指定插入的列\",{\"0\":{\"971\":1}}],[\"不指定返回object\",{\"1\":{\"449\":1}}],[\"不指定索引默认删除的是第一个数据\",{\"1\":{\"261\":1}}],[\"不执行追加\",{\"1\":{\"408\":1}}],[\"不存在则创建\",{\"1\":{\"387\":1}}],[\"不等于\",{\"1\":{\"364\":1,\"1030\":1}}],[\"不移除\",{\"1\":{\"327\":1}}],[\"不支持读写同时操作\",{\"1\":{\"326\":1}}],[\"不添加了\",{\"1\":{\"316\":1}}],[\"不重写比较器\",{\"1\":{\"287\":1}}],[\"不带索引默认添加到链表的最后\",{\"1\":{\"260\":1}}],[\"不唯一\",{\"1\":{\"249\":1}}],[\"不用我们自己去编码处理\",{\"1\":{\"2524\":1}}],[\"不用关注具体使用哪个实现类和实现细节问题\",{\"1\":{\"2522\":1}}],[\"不用引入中间类\",{\"1\":{\"2440\":1}}],[\"不用修改\",{\"1\":{\"1777\":2}}],[\"不用进行字符串拼接\",{\"1\":{\"1248\":1,\"1258\":1}}],[\"不用重新启动程序\",{\"1\":{\"671\":1}}],[\"不用\",{\"1\":{\"244\":1}}],[\"不能有sex参数\",{\"1\":{\"2817\":1}}],[\"不能有重复元素\",{\"1\":{\"277\":1}}],[\"不能读取到实现类方法上的注解\",{\"1\":{\"2610\":1}}],[\"不能转换成被代理类的对象\",{\"1\":{\"2610\":1}}],[\"不能转发至外部资源\",{\"1\":{\"1861\":1}}],[\"不能复用\",{\"1\":{\"2289\":1}}],[\"不能点击\",{\"1\":{\"1701\":2}}],[\"不能违背的\",{\"1\":{\"1517\":1,\"1518\":96}}],[\"不能对网络文档进行修改和删除\",{\"1\":{\"1374\":1}}],[\"不能将数据存入到服务器上\",{\"1\":{\"1374\":1}}],[\"不能除尽\",{\"1\":{\"1361\":1}}],[\"不能正常提交\",{\"1\":{\"1333\":1}}],[\"不能长久存储\",{\"1\":{\"1283\":1}}],[\"不能用于html页面\",{\"1\":{\"1983\":1}}],[\"不能用于null判断\",{\"1\":{\"1030\":1}}],[\"不能用peek\",{\"1\":{\"346\":1}}],[\"不能为空字符串\",{\"1\":{\"1579\":1}}],[\"不能为空\",{\"1\":{\"937\":1}}],[\"不能直接放在参数列表上的\",{\"1\":{\"2926\":1}}],[\"不能直接书写\",{\"1\":{\"2407\":1}}],[\"不能直接创建对象\",{\"1\":{\"503\":1}}],[\"不能直接使用e\",{\"1\":{\"240\":1}}],[\"不能保证数据实时一致性\",{\"1\":{\"313\":1}}],[\"不能随意的添加数据\",{\"1\":{\"245\":1}}],[\"不能是静态方法\",{\"1\":{\"241\":1}}],[\"不能是基本数据类型\",{\"1\":{\"219\":1,\"235\":1,\"466\":1}}],[\"不是直接通过操作属性\",{\"1\":{\"2796\":1}}],[\"不是同一个sqlsession\",{\"1\":{\"2476\":1}}],[\"不是在浏览器上运行\",{\"1\":{\"1983\":1}}],[\"不是所有的java类都可以接收请求和作出相应\",{\"1\":{\"1786\":1}}],[\"不是一种新的编程语言\",{\"1\":{\"1720\":1}}],[\"不是一个数字\",{\"1\":{\"1361\":1}}],[\"不是元素\",{\"1\":{\"1389\":1}}],[\"不是保存到文件\",{\"1\":{\"1283\":1}}],[\"不是字节的个数\",{\"1\":{\"972\":1}}],[\"不是set\",{\"1\":{\"379\":1}}],[\"不是新的arr\",{\"1\":{\"313\":1}}],[\"不是通过数组完成的\",{\"1\":{\"261\":1}}],[\"不是泛型方法\",{\"1\":{\"241\":1}}],[\"不是泛型对应的类型就不可以添加入这个集合\",{\"1\":{\"234\":1}}],[\"不是带泛型的方法就是泛型方法\",{\"1\":{\"241\":1}}],[\"不是定义方法\",{\"1\":{\"78\":1}}],[\"不方便系统开发\",{\"1\":{\"2482\":1}}],[\"不方便我们对于项目的管理与维护\",{\"1\":{\"1277\":1}}],[\"不方便\",{\"1\":{\"234\":1}}],[\"不可归还\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"不可能全部存储在内存中\",{\"1\":{\"1125\":1}}],[\"不可重复度和幻读区别\",{\"1\":{\"2692\":1}}],[\"不可重复读外\",{\"1\":{\"2723\":1}}],[\"不可重复读和幻像读\",{\"1\":{\"2720\":1}}],[\"不可重复读和幻读问题\",{\"1\":{\"2693\":1}}],[\"不可重复读的重点是修改\",{\"1\":{\"2692\":1}}],[\"不可重复读\",{\"0\":{\"2691\":1},\"1\":{\"1112\":1,\"2693\":1,\"2722\":1}}],[\"不可重复的数组不能满足要求\",{\"1\":{\"228\":1}}],[\"不可改变\",{\"1\":{\"430\":1}}],[\"不可变性\",{\"1\":{\"379\":1}}],[\"不可继承\",{\"1\":{\"366\":1,\"430\":1}}],[\"不可以自由发挥\",{\"1\":{\"1617\":1}}],[\"不可以使用if等等复杂判断\",{\"1\":{\"1617\":1}}],[\"不可以滚动的resultset变成了可以滚动的rowset\",{\"1\":{\"1209\":1}}],[\"不可以跨库引用\",{\"1\":{\"1158\":1}}],[\"不可以把多种数据保存在同一张数据库表中\",{\"1\":{\"1047\":1}}],[\"不可以直接创建对象\",{\"1\":{\"375\":1}}],[\"不可以有子类\",{\"1\":{\"364\":1}}],[\"不可以添加null元素\",{\"1\":{\"327\":1,\"337\":1}}],[\"不可以添加null\",{\"1\":{\"324\":1}}],[\"不可以添加重复的数据\",{\"1\":{\"315\":1}}],[\"不可以随便添加数据\",{\"1\":{\"245\":1}}],[\"不可以更改\",{\"1\":{\"228\":2}}],[\"不经过服务器解析\",{\"1\":{\"130\":1}}],[\"不经过服务器运算仍然可以直接查看原始值\",{\"1\":{\"123\":1}}],[\"不同浏览器支持的数量不同\",{\"1\":{\"1885\":1}}],[\"不同部分的说明\",{\"1\":{\"1527\":1}}],[\"不同类型的标签使用相同的类型\",{\"1\":{\"1509\":1}}],[\"不同之处在于datasource的实现上的不同\",{\"1\":{\"1209\":1}}],[\"不同项目对应不同的数据库组成\",{\"1\":{\"926\":1}}],[\"不同是stringbuffer是线程安全的\",{\"1\":{\"397\":1}}],[\"不同点\",{\"1\":{\"258\":1}}],[\"不同集合底层数据结构不一样\",{\"1\":{\"228\":1}}],[\"不同的注释方式之间时有差异的\",{\"1\":{\"1952\":1}}],[\"不同的请求方式使用不同的代码处理\",{\"1\":{\"1820\":1}}],[\"不同的标签确实可以使用相同的id\",{\"1\":{\"1510\":1}}],[\"不同的选项的value值要控制为不同\",{\"1\":{\"1335\":1,\"1336\":1}}],[\"不同的库的配置也是互不通用的\",{\"1\":{\"1158\":1}}],[\"不同的资料库都是相互隔离的\",{\"1\":{\"1158\":1}}],[\"不同的数据\",{\"1\":{\"702\":1}}],[\"不同的线程分别占用对方需要的同步资源不放弃\",{\"1\":{\"484\":1}}],[\"不同的版本实现的方式不一样\",{\"1\":{\"294\":1}}],[\"不同的key通过取模来判断存放的位置\",{\"1\":{\"294\":1}}],[\"不同的泛型的引用类型不可以相互赋值\",{\"1\":{\"240\":1}}],[\"不同的解题思路\",{\"1\":{\"223\":1}}],[\"不同的request可以使用同一个连接传输\",{\"1\":{\"167\":1}}],[\"不同\",{\"1\":{\"34\":2,\"2480\":1}}],[\"不走catch中的代码\",{\"1\":{\"20\":1}}],[\"重用切入点表达式\",{\"0\":{\"2635\":1}}],[\"重用性高\",{\"0\":{\"2037\":1}}],[\"重定向问题的特殊问题\",{\"0\":{\"2932\":1}}],[\"重定向下\",{\"1\":{\"2929\":1}}],[\"重定向的特殊问题\",{\"0\":{\"2929\":1}}],[\"重定向到login\",{\"1\":{\"2063\":1}}],[\"重定向\",{\"0\":{\"2864\":1,\"2870\":1,\"2873\":1},\"1\":{\"1917\":1,\"1921\":1}}],[\"重定向可以定向到外部资源\",{\"1\":{\"1865\":1}}],[\"重定向不能帮助我们访问web\",{\"1\":{\"1865\":1}}],[\"重定向也可以帮助我们完成页面跳转\",{\"1\":{\"1865\":1}}],[\"重定向时\",{\"1\":{\"1865\":1}}],[\"重定向是服务器给浏览器重新指定请求方向\",{\"1\":{\"1865\":1}}],[\"重置数据\",{\"1\":{\"1439\":1}}],[\"重置按钮将页面恢复到初始状态\",{\"1\":{\"1339\":1}}],[\"重启mysql57服务\",{\"1\":{\"1154\":1}}],[\"重复注解\",{\"0\":{\"904\":1}}],[\"重复第一个线程的处理过程\",{\"1\":{\"467\":1}}],[\"重要\",{\"0\":{\"2658\":1,\"2659\":1},\"1\":{\"861\":1}}],[\"重命名\",{\"0\":{\"626\":1}}],[\"重票\",{\"1\":{\"462\":1}}],[\"重点属性讲解\",{\"0\":{\"2726\":1}}],[\"重点\",{\"1\":{\"380\":1}}],[\"重点在结构上\",{\"1\":{\"224\":1}}],[\"重新绘制视图\",{\"1\":{\"1613\":2}}],[\"重新执行或用于从多结果序列中获取下一个结果时\",{\"1\":{\"1223\":1}}],[\"重新执行打包程序\",{\"1\":{\"115\":1}}],[\"重新添加外键约束\",{\"1\":{\"1001\":2}}],[\"重新创建了这个表\",{\"1\":{\"976\":1}}],[\"重新提交\",{\"1\":{\"763\":1}}],[\"重新配置\",{\"1\":{\"763\":1}}],[\"重新指定需要的依赖\",{\"1\":{\"714\":1}}],[\"重新计算key在新数组中的位置\",{\"1\":{\"294\":1}}],[\"重新计算\",{\"1\":{\"294\":1}}],[\"重新计算元素位置\",{\"1\":{\"294\":1}}],[\"重新计算当前需要插入的值在新数组的位置\",{\"1\":{\"294\":1}}],[\"重新调整当前元素的hash码\",{\"1\":{\"294\":1}}],[\"重构crud\",{\"0\":{\"1253\":1}}],[\"重构菜单\",{\"0\":{\"629\":1}}],[\"重构\",{\"0\":{\"625\":1,\"3042\":1},\"1\":{\"44\":1}}],[\"重写两个方法\",{\"1\":{\"2574\":1}}],[\"重写日志格式方法\",{\"1\":{\"2299\":1}}],[\"重写service\",{\"1\":{\"1790\":1}}],[\"重写service方法\",{\"0\":{\"1789\":1}}],[\"重写所有的\",{\"1\":{\"1558\":1}}],[\"重写实现类\",{\"0\":{\"1267\":1}}],[\"重写默认方法\",{\"1\":{\"817\":1}}],[\"重写call方法\",{\"1\":{\"449\":1}}],[\"重写compare方法\",{\"1\":{\"287\":1}}],[\"重写compareto方法\",{\"1\":{\"271\":1,\"274\":1,\"287\":1}}],[\"重写构造方法\",{\"1\":{\"441\":1}}],[\"重写run方法\",{\"1\":{\"437\":1,\"438\":1,\"440\":1,\"441\":1,\"444\":1}}],[\"重写equals\",{\"0\":{\"281\":1}}],[\"重写\",{\"1\":{\"34\":1}}],[\"重写与重载异常\",{\"0\":{\"34\":1}}],[\"重载\",{\"1\":{\"34\":1}}],[\"这四个特性简称为acid特性\",{\"1\":{\"2684\":1}}],[\"这几个注解互相混用其实也可以\",{\"1\":{\"2587\":1}}],[\"这会慢一些\",{\"1\":{\"2481\":1}}],[\"这提供了很重要的性能优势\",{\"1\":{\"2481\":1}}],[\"这项配置是否生效前提是配置了\",{\"1\":{\"2301\":1}}],[\"这体现了单一职责的设计原则\",{\"1\":{\"2046\":1}}],[\"这九个对象我们称之为内置对象\",{\"1\":{\"1966\":1}}],[\"这么做的目的就是为了让数据可观察性更强\",{\"1\":{\"1715\":1}}],[\"这么大的项目已经不可能通过package结构来划分模块\",{\"1\":{\"653\":1}}],[\"这行命令的作用是给生产环境配置的提示消息\",{\"1\":{\"1689\":1}}],[\"这两个域直接放在参数列表上即可\",{\"1\":{\"2926\":1}}],[\"这两个依赖仅限于编译的时候使用\",{\"1\":{\"2748\":1}}],[\"这两个是键盘的事件监听\",{\"1\":{\"1663\":1}}],[\"这两种方式获得的对象即是是页面上同一个元素\",{\"1\":{\"1573\":1}}],[\"这一术语是用来设计和布局时使用\",{\"1\":{\"1527\":1}}],[\"这一方法可以在不必传输整个响应内容的情况下\",{\"1\":{\"182\":1}}],[\"这对象我们称之为原型对象\",{\"1\":{\"1423\":1}}],[\"这分文档可以打\",{\"1\":{\"1198\":1}}],[\"这大大减轻了网络负担\",{\"1\":{\"1146\":1}}],[\"这俩字段分别作为外键指向两张表各自的主键\",{\"1\":{\"1051\":1}}],[\"这也就是我们说的事件冒泡\",{\"1\":{\"1656\":1}}],[\"这也是为什么mysql越来越受欢迎的主要原因\",{\"1\":{\"920\":1}}],[\"这也寓意着我们没有办法正常的通过他来存放数据\",{\"1\":{\"346\":1}}],[\"这套api设计合理\",{\"1\":{\"892\":1}}],[\"这表示每个任务都由一个线程独立完成\",{\"1\":{\"888\":1}}],[\"这代表完全使用我们的内容或完全使用他们的内容\",{\"1\":{\"786\":1}}],[\"这还是一个新文件\",{\"1\":{\"736\":1}}],[\"这就发生了在一个事务内两次读到的数据是不一样的情况\",{\"1\":{\"2691\":1}}],[\"这就说明我们的一个静态代理类只能代理一个类\",{\"1\":{\"2606\":1}}],[\"这就受到同源策略的控制\",{\"1\":{\"2169\":1}}],[\"这就浪费了太多的时间\",{\"1\":{\"1250\":1}}],[\"这就是不可重复读\",{\"1\":{\"2692\":1}}],[\"这就是异步\",{\"1\":{\"2104\":1}}],[\"这就是最左匹配原则\",{\"1\":{\"1135\":1}}],[\"这就是jar包之间的冲突\",{\"1\":{\"652\":1}}],[\"这就涉及到我们本节要讲的sql语言\",{\"1\":{\"930\":1}}],[\"这就需要用到maven的依赖管理机制\",{\"1\":{\"653\":1}}],[\"这简直是不可想象的\",{\"1\":{\"651\":1}}],[\"这种事务隔离级别可以防止脏读\",{\"1\":{\"2722\":1}}],[\"这种事务隔离级别可以避免脏读出现\",{\"1\":{\"2721\":1}}],[\"这种隔离级别会产生脏读\",{\"1\":{\"2720\":1}}],[\"这种格式\",{\"1\":{\"2163\":1}}],[\"这种get或post请求中url参数里的\",{\"1\":{\"2150\":1}}],[\"这种嵌入java代码的处理比较繁琐\",{\"1\":{\"2010\":1}}],[\"这种数据结构就叫做索引\",{\"1\":{\"1125\":1}}],[\"这种通过条件过滤去除笛卡尔积的查询\",{\"1\":{\"1055\":1}}],[\"这种查询方式是不正确的会出现笛卡尔积的情况\",{\"1\":{\"1054\":1}}],[\"这种约束就是外键约束\",{\"1\":{\"997\":1}}],[\"这种机制就是完整性约束\",{\"1\":{\"981\":1}}],[\"这种情况下\",{\"1\":{\"2607\":1}}],[\"这种情况下我们会出现效率低下的情况\",{\"1\":{\"304\":1}}],[\"这种情况叫做hash碰撞\",{\"1\":{\"703\":1}}],[\"这种\",{\"1\":{\"570\":1}}],[\"这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制\",{\"1\":{\"570\":1}}],[\"这种方式在多线程访问情况下可能出现问题\",{\"1\":{\"2408\":1}}],[\"这种方式实现线程间协作更加安全和高效\",{\"1\":{\"475\":1}}],[\"这种方法是把测试对象看做一个打开的盒子\",{\"1\":{\"530\":1}}],[\"这种方法是把测试对象看做一个黑盒子\",{\"1\":{\"529\":1}}],[\"这种写法不好\",{\"1\":{\"76\":1}}],[\"这第13个你打算放在没有元素的位置上的时候\",{\"1\":{\"294\":1}}],[\"这里配置三大组件\",{\"1\":{\"2898\":1}}],[\"这里配置转换服务工厂\",{\"1\":{\"2799\":1}}],[\"这里所谓的非事务形式的数据库访问只是指没有显式的事务边界而已\",{\"1\":{\"2728\":1}}],[\"这里通过\",{\"1\":{\"2487\":1}}],[\"这里指定封装成userlist实例\",{\"1\":{\"2420\":1}}],[\"这里使用了lambda表达式\",{\"1\":{\"2246\":1,\"2247\":1}}],[\"这里默认配置了一个jsp的加载引擎\",{\"1\":{\"1934\":1}}],[\"这里是文字\",{\"1\":{\"1570\":1}}],[\"这里是链接\",{\"1\":{\"1175\":1}}],[\"这里我们只讲怎样使用html\",{\"1\":{\"1329\":1}}],[\"这里介绍一些常用的apl\",{\"1\":{\"861\":1}}],[\"这里可以不导入\",{\"1\":{\"2629\":1}}],[\"这里可以直接点\",{\"1\":{\"786\":1}}],[\"这里可以选择你的maven安装目录\",{\"1\":{\"676\":1}}],[\"这里要使用\",{\"1\":{\"773\":1}}],[\"这里设置用户签名和将来登录github\",{\"1\":{\"726\":1}}],[\"这里推荐选择第一个\",{\"1\":{\"725\":1}}],[\"这里推荐使用淘宝\",{\"1\":{\"93\":1}}],[\"这里\",{\"1\":{\"696\":1}}],[\"这里不建议使用idea默认的\",{\"1\":{\"676\":1}}],[\"这里同样需要用到maven\",{\"1\":{\"654\":1}}],[\"这里的顺序决定了过滤器的顺序\",{\"1\":{\"2047\":1}}],[\"这里的线程表示的是逻辑单元\",{\"1\":{\"452\":1}}],[\"这里的核表示的是内核\",{\"1\":{\"452\":1}}],[\"这里的存储指的是内存层面的存储\",{\"1\":{\"228\":1}}],[\"这时事务2又插入了一条工资大于3000的记录\",{\"1\":{\"2692\":1}}],[\"这时另外一个事务也访问了这个数据\",{\"1\":{\"2690\":1}}],[\"这时可以通过select方法来处理\",{\"1\":{\"2257\":1}}],[\"这时querywrapper也能很轻松的处理\",{\"1\":{\"2256\":1}}],[\"这时我们来看看在mybatisplus中是如何处理的\",{\"1\":{\"2260\":1}}],[\"这时我们可以在user实体的uid属性上添加\",{\"1\":{\"2226\":1}}],[\"这时我们就可以通过\",{\"1\":{\"2224\":1}}],[\"这时我们就可以通过jdk8中提供的stream\",{\"1\":{\"856\":1}}],[\"这时我们通过时间校正器效果会更好\",{\"1\":{\"900\":1}}],[\"这时我们希望有更加高效的处理方式\",{\"1\":{\"856\":1}}],[\"这时就可以采取服务端push的技术\",{\"1\":{\"169\":1}}],[\"这时的程序无法运行的\",{\"1\":{\"105\":1,\"108\":1}}],[\"这些现有的广泛流行的协议和标准\",{\"1\":{\"2823\":1}}],[\"这些\",{\"1\":{\"2622\":1}}],[\"这些方法称之为连接点\",{\"1\":{\"2621\":1}}],[\"这些方法可以被分成两种\",{\"1\":{\"861\":1}}],[\"这些filter组合起来称之为一个filter链\",{\"1\":{\"2046\":1}}],[\"这些变量会被tomcat的启动脚本所读取\",{\"1\":{\"1779\":1}}],[\"这些虚拟主机可以通过在engine容器中定义多个不同的host组件来实现\",{\"1\":{\"1766\":1}}],[\"这些输入框\",{\"1\":{\"1329\":1}}],[\"这些信息可以在web\",{\"1\":{\"1818\":1}}],[\"这些信息在粗粒度级别上突出显示应用程序的进程debug\",{\"1\":{\"1284\":1}}],[\"这些信息被保存在annotation的\",{\"1\":{\"534\":1}}],[\"这些错误可能导致应用程序异常中止error\",{\"1\":{\"1284\":1}}],[\"这些get方法可以访问当前行中的不同列\",{\"1\":{\"1259\":1}}],[\"这些数据结构以某种方式指向数据\",{\"1\":{\"1125\":1}}],[\"这些规则就称为范式\",{\"1\":{\"1045\":1}}],[\"这些内容在linux下可能会手动更改\",{\"1\":{\"923\":1}}],[\"这些线程都是轻量级的进程\",{\"1\":{\"920\":1}}],[\"这些都需要靠数据库管理系统完成\",{\"1\":{\"910\":1}}],[\"这些符号是可识别的\",{\"1\":{\"908\":1}}],[\"这些文件的状态会随着我们执行git的命令发生变化\",{\"1\":{\"734\":2}}],[\"这些单词的首字母\",{\"1\":{\"609\":1}}],[\"这些标记可以在编译\",{\"1\":{\"533\":1}}],[\"这些帧乱序发送\",{\"1\":{\"167\":1}}],[\"这些是定义函数\",{\"1\":{\"78\":1}}],[\"这样才是这里说的b\",{\"1\":{\"2728\":1}}],[\"这样数据库就能够针对查询操作来进行优化\",{\"1\":{\"2714\":1}}],[\"这样最终违背了一致性原则\",{\"1\":{\"2698\":1}}],[\"这样使用并不优雅\",{\"1\":{\"2457\":1}}],[\"这样我们只需要放行静态资源目录就行\",{\"1\":{\"2790\":1}}],[\"这样我们在具体的操作数据库的时候\",{\"1\":{\"2198\":1}}],[\"这样我们直接在success方法中接收返回的数据即可\",{\"1\":{\"2170\":1}}],[\"这样控制器可以为构造应用程序提供强有力的手段\",{\"1\":{\"2040\":1}}],[\"这样idea在启动项目之后可以自动帮助我们打开浏览器并访问url中的资源on\",{\"1\":{\"1777\":1}}],[\"这样造成的结果就是要么空白\",{\"1\":{\"1638\":1}}],[\"这样便于我们对网页做整体的布局设计\",{\"1\":{\"1594\":1}}],[\"这样这个元素就会相对父级位置产生变化\",{\"1\":{\"1535\":1}}],[\"这样后台接收就可以区分了\",{\"1\":{\"1335\":1,\"1336\":1}}],[\"这样网页就具有了交互性\",{\"1\":{\"1329\":1}}],[\"这样是不友好的\",{\"1\":{\"1277\":1}}],[\"这样当我们需要操作数据库是\",{\"1\":{\"1262\":1}}],[\"这样rowset对象就有了resultset对象所有的功能\",{\"1\":{\"1209\":1}}],[\"这样建立了完整的链接\",{\"1\":{\"1162\":1}}],[\"这样设计\",{\"1\":{\"1047\":1}}],[\"这样设计才算满足了数据库的第一范式\",{\"1\":{\"1046\":1}}],[\"这样在跳转后的链接中可以获取一些数据\",{\"1\":{\"2868\":1}}],[\"这样在使用时拿到的都是独立的对象以及新的地址\",{\"1\":{\"1705\":1}}],[\"这样在查询订单信息的时候\",{\"1\":{\"1048\":1}}],[\"这样在该表中商品名称\",{\"1\":{\"1047\":1}}],[\"这样在对地址中某一部分操作的时候将非常方便\",{\"1\":{\"1046\":1}}],[\"这样就导致了幻读\",{\"1\":{\"2692\":1}}],[\"这样就允许更改视图层代码而不用重新编译模型和控制器代码\",{\"1\":{\"2036\":1}}],[\"这样就可以自动设置一些外边距与内边距\",{\"1\":{\"1601\":1}}],[\"这样就可以避免sql注入了\",{\"1\":{\"1249\":1}}],[\"这样就可以在这些数据结构上实现高效的查找算法\",{\"1\":{\"1125\":1}}],[\"这样就单引号就不会破坏sql语句的结构\",{\"1\":{\"1249\":1}}],[\"这样就产生一个问题\",{\"1\":{\"1047\":1}}],[\"这样就将该项目克隆一份到当前账号\",{\"1\":{\"759\":1}}],[\"这样即使是免费版的mysql的功能也足够强大\",{\"1\":{\"920\":1}}],[\"这样不利于我们的代码拓展\",{\"1\":{\"816\":1}}],[\"这样你就为开源项目贡献了代码\",{\"1\":{\"757\":1}}],[\"这样你就可以在遵守open\",{\"1\":{\"757\":1}}],[\"这样原项目的作者就可以将你修改的东西合并到原项目的主分支上去\",{\"1\":{\"757\":1}}],[\"这样的优先级匹配到对应的servlet\",{\"1\":{\"1843\":1}}],[\"这样的问题一个两个还可以手工解决\",{\"1\":{\"652\":1}}],[\"这样的话太臃肿了\",{\"1\":{\"2765\":1}}],[\"这样的话可能会造成手动注册管理及其麻烦\",{\"1\":{\"2588\":1}}],[\"这样的话\",{\"1\":{\"296\":1}}],[\"这样只能对于一个生产者和一个消费者使用时可以正常\",{\"1\":{\"489\":1}}],[\"这样更容易被gc\",{\"1\":{\"342\":1}}],[\"这样可以简化$\",{\"1\":{\"2155\":1}}],[\"这样可以大大地节约磁盘空间\",{\"1\":{\"941\":1}}],[\"这样可以提高处理的速度\",{\"1\":{\"887\":1}}],[\"这样可以在线程被激活的第一时间执行任务\",{\"1\":{\"334\":1}}],[\"这样可能导致每次连接传送的数据量增大\",{\"1\":{\"161\":1}}],[\"这样\",{\"1\":{\"302\":1}}],[\"这样也显著地减少了整个下载过程所需要的时间\",{\"1\":{\"164\":1}}],[\"这意味着可以在不重新加载整个网页的情况下\",{\"1\":{\"2108\":1}}],[\"这意味着如果在同一个物理机上启动了多个server实例\",{\"1\":{\"1763\":1}}],[\"这意味着在一个操作系统中实现的应用程序可以很方便地移植到其他的操作系统下\",{\"1\":{\"920\":1}}],[\"这意味着授予用户阅读\",{\"1\":{\"920\":1}}],[\"这意味着\",{\"1\":{\"96\":1}}],[\"这个名字就很好地解释了该类的作用\",{\"1\":{\"2871\":1}}],[\"这个时候springmvc就会找和自己控制单元名称一致的页面展示\",{\"1\":{\"2859\":1}}],[\"这个时候接收返回json数据\",{\"1\":{\"2780\":1}}],[\"这个时候就出现了存储过程这个概念\",{\"1\":{\"1145\":1}}],[\"这个操作不涉及写操作\",{\"1\":{\"2714\":1}}],[\"这个特性默认是关闭的\",{\"1\":{\"2334\":1}}],[\"这个配置几乎没做什么\",{\"1\":{\"2318\":1}}],[\"这个配置直接使用了\",{\"1\":{\"2317\":1}}],[\"这个就需要后台程序接受到数据后通过查询才能够完成的\",{\"1\":{\"2111\":1}}],[\"这个servlet是一个java文件\",{\"1\":{\"1935\":1}}],[\"这个并发能力还与应用的逻辑密切相关\",{\"1\":{\"1757\":1}}],[\"这个间隙是通过\",{\"1\":{\"1601\":1}}],[\"这个示例中就使用了的两个作用\",{\"1\":{\"1546\":1}}],[\"这个元素位置不动\",{\"1\":{\"1536\":1}}],[\"这个元素我们浏览器看到后就明白这是个html文档了\",{\"1\":{\"1290\":1}}],[\"这个标准基于\",{\"1\":{\"1372\":1}}],[\"这个标准由\",{\"1\":{\"1372\":1}}],[\"这个页面可以被浏览器解析\",{\"1\":{\"1325\":1}}],[\"这个简单模型是早期web成功的有功之臣\",{\"1\":{\"1324\":1}}],[\"这个连接也是可以重复利用的\",{\"1\":{\"1209\":1}}],[\"这个表中是以订单编号和商品编号作为联合主键\",{\"1\":{\"1047\":1}}],[\"这个属性只在insert\",{\"1\":{\"2437\":1}}],[\"这个属性的标签都却拥有跨域的能力\",{\"1\":{\"2170\":1}}],[\"这个属性可以让您在对数字编码时包含指定的字符\",{\"1\":{\"2029\":1}}],[\"这个属性重新拆分为省份\",{\"1\":{\"1046\":1}}],[\"这个属性\",{\"1\":{\"1046\":1}}],[\"这个文件的存放位置原则上在哪里都可以\",{\"1\":{\"772\":1}}],[\"这个文件帮助锁定安装包的版本\",{\"1\":{\"94\":1}}],[\"这个\",{\"1\":{\"659\":1,\"1582\":1,\"2843\":1}}],[\"这个对象全局唯一\",{\"1\":{\"1828\":1}}],[\"这个对象中封装了响应客户端浏览器的流对象\",{\"1\":{\"1802\":1}}],[\"这个对象中有很多关于操作文档的一些属性和方法\",{\"1\":{\"1448\":1}}],[\"这个对象中有很多的属性和方法\",{\"1\":{\"1448\":1}}],[\"这个对象就好像是一面镜子\",{\"1\":{\"570\":1}}],[\"这个对象将被作为程序访问方法区中的这个类的各种数据的外部接口\",{\"1\":{\"570\":1}}],[\"这个class对象\",{\"1\":{\"570\":1}}],[\"这个类我们可以定义为枚举类\",{\"1\":{\"558\":1}}],[\"这个类型现在是不确定的\",{\"1\":{\"238\":1}}],[\"这个类型参数叫做泛型\",{\"1\":{\"233\":1}}],[\"这个锁也可以得到释放\",{\"1\":{\"480\":1}}],[\"这个锁肯定很多方法中用到了\",{\"1\":{\"328\":1}}],[\"这个方式更灵活\",{\"1\":{\"473\":1}}],[\"这个方法完成实际的过滤操作\",{\"1\":{\"2004\":1}}],[\"这个方法就会变成一个废弃方法\",{\"1\":{\"542\":1}}],[\"这个方法是没有返回值的\",{\"1\":{\"447\":1}}],[\"这个方法的作用\",{\"1\":{\"371\":1}}],[\"这个方法的泛型的参数类型要和当前的类的泛型无关\",{\"1\":{\"241\":1}}],[\"这个方法可使服务器传回该资源所支持的所有http请求方法\",{\"1\":{\"186\":1}}],[\"这个方法中可能会出现我声明的这些异常\",{\"1\":{\"33\":1}}],[\"这个关键字的识别是靠jvm来识别完成的\",{\"1\":{\"473\":1}}],[\"这个线程就会先被执行\",{\"1\":{\"458\":1}}],[\"这个应用场景显而易见\",{\"1\":{\"313\":1}}],[\"这个值其实可以自己改\",{\"1\":{\"294\":1}}],[\"这个key就没有加入\",{\"1\":{\"288\":1}}],[\"这个升序是靠中序遍历得到的\",{\"1\":{\"288\":1}}],[\"这个19没有放入到集合中\",{\"1\":{\"278\":1,\"283\":1}}],[\"这个参数类型\",{\"1\":{\"235\":1}}],[\"这个<e>就是类型参数\",{\"1\":{\"233\":1}}],[\"这个demo是在上面的基础上继续完成的\",{\"1\":{\"115\":2}}],[\"这个是javascript的原理\",{\"1\":{\"1704\":1}}],[\"这个是jquery相比javascript的一大优势\",{\"1\":{\"1547\":1}}],[\"这个是我们开发使用的命令\",{\"1\":{\"1687\":1}}],[\"这个是``行内代码``\",{\"1\":{\"1180\":1}}],[\"这个是行内代码\",{\"1\":{\"1180\":1}}],[\"这个是包的配置文件\",{\"1\":{\"92\":1}}],[\"这个是将原有的user空间复制一份\",{\"1\":{\"79\":1}}],[\"这个和java是一样的\",{\"1\":{\"79\":1}}],[\"这个版本可以看作是\",{\"1\":{\"71\":1}}],[\"这个版本就是\",{\"1\":{\"70\":1}}],[\"这个词的原意\",{\"1\":{\"71\":1}}],[\"这是适配器模式的应用\",{\"1\":{\"2772\":1}}],[\"这是最常见的选择\",{\"1\":{\"2725\":1}}],[\"这是花费最高代价但是最可靠的事务隔离级别\",{\"1\":{\"2723\":1}}],[\"这是事务最低的隔离级别\",{\"1\":{\"2720\":1}}],[\"这是因为一个操作序列要成为事务\",{\"1\":{\"2684\":1}}],[\"这是因为浏览器仅能记录的始终是当前一个的静态页面\",{\"1\":{\"2106\":1}}],[\"这是您第\",{\"1\":{\"1893\":1}}],[\"这是http协议中用来定义文档性质及格式的标准\",{\"1\":{\"1805\":1}}],[\"这是设计初衷\",{\"1\":{\"1517\":1,\"1518\":96}}],[\"这是我的div\",{\"1\":{\"1488\":1}}],[\"这是属性\",{\"1\":{\"1293\":1}}],[\"这是java日期类最大的问题\",{\"1\":{\"891\":1}}],[\"这是season\",{\"1\":{\"563\":1}}],[\"这是冬天\",{\"1\":{\"563\":1}}],[\"这是秋天\",{\"1\":{\"563\":1}}],[\"这是夏天\",{\"1\":{\"563\":1}}],[\"这是春天\",{\"1\":{\"563\":1}}],[\"这是第\",{\"1\":{\"513\":1}}],[\"这是梦想\",{\"1\":{\"395\":1,\"396\":1}}],[\"这是一个platfromtransactionmanager默认的隔离级别\",{\"1\":{\"2719\":1}}],[\"这是一个简单的\",{\"1\":{\"2160\":1,\"2164\":1}}],[\"这是一个\",{\"1\":{\"2125\":1}}],[\"这是一个对象\",{\"1\":{\"2125\":1}}],[\"这是一个美女小姐姐\",{\"1\":{\"1309\":1}}],[\"这是一个注释\",{\"1\":{\"1293\":1}}],[\"这是一个单行注释\",{\"1\":{\"937\":1}}],[\"这是一个带有优先级的无界队列\",{\"1\":{\"351\":1}}],[\"这是一个main方法\",{\"1\":{\"16\":1,\"17\":1,\"30\":2,\"32\":1,\"364\":1,\"371\":1,\"373\":1,\"392\":1,\"396\":1,\"503\":1,\"506\":1,\"543\":1,\"560\":1,\"561\":1,\"562\":1,\"563\":1,\"564\":1}}],[\"这是main方法\",{\"1\":{\"234\":2,\"238\":1,\"239\":2,\"240\":2,\"241\":1,\"244\":2,\"245\":1,\"265\":1,\"266\":1,\"274\":1,\"275\":1,\"278\":1,\"283\":1,\"315\":1,\"318\":1,\"357\":1}}],[\"这是百度第一个进入国际顶级开源社区的项目\",{\"1\":{\"61\":1}}],[\"拼接后缀\",{\"1\":{\"2455\":1}}],[\"拼接前缀\",{\"1\":{\"2455\":1}}],[\"拼接比较麻烦\",{\"1\":{\"2126\":1}}],[\"拼接操作\",{\"1\":{\"883\":1}}],[\"拼接的形式\",{\"1\":{\"373\":1}}],[\"拼接字符串\",{\"1\":{\"76\":1,\"1406\":1}}],[\"拼接\",{\"1\":{\"33\":1}}],[\"用什么文字分隔\",{\"1\":{\"2464\":1}}],[\"用哪个类的对象给属性赋值\",{\"1\":{\"2425\":1}}],[\"用方法名与标签中的id配对生成增强的代理对象\",{\"1\":{\"2380\":1}}],[\"用java编写的服务器端程序\",{\"1\":{\"1548\":1}}],[\"用jsp开发\",{\"1\":{\"1548\":1}}],[\"用了css之后\",{\"1\":{\"1467\":1}}],[\"用一对script标签\",{\"1\":{\"1379\":1}}],[\"用双引号或单引号括起来表示\",{\"1\":{\"1355\":1}}],[\"用placeholder属性\",{\"1\":{\"1333\":1}}],[\"用程序设计的语言来说\",{\"1\":{\"1262\":1}}],[\"用在执行多个相同数据库dml操作时\",{\"1\":{\"1248\":1,\"1258\":1}}],[\"用简单的符号\",{\"1\":{\"1167\":1}}],[\"用字符串b替换字符串str中所有出现的字符串a\",{\"1\":{\"1091\":1}}],[\"用字符串pad对str最右边进行填充\",{\"1\":{\"1091\":1}}],[\"用字符串pad对str最左边进行填充\",{\"1\":{\"1091\":1}}],[\"用true或false来表示\",{\"1\":{\"1356\":1}}],[\"用t\",{\"1\":{\"1072\":1}}],[\"用来标识当前类或者方法的controller控制单元的请求路径\",{\"1\":{\"2810\":1}}],[\"用来表明当前controller控制单元的请求路径\",{\"1\":{\"2808\":1}}],[\"用来表达对字符串的一种过滤逻辑\",{\"1\":{\"1582\":1}}],[\"用来接收参数\",{\"1\":{\"2800\":1,\"2801\":1}}],[\"用来接收装填因子的变量\",{\"1\":{\"294\":1}}],[\"用来配置bean的注册\",{\"1\":{\"2542\":1}}],[\"用来遍历集合或者数组\",{\"1\":{\"2463\":1}}],[\"用来存储一个用户的信息的实体类对象\",{\"1\":{\"1911\":1}}],[\"用来存放mysql基础数据和以后新增的数据\",{\"1\":{\"923\":1}}],[\"用来向main\",{\"1\":{\"1910\":1}}],[\"用来校验登录的\",{\"1\":{\"1909\":1}}],[\"用来告诉浏览器关于文档的附加信息\",{\"1\":{\"1292\":1}}],[\"用来计算两个日期差\",{\"1\":{\"899\":1}}],[\"用来计算两个时间差\",{\"1\":{\"899\":1}}],[\"用来统计流中元素的个数\",{\"1\":{\"863\":1}}],[\"用叉子把别人的东西\",{\"1\":{\"757\":1}}],[\"用的都是自己的电脑\",{\"1\":{\"723\":1}}],[\"用dependencymanagement标签括起来\",{\"1\":{\"714\":1}}],[\"用实际例子来说明就是\",{\"1\":{\"651\":1}}],[\"用enum关键字创建的season枚举类上面的父类是\",{\"1\":{\"562\":1}}],[\"用某种语言编写的一组指令的集合\",{\"1\":{\"452\":1}}],[\"用户请求到达前端控制器\",{\"1\":{\"2770\":1}}],[\"用户张三需要打官司\",{\"1\":{\"2605\":1}}],[\"用户也不必自己编码处理对象的单例和多例控制\",{\"1\":{\"2522\":1}}],[\"用户和角色\",{\"1\":{\"2440\":1}}],[\"用户通过uuid或时间戳等方式生成唯一主键\",{\"1\":{\"2408\":1}}],[\"用户通常都希望单击后退按钮\",{\"1\":{\"2106\":1}}],[\"用户通常都希望单击后退按钮时\",{\"1\":{\"2102\":1}}],[\"用户直接购买毛坯房\",{\"1\":{\"2197\":1}}],[\"用户其他操作必须等待请求完成才可以执行\",{\"1\":{\"2138\":1}}],[\"用户无法回到前一个页面状态\",{\"1\":{\"2106\":1}}],[\"用户体验较好\",{\"1\":{\"2104\":1}}],[\"用户只能等待状态\",{\"1\":{\"2103\":1}}],[\"用户只需按下\",{\"1\":{\"302\":1}}],[\"用户可以回到前一个页面状态\",{\"1\":{\"2102\":1}}],[\"用户可以通过电脑也可通过手机来订购某样产品\",{\"1\":{\"2037\":1}}],[\"用户在浏览器端输入特定url\",{\"1\":{\"1863\":1}}],[\"用户访问localhost\",{\"1\":{\"1769\":1}}],[\"用户发起一个请求\",{\"1\":{\"1717\":1}}],[\"用户生成vue工程模板\",{\"1\":{\"1682\":1}}],[\"用户选取文本时触发\",{\"1\":{\"1438\":1}}],[\"用户向搜索域输入文本时触发\",{\"1\":{\"1438\":1}}],[\"用户不必关闭resultset\",{\"1\":{\"1223\":1}}],[\"用户面向的是数据库应用程序\",{\"1\":{\"913\":1}}],[\"用户邮箱\",{\"1\":{\"726\":1}}],[\"用户的查询条件都是动态的\",{\"1\":{\"2260\":1}}],[\"用户的一些常用操作\",{\"1\":{\"1282\":1}}],[\"用户的签名信息在每一个版本的提交信息中能够看到\",{\"1\":{\"726\":1}}],[\"用户的编辑操作被依次记录在一个栈中\",{\"1\":{\"302\":1}}],[\"用户签名\",{\"1\":{\"726\":1}}],[\"用户添加jar包时\",{\"1\":{\"693\":1}}],[\"用户名可用\",{\"1\":{\"2115\":1,\"2131\":1,\"2170\":1,\"2171\":1}}],[\"用户名已经占用\",{\"1\":{\"2115\":1,\"2131\":1,\"2170\":1,\"2171\":1}}],[\"用户名及密码配置\",{\"1\":{\"1759\":1}}],[\"用户名中不能有数字\",{\"1\":{\"1578\":1}}],[\"用户名长度大于等于6\",{\"1\":{\"1578\":1}}],[\"用户名不能为空\",{\"1\":{\"1578\":1,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"用户名2\",{\"1\":{\"1330\":1,\"1514\":1}}],[\"用户名或者密码错误\",{\"1\":{\"1216\":1}}],[\"用户名\",{\"1\":{\"356\":1,\"726\":1,\"731\":1,\"925\":1,\"1115\":2,\"1116\":2,\"1117\":1,\"1118\":1,\"1119\":1,\"1122\":1,\"1330\":1,\"1514\":1,\"1907\":1,\"2055\":1,\"2060\":1,\"2094\":1,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"用户id\",{\"1\":{\"356\":1}}],[\"用户\",{\"1\":{\"356\":2,\"513\":2}}],[\"用户每访问一个新页面\",{\"1\":{\"302\":1}}],[\"用户目录\",{\"1\":{\"94\":1}}],[\"用指定值填充所有元素\",{\"1\":{\"300\":1}}],[\"用于把指定\",{\"1\":{\"2853\":1}}],[\"用于获取请求消息头\",{\"1\":{\"2848\":1}}],[\"用于绑定\",{\"1\":{\"2843\":1}}],[\"用于建立请求\",{\"1\":{\"2833\":1}}],[\"用于注册到容器\",{\"1\":{\"2601\":1}}],[\"用于实例化持久层bean\",{\"1\":{\"2587\":1}}],[\"用于实例化service层bean\",{\"1\":{\"2587\":1}}],[\"用于实例化controller层bean\",{\"1\":{\"2587\":1}}],[\"用于标记\",{\"1\":{\"2587\":1}}],[\"用于遍历数组或集合\",{\"1\":{\"2464\":1}}],[\"用于处理set和\",{\"1\":{\"2452\":1}}],[\"用于处理where和and\",{\"1\":{\"2446\":1}}],[\"用于处理设备之间的数据的传输\",{\"1\":{\"400\":1}}],[\"用于输出每条\",{\"1\":{\"2294\":1}}],[\"用于去解决或者处理复杂的问题\",{\"1\":{\"2197\":1}}],[\"用于响应http访问认证请求的密码\",{\"1\":{\"2152\":1}}],[\"用于响应http访问认证请求的用户名\",{\"1\":{\"2151\":1}}],[\"用于方便在jsp中完成或简化相关操作\",{\"1\":{\"2012\":1}}],[\"用于继续传递给下一个filter\",{\"1\":{\"1995\":1}}],[\"用于和浏览器完成数据交互\",{\"1\":{\"1786\":1}}],[\"用于定义增强规则\",{\"1\":{\"2615\":2}}],[\"用于定义java源代码web目录\",{\"1\":{\"1776\":1}}],[\"用于定义空的或不存在的引用\",{\"1\":{\"1357\":1}}],[\"用于查找能够处理该请求的虚拟主机\",{\"1\":{\"1767\":1}}],[\"用于对tomcat自身以及部署在tomcat上的应用进行管理的web应用\",{\"1\":{\"1758\":1}}],[\"用于窗口或框架的\",{\"1\":{\"1451\":1}}],[\"用于在网页上添加动态效果\",{\"1\":{\"1377\":1}}],[\"用于给网页做美化\",{\"1\":{\"1377\":1}}],[\"用于执行数据库存储过程的调用\",{\"1\":{\"1257\":1}}],[\"用于执行带或不带参数的预编译sql语句\",{\"1\":{\"1257\":1}}],[\"用于执行不带参数的简单sql语句\",{\"1\":{\"1257\":1}}],[\"用于将\",{\"1\":{\"1257\":1}}],[\"用于封装结果集中的每一条数据\",{\"1\":{\"1226\":1}}],[\"用于检查子查询是否至少会返回一行数据\",{\"1\":{\"1073\":1}}],[\"用于计算两个时间\",{\"1\":{\"892\":2}}],[\"用于指定\",{\"1\":{\"2845\":1}}],[\"用于指定限制请求消息头的条件\",{\"1\":{\"2835\":1}}],[\"用于指定限制请求参数的条件\",{\"1\":{\"2835\":1}}],[\"用于指定请求的方式\",{\"1\":{\"2835\":1}}],[\"用于指定请求的\",{\"1\":{\"2835\":1}}],[\"用于指定被该元注解修饰的注解类将被javadoc工具提取成文档\",{\"1\":{\"555\":1}}],[\"用于指定被修饰的注解能用于修饰哪些程序元素\",{\"1\":{\"554\":1}}],[\"用于指定修饰的那个注解的生命周期\",{\"1\":{\"553\":1}}],[\"用于修饰注解的注解\",{\"1\":{\"554\":1}}],[\"用于修饰注解\",{\"1\":{\"553\":1}}],[\"用于修饰它支持的程序元素\",{\"1\":{\"533\":1}}],[\"用于提供服务\",{\"1\":{\"546\":1}}],[\"用于表示所修饰的元素\",{\"1\":{\"542\":1}}],[\"用于放置实现了delayed接口的对象\",{\"1\":{\"354\":1}}],[\"用于存储数据\",{\"1\":{\"330\":1}}],[\"用于存储\",{\"1\":{\"255\":1}}],[\"用于取出参数对象所有可遍历属性然后拷贝到当前对象\",{\"1\":{\"79\":1}}],[\"用gzip压缩文档能够显著地减少html文档的响应时间\",{\"1\":{\"203\":1}}],[\"用目标的代码替换当前标签\",{\"1\":{\"150\":1}}],[\"用法发出请求\",{\"1\":{\"2768\":1}}],[\"用法相同\",{\"1\":{\"2440\":1}}],[\"用法\",{\"1\":{\"147\":1,\"1086\":1,\"1087\":1,\"1088\":1,\"1089\":1,\"1090\":1,\"1091\":1,\"1092\":1,\"1093\":1,\"1094\":1,\"1095\":1}}],[\"用反引号\",{\"1\":{\"76\":1}}],[\"用\",{\"1\":{\"33\":1,\"186\":1,\"729\":2,\"1035\":2,\"1330\":1,\"2780\":3}}],[\"方便整合各种优秀的框架\",{\"0\":{\"2526\":1}}],[\"方便测试\",{\"0\":{\"2525\":1}}],[\"方便解耦\",{\"0\":{\"2522\":1}}],[\"方便其他地方快速的调用\",{\"1\":{\"2460\":1}}],[\"方便后续的sql使用\",{\"1\":{\"2458\":1}}],[\"方便的编写各类查询条件\",{\"1\":{\"2179\":1}}],[\"方便传输本节作业\",{\"1\":{\"2090\":1}}],[\"方便我们后续在宿主机管理\",{\"1\":{\"49\":1}}],[\"方便我们查看异常\",{\"1\":{\"21\":1}}],[\"方式指定\",{\"1\":{\"2301\":1}}],[\"方式操作元素属性\",{\"1\":{\"1567\":1}}],[\"方式三\",{\"0\":{\"579\":1,\"580\":1,\"716\":1,\"1525\":1,\"2390\":1,\"2403\":1},\"1\":{\"380\":1,\"409\":1,\"1369\":1}}],[\"方式二\",{\"0\":{\"578\":1,\"715\":1,\"1494\":1,\"1497\":1,\"1524\":1,\"1747\":1,\"1847\":1,\"2389\":1,\"2402\":1,\"2407\":1,\"2410\":1},\"1\":{\"380\":1,\"409\":1,\"1369\":1,\"1899\":1,\"2457\":1,\"2558\":1}}],[\"方式一\",{\"0\":{\"577\":1,\"714\":1,\"1493\":1,\"1496\":1,\"1523\":1,\"1746\":1,\"1846\":1,\"2388\":1,\"2401\":1,\"2406\":1,\"2409\":1},\"1\":{\"380\":1,\"409\":1,\"1369\":1,\"1899\":1,\"2558\":1}}],[\"方式2\",{\"1\":{\"372\":1}}],[\"方式1\",{\"1\":{\"372\":1}}],[\"方式\",{\"1\":{\"203\":1,\"2157\":2,\"2290\":1}}],[\"方言还有\",{\"1\":{\"70\":1}}],[\"方法形参\",{\"1\":{\"2839\":1,\"2844\":1,\"2849\":1,\"2854\":1}}],[\"方法上\",{\"1\":{\"2834\":1}}],[\"方法异常\",{\"1\":{\"2653\":1}}],[\"方法执行了\",{\"1\":{\"2859\":1}}],[\"方法执行事务\",{\"1\":{\"2702\":1}}],[\"方法执行成功返回\",{\"1\":{\"2652\":1}}],[\"方法执行之后要增强的功能\",{\"1\":{\"2643\":1}}],[\"方法返回值\",{\"0\":{\"2652\":1}}],[\"方法获取具体的参数\",{\"1\":{\"2793\":1}}],[\"方法获取目标方法的签名\",{\"1\":{\"2651\":1}}],[\"方法获取接口的代理对象\",{\"1\":{\"2379\":1}}],[\"方法会将切点方法的返回值获取到\",{\"1\":{\"2644\":1}}],[\"方法控制切点方法的执行位置proceedingjoinpoint\",{\"1\":{\"2644\":1}}],[\"方法列表可以通过proceedingjoinpoint获取执行的切点\",{\"1\":{\"2644\":1}}],[\"方法在调用时传入的实参数组\",{\"1\":{\"2615\":1}}],[\"方法在不同情况下使用的具体缓存对象\",{\"1\":{\"2494\":1}}],[\"方法调度接口\",{\"1\":{\"2608\":1}}],[\"方法需要三个参数\",{\"1\":{\"2608\":1}}],[\"方法2\",{\"1\":{\"2440\":1}}],[\"方法1\",{\"1\":{\"2440\":1}}],[\"方法都会返回受影响的行数\",{\"1\":{\"2360\":1}}],[\"方法下\",{\"1\":{\"2289\":1}}],[\"方法从服务器加载数据\",{\"1\":{\"2157\":1}}],[\"方法是简单但强大的\",{\"1\":{\"2157\":1}}],[\"方法是httpsession对象中所提供的用于销毁当前httpsession的方法\",{\"1\":{\"1899\":1}}],[\"方法是和\",{\"1\":{\"475\":1}}],[\"方法销毁当前httpsession对象\",{\"1\":{\"1899\":1}}],[\"方法还有一个重载方法getsession\",{\"1\":{\"1897\":1}}],[\"方法则根据这个id返回与这个客户端浏览器对应的httpsession对象\",{\"1\":{\"1897\":1}}],[\"方法将会为这个客户端浏览器创建一个新的httpsession对象\",{\"1\":{\"1897\":1}}],[\"方法设置失效时间\",{\"1\":{\"1890\":1}}],[\"方法设置的\",{\"1\":{\"1452\":1}}],[\"方法抛出illegalstateexception\",{\"1\":{\"1855\":1}}],[\"方法先清空用于存放响应正文的缓冲区\",{\"1\":{\"1855\":1}}],[\"方法即可\",{\"1\":{\"1820\":1}}],[\"方法来创建的\",{\"1\":{\"1897\":1}}],[\"方法来对提交的数据根据指定的编码方式重新做编码处理\",{\"1\":{\"1801\":1}}],[\"方法来替代\",{\"1\":{\"1452\":1}}],[\"方法中已经把\",{\"1\":{\"1820\":1}}],[\"方法中是可以传入参数的\",{\"1\":{\"1647\":1}}],[\"方法中的默认方法\",{\"1\":{\"817\":1}}],[\"方法绑定事件\",{\"1\":{\"1572\":1}}],[\"方法声明\",{\"1\":{\"1421\":2}}],[\"方法用于根据世界时\",{\"1\":{\"1415\":1}}],[\"方法以毫秒设置\",{\"1\":{\"1415\":1}}],[\"方法代替\",{\"1\":{\"1415\":3}}],[\"方法描述\",{\"1\":{\"1415\":1}}],[\"方法和对象\",{\"1\":{\"1372\":1}}],[\"方法本身作为参数\",{\"1\":{\"1370\":2}}],[\"方法建立连接\",{\"1\":{\"1271\":1}}],[\"方法加载数据库驱动\",{\"1\":{\"1271\":1}}],[\"方法时\",{\"1\":{\"1256\":1,\"2380\":1}}],[\"方法指向第一条记录\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"方法二\",{\"1\":{\"1082\":1}}],[\"方法一\",{\"1\":{\"1082\":1}}],[\"方法才可以生效\",{\"1\":{\"869\":2}}],[\"方法种类\",{\"1\":{\"861\":1}}],[\"方法作用相同\",{\"1\":{\"1897\":1}}],[\"方法作用\",{\"1\":{\"861\":1}}],[\"方法对象\",{\"1\":{\"591\":9}}],[\"方法参数类型\",{\"1\":{\"591\":2}}],[\"方法\",{\"0\":{\"589\":1,\"1460\":1,\"1486\":1},\"1\":{\"219\":1,\"251\":1,\"260\":1,\"475\":3,\"534\":1,\"542\":1,\"576\":2,\"1223\":2,\"1255\":1,\"1256\":1,\"1257\":1,\"1259\":3,\"1272\":1,\"1287\":1,\"1379\":1,\"1405\":1,\"1408\":1,\"1411\":1,\"1452\":1,\"1568\":1,\"1614\":1,\"1616\":1,\"1617\":1,\"1818\":1,\"1854\":1,\"1855\":1,\"1858\":1,\"1900\":2,\"2126\":1,\"2157\":1,\"2289\":1,\"2493\":2,\"2517\":1,\"2677\":1,\"2702\":1}}],[\"方法定义的属性\",{\"1\":{\"142\":1}}],[\"方法引用是对lambda表达式符合特定情况下的一种缩写方式\",{\"1\":{\"833\":1}}],[\"方法引用在jdk8中使用是相当灵活的\",{\"1\":{\"827\":1}}],[\"方法引用\",{\"0\":{\"823\":1,\"3056\":1},\"1\":{\"51\":1}}],[\"方法体\",{\"1\":{\"34\":1,\"817\":1,\"820\":1}}],[\"方法名称\",{\"1\":{\"1486\":1}}],[\"方法名直接调用\",{\"1\":{\"371\":1}}],[\"方法名\",{\"0\":{\"828\":1},\"1\":{\"34\":1,\"591\":1,\"817\":1,\"820\":1,\"827\":1,\"861\":1,\"1223\":1,\"1368\":1,\"1415\":1,\"1421\":2,\"2633\":1,\"2651\":1}}],[\"方法的可能\",{\"1\":{\"2214\":1}}],[\"方法的全局设置\",{\"1\":{\"2137\":1}}],[\"方法的返回值\",{\"1\":{\"1259\":1}}],[\"方法的声明处\",{\"1\":{\"33\":1}}],[\"方法的签名处\",{\"1\":{\"33\":1}}],[\"方法内部做了单引号的转义\",{\"1\":{\"1249\":1}}],[\"方法内部\",{\"1\":{\"33\":1}}],[\"rmi\",{\"1\":{\"1732\":1}}],[\"rgb\",{\"1\":{\"1698\":1}}],[\"ride=\",{\"1\":{\"1609\":1}}],[\"right\",{\"1\":{\"288\":1,\"1063\":1,\"1064\":1,\"1091\":1,\"1148\":1,\"1185\":1,\"1300\":1,\"1533\":2,\"1534\":2,\"1536\":1,\"1665\":1,\"1672\":1}}],[\"rb1\",{\"1\":{\"1579\":1,\"1586\":1}}],[\"rn\",{\"1\":{\"1287\":1}}],[\"rpc对比来讲明显的更加简洁\",{\"1\":{\"2823\":1}}],[\"rpad\",{\"1\":{\"1091\":1}}],[\"rpm\",{\"1\":{\"809\":1,\"810\":3}}],[\"rtrim\",{\"1\":{\"1090\":1}}],[\"r>\",{\"1\":{\"841\":2,\"842\":1,\"867\":1}}],[\"rsa\",{\"1\":{\"763\":4,\"1216\":2}}],[\"r\",{\"0\":{\"3182\":1},\"1\":{\"641\":1,\"841\":2,\"842\":1,\"1093\":1,\"1147\":2,\"1287\":1,\"1698\":4}}],[\"rwatypes\",{\"1\":{\"543\":1}}],[\"rfc\",{\"1\":{\"374\":1}}],[\"routes\",{\"1\":{\"1718\":1}}],[\"routes指定每个路由path映射的一个组件\",{\"1\":{\"1718\":1}}],[\"router即可\",{\"1\":{\"1718\":1}}],[\"router\",{\"1\":{\"1683\":1,\"1718\":6,\"1721\":1}}],[\"roundadvice\",{\"1\":{\"2635\":1}}],[\"round\",{\"1\":{\"367\":1,\"1092\":1,\"1411\":1}}],[\"rowmapper\",{\"1\":{\"2672\":1,\"2673\":1}}],[\"rowmapper<t>\",{\"1\":{\"2672\":1,\"2673\":1}}],[\"rowbounds\",{\"1\":{\"2493\":6}}],[\"row\",{\"1\":{\"1601\":1,\"1602\":2,\"2417\":2}}],[\"rows+=accountdao\",{\"1\":{\"2697\":2,\"2702\":4,\"2707\":2,\"2711\":2}}],[\"rows=0\",{\"1\":{\"2697\":1,\"2702\":2,\"2707\":1,\"2711\":1}}],[\"rows=\",{\"1\":{\"1322\":1,\"1341\":1,\"1701\":1}}],[\"rows进行行\",{\"1\":{\"1322\":1}}],[\"rowspan=\",{\"1\":{\"1319\":1}}],[\"rowspan\",{\"1\":{\"1319\":1}}],[\"rowset接口扩展了resultset接口\",{\"1\":{\"1209\":1}}],[\"rowsets\",{\"1\":{\"1209\":1}}],[\"rows\",{\"1\":{\"976\":2,\"1147\":2,\"1217\":1,\"1219\":1,\"1253\":1,\"1264\":6,\"1266\":3,\"1275\":3,\"1322\":1,\"1601\":1,\"2697\":1,\"2702\":4,\"2707\":1,\"2711\":1}}],[\"royalblue\",{\"1\":{\"1471\":1,\"1513\":1}}],[\"rollingfile>\",{\"1\":{\"2312\":1}}],[\"rollingfile\",{\"1\":{\"2312\":2}}],[\"rollbackfor\",{\"0\":{\"2716\":1},\"1\":{\"2716\":1}}],[\"rollbacktosavepoint\",{\"1\":{\"2702\":2}}],[\"rollback\",{\"1\":{\"936\":1,\"1099\":1,\"1100\":1,\"1109\":1,\"1234\":1,\"1235\":2,\"1255\":1,\"2301\":1,\"2360\":1,\"2710\":2}}],[\"rolename=\",{\"1\":{\"1759\":6}}],[\"role=\",{\"1\":{\"1606\":1,\"1609\":2}}],[\"roles=\",{\"1\":{\"1759\":1}}],[\"roles\",{\"1\":{\"922\":1}}],[\"root>\",{\"1\":{\"2312\":1,\"2487\":1,\"2757\":1,\"2896\":1}}],[\"rootlogger=debug\",{\"1\":{\"2308\":2,\"2374\":2}}],[\"rootlogger=error\",{\"1\":{\"1285\":1}}],[\"root\",{\"1\":{\"928\":1,\"1155\":5,\"1215\":2,\"1216\":1,\"1217\":2,\"1219\":2,\"1220\":2,\"1221\":2,\"1222\":2,\"1227\":2,\"1231\":2,\"1234\":2,\"1235\":2,\"1242\":2,\"1252\":2,\"1253\":2,\"1264\":2,\"1266\":2,\"1274\":2,\"1976\":2,\"2278\":2,\"2293\":2,\"2501\":2,\"2599\":1,\"2824\":1,\"2881\":2}}],[\"roaming\",{\"1\":{\"94\":1}}],[\"radius\",{\"1\":{\"1568\":1}}],[\"radio\",{\"0\":{\"1335\":1},\"1\":{\"1335\":2,\"1554\":1,\"1555\":3,\"2796\":2}}],[\"ratio\",{\"1\":{\"2479\":1}}],[\"rational\",{\"1\":{\"1185\":1}}],[\"rating\",{\"1\":{\"1198\":2}}],[\"raling\",{\"1\":{\"1198\":1}}],[\"rar\",{\"1\":{\"772\":1}}],[\"rand\",{\"1\":{\"1092\":1}}],[\"random1\",{\"1\":{\"382\":3}}],[\"random\",{\"1\":{\"367\":1,\"368\":1,\"382\":7,\"450\":3,\"1411\":1,\"1790\":1,\"2022\":2,\"2023\":2}}],[\"random类\",{\"0\":{\"381\":1,\"3017\":1},\"1\":{\"38\":1,\"382\":1}}],[\"rangeclosed\",{\"1\":{\"888\":3,\"889\":5}}],[\"range\",{\"1\":{\"364\":1,\"1348\":3,\"1698\":3}}],[\"race\",{\"1\":{\"316\":1}}],[\"rules\",{\"1\":{\"115\":1,\"922\":1}}],[\"run的命令值\",{\"1\":{\"1687\":1}}],[\"runoob\",{\"1\":{\"1609\":3}}],[\"runtime\",{\"1\":{\"553\":1,\"904\":2}}],[\"runtimeexception\",{\"1\":{\"32\":1,\"36\":1,\"327\":2,\"348\":3,\"349\":3,\"356\":1,\"374\":1,\"438\":1,\"440\":1,\"441\":1,\"445\":1,\"457\":2,\"460\":1,\"489\":2,\"490\":2,\"512\":14,\"513\":15,\"517\":4,\"518\":4,\"538\":2,\"853\":1,\"2799\":1}}],[\"run方法里面是线程要执行的内容\",{\"1\":{\"456\":1}}],[\"runnabledemo\",{\"1\":{\"445\":5}}],[\"runnable\",{\"1\":{\"305\":1,\"306\":1,\"309\":3,\"327\":2,\"445\":1,\"446\":1,\"465\":1,\"480\":1}}],[\"running\",{\"1\":{\"88\":1}}],[\"run\",{\"1\":{\"114\":1,\"305\":1,\"306\":1,\"309\":3,\"327\":2,\"438\":1,\"440\":1,\"441\":1,\"442\":1,\"445\":1,\"446\":1,\"456\":1,\"457\":2,\"458\":1,\"460\":1,\"465\":1,\"471\":1,\"480\":1,\"489\":2,\"490\":2,\"513\":1,\"1683\":1,\"1684\":1,\"1687\":3}}],[\"ruanyifeng\",{\"1\":{\"68\":1}}],[\"reqmessage\",{\"1\":{\"2926\":1,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"reqquestdate\",{\"1\":{\"2087\":1}}],[\"reqest域监听器\",{\"0\":{\"2071\":1}}],[\"req=\",{\"1\":{\"2063\":1}}],[\"req\",{\"1\":{\"1789\":2,\"1790\":2,\"1794\":3,\"1799\":9,\"1800\":3,\"1801\":4,\"1808\":1,\"1811\":1,\"1825\":1,\"1831\":3,\"1834\":2,\"1856\":10,\"1860\":10,\"1864\":4,\"1874\":5,\"1878\":1,\"1892\":3,\"1893\":2,\"1897\":2,\"1898\":2,\"1909\":6,\"1910\":4,\"1917\":14,\"1921\":6,\"1925\":3,\"1927\":3,\"1972\":6,\"1976\":4,\"1997\":2,\"2056\":3,\"2062\":4,\"2063\":4,\"2075\":4,\"2088\":2,\"2095\":4,\"2096\":2,\"2115\":2,\"2121\":1,\"2128\":1,\"2131\":2,\"2159\":3,\"2166\":3,\"2170\":3,\"2171\":3,\"2176\":2,\"2749\":3,\"2760\":1,\"2793\":3}}],[\"requet域共有两个监听器接口\",{\"1\":{\"2075\":1}}],[\"requet域监听器\",{\"0\":{\"2075\":1}}],[\"request和\",{\"0\":{\"3127\":1}}],[\"request对象\",{\"0\":{\"2922\":1}}],[\"requestheader\",{\"0\":{\"2847\":1},\"1\":{\"2851\":3,\"2857\":1}}],[\"requestparam获取到了值\",{\"1\":{\"2929\":1}}],[\"requestparam注解来指定映射\",{\"1\":{\"2794\":1}}],[\"requestparam注解注明参数的映射\",{\"1\":{\"2794\":1}}],[\"requestparam\",{\"0\":{\"2837\":1},\"1\":{\"2794\":2,\"2857\":1}}],[\"request内有效\",{\"1\":{\"2552\":1}}],[\"request作用域\",{\"1\":{\"2552\":1}}],[\"requested\",{\"1\":{\"2172\":1}}],[\"requesturl\",{\"1\":{\"2087\":1}}],[\"requesturi\",{\"1\":{\"2063\":5}}],[\"requestloglistener\",{\"1\":{\"2087\":1}}],[\"requestinitialized\",{\"1\":{\"2076\":1,\"2087\":1}}],[\"requestdestroyed\",{\"1\":{\"2076\":2,\"2087\":1}}],[\"requestdispatcher\",{\"1\":{\"1856\":11,\"1860\":11,\"1874\":7}}],[\"requestmethod\",{\"1\":{\"2814\":1,\"2830\":4,\"2857\":1}}],[\"requestmessage\",{\"1\":{\"1972\":1,\"2018\":2}}],[\"requestmappinghandleradapter\",{\"1\":{\"2779\":2,\"2780\":1}}],[\"requestmappinghandlermapping\",{\"1\":{\"2779\":2,\"2780\":1}}],[\"requestmapping注解的路径中\",{\"1\":{\"2825\":1}}],[\"requestmapping注解的使用\",{\"0\":{\"2809\":1},\"1\":{\"2836\":2}}],[\"requestmapping注解中的value属性是默认属性\",{\"1\":{\"2810\":1}}],[\"requestmapping注解在springmvc项目中的应用\",{\"1\":{\"2808\":1}}],[\"requestmapping注解在前面的学习中\",{\"1\":{\"2808\":1}}],[\"requestmapping注解标注请求路径\",{\"1\":{\"2761\":1}}],[\"requestmapping注解来标识当前方法执行的请求路径\",{\"1\":{\"2760\":1}}],[\"requestmapping\",{\"0\":{\"2832\":1},\"1\":{\"2760\":1,\"2764\":3,\"2781\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2811\":2,\"2814\":1,\"2817\":1,\"2820\":1,\"2825\":1,\"2830\":4,\"2851\":1,\"2856\":1,\"2857\":2,\"2859\":1,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2876\":1,\"2878\":1,\"2916\":1,\"2926\":1,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"requestmsg\",{\"1\":{\"1981\":1}}],[\"request信息\",{\"1\":{\"760\":1}}],[\"requestscope\",{\"1\":{\"1978\":1,\"1980\":2,\"1981\":1,\"2020\":2,\"2925\":2}}],[\"requests\",{\"1\":{\"177\":1}}],[\"request域中的数据\",{\"1\":{\"1972\":1,\"1980\":1}}],[\"request域\",{\"0\":{\"1914\":1},\"1\":{\"133\":1,\"1968\":1,\"1978\":1}}],[\"request\",{\"0\":{\"133\":1,\"174\":1,\"176\":1,\"177\":1,\"178\":1},\"1\":{\"88\":1,\"133\":1,\"134\":1,\"140\":3,\"142\":1,\"147\":1,\"174\":1,\"757\":1,\"759\":2,\"760\":3,\"1808\":1,\"1888\":1,\"1928\":2,\"1930\":1,\"1962\":1,\"1968\":1,\"1972\":1,\"1976\":1,\"1981\":2,\"2018\":3,\"2019\":1,\"2020\":1,\"2025\":1,\"2031\":1,\"2076\":2,\"2077\":3,\"2087\":3,\"2863\":5,\"2864\":4,\"2870\":2,\"2873\":2,\"2926\":5}}],[\"requiresnew每次都创建新的独立的物理事务\",{\"1\":{\"2733\":1}}],[\"requires\",{\"0\":{\"2730\":1},\"1\":{\"2725\":1,\"2737\":1}}],[\"required类似的操作\",{\"1\":{\"2725\":1}}],[\"required=false\",{\"1\":{\"2851\":1,\"2856\":1}}],[\"required=\",{\"1\":{\"1350\":1}}],[\"required\",{\"0\":{\"2727\":1},\"1\":{\"1350\":2,\"1713\":2,\"2710\":1,\"2725\":1,\"2737\":1,\"2840\":1,\"2845\":1,\"2855\":1,\"2857\":4}}],[\"requirenonnull\",{\"1\":{\"838\":1,\"841\":2,\"846\":2,\"875\":2}}],[\"require\",{\"1\":{\"88\":1,\"103\":1,\"114\":3,\"115\":2}}],[\"re\",{\"1\":{\"1690\":1}}],[\"render\",{\"1\":{\"1689\":1}}],[\"rentention时必须为该value成员变量指定值\",{\"1\":{\"553\":1}}],[\"rentention包含一个retentionpolicy枚举类型的成员变量\",{\"1\":{\"553\":1}}],[\"rem\",{\"1\":{\"1606\":2}}],[\"remotehost+\",{\"1\":{\"2087\":1}}],[\"remotehost\",{\"1\":{\"2087\":1}}],[\"remote\",{\"1\":{\"763\":1}}],[\"removeobject\",{\"1\":{\"2493\":1}}],[\"remove>\",{\"1\":{\"2017\":1,\"2019\":4}}],[\"removeclass\",{\"1\":{\"1568\":1}}],[\"removechild\",{\"0\":{\"1505\":1},\"1\":{\"1486\":1,\"1505\":4}}],[\"removeattribute方法移除了数据都会触发该方法\",{\"1\":{\"2077\":1}}],[\"removeattribute方法移除了数据都会触发该方法attributereplaced\",{\"1\":{\"2077\":1}}],[\"removeattribute\",{\"1\":{\"1829\":1,\"1898\":1,\"1917\":1,\"1921\":1,\"2017\":1,\"2075\":1,\"2081\":2}}],[\"removeattr\",{\"1\":{\"1567\":1}}],[\"removelast\",{\"1\":{\"260\":3}}],[\"removefirst\",{\"1\":{\"260\":3,\"1274\":1,\"1280\":1,\"1288\":1}}],[\"remove\",{\"1\":{\"219\":5,\"251\":6,\"261\":1,\"292\":2,\"324\":1,\"1571\":2,\"2019\":4,\"2214\":1,\"2255\":2}}],[\"reboot\",{\"1\":{\"1558\":1}}],[\"rewritebatchedstatements=true\",{\"1\":{\"1230\":1,\"1231\":1}}],[\"react相比vue\",{\"1\":{\"1943\":1}}],[\"realdatasourceproperties=port\",{\"1\":{\"2301\":1}}],[\"realdatasourceclass=com\",{\"1\":{\"2301\":1}}],[\"realdatasource=\",{\"1\":{\"2301\":1}}],[\"realmysqlds\",{\"1\":{\"2301\":1}}],[\"realname\",{\"1\":{\"2049\":3,\"2052\":4}}],[\"real\",{\"1\":{\"1198\":1}}],[\"readfromapplication\",{\"1\":{\"1925\":1}}],[\"readfromsession\",{\"1\":{\"1921\":2}}],[\"readfromrequest\",{\"1\":{\"1917\":3}}],[\"readme\",{\"1\":{\"1686\":1}}],[\"readystate==4\",{\"1\":{\"2114\":1,\"2120\":1,\"2128\":1}}],[\"ready\",{\"1\":{\"1546\":2}}],[\"readonly\",{\"0\":{\"2714\":1},\"1\":{\"1333\":3,\"2481\":1,\"2714\":1,\"2715\":1}}],[\"readonly=\",{\"1\":{\"1333\":2,\"2481\":1}}],[\"readonly只读\",{\"1\":{\"1333\":1}}],[\"readobject\",{\"1\":{\"428\":1,\"511\":1,\"512\":1,\"513\":1}}],[\"readboolean\",{\"1\":{\"425\":1,\"511\":1,\"512\":1,\"513\":1}}],[\"readint\",{\"1\":{\"425\":1}}],[\"readutf\",{\"1\":{\"425\":1,\"509\":1,\"510\":2}}],[\"readline\",{\"1\":{\"415\":2,\"422\":2}}],[\"read\",{\"0\":{\"2690\":1,\"2692\":1,\"2720\":1,\"2721\":1,\"2722\":1},\"1\":{\"404\":2,\"405\":18,\"409\":18,\"412\":12,\"418\":6,\"421\":6,\"422\":3,\"1112\":3,\"1113\":1,\"2693\":7,\"2710\":1,\"2719\":1}}],[\"reg2\",{\"1\":{\"1586\":2}}],[\"reg1\",{\"1\":{\"1586\":2}}],[\"regex3\",{\"1\":{\"1585\":1,\"1586\":2}}],[\"regex2\",{\"1\":{\"1585\":1}}],[\"regex1\",{\"1\":{\"1585\":1}}],[\"regexp\",{\"1\":{\"1036\":1,\"1417\":5}}],[\"reg\",{\"1\":{\"1585\":2}}],[\"regular\",{\"1\":{\"1582\":1}}],[\"registerdriver\",{\"1\":{\"1215\":1}}],[\"register\",{\"1\":{\"138\":1}}],[\"registry\",{\"1\":{\"93\":2,\"1681\":6}}],[\"revoke\",{\"1\":{\"935\":1,\"1117\":1}}],[\"reverse\",{\"0\":{\"1396\":1},\"1\":{\"397\":1,\"1396\":1}}],[\"reloadpropertiesinterval=60\",{\"1\":{\"2301\":1}}],[\"reloadproperties=false\",{\"1\":{\"2301\":1}}],[\"relationl\",{\"1\":{\"2198\":1}}],[\"relative\",{\"0\":{\"1533\":1},\"1\":{\"1533\":1,\"1534\":2,\"1535\":1}}],[\"relativepath>\",{\"1\":{\"714\":1,\"715\":1}}],[\"rel=\",{\"1\":{\"1293\":1,\"1331\":1,\"1472\":1,\"1563\":1,\"1564\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"2786\":1}}],[\"relevant\",{\"1\":{\"845\":5}}],[\"release\",{\"0\":{\"805\":1},\"1\":{\"2282\":1,\"2374\":1}}],[\"release<\",{\"1\":{\"699\":1,\"2538\":1,\"2614\":1,\"2629\":1,\"2665\":1,\"2756\":8}}],[\"representational\",{\"1\":{\"2823\":1}}],[\"repwdtip\",{\"1\":{\"1579\":3,\"1586\":3}}],[\"repwd\",{\"1\":{\"1555\":2,\"1579\":2,\"1586\":2}}],[\"repeat\",{\"1\":{\"1091\":1,\"1405\":1,\"1406\":1}}],[\"repeatable\",{\"0\":{\"2722\":1},\"1\":{\"904\":1,\"1112\":1,\"2693\":3}}],[\"repeatable注解定义重复注解\",{\"1\":{\"904\":1}}],[\"rep\",{\"1\":{\"1082\":1}}],[\"reps\",{\"1\":{\"1082\":1}}],[\"replication\",{\"1\":{\"922\":1}}],[\"replacechild\",{\"1\":{\"1486\":1}}],[\"replaceold\",{\"1\":{\"288\":1}}],[\"replace=\",{\"1\":{\"150\":1}}],[\"replace\",{\"1\":{\"150\":1,\"395\":1,\"396\":1,\"431\":1,\"1091\":1,\"1405\":1,\"1417\":2}}],[\"repositories\",{\"1\":{\"810\":1}}],[\"repository等注解标记的组件注册到工厂中\",{\"1\":{\"2780\":1}}],[\"repository\",{\"1\":{\"675\":1,\"676\":1,\"728\":1,\"2186\":1,\"2587\":1,\"2588\":1,\"2594\":2,\"2631\":2,\"2667\":1,\"2676\":2,\"2697\":1}}],[\"repository目录\",{\"1\":{\"675\":1}}],[\"retrieval\",{\"1\":{\"1216\":1}}],[\"retentionpolicy\",{\"1\":{\"553\":3,\"904\":2}}],[\"retention\",{\"0\":{\"553\":1},\"1\":{\"552\":1,\"904\":2}}],[\"returning指定方法中用来接受目标方法返回值的参数名\",{\"1\":{\"2648\":1}}],[\"returning标签配置返回通知\",{\"1\":{\"2648\":1}}],[\"returning=\",{\"1\":{\"2648\":1}}],[\"returning\",{\"1\":{\"2641\":1,\"2648\":2,\"2652\":1}}],[\"returninfo\",{\"1\":{\"2114\":1}}],[\"returncheckform\",{\"1\":{\"1580\":1}}],[\"returnconnection\",{\"1\":{\"1274\":1,\"1275\":2,\"1280\":1,\"1288\":1}}],[\"return的格式要求\",{\"1\":{\"537\":1}}],[\"return和\",{\"1\":{\"537\":1}}],[\"return\",{\"1\":{\"24\":1,\"76\":1,\"78\":2,\"80\":3,\"102\":4,\"114\":1,\"240\":1,\"262\":6,\"263\":5,\"274\":7,\"275\":5,\"278\":1,\"279\":4,\"281\":5,\"287\":11,\"288\":3,\"294\":7,\"316\":5,\"319\":1,\"328\":1,\"338\":1,\"352\":4,\"356\":8,\"363\":3,\"364\":6,\"368\":1,\"392\":1,\"428\":4,\"450\":1,\"489\":3,\"490\":3,\"511\":3,\"512\":3,\"513\":4,\"523\":2,\"525\":2,\"537\":1,\"538\":2,\"545\":2,\"546\":2,\"560\":3,\"561\":3,\"576\":1,\"817\":4,\"820\":1,\"829\":1,\"831\":1,\"832\":1,\"835\":2,\"836\":1,\"837\":1,\"838\":1,\"841\":3,\"842\":1,\"843\":2,\"844\":2,\"846\":4,\"847\":1,\"848\":2,\"853\":2,\"854\":7,\"873\":1,\"875\":1,\"881\":1,\"885\":1,\"887\":1,\"900\":1,\"905\":1,\"1226\":4,\"1227\":1,\"1241\":5,\"1242\":1,\"1252\":1,\"1264\":8,\"1266\":4,\"1267\":3,\"1274\":5,\"1275\":4,\"1279\":1,\"1280\":5,\"1288\":3,\"1370\":3,\"1401\":1,\"1417\":1,\"1439\":4,\"1579\":12,\"1586\":10,\"1704\":1,\"1707\":1,\"1711\":2,\"1712\":2,\"1713\":4,\"1715\":2,\"1976\":1,\"2061\":3,\"2063\":1,\"2114\":1,\"2131\":1,\"2147\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":2,\"2239\":1,\"2285\":1,\"2288\":1,\"2290\":2,\"2299\":1,\"2377\":1,\"2493\":2,\"2509\":4,\"2550\":1,\"2574\":4,\"2605\":1,\"2609\":1,\"2615\":2,\"2631\":2,\"2644\":1,\"2667\":12,\"2672\":2,\"2673\":1,\"2674\":3,\"2676\":6,\"2678\":1,\"2679\":1,\"2680\":1,\"2697\":2,\"2702\":5,\"2707\":1,\"2711\":1,\"2714\":1,\"2715\":1,\"2716\":1,\"2717\":1,\"2760\":2,\"2761\":1,\"2764\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2799\":1,\"2800\":1,\"2801\":1,\"2811\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2825\":1,\"2830\":4,\"2851\":1,\"2856\":1,\"2857\":1,\"2866\":2,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2876\":1,\"2878\":1,\"2916\":2,\"2917\":1,\"2926\":1,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"recent\",{\"1\":{\"1191\":1}}],[\"receive\",{\"1\":{\"515\":1,\"516\":2,\"517\":2,\"518\":2}}],[\"reconfigure\",{\"1\":{\"811\":1}}],[\"recordaccess\",{\"1\":{\"294\":1}}],[\"reentrantlock\",{\"1\":{\"316\":2,\"328\":2,\"338\":4,\"476\":1,\"478\":2,\"480\":1,\"490\":1}}],[\"rehash\",{\"1\":{\"294\":4,\"311\":1}}],[\"ref属性指向tx\",{\"1\":{\"2710\":1}}],[\"ref关联到切入点表达式\",{\"1\":{\"2648\":4}}],[\"ref\",{\"1\":{\"2487\":1,\"2648\":5}}],[\"refid=\",{\"1\":{\"2461\":2,\"2462\":1}}],[\"ref=\",{\"1\":{\"2312\":2,\"2487\":1,\"2562\":1,\"2564\":1,\"2567\":1,\"2579\":1,\"2648\":6,\"2666\":1,\"2701\":2,\"2706\":1,\"2710\":3,\"2757\":1,\"2896\":1,\"2903\":2,\"2907\":1,\"2908\":1}}],[\"refnode\",{\"1\":{\"1486\":1}}],[\"reflog\",{\"1\":{\"731\":1,\"739\":1,\"742\":1}}],[\"reflect\",{\"1\":{\"587\":4,\"590\":8,\"1275\":1}}],[\"reflection和introspection是常被并提的两个术语\",{\"1\":{\"570\":1}}],[\"refresh\",{\"1\":{\"177\":1,\"1293\":1}}],[\"references\",{\"1\":{\"999\":1,\"1000\":1,\"1001\":3,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1211\":1,\"2417\":2}}],[\"referenceerror\",{\"1\":{\"73\":1}}],[\"referer=http\",{\"1\":{\"2820\":1}}],[\"referer\",{\"1\":{\"177\":1}}],[\"restful风格url\",{\"1\":{\"2824\":1}}],[\"restful与普通url\",{\"0\":{\"2824\":1}}],[\"rest\",{\"1\":{\"2823\":3,\"2843\":1}}],[\"rest通常基于使用http\",{\"1\":{\"2823\":1}}],[\"rest是设计风格而不是标准\",{\"1\":{\"2823\":1}}],[\"rest即表述性状态传递\",{\"1\":{\"2823\":1}}],[\"restcontroller这个注解\",{\"1\":{\"2878\":1}}],[\"restcontroller注解\",{\"0\":{\"2878\":1}}],[\"restcontroller\",{\"1\":{\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2825\":1,\"2830\":1,\"2857\":1,\"2878\":1}}],[\"restrict方式\",{\"1\":{\"1003\":1}}],[\"res接收方法返回值\",{\"1\":{\"2641\":1}}],[\"resp=\",{\"1\":{\"2063\":1}}],[\"resp\",{\"1\":{\"1790\":3,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":8,\"1813\":2,\"1814\":1,\"1825\":1,\"1831\":2,\"1834\":2,\"1856\":9,\"1860\":10,\"1864\":5,\"1874\":2,\"1878\":4,\"1892\":5,\"1893\":4,\"1897\":1,\"1898\":1,\"1909\":3,\"1910\":3,\"1917\":4,\"1921\":3,\"1925\":2,\"1927\":4,\"1972\":2,\"1976\":2,\"1997\":8,\"2056\":1,\"2062\":2,\"2063\":3,\"2075\":1,\"2088\":1,\"2095\":1,\"2096\":4,\"2115\":4,\"2121\":4,\"2128\":4,\"2131\":4,\"2159\":4,\"2166\":4,\"2170\":4,\"2171\":4,\"2172\":4,\"2176\":4,\"2749\":2,\"2760\":1,\"2793\":1}}],[\"responsebody注解了\",{\"1\":{\"2878\":1}}],[\"responsebody两个注解的结合\",{\"1\":{\"2878\":1}}],[\"responsebody\",{\"1\":{\"2876\":2,\"2878\":1}}],[\"responsebody返回json\",{\"0\":{\"2876\":1}}],[\"responsetext\",{\"1\":{\"2114\":1,\"2120\":1,\"2128\":1}}],[\"response\",{\"1\":{\"88\":3,\"1887\":1,\"1962\":1,\"1969\":1,\"2863\":3,\"2864\":3}}],[\"resin\",{\"1\":{\"1735\":1}}],[\"resizeto\",{\"1\":{\"1452\":1}}],[\"resizeby\",{\"1\":{\"1452\":1}}],[\"resize\",{\"1\":{\"279\":3,\"294\":2,\"1341\":2}}],[\"res记录程序返回值return\",{\"1\":{\"1721\":1}}],[\"res=>\",{\"1\":{\"1721\":1}}],[\"research\",{\"1\":{\"1211\":1}}],[\"resets\",{\"1\":{\"1558\":1}}],[\"reset\",{\"1\":{\"729\":2,\"731\":1,\"737\":1,\"741\":2,\"742\":1,\"743\":1,\"1339\":1,\"1439\":1,\"1555\":1}}],[\"res\",{\"1\":{\"888\":3,\"1721\":2,\"1789\":2,\"1794\":2,\"2641\":2,\"2648\":1}}],[\"resource>\",{\"1\":{\"2505\":2}}],[\"resourceasstream\",{\"1\":{\"2282\":3,\"2374\":3}}],[\"resource=\",{\"1\":{\"2278\":1,\"2320\":3,\"2332\":1,\"2334\":2,\"2374\":1}}],[\"resources来指定注入的id或者注入的类型\",{\"1\":{\"2597\":1}}],[\"resources的使用\",{\"0\":{\"2597\":1}}],[\"resources目录下准备一个jdbc\",{\"1\":{\"2583\":1}}],[\"resources目录用于存放配置文件和资源文件\",{\"1\":{\"679\":1}}],[\"resources>标签放行指定目录\",{\"1\":{\"2789\":1}}],[\"resources>\",{\"1\":{\"2505\":1,\"2789\":6,\"2790\":1,\"2898\":1,\"2902\":1}}],[\"resources<\",{\"1\":{\"2505\":1}}],[\"resources\",{\"1\":{\"1777\":2,\"2282\":2,\"2374\":1,\"2501\":1,\"2593\":1,\"2789\":6,\"2790\":1,\"2898\":1,\"2902\":1}}],[\"resource\",{\"1\":{\"1324\":1,\"2333\":2,\"2493\":1,\"2597\":2}}],[\"resolver\",{\"0\":{\"2774\":1},\"1\":{\"2774\":2}}],[\"resolve\",{\"1\":{\"114\":1}}],[\"results\",{\"1\":{\"2609\":4}}],[\"resultsethandler\",{\"0\":{\"2514\":1}}],[\"resultset=null\",{\"1\":{\"1976\":1}}],[\"resultset对象是executequery\",{\"1\":{\"1259\":1}}],[\"resultset对象自动维护指向当前数据行的游标\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"resultset里的数据一行一行排列\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"resultset\",{\"0\":{\"1223\":1},\"1\":{\"1222\":6,\"1225\":1,\"1227\":6,\"1242\":7,\"1252\":10,\"1253\":9,\"1257\":1,\"1266\":7,\"1275\":7,\"1976\":4,\"2298\":1,\"2301\":3,\"2509\":5}}],[\"resultset接口\",{\"0\":{\"1259\":1},\"1\":{\"1206\":1}}],[\"resulthandler\",{\"1\":{\"2493\":7}}],[\"result>\",{\"1\":{\"2422\":2,\"2425\":9,\"2428\":9,\"2431\":9,\"2435\":2}}],[\"resultmap中的常见属性\",{\"0\":{\"2437\":1}}],[\"resultmap=\",{\"1\":{\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":1}}],[\"resultmap>\",{\"1\":{\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":1}}],[\"resultmap元素包含以下子元素\",{\"1\":{\"2420\":1}}],[\"resultmap元素属性\",{\"1\":{\"2420\":1}}],[\"resultmap可以实现将查询结果映射为复杂类型的pojo\",{\"1\":{\"2419\":1}}],[\"resultmap\",{\"1\":{\"2419\":1,\"2439\":3}}],[\"resultmap标签解析\",{\"0\":{\"2420\":1}}],[\"resultmap标签\",{\"0\":{\"2418\":1}}],[\"resulttype可以把查询结果封装到pojo类型中\",{\"1\":{\"2419\":1}}],[\"resulttype\",{\"1\":{\"2419\":1,\"2439\":1}}],[\"resulttype和resultmap使用场景\",{\"0\":{\"2439\":1}}],[\"resulttype和resultmap\",{\"0\":{\"2419\":1}}],[\"resulttype=\",{\"1\":{\"2279\":1,\"2344\":1,\"2347\":1,\"2350\":1,\"2354\":1,\"2356\":1,\"2358\":1,\"2378\":1,\"2385\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2394\":1,\"2398\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2406\":1,\"2407\":1,\"2410\":2,\"2413\":1,\"2435\":1,\"2444\":1,\"2447\":1,\"2450\":1,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2480\":1,\"2918\":1}}],[\"resultn\",{\"1\":{\"1094\":1}}],[\"result\",{\"1\":{\"836\":2,\"2239\":2,\"2245\":2,\"2246\":2,\"2250\":1,\"2298\":1,\"2301\":3,\"2420\":1,\"2615\":2,\"2877\":2}}],[\"result2\",{\"1\":{\"103\":2,\"1094\":1}}],[\"result1\",{\"1\":{\"103\":2,\"1094\":1}}],[\"redirectview\",{\"1\":{\"2870\":1,\"2873\":1}}],[\"redirectview中所做的操作\",{\"1\":{\"2868\":1}}],[\"redirect关键字\",{\"0\":{\"2867\":1}}],[\"redirect\",{\"1\":{\"2861\":2,\"2864\":1,\"2867\":2,\"2870\":1,\"2873\":3,\"2929\":1}}],[\"redirectport\",{\"1\":{\"1765\":1}}],[\"redirectport=\",{\"1\":{\"1756\":1,\"1757\":1,\"1765\":1,\"1812\":1}}],[\"redis\",{\"1\":{\"918\":1,\"1552\":1,\"2482\":1}}],[\"redhad\",{\"1\":{\"1735\":1}}],[\"red1\",{\"1\":{\"1548\":4}}],[\"reduce1\",{\"1\":{\"873\":2}}],[\"reduce\",{\"0\":{\"873\":1},\"1\":{\"835\":3,\"837\":1,\"867\":2,\"873\":12,\"888\":2,\"1613\":2,\"1614\":3,\"1621\":2,\"1622\":2,\"1640\":2,\"1650\":2}}],[\"red\",{\"1\":{\"65\":1,\"1188\":1,\"1472\":1,\"1482\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1528\":1,\"1552\":1,\"1567\":1,\"1571\":6,\"1572\":1,\"1579\":6,\"1586\":4,\"1606\":1,\"1650\":3,\"1701\":1,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2785\":1}}],[\"f5\",{\"1\":{\"2022\":2}}],[\"fjords\",{\"1\":{\"1609\":1}}],[\"fs\",{\"1\":{\"1393\":2}}],[\"fm=26\",{\"1\":{\"1309\":1}}],[\"fmt标签属性\",{\"0\":{\"2029\":1}}],[\"fmt\",{\"1\":{\"1093\":4,\"1417\":10,\"2028\":2,\"2031\":2}}],[\"foo=bar2\",{\"1\":{\"2140\":1}}],[\"foo=bar1\",{\"1\":{\"2140\":1}}],[\"foo\",{\"1\":{\"2140\":1,\"2301\":1}}],[\"foo2=bar2\",{\"1\":{\"2140\":1}}],[\"foo2\",{\"1\":{\"2140\":1}}],[\"foo1=bar1\",{\"1\":{\"2140\":1}}],[\"foo1\",{\"1\":{\"2140\":1}}],[\"foodname\",{\"1\":{\"2609\":3,\"2612\":3}}],[\"food\",{\"1\":{\"1419\":2,\"1420\":2,\"1421\":2,\"1423\":2,\"1424\":2,\"1425\":2}}],[\"focus\",{\"1\":{\"1452\":1,\"1572\":1}}],[\"folder\",{\"1\":{\"1198\":1}}],[\"font>\",{\"1\":{\"1306\":2,\"1567\":1,\"1579\":10,\"1586\":8}}],[\"font\",{\"1\":{\"1188\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1496\":1,\"1497\":1,\"1695\":1}}],[\"foundation\",{\"1\":{\"2196\":1}}],[\"found\",{\"1\":{\"1147\":2,\"1216\":1,\"2020\":4}}],[\"for属性\",{\"1\":{\"2710\":2}}],[\"forword转发\",{\"0\":{\"1853\":1}}],[\"forward关键字可以省略不写的\",{\"1\":{\"2866\":1}}],[\"forward关键字\",{\"0\":{\"2866\":1}}],[\"forward多一些\",{\"1\":{\"1856\":1}}],[\"forward\",{\"1\":{\"1463\":1,\"1856\":1,\"1874\":1,\"1910\":1,\"1917\":1,\"1972\":1,\"1976\":1,\"2749\":1,\"2760\":1,\"2861\":2,\"2863\":3,\"2864\":1,\"2866\":3,\"2869\":1,\"2872\":3}}],[\"for遍历的出来的不是数据\",{\"1\":{\"1632\":1}}],[\"for遍历json更多一点\",{\"1\":{\"1630\":1,\"1631\":1}}],[\"for是vue\",{\"1\":{\"1626\":1}}],[\"for=\",{\"1\":{\"1341\":1,\"1342\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":2,\"1695\":1}}],[\"form表单\",{\"1\":{\"1330\":1}}],[\"form表单会采集包含的有效数据\",{\"1\":{\"1330\":1}}],[\"form\",{\"1\":{\"1330\":2,\"2146\":1,\"2153\":1,\"2155\":3}}],[\"form>\",{\"1\":{\"1330\":2,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1439\":1,\"1514\":1,\"1555\":1,\"1579\":1,\"1586\":1,\"1793\":1,\"1907\":1,\"2055\":1,\"2060\":1,\"2094\":1,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":4,\"2857\":1,\"2859\":1,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2914\":1}}],[\"formatmessage\",{\"1\":{\"2299\":1}}],[\"formatnumber\",{\"1\":{\"2031\":1}}],[\"formatdate\",{\"1\":{\"2031\":1}}],[\"formatdate>标签格式模式\",{\"1\":{\"2030\":1}}],[\"formatdate>标签有如下属性\",{\"1\":{\"2030\":1}}],[\"format2\",{\"1\":{\"380\":2}}],[\"format1\",{\"1\":{\"380\":2,\"897\":2}}],[\"formatstyle\",{\"1\":{\"380\":7}}],[\"format\",{\"1\":{\"208\":1,\"374\":3,\"380\":5,\"459\":1,\"891\":1,\"897\":5,\"1093\":2,\"1417\":2,\"2013\":1,\"2087\":1,\"2417\":2}}],[\"ford\",{\"1\":{\"1211\":1}}],[\"foreign\",{\"0\":{\"996\":1},\"1\":{\"981\":1,\"999\":1,\"1000\":1,\"1001\":5,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1211\":1,\"2417\":2}}],[\"foreach>\",{\"1\":{\"2025\":3,\"2031\":1,\"2464\":1,\"2466\":1,\"2467\":1}}],[\"foreach中的属性\",{\"1\":{\"2025\":1}}],[\"foreach标签\",{\"0\":{\"2025\":1,\"2463\":1}}],[\"foreach循环遍历数组\",{\"1\":{\"1389\":1}}],[\"foreach用来遍历流中的数据的\",{\"1\":{\"862\":1}}],[\"foreach\",{\"0\":{\"862\":1},\"1\":{\"220\":1,\"251\":1,\"431\":1,\"585\":2,\"588\":2,\"591\":6,\"594\":3,\"856\":1,\"860\":3,\"861\":1,\"862\":2,\"864\":1,\"865\":1,\"866\":1,\"868\":2,\"869\":2,\"874\":2,\"875\":1,\"876\":1,\"889\":4,\"901\":1,\"2025\":5,\"2031\":2,\"2192\":1,\"2203\":1,\"2205\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2253\":1,\"2254\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2260\":2,\"2282\":1,\"2348\":1,\"2357\":1,\"2359\":1,\"2379\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2406\":1,\"2407\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2444\":2,\"2447\":2,\"2450\":3,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2503\":1}}],[\"forkjoinpool\",{\"1\":{\"887\":4}}],[\"fork\",{\"0\":{\"756\":1},\"1\":{\"760\":1}}],[\"for\",{\"0\":{\"1367\":1,\"1626\":1},\"1\":{\"220\":1,\"234\":3,\"244\":1,\"245\":1,\"251\":2,\"260\":3,\"262\":1,\"263\":2,\"279\":3,\"292\":3,\"294\":2,\"305\":1,\"306\":1,\"309\":6,\"316\":2,\"364\":1,\"371\":1,\"376\":2,\"390\":2,\"395\":1,\"396\":1,\"405\":1,\"438\":3,\"440\":2,\"441\":2,\"442\":1,\"445\":1,\"446\":1,\"457\":2,\"458\":2,\"460\":2,\"461\":1,\"465\":1,\"471\":1,\"480\":1,\"489\":2,\"490\":2,\"562\":1,\"676\":1,\"772\":1,\"825\":2,\"826\":2,\"835\":1,\"856\":2,\"888\":1,\"891\":1,\"904\":2,\"930\":1,\"1118\":1,\"1122\":1,\"1216\":3,\"1227\":1,\"1231\":1,\"1235\":1,\"1266\":3,\"1274\":1,\"1275\":3,\"1280\":1,\"1288\":1,\"1367\":1,\"1388\":1,\"1389\":2,\"1417\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1544\":1,\"1555\":1,\"1558\":1,\"1574\":2,\"1579\":1,\"1683\":1,\"1801\":1,\"1892\":1,\"1893\":1,\"1927\":2,\"1928\":2,\"1952\":1,\"1976\":1,\"2025\":2,\"2031\":1,\"2124\":1,\"2128\":1,\"2282\":1,\"2351\":1,\"2493\":1,\"2678\":1,\"2679\":1,\"2680\":1}}],[\"for对集合进行迭代遍历\",{\"1\":{\"147\":1}}],[\"forname\",{\"1\":{\"30\":1,\"568\":1,\"575\":1,\"579\":1,\"1217\":2,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":4,\"1256\":1,\"1264\":2,\"1266\":2,\"1271\":1,\"1274\":1,\"1280\":1,\"1288\":1,\"1976\":1,\"2549\":1}}],[\"fname\",{\"1\":{\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1}}],[\"fk\",{\"1\":{\"983\":1,\"1001\":5,\"1211\":1}}],[\"fetchtype\",{\"1\":{\"2437\":1}}],[\"fetchtype=\",{\"1\":{\"2433\":3,\"2435\":2}}],[\"fetch等操作时不用重复填写用户名密码\",{\"1\":{\"762\":1}}],[\"feb\",{\"1\":{\"1093\":1}}],[\"feature\",{\"0\":{\"806\":1}}],[\"feifei=34563465\",{\"1\":{\"292\":2}}],[\"feifei\",{\"1\":{\"292\":1}}],[\"f8\",{\"1\":{\"671\":2}}],[\"f9\",{\"1\":{\"671\":4}}],[\"f7\",{\"1\":{\"638\":1,\"643\":1,\"671\":1}}],[\"f6\",{\"1\":{\"626\":1}}],[\"flexbox教程\",{\"1\":{\"1601\":1}}],[\"flexbox\",{\"1\":{\"1601\":2}}],[\"fluid\",{\"1\":{\"1594\":1,\"1595\":1,\"1596\":2,\"1601\":1}}],[\"flushinterval\",{\"1\":{\"2481\":1}}],[\"flushinterval=\",{\"1\":{\"2481\":1}}],[\"flushcache=\",{\"1\":{\"2480\":1}}],[\"flushcache控制当前sql执行一次后是否刷新缓存\",{\"1\":{\"2480\":1}}],[\"flushbuffer\",{\"1\":{\"1855\":1}}],[\"flush\",{\"1\":{\"928\":1,\"1155\":1}}],[\"flow里面\",{\"1\":{\"2740\":1}}],[\"floor\",{\"1\":{\"367\":1,\"1092\":1,\"1411\":1,\"1417\":1}}],[\"float\",{\"1\":{\"294\":3,\"360\":3,\"940\":1,\"1223\":2,\"1259\":2,\"1517\":1,\"1518\":1,\"1521\":6,\"1523\":3,\"1524\":3,\"1525\":3,\"1695\":1}}],[\"flash\",{\"1\":{\"1310\":1}}],[\"flase\",{\"1\":{\"327\":1,\"2301\":1}}],[\"flage\",{\"1\":{\"513\":3}}],[\"flag\",{\"1\":{\"364\":2,\"511\":5,\"512\":5,\"513\":2,\"1624\":2,\"2022\":2}}],[\"fun8\",{\"1\":{\"1571\":2}}],[\"fun7\",{\"1\":{\"1439\":2,\"1571\":2}}],[\"fun6\",{\"1\":{\"1433\":2,\"1439\":2,\"1571\":2}}],[\"fun5\",{\"1\":{\"1433\":2,\"1439\":2,\"1571\":2}}],[\"fun4\",{\"1\":{\"1433\":2,\"1439\":2,\"1491\":2,\"1567\":2,\"1568\":2,\"1571\":2,\"1572\":2,\"1590\":2}}],[\"funb\",{\"1\":{\"1370\":2}}],[\"funa\",{\"1\":{\"1370\":2}}],[\"fun3\",{\"1\":{\"1369\":2,\"1380\":2,\"1433\":2,\"1436\":2,\"1439\":2,\"1463\":2,\"1490\":2,\"1567\":2,\"1568\":2,\"1570\":2,\"1571\":2,\"1572\":2,\"1588\":2,\"1589\":2,\"1590\":2}}],[\"fun\",{\"1\":{\"983\":1}}],[\"fun2\",{\"1\":{\"904\":1,\"1369\":2,\"1370\":1,\"1380\":2,\"1433\":2,\"1436\":2,\"1439\":2,\"1460\":2,\"1463\":2,\"1489\":2,\"1567\":2,\"1568\":2,\"1570\":2,\"1571\":2,\"1572\":2,\"1588\":2,\"1589\":2,\"1590\":2}}],[\"fun1\",{\"1\":{\"835\":2,\"904\":1,\"1369\":2,\"1370\":4,\"1379\":2,\"1380\":2,\"1433\":2,\"1436\":2,\"1439\":2,\"1454\":2,\"1455\":2,\"1456\":2,\"1460\":2,\"1462\":2,\"1463\":2,\"1464\":2,\"1488\":2,\"1493\":2,\"1494\":2,\"1496\":2,\"1497\":2,\"1499\":2,\"1500\":2,\"1501\":2,\"1505\":2,\"1567\":2,\"1568\":2,\"1570\":2,\"1571\":2,\"1572\":2,\"1588\":2,\"1589\":2,\"1590\":2,\"2155\":1}}],[\"functionlambda\",{\"1\":{\"842\":1,\"843\":1,\"844\":1}}],[\"function接口\",{\"0\":{\"841\":1}}],[\"functionalinterface\",{\"1\":{\"835\":1,\"836\":1,\"841\":1,\"846\":1}}],[\"function<\",{\"1\":{\"841\":2,\"867\":1}}],[\"function<v\",{\"1\":{\"841\":1}}],[\"function<t\",{\"1\":{\"841\":3,\"842\":1}}],[\"function<integer\",{\"1\":{\"832\":2,\"843\":1,\"844\":1}}],[\"function<string\",{\"1\":{\"830\":2,\"831\":1,\"842\":1,\"843\":1,\"844\":1}}],[\"function2\",{\"1\":{\"830\":2,\"832\":2,\"843\":5,\"844\":4}}],[\"function1\",{\"1\":{\"830\":2,\"832\":2,\"843\":3,\"844\":4}}],[\"function\",{\"0\":{\"1420\":1},\"1\":{\"65\":1,\"76\":1,\"78\":3,\"80\":1,\"88\":1,\"102\":4,\"106\":2,\"114\":2,\"294\":1,\"830\":2,\"831\":2,\"842\":3,\"845\":2,\"1369\":5,\"1370\":4,\"1379\":1,\"1380\":3,\"1401\":1,\"1417\":1,\"1419\":1,\"1420\":2,\"1421\":1,\"1423\":2,\"1424\":3,\"1425\":3,\"1433\":6,\"1436\":3,\"1439\":7,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":3,\"1459\":3,\"1460\":2,\"1462\":1,\"1463\":3,\"1464\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":2,\"1544\":1,\"1545\":1,\"1546\":3,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1567\":4,\"1568\":4,\"1570\":3,\"1571\":8,\"1572\":8,\"1573\":1,\"1574\":3,\"1579\":5,\"1586\":5,\"1588\":4,\"1589\":3,\"1590\":4,\"1591\":2,\"1613\":2,\"1656\":3,\"1713\":1,\"1730\":7,\"2013\":1,\"2114\":2,\"2120\":2,\"2128\":2,\"2131\":2,\"2132\":6,\"2142\":1,\"2143\":1,\"2144\":1,\"2145\":1,\"2147\":1,\"2155\":6,\"2159\":2,\"2166\":7,\"2169\":2,\"2170\":2,\"2171\":2,\"2176\":4,\"2785\":1,\"2877\":3}}],[\"futuretask\",{\"1\":{\"450\":5}}],[\"futuretask对象\",{\"1\":{\"449\":1}}],[\"fully\",{\"1\":{\"1766\":1}}],[\"fullycompleted\",{\"1\":{\"1198\":1}}],[\"full\",{\"1\":{\"327\":1,\"337\":1,\"922\":1,\"2030\":2}}],[\"ff\",{\"1\":{\"300\":1}}],[\"fffff\",{\"1\":{\"260\":4}}],[\"fasterxml\",{\"1\":{\"2875\":1,\"2891\":1}}],[\"fastautogenerator\",{\"1\":{\"2293\":1}}],[\"fargo\",{\"1\":{\"2312\":1}}],[\"fail\",{\"1\":{\"1794\":1,\"2914\":1,\"2916\":1}}],[\"fair\",{\"1\":{\"328\":2,\"478\":1}}],[\"fathernumber\",{\"1\":{\"1711\":2,\"1715\":2}}],[\"father\",{\"1\":{\"1711\":1,\"1715\":1}}],[\"fatal\",{\"1\":{\"736\":1,\"1284\":1,\"1287\":1,\"1288\":2}}],[\"fade\",{\"1\":{\"1606\":3}}],[\"fadeto\",{\"1\":{\"1590\":2}}],[\"fadetoggle\",{\"1\":{\"1590\":2}}],[\"fadeout\",{\"1\":{\"1590\":2}}],[\"fadein\",{\"1\":{\"1590\":2}}],[\"family\",{\"1\":{\"1392\":2,\"1470\":1,\"1471\":1,\"1472\":1}}],[\"favlan\",{\"1\":{\"1336\":4}}],[\"favlan=3\",{\"1\":{\"1336\":1}}],[\"favlan=1\",{\"1\":{\"1336\":1}}],[\"favicon\",{\"1\":{\"1293\":1,\"1331\":1}}],[\"face=\",{\"1\":{\"1306\":1}}],[\"factory\",{\"1\":{\"2301\":1}}],[\"factor\",{\"1\":{\"294\":3}}],[\"false则不读取浏览器缓存\",{\"1\":{\"2155\":1}}],[\"false会转变成0\",{\"1\":{\"1362\":1}}],[\"false=\",{\"1\":{\"882\":1}}],[\"false\",{\"1\":{\"219\":2,\"278\":1,\"279\":1,\"281\":1,\"283\":1,\"292\":4,\"303\":1,\"316\":2,\"328\":1,\"364\":2,\"425\":1,\"431\":1,\"478\":1,\"489\":2,\"490\":2,\"511\":1,\"512\":1,\"513\":1,\"848\":2,\"870\":1,\"882\":1,\"896\":2,\"1198\":1,\"1233\":1,\"1234\":1,\"1235\":1,\"1370\":2,\"1409\":2,\"1412\":2,\"1439\":1,\"1579\":6,\"1580\":2,\"1586\":4,\"1620\":1,\"1624\":1,\"1689\":1,\"1962\":1,\"1989\":4,\"2029\":1,\"2285\":1,\"2301\":2,\"2318\":2,\"2475\":1,\"2480\":1,\"2481\":4,\"2485\":1,\"2554\":1,\"2555\":1,\"2588\":1,\"2592\":1,\"2714\":1,\"2857\":4}}],[\"freemarkerview\",{\"1\":{\"2775\":1}}],[\"freemarkertemplateengine\",{\"1\":{\"2293\":1}}],[\"freemarker<\",{\"1\":{\"2292\":1}}],[\"freemaker等\",{\"1\":{\"122\":1}}],[\"freameworks\",{\"1\":{\"1775\":1}}],[\"fruit\",{\"1\":{\"1394\":2}}],[\"fruits\",{\"1\":{\"1393\":2,\"1394\":3,\"1395\":3,\"1396\":3,\"1397\":3,\"1398\":3,\"1399\":2,\"1401\":3}}],[\"friday\",{\"1\":{\"375\":2}}],[\"framework\",{\"1\":{\"2197\":2,\"2520\":1}}],[\"frames\",{\"1\":{\"1451\":1}}],[\"frameset\",{\"1\":{\"1322\":2}}],[\"frameset>\",{\"1\":{\"1322\":4}}],[\"frame\",{\"1\":{\"167\":1,\"1777\":1}}],[\"fragment=\",{\"1\":{\"149\":1}}],[\"fromcharcode\",{\"1\":{\"1405\":1}}],[\"from型\",{\"0\":{\"1072\":1},\"1\":{\"1069\":1}}],[\"from子句和where子句的组合来查询一条或多条数据\",{\"1\":{\"932\":1}}],[\"from\",{\"1\":{\"107\":1,\"110\":1,\"928\":1,\"937\":1,\"956\":3,\"967\":1,\"973\":1,\"975\":1,\"982\":2,\"1001\":2,\"1024\":1,\"1025\":2,\"1026\":1,\"1027\":2,\"1028\":1,\"1029\":1,\"1033\":1,\"1034\":2,\"1035\":1,\"1036\":1,\"1037\":2,\"1039\":1,\"1040\":1,\"1041\":1,\"1042\":1,\"1043\":1,\"1054\":3,\"1056\":1,\"1057\":1,\"1060\":1,\"1061\":1,\"1063\":1,\"1064\":1,\"1068\":1,\"1071\":4,\"1072\":4,\"1073\":2,\"1077\":1,\"1078\":1,\"1080\":1,\"1081\":1,\"1082\":2,\"1091\":3,\"1117\":1,\"1131\":1,\"1140\":1,\"1147\":5,\"1156\":1,\"1211\":4,\"1220\":1,\"1222\":1,\"1227\":1,\"1242\":1,\"1246\":2,\"1249\":2,\"1252\":1,\"1253\":2,\"1264\":1,\"1267\":2,\"1689\":2,\"1708\":1,\"1711\":1,\"1712\":1,\"1713\":1,\"1715\":1,\"1976\":1,\"2176\":1,\"2183\":1,\"2186\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":5,\"2247\":1,\"2248\":1,\"2249\":1,\"2253\":1,\"2254\":1,\"2256\":1,\"2257\":1,\"2258\":3,\"2279\":1,\"2344\":1,\"2347\":1,\"2350\":1,\"2354\":1,\"2356\":1,\"2358\":1,\"2368\":1,\"2378\":1,\"2385\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2394\":1,\"2398\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2406\":1,\"2407\":1,\"2408\":1,\"2413\":1,\"2415\":1,\"2422\":1,\"2423\":1,\"2425\":1,\"2426\":1,\"2428\":1,\"2429\":1,\"2431\":1,\"2435\":2,\"2444\":3,\"2447\":3,\"2450\":4,\"2459\":2,\"2462\":2,\"2466\":2,\"2467\":2,\"2503\":1,\"2672\":2,\"2673\":1,\"2674\":1,\"2697\":3,\"2702\":4,\"2707\":2,\"2711\":2,\"2918\":1}}],[\"from表单\",{\"0\":{\"1328\":1,\"3090\":1},\"1\":{\"55\":1}}],[\"f4\",{\"0\":{\"3000\":1},\"1\":{\"80\":2,\"2022\":2}}],[\"f3\",{\"1\":{\"80\":2,\"646\":2,\"2022\":2}}],[\"f2fa3\",{\"1\":{\"2332\":1,\"2374\":1}}],[\"f2\",{\"1\":{\"78\":2,\"80\":2,\"638\":1,\"2022\":2}}],[\"f10\",{\"1\":{\"670\":1}}],[\"f10快速运行项目\",{\"1\":{\"601\":1}}],[\"f12\",{\"1\":{\"642\":1}}],[\"f1\",{\"1\":{\"78\":2,\"80\":2,\"638\":1,\"1567\":8,\"2022\":2}}],[\"f\",{\"1\":{\"48\":1,\"327\":3,\"374\":1,\"390\":1,\"431\":1,\"641\":1,\"646\":1,\"1094\":1,\"1285\":1,\"1287\":2,\"1363\":3,\"1364\":6,\"1406\":2,\"1975\":1,\"1976\":1,\"2030\":1,\"2308\":1,\"2374\":1}}],[\"fixed\",{\"0\":{\"1536\":1},\"1\":{\"1536\":1}}],[\"fight\",{\"1\":{\"1185\":1}}],[\"fifilter\",{\"1\":{\"861\":1}}],[\"fifo\",{\"1\":{\"321\":1,\"2481\":1}}],[\"findename\",{\"1\":{\"2459\":2}}],[\"findedept\",{\"1\":{\"2435\":3,\"2475\":2}}],[\"findempcount\",{\"1\":{\"2667\":5,\"2672\":2}}],[\"findemp赋值\",{\"1\":{\"2435\":1}}],[\"findempjoindeptbyempno\",{\"1\":{\"2425\":4}}],[\"findemp\",{\"1\":{\"2357\":2,\"2359\":2,\"2435\":4,\"2479\":2,\"2488\":2}}],[\"findempbydeptnoandsal2\",{\"1\":{\"2358\":1,\"2359\":1}}],[\"findempbydeptnoandsal\",{\"1\":{\"2356\":1,\"2357\":1}}],[\"findprojectsinfo\",{\"1\":{\"2431\":6}}],[\"finddeptandemp\",{\"1\":{\"2435\":2}}],[\"finddeptleftemp\",{\"1\":{\"2428\":6}}],[\"finddepts\",{\"1\":{\"2422\":4}}],[\"finddeptbyid\",{\"1\":{\"2413\":3,\"2414\":1}}],[\"findobjectsbyempno2\",{\"1\":{\"2467\":2}}],[\"findobjectsbyempno\",{\"1\":{\"2467\":2}}],[\"findobjectsbyempno1\",{\"1\":{\"2466\":4}}],[\"findobject\",{\"1\":{\"2462\":4}}],[\"findobjectbyname\",{\"1\":{\"2406\":4,\"2407\":4,\"2459\":3}}],[\"findobjectbydeptnoandsal2\",{\"1\":{\"2401\":2,\"2402\":2,\"2403\":1,\"2404\":2}}],[\"findobjectbydeptnoandsal1\",{\"1\":{\"2397\":1,\"2398\":1,\"2399\":2}}],[\"findone\",{\"1\":{\"2344\":2,\"2345\":2}}],[\"findbydeptno\",{\"1\":{\"2667\":5,\"2673\":2}}],[\"findbydeptnoandsal\",{\"1\":{\"2388\":1,\"2389\":1,\"2390\":1,\"2391\":1}}],[\"findbycondition\",{\"1\":{\"2444\":6,\"2447\":6,\"2450\":8}}],[\"findbyempno\",{\"1\":{\"2354\":2,\"2355\":1,\"2356\":1,\"2358\":1,\"2384\":1,\"2385\":1,\"2386\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2403\":1,\"2480\":1,\"2667\":5,\"2672\":2}}],[\"findbyparentid\",{\"1\":{\"2176\":4}}],[\"findmapbydeptnoandsal\",{\"1\":{\"2393\":1,\"2394\":1,\"2395\":2}}],[\"findmap\",{\"1\":{\"2350\":1,\"2351\":1}}],[\"findall\",{\"1\":{\"1976\":2,\"2279\":2,\"2282\":1,\"2347\":2,\"2348\":1,\"2350\":1,\"2377\":1,\"2378\":1,\"2379\":1}}],[\"findany\",{\"1\":{\"871\":2}}],[\"findfirst\",{\"1\":{\"871\":2}}],[\"find\",{\"0\":{\"871\":1}}],[\"fin1\",{\"1\":{\"837\":2}}],[\"finish\",{\"1\":{\"789\":1,\"2263\":1}}],[\"final\",{\"1\":{\"36\":2,\"263\":2,\"279\":1,\"294\":4,\"316\":4,\"319\":1,\"328\":6,\"338\":6,\"364\":3,\"428\":1,\"478\":1,\"511\":1,\"512\":1,\"513\":1,\"560\":6,\"561\":2,\"1286\":1}}],[\"finally结构围绕整个被代理的目标方法\",{\"1\":{\"2623\":1}}],[\"finally代码块中的代码\",{\"1\":{\"23\":1}}],[\"finally\",{\"0\":{\"22\":1},\"1\":{\"24\":1,\"27\":1,\"316\":2,\"480\":1,\"490\":2,\"512\":2,\"513\":3,\"517\":2,\"518\":2,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":4,\"1264\":2,\"1266\":2,\"1275\":2,\"1976\":1,\"2493\":2}}],[\"fips\",{\"1\":{\"702\":1}}],[\"fielding博士在2000年他的博士论中提出来的一种软件架构风格\",{\"1\":{\"2823\":1}}],[\"field=isdel\",{\"1\":{\"2235\":1}}],[\"fields\",{\"1\":{\"588\":2,\"1266\":2,\"1275\":2}}],[\"field\",{\"1\":{\"587\":8,\"588\":5,\"1198\":1,\"1266\":6,\"1275\":7,\"2226\":1}}],[\"film3\",{\"1\":{\"1549\":1}}],[\"film\",{\"1\":{\"1549\":9}}],[\"filters=\",{\"1\":{\"2588\":2,\"2592\":2}}],[\"filtering>\",{\"1\":{\"2505\":2}}],[\"filter=false\",{\"1\":{\"2301\":1}}],[\"filter1\",{\"1\":{\"2052\":1,\"2063\":1}}],[\"filter0\",{\"1\":{\"2052\":1,\"2057\":1,\"2058\":1}}],[\"filter也可以通过web\",{\"1\":{\"2048\":1}}],[\"filter也称之为过滤器\",{\"1\":{\"1994\":1}}],[\"filter的创建和销毁由web服务器负责\",{\"1\":{\"2003\":1}}],[\"filter对象创建后会驻留在内存\",{\"1\":{\"2005\":1}}],[\"filter对象只会创建一次\",{\"1\":{\"2003\":1}}],[\"filter对象的创建也是交给web服务器完成的\",{\"1\":{\"2000\":1}}],[\"filter对用户请求进行预处理\",{\"1\":{\"1994\":1}}],[\"filter>\",{\"1\":{\"1999\":1,\"2047\":2,\"2049\":1,\"2058\":1,\"2807\":1,\"2829\":1,\"2830\":1,\"2912\":1}}],[\"filterchain参数用于访问后续过滤器\",{\"1\":{\"2004\":1}}],[\"filterchain\",{\"1\":{\"1998\":3,\"2001\":3,\"2047\":6,\"2052\":6,\"2057\":3,\"2063\":4}}],[\"filterconfig接口为我们提供了如下功能\",{\"1\":{\"2048\":1}}],[\"filterconfig\",{\"1\":{\"1998\":2,\"2001\":2,\"2003\":2,\"2047\":4,\"2049\":4,\"2052\":6,\"2057\":3,\"2063\":2}}],[\"filter接口中有一个dofilter方法\",{\"1\":{\"1995\":1}}],[\"filter等web组件的生命周期\",{\"1\":{\"1728\":1}}],[\"filter方法的作用是用来过滤数据的\",{\"1\":{\"864\":1}}],[\"filter\",{\"0\":{\"864\":1},\"1\":{\"856\":2,\"864\":2,\"874\":2,\"876\":2,\"885\":1,\"887\":1,\"1998\":4,\"1999\":5,\"2001\":4,\"2005\":1,\"2047\":12,\"2049\":4,\"2052\":2,\"2057\":1,\"2058\":5,\"2063\":1,\"2588\":4,\"2592\":2,\"2807\":5,\"2829\":5,\"2830\":5,\"2912\":5}}],[\"fill\",{\"1\":{\"300\":2}}],[\"filepattern=\",{\"1\":{\"2312\":1}}],[\"filelogger\",{\"1\":{\"2300\":1,\"2301\":1}}],[\"fileoverride\",{\"1\":{\"2293\":1}}],[\"fileoutputstream\",{\"0\":{\"412\":1},\"1\":{\"412\":10,\"418\":4,\"421\":5,\"425\":1,\"428\":1,\"2087\":1}}],[\"fileout\",{\"1\":{\"409\":2,\"412\":4,\"415\":2,\"418\":2,\"421\":2}}],[\"filenotfoundexception\",{\"1\":{\"2087\":1,\"2717\":1}}],[\"filename=文件名\",{\"1\":{\"1807\":1}}],[\"filename=\",{\"1\":{\"1807\":1,\"1814\":1,\"2312\":1}}],[\"filename\",{\"1\":{\"114\":1,\"729\":1,\"739\":1,\"742\":1,\"743\":1}}],[\"file=\",{\"1\":{\"1962\":1}}],[\"file=d\",{\"1\":{\"1285\":1,\"2308\":1,\"2374\":1}}],[\"file>\",{\"1\":{\"1795\":1}}],[\"file>login\",{\"1\":{\"1795\":1}}],[\"fileappender\",{\"1\":{\"1285\":2,\"2308\":1,\"2374\":1}}],[\"fileupload包就不能正常工作\",{\"1\":{\"651\":1}}],[\"fileupload\",{\"1\":{\"651\":2,\"1831\":3}}],[\"fileinputstream\",{\"0\":{\"411\":1},\"1\":{\"412\":12,\"418\":4,\"421\":5,\"422\":1,\"425\":1,\"428\":1}}],[\"filein\",{\"1\":{\"409\":2,\"412\":4,\"415\":2,\"418\":2,\"421\":2}}],[\"filewriter\",{\"0\":{\"406\":1},\"1\":{\"407\":1,\"408\":7,\"409\":7,\"415\":4,\"422\":4}}],[\"filereader\",{\"0\":{\"403\":1},\"1\":{\"404\":1,\"405\":18,\"407\":1,\"409\":10,\"415\":4}}],[\"filestore\",{\"1\":{\"2092\":1}}],[\"files\",{\"1\":{\"389\":1,\"390\":2,\"734\":1,\"736\":1,\"772\":2,\"923\":2,\"925\":1,\"928\":1,\"1191\":1,\"1690\":1}}],[\"file3\",{\"1\":{\"387\":3}}],[\"file2\",{\"1\":{\"384\":1,\"385\":1,\"386\":4,\"387\":5,\"388\":1,\"389\":7}}],[\"file1==file2\",{\"1\":{\"386\":2,\"387\":1,\"389\":2}}],[\"file1\",{\"1\":{\"384\":1,\"386\":2,\"387\":2,\"389\":2}}],[\"file\",{\"0\":{\"1337\":1},\"1\":{\"98\":2,\"208\":9,\"384\":4,\"385\":2,\"387\":14,\"388\":2,\"389\":2,\"390\":11,\"404\":2,\"405\":15,\"407\":4,\"408\":5,\"409\":6,\"412\":12,\"415\":6,\"418\":6,\"421\":6,\"422\":7,\"425\":6,\"428\":4,\"676\":1,\"772\":2,\"922\":1,\"1191\":1,\"1195\":1,\"1198\":14,\"1337\":1,\"1554\":1,\"1555\":1,\"1795\":2,\"1814\":1,\"1928\":2,\"2087\":1,\"2269\":2,\"2319\":1,\"2322\":3}}],[\"file类\",{\"0\":{\"383\":1,\"3018\":1},\"1\":{\"39\":1,\"400\":1}}],[\"firedate\",{\"1\":{\"1211\":1}}],[\"firewall\",{\"1\":{\"922\":1}}],[\"firefox\",{\"1\":{\"61\":1}}],[\"firstcontroller\",{\"1\":{\"2760\":3,\"2764\":4,\"2811\":3}}],[\"firstchild\",{\"1\":{\"1485\":1}}],[\"firstdayofnextmonth\",{\"1\":{\"900\":1}}],[\"first\",{\"1\":{\"147\":1,\"262\":4,\"263\":3,\"302\":1,\"321\":2,\"338\":5,\"871\":2,\"958\":1,\"1081\":1,\"1326\":1,\"1545\":1,\"1551\":1,\"1552\":5,\"2025\":2,\"2031\":2,\"2749\":1,\"2750\":2,\"2760\":3,\"2764\":3,\"2765\":1,\"2811\":1,\"2814\":1,\"2817\":1,\"2820\":1}}],[\"由此可见\",{\"1\":{\"2859\":1}}],[\"由此得出结论\",{\"1\":{\"2223\":1}}],[\"由它调用其它组件处理用户的请求\",{\"1\":{\"2770\":1}}],[\"由dbms中的事务管理子系统负责事务的处理\",{\"1\":{\"2683\":1}}],[\"由dbms首先进行编译后再执行\",{\"1\":{\"1250\":1}}],[\"由\",{\"1\":{\"2532\":1,\"2773\":2}}],[\"由框架负责根据数据库表\",{\"1\":{\"2497\":1}}],[\"由框架负责根据实体类生成数据库表\",{\"1\":{\"2497\":1}}],[\"由cachingexecutor调用perpetualcache\",{\"1\":{\"2492\":1}}],[\"由baseexecutor调用perpetualcache\",{\"1\":{\"2492\":1}}],[\"由basemapper的泛型决定\",{\"1\":{\"2223\":1}}],[\"由下一个操作来使用\",{\"1\":{\"2408\":1}}],[\"由服务器返回\",{\"1\":{\"2144\":1}}],[\"由请求转发器作出转发动作\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"由sun\",{\"1\":{\"1548\":1}}],[\"由stream进行操作时自动装箱拆箱\",{\"1\":{\"874\":1,\"875\":1}}],[\"由美国人johnresig在2006年推出\",{\"1\":{\"1541\":1}}],[\"由尖括号包围起来的关键词语言\",{\"1\":{\"1325\":1}}],[\"由多个sql语句组成\",{\"1\":{\"1233\":1}}],[\"由单个或多个名词组成\",{\"1\":{\"983\":2}}],[\"由阻塞状态进入就绪状态\",{\"1\":{\"467\":1}}],[\"由数组+链表的形式\",{\"1\":{\"295\":1}}],[\"由于其使用相当方便\",{\"1\":{\"2823\":1}}],[\"由于两个方法属于同一个物理事务\",{\"1\":{\"2727\":1}}],[\"由于没有事务的控制\",{\"1\":{\"2698\":1}}],[\"由于没有使用接口\",{\"1\":{\"2659\":1}}],[\"由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样\",{\"1\":{\"2691\":1}}],[\"由于需要使用aop与context\",{\"1\":{\"2630\":1}}],[\"由于我们之前在web\",{\"1\":{\"2788\":1}}],[\"由于我们本次使用了代理模式的开发\",{\"1\":{\"2374\":1}}],[\"由于我们在集合中塞入数据时\",{\"1\":{\"305\":1}}],[\"由于对象属性不仅仅是基本数据类型\",{\"1\":{\"2551\":1}}],[\"由于对数据实行dml数据会涉及到数据的事务问题\",{\"1\":{\"2360\":1}}],[\"由于对于自定义的引用类型类存储\",{\"1\":{\"281\":1}}],[\"由于增删\",{\"1\":{\"2360\":1}}],[\"由于当前使用的是非接口式开发\",{\"1\":{\"2340\":1}}],[\"由于当前队列处于满载情况\",{\"1\":{\"327\":1}}],[\"由于开启了逻辑删除\",{\"1\":{\"2255\":1}}],[\"由于属性太多\",{\"1\":{\"2155\":1}}],[\"由于不同的层各司其职\",{\"1\":{\"2040\":1}}],[\"由于不同的对象其hashcode\",{\"1\":{\"294\":1}}],[\"由于模型返回的数据没有进行格式化\",{\"1\":{\"2037\":1}}],[\"由于jsp本身也是一个servlet\",{\"1\":{\"1971\":1}}],[\"由于jvm系统的内部问题\",{\"1\":{\"29\":1}}],[\"由于forword\",{\"1\":{\"1855\":1}}],[\"由于在httpservlet中重写了service方法所以最终执行的是httpservlet中的service方法\",{\"1\":{\"1826\":1}}],[\"由于http协议是一个无状态的协议\",{\"1\":{\"1882\":1}}],[\"由于http协议简单\",{\"1\":{\"157\":1}}],[\"由于httpservlet中重写了该方法所以最终执行的是httpservlet中init方法\",{\"1\":{\"1826\":1}}],[\"由于idea在启动tomcat之前已经设置了临时环境变量\",{\"1\":{\"1779\":1}}],[\"由于integer占用的内存会比int高很多\",{\"1\":{\"874\":1}}],[\"由于编码格式不统一\",{\"1\":{\"1755\":1}}],[\"由于网络速度相当缓慢\",{\"1\":{\"1372\":1}}],[\"由于使用了延迟加载\",{\"1\":{\"2435\":1}}],[\"由于使用了preparedstatement\",{\"1\":{\"1250\":1}}],[\"由于使用的是string拼接的方式\",{\"1\":{\"1246\":1}}],[\"由于sql语言具有集数据查询\",{\"1\":{\"930\":1}}],[\"由于mysql数据库体积小\",{\"1\":{\"919\":1}}],[\"由于mysql是开放源代码的\",{\"1\":{\"919\":1}}],[\"由于构造器的名称和类名完全一致\",{\"1\":{\"831\":1}}],[\"由于哈希码长度的局限性\",{\"1\":{\"703\":1}}],[\"由于底层采用了hash码\",{\"1\":{\"702\":1}}],[\"由于\",{\"1\":{\"655\":2}}],[\"由于多个线程互相抢占资源\",{\"1\":{\"462\":1}}],[\"由于多个线程的影响\",{\"1\":{\"305\":1}}],[\"由于多线程的特性\",{\"1\":{\"462\":1}}],[\"由于时间片比较短\",{\"1\":{\"452\":1}}],[\"由于deque是个接口\",{\"1\":{\"357\":1}}],[\"由于每次更新都会复制新容器\",{\"1\":{\"313\":1}}],[\"由于集合底层是object数组\",{\"1\":{\"234\":1}}],[\"由于1=1恒成立\",{\"1\":{\"1246\":1}}],[\"由于1\",{\"1\":{\"168\":1}}],[\"由程序来自行处理\",{\"1\":{\"29\":1}}],[\"先创建数据库表\",{\"1\":{\"2497\":1}}],[\"先创建java实体类\",{\"1\":{\"2497\":1}}],[\"先查询二级缓存\",{\"1\":{\"2471\":1}}],[\"先从单表查询\",{\"1\":{\"2434\":1}}],[\"先在表中创建一个isdel字段\",{\"1\":{\"2233\":1}}],[\"先登录\",{\"1\":{\"2098\":1}}],[\"先向银行提出开户申请\",{\"1\":{\"1883\":1}}],[\"先对项目进行配置\",{\"1\":{\"1777\":1}}],[\"先使用在html中使用class属性直接标记\",{\"1\":{\"1543\":1}}],[\"先有页面\",{\"1\":{\"1468\":1}}],[\"先有html\",{\"1\":{\"1468\":1}}],[\"先比较类型\",{\"1\":{\"1363\":2}}],[\"先过滤\",{\"1\":{\"1148\":1}}],[\"先删除之前的外键约束\",{\"1\":{\"1001\":2}}],[\"先把班级2的学生对应的班级\",{\"1\":{\"1001\":1}}],[\"先根据姓名分组\",{\"1\":{\"881\":1}}],[\"先执行function2在执行\",{\"1\":{\"844\":1}}],[\"先执行function1\",{\"1\":{\"843\":2,\"844\":1}}],[\"先执行finally再执行return\",{\"1\":{\"23\":1}}],[\"先执行consumer1\",{\"1\":{\"840\":1}}],[\"先做一个操作\",{\"1\":{\"840\":1,\"843\":1}}],[\"先pull在修改\",{\"1\":{\"753\":1}}],[\"先git\",{\"1\":{\"729\":1}}],[\"先设置\",{\"1\":{\"460\":1}}],[\"先进先出\",{\"1\":{\"321\":1,\"326\":1,\"2481\":1}}],[\"先将容器进行copy复制出一个新容器\",{\"1\":{\"313\":1}}],[\"先粘贴过来\",{\"1\":{\"294\":1}}],[\"先序遍历\",{\"1\":{\"288\":1}}],[\"先table扩容\",{\"1\":{\"279\":1}}],[\"先得到hash值\",{\"1\":{\"279\":1}}],[\"先写子类异常\",{\"1\":{\"27\":1}}],[\"一处修改\",{\"1\":{\"2635\":1}}],[\"一级缓存机制\",{\"0\":{\"2493\":1}}],[\"一级缓存与二级缓存的调用者不同\",{\"1\":{\"2492\":1}}],[\"一级缓存\",{\"0\":{\"2473\":1},\"1\":{\"2492\":1}}],[\"一级缓存中的数据会写入二级缓存\",{\"1\":{\"2471\":1}}],[\"一级存储是sqlsession上的缓存\",{\"1\":{\"2472\":1,\"2473\":1}}],[\"一级域名比二级域名更高级\",{\"1\":{\"1891\":1}}],[\"一缓和二缓遵循mybatis的规则\",{\"1\":{\"2285\":1}}],[\"一千个人就有可能有一千种不同的看法1000人心中有1000个哈姆雷特\",{\"1\":{\"2197\":1}}],[\"一千个观众眼中有一千个哈姆雷特\",{\"1\":{\"2197\":1}}],[\"一举多得\",{\"1\":{\"2197\":1}}],[\"一年中的第几周r\",{\"1\":{\"2030\":1}}],[\"一年中的第几天\",{\"1\":{\"2030\":1}}],[\"一位数的秒数没有前导零\",{\"1\":{\"2030\":1}}],[\"一位数的分钟数没有前导零\",{\"1\":{\"2030\":1}}],[\"一位数的小时数没有前导零\",{\"1\":{\"2030\":2}}],[\"一位数的日期没有前导零\",{\"1\":{\"2030\":1}}],[\"一位数的月份没有前导零\",{\"1\":{\"2030\":1}}],[\"一类是以\",{\"1\":{\"1744\":1}}],[\"一直是github上的热门开源项目\",{\"1\":{\"1557\":1}}],[\"一直默认为false\",{\"1\":{\"1251\":1}}],[\"一种在无需重新加载整个网页的情况下\",{\"1\":{\"1720\":1}}],[\"一种小规模脚本语言\",{\"1\":{\"1376\":1}}],[\"一种是执行一条发送一条sql语句给数据库\",{\"1\":{\"1230\":1}}],[\"一组单选按钮\",{\"1\":{\"1335\":1}}],[\"一组数值以及他们映射成的图\",{\"1\":{\"62\":1}}],[\"一条\",{\"1\":{\"2438\":1}}],[\"一条对数据库的dml\",{\"1\":{\"1233\":1}}],[\"一条sql语句就是一个事务\",{\"1\":{\"1104\":1}}],[\"一致性是通过原子性来保证的\",{\"1\":{\"2686\":1}}],[\"一致性是指事务执行的结果必须使数据库从一个一致性状态\",{\"1\":{\"2686\":1}}],[\"一致性\",{\"0\":{\"2686\":1},\"1\":{\"1102\":1,\"1233\":1,\"2684\":1}}],[\"一周中的星期缩写\",{\"1\":{\"1093\":1}}],[\"一周中的星期名称\",{\"1\":{\"1093\":1}}],[\"一周前\",{\"1\":{\"895\":1}}],[\"一对一关联映射的实现\",{\"1\":{\"2440\":1}}],[\"一对一查询\",{\"0\":{\"2423\":1}}],[\"一对一\",{\"0\":{\"1052\":1},\"1\":{\"2431\":1}}],[\"一对多查询\",{\"0\":{\"2426\":1}}],[\"一对多\",{\"0\":{\"1050\":1},\"1\":{\"2431\":1}}],[\"一\",{\"1\":{\"886\":1,\"1674\":1,\"1718\":1,\"1721\":1}}],[\"一定在步长的范围中\",{\"1\":{\"1347\":1}}],[\"一定会出现多线程的安全问题\",{\"1\":{\"889\":1}}],[\"一定不要擅自修改同事的代码\",{\"1\":{\"753\":1}}],[\"一定要有接口和实现类的存在\",{\"1\":{\"2610\":1}}],[\"一定要配置java\",{\"1\":{\"1741\":1}}],[\"一定要先确认有没有人正在修改\",{\"1\":{\"753\":1}}],[\"一定要先取再放\",{\"1\":{\"346\":1}}],[\"一定要确保自己正在修改的文件是最新版本的\",{\"1\":{\"753\":1}}],[\"一定程度上可以说\",{\"1\":{\"534\":1}}],[\"一共10张票\",{\"1\":{\"471\":1}}],[\"一共3个窗口\",{\"1\":{\"442\":1}}],[\"一次会话内有效\",{\"1\":{\"2923\":1,\"2924\":1}}],[\"一次请求内\",{\"1\":{\"2922\":1}}],[\"一次请求内有效\",{\"1\":{\"1915\":1}}],[\"一次\",{\"1\":{\"2006\":1}}],[\"一次回退一个版本\",{\"1\":{\"741\":1}}],[\"一次性commit\",{\"1\":{\"738\":1}}],[\"一次性提交暂存区的所有修改\",{\"1\":{\"729\":1}}],[\"一次性解决所有问题\",{\"1\":{\"650\":1}}],[\"一次性读取指定char长度\",{\"1\":{\"405\":2}}],[\"一次连接可以多次请求\",{\"1\":{\"164\":1}}],[\"一天中的小时数\",{\"1\":{\"374\":2}}],[\"一些业务逻辑或者功能上不需要的方法也可以省略不写\",{\"1\":{\"2155\":1}}],[\"一些固定标题\",{\"1\":{\"1641\":1}}],[\"一些程序语言\",{\"1\":{\"1374\":2}}],[\"一些\",{\"1\":{\"357\":1}}],[\"一些命令行工具常使用全局安装的方式\",{\"1\":{\"94\":1}}],[\"一把阻塞锁\",{\"1\":{\"330\":1}}],[\"一把锁\",{\"1\":{\"328\":1}}],[\"一端取的基本方法\",{\"1\":{\"357\":1}}],[\"一端是让老元素出去\",{\"1\":{\"321\":1}}],[\"一端是让新元素进去\",{\"1\":{\"321\":1}}],[\"一端称为表头\",{\"1\":{\"226\":1}}],[\"一路next得到想要的元素\",{\"1\":{\"262\":1}}],[\"一个bean类\",{\"0\":{\"2659\":1}}],[\"一个接口和多个实现类bean\",{\"0\":{\"2657\":1}}],[\"一个接口和一个实现类bean\",{\"0\":{\"2656\":1,\"2658\":1}}],[\"一个方法的全部声明信息就是一个方法的签名\",{\"1\":{\"2651\":1}}],[\"一个完整的类名\",{\"1\":{\"2437\":1}}],[\"一个应用的业务流程或者业务规则的改变只需要改动mvc的模型层即可\",{\"1\":{\"2036\":1}}],[\"一个月中的第几周\",{\"1\":{\"2030\":1}}],[\"一个月中的第几个周几\",{\"1\":{\"2030\":1}}],[\"一个月中的第二个星期三\",{\"1\":{\"2030\":1}}],[\"一个自定义标签库就是自定义标签的集合\",{\"1\":{\"1963\":1}}],[\"一个作为类的成员\",{\"1\":{\"1951\":1}}],[\"一个在\",{\"1\":{\"1951\":1}}],[\"一个引擎可以有一个或多个连接器\",{\"1\":{\"1765\":1}}],[\"一个或多个连接器\",{\"1\":{\"1764\":1}}],[\"一个对象从创建\",{\"1\":{\"1728\":1}}],[\"一个对象拥有一个同步队列和等待队列\",{\"1\":{\"475\":1}}],[\"一个vue文件就是一个类\",{\"1\":{\"1704\":1}}],[\"一个就是通过对表达式的判断得出的布尔值得来的\",{\"1\":{\"1621\":1}}],[\"一个特殊的属性style\",{\"1\":{\"1480\":1}}],[\"一个类的原型是一个object类的对象\",{\"1\":{\"1425\":1}}],[\"一个页面上可以用多个script标签\",{\"1\":{\"1380\":1}}],[\"一个页面可以同时引入多个不同的js文件\",{\"1\":{\"1380\":1}}],[\"一个索引同时包括多列\",{\"1\":{\"1129\":1}}],[\"一个索引只包括一个列\",{\"1\":{\"1129\":1}}],[\"一个公司里面的数据库服务器上面可能同时运行着很多个项目的数据库\",{\"1\":{\"1114\":1}}],[\"一个表单一般应该包含用户填写信息的输入框\",{\"1\":{\"1329\":1}}],[\"一个表可以有多个列\",{\"1\":{\"1129\":1}}],[\"一个表可以建立多个外键约束\",{\"1\":{\"1002\":1}}],[\"一个表中只能保存一种数据\",{\"1\":{\"1047\":1}}],[\"一个操作在另一个操作之前执行\",{\"1\":{\"844\":1}}],[\"一个项目的成员们在工作中统一使用git的工作方式\",{\"1\":{\"797\":1}}],[\"一个项目上千人的团队持续开发很多年对于javaee项目来说再正常不过\",{\"1\":{\"653\":1}}],[\"一个账户只能设置一个默认密码\",{\"1\":{\"764\":1}}],[\"一个人一直写不提交\",{\"1\":{\"753\":1}}],[\"一个^代表一个版本数量\",{\"1\":{\"741\":1}}],[\"一个lock可以产生多个condition\",{\"1\":{\"475\":1}}],[\"一个condition包含一个等待队列\",{\"1\":{\"475\":1}}],[\"一个线程还没执行完\",{\"1\":{\"462\":1}}],[\"一个简单的登录demo\",{\"0\":{\"1576\":1,\"1792\":1}}],[\"一个简单的demo\",{\"0\":{\"438\":1,\"445\":1,\"450\":1}}],[\"一个简单的日历小程序\",{\"1\":{\"376\":1}}],[\"一个一个读和写\",{\"1\":{\"409\":1}}],[\"一个字符串off\",{\"1\":{\"407\":1}}],[\"一个字符一个字符读取\",{\"1\":{\"405\":1}}],[\"一个int值\",{\"1\":{\"363\":1}}],[\"一个是流容器\",{\"1\":{\"1594\":1}}],[\"一个是固定容器\",{\"1\":{\"1594\":1}}],[\"一个是出队\",{\"1\":{\"328\":1}}],[\"一个是入队\",{\"1\":{\"328\":1}}],[\"一个是cookie\",{\"1\":{\"161\":1}}],[\"一个开发技巧提示\",{\"1\":{\"279\":1}}],[\"一个<>引起来的\",{\"1\":{\"235\":1}}],[\"一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输\",{\"1\":{\"164\":1}}],[\"一个使用\",{\"1\":{\"61\":1}}],[\"一旦设置了失效时间\",{\"1\":{\"1890\":1}}],[\"一旦创建的线程超过这个值\",{\"1\":{\"1757\":1}}],[\"一旦发现文件被修改\",{\"1\":{\"1750\":1}}],[\"一旦出现问题或者异常\",{\"1\":{\"1109\":1}}],[\"一旦出现误操作\",{\"1\":{\"302\":1}}],[\"一旦提交完后\",{\"1\":{\"729\":1}}],[\"一旦某个类型的class对象已被加载到内存\",{\"1\":{\"570\":1}}],[\"一旦锁住一个方法\",{\"1\":{\"472\":1}}],[\"一旦生成了最终的字符串\",{\"1\":{\"397\":1}}],[\"一旦声明必须初始化\",{\"1\":{\"74\":1}}],[\"一旦执行其中一条catch语句之后\",{\"1\":{\"27\":1}}],[\"一般老项目使用\",{\"1\":{\"2740\":1}}],[\"一般把aspectj和spring框架的aop依赖一起使用\",{\"1\":{\"2627\":1}}],[\"一般把中长期开发模块\",{\"1\":{\"806\":1}}],[\"一般在开发中\",{\"1\":{\"2497\":1}}],[\"一般在过滤器中添加如下代码\",{\"1\":{\"2172\":1}}],[\"一般对系统进行分布式部署\",{\"1\":{\"2482\":1}}],[\"一般可以省略\",{\"1\":{\"2437\":1}}],[\"一般可以使用默认值的属性就可以省略不写\",{\"1\":{\"2155\":1}}],[\"一般请求成功后会调用的函数\",{\"1\":{\"2155\":1}}],[\"一般专门用接收用户端数据\",{\"1\":{\"1927\":1}}],[\"一般我们选择用div来做容器\",{\"1\":{\"1594\":1}}],[\"一般我们在使用集合的时候基本上往集合中存入的都是相同类型的数据\",{\"1\":{\"234\":1}}],[\"一般不用scope\",{\"1\":{\"2552\":1}}],[\"一般不用设置\",{\"1\":{\"1960\":1}}],[\"一般不会使用3\",{\"1\":{\"1542\":1}}],[\"一般不直接输入\",{\"1\":{\"925\":1}}],[\"一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户\",{\"1\":{\"2775\":1}}],[\"一般情况下的生命周期\",{\"0\":{\"2569\":1}}],[\"一般情况下我们只是存放用户登录信息\",{\"1\":{\"1903\":1}}],[\"一般情况下\",{\"1\":{\"1533\":1,\"1534\":1,\"1548\":2,\"2826\":1}}],[\"一般情况下应该是最新的代码\",{\"1\":{\"803\":1}}],[\"一般使用静态定位可以直接省略不写\",{\"1\":{\"1532\":1}}],[\"一般使用共享资源做同步监视器即可\",{\"1\":{\"466\":1}}],[\"一般伪类选择器都使用在超链接上\",{\"1\":{\"1515\":1}}],[\"一般默认提示语\",{\"1\":{\"1333\":1}}],[\"一般高度和宽度只设置一个即可\",{\"1\":{\"1309\":1}}],[\"一般图片的使用\",{\"1\":{\"1177\":1}}],[\"一般用于处理模糊查询的模板\",{\"1\":{\"2457\":1}}],[\"一般用于环回地址\",{\"1\":{\"493\":1}}],[\"一般用utf8\",{\"1\":{\"1156\":1}}],[\"一般来说索引本身也很大\",{\"1\":{\"1125\":1}}],[\"一般分组会跟聚合函数一起使用\",{\"1\":{\"1042\":1}}],[\"一般外键不声明出来\",{\"1\":{\"996\":1}}],[\"一般创建\",{\"0\":{\"955\":1}}],[\"一般存放在\",{\"1\":{\"728\":1}}],[\"一般是一对多关联\",{\"1\":{\"2440\":1}}],[\"一般是将表单设计在一个html\",{\"1\":{\"1329\":1}}],[\"一般是由数据库\",{\"1\":{\"914\":1}}],[\"一般是项目当前目录\",{\"1\":{\"728\":1}}],[\"一般是指\",{\"1\":{\"71\":1}}],[\"一般这个都不需要主动改\",{\"1\":{\"676\":1}}],[\"一般的使用方法\",{\"1\":{\"568\":1}}],[\"一般会在想要获得焦点的标签上加入一个id属性\",{\"1\":{\"1341\":1,\"1342\":1}}],[\"一般会在\",{\"1\":{\"524\":2}}],[\"一般会去衡量一些算法所用的时间\",{\"1\":{\"371\":1}}],[\"一般会将特殊异常放在前面\",{\"1\":{\"27\":1}}],[\"一般为客户端没有访问权限\",{\"1\":{\"192\":1}}],[\"一般化的异常放在后面\",{\"1\":{\"27\":1}}],[\"后置通知\",{\"0\":{\"2643\":1},\"1\":{\"2623\":1,\"2648\":1}}],[\"后置处理器必须通过代码显式地去注册\",{\"1\":{\"2572\":1}}],[\"后端需要在web\",{\"1\":{\"2829\":1}}],[\"后端代码\",{\"1\":{\"2131\":1,\"2132\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1}}],[\"后端开发人员就不需要修改代码\",{\"1\":{\"1946\":1}}],[\"后端不关心或很少关心前端元素的输出情况\",{\"1\":{\"1940\":1}}],[\"后端只需要负责按照约定的数据格式向前端提供可调用的api服务即可\",{\"1\":{\"1938\":1}}],[\"后端工程师就是我们\",{\"1\":{\"1937\":1}}],[\"后由oracle负责维护\",{\"1\":{\"1732\":1}}],[\"后写方法会覆盖先写的方法\",{\"1\":{\"1647\":1}}],[\"后缀\",{\"1\":{\"2765\":2}}],[\"后缀名为\",{\"1\":{\"1548\":1}}],[\"后缀补全\",{\"0\":{\"622\":1}}],[\"后代选择器$\",{\"1\":{\"1548\":1}}],[\"后代选择器\",{\"1\":{\"1513\":1,\"1548\":1}}],[\"后一个节点\",{\"1\":{\"1485\":1}}],[\"后声明的会覆盖之前声明的同名变量\",{\"1\":{\"1352\":1}}],[\"后台获取参数时\",{\"1\":{\"2170\":1}}],[\"后台自动根据这个函数名处理js脚本\",{\"1\":{\"2170\":1}}],[\"后台代码\",{\"0\":{\"2121\":1},\"1\":{\"2128\":1}}],[\"后台编码也简单\",{\"1\":{\"2119\":1}}],[\"后台不能区分你提交的数据\",{\"1\":{\"1335\":1}}],[\"后台判断信息是否正确\",{\"1\":{\"1237\":1}}],[\"后的内容\",{\"1\":{\"1330\":1}}],[\"后分组\",{\"1\":{\"1148\":1}}],[\"后为国际标准化组织\",{\"1\":{\"930\":1}}],[\"后更名为sql\",{\"1\":{\"930\":1}}],[\"后面放要扫描的包\",{\"1\":{\"2588\":1}}],[\"后面添加p6spy\",{\"1\":{\"2297\":1}}],[\"后面采用mybatis访问数据库的mapper层\",{\"1\":{\"2199\":1}}],[\"后面可以使用json工具类转换\",{\"1\":{\"2126\":1}}],[\"后面第一个兄弟元素\",{\"1\":{\"1548\":1}}],[\"后面所有的兄弟元素\",{\"1\":{\"1548\":2}}],[\"后面的函数名保持一致\",{\"1\":{\"2170\":1}}],[\"后面的项目的前端页面也是基于vue实现\",{\"1\":{\"1943\":1}}],[\"后面的第一个兄弟元素\",{\"1\":{\"1548\":1}}],[\"后面的catch语句就会被忽略了\",{\"1\":{\"27\":1}}],[\"后面\",{\"1\":{\"1292\":1}}],[\"后面跟登录数据的用户名\",{\"1\":{\"925\":1}}],[\"后面跟要访问的数据库服务器的地址\",{\"1\":{\"925\":1}}],[\"后\",{\"1\":{\"759\":1,\"2780\":1}}],[\"后退\",{\"1\":{\"302\":1}}],[\"后进先出\",{\"1\":{\"302\":1}}],[\"后者称之为后置条件\",{\"1\":{\"841\":1}}],[\"后者会替换前者的value\",{\"1\":{\"294\":1}}],[\"后者是前者的一种实现\",{\"1\":{\"70\":1}}],[\"后序遍历\",{\"1\":{\"288\":1}}],[\"后续的语句都不在执行\",{\"1\":{\"2450\":1}}],[\"后续的遍历等操作简单\",{\"1\":{\"235\":1}}],[\"后续可以使用jquery解决\",{\"1\":{\"2116\":1}}],[\"后续代码不再执行\",{\"1\":{\"2063\":1}}],[\"后续代码不执行\",{\"1\":{\"20\":1}}],[\"后续单词首字母大写\",{\"1\":{\"983\":1}}],[\"后续会用到的重要属性\",{\"1\":{\"294\":1}}],[\"后使用泛型来解决\",{\"1\":{\"233\":1}}],[\"多事务方法之间调用\",{\"1\":{\"2724\":1}}],[\"多结果返回\",{\"0\":{\"2673\":1}}],[\"多条\",{\"1\":{\"2438\":1}}],[\"多条件分支标签\",{\"0\":{\"2021\":1}}],[\"多参数的问题\",{\"0\":{\"2826\":1}}],[\"多参数\",{\"0\":{\"2387\":1}}],[\"多参数实体类对象传递\",{\"0\":{\"2358\":1}}],[\"多参数map传递\",{\"0\":{\"2356\":1}}],[\"多次调用以最后一次为准\",{\"1\":{\"2248\":1}}],[\"多次请求servlet并查看控制台输出即可印证上述结论\",{\"1\":{\"1825\":1}}],[\"多次\",{\"1\":{\"1822\":1}}],[\"多媒体文件\",{\"1\":{\"2782\":1}}],[\"多媒体文件等等\",{\"1\":{\"1785\":1}}],[\"多媒体标签\",{\"0\":{\"1308\":1}}],[\"多层嵌套\",{\"0\":{\"1631\":1}}],[\"多数情况样式选择器使用类选择器\",{\"1\":{\"1568\":1}}],[\"多出来的参数相当于没传\",{\"1\":{\"1370\":1}}],[\"多传参数\",{\"1\":{\"1370\":1}}],[\"多对多映射的实现\",{\"1\":{\"2440\":1}}],[\"多对多查询\",{\"0\":{\"2429\":1}}],[\"多对多\",{\"0\":{\"1051\":1}}],[\"多的一方作为从表\",{\"1\":{\"1050\":1}}],[\"多列排序\",{\"0\":{\"1040\":1}}],[\"多级分组计算\",{\"1\":{\"881\":1}}],[\"多级分组的操作\",{\"1\":{\"881\":1}}],[\"多选按钮\",{\"1\":{\"1336\":1}}],[\"多选框\",{\"0\":{\"1336\":1}}],[\"多选\",{\"0\":{\"618\":1},\"1\":{\"1340\":1,\"1350\":1}}],[\"多行文本框\",{\"0\":{\"1341\":1},\"1\":{\"1341\":1}}],[\"多行注释\",{\"1\":{\"937\":3}}],[\"多行操作可以使用shift+↑\",{\"1\":{\"614\":1}}],[\"多行不可以省略\",{\"1\":{\"80\":1}}],[\"多态\",{\"1\":{\"480\":1,\"1403\":1}}],[\"多态的应用\",{\"1\":{\"242\":2}}],[\"多核cpu\",{\"1\":{\"452\":1}}],[\"多了queue的特点\",{\"1\":{\"322\":1}}],[\"多余\",{\"1\":{\"294\":1}}],[\"多用于一个接口多个实现类的情况\",{\"1\":{\"2593\":1}}],[\"多用于指定一些客户端自定义的文件名\",{\"1\":{\"206\":1}}],[\"多用在关联对象或集合中\",{\"1\":{\"2434\":1}}],[\"多用途互联网邮件扩展类型\",{\"1\":{\"206\":1}}],[\"多路复用\",{\"0\":{\"167\":1},\"1\":{\"167\":1}}],[\"多个元素取出的时候\",{\"1\":{\"2464\":1}}],[\"多个引用对象\",{\"0\":{\"2400\":1}}],[\"多个以\",{\"1\":{\"2301\":1}}],[\"多个参数使用逗号分隔\",{\"1\":{\"2816\":1}}],[\"多个参数\",{\"0\":{\"1712\":1}}],[\"多个参数不可以省略\",{\"1\":{\"80\":1}}],[\"多个属性值之间用\",{\"1\":{\"1470\":1}}],[\"多个选项提交的时候\",{\"1\":{\"1336\":1}}],[\"多个键值对之间\",{\"1\":{\"1330\":1}}],[\"多个preparedstatement\",{\"1\":{\"1234\":1}}],[\"多个sql语句\",{\"1\":{\"1233\":1}}],[\"多个用户同时访问同一个数据\",{\"1\":{\"1111\":1}}],[\"多个人同时操作了同一个文件\",{\"1\":{\"753\":1}}],[\"多个maven工程之间相互依赖具有传递性\",{\"1\":{\"693\":1}}],[\"多个调用都会高亮\",{\"1\":{\"671\":1}}],[\"多个模块工程中有的是java工程\",{\"1\":{\"653\":1}}],[\"多个对象之间用\",{\"1\":{\"561\":1}}],[\"多个对象共享10张票\",{\"1\":{\"471\":1}}],[\"多个代码块使用了同一个同步监视器\",{\"1\":{\"468\":2}}],[\"多个线程\",{\"1\":{\"462\":1}}],[\"多个方法用逗号分隔\",{\"1\":{\"107\":1,\"110\":1}}],[\"多表之间的实现步骤\",{\"0\":{\"2440\":1}}],[\"多表查询\",{\"1\":{\"2438\":1}}],[\"多表关联查询\",{\"0\":{\"1053\":1}}],[\"多表关系\",{\"0\":{\"1049\":1}}],[\"多表\",{\"0\":{\"1044\":1,\"3067\":1},\"1\":{\"52\":1}}],[\"多重catch\",{\"0\":{\"27\":1}}],[\"多线程\",{\"0\":{\"40\":1,\"513\":1,\"2964\":1},\"1\":{\"6\":1}}],[\"📌优点\",{\"1\":{\"1380\":1}}],[\"📌缺点\",{\"1\":{\"1375\":1,\"1379\":1}}],[\"📌解构赋值\",{\"1\":{\"75\":1}}],[\"📌cons常量\",{\"1\":{\"74\":1}}],[\"📌\",{\"1\":{\"73\":1}}],[\"📌当然\",{\"1\":{\"26\":1}}],[\"📌在程序的运行过程中\",{\"1\":{\"16\":1}}],[\"将生成的mapper对象放到容器中\",{\"1\":{\"2903\":1,\"2907\":1}}],[\"将单元方法的返回值直接响应给浏览器\",{\"1\":{\"2874\":1}}],[\"将post请求转换为put或者delete请求\",{\"1\":{\"2829\":1,\"2830\":1}}],[\"将代理逻辑\",{\"1\":{\"2627\":1}}],[\"将代码按照功能进行分离\",{\"1\":{\"2533\":1}}],[\"将要发生的地方\",{\"1\":{\"2622\":1}}],[\"将会自动关联依赖\",{\"1\":{\"2614\":1}}],[\"将会被匹配\",{\"1\":{\"1552\":1}}],[\"将配置文件引入到applicationcontext\",{\"0\":{\"2584\":1}}],[\"将配置文件中的格式化器属性改为自己的类logmessageformat=com\",{\"1\":{\"2299\":1}}],[\"将bean的处理器注册进来\",{\"1\":{\"2574\":1}}],[\"将id作为key\",{\"1\":{\"2549\":1}}],[\"将intstream转换成\",{\"1\":{\"889\":1}}],[\"将deptdaoimpl注册到spring容器中\",{\"1\":{\"2542\":1,\"2546\":1}}],[\"将dept中的结果搜索出来\",{\"1\":{\"2435\":1}}],[\"将管理对象称为\",{\"1\":{\"2532\":1}}],[\"将原有的log4j文件及依赖清除后\",{\"1\":{\"2487\":1}}],[\"将返回的对象作为value\",{\"1\":{\"2473\":1}}],[\"将使用java代码拼接sql语句\",{\"1\":{\"2441\":1}}],[\"将覆盖全局延迟设置\",{\"1\":{\"2434\":1}}],[\"将工作在时间上的分配更加均匀\",{\"1\":{\"2434\":1}}],[\"将结果映射到pojo中\",{\"1\":{\"2419\":1}}],[\"将结果返回给客户端\",{\"1\":{\"2101\":1}}],[\"将这个增强的类的对象返回给我们使用\",{\"1\":{\"2380\":1}}],[\"将按照下面的顺序来加载\",{\"1\":{\"2333\":1}}],[\"将包内的映射器接口全部注册为映射器\",{\"0\":{\"2323\":1},\"1\":{\"2323\":1}}],[\"将包装类提前拆箱\",{\"1\":{\"874\":1}}],[\"将年龄为33的用户更改\",{\"1\":{\"2259\":1}}],[\"将对象的创建从代码中剥离出来\",{\"1\":{\"2522\":1}}],[\"将对象序列化\",{\"1\":{\"428\":1}}],[\"将对应数据从数据库中删除\",{\"1\":{\"2231\":1}}],[\"将对应数据中代表是否被删除字段的状态修改为\",{\"1\":{\"2231\":1}}],[\"将接口和\",{\"1\":{\"2196\":1}}],[\"将自动转换为字符串格式\",{\"1\":{\"2140\":1}}],[\"将用户请求放入消息队列\",{\"1\":{\"2104\":1}}],[\"将用户信息放入session域\",{\"1\":{\"2062\":1}}],[\"将用户信息放在httpsession中\",{\"1\":{\"1909\":1}}],[\"将参数封装进入filterconfig并在调用init方法时作为实参传入\",{\"1\":{\"2048\":1}}],[\"将员工对象放入pagecontext\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"将产生的servlet源代码经过编译后\",{\"1\":{\"1931\":1}}],[\"将jsp页面翻译成一个servlet\",{\"1\":{\"1935\":1}}],[\"将jsp转译成servlet的源代码\",{\"1\":{\"1931\":1}}],[\"将jar文件放入项目的lib目录中\",{\"1\":{\"1214\":1}}],[\"将java工程的相关信息封装为对象作为便于操作和管理的模型\",{\"1\":{\"683\":1}}],[\"将java源程序编译为字节码文件\",{\"1\":{\"663\":1}}],[\"将内容按照指定的编码方式做url解码处理\",{\"1\":{\"1889\":1}}],[\"将内容按照指定的编码方式做url编码处理\",{\"1\":{\"1889\":1}}],[\"将内容转换为数字\",{\"1\":{\"1676\":1}}],[\"将web项目部署到tomcat的webapps中\",{\"1\":{\"1780\":1}}],[\"将来还要学习servlet\",{\"1\":{\"1728\":1}}],[\"将被解析成a标签\",{\"1\":{\"1718\":1}}],[\"将直接影响对象本身的值\",{\"1\":{\"1705\":1}}],[\"将常用的\",{\"1\":{\"1541\":1}}],[\"将某个元素固定在浏览器的某个位置上\",{\"1\":{\"1536\":1}}],[\"将所有元素的样式\",{\"1\":{\"1529\":1}}],[\"将他撑起来\",{\"1\":{\"1524\":1}}],[\"将数据直接传递给对应的单元方法使用\",{\"1\":{\"2794\":1}}],[\"将数据存入本地缓存\",{\"1\":{\"2493\":1}}],[\"将数据存储到httpsession对象中\",{\"1\":{\"1898\":1}}],[\"将数据使用者和数据实体相关联\",{\"1\":{\"2199\":1}}],[\"将数据放入请求域\",{\"1\":{\"1976\":1}}],[\"将数据响应给浏览器\",{\"1\":{\"1929\":1}}],[\"将数据分别存放在多张表中\",{\"1\":{\"997\":1}}],[\"将数字的小数部分去掉\",{\"1\":{\"1411\":1}}],[\"将\",{\"1\":{\"1405\":1,\"1931\":1,\"2626\":1}}],[\"将源代码编译成二进制的可执行文件之后才能运行\",{\"1\":{\"1374\":2}}],[\"将false\",{\"1\":{\"1362\":1}}],[\"将链接归还给连接池\",{\"1\":{\"1275\":2}}],[\"将链表的first节点指向为新节点\",{\"1\":{\"263\":1}}],[\"将链表的last节点指向新的创建的对象\",{\"1\":{\"263\":1}}],[\"将链表中的last节点给l\",{\"1\":{\"263\":1}}],[\"将连接对象放回池中\",{\"1\":{\"1272\":1}}],[\"将此连接的自动提交模式设置为给定状态\",{\"1\":{\"1255\":1}}],[\"将此integer的值作为int返回\",{\"1\":{\"363\":1}}],[\"将system\",{\"1\":{\"1283\":1}}],[\"将sql传入进行预编译\",{\"1\":{\"1252\":1}}],[\"将servletconfig对称传递给servlet\",{\"1\":{\"1818\":1}}],[\"将servlet只作为controller控制器负责页面和数据之间的调度\",{\"1\":{\"120\":1}}],[\"将servlet中对html的操作抽离出来\",{\"1\":{\"120\":1}}],[\"将光标从当前位置向下移动一行\",{\"1\":{\"1223\":1,\"1259\":1}}],[\"将你的资料库作为一个数据库\",{\"1\":{\"1195\":1}}],[\"将标题大纲转换成思维导图\",{\"1\":{\"1191\":1}}],[\"将插件的目录解压到plugins中\",{\"1\":{\"1191\":1}}],[\"将目录页连接到具体的知识页面\",{\"1\":{\"1162\":1}}],[\"将目录封装为file类的对象\",{\"1\":{\"390\":1}}],[\"将创建的用户名\",{\"1\":{\"1115\":1}}],[\"将employee\",{\"1\":{\"1068\":1}}],[\"将emp表分别以别名的方式声明employee员工\",{\"1\":{\"1068\":1}}],[\"将e元素放入新数组最后位置\",{\"1\":{\"316\":2}}],[\"将两\",{\"1\":{\"1054\":1}}],[\"将两个队伍合并成为一个队伍\",{\"1\":{\"876\":2}}],[\"将一的一方作为主表\",{\"1\":{\"1050\":1}}],[\"将一个相对路径转化为项目的绝对路径\",{\"1\":{\"1831\":1}}],[\"将一个大任务分割成多个小任务\",{\"1\":{\"888\":1}}],[\"将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署\",{\"1\":{\"666\":1}}],[\"将不符合where条件的行去掉\",{\"1\":{\"1042\":1}}],[\"将从表上匹配记录的列设为null\",{\"1\":{\"1003\":1}}],[\"将采用null或default默认值\",{\"1\":{\"972\":1}}],[\"将虚拟机镜像设置为nat\",{\"1\":{\"928\":1}}],[\"将当前的日期调整到下个月的一号\",{\"1\":{\"900\":1}}],[\"将日期调整到下个月的第一天等操作\",{\"1\":{\"900\":1}}],[\"将日期时间转换为字符串\",{\"1\":{\"897\":1}}],[\"将字符串转换成整型数字\",{\"1\":{\"1408\":1}}],[\"将字符串转换成浮点数\",{\"1\":{\"1408\":1}}],[\"将字符串内容解析称js代码并运行\",{\"1\":{\"1406\":1}}],[\"将字符串s的所有字母转成小写字母\",{\"1\":{\"1089\":1}}],[\"将字符串s的所有字母转成大写字母\",{\"1\":{\"1089\":1}}],[\"将字符串str从第index位置开始\",{\"1\":{\"1088\":1}}],[\"将字符串解析为指定时间类型\",{\"1\":{\"897\":1}}],[\"将字节码文件读入jvm中\",{\"1\":{\"570\":1}}],[\"将arrays结果通过异步添加到新数组\",{\"1\":{\"889\":2}}],[\"将apache\",{\"1\":{\"674\":1}}],[\"将线程不安全容器转换成线程安全容器\",{\"1\":{\"889\":3}}],[\"将初始化结果通过异步添加到新数组arraylist\",{\"1\":{\"889\":2}}],[\"将已有的stream流转换成并行流\",{\"1\":{\"886\":1,\"887\":1}}],[\"将名字转换成大写\",{\"1\":{\"854\":1}}],[\"将暂存区文件提交到本地库\",{\"1\":{\"738\":1}}],[\"将打包的结果部署到远程仓库或将war包部署到服务器上运行\",{\"1\":{\"668\":1}}],[\"将项目拆分成多个工程模块\",{\"0\":{\"653\":1}}],[\"将上面获取到的码值转换成最终的值\",{\"1\":{\"587\":1,\"590\":1}}],[\"将禁用当前线程\",{\"1\":{\"475\":1}}],[\"将子线程设置为主线程的伴随线程\",{\"1\":{\"460\":1}}],[\"将红色代码块全部执行完毕\",{\"1\":{\"438\":1}}],[\"将文件实体读取为file类对象\",{\"1\":{\"400\":1}}],[\"将指定目录封装为file对象\",{\"1\":{\"388\":1}}],[\"将指定文件封装为file对象\",{\"1\":{\"385\":1}}],[\"将指定元素插入此队列\",{\"1\":{\"324\":3}}],[\"将队列中的数据进行排序\",{\"1\":{\"352\":1}}],[\"将count计数\",{\"1\":{\"333\":1}}],[\"将count计数+1\",{\"1\":{\"332\":1}}],[\"将取元素的指针向后位移一个\",{\"1\":{\"333\":1}}],[\"将取出的元素作为方法的返回值\",{\"1\":{\"328\":1}}],[\"将存元素的指针向后位移一个\",{\"1\":{\"332\":1}}],[\"将底层数组先赋值给object\",{\"1\":{\"332\":1,\"333\":1}}],[\"将放入的元素和老数组的每一个元素进行比较\",{\"1\":{\"316\":1}}],[\"将老数组中的元素复制到新数组中\",{\"1\":{\"316\":2}}],[\"将老数组中的东西都重新放入新数组中\",{\"1\":{\"294\":1}}],[\"将普通集合转换成同步类集合\",{\"1\":{\"306\":1}}],[\"将log4j2\",{\"1\":{\"2310\":1}}],[\"将log4j\",{\"1\":{\"2306\":1}}],[\"将last指针指向新增节点\",{\"1\":{\"341\":1}}],[\"将last节点的地址指向新增的节点\",{\"1\":{\"341\":1}}],[\"将list1的内容替换到list上去\",{\"1\":{\"300\":1}}],[\"将l的下一个指向为新的节点\",{\"1\":{\"263\":1}}],[\"将哈希值\",{\"1\":{\"294\":1}}],[\"将新的entry放在table\",{\"1\":{\"294\":1}}],[\"将装填因子0\",{\"1\":{\"294\":1}}],[\"将head指针指向head指针指向的地址的节点\",{\"1\":{\"342\":1}}],[\"将hash\",{\"1\":{\"294\":1}}],[\"将hashmap的引用指向到新的entry数组\",{\"1\":{\"294\":1}}],[\"将html页面只作为view视图负责数据渲染和提交响应\",{\"1\":{\"120\":1}}],[\"将元素封装为一个node具体的对象\",{\"1\":{\"263\":1}}],[\"将最后一个节点变为n\",{\"1\":{\"262\":1}}],[\"将添加的元素封装为一个node对象\",{\"1\":{\"262\":2}}],[\"将另一个集合添加入\",{\"1\":{\"219\":2}}],[\"将视图层文件归并到web\",{\"1\":{\"124\":1}}],[\"将异常类型跟catch后面的类型依次比较\",{\"1\":{\"27\":1}}],[\"将异常信息捕获以后\",{\"1\":{\"21\":1}}],[\"将导致后续代码依旧不再执行\",{\"1\":{\"23\":1}}],[\"在任意请求中都可以获取到同一个session对象\",{\"1\":{\"2923\":1,\"2924\":1}}],[\"在任意的文件目录下\",{\"1\":{\"726\":1}}],[\"在之前javaee的学习中我们使用了gson包来处理\",{\"1\":{\"2875\":1}}],[\"在之前的springmvc\",{\"1\":{\"2777\":1}}],[\"在之前的xml写法中我们手动直接指定对应的实体类\",{\"1\":{\"2588\":1}}],[\"在之前的处理中\",{\"1\":{\"2457\":1}}],[\"在之前的学习中\",{\"1\":{\"302\":1,\"304\":1,\"359\":1,\"2576\":1,\"2619\":1,\"2920\":1}}],[\"在之前的try\",{\"1\":{\"23\":1}}],[\"在三种主流的web服务实现方案中\",{\"1\":{\"2823\":1}}],[\"在注解中\",{\"1\":{\"2809\":1}}],[\"在单元方法上声明httpservletresponse形参\",{\"1\":{\"2862\":1}}],[\"在单元方法上声明形参来接收请求数据时\",{\"1\":{\"2794\":1}}],[\"在单项流的基础上加入\",{\"1\":{\"510\":2}}],[\"在事务环境中运行\",{\"1\":{\"2728\":2}}],[\"在事务操作之前先检查缓存中是否存在目标数据\",{\"1\":{\"2647\":1}}],[\"在类上使用\",{\"1\":{\"2707\":1,\"2760\":1}}],[\"在随后的查询中\",{\"1\":{\"2692\":1}}],[\"在第一个事务中的两次读数据之间\",{\"1\":{\"2691\":1}}],[\"在第一行引入style\",{\"1\":{\"115\":1}}],[\"在批量处理时\",{\"1\":{\"2677\":1}}],[\"在异常通知中\",{\"1\":{\"2653\":1}}],[\"在异步并发处理优于原生ajax\",{\"1\":{\"1720\":1}}],[\"在切点方法之前和之后都进行功能的增强\",{\"1\":{\"2644\":1}}],[\"在切面方法中添加joinpoint参数\",{\"1\":{\"2637\":1}}],[\"在被代理的目标方法最终结束后执行\",{\"1\":{\"2623\":1}}],[\"在被代理的目标方法异常结束后执行\",{\"1\":{\"2623\":1}}],[\"在被代理的目标方法成功结束后执行\",{\"1\":{\"2623\":1}}],[\"在被代理的目标方法前执行\",{\"1\":{\"2623\":1}}],[\"在没有接口的情况下使用cglib动态代理\",{\"1\":{\"2619\":1}}],[\"在没有注解的情况下\",{\"1\":{\"2330\":1}}],[\"在有接口的情况下\",{\"1\":{\"2619\":1}}],[\"在初始化过程之前\",{\"1\":{\"2574\":1}}],[\"在初始化时\",{\"1\":{\"2048\":1}}],[\"在预处理语句\",{\"1\":{\"2507\":1}}],[\"在打包到tomcat中时\",{\"1\":{\"2748\":1}}],[\"在打包后才将resources目录下的文件进行合并\",{\"1\":{\"2505\":1}}],[\"在打开里面输入\",{\"1\":{\"674\":1}}],[\"在查询缓存时锁住对应的key\",{\"1\":{\"2481\":1}}],[\"在查询方法时\",{\"1\":{\"1266\":1}}],[\"在要开启二级缓存的mapper文件中开启缓存\",{\"1\":{\"2478\":1}}],[\"在映射文件的设置双方均使用collection即可\",{\"1\":{\"2440\":1}}],[\"在映射文件的设置双方均使用association即可\",{\"1\":{\"2440\":1}}],[\"在映射文件中可以使用concat\",{\"1\":{\"2407\":1}}],[\"在分布式场景中应用较多\",{\"1\":{\"2408\":1}}],[\"在底层动态为我们生成了这个接口的实现类\",{\"1\":{\"2380\":1}}],[\"在底层会执行到\",{\"1\":{\"288\":1}}],[\"在代理对象中\",{\"1\":{\"2608\":1}}],[\"在代理类中对被代理类进行代码增强\",{\"1\":{\"2604\":1}}],[\"在代理模式开发下\",{\"1\":{\"2375\":1}}],[\"在代码中常简写为regex\",{\"1\":{\"1582\":1}}],[\"在代码块中就是在实例化一个驱动并在驱动中心注册\",{\"1\":{\"1217\":1}}],[\"在代码块之前多点几次ctrl+w可以选中代码块\",{\"1\":{\"612\":1}}],[\"在代码书写上简洁且易读\",{\"1\":{\"75\":1}}],[\"在配置上有所不同\",{\"1\":{\"2305\":1}}],[\"在原来urljdbc\",{\"1\":{\"2297\":1}}],[\"在封装条件的时候我们可以同时有多个条件组合\",{\"1\":{\"2256\":1}}],[\"在组织框架代码时\",{\"1\":{\"2197\":1}}],[\"在用该方法实现跨域请求时\",{\"1\":{\"2171\":1}}],[\"在用户点击鼠标右键打开上下文菜单时触发\",{\"1\":{\"1432\":1}}],[\"在用户对数据进行插入\",{\"1\":{\"981\":1}}],[\"在结构上更为合理\",{\"1\":{\"2162\":1}}],[\"在beforesend中如果返回false可以取消本次ajax请求\",{\"1\":{\"2142\":1}}],[\"在部分情况下\",{\"1\":{\"2104\":1}}],[\"在动态更新页面的情况下\",{\"1\":{\"2102\":1,\"2106\":1}}],[\"在线统计总数+1\",{\"1\":{\"2088\":1}}],[\"在线性表的相邻数据元素之间存在若序偶关系\",{\"1\":{\"226\":1}}],[\"在线性表的定义中\",{\"1\":{\"226\":2}}],[\"在过滤响应\",{\"1\":{\"2047\":2,\"2052\":2}}],[\"在过滤请求\",{\"1\":{\"2047\":2,\"2052\":2}}],[\"在传递参数上应该注意在url后拼接一个jsoncallback=\",{\"1\":{\"2171\":1}}],[\"在传递之后\",{\"1\":{\"1995\":1}}],[\"在传递之前我们可以定义过滤请求的功能\",{\"1\":{\"1995\":1}}],[\"在传统架构模式中\",{\"1\":{\"1939\":1}}],[\"在传统方式操作数据中\",{\"1\":{\"1613\":1}}],[\"在el表达式中的\",{\"1\":{\"1987\":1}}],[\"在el表达式中\",{\"1\":{\"1984\":1}}],[\"在engine中定义的多个虚拟主机的主机名称中至少要有一个跟defaulthost定义的主机名称同名\",{\"1\":{\"1766\":1}}],[\"在获取对象属性值时是通过对象的get方法实现的\",{\"1\":{\"1983\":1}}],[\"在错误提示页上使用\",{\"1\":{\"1971\":1}}],[\"在生成的java代码中\",{\"1\":{\"1962\":1}}],[\"在转账时\",{\"1\":{\"2686\":1,\"2687\":1}}],[\"在转译之后的java文件中\",{\"1\":{\"1983\":1}}],[\"在转换成java代码时使用的编码\",{\"1\":{\"1960\":1}}],[\"在转成红黑树时\",{\"1\":{\"279\":1}}],[\"在课程中讲解此框架\",{\"1\":{\"1943\":1}}],[\"在市场上占有率更高\",{\"1\":{\"1943\":1}}],[\"在重写的destory方法中调用了\",{\"1\":{\"1933\":1}}],[\"在重写的service方法中调用了\",{\"1\":{\"1933\":1}}],[\"在响应中通过cookie写回给客户端浏览器\",{\"1\":{\"1897\":1}}],[\"在响应结果中提供了另一个web资源的url\",{\"1\":{\"1863\":1}}],[\"在目标资源中对响应状态码或者响应头所做的修改都会被忽略\",{\"1\":{\"1859\":1}}],[\"在forword模式下\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"在forward方法调用之后\",{\"1\":{\"1856\":1}}],[\"在forward转发模式下\",{\"1\":{\"1856\":1}}],[\"在请求中只要包含该路径都匹配\",{\"1\":{\"1840\":1}}],[\"在扩展名匹配中只要扩展名相同都会被匹配和路径无关\",{\"1\":{\"1839\":1}}],[\"在<url\",{\"1\":{\"1839\":1}}],[\"在该文件中我们配置了servlet与uri的绑定\",{\"1\":{\"1826\":1}}],[\"在该类型数据库中\",{\"1\":{\"917\":1}}],[\"在genericservlet中包含一个service抽象方法\",{\"1\":{\"1819\":1}}],[\"在genericservlet中进一步的定义了servlet接口的具体实现\",{\"1\":{\"1819\":1}}],[\"在销毁servlet对象之前调用该方法\",{\"1\":{\"1817\":1}}],[\"在后台随机生成一个整数\",{\"1\":{\"1787\":1}}],[\"在后面集合的学习中\",{\"1\":{\"359\":1}}],[\"在afterreturning注解中\",{\"1\":{\"2652\":1}}],[\"在aop\",{\"1\":{\"2648\":1}}],[\"在application\",{\"1\":{\"1777\":1}}],[\"在arraylist中事项抽象方法返回iterator接口\",{\"1\":{\"268\":1}}],[\"在dofilter方法中\",{\"1\":{\"2046\":1}}],[\"在dos进入指定工作空间\",{\"1\":{\"1683\":1}}],[\"在deployment中\",{\"1\":{\"1777\":1}}],[\"在启用此webapps时是否对war格式的归档文件先进行展开\",{\"1\":{\"1767\":1}}],[\"在localhost中添加配置文件\",{\"1\":{\"1747\":1}}],[\"在我们使用sqlsession\",{\"1\":{\"2380\":1}}],[\"在我们没有学习更加多的页面静态化和前后端分离技术之前\",{\"1\":{\"1950\":1}}],[\"在我们自定义的servlet中\",{\"1\":{\"1820\":1}}],[\"在我们各种语言的编程领域中\",{\"1\":{\"1728\":1}}],[\"在我添加元素的过程中\",{\"1\":{\"313\":1}}],[\"在互联网中经过多个站点的跳转\",{\"1\":{\"1717\":1}}],[\"在修改时所有的声明时相互隔离互不影响的\",{\"1\":{\"1705\":1}}],[\"在右边的代码中\",{\"1\":{\"1705\":1}}],[\"在下面区域展示\",{\"1\":{\"1718\":1}}],[\"在下列代码中\",{\"1\":{\"1656\":1}}],[\"在下标3位置上替换插入字符串\",{\"1\":{\"395\":1}}],[\"在下标\",{\"1\":{\"395\":1,\"396\":1}}],[\"在下标为3的位置上插入\",{\"1\":{\"395\":1,\"396\":1}}],[\"在日常开发中\",{\"1\":{\"1656\":1}}],[\"在日常的社会生活中\",{\"1\":{\"321\":1}}],[\"在vue对象代码中\",{\"1\":{\"1718\":1}}],[\"在vue中有对应的事件修饰符\",{\"1\":{\"1663\":1}}],[\"在vue的起步中\",{\"1\":{\"1616\":1}}],[\"在vm初始化时\",{\"1\":{\"364\":1}}],[\"在很多应用场景中需要新增数据后获取到新增数据的主键值\",{\"1\":{\"2408\":1}}],[\"在很多文本编辑器里\",{\"1\":{\"1582\":1}}],[\"在很大程度上减小了数据库的冗余\",{\"1\":{\"1047\":1}}],[\"在html的渲染域中使用路由\",{\"1\":{\"1718\":1}}],[\"在html文件中引入bootstrap中的css样式文件和js文件\",{\"1\":{\"1563\":1,\"1564\":1}}],[\"在httpservletresponse到达客户端之前\",{\"1\":{\"1995\":1}}],[\"在httpservletrequest到达\",{\"1\":{\"1995\":1}}],[\"在httpsession对象生命周期中没有固定的创建时间与销毁时间\",{\"1\":{\"1900\":1}}],[\"在http2\",{\"1\":{\"167\":1,\"169\":1}}],[\"在http1\",{\"1\":{\"167\":1}}],[\"在http\",{\"1\":{\"164\":1,\"166\":1}}],[\"在2018年1月下旬\",{\"1\":{\"1558\":1}}],[\"在进行模糊查询时\",{\"1\":{\"2407\":1}}],[\"在进行相对定位以后\",{\"1\":{\"1533\":1,\"1534\":1}}],[\"在进行真正的构建之前进行一些清理工作\",{\"1\":{\"708\":1}}],[\"在里面定位到你需要修饰的元素\",{\"1\":{\"1471\":1}}],[\"在标签中加入一个style属性\",{\"1\":{\"1470\":1}}],[\"在指定的宽度范围内使用固定的宽度\",{\"1\":{\"1597\":1}}],[\"在指定的毫秒数后调用函数或计算表达式\",{\"1\":{\"1452\":1}}],[\"在指定节点的前面插入新节点\",{\"1\":{\"1486\":1}}],[\"在指定位置使用标签\",{\"0\":{\"700\":1}}],[\"在关闭窗口或标签页之后将会删除这些数据\",{\"1\":{\"1451\":1}}],[\"在上图中\",{\"1\":{\"1447\":1}}],[\"在上面的操作中\",{\"1\":{\"2698\":1}}],[\"在上面的案例中\",{\"1\":{\"2360\":1}}],[\"在上面的双端队列的基础上\",{\"1\":{\"321\":1}}],[\"在上面的底层原理中\",{\"1\":{\"296\":1}}],[\"在上面的开发中\",{\"1\":{\"244\":1}}],[\"在上面的代码中\",{\"1\":{\"16\":1}}],[\"在内存会预先调用构造方法创建一个对象\",{\"1\":{\"1423\":1}}],[\"在内存中会为每个进程分配不同的内存区域\",{\"1\":{\"452\":1}}],[\"在程序中\",{\"1\":{\"1416\":1}}],[\"在程序中无论任何时候都会执行\",{\"1\":{\"23\":1}}],[\"在溢出时返回\",{\"1\":{\"1408\":2}}],[\"在字符串中查找匹配的子串\",{\"1\":{\"1405\":1}}],[\"在网页中执行了某种操作的动作\",{\"1\":{\"1374\":1}}],[\"在网络协议滑动窗口请求应答式交互时\",{\"1\":{\"355\":1}}],[\"在变量赋值时确定变量具体的数据类型\",{\"1\":{\"1352\":1}}],[\"在其他目录中\",{\"0\":{\"1747\":1}}],[\"在其最简单的应用中\",{\"1\":{\"1322\":1}}],[\"在其下一行添加character\",{\"1\":{\"1154\":1}}],[\"在其下一行添加\",{\"1\":{\"1154\":1}}],[\"在页面上\",{\"1\":{\"1868\":1}}],[\"在页面上显示原样效果\",{\"1\":{\"1304\":1}}],[\"在页面过长的时候\",{\"1\":{\"1536\":1}}],[\"在页面布局很规整的时候\",{\"1\":{\"1319\":1}}],[\"在空白页面打开\",{\"1\":{\"1312\":1}}],[\"在自动查找资源方面\",{\"1\":{\"2319\":1}}],[\"在自己的myproject中放入一下静态资源\",{\"1\":{\"1746\":1}}],[\"在自身页面打开\",{\"1\":{\"1312\":1}}],[\"在自定类中继承comparable接口\",{\"1\":{\"287\":1}}],[\"在正在召开的全国两会上\",{\"1\":{\"1301\":9,\"1305\":1}}],[\"在正常的java代码中\",{\"1\":{\"453\":1}}],[\"在它们之间是文档的头部和主体\",{\"1\":{\"1290\":1}}],[\"在合适的地方添加日志\",{\"1\":{\"1286\":1}}],[\"在核心j2ee模式中是这样介绍dao模式的\",{\"1\":{\"1262\":1}}],[\"在核心插件中开启日记选项\",{\"1\":{\"1164\":1}}],[\"在调用\",{\"1\":{\"1256\":1}}],[\"在开发过程是使用框架\",{\"1\":{\"2197\":1}}],[\"在开发期间前后端共同商定好数据接口的交互形式和数据格式\",{\"1\":{\"1942\":1}}],[\"在开发中的应用\",{\"1\":{\"302\":1}}],[\"在开启预编译的同时要同时开启预编译缓存才能带来些许的性能提升\",{\"1\":{\"1251\":1}}],[\"在创建结构时需要注意\",{\"1\":{\"2275\":1}}],[\"在创建preparedstatement\",{\"1\":{\"1250\":1}}],[\"在创建表的同时定义表中的字段信息\",{\"0\":{\"1081\":1}}],[\"在前面学习restful风格时\",{\"1\":{\"2794\":1}}],[\"在前面的例子中默认id就是\",{\"1\":{\"2226\":1}}],[\"在前面的使用中\",{\"1\":{\"885\":1}}],[\"在前面的学习中\",{\"1\":{\"393\":1,\"2336\":1}}],[\"在前置通知方法形参位置声明一个joinpoint类型的参数\",{\"1\":{\"2651\":1}}],[\"在前缀或后缀中引用特殊字符\",{\"1\":{\"2029\":1}}],[\"在前后端分离时代\",{\"1\":{\"1950\":1}}],[\"在前后端分离架构中\",{\"1\":{\"1938\":1}}],[\"在前台输入用户名和密码\",{\"1\":{\"1237\":1}}],[\"在回滚的时候\",{\"1\":{\"1235\":1}}],[\"在特定的地方使用\",{\"1\":{\"1235\":1}}],[\"在特殊的场景下\",{\"1\":{\"304\":1}}],[\"在操作完成后调用\",{\"1\":{\"1233\":1}}],[\"在逻辑上一组不可分割的操作\",{\"1\":{\"1233\":1}}],[\"在支持sql的数据类型方面\",{\"1\":{\"1209\":1}}],[\"在支持新功能方面\",{\"1\":{\"1209\":1}}],[\"在文件上传与下载时需要用到该方法做路径的转换\",{\"1\":{\"1829\":1}}],[\"在文件夹中创建src目录\",{\"1\":{\"114\":1}}],[\"在文档末尾写上\",{\"1\":{\"1183\":1}}],[\"在模板中配置基础的模板位置\",{\"1\":{\"1165\":1}}],[\"在路径之前放上一个forward\",{\"1\":{\"2866\":1}}],[\"在路径\",{\"1\":{\"1154\":1}}],[\"在于普通的sql语句\",{\"1\":{\"1146\":1}}],[\"在不同的类中\",{\"1\":{\"2635\":1}}],[\"在不同的情况下使用不同的condition\",{\"1\":{\"475\":1}}],[\"在不修改原有代码的\",{\"1\":{\"2610\":1}}],[\"在不能编写流程的情况下\",{\"1\":{\"1145\":1}}],[\"在业务表中都有\",{\"1\":{\"1128\":1}}],[\"在数据库的物理事务概念上\",{\"1\":{\"2728\":1}}],[\"在数据库管理系统中\",{\"1\":{\"930\":1}}],[\"在数据之外\",{\"1\":{\"1125\":1}}],[\"在中间表中定义两个字段\",{\"1\":{\"1051\":1}}],[\"在从表中指定一个字段创建外键并指向主表的主键\",{\"1\":{\"1052\":1}}],[\"在从表中指定一个字段作为外键\",{\"1\":{\"1050\":1}}],[\"在从表上建立外键\",{\"1\":{\"1002\":1}}],[\"在插入数据的时候如果没有对约束定义的字段赋值\",{\"1\":{\"1019\":1}}],[\"在可视化工具sqlyog中可能显示空白\",{\"1\":{\"1003\":1}}],[\"在建表后\",{\"0\":{\"1000\":1}}],[\"在遵循三范式的前提下\",{\"1\":{\"997\":1}}],[\"在做插值的操作时\",{\"1\":{\"972\":1}}],[\"在做一个操作\",{\"1\":{\"840\":1,\"843\":1}}],[\"在某一个字段后面添加\",{\"1\":{\"958\":1}}],[\"在东九区显示时\",{\"1\":{\"942\":1}}],[\"在东七区显示时\",{\"1\":{\"942\":1}}],[\"在东八区插入的timestemp数据为2017\",{\"1\":{\"942\":1}}],[\"在criteria对象添加查询条件\",{\"1\":{\"2503\":1}}],[\"在commit\",{\"1\":{\"2478\":1}}],[\"在context组件的docbase属性中会指定idea对web项目编译后的目录out\",{\"1\":{\"1779\":1}}],[\"在catalina\",{\"1\":{\"1779\":1}}],[\"在css中\",{\"1\":{\"1527\":1}}],[\"在cmd命令行连接数据库\",{\"1\":{\"928\":1}}],[\"在class文件中有效\",{\"1\":{\"553\":1}}],[\"在控制面板中删除mysql软件\",{\"1\":{\"928\":1}}],[\"在控制台将异常的效果给我们展示出来\",{\"1\":{\"21\":1}}],[\"在命令行模式下执行net\",{\"1\":{\"928\":1}}],[\"在命令提示符进入该文件夹\",{\"1\":{\"92\":1}}],[\"在命令提示符输入\",{\"1\":{\"90\":1}}],[\"在mybatis全局配置文件中注册\",{\"1\":{\"2509\":1}}],[\"在mybatis中提供了另外一种成为mapper代理\",{\"1\":{\"2371\":1}}],[\"在mybatisplusconfig类中导入\",{\"1\":{\"2288\":1}}],[\"在mybatisplus中集成了分页插件\",{\"1\":{\"2285\":1}}],[\"在mybatisplus中的mapper接口需要继承basemapper\",{\"1\":{\"2191\":1}}],[\"在mybatis\",{\"1\":{\"2214\":1,\"2230\":1}}],[\"在mysql数据文件夹中有mysql的配置文件\",{\"1\":{\"923\":1}}],[\"在meta\",{\"1\":{\"2092\":1}}],[\"在mvc模式中\",{\"1\":{\"2034\":1}}],[\"在mvc模式下\",{\"1\":{\"1927\":1}}],[\"在maven中使用log4j\",{\"0\":{\"2305\":1}}],[\"在maven环境下特指将打包的结果\",{\"1\":{\"667\":1}}],[\"在main方法中\",{\"1\":{\"387\":1}}],[\"在main方法中是以当前项目为参照物\",{\"1\":{\"386\":1,\"389\":1}}],[\"在map中的value\",{\"1\":{\"292\":1}}],[\"在同一个地方不能多次使用同一个注解\",{\"1\":{\"904\":1}}],[\"在同步代码块中不能改变同步监视器对象的引用\",{\"1\":{\"466\":1}}],[\"在多线程使用时可能会出现时间不准确以及报错的情况\",{\"1\":{\"891\":1}}],[\"在多线程的情况下\",{\"1\":{\"891\":1}}],[\"在多线程的处理下\",{\"1\":{\"889\":1}}],[\"在旧版本中jdk对于日期时间的这块设计是非常差的\",{\"1\":{\"891\":1}}],[\"在实体类的字段上加上\",{\"0\":{\"2289\":1}}],[\"在实例化时会使用servlet接口类型作为引用类型的定义\",{\"1\":{\"1826\":1}}],[\"在实现类中是不能被重写的\",{\"1\":{\"821\":1}}],[\"在实际开发中也使用该方式\",{\"1\":{\"2371\":1}}],[\"在实际开发中我们常常使用的是外部样式\",{\"1\":{\"1473\":1}}],[\"在实际项目中整合第三方框架\",{\"1\":{\"660\":1}}],[\"在实际生产环境中\",{\"1\":{\"654\":1}}],[\"在安装lokkit\",{\"1\":{\"810\":1}}],[\"在安排catch语句的顺序的时候\",{\"1\":{\"27\":1}}],[\"在和远程库交互过程中也有可能发生冲突\",{\"1\":{\"783\":1}}],[\"在使用delete和put请求时\",{\"1\":{\"2829\":1}}],[\"在使用mapper设置返回值类型时\",{\"1\":{\"2335\":1}}],[\"在使用mybatis\",{\"1\":{\"2223\":1}}],[\"在使用上更加的灵活\",{\"1\":{\"2214\":1}}],[\"在使用扩展名匹配时在<url\",{\"1\":{\"1839\":1}}],[\"在使用之前需要安装jdk及配置java\",{\"1\":{\"1740\":1}}],[\"在使用的过程中\",{\"1\":{\"1705\":1}}],[\"在使用jquery实现效果之前\",{\"1\":{\"1543\":1}}],[\"在使用复合键时可以设置多个字段列名\",{\"1\":{\"994\":1}}],[\"在使用复合主键时可以设置多个字段列名\",{\"1\":{\"988\":1}}],[\"在使用时可以不用属性名=值的形式\",{\"1\":{\"2809\":1}}],[\"在使用时\",{\"1\":{\"868\":1}}],[\"在使用lambda表达式时\",{\"1\":{\"825\":1}}],[\"在使用版本控制工具开发的过程中\",{\"1\":{\"746\":1}}],[\"在使用线程阻塞的时候\",{\"1\":{\"489\":1}}],[\"在当前日期的基础上加上或者减去指定的时间\",{\"1\":{\"895\":1}}],[\"在当前登录的系统用户路径下\",{\"1\":{\"726\":1}}],[\"在当前文件中查找\",{\"1\":{\"646\":1}}],[\"在unix系统安装\",{\"1\":{\"725\":1}}],[\"在windows10系统中为了安全问题不会显示cookie中的内容\",{\"1\":{\"1890\":1}}],[\"在windows系统安装\",{\"1\":{\"725\":1}}],[\"在www上\",{\"1\":{\"1324\":1}}],[\"在web容器卸载\",{\"1\":{\"2005\":1}}],[\"在web服务器创建和使用及最后销毁filter时\",{\"1\":{\"2000\":1}}],[\"在webapps目录中\",{\"0\":{\"1746\":1}}],[\"在web\",{\"0\":{\"1791\":1,\"2759\":1},\"1\":{\"124\":1,\"1845\":1,\"1960\":1,\"1996\":1,\"2074\":1,\"2763\":1,\"2910\":1}}],[\"在webpack目录下创建配置文件\",{\"1\":{\"114\":1}}],[\"在子类的module修改pom\",{\"1\":{\"714\":1,\"715\":1}}],[\"在仓库中都是按照坐标生成目录结构\",{\"1\":{\"706\":1}}],[\"在资源的文件的种类无限多样化的前提下\",{\"1\":{\"703\":1}}],[\"在person类中新增petslist属性\",{\"1\":{\"2800\":1,\"2801\":1}}],[\"在pom\",{\"0\":{\"699\":1},\"1\":{\"2756\":1}}],[\"在path变量中\",{\"1\":{\"674\":1}}],[\"在本地仓库中\",{\"1\":{\"685\":1}}],[\"在本章节我们将学习java中的io流的操作\",{\"1\":{\"400\":1}}],[\"在ioc容器继承体系中的configurablebeanfactory接口中定义了注册方法\",{\"1\":{\"2572\":1}}],[\"在include转发模式下\",{\"1\":{\"1860\":1}}],[\"在integer中存在一个integercache缓存数组\",{\"1\":{\"364\":1}}],[\"在idea窗口的右下角\",{\"1\":{\"781\":1}}],[\"在idea中默认的并不会把web项目真正的部署到tomcat的webapps目录中\",{\"1\":{\"1779\":1}}],[\"在idea中连接github\",{\"0\":{\"790\":1}}],[\"在idea中的父module中创建子module\",{\"0\":{\"716\":1}}],[\"在idea中配置maven\",{\"0\":{\"676\":1}}],[\"在管理员窗口输入\",{\"1\":{\"674\":1}}],[\"在系统变量里面创建m2\",{\"1\":{\"674\":1}}],[\"在每一次测试后以标准的格式记录和展示测试结果\",{\"1\":{\"665\":1}}],[\"在今天的javaee开发领域\",{\"1\":{\"649\":1}}],[\"在搜索字段中输que\",{\"1\":{\"609\":1}}],[\"在弹出的窗口输入大小写\",{\"1\":{\"605\":1}}],[\"在高亮显示的组件中\",{\"1\":{\"601\":1}}],[\"在运行时\",{\"1\":{\"1966\":1}}],[\"在运行时有效\",{\"1\":{\"553\":1}}],[\"在运行期间\",{\"1\":{\"570\":1}}],[\"在源码中经常看到别人定义的枚举类形态\",{\"1\":{\"561\":1}}],[\"在源码里hashmap实现了map接口\",{\"1\":{\"293\":1}}],[\"在源码里arraylist实现了list接口\",{\"1\":{\"252\":1}}],[\"在源文件中有效\",{\"1\":{\"553\":1}}],[\"在源文件中嵌入一些补充信息\",{\"1\":{\"533\":1}}],[\"在方法的参数中\",{\"1\":{\"2825\":1}}],[\"在方法的声明处\",{\"1\":{\"33\":1}}],[\"在方法上使用\",{\"1\":{\"2707\":1}}],[\"在方法上或者静态常量上按两下alt+\",{\"1\":{\"610\":1}}],[\"在方法前加入\",{\"1\":{\"542\":1}}],[\"在方法体之外\",{\"1\":{\"482\":1}}],[\"在object的监视器模型上\",{\"1\":{\"475\":1}}],[\"在争抢资源的过程中\",{\"1\":{\"462\":1}}],[\"在主表上update\",{\"1\":{\"1003\":2}}],[\"在主线程的基础上\",{\"1\":{\"453\":1}}],[\"在主数组那个位置上没有值\",{\"1\":{\"294\":1}}],[\"在执行前\",{\"1\":{\"2728\":1}}],[\"在执行相关操作的时候会抛出对应的异常\",{\"1\":{\"2223\":1}}],[\"在执行localdate对象的修改时\",{\"1\":{\"895\":1}}],[\"在执行\",{\"1\":{\"840\":1,\"843\":1}}],[\"在执行程序\",{\"1\":{\"570\":1}}],[\"在执行多线程之前\",{\"1\":{\"438\":1}}],[\"在执行阻塞操作时我们会先获取锁\",{\"1\":{\"334\":1}}],[\"在此之前我们回顾一下mybatis的相关使用知识\",{\"1\":{\"2907\":1}}],[\"在此之前我们先熟悉两个基本的概念\",{\"1\":{\"400\":1}}],[\"在此处指定root用户的密码\",{\"1\":{\"922\":1}}],[\"在此基础上\",{\"1\":{\"357\":1}}],[\"在队列满的情况下\",{\"1\":{\"337\":2}}],[\"在判断是否阻塞时采用了while不断的查询状态\",{\"1\":{\"334\":1}}],[\"在对应的位置取出元素\",{\"1\":{\"328\":1,\"333\":1}}],[\"在对应的下标位置放入元素\",{\"1\":{\"328\":1,\"332\":1}}],[\"在计算机网络架构中\",{\"1\":{\"321\":1}}],[\"在这里用它不是为了厉害的功能代码\",{\"1\":{\"2124\":1}}],[\"在这里我们可以对项目的访问名进行修改\",{\"1\":{\"1777\":1}}],[\"在这里也体现出set和list的本质区别\",{\"1\":{\"318\":1}}],[\"在这个事务还没有结束时\",{\"1\":{\"2691\":1}}],[\"在这个方法中\",{\"1\":{\"2005\":1}}],[\"在这个应用程序中\",{\"1\":{\"1262\":1}}],[\"在这个基础上又多了阻塞的特点\",{\"1\":{\"322\":1}}],[\"在这个基础上\",{\"1\":{\"322\":1}}],[\"在这个目录下你可以看见\",{\"1\":{\"90\":1}}],[\"在添加数据的时候\",{\"1\":{\"313\":1,\"1015\":1}}],[\"在新数组中重新计算位置\",{\"1\":{\"295\":1}}],[\"在1\",{\"1\":{\"295\":1}}],[\"在存放数据时\",{\"1\":{\"294\":1}}],[\"在需要局部变量\",{\"1\":{\"279\":1}}],[\"在jstl中\",{\"1\":{\"2012\":1}}],[\"在jsp文件经过转译之后\",{\"1\":{\"1966\":1}}],[\"在jsp中的注释格式为<\",{\"1\":{\"1952\":1}}],[\"在jsp上可以通过<\",{\"1\":{\"1951\":1}}],[\"在js中自定义对象有三种可用的语法格式\",{\"1\":{\"1418\":1}}],[\"在jquery中\",{\"1\":{\"1572\":1}}],[\"在jdbc中\",{\"1\":{\"1233\":2}}],[\"在jdbc连接添加上参数allowpublickeyretrieval=true即可\",{\"1\":{\"1216\":1}}],[\"在jdk8\",{\"1\":{\"904\":1}}],[\"在jdk8中提供了两个工具类\",{\"1\":{\"899\":1}}],[\"在jdk8中给我提供了instant类\",{\"1\":{\"898\":1}}],[\"在jdk8中我们可以通过\",{\"1\":{\"897\":1}}],[\"在jdk中提供了大量常用的函数式接口\",{\"1\":{\"835\":1}}],[\"在jdk1\",{\"1\":{\"27\":1,\"235\":1,\"255\":1,\"295\":4,\"447\":1,\"814\":2,\"816\":1}}],[\"在junit的测试方法中\",{\"1\":{\"387\":1}}],[\"在junit中是以当前模块为参照物的相对路径位置\",{\"1\":{\"386\":1,\"389\":1}}],[\"在java代码上大量拼接html字符串是非常繁琐耗时的一件事\",{\"1\":{\"1928\":1}}],[\"在java代码中通过字符串形式响应数据\",{\"1\":{\"1927\":1}}],[\"在javascript中\",{\"1\":{\"1355\":1}}],[\"在javase中\",{\"1\":{\"534\":1}}],[\"在java\",{\"1\":{\"891\":1}}],[\"在java中\",{\"1\":{\"558\":1}}],[\"在java中对文件或目录的操作\",{\"1\":{\"384\":1}}],[\"在javaee平台共包含了13个技术规范\",{\"1\":{\"1732\":1}}],[\"在javaee开发的历史上构建工具的发展也经历了一系列的演化和变迁\",{\"1\":{\"656\":1}}],[\"在javaee\",{\"1\":{\"534\":1}}],[\"在java8中\",{\"1\":{\"279\":1,\"280\":1}}],[\"在编译后产生字节码文件的时候\",{\"1\":{\"570\":1}}],[\"在编译时期就可以检查出来\",{\"1\":{\"235\":1}}],[\"在编译时期就会对类型进行检查\",{\"1\":{\"234\":1}}],[\"在编写代码时\",{\"1\":{\"29\":1}}],[\"在一处声明切入点表达式之后\",{\"1\":{\"2635\":1}}],[\"在一次会话内\",{\"1\":{\"1904\":1}}],[\"在一些特殊情况下\",{\"1\":{\"860\":1}}],[\"在一定时间范围内是不会关闭\",{\"1\":{\"177\":1}}],[\"在一个jsonp请求中重写回调函数的名字\",{\"1\":{\"2150\":1}}],[\"在一个web应用中\",{\"1\":{\"2046\":1}}],[\"在一个页面上可以同时引入多个js文件\",{\"1\":{\"1380\":1}}],[\"在一个事务中涉及到了多个数据库服务器\",{\"1\":{\"1209\":1}}],[\"在一个线程中一次执行\",{\"1\":{\"885\":1}}],[\"在一个tcp连接上可以传送多个http请求和响应\",{\"1\":{\"164\":1}}],[\"在一个文件里面定义的变量\",{\"1\":{\"101\":1}}],[\"在浏览器中存储\",{\"1\":{\"1451\":2}}],[\"在浏览器中输入\",{\"1\":{\"88\":1}}],[\"在浏览器兼容的情况下也可以使用prefetch\",{\"1\":{\"169\":1}}],[\"在客户端\",{\"1\":{\"167\":1,\"1450\":1}}],[\"在服务器不需要先前信息时它的应答就较快\",{\"1\":{\"161\":1}}],[\"在tomcat中使用的是iso\",{\"1\":{\"1801\":1}}],[\"在tomcat中连接器类型通常有4种\",{\"1\":{\"1765\":1}}],[\"在tomcat的webapps中创建一个目录\",{\"1\":{\"1780\":1}}],[\"在tomcat的webapps中创建一个我们自己的项目目录\",{\"1\":{\"1746\":1}}],[\"在tomcat处于运行状态时放置于appbase目录中的应用程序文件是否自动进行deploy\",{\"1\":{\"1767\":1}}],[\"在t\",{\"1\":{\"972\":1}}],[\"在thymeleaf环境下\",{\"1\":{\"142\":1}}],[\"在try中遇到return\",{\"1\":{\"23\":1}}],[\"在springmvc中\",{\"1\":{\"2926\":1}}],[\"在springmvc中如果对于当前的控制单元\",{\"1\":{\"2859\":1}}],[\"在springmvc中对于这些静态文件的管理也是需要我们注意的地方\",{\"1\":{\"2782\":1}}],[\"在springmvc\",{\"1\":{\"2779\":1}}],[\"在springmvc配置文件中\",{\"1\":{\"2761\":1}}],[\"在spring的事务中存在多个属性\",{\"1\":{\"2713\":1}}],[\"在sqlmapconfig\",{\"1\":{\"2434\":1,\"2478\":1}}],[\"在sql中就很难实现针对不同条件进行不同的处理以及循环等功能\",{\"1\":{\"1145\":1}}],[\"在settings配置中可以指定log框架\",{\"1\":{\"2315\":1}}],[\"在service方法中通过request\",{\"1\":{\"1826\":1}}],[\"在servlet4\",{\"1\":{\"1889\":2}}],[\"在servlet中我们是不推荐定义一些成员变量的\",{\"1\":{\"1951\":1}}],[\"在servlet中我们一般不要轻易使用成员变量\",{\"1\":{\"1824\":1}}],[\"在servlet中提供了cookie对象与httpsession对象用于维护客户端与服务端的会话状态的维持\",{\"1\":{\"1882\":1}}],[\"在servlet中新建一个基类\",{\"1\":{\"124\":1}}],[\"在servlet3\",{\"0\":{\"545\":1},\"1\":{\"1848\":1}}],[\"在stream流中使用包装类integer时\",{\"1\":{\"874\":1}}],[\"在string中重新了这个方法\",{\"1\":{\"272\":1}}],[\"在src中配置style\",{\"1\":{\"115\":1}}],[\"在\",{\"0\":{\"773\":1},\"1\":{\"71\":1,\"265\":1,\"266\":1,\"288\":1,\"382\":2,\"553\":1,\"676\":1,\"725\":3,\"1082\":1,\"1155\":1,\"1165\":1,\"1292\":1,\"1372\":1,\"1820\":1,\"2178\":1,\"2289\":1,\"2316\":1,\"2625\":1,\"2718\":1,\"2780\":1,\"2825\":1}}],[\"gaoqi\",{\"1\":{\"2559\":1}}],[\"gainsboro\",{\"1\":{\"1596\":2}}],[\"gson\",{\"1\":{\"2128\":3,\"2166\":3,\"2176\":1}}],[\"gsonbuilder\",{\"1\":{\"2128\":4,\"2166\":2}}],[\"gson工具类中已经给我们封装好了json格式和java对象之间转换的api\",{\"1\":{\"2127\":1}}],[\"gson工具类的使用\",{\"0\":{\"2127\":1},\"1\":{\"2875\":1}}],[\"gui\",{\"1\":{\"1759\":4}}],[\"gui和状态页面\",{\"1\":{\"1759\":1}}],[\"gui角色\",{\"1\":{\"1759\":1}}],[\"go\",{\"1\":{\"1463\":2}}],[\"good\",{\"1\":{\"1185\":1,\"1406\":1}}],[\"gp=0\",{\"1\":{\"1309\":1}}],[\"gpg\",{\"1\":{\"763\":1}}],[\"gz\",{\"1\":{\"772\":1}}],[\"gzip\",{\"1\":{\"177\":1,\"208\":2}}],[\"green\",{\"1\":{\"1496\":1,\"1509\":1,\"1515\":1,\"1533\":1,\"1534\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":2,\"1579\":4,\"1586\":4,\"1590\":1,\"1606\":1,\"1927\":1,\"1928\":1,\"1976\":1,\"2025\":1,\"2031\":1}}],[\"greenyellow\",{\"1\":{\"1433\":1,\"1512\":1,\"1544\":1,\"1545\":1}}],[\"greater\",{\"1\":{\"1552\":1}}],[\"great\",{\"1\":{\"1185\":1}}],[\"gregoriancalendar\",{\"1\":{\"375\":16,\"376\":1}}],[\"grape\",{\"1\":{\"1395\":2,\"1396\":2,\"1397\":2}}],[\"graph\",{\"1\":{\"142\":1}}],[\"grade\",{\"1\":{\"988\":1,\"994\":1,\"1211\":6}}],[\"grants\",{\"1\":{\"1118\":1}}],[\"grant\",{\"1\":{\"935\":1,\"1116\":4,\"1155\":2}}],[\"group\",{\"0\":{\"1042\":1},\"1\":{\"1042\":1,\"1072\":3}}],[\"groupingisused属性用来指定是否使用数字分组\",{\"1\":{\"2029\":1}}],[\"groupingused\",{\"1\":{\"2029\":2}}],[\"groupingby\",{\"1\":{\"881\":4}}],[\"groupid\",{\"1\":{\"685\":1}}],[\"groupid>\",{\"1\":{\"680\":2,\"683\":5,\"685\":1,\"688\":1,\"697\":1,\"700\":3,\"714\":5,\"715\":4,\"2186\":11,\"2267\":5,\"2292\":2,\"2296\":1,\"2307\":1,\"2311\":1,\"2374\":6,\"2484\":2,\"2500\":5,\"2538\":2,\"2582\":2,\"2614\":1,\"2629\":7,\"2665\":11,\"2748\":3,\"2756\":14,\"2875\":1,\"2885\":1,\"2889\":3,\"2890\":5,\"2891\":6,\"2892\":2,\"2893\":2,\"2894\":2}}],[\"groups\",{\"1\":{\"675\":1}}],[\"gmt+0800\",{\"1\":{\"1416\":4}}],[\"gmt\",{\"1\":{\"371\":2,\"374\":1,\"1415\":1}}],[\"gc\",{\"1\":{\"338\":1}}],[\"gg\",{\"1\":{\"300\":1}}],[\"gt\",{\"0\":{\"2239\":1},\"1\":{\"1301\":1,\"1551\":1,\"1552\":2,\"1988\":1,\"2025\":1,\"2031\":1,\"2253\":1,\"2356\":1,\"2358\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2394\":1,\"2398\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2560\":3}}],[\"gt2\",{\"1\":{\"238\":4}}],[\"gt1\",{\"1\":{\"238\":5}}],[\"girl\",{\"1\":{\"1917\":1,\"1921\":1,\"1925\":1}}],[\"gif\",{\"1\":{\"208\":2,\"1806\":1}}],[\"gitignore\",{\"1\":{\"1686\":1}}],[\"github相关配置文件\",{\"1\":{\"1686\":1}}],[\"github网站\",{\"1\":{\"1611\":1}}],[\"github\",{\"1\":{\"1191\":1,\"1611\":1}}],[\"github远程库常用操作\",{\"0\":{\"754\":1},\"1\":{\"46\":1}}],[\"gitlab服务操作\",{\"0\":{\"811\":1}}],[\"gitlab\",{\"1\":{\"808\":2,\"809\":4,\"810\":5,\"811\":3}}],[\"gitlab私服\",{\"0\":{\"807\":1}}],[\"gitflow工作流通过为功能开发\",{\"1\":{\"797\":1}}],[\"gitconfig文件中引用忽略规则文件\",{\"0\":{\"773\":1}}],[\"gitconfig文件引用\",{\"1\":{\"772\":1}}],[\"gitconfig隐含文件\",{\"1\":{\"726\":1}}],[\"git无法替我们决定使用哪一个\",{\"1\":{\"751\":1}}],[\"git使用\",{\"1\":{\"750\":1}}],[\"git隐藏文件夹\",{\"1\":{\"732\":1}}],[\"git自动为我们创建了唯一一个master分支\",{\"1\":{\"729\":1}}],[\"git为我们自动创建的第一个分支master\",{\"1\":{\"728\":1}}],[\"git目录\",{\"1\":{\"728\":1,\"732\":1}}],[\"git是分布式版本控制系统\",{\"1\":{\"726\":1}}],[\"git是目前世界上最先进的分布式版本控制系统\",{\"1\":{\"721\":1}}],[\"git工作流\",{\"0\":{\"797\":1}}],[\"git工作流与私服\",{\"0\":{\"796\":1,\"3054\":1},\"1\":{\"46\":1}}],[\"git工作目录下的文件状态信息\",{\"1\":{\"734\":1}}],[\"git工作机制\",{\"0\":{\"722\":1}}],[\"git本地库实战\",{\"0\":{\"730\":1,\"3051\":1},\"1\":{\"46\":1}}],[\"git\",{\"0\":{\"46\":1,\"772\":1,\"2970\":1,\"3050\":1,\"3052\":1,\"3053\":1},\"1\":{\"7\":1,\"723\":1,\"725\":1,\"726\":4,\"728\":2,\"729\":6,\"731\":8,\"732\":2,\"734\":1,\"736\":2,\"737\":2,\"738\":3,\"739\":1,\"741\":2,\"742\":1,\"743\":2,\"744\":1,\"748\":4,\"750\":4,\"763\":1,\"773\":1}}],[\"gb\",{\"1\":{\"2166\":3}}],[\"gbk\",{\"1\":{\"1156\":3,\"1755\":1,\"1814\":1}}],[\"gbk等\",{\"1\":{\"177\":1}}],[\"gb2312\",{\"1\":{\"177\":1}}],[\"ge\",{\"0\":{\"2239\":1},\"1\":{\"2022\":5,\"2023\":4,\"2239\":1,\"2255\":1,\"2256\":2}}],[\"geronimo\",{\"1\":{\"1736\":1}}],[\"gender=on\",{\"1\":{\"1335\":1}}],[\"gender\",{\"1\":{\"564\":2,\"1335\":2,\"1419\":2,\"1421\":3,\"1424\":2,\"1425\":2,\"1831\":4,\"1917\":4,\"1921\":4,\"1925\":2,\"2128\":1,\"2796\":3}}],[\"generatorconfiguration>\",{\"1\":{\"2501\":1}}],[\"generatorconfiguration\",{\"1\":{\"2501\":1}}],[\"generatorconfig\",{\"1\":{\"2501\":1}}],[\"generator\",{\"1\":{\"2500\":2,\"2501\":2}}],[\"generator<\",{\"1\":{\"2292\":1,\"2500\":2}}],[\"general\",{\"1\":{\"374\":1,\"1154\":1,\"1156\":4}}],[\"genericservlet是实现了servlet接口的抽象类\",{\"1\":{\"1819\":1}}],[\"genericservlet抽象类\",{\"0\":{\"1819\":1}}],[\"generictest<integer>\",{\"1\":{\"239\":1}}],[\"generictest<>\",{\"1\":{\"238\":1}}],[\"generictest<string>\",{\"1\":{\"238\":1}}],[\"generictest<e>\",{\"1\":{\"238\":1,\"239\":1,\"240\":2}}],[\"generictest\",{\"1\":{\"238\":2}}],[\"generictest进行实例化\",{\"1\":{\"238\":1}}],[\"gecko\",{\"1\":{\"177\":1}}],[\"get乱码\",{\"0\":{\"2803\":1}}],[\"getjson方法是可以实现跨域请求的\",{\"1\":{\"2171\":1}}],[\"getjson是以get方式提交数据\",{\"1\":{\"2163\":1}}],[\"getjson\",{\"0\":{\"2162\":1},\"1\":{\"2163\":1,\"2166\":1,\"2171\":1}}],[\"getjob\",{\"1\":{\"1976\":1,\"2674\":2}}],[\"getid\",{\"1\":{\"1898\":1,\"2493\":1}}],[\"getinitparameternames\",{\"1\":{\"1829\":1,\"1831\":1,\"1833\":1,\"2048\":1,\"2049\":1,\"2052\":1}}],[\"getinitparameter\",{\"1\":{\"1829\":1,\"1831\":3,\"1833\":1,\"1834\":4,\"2048\":1,\"2049\":2,\"2052\":2,\"2057\":1}}],[\"getint\",{\"1\":{\"1222\":1,\"1223\":2,\"1227\":1,\"1242\":2,\"1252\":2,\"1253\":1,\"1259\":2,\"1976\":3}}],[\"getinterfaces\",{\"1\":{\"593\":1,\"594\":3,\"2609\":1}}],[\"getinetaddress\",{\"1\":{\"513\":1}}],[\"getinputstream\",{\"1\":{\"509\":1,\"510\":2,\"511\":2,\"512\":2,\"513\":2}}],[\"getinstance\",{\"1\":{\"375\":1}}],[\"getwriter\",{\"1\":{\"1790\":1,\"1794\":1,\"1808\":1,\"1856\":2,\"1860\":3,\"1893\":1,\"1927\":1,\"1997\":2,\"1998\":1,\"2001\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1}}],[\"getwaitqueuelength\",{\"1\":{\"478\":1}}],[\"get函数是指即将发起一个get请求\",{\"1\":{\"1721\":1}}],[\"getutcseconds\",{\"1\":{\"1415\":1}}],[\"getutcmonth\",{\"1\":{\"1415\":1}}],[\"getutcminutes\",{\"1\":{\"1415\":1}}],[\"getutcmilliseconds\",{\"1\":{\"1415\":1}}],[\"getutchours\",{\"1\":{\"1415\":1}}],[\"getutcfullyear\",{\"1\":{\"1415\":1}}],[\"getutcday\",{\"1\":{\"1415\":1}}],[\"getutcdate\",{\"1\":{\"1415\":1}}],[\"getusername\",{\"1\":{\"356\":3,\"1241\":1,\"2061\":1}}],[\"getuserid\",{\"1\":{\"356\":3}}],[\"getusersum\",{\"1\":{\"356\":2}}],[\"get方法\",{\"1\":{\"2218\":1}}],[\"get方法都删掉不写了\",{\"1\":{\"561\":1}}],[\"get方式下\",{\"1\":{\"2155\":1}}],[\"get方式\",{\"1\":{\"1330\":1}}],[\"getrestful\",{\"1\":{\"2825\":2,\"2830\":1}}],[\"getresource\",{\"1\":{\"2493\":1}}],[\"getresourceasstream\",{\"1\":{\"1279\":1,\"2282\":1,\"2374\":1}}],[\"getrequestheader\",{\"1\":{\"2851\":2}}],[\"getrequestdispatcher\",{\"1\":{\"1856\":5,\"1860\":5,\"1874\":3,\"1910\":1,\"1917\":1,\"1972\":1,\"1976\":1,\"2749\":1,\"2760\":1,\"2863\":2,\"2864\":1}}],[\"getrequesturi\",{\"1\":{\"1799\":2,\"2063\":1}}],[\"getrequesturl\",{\"1\":{\"1799\":2,\"2087\":1}}],[\"getrealpath\",{\"1\":{\"1829\":1,\"1831\":1}}],[\"getremotehost\",{\"1\":{\"2087\":1}}],[\"getremoteport\",{\"1\":{\"1799\":1}}],[\"getremoteaddr\",{\"1\":{\"1799\":2}}],[\"getreturntype\",{\"1\":{\"590\":1,\"591\":2}}],[\"getfullyear\",{\"1\":{\"1415\":2,\"1416\":1,\"1417\":1}}],[\"getfloat\",{\"1\":{\"1223\":2,\"1259\":2}}],[\"getfiltername\",{\"1\":{\"2048\":1}}],[\"getfield\",{\"1\":{\"587\":1,\"588\":3}}],[\"getfields\",{\"1\":{\"587\":2,\"588\":2}}],[\"getfirstview\",{\"1\":{\"2760\":1,\"2764\":1,\"2811\":1}}],[\"getfirst\",{\"1\":{\"260\":2}}],[\"getting\",{\"1\":{\"1561\":1}}],[\"gettimezoneoffset\",{\"1\":{\"1415\":1}}],[\"gettime\",{\"1\":{\"370\":1,\"371\":2,\"372\":1,\"828\":2,\"1415\":1}}],[\"gettotal\",{\"1\":{\"825\":1,\"826\":3,\"2286\":2}}],[\"gettype\",{\"1\":{\"587\":2,\"588\":2}}],[\"getoutputstream\",{\"1\":{\"509\":1,\"510\":2,\"511\":2,\"512\":2,\"513\":2}}],[\"getobject\",{\"1\":{\"1266\":1,\"1275\":1,\"2493\":1}}],[\"getobj\",{\"1\":{\"262\":2}}],[\"getbookmap\",{\"1\":{\"2566\":1}}],[\"getbooklist2\",{\"1\":{\"2566\":1,\"2567\":1}}],[\"getbooklist\",{\"1\":{\"2566\":1}}],[\"getbookset\",{\"1\":{\"2566\":1}}],[\"getbooks\",{\"1\":{\"2566\":1}}],[\"getbean方法\",{\"0\":{\"2550\":1},\"1\":{\"2570\":1,\"2573\":1}}],[\"getbean\",{\"1\":{\"2543\":1,\"2546\":1,\"2550\":2,\"2553\":2,\"2554\":4,\"2555\":3,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2566\":1,\"2567\":1,\"2571\":1,\"2574\":1,\"2579\":1,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2602\":1,\"2649\":1,\"2672\":1,\"2673\":1,\"2674\":1,\"2678\":1,\"2679\":1,\"2680\":1,\"2697\":1}}],[\"getbytes\",{\"1\":{\"515\":1,\"516\":2,\"517\":2,\"518\":2,\"1814\":1}}],[\"getbyname\",{\"1\":{\"502\":1,\"503\":5,\"515\":1,\"516\":2,\"517\":2,\"518\":2}}],[\"getbrand\",{\"1\":{\"489\":1,\"490\":1}}],[\"getqueuelength\",{\"1\":{\"478\":1}}],[\"getpetsmap\",{\"1\":{\"2801\":1}}],[\"getpetslist\",{\"1\":{\"2800\":1}}],[\"getpwd\",{\"1\":{\"511\":2,\"512\":2,\"513\":2}}],[\"getport\",{\"1\":{\"505\":1,\"506\":1}}],[\"getproperty\",{\"1\":{\"1279\":1}}],[\"getproperties\",{\"1\":{\"1279\":1,\"1280\":6,\"1288\":6}}],[\"getproduct\",{\"1\":{\"489\":2,\"490\":2}}],[\"getpre\",{\"1\":{\"262\":1}}],[\"getpages\",{\"1\":{\"2286\":2}}],[\"getpassword\",{\"1\":{\"1241\":1,\"2061\":1}}],[\"getpackage\",{\"1\":{\"593\":1,\"594\":3}}],[\"getparambyargname\",{\"1\":{\"2794\":3}}],[\"getparambyrequest\",{\"1\":{\"2793\":3}}],[\"getparametermap\",{\"1\":{\"1801\":2}}],[\"getparameternames\",{\"1\":{\"1801\":1}}],[\"getparametervalues\",{\"1\":{\"1801\":1}}],[\"getparameter\",{\"1\":{\"1794\":2,\"1801\":1,\"1856\":2,\"1860\":2,\"1864\":2,\"1909\":2,\"1917\":2,\"1921\":2,\"1927\":2,\"1928\":2,\"2056\":2,\"2062\":2,\"2095\":2,\"2115\":1,\"2131\":1,\"2159\":2,\"2166\":2,\"2170\":2,\"2171\":2,\"2176\":1,\"2793\":3}}],[\"getparametertypes\",{\"1\":{\"590\":1,\"591\":2}}],[\"getparameters\",{\"1\":{\"590\":1,\"591\":2}}],[\"getparent\",{\"1\":{\"386\":2,\"387\":1,\"389\":2,\"390\":1}}],[\"getpath\",{\"1\":{\"386\":2,\"387\":3,\"389\":2,\"390\":1}}],[\"getdouble\",{\"1\":{\"1976\":2}}],[\"getdname\",{\"1\":{\"1226\":1,\"1264\":2,\"1267\":1,\"2678\":1,\"2679\":1,\"2680\":1}}],[\"getdeclaringtypename\",{\"1\":{\"2651\":2}}],[\"getdeclaredmethod\",{\"1\":{\"590\":1,\"591\":3,\"904\":1}}],[\"getdeclaredmethods\",{\"1\":{\"590\":1,\"591\":2}}],[\"getdeclaredfield\",{\"1\":{\"587\":1,\"588\":2}}],[\"getdeclaredfields\",{\"1\":{\"587\":2,\"588\":2,\"1266\":1,\"1275\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"584\":1,\"585\":2}}],[\"getdeclaredconstructors\",{\"1\":{\"584\":1,\"585\":3}}],[\"getdeptslist\",{\"1\":{\"1227\":2}}],[\"getdeptno\",{\"1\":{\"1226\":1,\"1264\":3,\"1267\":3,\"1976\":1,\"2674\":2,\"2679\":1,\"2680\":1}}],[\"getdelay\",{\"1\":{\"356\":1}}],[\"getdateformat\",{\"1\":{\"2798\":3}}],[\"getdate\",{\"1\":{\"1415\":1,\"1416\":1,\"1417\":1,\"1976\":1}}],[\"getdatabymap\",{\"1\":{\"2801\":3}}],[\"getdatabylist\",{\"1\":{\"2800\":3}}],[\"getdatabypojo\",{\"1\":{\"2796\":3}}],[\"getdata\",{\"1\":{\"515\":1,\"516\":2,\"517\":2,\"518\":2,\"2120\":2}}],[\"getday\",{\"1\":{\"1415\":1}}],[\"getdays\",{\"1\":{\"899\":1}}],[\"getdayofyear\",{\"1\":{\"379\":1}}],[\"getdayofweek\",{\"1\":{\"379\":1,\"893\":4}}],[\"getdayofmonth\",{\"1\":{\"379\":1,\"893\":2}}],[\"getmgr\",{\"1\":{\"1976\":1,\"2674\":2}}],[\"getmapper\",{\"1\":{\"2379\":2,\"2380\":1,\"2386\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":1,\"2444\":2,\"2447\":2,\"2450\":3,\"2453\":1,\"2456\":1,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2475\":2,\"2479\":2,\"2488\":2,\"2503\":1}}],[\"getmajorversion\",{\"1\":{\"1829\":1,\"1831\":1}}],[\"getmaxinactiveinterval\",{\"1\":{\"1898\":1}}],[\"getmax\",{\"1\":{\"825\":2,\"826\":4}}],[\"getminorversion\",{\"1\":{\"1829\":1,\"1831\":1}}],[\"getminutes\",{\"1\":{\"1415\":1,\"1416\":1,\"1417\":1,\"1458\":1,\"1459\":1}}],[\"getminute\",{\"1\":{\"379\":1,\"893\":2}}],[\"getmilliseconds\",{\"1\":{\"1415\":1,\"1416\":1,\"1417\":1}}],[\"getmodel\",{\"1\":{\"2931\":1}}],[\"getmodifiers\",{\"1\":{\"587\":2,\"588\":2,\"590\":2,\"591\":2,\"2651\":2}}],[\"getmoney\",{\"1\":{\"1241\":1}}],[\"getmonths\",{\"1\":{\"899\":1}}],[\"getmonthvalue\",{\"1\":{\"379\":1}}],[\"getmonth\",{\"1\":{\"371\":1,\"379\":1,\"893\":4,\"1415\":1,\"1416\":1,\"1417\":2}}],[\"getmethods\",{\"1\":{\"590\":1,\"591\":2}}],[\"getmethod\",{\"1\":{\"568\":1,\"590\":1,\"591\":5,\"1799\":1,\"1826\":1}}],[\"getmessage\",{\"1\":{\"21\":1,\"2642\":1,\"2653\":1}}],[\"getyears\",{\"1\":{\"899\":1}}],[\"getyear\",{\"1\":{\"371\":1,\"379\":1,\"893\":2,\"1415\":1,\"1416\":1}}],[\"getempname\",{\"1\":{\"2714\":1,\"2715\":1,\"2716\":1,\"2717\":1}}],[\"getempno\",{\"1\":{\"1976\":1,\"2674\":1}}],[\"getename\",{\"1\":{\"1976\":1,\"2674\":2}}],[\"getendtime\",{\"1\":{\"356\":2}}],[\"getelementsbyname\",{\"0\":{\"1491\":1},\"1\":{\"1491\":1}}],[\"getelementsbytagname\",{\"0\":{\"1490\":1},\"1\":{\"1490\":1,\"1544\":1,\"1613\":1}}],[\"getelementsbyclassname\",{\"0\":{\"1489\":1},\"1\":{\"1489\":1}}],[\"getelementbyid\",{\"0\":{\"1488\":1},\"1\":{\"65\":1,\"1442\":1,\"1458\":1,\"1488\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":2,\"1500\":2,\"1501\":1,\"1505\":1,\"1572\":1,\"1573\":1,\"1613\":2,\"1730\":4,\"2114\":3}}],[\"getexceptiontypes\",{\"1\":{\"590\":1,\"591\":2}}],[\"gethiredate\",{\"1\":{\"1976\":1,\"2674\":2}}],[\"gethostaddress\",{\"1\":{\"502\":1,\"503\":1,\"506\":1}}],[\"gethostname\",{\"1\":{\"502\":1,\"503\":1,\"505\":1,\"506\":2}}],[\"gethours\",{\"1\":{\"1415\":1,\"1416\":1,\"1417\":1,\"1458\":1,\"1459\":1}}],[\"gethour\",{\"1\":{\"379\":1,\"893\":2}}],[\"getholdcount\",{\"1\":{\"328\":2}}],[\"getheadernames\",{\"1\":{\"1800\":2,\"1801\":1}}],[\"getheader\",{\"1\":{\"1800\":3,\"1801\":2}}],[\"getheight\",{\"1\":{\"274\":3,\"275\":1}}],[\"gethello2\",{\"1\":{\"78\":2}}],[\"gethello1\",{\"1\":{\"78\":2}}],[\"getvalue\",{\"1\":{\"292\":2,\"337\":1,\"893\":4,\"1801\":1,\"1892\":1,\"1893\":1,\"2077\":3,\"2351\":1}}],[\"getkey\",{\"1\":{\"292\":2,\"1801\":1,\"2351\":1}}],[\"getalluser\",{\"1\":{\"2926\":1,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"getargs\",{\"1\":{\"2651\":2}}],[\"getarray\",{\"1\":{\"316\":3}}],[\"getaccount\",{\"1\":{\"1242\":2,\"1252\":2}}],[\"getactualminimum\",{\"1\":{\"375\":1}}],[\"getactualmaximum\",{\"1\":{\"375\":1,\"376\":1}}],[\"getaid\",{\"1\":{\"1241\":1}}],[\"getavailablezoneids\",{\"1\":{\"901\":1}}],[\"getannotationsbytype\",{\"1\":{\"904\":2}}],[\"getannotations\",{\"1\":{\"590\":1,\"591\":2,\"593\":1,\"594\":2}}],[\"getaddress\",{\"1\":{\"505\":1,\"506\":1}}],[\"getabsolutepath\",{\"1\":{\"386\":2,\"387\":3,\"389\":2,\"390\":2}}],[\"getage\",{\"1\":{\"274\":3,\"275\":3,\"287\":3,\"352\":1,\"428\":1,\"827\":1,\"873\":2,\"880\":7,\"881\":2,\"882\":1}}],[\"getattributenames\",{\"1\":{\"1898\":1}}],[\"getattribute\",{\"0\":{\"1494\":1},\"1\":{\"140\":1,\"1494\":3,\"1829\":1,\"1831\":2,\"1898\":4,\"1910\":1,\"1917\":3,\"1921\":3,\"1925\":3,\"1972\":8,\"1976\":1,\"2017\":1,\"2025\":1,\"2031\":1,\"2063\":1,\"2077\":1,\"2088\":2,\"2096\":2}}],[\"getnullableresult\",{\"1\":{\"2509\":3}}],[\"getnano\",{\"1\":{\"893\":2,\"898\":3}}],[\"getnameforoptional\",{\"1\":{\"854\":3}}],[\"getname\",{\"1\":{\"76\":2,\"140\":2,\"274\":3,\"275\":1,\"287\":3,\"348\":3,\"349\":3,\"352\":1,\"386\":2,\"387\":1,\"389\":2,\"390\":2,\"428\":1,\"439\":2,\"440\":2,\"441\":2,\"442\":1,\"445\":1,\"446\":1,\"456\":1,\"457\":2,\"458\":1,\"465\":1,\"471\":1,\"480\":1,\"489\":1,\"490\":1,\"511\":2,\"512\":2,\"513\":4,\"561\":1,\"587\":4,\"588\":3,\"590\":1,\"591\":2,\"594\":2,\"827\":2,\"854\":5,\"881\":2,\"883\":3,\"1266\":1,\"1275\":1,\"1286\":1,\"1814\":1,\"1892\":2,\"1893\":1,\"1972\":4,\"2077\":3,\"2605\":2,\"2609\":1,\"2615\":1,\"2651\":1,\"2652\":1}}],[\"getnext\",{\"1\":{\"262\":2}}],[\"getsignature\",{\"1\":{\"2651\":2,\"2652\":1}}],[\"getsize\",{\"1\":{\"262\":2,\"2286\":2}}],[\"getstatementtype\",{\"1\":{\"2493\":1}}],[\"getstring\",{\"1\":{\"1222\":2,\"1223\":2,\"1227\":2,\"1242\":2,\"1252\":2,\"1253\":2,\"1259\":1,\"1976\":2,\"2509\":1}}],[\"getsal\",{\"1\":{\"1976\":2,\"2674\":2}}],[\"getsavedproperty\",{\"1\":{\"364\":1}}],[\"getscheme\",{\"1\":{\"1799\":1}}],[\"gets\",{\"1\":{\"836\":1}}],[\"getsuperclass\",{\"1\":{\"561\":1,\"593\":1,\"594\":2}}],[\"getserverinfo\",{\"1\":{\"1829\":1,\"1831\":1}}],[\"getservletrequest\",{\"1\":{\"2076\":2,\"2077\":3,\"2087\":1}}],[\"getservletinfo\",{\"1\":{\"545\":1,\"546\":1,\"1817\":1}}],[\"getservletconfig\",{\"1\":{\"545\":1,\"546\":1,\"1817\":1,\"1834\":2}}],[\"getservletcontext\",{\"1\":{\"132\":1,\"1831\":3,\"1878\":1,\"1925\":2,\"1972\":1,\"2048\":1,\"2088\":2,\"2926\":1}}],[\"getselection\",{\"1\":{\"1452\":1}}],[\"getseasondesc\",{\"1\":{\"560\":1,\"561\":1}}],[\"getseasonname\",{\"1\":{\"560\":2,\"561\":1}}],[\"getseconds\",{\"1\":{\"1415\":1,\"1416\":1,\"1417\":1,\"1458\":1,\"1459\":1}}],[\"getsecond\",{\"1\":{\"379\":1,\"893\":2}}],[\"getsession\",{\"1\":{\"134\":1,\"1897\":5,\"1898\":1,\"1909\":1,\"1910\":1,\"1921\":2,\"1972\":1,\"2062\":1,\"2063\":1,\"2088\":3,\"2095\":1,\"2096\":1,\"2097\":2}}],[\"getlogin\",{\"1\":{\"2916\":2,\"2917\":3,\"2918\":2}}],[\"getlogger\",{\"1\":{\"1286\":1,\"1288\":1}}],[\"getlocalcachescope\",{\"1\":{\"2493\":1}}],[\"getlocalname\",{\"1\":{\"1799\":1}}],[\"getlocalport\",{\"1\":{\"1799\":2}}],[\"getlocaladdr\",{\"1\":{\"1799\":2}}],[\"getloc\",{\"1\":{\"1226\":1,\"1264\":2,\"1267\":1,\"2678\":1,\"2679\":1,\"2680\":1}}],[\"getlastaccessedtime\",{\"1\":{\"1898\":1}}],[\"getlast\",{\"1\":{\"260\":2,\"1235\":1}}],[\"getlist\",{\"1\":{\"106\":1,\"107\":2,\"109\":1,\"110\":1}}],[\"get参数通过url传递\",{\"1\":{\"188\":1}}],[\"get比post更不安全\",{\"1\":{\"188\":1}}],[\"get产生的url地址可以被bookmark\",{\"1\":{\"188\":1}}],[\"get在浏览器回退时是无害的\",{\"1\":{\"188\":1}}],[\"get和post的区别\",{\"0\":{\"188\":1}}],[\"get请求中将附加在url后\",{\"1\":{\"2140\":1}}],[\"get请求中会将请求中传递的数据包含在url中并在浏览器的地址栏中显示\",{\"1\":{\"180\":1}}],[\"get请求乱码\",{\"0\":{\"1812\":1},\"1\":{\"2803\":1}}],[\"get请求在url中传送的参数是有长度限制的\",{\"1\":{\"188\":1}}],[\"get请求参数会被完整保留在浏览器历史记录里\",{\"1\":{\"188\":1}}],[\"get请求只能进行url编码\",{\"1\":{\"188\":1}}],[\"get请求会被浏览器主动cache\",{\"1\":{\"188\":1}}],[\"get请求可以被浏览器缓存\",{\"1\":{\"180\":1}}],[\"get请求传递数据时要求数据必须是ascii字符\",{\"1\":{\"180\":1}}],[\"getcurrent\",{\"1\":{\"2286\":2}}],[\"getcreationtime\",{\"1\":{\"1898\":1}}],[\"getcookie\",{\"1\":{\"2856\":2}}],[\"getcookies\",{\"1\":{\"1888\":1,\"1892\":1,\"1893\":1}}],[\"getcomm\",{\"1\":{\"1976\":1,\"2674\":2}}],[\"getcomputedstyle\",{\"1\":{\"1452\":1}}],[\"getconnection\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":4,\"1256\":4,\"1264\":2,\"1266\":2,\"1271\":1,\"1274\":2,\"1275\":2,\"1280\":2,\"1288\":2,\"1976\":1}}],[\"getconstructor\",{\"1\":{\"584\":1,\"585\":4}}],[\"getconstructors只能获取当前运行时类的被public修饰的构造器\",{\"1\":{\"585\":1}}],[\"getconstructors\",{\"1\":{\"584\":1,\"585\":2}}],[\"getcontextpath\",{\"1\":{\"140\":1,\"1799\":1,\"1829\":1,\"1831\":1,\"1878\":1,\"1909\":2,\"2864\":1,\"2870\":1,\"2873\":1}}],[\"getclassloader\",{\"1\":{\"575\":1,\"580\":1,\"2609\":1}}],[\"getclass\",{\"1\":{\"140\":1,\"281\":2,\"575\":1,\"577\":1,\"581\":2,\"1267\":1,\"1279\":1,\"2609\":2}}],[\"get\",{\"0\":{\"180\":1,\"837\":1,\"2160\":1},\"1\":{\"65\":1,\"176\":2,\"245\":1,\"251\":4,\"260\":1,\"262\":2,\"263\":1,\"291\":1,\"292\":4,\"375\":4,\"376\":2,\"449\":1,\"450\":2,\"828\":2,\"829\":2,\"836\":1,\"837\":1,\"853\":6,\"867\":2,\"871\":2,\"872\":2,\"873\":1,\"880\":3,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1439\":1,\"1555\":1,\"1573\":3,\"1579\":1,\"1586\":1,\"1681\":2,\"1721\":1,\"1793\":1,\"1907\":1,\"1972\":2,\"2112\":1,\"2114\":1,\"2120\":1,\"2128\":1,\"2131\":2,\"2132\":2,\"2155\":2,\"2157\":1,\"2160\":1,\"2161\":2,\"2162\":1,\"2166\":1,\"2169\":2,\"2170\":2,\"2172\":1,\"2176\":1,\"2214\":1,\"2550\":1,\"2817\":1,\"2820\":1,\"2827\":1,\"2830\":4,\"2877\":1}}],[\"globalconfig\",{\"1\":{\"2293\":1}}],[\"global\",{\"0\":{\"2148\":1},\"1\":{\"97\":1,\"726\":3,\"731\":2,\"2225\":1,\"2229\":1,\"2235\":3,\"2334\":1,\"2552\":1}}],[\"g\",{\"1\":{\"94\":1,\"95\":2,\"112\":1,\"374\":1,\"1406\":4,\"1682\":3,\"1698\":4,\"1975\":1,\"1976\":1,\"2030\":1}}],[\"你需要知道的\",{\"1\":{\"2911\":1}}],[\"你需要知道的知识点\",{\"1\":{\"2910\":1}}],[\"你需要知道\",{\"1\":{\"2911\":1}}],[\"你可能需要知道\",{\"1\":{\"2912\":1}}],[\"你可能需要了解\",{\"1\":{\"2906\":1}}],[\"你可能需要回顾\",{\"1\":{\"2900\":1,\"2908\":1}}],[\"你可以为占位符指定一个默认值\",{\"1\":{\"2334\":1}}],[\"你可以通过将\",{\"1\":{\"2317\":1}}],[\"你可以关闭浏览器了\",{\"1\":{\"2104\":1}}],[\"你可以在该分支上任意修改\",{\"1\":{\"757\":1}}],[\"你可以使用相对于类路径的资源引用\",{\"1\":{\"2319\":1}}],[\"你可以使用\",{\"1\":{\"536\":1}}],[\"你可以现在就用\",{\"1\":{\"96\":1}}],[\"你读取过的数据\",{\"1\":{\"2692\":1}}],[\"你既可以在典型的\",{\"1\":{\"2332\":1}}],[\"你是否有很多问号<\",{\"1\":{\"1549\":1}}],[\"你非常好\",{\"1\":{\"1369\":1}}],[\"你很好\",{\"1\":{\"1369\":1}}],[\"你喜欢的城市\",{\"1\":{\"1340\":1}}],[\"你喜欢的语言\",{\"1\":{\"1336\":1}}],[\"你不好<\",{\"1\":{\"1303\":1}}],[\"你不懂得像php\",{\"1\":{\"84\":1}}],[\"你就知道<\",{\"1\":{\"1293\":1,\"1331\":1}}],[\"你还会人为的\",{\"1\":{\"651\":1}}],[\"你如何得知他需要哪些jar包的支持呢\",{\"1\":{\"651\":1}}],[\"你知道你所使用的所有jar包的依赖关系吗\",{\"1\":{\"651\":1}}],[\"你只需要在你的项目中以坐标的方式依赖一个jar包\",{\"1\":{\"650\":1}}],[\"你也是\",{\"1\":{\"516\":1,\"517\":1}}],[\"你好我也好\",{\"1\":{\"1493\":1}}],[\"你好呀\",{\"1\":{\"1454\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1}}],[\"你好\",{\"1\":{\"509\":1,\"510\":1,\"1293\":1,\"1355\":1,\"1369\":1,\"1379\":1,\"1570\":1,\"1646\":1,\"1660\":1}}],[\"你好java\",{\"1\":{\"408\":1}}],[\"你\",{\"1\":{\"395\":1}}],[\"你用的时候肯定要评估使用场景的\",{\"1\":{\"313\":1}}],[\"你的程序出现异常\",{\"1\":{\"27\":1}}],[\"你的代码有问题\",{\"1\":{\"21\":1}}],[\"你录入的数据不是int类型的数据\",{\"1\":{\"27\":1}}],[\"你录入的不是int类型的数据\",{\"1\":{\"17\":2}}],[\"第1次和第2次读出来的记录数不一样\",{\"1\":{\"2692\":1}}],[\"第五步\",{\"1\":{\"2571\":2}}],[\"第五章\",{\"0\":{\"713\":1}}],[\"第偶数的元素\",{\"1\":{\"1552\":1}}],[\"第六章\",{\"0\":{\"717\":1}}],[\"第四步\",{\"1\":{\"2571\":2,\"2574\":1}}],[\"第四季度\",{\"1\":{\"65\":1}}],[\"第四种处理\",{\"1\":{\"21\":2}}],[\"第三步\",{\"1\":{\"2509\":1,\"2571\":2}}],[\"第三种创建语法\",{\"1\":{\"1385\":1}}],[\"第三种语法\",{\"0\":{\"1421\":1},\"1\":{\"1369\":1}}],[\"第三种处理\",{\"1\":{\"21\":2}}],[\"第三个部分就是内容了\",{\"1\":{\"1182\":1}}],[\"第三个选项\",{\"1\":{\"725\":1}}],[\"第三范式需要确保数据表中的每一列数据都和主键直接相关\",{\"1\":{\"1048\":1}}],[\"第三范式\",{\"0\":{\"1048\":1}}],[\"第三方动态代理\",{\"1\":{\"2607\":1}}],[\"第三方账号登录\",{\"1\":{\"759\":1}}],[\"第三方框架或工具的jar包\",{\"1\":{\"706\":1}}],[\"第三方jar包获取\",{\"0\":{\"650\":1}}],[\"第三方jar包添加\",{\"0\":{\"649\":1}}],[\"第三章\",{\"0\":{\"673\":1}}],[\"第三次按住ctrl+w可以选择整个字符串和引号\",{\"1\":{\"612\":1}}],[\"第三代\",{\"1\":{\"378\":1}}],[\"第三组\",{\"1\":{\"292\":1}}],[\"第三部分是request\",{\"1\":{\"174\":1}}],[\"第三季度\",{\"1\":{\"65\":1}}],[\"第二次使用的是缓存\",{\"1\":{\"2475\":1}}],[\"第二次访问时返回\",{\"1\":{\"1893\":2}}],[\"第二次请求\",{\"1\":{\"1884\":1,\"1894\":1}}],[\"第二种\",{\"0\":{\"1780\":1},\"1\":{\"1384\":1}}],[\"第二种语法\",{\"0\":{\"1420\":1},\"1\":{\"1369\":1}}],[\"第二种处理\",{\"1\":{\"21\":2}}],[\"第二版\",{\"1\":{\"1306\":1}}],[\"第二范式需要确保数据库表中的每一列都和主键相关\",{\"1\":{\"1047\":1}}],[\"第二范式在第一范式的基础之上更进一层\",{\"1\":{\"1047\":1}}],[\"第二范式\",{\"0\":{\"1047\":1}}],[\"第二个sqlsession执行相同sql语句查询时就直接从二级缓存中获取了\",{\"1\":{\"2478\":1}}],[\"第二个页面\",{\"1\":{\"2159\":1}}],[\"第二个部分是表示列的对齐方式\",{\"1\":{\"1182\":1}}],[\"第二个队伍筛选之后不要前两个人\",{\"1\":{\"876\":2}}],[\"第二个队伍只要姓张的成员\",{\"1\":{\"876\":2}}],[\"第二个选项\",{\"1\":{\"725\":2}}],[\"第二个线程也再次获取cpu\",{\"1\":{\"467\":1}}],[\"第二个线程也进入阻塞状态\",{\"1\":{\"467\":1}}],[\"第二个线程获取了cpu\",{\"1\":{\"467\":1}}],[\"第二步\",{\"1\":{\"714\":1,\"715\":1,\"729\":1,\"1072\":1,\"1106\":1,\"2509\":1,\"2571\":2,\"2652\":1,\"2653\":1}}],[\"第二章\",{\"0\":{\"655\":1}}],[\"第二代api\",{\"1\":{\"378\":1}}],[\"第二组\",{\"1\":{\"292\":1}}],[\"第二部分叫request\",{\"1\":{\"174\":1}}],[\"第二季度\",{\"1\":{\"65\":1}}],[\"第一请求时\",{\"1\":{\"1884\":1,\"1894\":1}}],[\"第一种语法\",{\"0\":{\"1419\":1}}],[\"第一种语法格式\",{\"1\":{\"1369\":1}}],[\"第一种\",{\"0\":{\"1779\":1},\"1\":{\"1383\":1}}],[\"第一种处理\",{\"1\":{\"21\":2}}],[\"第一范式的合理遵循需要根据系统的实际需求来定\",{\"1\":{\"1046\":1}}],[\"第一范式是最基本的范式\",{\"1\":{\"1046\":1}}],[\"第一范式\",{\"0\":{\"1046\":1}}],[\"第一步命令会找到node\",{\"1\":{\"1687\":1}}],[\"第一步\",{\"1\":{\"714\":1,\"715\":1,\"729\":1,\"1072\":1,\"1106\":1,\"2509\":1,\"2571\":2,\"2652\":1,\"2653\":1}}],[\"第一章\",{\"0\":{\"648\":1}}],[\"第一个事务\",{\"1\":{\"2692\":1}}],[\"第一个页面\",{\"1\":{\"2159\":1}}],[\"第一个子节点\",{\"1\":{\"1485\":1}}],[\"第一个部分是表格的标题\",{\"1\":{\"1182\":1}}],[\"第一个队伍筛选之后只要前3人\",{\"1\":{\"876\":2}}],[\"第一个队伍只保留姓名长度为3的成员\",{\"1\":{\"876\":2}}],[\"第一个选项\",{\"1\":{\"725\":2}}],[\"第一个字节在240\",{\"1\":{\"493\":1}}],[\"第一个字节在224\",{\"1\":{\"493\":1}}],[\"第一个字节在192\",{\"1\":{\"493\":1}}],[\"第一个字节在128\",{\"1\":{\"493\":1}}],[\"第一个字节在0\",{\"1\":{\"493\":1}}],[\"第一个线程再次获取cpu\",{\"1\":{\"467\":1}}],[\"第一个线程失去了cpu\",{\"1\":{\"467\":1}}],[\"第一个线程执行过程中\",{\"1\":{\"467\":1}}],[\"第一个线程来到同步代码块\",{\"1\":{\"467\":1}}],[\"第一个元素\",{\"1\":{\"260\":1}}],[\"第一代api\",{\"1\":{\"378\":1}}],[\"第一组\",{\"1\":{\"292\":1}}],[\"第一次放数据\",{\"1\":{\"2088\":1}}],[\"第一次发生请求\",{\"1\":{\"1920\":1}}],[\"第一次请求\",{\"1\":{\"1822\":1}}],[\"第一次安装后以root用户来登录\",{\"1\":{\"925\":1}}],[\"第一次打开项目时\",{\"1\":{\"600\":1}}],[\"第一次创建我们会生成在字符串常量池中\",{\"1\":{\"433\":1}}],[\"第一次添加元素时\",{\"1\":{\"282\":1}}],[\"第一次添加时\",{\"1\":{\"280\":1}}],[\"第一次使用时才会给数组赋值长度为10\",{\"1\":{\"255\":1}}],[\"第一次使用时设置长度为10\",{\"1\":{\"254\":1}}],[\"第一部分叫request\",{\"1\":{\"174\":1}}],[\"第一季度\",{\"1\":{\"65\":1}}],[\"第一阶段\",{\"0\":{\"4\":1,\"2947\":1},\"1\":{\"2\":1}}],[\"注册dispatcherservlet的servlet\",{\"1\":{\"2759\":1}}],[\"注册dept类\",{\"1\":{\"2579\":1}}],[\"注册到容器的id是当前类名的首字母小写\",{\"1\":{\"2587\":1}}],[\"注册自定义类型转换器\",{\"1\":{\"2509\":1}}],[\"注册组件\",{\"0\":{\"1708\":1},\"1\":{\"1708\":1,\"1711\":1,\"1712\":1,\"1713\":1,\"1715\":1}}],[\"注册点击事件\",{\"1\":{\"1613\":2}}],[\"注册\",{\"1\":{\"1579\":1,\"1586\":1,\"2278\":1}}],[\"注册驱动\",{\"1\":{\"1215\":1}}],[\"注入自定义转换器对象\",{\"1\":{\"2799\":1}}],[\"注入事务管理模板transactiontemplate\",{\"1\":{\"2701\":1}}],[\"注入事务管理器datasourcetransactionmanager\",{\"1\":{\"2701\":1}}],[\"注入\",{\"1\":{\"2595\":1}}],[\"注入普通数据类型\",{\"1\":{\"2593\":1}}],[\"注入空值或特殊符号\",{\"1\":{\"2560\":1}}],[\"注入攻击\",{\"1\":{\"2179\":1}}],[\"注入剥离\",{\"1\":{\"2179\":1}}],[\"注入剥离器\",{\"1\":{\"2179\":1}}],[\"注入路由\",{\"1\":{\"1718\":1}}],[\"注入后\",{\"1\":{\"1246\":1}}],[\"注入原理\",{\"0\":{\"1246\":1}}],[\"注释的快捷键是ctrl+shift+\",{\"1\":{\"1293\":1}}],[\"注释内容\",{\"1\":{\"738\":2}}],[\"注释行和代码块\",{\"0\":{\"613\":1}}],[\"注\",{\"1\":{\"311\":1,\"2728\":1}}],[\"注意我们需要新增\",{\"1\":{\"2899\":1}}],[\"注意这个redirect关键字不可以省去\",{\"1\":{\"2867\":1}}],[\"注意选择骨架为\",{\"1\":{\"2744\":1}}],[\"注意选择的是bin的上一层\",{\"1\":{\"1775\":2}}],[\"注意末尾空格也会被当作value的字符\",{\"1\":{\"2332\":1}}],[\"注意mybatis\",{\"1\":{\"2315\":1}}],[\"注意在使用配置文件时分号在xml中需要写成\",{\"1\":{\"2278\":1}}],[\"注意在远程请求时\",{\"1\":{\"2141\":1}}],[\"注意在把元素添加到链表后\",{\"1\":{\"279\":1}}],[\"注意其他http请求方法\",{\"1\":{\"2136\":1}}],[\"注意键名也是可以使用引号包裹的\",{\"1\":{\"2125\":1}}],[\"注意$\",{\"1\":{\"1555\":1}}],[\"注意参数间用\",{\"1\":{\"1216\":1}}],[\"注意块的编号是不能修改的\",{\"1\":{\"1161\":1}}],[\"注意问题\",{\"0\":{\"764\":1}}],[\"注意同步监视器的设置\",{\"1\":{\"487\":1}}],[\"注意点\",{\"0\":{\"487\":1},\"1\":{\"489\":1,\"1026\":1}}],[\"注意是查看不是取出\",{\"1\":{\"354\":1}}],[\"注意事项\",{\"0\":{\"1580\":1,\"1632\":1,\"1647\":1,\"1673\":1,\"1861\":1,\"1865\":1,\"1873\":1,\"1877\":1,\"2375\":1,\"2476\":1,\"2480\":1,\"2762\":1},\"1\":{\"245\":1,\"828\":1,\"972\":1,\"1380\":1,\"2796\":1}}],[\"注意当前路径必须写\",{\"1\":{\"103\":1}}],[\"注意let中的属性命名要和对象中的一致\",{\"1\":{\"75\":1}}],[\"注意子网ip\",{\"1\":{\"48\":1}}],[\"注意\",{\"0\":{\"468\":1,\"472\":1},\"1\":{\"20\":1,\"29\":1,\"79\":1,\"105\":1,\"108\":1,\"115\":2,\"130\":1,\"279\":1,\"313\":1,\"324\":1,\"334\":1,\"346\":1,\"421\":1,\"452\":1,\"460\":1,\"475\":1,\"562\":1,\"726\":1,\"732\":1,\"752\":1,\"773\":1,\"807\":1,\"860\":2,\"895\":1,\"925\":1,\"988\":1,\"994\":1,\"1001\":1,\"1041\":1,\"1069\":1,\"1093\":2,\"1121\":1,\"1122\":1,\"1156\":1,\"1203\":1,\"1230\":1,\"1250\":1,\"1263\":1,\"1266\":1,\"1309\":1,\"1322\":1,\"1335\":1,\"1534\":1,\"1552\":1,\"1617\":1,\"1708\":1,\"1741\":1,\"1826\":1,\"1839\":1,\"2138\":1,\"2163\":1,\"2240\":1,\"2278\":1,\"2285\":1,\"2332\":1,\"2335\":1,\"2351\":1,\"2356\":1,\"2358\":1,\"2374\":2,\"2461\":1,\"2550\":1,\"2630\":1,\"2631\":1,\"2702\":1,\"2748\":1,\"2760\":1,\"2780\":1,\"2793\":1,\"2794\":1,\"2866\":1,\"2867\":1,\"2871\":1,\"2877\":1,\"2926\":1,\"2929\":1}}],[\"注解方式管理\",{\"0\":{\"3172\":1}}],[\"注解方式管理bean\",{\"0\":{\"2585\":1},\"1\":{\"216\":1,\"2900\":1}}],[\"注解方式\",{\"0\":{\"2798\":1}}],[\"注解方式等\",{\"1\":{\"2771\":1}}],[\"注解也可以用在类上\",{\"1\":{\"2764\":1}}],[\"注解中使用\",{\"1\":{\"2718\":1}}],[\"注解在需要事务的地方\",{\"1\":{\"2707\":1}}],[\"注解会根据变量名字查找具体的实例对象\",{\"1\":{\"2595\":1}}],[\"注解模式\",{\"0\":{\"1848\":1}}],[\"注解开始变得非常流行\",{\"1\":{\"904\":1}}],[\"注解并不是创建了接口\",{\"1\":{\"548\":1}}],[\"注解是一种趋势\",{\"1\":{\"534\":1}}],[\"注解的使用\",{\"0\":{\"2052\":1}}],[\"注解的使用目的比较简单\",{\"1\":{\"534\":1}}],[\"注解的属性\",{\"0\":{\"2051\":1}}],[\"注解的重要性\",{\"0\":{\"534\":1}}],[\"注解其实就是代码里的特殊标记\",{\"1\":{\"533\":1}}],[\"注解\",{\"0\":{\"42\":1,\"531\":1,\"535\":1,\"2289\":1,\"2646\":1,\"2966\":1,\"3033\":1},\"1\":{\"6\":1,\"42\":1,\"532\":1,\"581\":1,\"591\":1,\"594\":1,\"2781\":1}}],[\"执行时序图\",{\"0\":{\"2767\":1}}],[\"执行时间\",{\"1\":{\"1591\":1}}],[\"执行当前新建事务完成以后\",{\"1\":{\"2730\":1}}],[\"执行主要业务\",{\"1\":{\"2702\":2}}],[\"执行切点方法\",{\"1\":{\"2644\":1}}],[\"执行目标方法\",{\"1\":{\"2638\":1}}],[\"执行代码\",{\"1\":{\"2605\":1}}],[\"执行构造器\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"执行mbg插件\",{\"0\":{\"2502\":1}}],[\"执行mysql\",{\"1\":{\"925\":1}}],[\"执行生成的逆向工程的版本\",{\"1\":{\"2501\":1}}],[\"执行相同的sql语句\",{\"1\":{\"2479\":1}}],[\"执行分组\",{\"1\":{\"2299\":1,\"2301\":1}}],[\"执行耗时\",{\"1\":{\"2299\":1,\"2301\":1}}],[\"执行语句\",{\"1\":{\"2298\":1,\"2299\":1}}],[\"执行更新时\",{\"1\":{\"2287\":1}}],[\"执行查询方法\",{\"1\":{\"2282\":1,\"2345\":2,\"2348\":1,\"2351\":1,\"2355\":1,\"2357\":1,\"2359\":1}}],[\"执行插入操作\",{\"1\":{\"2226\":1}}],[\"执行了sevice方法\",{\"1\":{\"1997\":2}}],[\"执行流程\",{\"0\":{\"1823\":1,\"1883\":1}}],[\"执行流程与三大组件\",{\"0\":{\"2766\":1,\"3179\":1},\"1\":{\"217\":1,\"2812\":1,\"2901\":1}}],[\"执行服务\",{\"1\":{\"1822\":1,\"1825\":1}}],[\"执行业务操作\",{\"1\":{\"1817\":1}}],[\"执行业务逻辑\",{\"1\":{\"1769\":1}}],[\"执行编译和热更新\",{\"1\":{\"1687\":1}}],[\"执行编译命令\",{\"1\":{\"114\":1}}],[\"执行一个命令或者是一个文件内容\",{\"1\":{\"1687\":1}}],[\"执行一次的定时器任务\",{\"1\":{\"1459\":1}}],[\"执行一次任务\",{\"0\":{\"1459\":1}}],[\"执行器执行执行计划\",{\"1\":{\"1250\":1}}],[\"执行set方法\",{\"1\":{\"2570\":1,\"2573\":1}}],[\"执行select\",{\"1\":{\"2410\":1}}],[\"执行sql查询并获取到resultset对象\",{\"1\":{\"1257\":1}}],[\"执行sql\",{\"1\":{\"1215\":1,\"2281\":1}}],[\"执行start方法\",{\"1\":{\"437\":1,\"438\":1,\"440\":1,\"441\":1}}],[\"执行\",{\"1\":{\"1146\":2}}],[\"执行的真实sql语句\",{\"1\":{\"2299\":1,\"2301\":2}}],[\"执行的sql\",{\"1\":{\"1266\":1,\"1275\":1,\"2423\":1,\"2426\":1,\"2429\":1}}],[\"执行的sql语句都不会真正改变数据库中的数据\",{\"1\":{\"1106\":1}}],[\"执行的方法\",{\"1\":{\"442\":1}}],[\"执行完成后\",{\"1\":{\"922\":1}}],[\"执行结果为\",{\"1\":{\"835\":1}}],[\"执行命令不需要输入任何内容\",{\"1\":{\"763\":1}}],[\"执行命令时需要填写提交日志\",{\"1\":{\"738\":1}}],[\"执行命令初始化\",{\"1\":{\"92\":1}}],[\"执行程序到光标处\",{\"1\":{\"671\":1}}],[\"执行到下次断点\",{\"1\":{\"671\":1}}],[\"执行带参方法\",{\"1\":{\"591\":1}}],[\"执行无参方法\",{\"1\":{\"591\":1}}],[\"执行方法\",{\"1\":{\"568\":1}}],[\"执行测试单元获取结果\",{\"1\":{\"522\":1}}],[\"执行过程\",{\"0\":{\"467\":1}}],[\"执行任务\",{\"1\":{\"458\":1}}],[\"执行不同的线程\",{\"1\":{\"452\":1}}],[\"执行线程\",{\"1\":{\"444\":1,\"449\":1}}],[\"执行putval\",{\"1\":{\"279\":1}}],[\"执行put\",{\"1\":{\"279\":1}}],[\"执行add\",{\"1\":{\"279\":1}}],[\"执行hashset\",{\"1\":{\"279\":1}}],[\"执行后查看bundle\",{\"1\":{\"114\":1}}],[\"执行第一个与异常类型匹配的catch语句\",{\"1\":{\"27\":1}}],[\"执行逻辑\",{\"0\":{\"20\":1,\"25\":1}}],[\"执行catch后面的\",{\"1\":{\"19\":1}}],[\"中占位符名称\",{\"1\":{\"2845\":1}}],[\"中配置转换器\",{\"1\":{\"2799\":1}}],[\"中配置的错误页冲突了\",{\"1\":{\"1960\":1}}],[\"中显示的配置了处理器映射器和处理器适配器就会直接执行不会去找dispatcherservlet\",{\"1\":{\"2777\":1}}],[\"中会包含着一些\",{\"1\":{\"2625\":1}}],[\"中设置一个参数时\",{\"1\":{\"2507\":1}}],[\"中写的使用对象的属性名\",{\"1\":{\"2396\":1}}],[\"中可以随便写\",{\"1\":{\"2385\":1,\"2394\":1,\"2398\":1}}],[\"中可以传入枚举类型\",{\"1\":{\"564\":1}}],[\"中有两种类型的事务管理器\",{\"1\":{\"2316\":1}}],[\"中有一些浏览器直接识别并使用的对象\",{\"1\":{\"1403\":1}}],[\"中部标准时间\",{\"1\":{\"2030\":1}}],[\"中要出现\",{\"1\":{\"1776\":1}}],[\"中用于存放一些页面资源\",{\"1\":{\"1776\":1}}],[\"中间变量名\",{\"1\":{\"2464\":1}}],[\"中间变量的名称\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"中间点击\",{\"1\":{\"1656\":1,\"1658\":1,\"1659\":1,\"1661\":1}}],[\"中间不允许插入内容\",{\"1\":{\"1634\":1}}],[\"中间是可以添加内容的\",{\"1\":{\"1634\":1}}],[\"中间的操作不会执行\",{\"1\":{\"861\":1}}],[\"中插入java程序段\",{\"1\":{\"1548\":1}}],[\"中加入你要修饰的样式\",{\"1\":{\"1471\":1}}],[\"中foreach写法为\",{\"1\":{\"1389\":1}}],[\"中等长度文本数据\",{\"1\":{\"941\":1}}],[\"中使用\",{\"1\":{\"904\":1}}],[\"中国标准时间\",{\"1\":{\"1416\":4}}],[\"中国使用的是东八区的时区\",{\"1\":{\"901\":1}}],[\"中国石化等\",{\"1\":{\"61\":1}}],[\"中华民国历\",{\"1\":{\"892\":1}}],[\"中央仓库的镜像\",{\"1\":{\"705\":1}}],[\"中央仓库\",{\"1\":{\"705\":1}}],[\"中\",{\"1\":{\"512\":1,\"728\":1,\"736\":1,\"1263\":1,\"1775\":1,\"2250\":1,\"2289\":1,\"2520\":1,\"2780\":1,\"2843\":1}}],[\"中序遍历\",{\"1\":{\"288\":1}}],[\"中文名叫java服务器页面\",{\"1\":{\"1548\":1}}],[\"中文名\",{\"1\":{\"702\":1}}],[\"中文有多种字符集\",{\"1\":{\"177\":1}}],[\"中文是语言\",{\"1\":{\"177\":1}}],[\"中文网\",{\"1\":{\"85\":1}}],[\"中的占位符\",{\"1\":{\"2843\":1}}],[\"中的任何一个即可\",{\"1\":{\"2633\":1}}],[\"中的类声明\",{\"1\":{\"2625\":1}}],[\"中的值\",{\"1\":{\"1801\":1,\"1870\":1}}],[\"中的通过元素\",{\"1\":{\"1567\":1,\"1568\":1,\"1570\":1}}],[\"中的最高值\",{\"1\":{\"1411\":1}}],[\"中的位置以及和其他文档的关系等\",{\"1\":{\"1292\":1}}],[\"中的元素可以引用脚本\",{\"1\":{\"1292\":1}}],[\"中的数据的单引号\",{\"1\":{\"1249\":1}}],[\"中的数据进行操作\",{\"1\":{\"930\":1}}],[\"中的多个关键词\",{\"1\":{\"1195\":1}}],[\"中的小时数\",{\"1\":{\"374\":2}}],[\"中的表达式可以从下列元素开始\",{\"1\":{\"142\":1}}],[\"中的那个异常对象接收\",{\"1\":{\"19\":1}}],[\"中至少有这些组件\",{\"1\":{\"62\":1}}],[\"中断了\",{\"1\":{\"20\":1}}],[\"中级开发工程师\",{\"0\":{\"2938\":1},\"1\":{\"1\":1}}],[\"谢谢你使用计算器666\",{\"1\":{\"19\":1}}],[\"谢谢你使用计算器555\",{\"1\":{\"19\":1}}],[\"谢谢你使用计算器444\",{\"1\":{\"19\":1}}],[\"谢谢你使用计算器333\",{\"1\":{\"19\":1}}],[\"谢谢你使用计算器222\",{\"1\":{\"19\":1}}],[\"谢谢你使用计算器111\",{\"1\":{\"19\":1,\"21\":1,\"24\":1,\"27\":1}}],[\"程序媛\",{\"1\":{\"576\":1}}],[\"程序猿\",{\"1\":{\"576\":1}}],[\"程序是静态的\",{\"1\":{\"452\":1}}],[\"程序\",{\"0\":{\"452\":1}}],[\"程序才会结束\",{\"1\":{\"351\":1}}],[\"程序的入口\",{\"1\":{\"234\":2,\"238\":1,\"239\":2,\"240\":2,\"241\":1,\"244\":2,\"245\":1,\"265\":1,\"266\":1,\"274\":1,\"275\":1,\"278\":1,\"283\":1,\"315\":1,\"318\":1,\"357\":1}}],[\"程序报错\",{\"1\":{\"23\":1}}],[\"程序相当于遇到异常了\",{\"1\":{\"20\":1}}],[\"程序出现异常\",{\"1\":{\"19\":1,\"32\":1}}],[\"程序员可以从底层代码中解脱出来\",{\"1\":{\"2197\":1}}],[\"程序员可以在不改变原有逻辑的情况下\",{\"1\":{\"533\":1}}],[\"程序员学习jdbc规范来应用这些jar包里的类\",{\"1\":{\"1206\":1}}],[\"程序员三方关系\",{\"0\":{\"1206\":1}}],[\"程序员只需用jdbc\",{\"1\":{\"1205\":1}}],[\"程序员不必了解这个依赖关系\",{\"1\":{\"651\":1}}],[\"程序员\",{\"1\":{\"576\":1}}],[\"程序员很难堵住所有的漏洞\",{\"1\":{\"17\":1}}],[\"程序员需要花费大量的经历来维护这个漏洞\",{\"1\":{\"17\":1}}],[\"恰好\",{\"1\":{\"19\":1}}],[\"4以前的版本需要我们手动注册这些处理器\",{\"1\":{\"2508\":1}}],[\"4css\",{\"1\":{\"1952\":1}}],[\"4css样式的注释\",{\"1\":{\"1952\":1}}],[\"46\",{\"1\":{\"2680\":1}}],[\"46或者8\",{\"1\":{\"1665\":1}}],[\"46<\",{\"1\":{\"683\":1}}],[\"4的最主要变化包括以下方面\",{\"1\":{\"1558\":1}}],[\"4的最新版本是4\",{\"1\":{\"1558\":1}}],[\"4px\",{\"1\":{\"1528\":1}}],[\"4d\",{\"1\":{\"1482\":1}}],[\"4src属性可以指向一个网络路径\",{\"1\":{\"1380\":1}}],[\"4行4列\",{\"1\":{\"1319\":1}}],[\"4f\",{\"1\":{\"1314\":2}}],[\"4位数字表示年份\",{\"1\":{\"1093\":1}}],[\"4字节\",{\"1\":{\"939\":1,\"940\":1}}],[\"4所示\",{\"1\":{\"917\":1}}],[\"482\",{\"1\":{\"2493\":1}}],[\"480\",{\"1\":{\"1310\":1}}],[\"48\",{\"1\":{\"899\":1}}],[\"49cc81\",{\"1\":{\"2213\":1}}],[\"49\",{\"1\":{\"893\":1}}],[\"4<\",{\"1\":{\"683\":1}}],[\"4294967295\",{\"1\":{\"939\":1}}],[\"42\",{\"1\":{\"380\":1}}],[\"414\",{\"1\":{\"1411\":1}}],[\"41位长的字符串\",{\"1\":{\"1095\":1}}],[\"41\",{\"1\":{\"278\":1,\"283\":1}}],[\"450px\",{\"1\":{\"1529\":1}}],[\"45899013\",{\"1\":{\"845\":1}}],[\"456456\",{\"1\":{\"1333\":1}}],[\"456\",{\"1\":{\"434\":1,\"1416\":1}}],[\"45\",{\"1\":{\"226\":4,\"893\":2,\"2030\":1,\"2680\":1}}],[\"4xx\",{\"0\":{\"197\":1}}],[\"405\",{\"1\":{\"1808\":1}}],[\"40px\",{\"1\":{\"1496\":1,\"1497\":1}}],[\"40\",{\"1\":{\"523\":1,\"525\":1,\"1211\":1,\"1322\":1,\"1555\":1,\"1665\":1}}],[\"404\",{\"1\":{\"192\":1}}],[\"4044\",{\"1\":{\"177\":1}}],[\"403\",{\"1\":{\"192\":1}}],[\"401\",{\"1\":{\"192\":1}}],[\"4000+\",{\"1\":{\"1975\":1}}],[\"4000\",{\"1\":{\"1975\":1,\"2025\":2,\"2031\":2}}],[\"400px\",{\"1\":{\"1319\":1,\"1524\":1,\"1536\":1}}],[\"400\",{\"1\":{\"80\":1,\"192\":1}}],[\"440px\",{\"1\":{\"1529\":1}}],[\"4426950408889634\",{\"1\":{\"1411\":1}}],[\"445980947\",{\"1\":{\"395\":1}}],[\"44\",{\"1\":{\"65\":1,\"79\":1,\"893\":1,\"2680\":1}}],[\"434\",{\"1\":{\"1411\":1}}],[\"43\",{\"1\":{\"65\":1,\"893\":1,\"942\":3,\"2413\":1,\"2414\":1,\"2415\":1}}],[\"4\",{\"0\":{\"665\":1,\"677\":1,\"678\":1,\"679\":1,\"680\":1,\"681\":2,\"683\":1,\"684\":1,\"685\":1,\"686\":2,\"687\":2,\"688\":2,\"689\":2,\"690\":2,\"691\":2,\"692\":3,\"693\":2,\"694\":2,\"697\":2,\"698\":1,\"699\":1,\"700\":1,\"701\":1,\"702\":1,\"703\":1,\"704\":1,\"705\":1,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"711\":1},\"1\":{\"17\":1,\"27\":1,\"65\":4,\"73\":1,\"228\":1,\"279\":1,\"288\":1,\"294\":2,\"315\":4,\"327\":1,\"367\":1,\"375\":2,\"379\":1,\"395\":2,\"396\":2,\"408\":1,\"545\":2,\"674\":1,\"675\":1,\"680\":3,\"683\":3,\"714\":6,\"715\":6,\"825\":1,\"826\":1,\"835\":1,\"837\":1,\"860\":1,\"867\":2,\"873\":3,\"875\":2,\"876\":1,\"885\":2,\"886\":1,\"887\":3,\"939\":1,\"940\":2,\"976\":1,\"1093\":2,\"1112\":1,\"1211\":3,\"1283\":1,\"1336\":1,\"1340\":1,\"1347\":1,\"1366\":1,\"1384\":1,\"1388\":1,\"1389\":1,\"1391\":1,\"1400\":2,\"1401\":2,\"1416\":2,\"1417\":1,\"1439\":1,\"1542\":1,\"1549\":1,\"1552\":3,\"1558\":2,\"1584\":2,\"1594\":1,\"1601\":3,\"1602\":1,\"1631\":1,\"1730\":1,\"1775\":1,\"1776\":1,\"1779\":1,\"1791\":2,\"1795\":2,\"1831\":2,\"1834\":2,\"1999\":2,\"2047\":2,\"2058\":2,\"2075\":2,\"2128\":1,\"2179\":1,\"2183\":1,\"2244\":2,\"2267\":3,\"2334\":1,\"2417\":4,\"2503\":1,\"2509\":1,\"2559\":1,\"2615\":1,\"2690\":1,\"2691\":1,\"2692\":1,\"2746\":2,\"2748\":2,\"2759\":2,\"2885\":2}}],[\"3的保存点实现\",{\"1\":{\"2733\":1}}],[\"3的最新版本是3\",{\"1\":{\"1558\":1}}],[\"3<\",{\"1\":{\"2267\":1,\"2374\":1,\"2484\":1,\"2500\":1,\"2748\":1,\"2891\":1,\"2893\":1}}],[\"3==0\",{\"1\":{\"1990\":1}}],[\"3px\",{\"1\":{\"1976\":1,\"2025\":1,\"2031\":1}}],[\"3java注释\",{\"1\":{\"1952\":1}}],[\"3java中的注释\",{\"1\":{\"1952\":1}}],[\"3连接器\",{\"1\":{\"1765\":1}}],[\"3和4\",{\"1\":{\"1558\":1}}],[\"3n+1\",{\"1\":{\"1552\":1}}],[\"3c\",{\"1\":{\"1482\":1}}],[\"3f\",{\"1\":{\"1314\":2,\"1315\":1}}],[\"3rd\",{\"1\":{\"1093\":1}}],[\"3字节\",{\"1\":{\"939\":1}}],[\"37=\",{\"1\":{\"1664\":1}}],[\"37\",{\"1\":{\"899\":1,\"1665\":1}}],[\"38913f9ed7358c0933e82a03d9b26ec1\",{\"1\":{\"1310\":1}}],[\"38\",{\"1\":{\"892\":1,\"900\":3,\"1665\":1}}],[\"34\",{\"1\":{\"874\":1,\"1779\":1}}],[\"3456789\",{\"1\":{\"1585\":1}}],[\"34565677\",{\"1\":{\"292\":2}}],[\"34563465\",{\"1\":{\"292\":1}}],[\"350\",{\"1\":{\"1310\":1}}],[\"35\",{\"1\":{\"379\":1,\"1419\":2}}],[\"3100\",{\"1\":{\"2363\":1}}],[\"31\",{\"1\":{\"294\":1,\"868\":4,\"869\":2,\"870\":3,\"871\":2,\"872\":3,\"942\":2,\"1415\":4}}],[\"324\",{\"1\":{\"1409\":1,\"1412\":1}}],[\"32767\",{\"1\":{\"939\":1}}],[\"32768\",{\"1\":{\"939\":1}}],[\"329\",{\"1\":{\"893\":1}}],[\"32\",{\"1\":{\"280\":2,\"371\":4,\"1665\":1,\"2881\":2}}],[\"3xx\",{\"0\":{\"196\":1}}],[\"30px\",{\"1\":{\"1529\":1,\"1535\":2}}],[\"30\",{\"1\":{\"294\":1,\"374\":1,\"457\":2,\"1211\":7,\"1300\":2,\"1321\":1,\"1322\":2,\"1341\":1,\"1409\":2,\"1412\":2,\"1555\":1,\"1701\":1,\"2182\":1,\"2241\":1,\"2245\":1,\"2357\":1,\"2359\":1,\"2673\":1}}],[\"304\",{\"1\":{\"192\":1}}],[\"302\",{\"1\":{\"192\":1,\"1411\":1}}],[\"301\",{\"1\":{\"192\":1,\"900\":1}}],[\"3000\",{\"1\":{\"1211\":3,\"1588\":1,\"1589\":1,\"1590\":1,\"1975\":1,\"2025\":1,\"2031\":1}}],[\"3001\",{\"1\":{\"845\":1,\"1211\":1,\"1975\":1}}],[\"300\",{\"1\":{\"80\":1,\"1211\":1}}],[\"300px\",{\"1\":{\"65\":1,\"1300\":2,\"1309\":1,\"1319\":1,\"1521\":8,\"1523\":2,\"1524\":2,\"1525\":2,\"1535\":2,\"1536\":1,\"1568\":1,\"1793\":1}}],[\"3600\",{\"1\":{\"2172\":1}}],[\"36\",{\"1\":{\"177\":2,\"898\":1}}],[\"33tyyg\",{\"1\":{\"2332\":1,\"2374\":1}}],[\"3306或jdbc\",{\"1\":{\"2297\":1}}],[\"3306\",{\"1\":{\"1215\":1,\"1216\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1251\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"1976\":1,\"2187\":1,\"2278\":1,\"2293\":1,\"2301\":1,\"2332\":1,\"2374\":1,\"2501\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"333333333333332\",{\"1\":{\"880\":1}}],[\"333\",{\"1\":{\"262\":1,\"845\":1}}],[\"33\",{\"1\":{\"65\":1,\"75\":1,\"77\":1,\"78\":2,\"79\":1,\"315\":2,\"892\":1,\"893\":4,\"901\":4,\"1171\":1,\"1386\":4,\"1416\":2,\"2220\":1,\"2259\":1,\"2679\":2}}],[\"397655\",{\"1\":{\"1306\":1}}],[\"3923\",{\"1\":{\"891\":2}}],[\"39\",{\"1\":{\"65\":1,\"234\":2,\"379\":7,\"1665\":1}}],[\"3\",{\"0\":{\"660\":1,\"664\":1,\"674\":1,\"675\":1,\"676\":2,\"677\":1,\"678\":1,\"679\":1,\"680\":2,\"681\":1,\"685\":1,\"691\":1,\"693\":1,\"710\":1,\"2550\":1},\"1\":{\"17\":1,\"21\":1,\"23\":1,\"27\":1,\"30\":1,\"65\":1,\"73\":1,\"74\":2,\"75\":1,\"117\":1,\"146\":1,\"147\":1,\"228\":1,\"245\":1,\"251\":2,\"272\":1,\"279\":1,\"286\":3,\"294\":1,\"315\":7,\"327\":4,\"337\":2,\"367\":4,\"368\":3,\"371\":1,\"372\":2,\"375\":2,\"392\":1,\"395\":6,\"396\":6,\"408\":1,\"431\":4,\"567\":1,\"651\":2,\"674\":6,\"675\":2,\"676\":1,\"683\":1,\"685\":2,\"689\":1,\"690\":1,\"691\":1,\"706\":1,\"711\":1,\"825\":1,\"826\":1,\"830\":1,\"832\":2,\"835\":1,\"837\":1,\"845\":3,\"860\":1,\"867\":2,\"873\":3,\"875\":2,\"876\":3,\"880\":1,\"885\":2,\"886\":1,\"887\":2,\"899\":1,\"937\":1,\"955\":1,\"1001\":1,\"1093\":6,\"1112\":1,\"1147\":1,\"1211\":1,\"1231\":1,\"1235\":1,\"1253\":2,\"1264\":1,\"1293\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1336\":1,\"1340\":1,\"1347\":1,\"1348\":1,\"1359\":1,\"1361\":2,\"1366\":2,\"1380\":1,\"1385\":2,\"1386\":1,\"1388\":1,\"1389\":1,\"1391\":1,\"1399\":1,\"1400\":4,\"1401\":2,\"1406\":1,\"1416\":2,\"1417\":2,\"1438\":1,\"1439\":1,\"1458\":1,\"1490\":1,\"1491\":1,\"1510\":1,\"1542\":1,\"1543\":1,\"1545\":1,\"1546\":1,\"1548\":1,\"1549\":2,\"1552\":3,\"1555\":2,\"1558\":1,\"1559\":1,\"1563\":1,\"1564\":1,\"1579\":1,\"1584\":1,\"1585\":2,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1601\":1,\"1602\":1,\"1606\":1,\"1609\":2,\"1631\":1,\"1680\":1,\"1730\":1,\"2183\":1,\"2244\":11,\"2278\":2,\"2279\":1,\"2317\":1,\"2334\":1,\"2374\":3,\"2417\":4,\"2500\":2,\"2503\":1,\"2509\":1,\"2558\":1,\"2560\":1,\"2615\":1,\"2629\":1,\"2665\":4,\"2678\":2,\"2690\":1,\"2691\":1,\"2692\":1,\"2715\":1,\"2748\":1,\"2796\":1,\"2877\":1,\"2889\":2,\"2890\":3,\"2891\":1,\"2892\":2,\"2893\":1,\"2918\":1}}],[\"可\",{\"1\":{\"2780\":1}}],[\"可热插的主键结构\",{\"1\":{\"2741\":1}}],[\"可插入的\",{\"1\":{\"2740\":1}}],[\"可有可无的\",{\"0\":{\"2736\":1}}],[\"可通过反射获取\",{\"1\":{\"2608\":2}}],[\"可测试性和松耦合性角度而言\",{\"1\":{\"2520\":1}}],[\"可读性很差\",{\"1\":{\"2441\":1}}],[\"可读性差\",{\"1\":{\"17\":1}}],[\"可不写\",{\"1\":{\"2433\":1}}],[\"可输出\",{\"1\":{\"2179\":1}}],[\"可自由配置\",{\"1\":{\"2179\":1}}],[\"可大大简化ajax的操作步骤\",{\"1\":{\"2129\":1}}],[\"可获得代表当前filter配置信息的filterconfig对象\",{\"1\":{\"2003\":1}}],[\"可选操作\",{\"1\":{\"2509\":1}}],[\"可选$\",{\"1\":{\"2163\":1}}],[\"可选参数\",{\"1\":{\"2163\":2}}],[\"可选参数有\",{\"1\":{\"2155\":2}}],[\"可选类型如下\",{\"1\":{\"2155\":1}}],[\"可选值numeric\",{\"1\":{\"2301\":1}}],[\"可选值\",{\"1\":{\"2018\":1}}],[\"可选\",{\"1\":{\"1978\":1,\"2145\":1}}],[\"可维护性高\",{\"0\":{\"2039\":1}}],[\"可维护性更高\",{\"1\":{\"1715\":1}}],[\"可维护性低\",{\"1\":{\"1379\":1}}],[\"可见状态\",{\"1\":{\"1555\":1}}],[\"可靠的事件处理机制\",{\"1\":{\"1540\":1}}],[\"可用的表达式\",{\"1\":{\"2633\":1}}],[\"可用的变量为\",{\"1\":{\"2301\":1}}],[\"可用的类型如下\",{\"1\":{\"2141\":1}}],[\"可用jquery处理\",{\"1\":{\"2141\":1}}],[\"可用于选择性插入\",{\"1\":{\"2454\":1}}],[\"可用于快速制作网格布局\",{\"1\":{\"1601\":1}}],[\"可用于修饰包\",{\"1\":{\"534\":1}}],[\"可用来访问页面中的所有元素\",{\"1\":{\"1477\":1}}],[\"可相对窗口的当前坐标把它移动指定的像素\",{\"1\":{\"1452\":1}}],[\"可阅读性差\",{\"1\":{\"1379\":1}}],[\"可赋各种数据类型值\",{\"1\":{\"1376\":1}}],[\"可将数据库的处理黑匣子化\",{\"1\":{\"1146\":1}}],[\"可减轻网络负担\",{\"1\":{\"1146\":1}}],[\"可加入断言assert\",{\"1\":{\"522\":1}}],[\"可能是java程序或mysql数据库或网络连接等等\",{\"1\":{\"2715\":1}}],[\"可能是xml\",{\"1\":{\"2155\":1}}],[\"可能破坏浏览器后退按钮的正常行为\",{\"1\":{\"2106\":1}}],[\"可能要等几分钟\",{\"1\":{\"1684\":1}}],[\"可能比较慢\",{\"1\":{\"1682\":1,\"1683\":1}}],[\"可能利用的就是表格\",{\"1\":{\"1319\":1}}],[\"可能引发并发访问的问题\",{\"1\":{\"1111\":1}}],[\"可能出现hash碰撞\",{\"1\":{\"702\":1}}],[\"可能出现两个线程同时操作同一个下标上的数据的情况\",{\"1\":{\"305\":1}}],[\"可能相同\",{\"1\":{\"702\":1}}],[\"可能会造成线程安全问题\",{\"1\":{\"1824\":1}}],[\"可能会引起相应的事件响应\",{\"1\":{\"1374\":1}}],[\"可能会出现复合索引失效\",{\"1\":{\"1135\":1}}],[\"可能会出现资源不可控的现象\",{\"1\":{\"462\":1}}],[\"可能会与之前已经实现的代码产生冗余\",{\"1\":{\"825\":1}}],[\"可能会被篡改\",{\"1\":{\"701\":1}}],[\"可能每个模块都需要运行在独立的服务器上\",{\"1\":{\"654\":1}}],[\"可能造成死锁\",{\"1\":{\"484\":1}}],[\"可变字符串\",{\"1\":{\"392\":1}}],[\"可变性\",{\"1\":{\"378\":1}}],[\"可作为任何类型的泛型的父类\",{\"1\":{\"244\":1}}],[\"可重复读\",{\"0\":{\"2722\":1},\"1\":{\"1112\":1,\"2693\":2}}],[\"可重复\",{\"1\":{\"228\":1}}],[\"可向服务端传递数据一种模型\",{\"1\":{\"177\":1}}],[\"可查看当前npm版本\",{\"1\":{\"90\":1}}],[\"可高度个性化定制的数据可视化图表\",{\"1\":{\"61\":1}}],[\"可以回顾一下\",{\"1\":{\"2920\":1}}],[\"可以手写监听器\",{\"1\":{\"2911\":1}}],[\"可以控制请求的方式\",{\"1\":{\"2813\":1}}],[\"可以参照之前在javaee阶段中servlet中处理方案\",{\"1\":{\"2803\":1,\"2805\":1}}],[\"可以创建一个javaee项目\",{\"1\":{\"2746\":1}}],[\"可以选择使用spring的springmvc框架或集成其他mvc开发框架\",{\"1\":{\"2740\":1}}],[\"可以选中全部\",{\"1\":{\"618\":1}}],[\"可以选中光标处的符号\",{\"1\":{\"618\":1}}],[\"可以做后续处理我们在环绕通知的最后需要将切点方法的返回值继续向上返回\",{\"1\":{\"2644\":1}}],[\"可以读取父类中方法上的所有注解\",{\"1\":{\"2616\":1}}],[\"可以写上一层包路径\",{\"1\":{\"2588\":1}}],[\"可以强调以文本方式显示\",{\"1\":{\"2560\":1}}],[\"可以形成一个庞大的依赖关系\",{\"1\":{\"2551\":1}}],[\"可以介入四大对象的任何一个方法的执行\",{\"1\":{\"2516\":1}}],[\"可以针对单表自动生成mybatis执行所需要的代码\",{\"1\":{\"2497\":1}}],[\"可以拿来直接使用\",{\"1\":{\"2471\":1}}],[\"可以降低开发的复杂性\",{\"1\":{\"2823\":1}}],[\"可以降低工作量\",{\"1\":{\"2470\":1}}],[\"可以降低程序员之间沟通以及日后维护的成本\",{\"1\":{\"2197\":1}}],[\"可以不用但是不能没有\",{\"1\":{\"2899\":1,\"2904\":1}}],[\"可以不用自己去自己定义回调函数\",{\"1\":{\"2170\":1}}],[\"可以不写映射关系\",{\"1\":{\"2422\":1,\"2428\":1}}],[\"可以被select元素的resultmap属性应用\",{\"1\":{\"2420\":1}}],[\"可以被浏览器侦测到的人或者浏览器本身的行为\",{\"1\":{\"1428\":1}}],[\"可以非常简单的获取\",{\"1\":{\"2408\":1}}],[\"可以非常方便简单的获取要选择的内容\",{\"1\":{\"1547\":1}}],[\"可以随意id\",{\"1\":{\"2279\":1}}],[\"可以有子查询\",{\"1\":{\"2250\":1}}],[\"可以有多行\",{\"1\":{\"1182\":1}}],[\"可以有多个\",{\"1\":{\"1172\":1}}],[\"可以说web是构建在同源策略基础之上的\",{\"1\":{\"2168\":1}}],[\"可以说是学习好dom编程的关键所在\",{\"1\":{\"1477\":1}}],[\"可以查看processdata选项\",{\"1\":{\"2140\":1}}],[\"可以查看光标处的定义\",{\"1\":{\"637\":1}}],[\"可以修改tostring方法但是就破坏了tostring原有的格式\",{\"1\":{\"2126\":1}}],[\"可以这么理解\",{\"1\":{\"2125\":1}}],[\"可以充分利用用户操作的间隔时间完成运算\",{\"1\":{\"2105\":1}}],[\"可以保留浏览器后退按钮的正常功能\",{\"1\":{\"2102\":1}}],[\"可以开发编写多个filter\",{\"1\":{\"2046\":1}}],[\"可以释放过滤器使用的资源\",{\"1\":{\"2005\":1}}],[\"可以实现子查询\",{\"1\":{\"2244\":1}}],[\"可以实现前后端代码的解耦\",{\"1\":{\"1946\":1}}],[\"可以实现网页如文本内容动\",{\"1\":{\"1372\":1}}],[\"可以响应客户端发送的请求\",{\"1\":{\"1927\":1}}],[\"可以跨多个请求\",{\"1\":{\"1919\":1}}],[\"可以访问\",{\"1\":{\"1904\":1}}],[\"可以反复多次访问web\",{\"1\":{\"1904\":1}}],[\"可以获取方法执行的参数\",{\"1\":{\"2640\":1}}],[\"可以获取相关提示\",{\"1\":{\"610\":1}}],[\"可以获得客户端请求的所有信息\",{\"1\":{\"1797\":1}}],[\"可以输入用户名和密码\",{\"1\":{\"1792\":1}}],[\"可以一样使用\",{\"1\":{\"1777\":1}}],[\"可以放到处理队列中的请求数\",{\"1\":{\"1757\":1}}],[\"可以以文件夹\",{\"1\":{\"1744\":1}}],[\"可以换成国内的镜像\",{\"1\":{\"1681\":1}}],[\"可以安装最新的15版本\",{\"1\":{\"1680\":1}}],[\"可以简化错误恢复并使应用程序更加可靠\",{\"1\":{\"2684\":1}}],[\"可以简写\",{\"1\":{\"1718\":1}}],[\"可以简写为\",{\"1\":{\"1645\":1}}],[\"可以简单理解为\",{\"1\":{\"729\":1}}],[\"可以自定义命名\",{\"1\":{\"1628\":1}}],[\"可以自动由springmvc处理映射\",{\"1\":{\"2794\":1}}],[\"可以自动化创建索引\",{\"1\":{\"1203\":1}}],[\"可以自动增大宽度\",{\"1\":{\"972\":1}}],[\"可以阅读我们的css\",{\"1\":{\"1601\":1}}],[\"可以调用api实现功能的目的\",{\"1\":{\"1573\":1}}],[\"可以让普通的java类成为contrllor控制器\",{\"1\":{\"2741\":1}}],[\"可以让servlet将数据发送给jsp\",{\"1\":{\"1953\":1}}],[\"可以让我们直接复制代码后\",{\"1\":{\"1559\":1}}],[\"可以让程序员从基本的样式设计和调试上解放\",{\"1\":{\"1559\":1}}],[\"可以明显体现到jquery的方便和简单\",{\"1\":{\"1543\":1}}],[\"可以定位唯一的一个元素\",{\"1\":{\"1510\":1}}],[\"可以把整个项目中所有切入点表达式全部集中过来\",{\"1\":{\"2635\":1}}],[\"可以把当前窗口对象的方法当作函数来使用\",{\"1\":{\"1450\":1}}],[\"可以把那个窗口的属性作为全局变量来使用\",{\"1\":{\"1450\":1}}],[\"可以只写document\",{\"1\":{\"1450\":1}}],[\"可以只指定部分列进行插值操作\",{\"1\":{\"972\":1}}],[\"可以加入事件\",{\"1\":{\"1339\":1}}],[\"可以正常提交\",{\"1\":{\"1333\":1}}],[\"可以包含文本\",{\"1\":{\"1295\":1}}],[\"可以大大减少链接对象的创建次数\",{\"1\":{\"1272\":1}}],[\"可以执行\",{\"1\":{\"1735\":1}}],[\"可以执行插入\",{\"1\":{\"1257\":1}}],[\"可以执行建议\",{\"1\":{\"638\":1}}],[\"可以减少sql语句的编译次数\",{\"1\":{\"1248\":1}}],[\"可以避免短时间内一次性大量创建链接对象\",{\"1\":{\"1272\":1}}],[\"可以避免sql注入\",{\"1\":{\"1248\":1,\"1258\":1}}],[\"可以避免http旧版本的队头阻塞问题\",{\"1\":{\"167\":1}}],[\"可以分批操作\",{\"1\":{\"1148\":1}}],[\"可以采用limit分页\",{\"1\":{\"1148\":1}}],[\"可以用object\",{\"1\":{\"2641\":1}}],[\"可以用来显示sql语句的调试信息\",{\"1\":{\"2306\":1}}],[\"可以用于方法参数列表和\",{\"1\":{\"2798\":1}}],[\"可以用于制作网页的主体结构\",{\"1\":{\"1377\":1}}],[\"可以用于null值判断`\",{\"1\":{\"1030\":1}}],[\"可以用不同的类型的数据给变量赋值\",{\"1\":{\"1352\":1}}],[\"可以用线性表的数组\",{\"1\":{\"321\":1}}],[\"可以混着使用\",{\"1\":{\"1001\":1}}],[\"可以是由一个sqlsessionfactory创建的sqlsession之间共享缓存数据\",{\"1\":{\"2477\":1}}],[\"可以是key\",{\"1\":{\"2155\":1}}],[\"可以是一个字段\",{\"1\":{\"985\":1}}],[\"可以是静态方法\",{\"1\":{\"241\":1}}],[\"可以看到抛出了一个\",{\"1\":{\"2226\":1}}],[\"可以看到提供了众多的选择器\",{\"1\":{\"1547\":1}}],[\"可以看到root对应的host是localhost\",{\"1\":{\"928\":1}}],[\"可以看到小铃铛中的消息提醒\",{\"1\":{\"759\":1}}],[\"可以作为中型企业或单位的数据库平台\",{\"1\":{\"919\":1}}],[\"可以提高多线程任务的速度\",{\"1\":{\"886\":1}}],[\"可以根据类型\",{\"1\":{\"2593\":1}}],[\"可以根据标签更好的管理自己的页面\",{\"1\":{\"1203\":1}}],[\"可以根据某个属性将数据分组\",{\"1\":{\"881\":1}}],[\"可以根据自然排序\",{\"1\":{\"868\":1}}],[\"可以像数据库的聚合函数一样对某个字段进行操作\",{\"1\":{\"880\":1}}],[\"可以像修饰符一样被使用\",{\"1\":{\"534\":1}}],[\"可以进行搜索\",{\"1\":{\"760\":1}}],[\"可以pull本地后修改\",{\"1\":{\"760\":1}}],[\"可以pull\",{\"1\":{\"757\":1}}],[\"可以在通知方法声明joinpoint类型的形参\",{\"1\":{\"2651\":1}}],[\"可以在其他任何地方通过方法名进行引入\",{\"1\":{\"2635\":1}}],[\"可以在特定的应用服务器中使用\",{\"1\":{\"2533\":1}}],[\"可以在连接中通过\",{\"1\":{\"1216\":1}}],[\"可以在一行显示git\",{\"1\":{\"739\":1}}],[\"可以在本地仓库删除文件再重新导入\",{\"1\":{\"685\":1}}],[\"可以在左边打开小窗口\",{\"1\":{\"642\":1}}],[\"可以设置\",{\"1\":{\"1533\":1,\"1534\":1}}],[\"可以设置列表的标号\",{\"1\":{\"1317\":1,\"1318\":1}}],[\"可以设置列表前图标的样式\",{\"1\":{\"1317\":1}}],[\"可以设置导入的vm参数\",{\"1\":{\"676\":1}}],[\"可以设置java\",{\"1\":{\"364\":1}}],[\"可以指定本地\",{\"1\":{\"676\":1}}],[\"可以指定返回值类型\",{\"1\":{\"449\":1}}],[\"可以编辑配置运行\",{\"1\":{\"670\":1}}],[\"可以通过updatewrapper来实现\",{\"1\":{\"2259\":1}}],[\"可以通过el表达式取出集合之后给改属性赋值\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"可以通过req\",{\"1\":{\"1801\":1}}],[\"可以通过后面的\",{\"1\":{\"1775\":1}}],[\"可以通过修改server\",{\"1\":{\"1756\":1}}],[\"可以通过修改class属性\",{\"1\":{\"1497\":1}}],[\"可以通过调用setautocommit\",{\"1\":{\"1233\":1}}],[\"可以通过filter方法将一个流转换成另一个子集流\",{\"1\":{\"864\":1}}],[\"可以通过一小段描述信息来管理项目的构建\",{\"1\":{\"655\":1}}],[\"可以通过append\",{\"1\":{\"397\":1}}],[\"可以打开文件结构\",{\"1\":{\"642\":1}}],[\"可以快速查看所需形参\",{\"1\":{\"636\":1}}],[\"可以个性化格式化的设置\",{\"1\":{\"635\":1}}],[\"可以直接new接口对象或者新建类实现改接口\",{\"1\":{\"2608\":1}}],[\"可以直接赋值为null<\",{\"1\":{\"2560\":1}}],[\"可以直接把上面这种格式的字符串直接转换成对象\",{\"1\":{\"2124\":1}}],[\"可以直接跳转\",{\"1\":{\"1910\":1}}],[\"可以直接对当前变量进行改名\",{\"1\":{\"626\":1}}],[\"可以直接使用view视图进行处理\",{\"1\":{\"2871\":1}}],[\"可以直接使用\",{\"1\":{\"239\":1,\"622\":1}}],[\"可以对应所有表\",{\"1\":{\"2501\":1}}],[\"可以对分组结果进行过滤\",{\"1\":{\"1042\":1}}],[\"可以对数据库\",{\"1\":{\"930\":1}}],[\"可以对任何主机的mysql服务\",{\"1\":{\"925\":1}}],[\"可以对静态常量或方法进行提醒\",{\"1\":{\"620\":1}}],[\"可以对当前代码快速格式化\",{\"1\":{\"635\":1}}],[\"可以对当前代码进行解包操作\",{\"1\":{\"617\":1}}],[\"可以对当前代码进行包围操作\",{\"1\":{\"617\":1}}],[\"可以对当前语句进行自动补全\",{\"1\":{\"623\":1}}],[\"可以对当前语句进行补全\",{\"1\":{\"620\":1}}],[\"可以取消上一个选中\",{\"1\":{\"618\":1}}],[\"可以块注释\",{\"1\":{\"613\":1}}],[\"可以注释当前行\",{\"1\":{\"613\":1}}],[\"可以补全语句\",{\"1\":{\"610\":1}}],[\"可以预览类的相关文档\",{\"1\":{\"609\":1}}],[\"可以按两下shift\",{\"1\":{\"609\":1}}],[\"可以帮助您转换\",{\"1\":{\"607\":1}}],[\"可以点击行号下断点调试\",{\"1\":{\"602\":1}}],[\"可以深入到类的内部结构\",{\"1\":{\"567\":1}}],[\"可以使网页实现异步更新\",{\"1\":{\"2108\":1}}],[\"可以使用关键字进行处理\",{\"1\":{\"2871\":1}}],[\"可以使用逗号隔开\",{\"1\":{\"2588\":1}}],[\"可以使用mybatis提供的自定义类型处理器机制\",{\"1\":{\"2509\":1}}],[\"可以使用match相关的方法\",{\"1\":{\"870\":1}}],[\"可以使用usecache属性\",{\"1\":{\"2480\":1}}],[\"可以使用union关键字将左独和右独合并起来\",{\"1\":{\"1067\":1}}],[\"可以使用union关键字将左外联和右外联合并起来\",{\"1\":{\"1066\":1}}],[\"可以使用and\",{\"1\":{\"2256\":1}}],[\"可以使用简单的\",{\"1\":{\"2196\":1}}],[\"可以使用jquery对上述问题进行优化\",{\"1\":{\"2129\":1}}],[\"可以使用json格式处理\",{\"1\":{\"2122\":1}}],[\"可以使用正则表达式进行验证\",{\"1\":{\"1580\":1}}],[\"可以使用这两个属性\",{\"1\":{\"1450\":1}}],[\"可以使用任何一种文本编辑器编写\",{\"1\":{\"1374\":2}}],[\"可以使用在线解析工具查看\",{\"1\":{\"1330\":1}}],[\"可以使用服务器提供的公钥\",{\"1\":{\"1216\":1}}],[\"可以使用通配符\",{\"1\":{\"1115\":1}}],[\"可以使用binary\",{\"1\":{\"972\":1}}],[\"可以使用stream接口的静态方法\",{\"1\":{\"875\":1}}],[\"可以使用sorted方法\",{\"1\":{\"868\":1}}],[\"可以使用reduce方法\",{\"1\":{\"873\":1}}],[\"可以使用find方法来实现\",{\"1\":{\"871\":1}}],[\"可以使用distinct方法\",{\"1\":{\"869\":1}}],[\"可以使用←→来控制选择\",{\"1\":{\"671\":1}}],[\"可以使用ctrl+n\",{\"1\":{\"609\":1}}],[\"可以使用不同的实现类\",{\"1\":{\"480\":1}}],[\"可以使框架更灵活\",{\"1\":{\"567\":1}}],[\"可以类名\",{\"1\":{\"371\":1}}],[\"可以存放null值\",{\"1\":{\"277\":1}}],[\"可以添加任意元素\",{\"1\":{\"259\":1}}],[\"可以先创建object数组再转换成泛型类型\",{\"1\":{\"240\":1}}],[\"可以确定集合中存放数据的类型\",{\"1\":{\"235\":1}}],[\"可以解决具体问题\",{\"1\":{\"223\":1}}],[\"可以测试服务器功能是否正常运作\",{\"1\":{\"186\":1}}],[\"可以想象一下\",{\"1\":{\"169\":1}}],[\"可以多次请求\",{\"1\":{\"159\":1}}],[\"可以多个类型\",{\"1\":{\"33\":1}}],[\"可以理解为是模块和资源的转换器\",{\"1\":{\"115\":1}}],[\"可以将文件中的信息注入给bean\",{\"1\":{\"2580\":1}}],[\"可以将一段字符串当做js代码来执行\",{\"1\":{\"1406\":1}}],[\"可以将一个t类型的参数转换成r类型的参数\",{\"1\":{\"867\":1}}],[\"可以将客户编号作为一个外键和订单表建立相应的关系\",{\"1\":{\"1048\":1}}],[\"可以将多种静态资源\",{\"1\":{\"111\":1}}],[\"可以将es6代码转为es5代码\",{\"1\":{\"96\":1}}],[\"可以很方便地下载js库\",{\"1\":{\"90\":1}}],[\"可以省略\",{\"1\":{\"561\":1,\"925\":1}}],[\"可以省略的元素\",{\"0\":{\"549\":1}}],[\"可以省略serialversionuid\",{\"1\":{\"427\":1}}],[\"可以省略大括号和return\",{\"1\":{\"80\":1}}],[\"可以省略小括号\",{\"1\":{\"80\":1}}],[\"可以声明多次\",{\"1\":{\"73\":1}}],[\"可以流畅的运行在\",{\"1\":{\"61\":1}}],[\"可以并列用|符号连接\",{\"1\":{\"27\":1}}],[\"可是新的问题又来了\",{\"1\":{\"17\":1}}],[\"2将方法的返回的数据自动使用objectmapper转换为json\",{\"1\":{\"2876\":1,\"2878\":1}}],[\"2=\",{\"1\":{\"2559\":1}}],[\"2==0\",{\"1\":{\"489\":1,\"490\":1,\"1790\":1}}],[\"2<\",{\"1\":{\"2292\":1,\"2500\":2,\"2629\":1,\"2665\":1,\"2891\":2}}],[\"2px\",{\"1\":{\"1976\":1,\"2025\":1,\"2031\":1}}],[\"2html注释\",{\"1\":{\"1952\":2}}],[\"2b\",{\"1\":{\"1482\":1}}],[\"2type属性可以省略不写\",{\"1\":{\"1379\":1}}],[\"2f\",{\"1\":{\"1314\":2}}],[\"2nd\",{\"1\":{\"1093\":1}}],[\"2字节\",{\"1\":{\"939\":1}}],[\"2~default~ctrlist~rate\",{\"1\":{\"845\":2}}],[\"29th<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"2975\",{\"1\":{\"1211\":1}}],[\"29\",{\"1\":{\"294\":2,\"352\":1,\"380\":1,\"881\":3,\"882\":1,\"883\":3,\"973\":1,\"2563\":1}}],[\"28<\",{\"1\":{\"2582\":1,\"2665\":1,\"2756\":1,\"2890\":1}}],[\"2850\",{\"1\":{\"1211\":1}}],[\"28\",{\"1\":{\"294\":5,\"379\":2,\"1211\":1,\"2183\":1,\"2206\":1,\"2255\":1,\"2574\":2}}],[\"27\",{\"1\":{\"294\":1,\"374\":1,\"897\":4,\"2030\":1}}],[\"2155\",{\"1\":{\"942\":1}}],[\"2147483647\",{\"1\":{\"939\":1}}],[\"2147483648\",{\"1\":{\"939\":1}}],[\"2101\",{\"1\":{\"845\":1}}],[\"217\",{\"1\":{\"503\":1,\"505\":1,\"888\":2}}],[\"21t16\",{\"1\":{\"379\":1}}],[\"21t15\",{\"1\":{\"379\":4}}],[\"21t14\",{\"1\":{\"379\":1}}],[\"21亿多\",{\"1\":{\"336\":1}}],[\"21\",{\"1\":{\"294\":1,\"374\":1,\"375\":2,\"379\":4,\"380\":1,\"900\":1,\"973\":1,\"1198\":1,\"2183\":1}}],[\"26<\",{\"1\":{\"2629\":1,\"2665\":1,\"2756\":1,\"2891\":1}}],[\"26日\",{\"1\":{\"1301\":1}}],[\"26\",{\"1\":{\"294\":1,\"893\":2}}],[\"262标准化的脚本程序语言\",{\"1\":{\"1372\":1}}],[\"262\",{\"1\":{\"70\":2,\"1372\":2}}],[\"25t07\",{\"1\":{\"901\":1}}],[\"25t11\",{\"1\":{\"901\":1}}],[\"25t19\",{\"1\":{\"900\":1,\"901\":2}}],[\"25t10\",{\"1\":{\"898\":1}}],[\"25t18\",{\"1\":{\"897\":2}}],[\"254\",{\"1\":{\"493\":5}}],[\"255之间\",{\"1\":{\"493\":1}}],[\"255\",{\"1\":{\"493\":10,\"939\":1,\"1698\":6}}],[\"25\",{\"1\":{\"294\":1,\"897\":2,\"899\":2,\"942\":3,\"2259\":1}}],[\"2^n\",{\"1\":{\"294\":1}}],[\"2的倍数\",{\"1\":{\"294\":1}}],[\"24th<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"2450\",{\"1\":{\"1211\":1}}],[\"24小时制\",{\"1\":{\"1093\":3}}],[\"240\",{\"1\":{\"493\":1}}],[\"24\",{\"1\":{\"280\":1,\"294\":1,\"373\":1,\"374\":2,\"1416\":4,\"2030\":3,\"2168\":1,\"2183\":1,\"2205\":1,\"2562\":1,\"2563\":1,\"2564\":1}}],[\"2333\",{\"1\":{\"2259\":1}}],[\"236\",{\"1\":{\"899\":1}}],[\"23145\",{\"1\":{\"893\":1}}],[\"239\",{\"1\":{\"493\":1}}],[\"239之间\",{\"1\":{\"493\":1}}],[\"23\",{\"1\":{\"226\":2,\"294\":1,\"374\":1,\"893\":3,\"942\":1,\"972\":3,\"1211\":2,\"1415\":4}}],[\"2xx\",{\"0\":{\"195\":1}}],[\"2中\",{\"1\":{\"166\":1}}],[\"20px\",{\"1\":{\"1533\":1,\"1534\":1,\"1568\":1}}],[\"2048\",{\"1\":{\"1416\":4,\"1417\":1}}],[\"2038\",{\"1\":{\"942\":1}}],[\"20字节\",{\"1\":{\"702\":1}}],[\"2021\",{\"1\":{\"1928\":1}}],[\"20230530105731114\",{\"1\":{\"2740\":1}}],[\"202304141121\",{\"1\":{\"2274\":1}}],[\"2023\",{\"1\":{\"900\":3,\"972\":1,\"1897\":1,\"1898\":1,\"2030\":1,\"2192\":1,\"2276\":1,\"2282\":2,\"2374\":3,\"2377\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2574\":2,\"2615\":1}}],[\"2020\",{\"1\":{\"380\":2,\"893\":2}}],[\"2020年6月15日\",{\"1\":{\"380\":1}}],[\"202\",{\"1\":{\"379\":1}}],[\"2022年7月20日\",{\"1\":{\"371\":1}}],[\"2022\",{\"1\":{\"371\":3,\"374\":1,\"375\":1,\"379\":11,\"380\":2,\"891\":4,\"893\":6,\"897\":4,\"898\":1,\"899\":1,\"900\":1,\"901\":4,\"972\":4,\"1808\":1}}],[\"20\",{\"1\":{\"219\":4,\"272\":1,\"278\":1,\"283\":1,\"294\":2,\"371\":5,\"380\":1,\"438\":1,\"458\":1,\"460\":2,\"523\":2,\"525\":2,\"900\":1,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1211\":7,\"1322\":1,\"1370\":2,\"1385\":2,\"1409\":2,\"1412\":2,\"1416\":4,\"1417\":1,\"1617\":1,\"1622\":1,\"1630\":1,\"1897\":1,\"1898\":1,\"1987\":3,\"2030\":1,\"2182\":1,\"2183\":1,\"2241\":1,\"2242\":1,\"2245\":1,\"2246\":1,\"2256\":2,\"2312\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2417\":1,\"2426\":1,\"2428\":1,\"2435\":1,\"2475\":2,\"2479\":2,\"2488\":2,\"2503\":3,\"2562\":1}}],[\"200px\",{\"1\":{\"1496\":2,\"1499\":2,\"1500\":2,\"1501\":2,\"1505\":1,\"1521\":8,\"1523\":2,\"1524\":2,\"1525\":2,\"1568\":1,\"1570\":2,\"1571\":2,\"1572\":2,\"1588\":2,\"1589\":2,\"1590\":2,\"1591\":2}}],[\"2009年\",{\"1\":{\"920\":1}}],[\"2008年1月16号被sun公司收购\",{\"1\":{\"920\":1}}],[\"2001\",{\"1\":{\"545\":1,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1211\":1,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1975\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2267\":1,\"2485\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2746\":1,\"2748\":1,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2885\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"20000\",{\"1\":{\"1756\":1,\"1757\":1,\"1765\":1,\"1812\":1,\"2417\":2}}],[\"2000\",{\"1\":{\"327\":1,\"1211\":1,\"1588\":2,\"1589\":1,\"1590\":1,\"1591\":1,\"1975\":1,\"2025\":1,\"2031\":1,\"2155\":1,\"2692\":1}}],[\"200\",{\"1\":{\"80\":1,\"88\":2,\"114\":1,\"190\":1,\"192\":1,\"438\":3,\"440\":2,\"441\":2,\"445\":1,\"457\":2,\"460\":1,\"1617\":1,\"2363\":1}}],[\"2013年11月迁移到github\",{\"1\":{\"2196\":1}}],[\"2010年这个项目由apache\",{\"1\":{\"2196\":1}}],[\"2018\",{\"1\":{\"892\":1}}],[\"2018年3月份\",{\"1\":{\"61\":1}}],[\"2019\",{\"1\":{\"372\":1,\"892\":1}}],[\"2017\",{\"1\":{\"71\":1}}],[\"2016\",{\"1\":{\"71\":2}}],[\"2011\",{\"1\":{\"71\":1}}],[\"2015\",{\"1\":{\"68\":1,\"71\":2,\"373\":1}}],[\"225\",{\"1\":{\"899\":1}}],[\"224\",{\"1\":{\"493\":1}}],[\"223\",{\"1\":{\"493\":1}}],[\"223之间\",{\"1\":{\"493\":1}}],[\"222\",{\"1\":{\"262\":1,\"845\":1,\"2220\":2}}],[\"22\",{\"1\":{\"65\":1,\"219\":3,\"294\":1,\"380\":1,\"873\":1,\"880\":6,\"881\":3,\"882\":1,\"883\":3,\"899\":1,\"1171\":1,\"1211\":1,\"1386\":4,\"2220\":1,\"2679\":2}}],[\"2\",{\"0\":{\"659\":1,\"663\":1,\"675\":1,\"679\":1,\"684\":1,\"688\":1,\"689\":1,\"690\":2,\"691\":1,\"692\":1,\"700\":1,\"703\":1,\"706\":1,\"709\":1,\"1168\":1,\"1209\":1,\"2549\":1},\"1\":{\"17\":1,\"21\":1,\"23\":1,\"27\":1,\"30\":1,\"65\":1,\"73\":2,\"75\":1,\"79\":1,\"94\":1,\"103\":2,\"146\":1,\"147\":1,\"168\":1,\"228\":2,\"238\":1,\"245\":1,\"251\":2,\"262\":1,\"279\":7,\"280\":1,\"288\":1,\"290\":1,\"294\":2,\"297\":1,\"315\":4,\"318\":3,\"327\":2,\"337\":3,\"371\":1,\"372\":2,\"373\":1,\"374\":2,\"375\":2,\"382\":1,\"392\":2,\"395\":2,\"396\":2,\"408\":1,\"448\":1,\"567\":1,\"651\":2,\"652\":5,\"656\":1,\"674\":11,\"675\":3,\"676\":1,\"683\":1,\"685\":2,\"689\":1,\"690\":1,\"691\":1,\"706\":1,\"711\":1,\"809\":1,\"810\":1,\"825\":1,\"826\":1,\"835\":1,\"837\":1,\"850\":1,\"860\":1,\"867\":2,\"873\":5,\"874\":1,\"875\":2,\"876\":2,\"885\":2,\"886\":1,\"887\":3,\"895\":1,\"905\":1,\"956\":1,\"972\":2,\"973\":1,\"1001\":4,\"1093\":6,\"1112\":1,\"1161\":1,\"1209\":1,\"1211\":9,\"1231\":1,\"1234\":1,\"1235\":1,\"1252\":1,\"1253\":2,\"1264\":1,\"1283\":1,\"1285\":1,\"1319\":1,\"1330\":1,\"1336\":1,\"1340\":1,\"1359\":1,\"1366\":2,\"1367\":1,\"1370\":1,\"1372\":1,\"1380\":1,\"1386\":1,\"1388\":1,\"1389\":1,\"1391\":1,\"1400\":6,\"1401\":2,\"1411\":9,\"1416\":2,\"1432\":9,\"1435\":3,\"1438\":8,\"1439\":1,\"1458\":2,\"1463\":1,\"1490\":1,\"1491\":1,\"1509\":1,\"1519\":2,\"1542\":1,\"1544\":1,\"1549\":3,\"1552\":2,\"1555\":2,\"1558\":1,\"1573\":1,\"1579\":1,\"1585\":3,\"1586\":4,\"1590\":1,\"1602\":2,\"1609\":1,\"1631\":1,\"1695\":1,\"1730\":1,\"1779\":2,\"1793\":1,\"2014\":1,\"2030\":2,\"2128\":2,\"2183\":1,\"2242\":1,\"2244\":7,\"2307\":1,\"2334\":1,\"2374\":1,\"2417\":6,\"2429\":1,\"2431\":1,\"2434\":1,\"2484\":2,\"2503\":1,\"2509\":2,\"2538\":1,\"2558\":2,\"2559\":3,\"2567\":1,\"2574\":1,\"2592\":1,\"2614\":1,\"2615\":1,\"2629\":1,\"2665\":1,\"2678\":2,\"2690\":1,\"2691\":1,\"2692\":1,\"2695\":1,\"2697\":1,\"2740\":1,\"2756\":8,\"2796\":1,\"2881\":1}}],[\"1方法的返回值不在作为界面跳转依据\",{\"1\":{\"2876\":1,\"2878\":1}}],[\"1jsp注释\",{\"1\":{\"1952\":1}}],[\"1jsp中的注释\",{\"1\":{\"1952\":1}}],[\"1次\",{\"1\":{\"1822\":3}}],[\"1e7e34\",{\"1\":{\"1650\":1}}],[\"1<\",{\"1\":{\"1640\":1,\"1650\":1,\"2186\":1,\"2267\":1,\"2296\":1,\"2311\":1,\"2374\":1,\"2484\":1,\"2538\":1,\"2629\":1,\"2665\":1,\"2748\":1,\"2875\":1,\"2893\":1}}],[\"1<input\",{\"1\":{\"1348\":1}}],[\"1a\",{\"1\":{\"1482\":1}}],[\"1在head标签中\",{\"1\":{\"1379\":1}}],[\"1+10\",{\"1\":{\"1367\":1}}],[\"1个或多个字符组成的序列\",{\"1\":{\"1355\":1}}],[\"1f\",{\"1\":{\"1314\":2}}],[\"1一起发布\",{\"1\":{\"1208\":1}}],[\"1一端称为表尾\",{\"1\":{\"226\":1}}],[\"1男\",{\"1\":{\"1148\":1}}],[\"1=\",{\"1\":{\"2559\":1}}],[\"1=1\",{\"1\":{\"2444\":3}}],[\"1=monday\",{\"1\":{\"1093\":1}}],[\"1=2\",{\"1\":{\"956\":1}}],[\"1字节\",{\"1\":{\"939\":1}}],[\"1可以生成一个被称为消息摘要的160位\",{\"1\":{\"702\":1}}],[\"1指代的是本机的ip地址\",{\"1\":{\"503\":1}}],[\"1l\",{\"1\":{\"428\":1}}],[\"1st\",{\"1\":{\"279\":1,\"1093\":1}}],[\"16<\",{\"1\":{\"2267\":1,\"2374\":1,\"2500\":1}}],[\"1648197837445521409l\",{\"1\":{\"2209\":1}}],[\"1648197837407772673l\",{\"1\":{\"2209\":1}}],[\"166px\",{\"1\":{\"1695\":1}}],[\"167\",{\"1\":{\"1630\":1}}],[\"16777215\",{\"1\":{\"939\":1}}],[\"165\",{\"1\":{\"1630\":1}}],[\"1658320336844\",{\"1\":{\"371\":1}}],[\"16th<\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"16t15\",{\"1\":{\"379\":1}}],[\"168\",{\"1\":{\"503\":1,\"505\":1,\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"1630\":1,\"2168\":1,\"2187\":1,\"2278\":1,\"2293\":1,\"2332\":1,\"2374\":1,\"2501\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"16\",{\"1\":{\"279\":1,\"280\":1,\"287\":3,\"294\":5,\"371\":4,\"395\":1,\"396\":1,\"892\":2,\"942\":1,\"1416\":4,\"1417\":1,\"1928\":1,\"2598\":2,\"2599\":2}}],[\"1600\",{\"1\":{\"1211\":1}}],[\"160\",{\"1\":{\"274\":1,\"275\":1}}],[\"17<\",{\"1\":{\"2307\":1,\"2374\":1}}],[\"178\",{\"1\":{\"1630\":1}}],[\"175cm\",{\"1\":{\"1629\":1}}],[\"17岁\",{\"1\":{\"1629\":1}}],[\"170px\",{\"1\":{\"1529\":1}}],[\"170\",{\"1\":{\"274\":1,\"275\":1}}],[\"17\",{\"1\":{\"238\":1,\"251\":1,\"294\":1,\"380\":2,\"652\":2,\"880\":1,\"899\":1,\"900\":3,\"1211\":2,\"1630\":1}}],[\"1是ai的直接前驱\",{\"1\":{\"226\":1}}],[\"1的单字节编码完成字节与字符的转换\",{\"1\":{\"1801\":1}}],[\"1的直接后续\",{\"1\":{\"226\":1}}],[\"1的n个数据元素是具有相同属件的亓素\",{\"1\":{\"226\":2}}],[\"1的默认模式使用带流水线的持久连接\",{\"1\":{\"164\":1}}],[\"1521\",{\"1\":{\"2297\":1}}],[\"156px\",{\"1\":{\"1695\":2}}],[\"1501\",{\"1\":{\"1975\":1}}],[\"150px\",{\"1\":{\"1529\":1}}],[\"15000\",{\"1\":{\"2695\":1}}],[\"1500\",{\"1\":{\"1211\":1,\"1975\":1,\"2025\":1,\"2031\":1,\"2357\":1,\"2359\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2453\":2,\"2456\":2}}],[\"1511\",{\"1\":{\"893\":1}}],[\"158549300\",{\"1\":{\"892\":1}}],[\"155\",{\"1\":{\"493\":1}}],[\"15t15\",{\"1\":{\"380\":1}}],[\"1592055964263l\",{\"1\":{\"372\":2}}],[\"15\",{\"1\":{\"219\":3,\"287\":3,\"294\":1,\"379\":1,\"380\":4,\"867\":2,\"873\":2,\"892\":1,\"937\":2,\"955\":1,\"965\":1,\"1584\":1,\"2208\":1,\"2210\":1,\"2211\":1}}],[\"134\",{\"1\":{\"900\":3}}],[\"13<\",{\"1\":{\"714\":1,\"715\":1}}],[\"1300\",{\"1\":{\"1211\":1}}],[\"130\",{\"1\":{\"364\":4}}],[\"13\",{\"0\":{\"3013\":1},\"1\":{\"219\":3,\"220\":1,\"251\":1,\"294\":1,\"1211\":1,\"1416\":8,\"1417\":1,\"1665\":1,\"1928\":1,\"2267\":1,\"2374\":2,\"2377\":1,\"2538\":1,\"2629\":1,\"2665\":1}}],[\"1979\",{\"1\":{\"1416\":2}}],[\"1975\",{\"1\":{\"1416\":2}}],[\"1970\",{\"1\":{\"371\":1,\"942\":1,\"1415\":2}}],[\"19rv8qeokk\",{\"1\":{\"1310\":1}}],[\"1982\",{\"1\":{\"1211\":1}}],[\"1987\",{\"1\":{\"1211\":2}}],[\"1981\",{\"1\":{\"1211\":10}}],[\"1980\",{\"1\":{\"1211\":1}}],[\"1901\",{\"1\":{\"942\":1}}],[\"192\",{\"1\":{\"493\":1,\"503\":1,\"505\":1,\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"2168\":1,\"2187\":1,\"2278\":1,\"2293\":1,\"2332\":1,\"2374\":1,\"2501\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"192之间\",{\"1\":{\"493\":1}}],[\"191\",{\"1\":{\"493\":1}}],[\"1998\",{\"1\":{\"895\":1}}],[\"199\",{\"1\":{\"503\":1,\"505\":1}}],[\"1999\",{\"1\":{\"376\":1}}],[\"1997\",{\"1\":{\"375\":1,\"896\":1,\"899\":1,\"1372\":1}}],[\"1996\",{\"1\":{\"70\":1,\"374\":1,\"1372\":2}}],[\"19\",{\"1\":{\"219\":5,\"239\":1,\"241\":1,\"278\":4,\"281\":2,\"283\":2,\"294\":1,\"352\":1,\"425\":1,\"428\":1,\"854\":2,\"869\":3,\"873\":1,\"880\":6,\"881\":3,\"882\":1,\"883\":3,\"942\":1,\"1211\":1,\"1630\":1}}],[\"1xx\",{\"0\":{\"194\":1}}],[\"1协议中预留给能够将连接改为管道方式的代理服务器\",{\"1\":{\"187\":1}}],[\"124\",{\"1\":{\"1253\":1}}],[\"120\",{\"1\":{\"2485\":3}}],[\"1201\",{\"1\":{\"1211\":1}}],[\"1200px\",{\"1\":{\"1600\":1}}],[\"1200\",{\"1\":{\"1211\":1}}],[\"12小时制\",{\"1\":{\"1093\":3}}],[\"1250\",{\"1\":{\"1211\":2}}],[\"1256\",{\"1\":{\"972\":3}}],[\"125\",{\"1\":{\"888\":2}}],[\"121\",{\"1\":{\"868\":4}}],[\"12<\",{\"1\":{\"680\":1,\"683\":1,\"685\":1,\"688\":1,\"714\":1,\"2267\":1,\"2374\":1}}],[\"126\",{\"1\":{\"493\":1,\"972\":6}}],[\"122999999999998\",{\"1\":{\"1409\":1,\"1412\":1}}],[\"122+1900=2022\",{\"1\":{\"371\":1}}],[\"122\",{\"1\":{\"371\":1}}],[\"128~127之间\",{\"1\":{\"364\":1}}],[\"128~127\",{\"1\":{\"364\":1}}],[\"128\",{\"1\":{\"363\":1,\"364\":5,\"493\":1,\"939\":1}}],[\"1234\",{\"1\":{\"1897\":1,\"1909\":3}}],[\"123456789\",{\"1\":{\"1505\":1,\"1578\":1}}],[\"123456\",{\"1\":{\"511\":1,\"512\":1,\"513\":1,\"1972\":4,\"2132\":2,\"2166\":3}}],[\"12345234\",{\"1\":{\"292\":1}}],[\"12306\",{\"1\":{\"1609\":1}}],[\"123123\",{\"1\":{\"1333\":1,\"1338\":1,\"1514\":1,\"2881\":1}}],[\"123123132\",{\"1\":{\"292\":1}}],[\"12323\",{\"1\":{\"292\":1}}],[\"123\",{\"1\":{\"251\":1,\"434\":3,\"972\":6,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1115\":2,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1253\":3,\"1409\":1,\"1412\":1,\"1416\":2,\"2250\":2,\"2785\":1}}],[\"12\",{\"0\":{\"2945\":1,\"3012\":1,\"3073\":1},\"1\":{\"219\":3,\"220\":1,\"226\":2,\"280\":1,\"294\":2,\"362\":2,\"363\":4,\"364\":5,\"371\":1,\"374\":3,\"379\":3,\"869\":3,\"870\":6,\"871\":4,\"872\":4,\"891\":3,\"893\":7,\"897\":4,\"898\":1,\"899\":1,\"900\":1,\"901\":4,\"942\":2,\"972\":3,\"1211\":3,\"1366\":2,\"1542\":1,\"1599\":1,\"1601\":1,\"2030\":3,\"2239\":1,\"2311\":1,\"2538\":1,\"2614\":1,\"2629\":1,\"2665\":1,\"2756\":8,\"2875\":1}}],[\"129\",{\"1\":{\"177\":1}}],[\"127之间\",{\"1\":{\"493\":1}}],[\"127\",{\"1\":{\"88\":1,\"363\":1,\"364\":6,\"502\":1,\"503\":2,\"506\":2,\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"810\":1,\"939\":1,\"1216\":1,\"1330\":2,\"1869\":1,\"1870\":1,\"1976\":1,\"2168\":3,\"2169\":1,\"2297\":1}}],[\"18<\",{\"1\":{\"2665\":2,\"2890\":2,\"2891\":1,\"2892\":2}}],[\"180\",{\"1\":{\"2030\":1}}],[\"18px\",{\"1\":{\"1695\":1}}],[\"1888\",{\"1\":{\"2674\":4}}],[\"188\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"2187\":1,\"2278\":1,\"2293\":1,\"2332\":1,\"2374\":1,\"2501\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"18446744073709551615\",{\"1\":{\"939\":1}}],[\"18t23\",{\"1\":{\"893\":1}}],[\"189\",{\"1\":{\"374\":1}}],[\"18\",{\"1\":{\"176\":1,\"219\":4,\"234\":2,\"278\":1,\"281\":1,\"287\":3,\"294\":1,\"376\":1,\"380\":1,\"881\":2,\"882\":1,\"891\":6,\"893\":5,\"897\":2,\"899\":1,\"922\":1,\"972\":6,\"1555\":1,\"1584\":1,\"1630\":1,\"2183\":1,\"2192\":1,\"2253\":1,\"2267\":1,\"2374\":1,\"2629\":1,\"2665\":1,\"2756\":1,\"2877\":1,\"2891\":1}}],[\"1还允许客户端不用等待上一次请求结果返回\",{\"1\":{\"164\":1}}],[\"1支持持久连接\",{\"1\":{\"164\":1}}],[\"1中header带有大量的信息\",{\"1\":{\"168\":1}}],[\"1中最重要的一个特点是支持\",{\"1\":{\"164\":1}}],[\"1中已经默认使用connection\",{\"1\":{\"164\":1}}],[\"14<\",{\"1\":{\"2186\":1,\"2582\":1,\"2665\":1,\"2756\":1,\"2890\":1}}],[\"148\",{\"1\":{\"1416\":1}}],[\"14159\",{\"1\":{\"1411\":1}}],[\"1415926等\",{\"1\":{\"1354\":1}}],[\"14181775\",{\"1\":{\"899\":1}}],[\"1401\",{\"1\":{\"1211\":1}}],[\"1400\",{\"1\":{\"1211\":2}}],[\"145000000\",{\"1\":{\"893\":2}}],[\"14\",{\"1\":{\"74\":1,\"274\":2,\"275\":1,\"294\":1,\"379\":2,\"652\":3,\"868\":4,\"893\":1,\"942\":1,\"1211\":1,\"1354\":1,\"2756\":1,\"2891\":2}}],[\"1px\",{\"1\":{\"65\":1,\"1319\":1,\"1482\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1512\":2,\"1552\":1,\"1570\":1,\"1571\":7,\"1572\":1,\"1602\":6,\"1630\":1,\"1631\":1,\"1649\":3,\"1651\":3,\"1695\":3,\"1698\":1,\"1793\":1,\"1927\":2,\"1928\":2,\"2159\":1}}],[\"110\",{\"1\":{\"1713\":1}}],[\"1100\",{\"1\":{\"1211\":1}}],[\"117a8b\",{\"1\":{\"1602\":6}}],[\"119\",{\"1\":{\"897\":1}}],[\"118542159\",{\"1\":{\"845\":3}}],[\"1111\",{\"1\":{\"1171\":1}}],[\"111\",{\"1\":{\"262\":1,\"674\":1,\"845\":1,\"1171\":1,\"2220\":2,\"2674\":1}}],[\"11\",{\"0\":{\"2944\":1,\"3011\":1,\"3072\":1},\"1\":{\"61\":1,\"65\":1,\"70\":1,\"117\":1,\"219\":3,\"278\":1,\"281\":1,\"294\":1,\"371\":1,\"374\":1,\"375\":2,\"376\":1,\"868\":4,\"873\":1,\"880\":6,\"881\":3,\"882\":1,\"883\":3,\"887\":1,\"893\":2,\"896\":1,\"899\":1,\"942\":1,\"1171\":1,\"1211\":1,\"1366\":2,\"1386\":5,\"1415\":4,\"1416\":4,\"1680\":2,\"1687\":1,\"1808\":2,\"1928\":1,\"2168\":1,\"2182\":1,\"2417\":1,\"2564\":1,\"2679\":2}}],[\"1148\",{\"1\":{\"49\":1}}],[\"114\",{\"1\":{\"49\":3}}],[\"101\",{\"1\":{\"2022\":1,\"2023\":1}}],[\"10101010\",{\"1\":{\"292\":3}}],[\"10+1\",{\"1\":{\"1990\":1}}],[\"10a\",{\"1\":{\"1987\":1}}],[\"1099\",{\"1\":{\"1777\":1,\"2301\":1}}],[\"10px\",{\"1\":{\"1496\":1,\"1533\":1,\"1534\":2,\"1568\":1,\"1606\":4}}],[\"10岁的男孩儿张三正在睡觉\",{\"1\":{\"1424\":1,\"1425\":1}}],[\"10岁的张三正在吃蛋挞\",{\"1\":{\"1424\":1,\"1425\":1}}],[\"10岁的张三正在吃油条\",{\"1\":{\"1420\":1}}],[\"10整数和\",{\"1\":{\"1367\":1}}],[\"105261100\",{\"1\":{\"845\":2}}],[\"10<\",{\"1\":{\"683\":1}}],[\"1024\",{\"1\":{\"412\":1,\"418\":1,\"515\":1,\"516\":2,\"517\":2,\"518\":2,\"2481\":1}}],[\"10分钟一次\",{\"1\":{\"93\":1}}],[\"1001\",{\"1\":{\"1975\":1}}],[\"10010010\",{\"1\":{\"972\":1}}],[\"100<\",{\"1\":{\"1701\":1}}],[\"100+number+\",{\"1\":{\"1650\":1}}],[\"100px\",{\"1\":{\"1433\":2,\"1482\":2,\"1496\":2,\"1497\":2,\"1521\":8,\"1523\":2,\"1524\":2,\"1525\":2,\"1528\":3,\"1529\":2,\"1533\":6,\"1534\":6,\"1535\":8,\"1568\":2,\"1591\":2,\"1698\":2,\"2159\":2}}],[\"1000的操作还没完成\",{\"1\":{\"2692\":1}}],[\"1000\",{\"1\":{\"459\":1,\"889\":5,\"942\":2,\"1458\":1,\"1757\":1,\"1975\":1,\"2025\":1,\"2031\":1,\"2485\":1,\"2695\":1}}],[\"100000\",{\"1\":{\"371\":1,\"2417\":1}}],[\"10000000\",{\"1\":{\"2485\":1}}],[\"1000000\",{\"1\":{\"309\":3}}],[\"10000\",{\"1\":{\"305\":1,\"306\":1}}],[\"100\",{\"1\":{\"65\":2,\"80\":1,\"114\":1,\"305\":1,\"306\":1,\"327\":2,\"368\":1,\"460\":1,\"461\":1,\"465\":1,\"471\":1,\"480\":1,\"588\":1,\"987\":3,\"1231\":1,\"1235\":1,\"1239\":3,\"1400\":2,\"1595\":1,\"1596\":1,\"1609\":4,\"1616\":1,\"1617\":2,\"1701\":2,\"1707\":1,\"1711\":1,\"1712\":1,\"1715\":1,\"1757\":1,\"1990\":1,\"2022\":1,\"2023\":1,\"2695\":1}}],[\"10\",{\"0\":{\"2942\":1,\"2987\":1,\"3010\":1,\"3071\":1,\"3135\":1,\"3176\":1,\"3186\":1},\"1\":{\"30\":1,\"61\":1,\"177\":1,\"240\":3,\"242\":2,\"272\":1,\"287\":3,\"294\":1,\"309\":3,\"352\":1,\"364\":2,\"367\":1,\"374\":1,\"382\":1,\"438\":3,\"440\":2,\"441\":2,\"442\":1,\"445\":1,\"446\":1,\"450\":1,\"457\":2,\"458\":1,\"465\":1,\"471\":1,\"480\":1,\"489\":2,\"490\":2,\"523\":2,\"525\":2,\"538\":1,\"543\":2,\"585\":2,\"809\":1,\"810\":1,\"837\":1,\"843\":1,\"844\":1,\"892\":1,\"895\":4,\"905\":1,\"937\":2,\"955\":1,\"965\":1,\"972\":1,\"973\":3,\"1147\":2,\"1211\":6,\"1234\":1,\"1287\":1,\"1341\":1,\"1347\":1,\"1348\":1,\"1361\":4,\"1366\":2,\"1367\":4,\"1370\":4,\"1385\":2,\"1406\":1,\"1409\":3,\"1411\":2,\"1412\":3,\"1420\":2,\"1421\":1,\"1424\":1,\"1425\":1,\"1534\":1,\"1617\":1,\"1701\":1,\"1713\":1,\"1892\":1,\"1987\":9,\"1988\":5,\"1990\":1,\"2030\":1,\"2124\":5,\"2128\":5,\"2166\":4,\"2312\":1,\"2317\":1,\"2363\":1,\"2562\":1,\"2563\":1,\"2649\":1,\"2674\":2,\"2824\":1,\"2830\":4}}],[\"1\",{\"0\":{\"164\":1,\"253\":1,\"254\":1,\"658\":1,\"662\":1,\"674\":1,\"678\":1,\"683\":1,\"687\":1,\"689\":1,\"699\":1,\"702\":1,\"705\":1,\"708\":1,\"1167\":1,\"1208\":1,\"2548\":1},\"1\":{\"17\":1,\"21\":1,\"23\":1,\"27\":1,\"30\":1,\"65\":6,\"70\":1,\"71\":3,\"73\":2,\"75\":1,\"88\":1,\"94\":1,\"102\":1,\"103\":3,\"106\":1,\"107\":1,\"109\":1,\"110\":1,\"137\":1,\"142\":1,\"146\":1,\"147\":1,\"164\":6,\"176\":4,\"187\":1,\"190\":2,\"219\":1,\"226\":2,\"228\":2,\"238\":1,\"245\":1,\"251\":1,\"263\":2,\"279\":8,\"286\":3,\"288\":1,\"294\":6,\"296\":1,\"315\":4,\"316\":2,\"318\":2,\"327\":1,\"328\":2,\"333\":1,\"337\":1,\"352\":1,\"363\":1,\"364\":10,\"367\":2,\"368\":2,\"371\":4,\"372\":2,\"373\":1,\"374\":2,\"375\":2,\"376\":3,\"379\":1,\"382\":3,\"404\":2,\"405\":6,\"408\":1,\"409\":3,\"412\":2,\"418\":1,\"421\":1,\"431\":2,\"448\":1,\"457\":1,\"465\":1,\"471\":1,\"475\":1,\"480\":1,\"489\":2,\"490\":2,\"493\":7,\"502\":1,\"503\":1,\"506\":2,\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"538\":1,\"545\":1,\"567\":1,\"581\":2,\"591\":2,\"600\":1,\"651\":4,\"652\":5,\"656\":1,\"674\":3,\"675\":1,\"676\":1,\"680\":1,\"683\":4,\"685\":2,\"689\":1,\"690\":1,\"691\":1,\"702\":2,\"706\":1,\"711\":1,\"714\":2,\"715\":2,\"810\":1,\"825\":1,\"826\":1,\"835\":1,\"837\":1,\"845\":1,\"860\":1,\"865\":1,\"866\":1,\"867\":2,\"869\":2,\"870\":3,\"871\":4,\"872\":3,\"873\":4,\"874\":1,\"875\":2,\"876\":1,\"885\":2,\"886\":1,\"887\":2,\"889\":5,\"895\":1,\"899\":1,\"900\":2,\"937\":2,\"940\":2,\"955\":1,\"965\":1,\"972\":1,\"979\":1,\"1001\":3,\"1093\":6,\"1106\":1,\"1112\":1,\"1183\":1,\"1208\":1,\"1211\":1,\"1215\":1,\"1216\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":2,\"1234\":4,\"1235\":2,\"1242\":1,\"1246\":2,\"1249\":4,\"1252\":2,\"1253\":5,\"1264\":3,\"1266\":1,\"1274\":1,\"1278\":1,\"1283\":1,\"1285\":1,\"1317\":1,\"1318\":1,\"1330\":3,\"1335\":1,\"1336\":1,\"1340\":1,\"1347\":1,\"1348\":1,\"1359\":1,\"1362\":5,\"1363\":2,\"1364\":2,\"1366\":2,\"1367\":3,\"1370\":1,\"1380\":1,\"1383\":1,\"1388\":1,\"1389\":1,\"1391\":1,\"1399\":1,\"1400\":3,\"1401\":2,\"1406\":2,\"1408\":3,\"1409\":1,\"1411\":3,\"1412\":1,\"1415\":8,\"1416\":2,\"1417\":2,\"1439\":1,\"1458\":1,\"1490\":1,\"1491\":1,\"1508\":1,\"1518\":1,\"1519\":3,\"1532\":1,\"1541\":1,\"1542\":2,\"1543\":1,\"1544\":1,\"1545\":1,\"1546\":1,\"1548\":2,\"1549\":2,\"1552\":3,\"1555\":3,\"1558\":2,\"1563\":1,\"1564\":1,\"1572\":2,\"1573\":1,\"1579\":3,\"1584\":1,\"1585\":2,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":2,\"1591\":1,\"1596\":1,\"1602\":2,\"1606\":1,\"1609\":2,\"1631\":1,\"1687\":1,\"1695\":1,\"1730\":1,\"1756\":2,\"1757\":2,\"1765\":5,\"1769\":2,\"1775\":1,\"1791\":1,\"1795\":1,\"1812\":2,\"1814\":1,\"1831\":1,\"1834\":1,\"1869\":1,\"1870\":1,\"1893\":2,\"1927\":2,\"1928\":3,\"1972\":5,\"1976\":1,\"1980\":2,\"1981\":2,\"1982\":1,\"1990\":2,\"1999\":1,\"2014\":1,\"2025\":4,\"2047\":1,\"2058\":1,\"2075\":1,\"2088\":2,\"2092\":1,\"2168\":3,\"2169\":1,\"2183\":1,\"2186\":2,\"2187\":1,\"2234\":1,\"2241\":1,\"2244\":7,\"2248\":2,\"2267\":1,\"2278\":2,\"2279\":1,\"2286\":1,\"2289\":1,\"2293\":1,\"2297\":1,\"2312\":3,\"2332\":1,\"2374\":3,\"2417\":3,\"2485\":1,\"2487\":1,\"2501\":4,\"2503\":1,\"2509\":2,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2557\":2,\"2558\":3,\"2559\":1,\"2566\":2,\"2567\":1,\"2571\":1,\"2582\":1,\"2583\":1,\"2584\":1,\"2588\":4,\"2590\":2,\"2591\":2,\"2592\":1,\"2594\":1,\"2599\":1,\"2615\":1,\"2630\":1,\"2631\":3,\"2648\":1,\"2651\":1,\"2665\":1,\"2666\":2,\"2672\":1,\"2678\":2,\"2690\":1,\"2691\":1,\"2692\":1,\"2695\":1,\"2697\":1,\"2702\":2,\"2715\":1,\"2746\":1,\"2756\":1,\"2757\":2,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2796\":2,\"2800\":2,\"2827\":4,\"2877\":1,\"2881\":1,\"2890\":1,\"2896\":2,\"2897\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1,\"2918\":1,\"2925\":1}}],[\"0=\",{\"1\":{\"2559\":1}}],[\"0=sunday\",{\"1\":{\"1093\":1}}],[\"0版本之前的cookie中是不支持中文存储的\",{\"1\":{\"1889\":1}}],[\"0以及之后的版本中支持注解式开发servlet\",{\"1\":{\"1848\":1}}],[\"0用一种替代的方法\",{\"1\":{\"1209\":1}}],[\"0是原来是用drivermanager类来产生一个对数据源的连接\",{\"1\":{\"1209\":1}}],[\"0女\",{\"1\":{\"1148\":1}}],[\"0值\",{\"1\":{\"942\":1}}],[\"0~4294967295字节\",{\"1\":{\"941\":2}}],[\"0~16777215字节\",{\"1\":{\"941\":2}}],[\"0~65535字节\",{\"1\":{\"941\":1}}],[\"0~65535字符\",{\"1\":{\"941\":1}}],[\"0~255字节\",{\"1\":{\"941\":3}}],[\"0~255字符\",{\"1\":{\"941\":1}}],[\"0纯动态网站已经显得力不从心\",{\"1\":{\"918\":1}}],[\"0时0分0秒\",{\"1\":{\"898\":2}}],[\"0900\",{\"1\":{\"937\":1,\"965\":1,\"2417\":3,\"2695\":1,\"2881\":1}}],[\"09\",{\"0\":{\"2946\":1,\"2986\":1,\"3009\":1,\"3070\":1,\"3119\":1,\"3134\":1,\"3166\":1,\"3175\":1,\"3185\":1},\"1\":{\"892\":1,\"898\":1,\"901\":4,\"1211\":3,\"2276\":1,\"2282\":2,\"2374\":2}}],[\"0<\",{\"1\":{\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"2267\":1,\"2500\":1,\"2629\":1,\"2665\":1,\"2748\":1,\"2756\":3,\"2885\":1,\"2889\":1,\"2891\":1}}],[\"0提供了四种元注解\",{\"1\":{\"552\":1}}],[\"0之后使用注解\",{\"0\":{\"546\":1}}],[\"0之后提供了多种并发类容器可以替代同步类容器\",{\"1\":{\"308\":1}}],[\"0之前的配置\",{\"0\":{\"545\":1}}],[\"0开始\",{\"1\":{\"397\":1}}],[\"0800\",{\"1\":{\"374\":1}}],[\"08\",{\"0\":{\"2943\":1,\"2967\":1,\"2985\":1,\"3008\":1,\"3069\":1,\"3087\":1,\"3120\":1,\"3133\":1,\"3144\":1,\"3165\":1,\"3174\":1,\"3184\":1},\"1\":{\"374\":1,\"1211\":1}}],[\"07\",{\"0\":{\"2941\":1,\"2966\":1,\"2984\":1,\"3000\":1,\"3007\":1,\"3046\":1,\"3061\":1,\"3068\":1,\"3086\":1,\"3099\":1,\"3118\":1,\"3132\":1,\"3143\":1,\"3163\":1,\"3173\":1,\"3183\":1},\"1\":{\"374\":2,\"375\":1,\"379\":7,\"942\":2}}],[\"008cff\",{\"1\":{\"1695\":1}}],[\"002\",{\"1\":{\"1093\":1}}],[\"0017ff\",{\"1\":{\"1695\":1}}],[\"001\",{\"1\":{\"1093\":1}}],[\"0000\",{\"1\":{\"942\":4}}],[\"000001511\",{\"1\":{\"893\":1}}],[\"000023145\",{\"1\":{\"893\":1}}],[\"00\",{\"0\":{\"2934\":1,\"3032\":1,\"3038\":1},\"1\":{\"371\":3,\"374\":3,\"891\":6,\"901\":2,\"942\":20,\"1093\":2,\"1416\":6,\"1417\":1,\"2031\":1,\"2564\":1,\"2674\":2}}],[\"0对tls的安全性做了近一步加强\",{\"1\":{\"170\":1}}],[\"0使用了tls的拓展alpn做为协议升级\",{\"1\":{\"170\":1}}],[\"0使用encoder来减少需要传输的hearder大小\",{\"1\":{\"168\":1}}],[\"0中的cookie是支持中文存储的\",{\"1\":{\"1889\":1}}],[\"0中支持\",{\"1\":{\"1885\":1}}],[\"0中\",{\"1\":{\"167\":1,\"169\":1}}],[\"0中引入了新的编码机制\",{\"1\":{\"167\":1}}],[\"0中所有加强性能的核心是二进制传输\",{\"1\":{\"167\":1}}],[\"0中默认使用connection\",{\"1\":{\"164\":1}}],[\"0px\",{\"1\":{\"65\":1,\"1319\":1,\"1529\":3,\"1536\":1,\"1793\":3,\"1927\":1,\"1928\":1,\"1976\":3,\"2025\":3,\"2031\":3}}],[\"06t\",{\"1\":{\"892\":1}}],[\"06\",{\"0\":{\"2940\":1,\"2965\":1,\"2983\":1,\"2993\":1,\"2999\":1,\"3006\":1,\"3019\":1,\"3028\":1,\"3044\":1,\"3060\":1,\"3067\":1,\"3079\":1,\"3085\":1,\"3097\":1,\"3117\":1,\"3131\":1,\"3141\":1,\"3164\":1,\"3172\":1,\"3181\":1},\"1\":{\"53\":1,\"380\":2,\"893\":2,\"1211\":1}}],[\"05\",{\"0\":{\"2937\":1,\"2956\":1,\"2964\":1,\"2971\":1,\"2982\":1,\"2992\":1,\"2998\":1,\"3005\":1,\"3022\":1,\"3027\":1,\"3043\":1,\"3054\":1,\"3058\":1,\"3066\":1,\"3078\":1,\"3084\":1,\"3096\":1,\"3102\":1,\"3108\":1,\"3115\":1,\"3125\":1,\"3130\":1,\"3140\":1,\"3148\":1,\"3153\":1,\"3162\":1,\"3171\":1,\"3182\":1},\"1\":{\"53\":1,\"893\":1,\"1211\":2,\"2615\":2}}],[\"04\",{\"0\":{\"2938\":1,\"2955\":1,\"2963\":1,\"2975\":1,\"2981\":1,\"2991\":1,\"2997\":1,\"3004\":1,\"3017\":1,\"3026\":1,\"3042\":1,\"3049\":1,\"3053\":1,\"3059\":1,\"3065\":1,\"3076\":1,\"3082\":1,\"3091\":1,\"3095\":1,\"3103\":1,\"3109\":1,\"3114\":1,\"3124\":1,\"3129\":1,\"3139\":1,\"3147\":1,\"3152\":1,\"3159\":1,\"3161\":1,\"3170\":1,\"3180\":1},\"1\":{\"53\":1,\"379\":6,\"901\":1,\"1211\":2,\"2030\":1,\"2192\":1,\"2276\":1,\"2282\":2,\"2374\":3,\"2377\":1,\"2574\":2}}],[\"036+08\",{\"1\":{\"901\":1}}],[\"036z\",{\"1\":{\"901\":1}}],[\"036\",{\"1\":{\"901\":2}}],[\"03\",{\"0\":{\"2939\":1,\"2954\":1,\"2959\":1,\"2961\":1,\"2970\":1,\"2977\":1,\"2979\":1,\"2990\":1,\"2996\":1,\"3003\":1,\"3015\":1,\"3021\":1,\"3025\":1,\"3034\":1,\"3037\":1,\"3041\":1,\"3048\":1,\"3052\":1,\"3056\":1,\"3064\":1,\"3075\":1,\"3083\":1,\"3090\":1,\"3094\":1,\"3101\":1,\"3107\":1,\"3111\":1,\"3116\":1,\"3123\":1,\"3128\":1,\"3138\":1,\"3146\":1,\"3151\":1,\"3157\":1,\"3160\":1,\"3169\":1,\"3179\":1},\"1\":{\"53\":1,\"380\":2,\"942\":1,\"1093\":1,\"1198\":1,\"1211\":2,\"1897\":1,\"1898\":1}}],[\"02<\",{\"1\":{\"2885\":1}}],[\"02\",{\"0\":{\"1166\":1,\"2935\":1,\"2953\":1,\"2958\":1,\"2962\":1,\"2969\":1,\"2973\":1,\"2976\":1,\"2980\":1,\"2989\":1,\"2994\":1,\"3001\":1,\"3016\":1,\"3020\":1,\"3023\":1,\"3030\":1,\"3033\":1,\"3036\":1,\"3040\":1,\"3047\":1,\"3051\":1,\"3057\":1,\"3063\":1,\"3077\":1,\"3081\":1,\"3088\":1,\"3092\":1,\"3100\":1,\"3105\":1,\"3110\":1,\"3113\":1,\"3122\":1,\"3127\":1,\"3137\":1,\"3145\":1,\"3150\":1,\"3156\":1,\"3158\":1,\"3168\":1,\"3178\":1},\"1\":{\"53\":2,\"88\":2,\"380\":1,\"1093\":6,\"1161\":4,\"1162\":1,\"1211\":3,\"2926\":3,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"01<\",{\"1\":{\"2748\":1}}],[\"01t19\",{\"1\":{\"900\":3}}],[\"01t12\",{\"1\":{\"893\":1}}],[\"01\",{\"0\":{\"2936\":1,\"2947\":1,\"2952\":1,\"2957\":1,\"2960\":1,\"2968\":1,\"2972\":1,\"2974\":1,\"2978\":1,\"2988\":1,\"2995\":1,\"3002\":1,\"3014\":1,\"3018\":1,\"3024\":1,\"3029\":1,\"3031\":1,\"3035\":1,\"3039\":1,\"3045\":1,\"3050\":1,\"3055\":1,\"3062\":1,\"3074\":1,\"3080\":1,\"3089\":1,\"3093\":1,\"3098\":1,\"3104\":1,\"3106\":1,\"3112\":1,\"3121\":1,\"3126\":1,\"3136\":1,\"3142\":1,\"3149\":1,\"3154\":1,\"3155\":1,\"3167\":1,\"3177\":1},\"1\":{\"53\":1,\"87\":2,\"545\":1,\"891\":1,\"893\":1,\"900\":3,\"942\":8,\"1093\":6,\"1211\":2,\"1417\":1,\"2564\":1,\"2753\":1,\"2764\":1,\"2820\":1}}],[\"0\",{\"0\":{\"163\":1,\"165\":1,\"1208\":1,\"1209\":1},\"1\":{\"17\":1,\"24\":1,\"26\":1,\"32\":1,\"65\":1,\"68\":1,\"70\":1,\"71\":1,\"73\":2,\"76\":1,\"88\":2,\"117\":1,\"137\":1,\"177\":3,\"245\":1,\"251\":2,\"260\":1,\"262\":1,\"263\":2,\"278\":1,\"279\":3,\"280\":2,\"283\":1,\"286\":2,\"288\":2,\"294\":8,\"296\":1,\"298\":1,\"305\":1,\"306\":1,\"309\":6,\"316\":4,\"328\":3,\"338\":1,\"364\":4,\"367\":5,\"368\":3,\"371\":3,\"374\":4,\"375\":1,\"376\":2,\"382\":7,\"395\":1,\"396\":1,\"405\":2,\"408\":1,\"409\":2,\"412\":1,\"418\":1,\"421\":1,\"431\":1,\"438\":2,\"440\":2,\"441\":2,\"442\":1,\"445\":1,\"446\":1,\"457\":2,\"458\":2,\"460\":2,\"461\":1,\"465\":1,\"471\":1,\"480\":1,\"493\":12,\"494\":1,\"502\":2,\"503\":4,\"506\":4,\"509\":2,\"510\":2,\"511\":2,\"512\":2,\"513\":3,\"523\":1,\"525\":1,\"532\":1,\"538\":1,\"545\":3,\"651\":2,\"674\":1,\"680\":9,\"683\":9,\"699\":2,\"714\":19,\"715\":19,\"809\":1,\"810\":3,\"825\":2,\"826\":2,\"835\":2,\"837\":1,\"870\":3,\"873\":6,\"888\":4,\"891\":1,\"899\":1,\"921\":1,\"922\":2,\"923\":3,\"925\":1,\"939\":5,\"976\":1,\"979\":1,\"1072\":1,\"1106\":2,\"1208\":1,\"1209\":1,\"1211\":1,\"1216\":2,\"1231\":1,\"1234\":1,\"1235\":2,\"1251\":1,\"1264\":2,\"1266\":3,\"1274\":1,\"1275\":3,\"1280\":1,\"1288\":1,\"1310\":2,\"1330\":4,\"1335\":1,\"1340\":1,\"1361\":2,\"1367\":2,\"1372\":1,\"1383\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1400\":1,\"1405\":1,\"1409\":2,\"1411\":2,\"1412\":2,\"1415\":21,\"1416\":5,\"1458\":1,\"1459\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1544\":2,\"1555\":1,\"1573\":6,\"1574\":1,\"1579\":5,\"1584\":1,\"1585\":1,\"1586\":4,\"1590\":2,\"1591\":1,\"1609\":1,\"1613\":2,\"1614\":1,\"1621\":1,\"1622\":2,\"1640\":1,\"1650\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1676\":1,\"1680\":1,\"1687\":2,\"1690\":1,\"1695\":2,\"1698\":9,\"1701\":1,\"1775\":1,\"1776\":1,\"1779\":1,\"1791\":3,\"1795\":3,\"1831\":3,\"1834\":3,\"1869\":2,\"1870\":2,\"1893\":1,\"1952\":1,\"1972\":1,\"1975\":1,\"1976\":2,\"1982\":1,\"1987\":2,\"1991\":1,\"1999\":3,\"2022\":1,\"2023\":1,\"2029\":4,\"2030\":2,\"2031\":2,\"2047\":3,\"2058\":3,\"2075\":3,\"2092\":1,\"2124\":1,\"2128\":1,\"2168\":6,\"2169\":2,\"2176\":1,\"2186\":1,\"2234\":2,\"2259\":1,\"2260\":2,\"2267\":10,\"2278\":2,\"2279\":2,\"2297\":2,\"2312\":1,\"2357\":1,\"2359\":1,\"2363\":2,\"2374\":6,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2453\":1,\"2456\":1,\"2479\":1,\"2485\":1,\"2487\":1,\"2493\":2,\"2500\":1,\"2501\":3,\"2509\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2558\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2582\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2631\":2,\"2648\":1,\"2665\":1,\"2666\":1,\"2667\":4,\"2674\":2,\"2676\":3,\"2695\":2,\"2697\":1,\"2702\":7,\"2707\":1,\"2711\":1,\"2746\":3,\"2748\":9,\"2756\":1,\"2757\":1,\"2758\":1,\"2759\":3,\"2779\":1,\"2780\":1,\"2789\":1,\"2796\":1,\"2800\":2,\"2843\":1,\"2885\":8,\"2890\":1,\"2893\":1,\"2894\":1,\"2896\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1,\"2918\":2,\"2925\":5}}],[\"hub远程库常用操作\",{\"0\":{\"3052\":1}}],[\"h2\",{\"1\":{\"1548\":1,\"2179\":1,\"2785\":1}}],[\"h2>\",{\"1\":{\"1299\":1,\"1508\":3,\"1509\":3,\"1510\":3,\"1606\":1,\"2786\":1}}],[\"h32\",{\"1\":{\"1548\":1}}],[\"h3~p\",{\"1\":{\"1548\":1}}],[\"h3+p\",{\"1\":{\"1548\":1}}],[\"h31\",{\"1\":{\"1548\":4}}],[\"h3\",{\"1\":{\"1548\":2}}],[\"h3>\",{\"1\":{\"1299\":1,\"1548\":2,\"1555\":1,\"1571\":1,\"1606\":4}}],[\"h+\",{\"1\":{\"1417\":1}}],[\"hbuilder内置服务器的端口号\",{\"1\":{\"1330\":1}}],[\"hbuilderx\",{\"1\":{\"1327\":1}}],[\"hbuilder\",{\"0\":{\"1327\":1}}],[\"hbase等\",{\"1\":{\"918\":1}}],[\"hypertext\",{\"1\":{\"1325\":1}}],[\"hypochondria\",{\"1\":{\"1185\":1}}],[\"href$=\",{\"1\":{\"1549\":1}}],[\"href^=\",{\"1\":{\"1549\":1}}],[\"href\",{\"1\":{\"1312\":1,\"1462\":2,\"1549\":5,\"1870\":1}}],[\"href=\",{\"1\":{\"130\":1,\"138\":1,\"1189\":1,\"1293\":1,\"1312\":7,\"1314\":4,\"1315\":1,\"1331\":1,\"1463\":1,\"1472\":1,\"1479\":2,\"1515\":1,\"1549\":10,\"1563\":1,\"1564\":1,\"1596\":1,\"1602\":1,\"1606\":5,\"1609\":3,\"1660\":1,\"1869\":1,\"1870\":7,\"2786\":1}}],[\"h8>\",{\"1\":{\"1299\":1}}],[\"h5>\",{\"1\":{\"1299\":1,\"1609\":4}}],[\"h4>\",{\"1\":{\"1299\":1}}],[\"h7之后都属于无效标签\",{\"1\":{\"1299\":1}}],[\"h7>\",{\"1\":{\"1299\":2}}],[\"h6>\",{\"1\":{\"1299\":1}}],[\"h6\",{\"1\":{\"1299\":1}}],[\"h1<\",{\"1\":{\"1808\":1}}],[\"h1>\",{\"1\":{\"1299\":1,\"1314\":4,\"1317\":2,\"1318\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1499\":1,\"1500\":1,\"1508\":4,\"1509\":4,\"1510\":4,\"1513\":10,\"1515\":1,\"1570\":2,\"1596\":2,\"1613\":1,\"1614\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1635\":1,\"1707\":1,\"1711\":2,\"1712\":2,\"1713\":1,\"1715\":2,\"1808\":1,\"2159\":1,\"2750\":1,\"2861\":2}}],[\"h1>~<h7><\",{\"1\":{\"1299\":1}}],[\"h1\",{\"1\":{\"1299\":1,\"1471\":1,\"1472\":1,\"1508\":1,\"1513\":1,\"1613\":1}}],[\"h主机地址\",{\"1\":{\"1152\":1}}],[\"h和\",{\"1\":{\"1093\":1}}],[\"hlocalhost\",{\"1\":{\"925\":1}}],[\"hibernate\",{\"1\":{\"2530\":1}}],[\"hibernate是支持正向工程的\",{\"1\":{\"2497\":1}}],[\"hibernate3\",{\"1\":{\"534\":1}}],[\"hit\",{\"1\":{\"2479\":1}}],[\"hide\",{\"1\":{\"1588\":2}}],[\"hiddenhttpmethodfilter<\",{\"1\":{\"2829\":1,\"2830\":1}}],[\"hidden=\",{\"1\":{\"1609\":2,\"2830\":2}}],[\"hidden\",{\"0\":{\"1338\":1,\"1523\":1},\"1\":{\"1338\":1,\"1523\":2,\"1554\":1,\"1555\":6,\"2830\":2}}],[\"history对象是window对象的一个属性\",{\"1\":{\"1463\":1}}],[\"history对象\",{\"0\":{\"1463\":1}}],[\"history\",{\"1\":{\"1451\":3,\"1463\":3}}],[\"hisal\",{\"1\":{\"1211\":7}}],[\"hi\",{\"1\":{\"1406\":1}}],[\"hiredate=resultset\",{\"1\":{\"1976\":1}}],[\"hiredate\",{\"1\":{\"1211\":16,\"1976\":3,\"2025\":1,\"2031\":1,\"2362\":1,\"2374\":1,\"2425\":3,\"2428\":3,\"2431\":2,\"2435\":1,\"2444\":4,\"2447\":4,\"2450\":4,\"2453\":4,\"2456\":4,\"2462\":2,\"2667\":1,\"2674\":1}}],[\"hijrahdate\",{\"1\":{\"892\":1}}],[\"highsal\",{\"1\":{\"1211\":1}}],[\"high属性并保存在sun\",{\"1\":{\"364\":1}}],[\"high\",{\"1\":{\"363\":1,\"364\":8,\"1310\":1}}],[\"hh\",{\"1\":{\"374\":1,\"380\":2,\"459\":1,\"897\":1,\"942\":3,\"1285\":1,\"1287\":1,\"1417\":1,\"2031\":1,\"2087\":1,\"2128\":1,\"2298\":1,\"2308\":1,\"2312\":2,\"2374\":1,\"2487\":1,\"2757\":1,\"2896\":1}}],[\"h指向了head\",{\"1\":{\"338\":1}}],[\"h\",{\"0\":{\"2978\":1,\"2989\":1,\"3088\":1,\"3089\":1,\"3091\":1},\"1\":{\"279\":3,\"294\":12,\"338\":5,\"364\":3,\"374\":2,\"644\":1,\"847\":1,\"848\":1,\"925\":1,\"1093\":1,\"1406\":2,\"1571\":2,\"1689\":2,\"1927\":2,\"1928\":2,\"2030\":2,\"2245\":1,\"2246\":1,\"2250\":1,\"2608\":1,\"2609\":1}}],[\"hsql\",{\"1\":{\"2179\":1}}],[\"hs\",{\"1\":{\"278\":9,\"283\":9,\"772\":1}}],[\"hover\",{\"1\":{\"1515\":2}}],[\"how\",{\"1\":{\"1185\":2}}],[\"hours\",{\"1\":{\"1414\":1,\"1458\":2,\"1459\":2}}],[\"hour\",{\"1\":{\"1093\":5}}],[\"hotspot\",{\"1\":{\"772\":1}}],[\"hotfix\",{\"0\":{\"804\":1},\"1\":{\"750\":1}}],[\"home以及catalina\",{\"1\":{\"1779\":1}}],[\"home指向我们现在使用的这个tomcat\",{\"1\":{\"1740\":1}}],[\"home系统参数\",{\"1\":{\"676\":1}}],[\"home变量\",{\"1\":{\"674\":1}}],[\"home\",{\"1\":{\"674\":3,\"676\":1,\"1606\":2,\"1740\":2,\"1741\":2,\"1779\":1}}],[\"home环境变量\",{\"1\":{\"674\":1}}],[\"holder\",{\"1\":{\"294\":1}}],[\"host=localhost\",{\"1\":{\"2857\":1}}],[\"host把httpservletresponse返回给engine\",{\"1\":{\"1769\":1}}],[\"host会根据\",{\"1\":{\"1769\":1}}],[\"host组件匹配主机\",{\"1\":{\"1769\":1}}],[\"host组件\",{\"0\":{\"1767\":1},\"1\":{\"1769\":1}}],[\"hostname\",{\"1\":{\"1462\":1}}],[\"host主机名\",{\"1\":{\"925\":1}}],[\"host\",{\"1\":{\"177\":1,\"928\":2,\"1462\":1,\"1768\":1,\"2168\":1}}],[\"hobby\",{\"1\":{\"137\":3,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1490\":3,\"1491\":4,\"1629\":1,\"1982\":4,\"2796\":4}}],[\"hobby=羽毛球\",{\"1\":{\"135\":1}}],[\"hobby=篮球\",{\"1\":{\"135\":1}}],[\"handladapter\",{\"0\":{\"2772\":1},\"1\":{\"2773\":1}}],[\"handleradapter的实现类的作用\",{\"1\":{\"2781\":1}}],[\"handleradapter\",{\"1\":{\"2772\":1}}],[\"handleradapter处理器适配器执行handler处理器\",{\"1\":{\"2768\":1}}],[\"handlermapping处理器映射器未能发现对应的controller处理单元\",{\"1\":{\"2788\":1}}],[\"handlermapping的实现类的作用\",{\"1\":{\"2781\":1}}],[\"handlermapping与handladapter\",{\"0\":{\"2776\":1}}],[\"handlermapping\",{\"0\":{\"2771\":1},\"1\":{\"2771\":1}}],[\"handler\",{\"0\":{\"2773\":1},\"1\":{\"2509\":1,\"2771\":1,\"2773\":2}}],[\"handler=\",{\"1\":{\"2509\":1}}],[\"handlelocallycachedoutputparameters\",{\"1\":{\"2493\":1}}],[\"handbook\",{\"1\":{\"65\":1}}],[\"haha\",{\"1\":{\"1839\":1,\"1840\":2,\"1841\":2,\"1842\":2}}],[\"having后面可以使用聚合函数\",{\"1\":{\"1042\":1}}],[\"having与where的区别\",{\"1\":{\"1042\":1}}],[\"having\",{\"0\":{\"1042\":1},\"1\":{\"1042\":4}}],[\"have\",{\"1\":{\"294\":1}}],[\"happy\",{\"1\":{\"750\":4,\"1787\":2,\"1790\":2}}],[\"hard\",{\"1\":{\"729\":1,\"731\":1,\"741\":2,\"742\":1}}],[\"hasmoreelements\",{\"1\":{\"1800\":1,\"1801\":1,\"1831\":1,\"2049\":1,\"2052\":1}}],[\"haschildnodes\",{\"1\":{\"1486\":1}}],[\"haswaiters\",{\"1\":{\"478\":1}}],[\"hashentry<k\",{\"1\":{\"311\":1}}],[\"hashtable<>\",{\"1\":{\"309\":1}}],[\"hashtable<string\",{\"1\":{\"309\":1}}],[\"hashtableconcurrentskiplistmap替代treemap\",{\"1\":{\"308\":1}}],[\"hashtable\",{\"0\":{\"298\":1}}],[\"hashtable和properties\",{\"1\":{\"289\":1}}],[\"hash碰撞的几率会高很多\",{\"1\":{\"296\":1}}],[\"hashseed\",{\"1\":{\"294\":1}}],[\"hashset底层是hashmap\",{\"1\":{\"280\":1}}],[\"hashset<string>\",{\"1\":{\"859\":1,\"878\":1}}],[\"hashset<student>\",{\"1\":{\"278\":1,\"281\":1}}],[\"hashset<>\",{\"1\":{\"278\":2,\"281\":1,\"859\":1}}],[\"hashset<integer>\",{\"1\":{\"278\":1}}],[\"hashset不保证元素是有序的\",{\"1\":{\"277\":1}}],[\"hashset实际上是hashmap\",{\"1\":{\"277\":1}}],[\"hashset\",{\"0\":{\"277\":1},\"1\":{\"276\":1,\"279\":4,\"878\":2}}],[\"hashing\",{\"1\":{\"294\":2}}],[\"hash方法返回这个key对应的哈希值\",{\"1\":{\"294\":1}}],[\"hashmap扩容时会重新计算原有数组中的值在新数组中的位置\",{\"1\":{\"295\":1}}],[\"hashmap会自动扩容\",{\"1\":{\"294\":1}}],[\"hashmap<k\",{\"1\":{\"294\":1}}],[\"hashmap<string\",{\"1\":{\"292\":2,\"309\":1,\"859\":1,\"2205\":1,\"2210\":1,\"2357\":1,\"2395\":1,\"2801\":1}}],[\"hashmap<>\",{\"1\":{\"279\":1,\"292\":2,\"309\":1,\"859\":1,\"1972\":1,\"2205\":1,\"2210\":1,\"2242\":1,\"2357\":1,\"2395\":1}}],[\"hashmap没有实现同步\",{\"1\":{\"290\":1}}],[\"hashmap是以key\",{\"1\":{\"290\":1}}],[\"hashmap\",{\"0\":{\"290\":1},\"1\":{\"289\":1,\"294\":2,\"308\":1}}],[\"hashmap的唯一性的特性会失效\",{\"1\":{\"281\":1}}],[\"hash\",{\"1\":{\"279\":12,\"281\":1,\"294\":17,\"702\":1}}],[\"hashcodes\",{\"1\":{\"294\":1}}],[\"hashcode\",{\"0\":{\"281\":1},\"1\":{\"279\":1,\"281\":2,\"294\":2,\"831\":2,\"869\":2,\"1274\":6,\"1280\":6,\"1288\":7,\"2076\":2,\"2077\":3,\"2097\":2}}],[\"hasprevious\",{\"1\":{\"266\":3,\"2286\":2}}],[\"hasnext\",{\"0\":{\"269\":1},\"1\":{\"220\":2,\"251\":1,\"260\":2,\"265\":1,\"266\":3,\"292\":3,\"422\":1,\"2286\":2}}],[\"hasnextint\",{\"1\":{\"17\":2}}],[\"has\",{\"1\":{\"73\":1,\"1683\":1}}],[\"heihei\",{\"1\":{\"1840\":1}}],[\"height=\",{\"1\":{\"274\":1,\"275\":1,\"1310\":2,\"1319\":1,\"1321\":2}}],[\"height\",{\"1\":{\"65\":3,\"274\":9,\"275\":9,\"576\":1,\"1309\":1,\"1433\":1,\"1464\":1,\"1482\":1,\"1496\":2,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1521\":12,\"1523\":3,\"1524\":4,\"1525\":4,\"1528\":1,\"1529\":2,\"1533\":4,\"1534\":4,\"1535\":6,\"1536\":1,\"1568\":3,\"1570\":1,\"1571\":1,\"1572\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":2,\"1629\":1,\"1630\":5,\"1650\":1,\"1695\":2,\"1698\":1,\"2159\":1}}],[\"hehe\",{\"1\":{\"1840\":2,\"1841\":3,\"1842\":3}}],[\"hege\",{\"1\":{\"1392\":2}}],[\"healthcheck\",{\"1\":{\"1185\":1}}],[\"head标签中加入一个style标签\",{\"1\":{\"1471\":1}}],[\"head标签中可以加入\",{\"1\":{\"1293\":1}}],[\"head标签中\",{\"1\":{\"1293\":1}}],[\"head标签用于定义文档的头部\",{\"1\":{\"1292\":1}}],[\"head~n\",{\"1\":{\"741\":1}}],[\"head^\",{\"1\":{\"729\":1,\"741\":1}}],[\"head的指向指为first\",{\"1\":{\"338\":1}}],[\"head指向一个新的节点\",{\"1\":{\"338\":1}}],[\"headername+\",{\"1\":{\"1800\":1,\"1801\":1}}],[\"headername\",{\"1\":{\"1800\":2,\"1801\":2}}],[\"headernames\",{\"1\":{\"1800\":3,\"1801\":3}}],[\"headerkey\",{\"1\":{\"1800\":1}}],[\"headers=\",{\"1\":{\"2820\":1}}],[\"headers\",{\"0\":{\"177\":1,\"2819\":1},\"1\":{\"2172\":1,\"2820\":1,\"2835\":1,\"2857\":1}}],[\"header和request\",{\"1\":{\"174\":1}}],[\"header\",{\"0\":{\"168\":1},\"1\":{\"150\":3,\"174\":1}}],[\"head\",{\"0\":{\"182\":1,\"1291\":1},\"1\":{\"76\":2,\"338\":4,\"729\":2,\"750\":1,\"1292\":1,\"1695\":3,\"1962\":3}}],[\"head><body><table>\",{\"1\":{\"1927\":1}}],[\"head>`\",{\"1\":{\"76\":1}}],[\"head>\",{\"1\":{\"65\":1,\"1293\":1,\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1322\":1,\"1326\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1482\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1690\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"1928\":1,\"1951\":1,\"1952\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2131\":1,\"2132\":2,\"2159\":2,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2750\":1,\"2786\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"here\",{\"1\":{\"726\":1,\"1180\":2}}],[\"help\",{\"1\":{\"338\":1,\"607\":1,\"772\":1}}],[\"hellovue\",{\"1\":{\"1708\":3}}],[\"hellovue>\",{\"1\":{\"1708\":1}}],[\"hellojhon\",{\"1\":{\"1406\":1}}],[\"hellofriend<\",{\"1\":{\"718\":1}}],[\"hellofriend依赖log4j\",{\"1\":{\"652\":1}}],[\"hellofriend依赖hello\",{\"1\":{\"652\":1}}],[\"hellofriend和hello\",{\"1\":{\"652\":1}}],[\"hello<\",{\"1\":{\"545\":1,\"718\":1,\"1646\":1}}],[\"helloservlet<\",{\"1\":{\"545\":1}}],[\"helloservlet\",{\"1\":{\"545\":1,\"546\":1}}],[\"hello\",{\"1\":{\"76\":1,\"87\":1,\"88\":2,\"114\":1,\"545\":2,\"546\":1,\"750\":4,\"817\":1,\"820\":1,\"830\":2,\"839\":1,\"840\":1,\"847\":1,\"848\":1,\"853\":1,\"1185\":1,\"1304\":1,\"1355\":1,\"1370\":2,\"1406\":1,\"1660\":2,\"1730\":2,\"2125\":2,\"2126\":4,\"2539\":1,\"2594\":2,\"2595\":1,\"2596\":1,\"2597\":1,\"2598\":1,\"2599\":1}}],[\"htm\",{\"1\":{\"1548\":1,\"1549\":3}}],[\"html页面\",{\"1\":{\"2878\":2}}],[\"html中的各种外部引入路径等等\",{\"1\":{\"1928\":1}}],[\"html中跳转的\",{\"1\":{\"1910\":1}}],[\"html文件或文本文件\",{\"1\":{\"1961\":1}}],[\"html文件只有结构\",{\"1\":{\"1691\":1}}],[\"html文件中\",{\"1\":{\"1686\":1}}],[\"htmlwebpackplugin\",{\"1\":{\"1690\":1}}],[\"html也不允许在元素中间随意插值\",{\"1\":{\"1635\":1}}],[\"html=\",{\"1\":{\"1635\":2}}],[\"html会识别模板\",{\"1\":{\"1635\":1}}],[\"html有本质不同\",{\"1\":{\"1635\":1}}],[\"html和jsp开发人员\",{\"1\":{\"2038\":1}}],[\"html和v\",{\"0\":{\"1633\":1},\"1\":{\"1633\":1}}],[\"html和css的关系\",{\"0\":{\"1468\":1}}],[\"html和css和js都是前端的主要技术\",{\"1\":{\"1377\":1}}],[\"html的标准结构\",{\"0\":{\"1326\":1}}],[\"html是一个描述网页的语言\",{\"1\":{\"1325\":1}}],[\"html称为超文本标记语言\",{\"1\":{\"1324\":1}}],[\"html协议\",{\"1\":{\"1324\":1}}],[\"html样式\",{\"0\":{\"1186\":1}}],[\"html代码的时候\",{\"1\":{\"1952\":1}}],[\"html代码\",{\"1\":{\"132\":1,\"133\":1,\"134\":1,\"147\":1}}],[\"html<\",{\"1\":{\"130\":1,\"1795\":1}}],[\"html5新增属性\",{\"1\":{\"1350\":1}}],[\"html5新特性\",{\"0\":{\"1344\":1},\"1\":{\"55\":1}}],[\"html5的类型可以增加校验\",{\"1\":{\"1345\":1}}],[\"html5\",{\"1\":{\"1344\":1}}],[\"html5版本新增了很多类型\",{\"1\":{\"1344\":1}}],[\"html5内容的模板引擎\",{\"1\":{\"122\":1}}],[\"html>\",{\"1\":{\"65\":2,\"1293\":1,\"1298\":2,\"1299\":2,\"1300\":2,\"1301\":2,\"1302\":2,\"1303\":2,\"1304\":2,\"1305\":2,\"1306\":2,\"1309\":2,\"1310\":2,\"1312\":2,\"1314\":2,\"1315\":2,\"1317\":1,\"1318\":1,\"1319\":2,\"1321\":2,\"1322\":2,\"1326\":1,\"1330\":2,\"1331\":2,\"1333\":2,\"1334\":2,\"1335\":2,\"1336\":2,\"1337\":2,\"1338\":2,\"1339\":2,\"1340\":2,\"1341\":2,\"1342\":2,\"1343\":2,\"1345\":2,\"1346\":2,\"1347\":2,\"1348\":2,\"1349\":2,\"1366\":2,\"1367\":2,\"1369\":6,\"1370\":6,\"1379\":2,\"1380\":2,\"1433\":2,\"1436\":2,\"1439\":2,\"1442\":2,\"1454\":2,\"1455\":2,\"1456\":2,\"1458\":2,\"1459\":2,\"1460\":2,\"1462\":2,\"1463\":2,\"1464\":2,\"1470\":2,\"1471\":2,\"1472\":2,\"1482\":2,\"1488\":2,\"1489\":2,\"1490\":2,\"1491\":2,\"1493\":2,\"1494\":2,\"1496\":2,\"1497\":2,\"1499\":2,\"1500\":2,\"1501\":2,\"1505\":2,\"1508\":2,\"1509\":2,\"1510\":2,\"1512\":2,\"1513\":2,\"1514\":2,\"1515\":4,\"1518\":2,\"1521\":8,\"1523\":2,\"1524\":2,\"1525\":2,\"1528\":2,\"1529\":2,\"1532\":2,\"1533\":2,\"1534\":2,\"1535\":4,\"1536\":2,\"1544\":2,\"1545\":2,\"1548\":2,\"1549\":2,\"1552\":2,\"1555\":2,\"1563\":2,\"1564\":2,\"1567\":2,\"1568\":2,\"1570\":2,\"1571\":2,\"1572\":2,\"1573\":2,\"1574\":2,\"1579\":2,\"1585\":2,\"1586\":2,\"1588\":2,\"1589\":2,\"1590\":2,\"1591\":2,\"1596\":2,\"1602\":2,\"1606\":2,\"1609\":2,\"1613\":2,\"1614\":2,\"1690\":2,\"1695\":2,\"1698\":2,\"1701\":2,\"1793\":2,\"1870\":2,\"1907\":2,\"1908\":2,\"1927\":1,\"1928\":1,\"1951\":1,\"1952\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2131\":1,\"2132\":4,\"2159\":4,\"2166\":2,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2750\":1,\"2786\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"html标签\",{\"0\":{\"1289\":1,\"1290\":1},\"1\":{\"55\":1}}],[\"html\",{\"0\":{\"55\":1,\"1635\":1,\"1690\":1,\"1907\":1,\"1908\":1},\"1\":{\"11\":1,\"61\":1,\"130\":1,\"154\":1,\"173\":1,\"176\":1,\"208\":3,\"607\":1,\"921\":1,\"1290\":1,\"1293\":2,\"1312\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1321\":2,\"1322\":1,\"1324\":2,\"1325\":1,\"1326\":1,\"1327\":1,\"1377\":1,\"1463\":1,\"1515\":1,\"1548\":1,\"1549\":5,\"1552\":1,\"1558\":1,\"1559\":1,\"1570\":5,\"1579\":10,\"1586\":8,\"1703\":1,\"1759\":1,\"1806\":1,\"1808\":1,\"1813\":1,\"1842\":1,\"1844\":1,\"1856\":4,\"1860\":4,\"1864\":1,\"1870\":6,\"1874\":4,\"1878\":4,\"1893\":1,\"1904\":1,\"1909\":3,\"1910\":3,\"1927\":1,\"1928\":1,\"1951\":1,\"1952\":1,\"1960\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"1994\":1,\"1996\":1,\"1997\":2,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2096\":1,\"2114\":1,\"2115\":1,\"2120\":1,\"2121\":1,\"2124\":1,\"2128\":2,\"2131\":1,\"2141\":1,\"2144\":1,\"2155\":1,\"2159\":2,\"2161\":1,\"2165\":1,\"2166\":1,\"2169\":1,\"2176\":4,\"2314\":1,\"2740\":1,\"2750\":1,\"2786\":1,\"2793\":1,\"2817\":1,\"2820\":1,\"2824\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"httpjspbase重写了init\",{\"1\":{\"1933\":1}}],[\"httpjspbase\",{\"0\":{\"1933\":1}}],[\"http连接器\",{\"1\":{\"1765\":1}}],[\"http状态码分类\",{\"0\":{\"191\":1},\"1\":{\"1804\":1}}],[\"http响应\",{\"0\":{\"189\":1},\"1\":{\"1803\":1}}],[\"http请求中的所有信息都会被tomcat所解析并封装在这个对象中\",{\"1\":{\"1797\":1}}],[\"http请求方式\",{\"0\":{\"179\":1},\"1\":{\"2828\":1}}],[\"http请求\",{\"0\":{\"171\":1}}],[\"http2中用一条单一的长连接\",{\"1\":{\"166\":1}}],[\"http2\",{\"0\":{\"165\":1},\"1\":{\"167\":2,\"170\":2}}],[\"http1\",{\"0\":{\"163\":1,\"164\":1}}],[\"http允许传输任意类型的数据对象\",{\"1\":{\"158\":1}}],[\"http是一个基于tcp\",{\"1\":{\"154\":1}}],[\"http是一个简单的请求\",{\"1\":{\"1324\":1}}],[\"http是一个简单的\",{\"1\":{\"154\":1}}],[\"http是万维网\",{\"1\":{\"154\":1}}],[\"http\",{\"0\":{\"3127\":2},\"1\":{\"68\":1,\"76\":1,\"85\":1,\"88\":7,\"93\":2,\"135\":1,\"138\":1,\"164\":4,\"176\":2,\"187\":1,\"190\":1,\"545\":5,\"680\":4,\"683\":4,\"714\":8,\"715\":8,\"772\":1,\"810\":3,\"1293\":2,\"1330\":2,\"1549\":7,\"1579\":1,\"1586\":1,\"1690\":1,\"1739\":1,\"1743\":2,\"1756\":1,\"1757\":1,\"1765\":1,\"1777\":1,\"1791\":4,\"1795\":4,\"1812\":1,\"1820\":1,\"1831\":4,\"1834\":4,\"1838\":2,\"1839\":3,\"1840\":3,\"1841\":4,\"1842\":4,\"1848\":1,\"1869\":1,\"1870\":1,\"1999\":4,\"2016\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2028\":1,\"2031\":2,\"2037\":1,\"2047\":4,\"2058\":4,\"2075\":4,\"2168\":1,\"2169\":3,\"2170\":2,\"2171\":2,\"2267\":4,\"2278\":1,\"2279\":1,\"2374\":2,\"2485\":1,\"2501\":1,\"2542\":4,\"2546\":4,\"2553\":4,\"2554\":4,\"2555\":4,\"2559\":6,\"2566\":6,\"2567\":9,\"2584\":7,\"2588\":28,\"2590\":7,\"2591\":7,\"2592\":7,\"2594\":7,\"2599\":7,\"2630\":8,\"2648\":8,\"2666\":14,\"2746\":4,\"2748\":4,\"2753\":1,\"2758\":22,\"2759\":4,\"2764\":1,\"2779\":22,\"2780\":25,\"2789\":25,\"2823\":1,\"2827\":4,\"2885\":4,\"2898\":25,\"2899\":25,\"2903\":25,\"2904\":25,\"2918\":1,\"2926\":3,\"2928\":1,\"2929\":1}}],[\"https传输\",{\"1\":{\"725\":1}}],[\"httpservlet的类定义为servlet组件\",{\"1\":{\"1848\":1}}],[\"httpservlet的service\",{\"1\":{\"1820\":1}}],[\"httpservlet中的init方法是一个空的方法体\",{\"1\":{\"1826\":1}}],[\"httpservletresponse对象代表服务器的响应\",{\"1\":{\"1802\":1}}],[\"httpservletresponse\",{\"0\":{\"1802\":1},\"1\":{\"1790\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1819\":1,\"1820\":1,\"1825\":1,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":2,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":1,\"1997\":2,\"2056\":1,\"2062\":1,\"2063\":2,\"2075\":1,\"2088\":1,\"2095\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2749\":1,\"2793\":1,\"2863\":1,\"2864\":1}}],[\"httpservletrequest对象代表客户端浏览器的请求\",{\"1\":{\"1797\":1}}],[\"httpservletrequest\",{\"0\":{\"1797\":1},\"1\":{\"1790\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1819\":1,\"1820\":2,\"1825\":1,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":2,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":1,\"1997\":2,\"2056\":1,\"2062\":1,\"2063\":2,\"2075\":1,\"2087\":2,\"2088\":1,\"2095\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2749\":1,\"2793\":1,\"2863\":1,\"2864\":1,\"2870\":1,\"2873\":1,\"2926\":1}}],[\"httpservletrequest和httpservletresponse\",{\"0\":{\"1796\":1},\"1\":{\"210\":1}}],[\"httpservlet\",{\"0\":{\"1820\":1},\"1\":{\"1789\":1,\"1790\":1,\"1794\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1820\":1,\"1825\":1,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":2,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":1,\"1997\":2,\"2056\":1,\"2062\":1,\"2075\":1,\"2088\":1,\"2095\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2749\":1}}],[\"httpsessionbindingevent\",{\"1\":{\"2080\":3,\"2081\":2}}],[\"httpsessionbindinglistener\",{\"0\":{\"2081\":1},\"1\":{\"2072\":1,\"2081\":2}}],[\"httpsessionevent\",{\"1\":{\"2079\":2,\"2082\":2,\"2088\":2,\"2097\":2}}],[\"httpsessionactivationlistener\",{\"0\":{\"2082\":1},\"1\":{\"2072\":1,\"2082\":1,\"2097\":1}}],[\"httpsessionattributelistener\",{\"0\":{\"2080\":1},\"1\":{\"2072\":1,\"2080\":1}}],[\"httpsessionlistenerhttpsessionattributelistenerhttpsessionbindinglistenerhttpsessionactivationlistener\",{\"1\":{\"2078\":1}}],[\"httpsessionlistener\",{\"0\":{\"2079\":1},\"1\":{\"2072\":1,\"2079\":1,\"2081\":1,\"2088\":1}}],[\"httpsession中如果有登陆过的信息\",{\"1\":{\"1910\":2}}],[\"httpsession对象监听器\",{\"1\":{\"2068\":1}}],[\"httpsession对象是保存在服务端的\",{\"1\":{\"1903\":1}}],[\"httpsession对象的销毁时间取决于超时时间的到达以及调用了invalidate\",{\"1\":{\"1900\":1}}],[\"httpsession对象的创建是通过request\",{\"1\":{\"1897\":1}}],[\"httpsession对象\",{\"0\":{\"1896\":1}}],[\"httpsession存储数据大小无限制\",{\"1\":{\"1895\":1}}],[\"httpsession使用key与value结构存储数据\",{\"1\":{\"1895\":1}}],[\"httpsession可以存储任何类型的数据\",{\"1\":{\"1895\":1}}],[\"httpsession保存在服务端\",{\"1\":{\"1895\":1}}],[\"httpsession是一种保存少量信息至服务器端的一种技术\",{\"1\":{\"1894\":1}}],[\"httpsession\",{\"1\":{\"134\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1921\":2,\"1972\":1,\"2063\":1,\"2088\":3,\"2095\":1,\"2096\":1,\"2926\":1}}],[\"https\",{\"0\":{\"762\":1},\"1\":{\"61\":1,\"65\":1,\"85\":1,\"93\":1,\"607\":1,\"808\":2,\"809\":1,\"810\":1,\"845\":1,\"921\":1,\"1176\":1,\"1189\":1,\"1293\":2,\"1309\":1,\"1312\":3,\"1327\":1,\"1331\":2,\"1344\":1,\"1439\":1,\"1460\":1,\"1462\":1,\"1561\":2,\"1609\":4,\"1660\":1,\"1681\":1,\"1856\":1,\"1860\":1,\"1864\":1,\"2168\":1,\"2213\":1,\"2314\":1,\"2520\":1,\"2630\":2,\"2648\":2,\"2666\":5}}],[\"http协议采用mime协议来规范正文的数据格式\",{\"1\":{\"207\":1}}],[\"http协议所产生的响应中正文部分可以是任意格式的数据\",{\"1\":{\"207\":1}}],[\"http协议被纳入到w3c组织中进行维护和管理\",{\"1\":{\"162\":1}}],[\"http协议在1991年发布第一个版本版本号为0\",{\"1\":{\"162\":1}}],[\"http协议发展和版本\",{\"0\":{\"162\":1}}],[\"http协议是无状态协议\",{\"1\":{\"161\":1}}],[\"http协议是hyper\",{\"1\":{\"154\":1}}],[\"http协议支持客户端服务端模式\",{\"1\":{\"156\":1}}],[\"http协议特点\",{\"0\":{\"155\":1}}],[\"http协议\",{\"0\":{\"152\":1},\"1\":{\"12\":1,\"1324\":1,\"1330\":1}}],[\"商品价格等信息不与该表的主键相关\",{\"1\":{\"1047\":1}}],[\"商品类\",{\"1\":{\"489\":1,\"490\":1}}],[\"商品\",{\"1\":{\"226\":2}}],[\"商\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"32\":1}}],[\"n<\",{\"1\":{\"2487\":1}}],[\"nginx<\",{\"1\":{\"1552\":1}}],[\"n=0\",{\"1\":{\"1552\":1}}],[\"n中的最低值\",{\"1\":{\"1411\":1}}],[\"nbsp\",{\"1\":{\"1301\":4,\"2025\":1}}],[\"nightwatch\",{\"1\":{\"1683\":1}}],[\"nisl\",{\"1\":{\"1609\":2}}],[\"nisi\",{\"1\":{\"1606\":1}}],[\"nist\",{\"1\":{\"702\":1}}],[\"nihavawodeshijie是梦想\",{\"1\":{\"395\":1,\"396\":1}}],[\"nihavawodeshijie这是梦想\",{\"1\":{\"395\":1,\"396\":1}}],[\"nihaojavawodeshijie这是梦想\",{\"1\":{\"395\":1,\"396\":1}}],[\"nihaojavawodeshijie\",{\"1\":{\"395\":1,\"396\":1}}],[\"ns\",{\"1\":{\"545\":3,\"1791\":3,\"1795\":3,\"1831\":3,\"1834\":3,\"1999\":3,\"2047\":3,\"2058\":3,\"2075\":3,\"2746\":3,\"2759\":3}}],[\"nfe\",{\"1\":{\"364\":1}}],[\"n的上一个节点一定是当前链中的最后一个节点last\",{\"1\":{\"262\":1}}],[\"nth\",{\"1\":{\"1552\":11}}],[\"nt\",{\"1\":{\"177\":1}}],[\"naming\",{\"1\":{\"2301\":2}}],[\"namingcontextfactory\",{\"1\":{\"2301\":2}}],[\"name+\",{\"1\":{\"2609\":4,\"2612\":1}}],[\"name这种情况会自动帮助我们完成驼峰命名法的转换\",{\"1\":{\"2230\":1}}],[\"name标签中的值\",{\"1\":{\"1829\":1}}],[\"name属性值获取\",{\"1\":{\"1491\":1}}],[\"name1\",{\"1\":{\"1489\":2}}],[\"namespace\",{\"1\":{\"2279\":1,\"2472\":1,\"2480\":2}}],[\"namespace=\",{\"1\":{\"2279\":1,\"2374\":1,\"2918\":1}}],[\"names3\",{\"1\":{\"860\":3}}],[\"names2\",{\"1\":{\"860\":2}}],[\"namelist\",{\"1\":{\"856\":4}}],[\"name>hiddenhttpmethodfilter<\",{\"1\":{\"2829\":2,\"2830\":2}}],[\"name>helloservlet<\",{\"1\":{\"545\":2}}],[\"name>encoding<\",{\"1\":{\"2807\":1,\"2912\":1}}],[\"name>encodingfilter<\",{\"1\":{\"2058\":2}}],[\"name>characterencodingfilter<\",{\"1\":{\"2807\":2,\"2912\":2}}],[\"name>charset<\",{\"1\":{\"2049\":1,\"2058\":1}}],[\"name>contextconfiglocation<\",{\"1\":{\"2759\":1,\"2910\":1,\"2911\":1}}],[\"name>dispatcherservlet<\",{\"1\":{\"2759\":2,\"2910\":2}}],[\"name>demoservlet<\",{\"1\":{\"1838\":1,\"1839\":1,\"1840\":1,\"1841\":1,\"1842\":1,\"1846\":1,\"1847\":2}}],[\"name>age<\",{\"1\":{\"2049\":1}}],[\"name>gender<\",{\"1\":{\"2049\":1}}],[\"name>realname<\",{\"1\":{\"2049\":1}}],[\"name>filter2<\",{\"1\":{\"2047\":2}}],[\"name>filter1<\",{\"1\":{\"1999\":2,\"2047\":2,\"2049\":1}}],[\"name>myservlet2<\",{\"1\":{\"1999\":3}}],[\"name>myservlet1<\",{\"1\":{\"1999\":3}}],[\"name>myservlet<\",{\"1\":{\"1791\":2}}],[\"name>pingmu<\",{\"1\":{\"1834\":1}}],[\"name>pinpai<\",{\"1\":{\"1834\":1}}],[\"name>password<\",{\"1\":{\"1831\":1}}],[\"name>screen<\",{\"1\":{\"1834\":1}}],[\"name>servlet4<\",{\"1\":{\"1834\":1,\"1844\":1}}],[\"name>servlet3<\",{\"1\":{\"1834\":1,\"1844\":1}}],[\"name>servlet2<\",{\"1\":{\"1831\":2,\"1834\":2,\"1844\":1}}],[\"name>servlet1<\",{\"1\":{\"1831\":2,\"1834\":2,\"1844\":1}}],[\"name>brand<\",{\"1\":{\"1834\":1}}],[\"name>username<\",{\"1\":{\"1831\":1}}],[\"name>login<\",{\"1\":{\"1795\":2}}],[\"name>\",{\"1\":{\"545\":2,\"675\":1,\"1791\":2,\"1795\":2,\"1831\":6,\"1834\":10,\"1838\":1,\"1839\":1,\"1840\":1,\"1841\":1,\"1842\":1,\"1844\":4,\"1846\":1,\"1847\":2,\"1999\":8,\"2047\":4,\"2049\":5,\"2058\":3,\"2186\":1,\"2759\":3,\"2763\":1,\"2807\":3,\"2829\":2,\"2830\":2,\"2910\":3,\"2911\":1,\"2912\":3}}],[\"name=jarry3\",{\"1\":{\"2564\":1}}],[\"name=jerry2\",{\"1\":{\"2563\":1}}],[\"name=jerry\",{\"1\":{\"2562\":1}}],[\"name=tom01\",{\"1\":{\"2564\":1}}],[\"name=tom\",{\"1\":{\"2563\":1}}],[\"name=<optionsclassname>\",{\"1\":{\"2301\":1}}],[\"name=propertiesutil\",{\"1\":{\"1280\":1}}],[\"name=root\",{\"1\":{\"1278\":1}}],[\"name=value的形式\",{\"1\":{\"1333\":1}}],[\"name=value\",{\"1\":{\"534\":1}}],[\"name=123\",{\"1\":{\"135\":1}}],[\"name=\",{\"1\":{\"76\":1,\"129\":1,\"274\":1,\"275\":1,\"278\":1,\"281\":1,\"287\":3,\"352\":1,\"428\":1,\"511\":1,\"512\":1,\"513\":1,\"876\":5,\"880\":2,\"881\":12,\"882\":4,\"1293\":3,\"1314\":4,\"1321\":1,\"1330\":4,\"1331\":1,\"1333\":3,\"1334\":1,\"1335\":2,\"1336\":4,\"1338\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1345\":1,\"1348\":1,\"1439\":2,\"1489\":2,\"1490\":3,\"1491\":3,\"1549\":1,\"1555\":10,\"1579\":2,\"1586\":2,\"1690\":1,\"1713\":1,\"1764\":1,\"1766\":1,\"1767\":1,\"1793\":2,\"1907\":2,\"2052\":2,\"2055\":2,\"2060\":2,\"2094\":2,\"2114\":2,\"2131\":2,\"2169\":2,\"2170\":2,\"2171\":2,\"2245\":1,\"2246\":1,\"2250\":1,\"2278\":4,\"2312\":2,\"2315\":1,\"2317\":1,\"2318\":1,\"2323\":1,\"2329\":1,\"2332\":6,\"2334\":4,\"2374\":10,\"2434\":2,\"2458\":1,\"2459\":1,\"2487\":2,\"2501\":4,\"2553\":1,\"2557\":3,\"2558\":3,\"2560\":3,\"2562\":2,\"2563\":4,\"2564\":4,\"2566\":5,\"2567\":1,\"2571\":1,\"2574\":1,\"2579\":1,\"2584\":4,\"2666\":5,\"2701\":2,\"2706\":1,\"2710\":2,\"2757\":1,\"2765\":2,\"2779\":2,\"2780\":2,\"2789\":2,\"2793\":2,\"2794\":2,\"2796\":8,\"2798\":1,\"2799\":1,\"2800\":4,\"2801\":4,\"2817\":2,\"2830\":2,\"2857\":1,\"2896\":1,\"2901\":1,\"2903\":9,\"2906\":4,\"2907\":4,\"2908\":1,\"2914\":2}}],[\"name\",{\"1\":{\"75\":4,\"76\":3,\"77\":4,\"78\":4,\"79\":4,\"92\":1,\"136\":1,\"238\":1,\"240\":1,\"274\":9,\"275\":9,\"278\":5,\"281\":8,\"287\":27,\"352\":9,\"428\":9,\"441\":2,\"442\":2,\"458\":2,\"471\":2,\"489\":13,\"490\":13,\"511\":9,\"512\":9,\"513\":9,\"575\":1,\"576\":1,\"587\":2,\"588\":2,\"590\":2,\"726\":1,\"731\":1,\"773\":1,\"854\":3,\"856\":4,\"876\":4,\"905\":1,\"922\":1,\"982\":1,\"987\":1,\"1081\":2,\"1082\":2,\"1147\":8,\"1198\":1,\"1215\":2,\"1217\":2,\"1219\":2,\"1220\":2,\"1221\":2,\"1222\":2,\"1227\":2,\"1231\":2,\"1234\":2,\"1235\":2,\"1242\":4,\"1252\":4,\"1253\":5,\"1264\":3,\"1266\":5,\"1274\":2,\"1275\":2,\"1280\":3,\"1330\":2,\"1333\":1,\"1419\":3,\"1421\":3,\"1451\":1,\"1629\":1,\"1630\":5,\"1634\":3,\"1649\":1,\"1651\":1,\"1653\":3,\"1677\":3,\"1683\":1,\"1687\":1,\"1713\":4,\"1764\":1,\"1766\":2,\"1767\":3,\"1849\":1,\"1892\":7,\"1917\":2,\"1921\":2,\"1925\":2,\"1972\":1,\"1980\":4,\"1981\":4,\"2048\":1,\"2075\":3,\"2077\":4,\"2124\":8,\"2182\":1,\"2183\":1,\"2190\":1,\"2205\":1,\"2210\":1,\"2230\":1,\"2234\":1,\"2239\":2,\"2240\":3,\"2242\":3,\"2243\":3,\"2244\":1,\"2245\":2,\"2246\":4,\"2247\":1,\"2248\":1,\"2249\":2,\"2250\":3,\"2253\":3,\"2254\":1,\"2256\":4,\"2257\":4,\"2258\":1,\"2259\":1,\"2260\":8,\"2332\":1,\"2422\":1,\"2425\":2,\"2428\":2,\"2550\":2,\"2556\":1,\"2562\":1,\"2563\":2,\"2564\":2,\"2597\":1,\"2605\":9,\"2609\":8,\"2612\":6,\"2651\":3,\"2652\":1,\"2695\":2,\"2697\":1,\"2857\":3}}],[\"nature\",{\"1\":{\"1609\":1}}],[\"natus\",{\"1\":{\"1606\":2}}],[\"national\",{\"1\":{\"930\":1}}],[\"native\",{\"1\":{\"371\":1,\"575\":1,\"593\":1}}],[\"nav\",{\"1\":{\"1606\":11}}],[\"navigator代表浏览器软件本身\",{\"1\":{\"1464\":1}}],[\"navigator功能而开发的一种可以嵌入web页面中的基于对象和事件驱动的解释性语言\",{\"1\":{\"1376\":1}}],[\"navigator\",{\"1\":{\"1372\":1,\"1451\":3,\"1464\":2}}],[\"navigation\",{\"1\":{\"142\":1}}],[\"nan\",{\"1\":{\"1408\":1,\"1409\":1,\"1412\":1}}],[\"nana=12345234\",{\"1\":{\"292\":2}}],[\"nana\",{\"1\":{\"292\":1}}],[\"nar\",{\"1\":{\"772\":1}}],[\"npm管理的项目在备份和传输的时候一般不携带node\",{\"1\":{\"94\":1}}],[\"npmjs\",{\"1\":{\"93\":2,\"1681\":1}}],[\"npm官方的管理的包都是从\",{\"1\":{\"93\":1}}],[\"npm本身就是被npm包管理器管理的一个工具\",{\"1\":{\"90\":1}}],[\"npm目录\",{\"1\":{\"90\":1}}],[\"npm全称node\",{\"1\":{\"90\":1}}],[\"npm\",{\"0\":{\"89\":1,\"94\":1},\"1\":{\"90\":2,\"92\":2,\"93\":7,\"94\":8,\"95\":4,\"97\":1,\"98\":2,\"112\":1,\"114\":2,\"115\":1,\"1681\":5,\"1682\":3,\"1683\":1,\"1684\":1}}],[\"norollbackfor\",{\"0\":{\"2717\":1},\"1\":{\"2717\":1}}],[\"nonamespaceschemalocation=\",{\"1\":{\"2485\":1}}],[\"nonematch\",{\"1\":{\"870\":2}}],[\"none\",{\"1\":{\"845\":2,\"1341\":2,\"1588\":1,\"1589\":1,\"1590\":1,\"1609\":4,\"1638\":1}}],[\"noargsconstructor\",{\"1\":{\"2190\":1,\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2276\":1,\"2374\":1,\"2425\":2,\"2428\":2,\"2431\":2,\"2435\":2,\"2565\":2,\"2579\":2,\"2590\":1,\"2591\":1,\"2592\":1,\"2667\":1,\"2697\":1,\"2796\":1,\"2800\":2,\"2801\":2,\"2915\":1}}],[\"noscript标签的作用是当script标签加载不出来或者抛出错误的时候替换内容\",{\"1\":{\"1690\":1}}],[\"noscript>\",{\"1\":{\"1690\":1}}],[\"nostrud\",{\"1\":{\"1606\":1}}],[\"nosql数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战\",{\"1\":{\"918\":1}}],[\"nosql\",{\"1\":{\"918\":1}}],[\"nosuchfieldexception\",{\"1\":{\"588\":1}}],[\"nosuchmethodexception\",{\"1\":{\"568\":2,\"585\":1,\"591\":1,\"904\":1}}],[\"no\",{\"1\":{\"757\":1,\"1001\":1,\"1003\":1,\"1216\":1,\"1683\":4,\"2710\":1}}],[\"now3\",{\"1\":{\"901\":2}}],[\"now与date一致\",{\"1\":{\"896\":1}}],[\"now是否在date之前\",{\"1\":{\"896\":1}}],[\"now是否在date之后\",{\"1\":{\"896\":1}}],[\"nowdatetime\",{\"1\":{\"893\":2}}],[\"nowday==i\",{\"1\":{\"376\":1}}],[\"nowday\",{\"1\":{\"376\":1}}],[\"now2\",{\"1\":{\"380\":2,\"901\":2}}],[\"now1\",{\"1\":{\"380\":2,\"898\":2,\"901\":2}}],[\"now\",{\"1\":{\"379\":3,\"380\":5,\"893\":3,\"895\":9,\"896\":5,\"897\":4,\"898\":6,\"899\":6,\"900\":5,\"901\":6,\"972\":3,\"1093\":1,\"2299\":3}}],[\"nodelist\",{\"1\":{\"1485\":1}}],[\"nodetype\",{\"1\":{\"1485\":1}}],[\"nodevalue\",{\"1\":{\"1485\":1}}],[\"nodename\",{\"1\":{\"1485\":1}}],[\"node节点常用属性和方法\",{\"0\":{\"1484\":1}}],[\"node<k\",{\"1\":{\"279\":3}}],[\"node<>\",{\"1\":{\"263\":1}}],[\"node<e>\",{\"1\":{\"263\":12,\"338\":8}}],[\"node的内部类\",{\"1\":{\"263\":1}}],[\"node对象\",{\"1\":{\"261\":1}}],[\"nodejs中包含了npm\",{\"1\":{\"1681\":1}}],[\"nodejs下的包管理器\",{\"1\":{\"1681\":1}}],[\"nodejs\",{\"1\":{\"85\":2}}],[\"node\",{\"0\":{\"81\":1,\"84\":1,\"86\":1,\"2984\":1},\"1\":{\"83\":2,\"84\":1,\"85\":1,\"87\":3,\"88\":1,\"90\":4,\"94\":3,\"104\":1,\"114\":1,\"115\":1,\"262\":15,\"263\":3,\"338\":3,\"1479\":1,\"1485\":5,\"1486\":6,\"1493\":5,\"1494\":5,\"1680\":1,\"1686\":1,\"1937\":1}}],[\"notinsql\",{\"0\":{\"2244\":1},\"1\":{\"2244\":1}}],[\"notin\",{\"0\":{\"2244\":1},\"1\":{\"2244\":3}}],[\"notifyall\",{\"1\":{\"475\":1}}],[\"notify\",{\"1\":{\"475\":3,\"489\":2,\"490\":2}}],[\"notlike\",{\"0\":{\"2243\":1},\"1\":{\"2243\":1}}],[\"notbetween\",{\"0\":{\"2241\":1}}],[\"notation\",{\"1\":{\"2123\":1}}],[\"notnull\",{\"1\":{\"905\":3}}],[\"nothing\",{\"1\":{\"729\":1}}],[\"notfull等待池开始阻塞\",{\"1\":{\"344\":1}}],[\"notfull\",{\"1\":{\"328\":4,\"330\":1,\"338\":1}}],[\"notexists\",{\"0\":{\"2244\":1}}],[\"note\",{\"1\":{\"1185\":1,\"1191\":1}}],[\"notempty等待池开始阻塞\",{\"1\":{\"344\":1}}],[\"notempty\",{\"1\":{\"328\":4,\"330\":1,\"338\":1}}],[\"notes\",{\"0\":{\"2933\":1},\"1\":{\"208\":2}}],[\"not\",{\"0\":{\"1004\":1,\"2731\":1},\"1\":{\"73\":1,\"145\":1,\"736\":1,\"918\":1,\"981\":1,\"993\":1,\"999\":1,\"1006\":1,\"1007\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1031\":1,\"1034\":1,\"1037\":1,\"1071\":1,\"1211\":1,\"1216\":1,\"1239\":1,\"1361\":2,\"1409\":1,\"1412\":1,\"1555\":1,\"1808\":1,\"2020\":4,\"2182\":1,\"2235\":1,\"2239\":1,\"2243\":1,\"2244\":2,\"2253\":1,\"2417\":4,\"2695\":1,\"2725\":1,\"2735\":1,\"2881\":3}}],[\"n\",{\"1\":{\"73\":4,\"238\":1,\"240\":1,\"262\":16,\"279\":5,\"631\":1,\"656\":1,\"866\":1,\"1091\":3,\"1285\":1,\"1287\":2,\"1411\":3,\"1551\":3,\"1552\":5,\"2299\":1,\"2308\":1,\"2312\":2,\"2374\":1,\"2757\":1,\"2896\":1}}],[\"nubler++\",{\"1\":{\"1613\":1}}],[\"nubler\",{\"1\":{\"1613\":5}}],[\"nubmer\",{\"1\":{\"364\":1}}],[\"nullable\",{\"1\":{\"2672\":1,\"2673\":1,\"2674\":1}}],[\"null值\",{\"1\":{\"2560\":1}}],[\"null><\",{\"1\":{\"2560\":1}}],[\"null>\",{\"1\":{\"2560\":1}}],[\"null时\",{\"1\":{\"1352\":1}}],[\"null方式\",{\"1\":{\"1003\":1}}],[\"nullpointerexception\",{\"1\":{\"327\":1,\"337\":1}}],[\"null\",{\"0\":{\"1004\":1,\"1357\":1},\"1\":{\"30\":1,\"65\":1,\"240\":2,\"244\":1,\"245\":1,\"247\":1,\"248\":1,\"262\":4,\"263\":2,\"279\":12,\"281\":1,\"288\":3,\"292\":1,\"294\":7,\"327\":3,\"328\":4,\"337\":5,\"338\":2,\"364\":1,\"512\":22,\"513\":24,\"517\":4,\"518\":6,\"545\":2,\"546\":2,\"846\":1,\"850\":3,\"852\":2,\"854\":6,\"905\":1,\"937\":7,\"965\":7,\"981\":1,\"993\":1,\"999\":1,\"1001\":6,\"1003\":1,\"1006\":1,\"1007\":2,\"1011\":1,\"1016\":1,\"1020\":1,\"1037\":2,\"1061\":1,\"1064\":1,\"1147\":4,\"1211\":12,\"1217\":2,\"1219\":2,\"1220\":4,\"1221\":4,\"1222\":4,\"1227\":5,\"1231\":4,\"1234\":2,\"1235\":6,\"1239\":4,\"1242\":6,\"1252\":8,\"1253\":15,\"1264\":8,\"1266\":11,\"1274\":1,\"1275\":9,\"1280\":1,\"1288\":3,\"1357\":1,\"1580\":1,\"1794\":1,\"1892\":1,\"1893\":1,\"1910\":1,\"1976\":3,\"1991\":1,\"2063\":1,\"2088\":1,\"2096\":1,\"2114\":2,\"2120\":1,\"2128\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2182\":7,\"2192\":1,\"2203\":1,\"2220\":2,\"2239\":2,\"2253\":1,\"2256\":1,\"2259\":1,\"2260\":6,\"2282\":2,\"2286\":1,\"2334\":1,\"2374\":2,\"2409\":1,\"2410\":2,\"2417\":6,\"2481\":2,\"2493\":3,\"2509\":4,\"2609\":1,\"2615\":1,\"2667\":2,\"2674\":2,\"2678\":3,\"2695\":3,\"2881\":3}}],[\"num\",{\"1\":{\"362\":2,\"363\":4,\"543\":2,\"1147\":4,\"1790\":2}}],[\"numberc\",{\"1\":{\"1712\":2}}],[\"numberb\",{\"1\":{\"1712\":2}}],[\"numbera\",{\"1\":{\"1712\":2}}],[\"number+100\",{\"1\":{\"1676\":1}}],[\"number++\",{\"1\":{\"1614\":1,\"1621\":1,\"1622\":1,\"1640\":1,\"1650\":1,\"1662\":1,\"1707\":1,\"1711\":1,\"1712\":1,\"1715\":1}}],[\"number=\",{\"1\":{\"1676\":1,\"1711\":1,\"1715\":1}}],[\"number修饰符的作用是将内容转化为数字类型\",{\"1\":{\"1676\":1}}],[\"number>=10\",{\"1\":{\"1650\":1}}],[\"number>=5\",{\"1\":{\"1650\":1}}],[\"number>15\",{\"1\":{\"1621\":1}}],[\"number>10\",{\"1\":{\"1621\":1,\"1622\":1}}],[\"number>5\",{\"1\":{\"1621\":1,\"1622\":1}}],[\"number<15\",{\"1\":{\"1621\":1,\"1622\":1}}],[\"number<10\",{\"1\":{\"1621\":1,\"1622\":1,\"1650\":1}}],[\"number<5\",{\"1\":{\"1621\":1,\"1622\":1}}],[\"number对象\",{\"0\":{\"1407\":1},\"1\":{\"1403\":1}}],[\"numbers++\",{\"1\":{\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1}}],[\"numbers\",{\"1\":{\"1400\":5,\"1401\":3,\"1664\":2,\"1667\":2,\"1670\":2,\"1672\":2}}],[\"number整数和浮点数统称为数值\",{\"1\":{\"1354\":1}}],[\"numberformatexception\",{\"1\":{\"364\":3,\"2176\":1}}],[\"number\",{\"0\":{\"1676\":1},\"1\":{\"294\":1,\"360\":6,\"374\":12,\"1347\":2,\"1361\":2,\"1408\":15,\"1409\":13,\"1412\":13,\"1485\":1,\"1614\":3,\"1620\":4,\"1621\":3,\"1622\":3,\"1631\":2,\"1640\":5,\"1650\":3,\"1662\":2,\"1674\":1,\"1676\":2,\"1707\":2,\"1711\":3,\"1712\":11,\"1713\":1,\"1715\":4,\"2029\":2}}],[\"num2\",{\"1\":{\"16\":2,\"17\":3,\"19\":2,\"21\":2,\"24\":2,\"27\":2,\"32\":3,\"538\":2}}],[\"num1\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"32\":1,\"538\":2}}],[\"nested使用jdbc\",{\"1\":{\"2733\":1}}],[\"nested嵌套事务回滚或提交不会导致外部事务回滚或提交\",{\"1\":{\"2733\":1}}],[\"nested和requiresnew的区别\",{\"1\":{\"2733\":1}}],[\"nested\",{\"0\":{\"2733\":1},\"1\":{\"2725\":1,\"2737\":1}}],[\"never\",{\"0\":{\"2732\":1},\"1\":{\"2725\":1,\"2735\":1}}],[\"ne\",{\"0\":{\"2240\":1},\"1\":{\"2246\":1}}],[\"negative\",{\"1\":{\"1408\":1}}],[\"negate\",{\"0\":{\"848\":1},\"1\":{\"846\":1,\"848\":1}}],[\"networking\",{\"1\":{\"922\":1}}],[\"net\",{\"1\":{\"845\":1,\"1155\":2,\"2314\":1}}],[\"netscape\",{\"1\":{\"70\":1,\"1372\":3}}],[\"nexus\",{\"1\":{\"675\":1}}],[\"nextelement\",{\"1\":{\"1800\":1,\"1801\":1,\"1831\":1,\"2049\":1,\"2052\":1}}],[\"nextsibling\",{\"1\":{\"1485\":1}}],[\"nextgen\",{\"1\":{\"1191\":1}}],[\"nextmonth\",{\"1\":{\"900\":2}}],[\"nextdouble\",{\"1\":{\"382\":1}}],[\"next指向自己\",{\"1\":{\"338\":1}}],[\"next=\",{\"1\":{\"262\":1}}],[\"next\",{\"0\":{\"269\":1},\"1\":{\"220\":2,\"251\":1,\"260\":2,\"261\":1,\"262\":6,\"263\":6,\"265\":1,\"266\":1,\"279\":3,\"292\":6,\"294\":6,\"338\":4,\"376\":3,\"422\":1,\"511\":2,\"512\":2,\"513\":2,\"518\":2,\"1222\":1,\"1223\":1,\"1227\":1,\"1242\":3,\"1252\":3,\"1253\":1,\"1259\":1,\"1266\":1,\"1275\":1,\"1548\":4,\"1609\":3,\"1976\":1,\"2263\":1}}],[\"nextint\",{\"1\":{\"16\":2,\"17\":2,\"19\":2,\"21\":2,\"24\":2,\"27\":2,\"32\":2,\"382\":2,\"422\":1,\"450\":1,\"1790\":1,\"2022\":1,\"2023\":1}}],[\"newproxyinstance\",{\"1\":{\"2608\":1,\"2609\":1}}],[\"newversion\",{\"1\":{\"2287\":1,\"2289\":2}}],[\"newvalue=servletrequest\",{\"1\":{\"2077\":1}}],[\"new按钮选择自己的tomcat安装路径即可\",{\"1\":{\"1775\":1}}],[\"new按钮选择自己的jdk安装路径即可\",{\"1\":{\"1775\":1}}],[\"news\",{\"1\":{\"1891\":1}}],[\"news都使用了该项目\",{\"1\":{\"1557\":1}}],[\"newshop\",{\"1\":{\"1079\":1}}],[\"newadmin\",{\"1\":{\"1076\":1,\"1077\":1,\"1078\":2,\"1079\":2,\"1080\":1}}],[\"new的格式\",{\"1\":{\"831\":1}}],[\"new是针对实体类编程\",{\"1\":{\"567\":1}}],[\"newline\",{\"1\":{\"415\":1,\"422\":1}}],[\"newfile\",{\"1\":{\"405\":3}}],[\"newfixedthreadpool\",{\"1\":{\"305\":1,\"306\":1}}],[\"newtest\",{\"1\":{\"384\":1,\"385\":1,\"387\":4}}],[\"newtable\",{\"1\":{\"294\":7}}],[\"newcondition\",{\"1\":{\"328\":2,\"338\":2,\"478\":1,\"490\":2}}],[\"newcapacity\",{\"1\":{\"294\":6}}],[\"newelements\",{\"1\":{\"316\":6}}],[\"newnode\",{\"1\":{\"263\":4,\"279\":3,\"1486\":2}}],[\"newinstance\",{\"1\":{\"30\":1,\"568\":1,\"584\":1,\"585\":2,\"588\":1,\"591\":1,\"1266\":1,\"1275\":1,\"2549\":1}}],[\"new\",{\"0\":{\"2730\":1},\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"32\":4,\"147\":3,\"219\":3,\"220\":1,\"234\":2,\"235\":2,\"238\":4,\"239\":2,\"240\":3,\"241\":1,\"242\":6,\"244\":7,\"245\":4,\"247\":3,\"248\":3,\"251\":2,\"260\":1,\"262\":3,\"263\":1,\"265\":1,\"266\":1,\"274\":2,\"275\":3,\"278\":6,\"279\":3,\"281\":5,\"283\":1,\"286\":1,\"287\":16,\"288\":3,\"292\":2,\"294\":3,\"300\":4,\"303\":1,\"305\":2,\"306\":2,\"309\":9,\"315\":1,\"316\":2,\"318\":1,\"319\":1,\"327\":7,\"328\":3,\"337\":2,\"338\":5,\"348\":9,\"349\":9,\"352\":5,\"356\":6,\"357\":1,\"362\":1,\"363\":2,\"364\":8,\"370\":2,\"371\":1,\"372\":4,\"374\":4,\"375\":1,\"376\":2,\"382\":2,\"384\":2,\"385\":1,\"387\":5,\"388\":1,\"390\":3,\"392\":3,\"405\":9,\"408\":3,\"409\":7,\"412\":9,\"415\":6,\"418\":7,\"421\":7,\"422\":9,\"425\":5,\"428\":9,\"431\":4,\"434\":1,\"438\":2,\"440\":2,\"441\":2,\"442\":3,\"445\":3,\"446\":4,\"450\":4,\"457\":4,\"458\":1,\"459\":2,\"460\":2,\"476\":1,\"480\":1,\"489\":5,\"490\":6,\"503\":1,\"505\":1,\"506\":1,\"509\":4,\"510\":6,\"511\":8,\"512\":22,\"513\":24,\"515\":6,\"516\":10,\"517\":14,\"518\":16,\"523\":2,\"525\":2,\"538\":3,\"543\":1,\"560\":4,\"568\":4,\"577\":1,\"581\":2,\"760\":1,\"816\":2,\"817\":2,\"820\":1,\"827\":4,\"828\":1,\"831\":3,\"832\":2,\"845\":1,\"853\":1,\"854\":2,\"856\":1,\"859\":4,\"869\":3,\"873\":3,\"875\":1,\"876\":3,\"878\":2,\"879\":1,\"880\":18,\"881\":12,\"882\":4,\"883\":12,\"886\":1,\"889\":6,\"891\":3,\"1211\":1,\"1215\":1,\"1227\":2,\"1242\":1,\"1252\":1,\"1264\":3,\"1266\":1,\"1274\":1,\"1275\":1,\"1280\":1,\"1369\":1,\"1370\":1,\"1383\":2,\"1384\":2,\"1385\":1,\"1414\":4,\"1415\":1,\"1416\":6,\"1417\":1,\"1419\":1,\"1420\":1,\"1424\":2,\"1425\":2,\"1458\":2,\"1459\":2,\"1614\":1,\"1616\":1,\"1617\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1689\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1718\":2,\"1730\":2,\"1787\":1,\"1790\":2,\"1822\":1,\"1887\":1,\"1892\":3,\"1893\":2,\"1972\":1,\"1980\":1,\"1981\":1,\"2081\":1,\"2087\":3,\"2095\":1,\"2128\":6,\"2166\":4,\"2176\":1,\"2178\":2,\"2205\":1,\"2206\":1,\"2208\":1,\"2210\":1,\"2211\":1,\"2214\":1,\"2220\":2,\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":2,\"2243\":1,\"2244\":1,\"2245\":2,\"2246\":2,\"2247\":1,\"2248\":1,\"2249\":1,\"2250\":2,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2259\":1,\"2260\":2,\"2282\":1,\"2285\":2,\"2286\":1,\"2288\":2,\"2290\":3,\"2293\":1,\"2357\":1,\"2359\":1,\"2363\":2,\"2366\":1,\"2374\":1,\"2395\":1,\"2399\":1,\"2404\":2,\"2409\":1,\"2410\":1,\"2444\":2,\"2447\":2,\"2450\":3,\"2453\":1,\"2456\":1,\"2466\":1,\"2493\":1,\"2503\":1,\"2509\":1,\"2540\":1,\"2543\":1,\"2546\":1,\"2550\":1,\"2553\":2,\"2554\":1,\"2555\":1,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2566\":1,\"2567\":1,\"2571\":1,\"2574\":1,\"2579\":1,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2602\":1,\"2605\":2,\"2609\":2,\"2612\":1,\"2615\":4,\"2672\":2,\"2673\":2,\"2674\":5,\"2676\":3,\"2678\":5,\"2679\":5,\"2680\":1,\"2697\":1,\"2702\":2,\"2725\":1,\"2737\":1,\"2799\":1,\"2869\":1,\"2870\":1,\"2872\":2,\"2873\":2,\"2931\":1}}],[\"=root\",{\"1\":{\"2817\":1,\"2857\":1}}],[\"=resultset\",{\"1\":{\"1976\":1}}],[\"=request\",{\"1\":{\"1972\":1}}],[\"=map\",{\"1\":{\"2550\":1}}],[\"=money\",{\"1\":{\"1234\":1,\"2697\":1}}],[\"=class\",{\"1\":{\"2549\":1}}],[\"=connection\",{\"1\":{\"1976\":1}}],[\"=e\",{\"1\":{\"2426\":1,\"2428\":1}}],[\"=emp\",{\"1\":{\"1976\":8}}],[\"=d\",{\"1\":{\"2423\":1,\"2425\":1}}],[\"=document\",{\"1\":{\"2114\":2}}],[\"=json\",{\"1\":{\"2124\":1}}],[\"=xhr\",{\"1\":{\"2114\":1,\"2120\":1,\"2128\":1}}],[\"=unamedom\",{\"1\":{\"2114\":1}}],[\"=users\",{\"1\":{\"2128\":1}}],[\"=user\",{\"1\":{\"75\":1}}],[\"=persons\",{\"1\":{\"2124\":1}}],[\"=pstat\",{\"1\":{\"1976\":1}}],[\"=pagecontext\",{\"1\":{\"1972\":1}}],[\"=application\",{\"1\":{\"1972\":1}}],[\"=account\",{\"1\":{\"1242\":1,\"1252\":1}}],[\"=session\",{\"1\":{\"1972\":1}}],[\"=str\",{\"1\":{\"1406\":1}}],[\"=$\",{\"1\":{\"1555\":1}}],[\"=value\",{\"1\":{\"1549\":4}}],[\"=属性值\",{\"1\":{\"1493\":1}}],[\"=fun2\",{\"1\":{\"1370\":1}}],[\"=3\",{\"1\":{\"1354\":1}}],[\"=10\",{\"1\":{\"1406\":1,\"1951\":2}}],[\"=1\",{\"1\":{\"1235\":1,\"2025\":1,\"2631\":1}}],[\"=nenot\",{\"1\":{\"1985\":1}}],[\"=new\",{\"1\":{\"1235\":1,\"1909\":1,\"1972\":2,\"1976\":2,\"1991\":1,\"2022\":1,\"2023\":1,\"2062\":1,\"2087\":1,\"2095\":1,\"2114\":1,\"2120\":1,\"2128\":7,\"2166\":2,\"2176\":1,\"2678\":1,\"2679\":1,\"2680\":2,\"2876\":1,\"2878\":1}}],[\"=null\",{\"1\":{\"415\":1,\"854\":1,\"1217\":2,\"1219\":2,\"1234\":4,\"1253\":3,\"1274\":3,\"1280\":3,\"1288\":1,\"1893\":2,\"1976\":1,\"2444\":8,\"2447\":8,\"2450\":8,\"2453\":7,\"2456\":7,\"2799\":1}}],[\"=或<>操作符\",{\"1\":{\"1148\":1}}],[\"=值2\",{\"1\":{\"2816\":1}}],[\"=值1\",{\"1\":{\"2816\":1}}],[\"=值\",{\"1\":{\"973\":2}}],[\"=0\",{\"1\":{\"272\":1}}],[\"=>\",{\"1\":{\"80\":3,\"1035\":2,\"1689\":1,\"1713\":1,\"1721\":1}}],[\"==0\",{\"1\":{\"1580\":1}}],[\"==51\",{\"1\":{\"1235\":1}}],[\"==3\",{\"1\":{\"856\":2}}],[\"==10000\",{\"1\":{\"305\":1,\"306\":1}}],[\"==null\",{\"1\":{\"279\":1}}],[\"=======\",{\"1\":{\"750\":1}}],[\"=========\",{\"1\":{\"750\":1}}],[\"===============\",{\"1\":{\"220\":2}}],[\"===\",{\"0\":{\"1364\":1},\"1\":{\"65\":1,\"461\":1,\"489\":2,\"490\":2,\"1360\":1,\"1364\":8}}],[\"==\",{\"0\":{\"1363\":1},\"1\":{\"17\":1,\"32\":1,\"262\":1,\"263\":1,\"279\":10,\"281\":3,\"288\":1,\"292\":1,\"294\":6,\"328\":5,\"364\":3,\"512\":11,\"517\":2,\"518\":2,\"846\":1,\"850\":1,\"876\":1,\"1231\":2,\"1235\":2,\"1242\":2,\"1252\":3,\"1266\":3,\"1275\":2,\"1360\":1,\"1363\":7,\"1366\":3,\"1417\":1,\"1544\":2,\"1579\":1,\"1580\":1,\"1695\":4,\"1831\":1,\"1985\":1,\"1988\":2,\"2088\":1,\"2114\":2,\"2131\":2,\"2169\":2,\"2170\":2,\"2171\":2,\"2493\":5,\"2509\":1}}],[\"=\",{\"1\":{\"16\":3,\"17\":3,\"19\":3,\"21\":3,\"24\":3,\"27\":3,\"30\":2,\"32\":3,\"36\":2,\"65\":5,\"73\":6,\"74\":2,\"75\":4,\"76\":3,\"77\":4,\"78\":3,\"79\":7,\"80\":4,\"88\":1,\"102\":5,\"103\":3,\"114\":6,\"115\":2,\"132\":1,\"134\":1,\"219\":4,\"220\":2,\"223\":1,\"234\":2,\"235\":2,\"238\":3,\"239\":3,\"240\":7,\"241\":1,\"242\":9,\"244\":8,\"245\":2,\"247\":7,\"248\":7,\"251\":5,\"260\":4,\"262\":13,\"263\":15,\"265\":2,\"266\":2,\"272\":6,\"274\":8,\"275\":9,\"278\":4,\"279\":27,\"280\":4,\"281\":5,\"283\":1,\"286\":1,\"287\":16,\"288\":11,\"292\":13,\"294\":39,\"295\":1,\"300\":3,\"303\":1,\"305\":3,\"306\":4,\"309\":16,\"315\":1,\"316\":16,\"318\":1,\"319\":1,\"327\":1,\"328\":13,\"332\":1,\"333\":1,\"337\":2,\"338\":17,\"348\":3,\"349\":6,\"352\":5,\"356\":10,\"357\":1,\"362\":3,\"363\":6,\"364\":28,\"370\":2,\"371\":4,\"372\":8,\"373\":2,\"374\":4,\"375\":3,\"376\":10,\"379\":9,\"380\":12,\"382\":3,\"384\":2,\"385\":1,\"387\":5,\"388\":1,\"389\":2,\"390\":5,\"392\":3,\"395\":1,\"396\":1,\"405\":19,\"408\":9,\"409\":16,\"412\":15,\"415\":8,\"418\":10,\"421\":10,\"422\":13,\"425\":3,\"428\":8,\"431\":14,\"434\":4,\"438\":4,\"440\":3,\"441\":3,\"442\":5,\"445\":3,\"446\":6,\"450\":4,\"457\":4,\"458\":3,\"459\":1,\"460\":3,\"461\":1,\"465\":2,\"471\":2,\"476\":1,\"480\":3,\"489\":15,\"490\":18,\"503\":6,\"505\":1,\"506\":2,\"509\":8,\"510\":13,\"511\":23,\"512\":34,\"513\":49,\"515\":9,\"516\":16,\"517\":18,\"518\":22,\"523\":4,\"525\":4,\"543\":3,\"560\":7,\"561\":3,\"562\":3,\"563\":2,\"564\":1,\"568\":6,\"576\":3,\"577\":2,\"578\":1,\"579\":1,\"580\":2,\"581\":9,\"585\":8,\"588\":10,\"591\":12,\"594\":6,\"616\":2,\"773\":3,\"816\":2,\"817\":2,\"820\":1,\"825\":3,\"826\":3,\"828\":3,\"829\":2,\"830\":4,\"831\":3,\"832\":2,\"835\":4,\"837\":2,\"840\":1,\"842\":1,\"843\":1,\"844\":1,\"845\":4,\"848\":3,\"850\":3,\"852\":5,\"853\":6,\"854\":7,\"856\":4,\"859\":13,\"860\":6,\"863\":1,\"867\":2,\"870\":3,\"871\":4,\"872\":4,\"873\":8,\"874\":2,\"875\":5,\"876\":6,\"878\":3,\"879\":2,\"880\":6,\"881\":3,\"882\":1,\"883\":3,\"886\":3,\"887\":1,\"888\":5,\"889\":8,\"891\":3,\"893\":6,\"895\":2,\"896\":2,\"897\":6,\"898\":2,\"899\":6,\"900\":6,\"901\":4,\"904\":2,\"905\":1,\"928\":2,\"937\":1,\"956\":1,\"973\":12,\"979\":2,\"982\":1,\"1001\":8,\"1030\":2,\"1056\":1,\"1061\":1,\"1064\":1,\"1068\":2,\"1071\":2,\"1072\":1,\"1073\":1,\"1082\":1,\"1106\":1,\"1122\":1,\"1147\":2,\"1155\":1,\"1215\":8,\"1217\":9,\"1219\":9,\"1220\":12,\"1221\":12,\"1222\":15,\"1226\":6,\"1227\":19,\"1231\":10,\"1234\":10,\"1235\":14,\"1241\":8,\"1242\":19,\"1246\":5,\"1249\":6,\"1252\":20,\"1253\":37,\"1264\":33,\"1266\":26,\"1267\":3,\"1274\":9,\"1275\":21,\"1279\":1,\"1280\":5,\"1286\":1,\"1288\":5,\"1333\":1,\"1355\":1,\"1360\":2,\"1362\":1,\"1363\":4,\"1364\":4,\"1366\":1,\"1367\":5,\"1369\":2,\"1370\":2,\"1383\":2,\"1384\":3,\"1385\":2,\"1386\":3,\"1388\":2,\"1389\":1,\"1391\":2,\"1392\":7,\"1393\":2,\"1394\":2,\"1395\":1,\"1396\":1,\"1397\":2,\"1398\":1,\"1399\":2,\"1400\":1,\"1401\":2,\"1406\":11,\"1409\":2,\"1412\":2,\"1414\":4,\"1415\":2,\"1416\":6,\"1417\":5,\"1419\":5,\"1420\":4,\"1421\":2,\"1423\":3,\"1424\":7,\"1425\":7,\"1442\":2,\"1455\":1,\"1456\":1,\"1458\":9,\"1459\":7,\"1462\":1,\"1488\":2,\"1489\":2,\"1490\":2,\"1491\":2,\"1493\":3,\"1494\":1,\"1496\":4,\"1497\":1,\"1499\":4,\"1500\":3,\"1501\":2,\"1505\":6,\"1544\":6,\"1549\":2,\"1555\":12,\"1571\":6,\"1573\":2,\"1574\":2,\"1579\":10,\"1585\":5,\"1586\":9,\"1613\":9,\"1616\":1,\"1617\":1,\"1631\":1,\"1689\":1,\"1690\":1,\"1695\":1,\"1718\":2,\"1730\":1,\"1755\":1,\"1790\":3,\"1794\":3,\"1800\":2,\"1801\":4,\"1831\":14,\"1834\":2,\"1856\":10,\"1860\":10,\"1864\":4,\"1874\":4,\"1878\":3,\"1887\":1,\"1888\":1,\"1892\":10,\"1893\":11,\"1897\":1,\"1898\":4,\"1909\":4,\"1910\":4,\"1917\":2,\"1921\":4,\"1925\":4,\"1927\":5,\"1928\":4,\"1952\":1,\"1972\":6,\"1976\":6,\"1991\":1,\"2025\":2,\"2031\":1,\"2049\":3,\"2052\":8,\"2056\":3,\"2057\":1,\"2061\":4,\"2062\":3,\"2063\":5,\"2075\":1,\"2076\":2,\"2077\":12,\"2087\":4,\"2088\":9,\"2095\":3,\"2096\":6,\"2115\":1,\"2124\":3,\"2125\":2,\"2126\":2,\"2128\":4,\"2131\":1,\"2159\":2,\"2166\":4,\"2170\":2,\"2171\":2,\"2176\":2,\"2192\":1,\"2203\":1,\"2204\":1,\"2205\":2,\"2206\":2,\"2208\":2,\"2209\":1,\"2210\":2,\"2211\":2,\"2219\":1,\"2220\":2,\"2228\":3,\"2230\":3,\"2234\":6,\"2239\":3,\"2240\":3,\"2241\":2,\"2242\":6,\"2243\":2,\"2244\":2,\"2245\":3,\"2246\":4,\"2247\":2,\"2248\":2,\"2249\":2,\"2250\":5,\"2253\":2,\"2254\":2,\"2255\":2,\"2256\":4,\"2257\":2,\"2258\":2,\"2259\":2,\"2260\":12,\"2282\":7,\"2285\":2,\"2286\":8,\"2287\":2,\"2288\":1,\"2289\":1,\"2290\":1,\"2334\":1,\"2344\":1,\"2345\":2,\"2348\":1,\"2351\":1,\"2354\":1,\"2355\":1,\"2356\":2,\"2357\":2,\"2358\":2,\"2359\":2,\"2360\":2,\"2363\":1,\"2366\":1,\"2374\":6,\"2379\":2,\"2386\":2,\"2388\":2,\"2389\":2,\"2390\":2,\"2391\":2,\"2394\":2,\"2395\":3,\"2398\":2,\"2399\":3,\"2401\":2,\"2402\":2,\"2403\":2,\"2404\":4,\"2406\":2,\"2407\":2,\"2409\":2,\"2410\":2,\"2413\":3,\"2414\":2,\"2415\":1,\"2417\":8,\"2422\":2,\"2423\":1,\"2425\":3,\"2426\":1,\"2428\":3,\"2429\":2,\"2431\":4,\"2435\":3,\"2444\":18,\"2447\":18,\"2450\":22,\"2453\":17,\"2456\":17,\"2459\":2,\"2462\":2,\"2466\":3,\"2467\":3,\"2475\":4,\"2479\":5,\"2488\":4,\"2493\":4,\"2503\":5,\"2509\":7,\"2540\":1,\"2543\":2,\"2546\":2,\"2549\":1,\"2550\":2,\"2552\":3,\"2553\":4,\"2554\":5,\"2555\":4,\"2557\":2,\"2558\":4,\"2559\":6,\"2560\":2,\"2562\":2,\"2563\":2,\"2564\":2,\"2566\":2,\"2567\":2,\"2571\":6,\"2574\":2,\"2579\":2,\"2587\":1,\"2590\":2,\"2591\":3,\"2592\":3,\"2594\":2,\"2597\":2,\"2601\":1,\"2602\":2,\"2605\":5,\"2609\":10,\"2612\":2,\"2615\":5,\"2631\":1,\"2635\":5,\"2641\":2,\"2642\":2,\"2644\":2,\"2649\":4,\"2651\":12,\"2652\":3,\"2653\":2,\"2672\":6,\"2673\":6,\"2674\":15,\"2678\":5,\"2679\":7,\"2680\":6,\"2697\":4,\"2702\":6,\"2714\":1,\"2715\":2,\"2716\":1,\"2717\":1,\"2793\":2,\"2798\":2,\"2799\":1,\"2814\":1,\"2816\":4,\"2817\":1,\"2820\":1,\"2830\":8,\"2857\":12,\"2872\":1,\"2873\":1,\"2916\":1,\"2926\":2,\"2928\":1,\"2929\":1,\"2931\":3}}],[\"c模式的引入\",{\"0\":{\"3144\":1}}],[\"c的\",{\"0\":{\"3084\":1}}],[\"c初识\",{\"0\":{\"3080\":1}}],[\"cglib代理\",{\"1\":{\"2659\":1}}],[\"cglib包\",{\"1\":{\"2614\":1}}],[\"cglib动态代理需要依赖org\",{\"1\":{\"2614\":1}}],[\"cglib动态代理是面向父类的\",{\"1\":{\"2611\":1}}],[\"cglib动态代理\",{\"0\":{\"2611\":1}}],[\"cglib\",{\"1\":{\"2607\":1}}],[\"c标签注入\",{\"1\":{\"2559\":2}}],[\"c标签\",{\"0\":{\"2559\":1}}],[\"c标签相当于constructor\",{\"1\":{\"2556\":1}}],[\"c实现\",{\"1\":{\"2531\":1}}],[\"c2\",{\"1\":{\"1874\":1,\"1879\":1}}],[\"c=\",{\"1\":{\"1712\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"c=3\",{\"1\":{\"75\":1}}],[\"cdata\",{\"1\":{\"2560\":3}}],[\"cday\",{\"1\":{\"1198\":1}}],[\"cd\",{\"1\":{\"1684\":1}}],[\"cj\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"1976\":1,\"2187\":1,\"2278\":1,\"2332\":1,\"2374\":1,\"2501\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"citrus\",{\"1\":{\"1399\":2}}],[\"city\",{\"1\":{\"1340\":1,\"1439\":1,\"2176\":3,\"2509\":2}}],[\"ci就够了\",{\"1\":{\"1156\":1}}],[\"ci对中\",{\"1\":{\"1156\":1}}],[\"ci和utf8\",{\"1\":{\"1156\":1}}],[\"cid\",{\"1\":{\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1072\":2,\"1073\":2}}],[\"ci\",{\"1\":{\"937\":1,\"965\":1,\"1154\":1,\"1156\":6,\"2417\":3,\"2695\":1,\"2881\":1}}],[\"cellpadding=\",{\"1\":{\"1579\":1,\"1586\":1,\"1793\":1,\"1976\":1,\"2025\":1,\"2031\":1}}],[\"cellspacing=\",{\"1\":{\"1319\":1,\"1579\":1,\"1586\":1,\"1793\":1,\"1976\":1,\"2025\":1,\"2031\":1,\"2925\":1}}],[\"cellspacing\",{\"1\":{\"1319\":1}}],[\"cecilie\",{\"1\":{\"1392\":4}}],[\"center\",{\"1\":{\"1300\":3,\"1319\":3,\"1579\":1,\"1586\":1,\"1695\":1,\"1793\":1}}],[\"centos6版本不行\",{\"1\":{\"807\":1}}],[\"ceshi\",{\"1\":{\"1156\":4}}],[\"ce\",{\"1\":{\"809\":3,\"810\":4}}],[\"ce社区版本\",{\"1\":{\"809\":1}}],[\"ceil\",{\"1\":{\"367\":1,\"1092\":1,\"1411\":1}}],[\"ctime\",{\"1\":{\"1198\":1}}],[\"ctl\",{\"1\":{\"811\":3}}],[\"ctxt\",{\"1\":{\"772\":1}}],[\"ctrl=\",{\"1\":{\"1667\":1}}],[\"ctrl+s的时候浏览器会实时更新\",{\"1\":{\"1687\":1}}],[\"ctrl+shift+f\",{\"1\":{\"1193\":1}}],[\"ctrl+shit+↓\",{\"1\":{\"615\":1}}],[\"ctrl+shit+↑向上一动\",{\"1\":{\"615\":1}}],[\"ctrl+shit+\",{\"1\":{\"613\":1}}],[\"ctrl+c\",{\"1\":{\"1684\":1}}],[\"ctrl+f\",{\"1\":{\"1193\":1}}],[\"ctrl+滚轮\",{\"1\":{\"1159\":1}}],[\"ctrl+y删除当前行\",{\"1\":{\"614\":1}}],[\"ctrl+d可以复制当前行\",{\"1\":{\"614\":1}}],[\"ctrl+\",{\"1\":{\"613\":1,\"1159\":1}}],[\"ctrl+q\",{\"1\":{\"609\":1}}],[\"ctrl+w选中当前average单次\",{\"1\":{\"605\":1}}],[\"ctrl\",{\"1\":{\"87\":1,\"88\":1,\"302\":2,\"616\":4,\"617\":2,\"618\":1,\"620\":1,\"621\":1,\"623\":1,\"627\":1,\"628\":1,\"630\":2,\"631\":2,\"632\":2,\"635\":2,\"636\":1,\"637\":2,\"638\":2,\"641\":2,\"642\":1,\"643\":1,\"644\":3,\"645\":2,\"646\":1,\"670\":1,\"671\":4,\"1559\":2,\"1668\":2,\"1670\":1}}],[\"cvs\",{\"1\":{\"723\":1}}],[\"cmenu\",{\"1\":{\"1191\":1}}],[\"cmd\",{\"1\":{\"674\":1}}],[\"cmp\",{\"1\":{\"288\":3}}],[\"c++\",{\"1\":{\"573\":1,\"1374\":2}}],[\"criteria02\",{\"1\":{\"2503\":2}}],[\"criteria01\",{\"1\":{\"2503\":2}}],[\"criteria\",{\"1\":{\"2503\":3}}],[\"crivsrru\",{\"1\":{\"503\":1}}],[\"crowd\",{\"1\":{\"2487\":1}}],[\"cronie\",{\"1\":{\"810\":1}}],[\"crud\",{\"1\":{\"2179\":4,\"2213\":1,\"2214\":2}}],[\"crash\",{\"1\":{\"772\":1}}],[\"createcriteria\",{\"1\":{\"2503\":1}}],[\"createelement\",{\"0\":{\"1503\":1},\"1\":{\"1505\":4}}],[\"createentry\",{\"1\":{\"294\":2}}],[\"createpopup\",{\"1\":{\"1452\":1}}],[\"createsavepoint\",{\"1\":{\"2702\":2}}],[\"createstatement\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1242\":1,\"1255\":1}}],[\"createserver\",{\"1\":{\"88\":1}}],[\"created\",{\"1\":{\"1198\":1,\"1730\":2,\"1928\":1}}],[\"create\",{\"1\":{\"760\":1,\"934\":1,\"937\":3,\"946\":1,\"948\":1,\"954\":1,\"955\":1,\"956\":3,\"965\":2,\"982\":1,\"987\":3,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1076\":1,\"1077\":1,\"1078\":1,\"1079\":2,\"1080\":1,\"1081\":1,\"1115\":3,\"1116\":1,\"1133\":1,\"1134\":1,\"1135\":1,\"1139\":1,\"1147\":2,\"1156\":2,\"1211\":4,\"1239\":1,\"1775\":1,\"2128\":1,\"2166\":1,\"2182\":1,\"2240\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2247\":1,\"2248\":1,\"2293\":1,\"2417\":2,\"2615\":2,\"2695\":1,\"2881\":1}}],[\"createthread\",{\"1\":{\"440\":1}}],[\"createnewfile\",{\"1\":{\"386\":2,\"387\":3}}],[\"c类ip地址\",{\"1\":{\"493\":1}}],[\"customlogmessageformat=\",{\"1\":{\"2298\":1,\"2299\":1,\"2301\":1}}],[\"customlineformat\",{\"1\":{\"2298\":1,\"2299\":2,\"2301\":1}}],[\"custom\",{\"1\":{\"922\":1}}],[\"customer\",{\"1\":{\"827\":4}}],[\"customercondition\",{\"1\":{\"490\":3}}],[\"customerthread\",{\"1\":{\"489\":6,\"490\":6}}],[\"cut\",{\"1\":{\"757\":1}}],[\"curd\",{\"1\":{\"2179\":1}}],[\"curdate\",{\"1\":{\"1093\":1}}],[\"currencysymbol\",{\"1\":{\"2029\":1}}],[\"currencycode\",{\"1\":{\"2029\":1}}],[\"currency\",{\"1\":{\"2029\":3}}],[\"currenttime\",{\"1\":{\"370\":1,\"2298\":1,\"2299\":1,\"2301\":3}}],[\"currenttimemillis\",{\"1\":{\"309\":6,\"356\":4,\"371\":5,\"382\":1,\"829\":2,\"888\":2}}],[\"currentthread\",{\"1\":{\"348\":3,\"349\":3,\"439\":2,\"440\":2,\"441\":2,\"445\":1,\"446\":1,\"456\":1,\"461\":1,\"465\":1,\"471\":1,\"480\":1,\"885\":1,\"887\":1}}],[\"current\",{\"1\":{\"85\":1,\"147\":1,\"316\":8,\"972\":1,\"1093\":3,\"2025\":2,\"2031\":2}}],[\"cur\",{\"1\":{\"1695\":2}}],[\"curstate\",{\"1\":{\"1695\":6}}],[\"cursus\",{\"1\":{\"1609\":2}}],[\"cursor用来模拟指针\",{\"1\":{\"269\":1}}],[\"curtime\",{\"1\":{\"1093\":1}}],[\"curl\",{\"1\":{\"810\":2}}],[\"cbuf\",{\"1\":{\"404\":1,\"407\":1}}],[\"cs\",{\"1\":{\"1156\":1}}],[\"csdn\",{\"1\":{\"845\":1,\"2726\":1}}],[\"cst\",{\"1\":{\"371\":2,\"891\":2,\"2562\":1,\"2563\":1,\"2564\":1}}],[\"css选择器选择的是html结构中有v\",{\"1\":{\"1638\":1}}],[\"css盒模型本质上是一个盒子\",{\"1\":{\"1527\":1}}],[\"css样式\",{\"1\":{\"1508\":1,\"1509\":1,\"1510\":1,\"2782\":1}}],[\"css样式在更多的时候是以class选择器的形式作用到元素上\",{\"1\":{\"1497\":1}}],[\"css样式遵循就近原则\",{\"1\":{\"1473\":1}}],[\"css的\",{\"1\":{\"1517\":1}}],[\"css的样式作为属性值\",{\"1\":{\"1470\":1}}],[\"css的语法格式\",{\"0\":{\"1469\":1}}],[\"css的作用\",{\"1\":{\"1467\":1}}],[\"css的关系\",{\"0\":{\"1377\":1}}],[\"cssclass\",{\"1\":{\"1198\":1}}],[\"css文件只有样式\",{\"1\":{\"1691\":1}}],[\"css文件\",{\"1\":{\"115\":1,\"173\":2}}],[\"css$\",{\"1\":{\"115\":1}}],[\"css\",{\"0\":{\"57\":1},\"1\":{\"11\":1,\"111\":1,\"115\":7,\"208\":1,\"1377\":1,\"1452\":1,\"1466\":1,\"1471\":1,\"1472\":3,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1528\":1,\"1529\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":3,\"1548\":1,\"1549\":1,\"1552\":2,\"1555\":1,\"1557\":1,\"1559\":1,\"1563\":2,\"1564\":2,\"1568\":8,\"1571\":5,\"1572\":4,\"1596\":2,\"1602\":2,\"1606\":2,\"1609\":2,\"1650\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1785\":1,\"1808\":1,\"1996\":1,\"2740\":1,\"2785\":1,\"2786\":3,\"2789\":4,\"2824\":2}}],[\"cpp\",{\"1\":{\"401\":1}}],[\"cpu\",{\"1\":{\"321\":1}}],[\"cpr\",{\"1\":{\"288\":3}}],[\"ccc\",{\"1\":{\"337\":3,\"1695\":1}}],[\"ccccc\",{\"1\":{\"260\":4}}],[\"cc\",{\"1\":{\"265\":3,\"266\":3,\"300\":2,\"878\":8,\"879\":4,\"1171\":1,\"1695\":1}}],[\"c>\",{\"1\":{\"240\":3}}],[\"clazz\",{\"1\":{\"1266\":4,\"1275\":4,\"2549\":2}}],[\"clark\",{\"1\":{\"1211\":1}}],[\"class字节码文件加载进入内存并执行\",{\"1\":{\"1931\":1}}],[\"class字节码文件\",{\"1\":{\"1930\":2}}],[\"classes\",{\"1\":{\"1772\":1,\"1777\":1}}],[\"class的名字\",{\"1\":{\"1509\":1}}],[\"class的能力\",{\"1\":{\"570\":1}}],[\"classic<\",{\"1\":{\"2484\":1}}],[\"classic\",{\"1\":{\"922\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"2543\":1,\"2546\":1,\"2550\":1,\"2553\":2,\"2554\":1,\"2555\":1,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2566\":1,\"2567\":1,\"2571\":5,\"2574\":5,\"2579\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2672\":1,\"2673\":1,\"2674\":1,\"2678\":1,\"2679\":1,\"2680\":1,\"2697\":1}}],[\"classpath\",{\"1\":{\"772\":1,\"2584\":1,\"2599\":1,\"2601\":1,\"2903\":1,\"2906\":1}}],[\"class扩展名的字节码文件才能够执行\",{\"1\":{\"658\":1}}],[\"class类的应用\",{\"0\":{\"581\":1}}],[\"classloader\",{\"1\":{\"575\":1,\"580\":3,\"2608\":1,\"2609\":4}}],[\"classno\",{\"1\":{\"1001\":10}}],[\"classnotfoundexception\",{\"1\":{\"30\":1,\"428\":2,\"511\":1,\"512\":1,\"513\":1,\"568\":2,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"1216\":1,\"1274\":1,\"1280\":1,\"1288\":1}}],[\"classname=\",{\"1\":{\"2092\":2}}],[\"classname\",{\"1\":{\"575\":1,\"827\":3,\"937\":1,\"955\":1,\"973\":3,\"1489\":2,\"1544\":3}}],[\"class属性值\",{\"1\":{\"1548\":1}}],[\"class属性值获取\",{\"1\":{\"1489\":1}}],[\"class属性获取\",{\"0\":{\"578\":1}}],[\"class属性\",{\"1\":{\"575\":1,\"578\":1}}],[\"class<t>\",{\"1\":{\"2379\":1,\"2380\":1}}],[\"class<student>\",{\"1\":{\"591\":1,\"594\":1}}],[\"class<\",{\"1\":{\"575\":3,\"584\":2,\"587\":1,\"590\":5,\"591\":2,\"593\":2,\"594\":3,\"2608\":1,\"2609\":2}}],[\"class文件\",{\"1\":{\"658\":1,\"1931\":1}}],[\"class文件并加载它\",{\"1\":{\"570\":1}}],[\"class文件中\",{\"1\":{\"553\":1}}],[\"class文件中不会保留注解信息\",{\"1\":{\"553\":1}}],[\"class对象\",{\"1\":{\"570\":1}}],[\"class>org\",{\"1\":{\"2759\":1,\"2807\":1,\"2829\":1,\"2830\":1,\"2910\":1,\"2911\":1,\"2912\":1}}],[\"class>\",{\"1\":{\"545\":1,\"1791\":1,\"1795\":1,\"1831\":2,\"1834\":4,\"1999\":3,\"2047\":2,\"2049\":1,\"2058\":1,\"2075\":1,\"2759\":1,\"2807\":1,\"2829\":1,\"2830\":1,\"2910\":1,\"2911\":1,\"2912\":1}}],[\"class>com\",{\"1\":{\"545\":1,\"1791\":1,\"1795\":1,\"1831\":2,\"1834\":4,\"1999\":3,\"2047\":2,\"2049\":1,\"2058\":1,\"2075\":1}}],[\"classcastexception\",{\"1\":{\"287\":1}}],[\"classs>\",{\"0\":{\"247\":1,\"248\":1}}],[\"class=\",{\"1\":{\"138\":1,\"1433\":1,\"1488\":3,\"1489\":6,\"1508\":2,\"1509\":2,\"1510\":2,\"1515\":1,\"1544\":1,\"1545\":1,\"1548\":3,\"1564\":9,\"1568\":2,\"1579\":1,\"1586\":1,\"1596\":2,\"1602\":9,\"1606\":15,\"1609\":22,\"1650\":1,\"1656\":3,\"1658\":3,\"1659\":3,\"1661\":3,\"1695\":5,\"1698\":1,\"1701\":1,\"2321\":3,\"2374\":2,\"2487\":1,\"2542\":1,\"2546\":1,\"2548\":1,\"2553\":2,\"2554\":2,\"2555\":3,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":2,\"2563\":3,\"2564\":3,\"2566\":7,\"2567\":4,\"2571\":1,\"2574\":2,\"2579\":3,\"2584\":1,\"2588\":1,\"2666\":2,\"2701\":2,\"2706\":1,\"2710\":1,\"2765\":1,\"2779\":5,\"2780\":1,\"2789\":1,\"2799\":2,\"2898\":1,\"2901\":1,\"2903\":4,\"2906\":1,\"2907\":2,\"2908\":1}}],[\"class\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"30\":3,\"32\":1,\"36\":2,\"100\":1,\"208\":1,\"219\":1,\"220\":1,\"234\":2,\"238\":2,\"239\":4,\"240\":6,\"241\":2,\"244\":4,\"245\":2,\"247\":3,\"248\":3,\"251\":1,\"260\":1,\"262\":3,\"263\":2,\"265\":1,\"266\":1,\"274\":2,\"275\":3,\"278\":3,\"279\":1,\"281\":2,\"283\":1,\"286\":1,\"287\":7,\"288\":1,\"292\":1,\"294\":1,\"300\":1,\"303\":1,\"305\":1,\"306\":1,\"309\":1,\"315\":1,\"316\":1,\"318\":1,\"319\":1,\"327\":1,\"328\":1,\"338\":2,\"352\":2,\"356\":2,\"357\":1,\"364\":2,\"367\":1,\"368\":1,\"371\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"379\":1,\"380\":1,\"382\":1,\"387\":1,\"390\":1,\"392\":1,\"395\":1,\"396\":1,\"405\":1,\"408\":1,\"409\":1,\"412\":1,\"415\":1,\"418\":1,\"421\":1,\"422\":2,\"425\":1,\"428\":2,\"431\":1,\"438\":2,\"440\":2,\"441\":2,\"442\":2,\"445\":2,\"446\":2,\"450\":2,\"457\":3,\"458\":2,\"459\":1,\"460\":2,\"461\":1,\"465\":1,\"466\":1,\"471\":2,\"472\":1,\"480\":1,\"489\":4,\"490\":4,\"503\":1,\"506\":1,\"509\":2,\"510\":2,\"511\":3,\"512\":3,\"513\":4,\"515\":2,\"516\":2,\"517\":2,\"518\":2,\"523\":2,\"525\":2,\"538\":1,\"541\":2,\"542\":1,\"543\":1,\"545\":1,\"546\":1,\"553\":1,\"560\":2,\"561\":2,\"562\":1,\"563\":1,\"564\":1,\"568\":7,\"575\":1,\"576\":2,\"577\":2,\"578\":3,\"579\":3,\"580\":3,\"581\":13,\"584\":5,\"585\":11,\"587\":5,\"588\":4,\"590\":4,\"591\":5,\"593\":4,\"594\":2,\"772\":2,\"816\":3,\"817\":3,\"820\":2,\"825\":1,\"826\":1,\"828\":1,\"829\":1,\"830\":1,\"831\":1,\"832\":1,\"835\":1,\"837\":1,\"839\":1,\"840\":1,\"842\":1,\"843\":1,\"844\":1,\"847\":1,\"848\":1,\"856\":2,\"859\":2,\"860\":1,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":1,\"868\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":3,\"874\":1,\"875\":1,\"876\":1,\"888\":1,\"904\":6,\"905\":2,\"1001\":7,\"1215\":1,\"1217\":2,\"1219\":2,\"1220\":2,\"1221\":2,\"1222\":2,\"1226\":1,\"1227\":2,\"1231\":2,\"1234\":2,\"1235\":2,\"1241\":1,\"1242\":2,\"1252\":2,\"1253\":5,\"1256\":1,\"1263\":3,\"1264\":5,\"1266\":4,\"1267\":1,\"1274\":2,\"1275\":2,\"1279\":1,\"1280\":2,\"1286\":1,\"1288\":3,\"1497\":1,\"1548\":3,\"1567\":1,\"1789\":1,\"1790\":1,\"1794\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1825\":1,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":2,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1911\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1936\":1,\"1950\":1,\"1972\":2,\"1976\":4,\"1997\":2,\"1998\":1,\"2001\":1,\"2047\":2,\"2049\":1,\"2052\":2,\"2056\":1,\"2057\":1,\"2061\":1,\"2062\":1,\"2063\":1,\"2075\":1,\"2076\":1,\"2077\":1,\"2079\":1,\"2080\":1,\"2081\":1,\"2082\":1,\"2084\":1,\"2085\":1,\"2087\":1,\"2088\":2,\"2093\":1,\"2095\":1,\"2096\":1,\"2097\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":4,\"2190\":1,\"2192\":1,\"2217\":1,\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2276\":1,\"2282\":1,\"2285\":1,\"2290\":1,\"2293\":1,\"2299\":1,\"2301\":1,\"2374\":2,\"2379\":1,\"2386\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2422\":1,\"2425\":3,\"2428\":3,\"2431\":3,\"2435\":3,\"2444\":2,\"2447\":2,\"2450\":3,\"2453\":1,\"2456\":1,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2475\":2,\"2479\":2,\"2488\":2,\"2503\":1,\"2509\":2,\"2539\":1,\"2543\":1,\"2546\":1,\"2550\":1,\"2552\":1,\"2553\":2,\"2554\":4,\"2555\":3,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2565\":2,\"2566\":1,\"2567\":1,\"2571\":2,\"2574\":2,\"2579\":3,\"2590\":2,\"2591\":2,\"2592\":2,\"2594\":3,\"2595\":1,\"2597\":1,\"2601\":1,\"2602\":2,\"2605\":4,\"2609\":3,\"2612\":3,\"2615\":5,\"2631\":2,\"2635\":1,\"2640\":1,\"2641\":1,\"2642\":1,\"2643\":1,\"2644\":1,\"2649\":3,\"2667\":3,\"2672\":3,\"2673\":2,\"2674\":1,\"2676\":2,\"2678\":1,\"2679\":1,\"2680\":1,\"2697\":4,\"2702\":2,\"2707\":1,\"2711\":1,\"2716\":1,\"2717\":1,\"2749\":1,\"2760\":1,\"2764\":1,\"2793\":1,\"2794\":1,\"2796\":2,\"2798\":1,\"2799\":1,\"2800\":3,\"2801\":3,\"2811\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2825\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2876\":1,\"2878\":1,\"2915\":1,\"2916\":1,\"2917\":1,\"2926\":1,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"clerk\",{\"1\":{\"1211\":4}}],[\"clean是插件maven\",{\"1\":{\"711\":1}}],[\"clean\",{\"0\":{\"708\":1},\"1\":{\"711\":1,\"729\":1}}],[\"clearlocalcache\",{\"1\":{\"2493\":2}}],[\"cleartimeout\",{\"1\":{\"1452\":1,\"1459\":1}}],[\"clearinterval\",{\"1\":{\"1452\":1,\"1458\":1}}],[\"clearbatch\",{\"1\":{\"1231\":2,\"1235\":2}}],[\"clear\",{\"0\":{\"1525\":1},\"1\":{\"219\":3,\"260\":1,\"292\":2,\"327\":1,\"337\":1,\"1235\":1,\"1525\":2,\"1701\":2,\"2493\":1}}],[\"cluster\",{\"1\":{\"922\":1}}],[\"cls\",{\"1\":{\"568\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1}}],[\"cloak这个属性在vue的实例加载完之后关联结束\",{\"1\":{\"1638\":1}}],[\"cloak的属性\",{\"1\":{\"1638\":1}}],[\"cloak>\",{\"1\":{\"1638\":1}}],[\"cloak结合css解决双大括号渲染的难题\",{\"1\":{\"1637\":1,\"1638\":1}}],[\"cloak指令的作用是vue示例渲染后关联结束\",{\"1\":{\"1636\":1}}],[\"cloak\",{\"0\":{\"1636\":1,\"1637\":1},\"1\":{\"1637\":1,\"1638\":3}}],[\"clob\",{\"1\":{\"1209\":1}}],[\"clock\",{\"1\":{\"901\":1}}],[\"clone\",{\"0\":{\"793\":1},\"1\":{\"723\":1}}],[\"cloneable\",{\"1\":{\"294\":1}}],[\"close=\",{\"1\":{\"2464\":1,\"2466\":1,\"2467\":1}}],[\"closeconnection\",{\"1\":{\"2318\":2}}],[\"closed\",{\"1\":{\"1451\":1,\"2493\":2}}],[\"close\",{\"0\":{\"1460\":1},\"1\":{\"164\":1,\"405\":3,\"408\":1,\"409\":2,\"412\":4,\"418\":2,\"421\":2,\"422\":2,\"425\":2,\"428\":1,\"509\":7,\"510\":11,\"511\":11,\"512\":11,\"513\":11,\"515\":2,\"516\":2,\"517\":2,\"518\":2,\"676\":1,\"1215\":2,\"1217\":2,\"1219\":2,\"1220\":2,\"1221\":2,\"1222\":2,\"1223\":1,\"1227\":2,\"1231\":2,\"1234\":2,\"1235\":2,\"1242\":3,\"1252\":4,\"1253\":9,\"1255\":1,\"1259\":1,\"1264\":4,\"1266\":5,\"1274\":1,\"1275\":3,\"1280\":1,\"1288\":1,\"1452\":1,\"1460\":1,\"1855\":1,\"1976\":3,\"2087\":1,\"2282\":1,\"2374\":1,\"2464\":1,\"2571\":1,\"2574\":1}}],[\"cli中的app\",{\"1\":{\"1704\":1}}],[\"cli的起步文件\",{\"0\":{\"1688\":1}}],[\"cli的起步命令是npm\",{\"1\":{\"1687\":1}}],[\"cli提供了三个命令\",{\"1\":{\"1687\":1}}],[\"cli文件的编译过程\",{\"0\":{\"1687\":1}}],[\"cli目录结构\",{\"0\":{\"1686\":1}}],[\"cli脚手架\",{\"1\":{\"1682\":2}}],[\"click=\",{\"1\":{\"1614\":2,\"1621\":2,\"1622\":2,\"1640\":2,\"1645\":2,\"1646\":1,\"1650\":2,\"1658\":2,\"1659\":1,\"1661\":1,\"1664\":2,\"1701\":1,\"1707\":1,\"1711\":1,\"1712\":1,\"1715\":2,\"1730\":1}}],[\"click\",{\"1\":{\"1572\":1,\"1658\":1,\"1659\":2,\"1660\":1,\"1661\":2,\"1662\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"2877\":1}}],[\"client\",{\"1\":{\"922\":1}}],[\"clip\",{\"1\":{\"208\":2}}],[\"cli\",{\"0\":{\"1685\":1},\"1\":{\"97\":1,\"112\":1,\"1682\":5,\"1687\":4}}],[\"cnid=undefined\",{\"1\":{\"1310\":1}}],[\"cname\",{\"1\":{\"1072\":3,\"1073\":1}}],[\"cno=tc\",{\"1\":{\"1072\":1}}],[\"cno\",{\"1\":{\"1001\":9,\"1072\":5,\"1073\":1}}],[\"cn\",{\"1\":{\"85\":1,\"683\":1,\"1344\":1,\"1609\":1,\"1611\":1,\"2314\":1}}],[\"ch\",{\"1\":{\"2487\":1}}],[\"choose>\",{\"1\":{\"2023\":2,\"2025\":2,\"2031\":2,\"2449\":1,\"2450\":1}}],[\"choose标签\",{\"0\":{\"2023\":1,\"2448\":1}}],[\"child\",{\"1\":{\"1552\":20}}],[\"childnodes\",{\"1\":{\"1485\":1}}],[\"children\",{\"1\":{\"1392\":4}}],[\"chinahigood\",{\"1\":{\"1406\":1}}],[\"china\",{\"1\":{\"1406\":1}}],[\"chinese\",{\"1\":{\"1156\":1}}],[\"chicago\",{\"1\":{\"1211\":1}}],[\"chm\",{\"1\":{\"930\":1}}],[\"chkconfig\",{\"1\":{\"810\":1}}],[\"changevalue\",{\"1\":{\"1730\":2}}],[\"change事件同步\",{\"1\":{\"1675\":1}}],[\"change\",{\"1\":{\"960\":1,\"1928\":1}}],[\"changes\",{\"1\":{\"789\":1}}],[\"chartreuse\",{\"1\":{\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1}}],[\"charts\",{\"1\":{\"61\":1}}],[\"charcodeat\",{\"1\":{\"1405\":1}}],[\"char和varchar表示的是字符的个数\",{\"1\":{\"941\":1}}],[\"char和varchar类型相似\",{\"1\":{\"941\":1}}],[\"char类型长度固定\",{\"1\":{\"941\":1}}],[\"chars\",{\"1\":{\"405\":8,\"408\":7,\"409\":8,\"421\":4}}],[\"charset\",{\"1\":{\"177\":1,\"2052\":1,\"2057\":4,\"2154\":1}}],[\"charset=utf\",{\"1\":{\"1293\":1,\"1806\":1,\"1813\":1,\"1856\":2,\"1860\":2,\"1893\":1,\"1927\":1,\"1928\":1,\"1951\":1,\"1952\":1,\"1960\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"1997\":2,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2096\":1,\"2114\":1,\"2115\":1,\"2120\":1,\"2121\":1,\"2124\":1,\"2128\":2,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":2,\"2750\":1,\"2786\":1,\"2793\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"charset=utf8\",{\"1\":{\"1239\":1}}],[\"charset=utf8mb4\",{\"1\":{\"937\":1,\"965\":1,\"2695\":1,\"2881\":1}}],[\"charset=\",{\"1\":{\"65\":1,\"76\":1,\"1293\":2,\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1322\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1482\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1548\":1,\"1549\":2,\"1552\":2,\"1555\":2,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1690\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"1927\":1,\"2131\":1,\"2132\":2,\"2159\":2,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"charat\",{\"1\":{\"395\":1,\"396\":1,\"431\":1,\"1405\":1,\"1406\":1,\"1579\":1}}],[\"characterencodingfilter<\",{\"1\":{\"2807\":1,\"2912\":1}}],[\"characterencoding=utf\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"1976\":1,\"2187\":1,\"2278\":1,\"2293\":1,\"2332\":1,\"2374\":1,\"2501\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"character\",{\"1\":{\"360\":2,\"946\":1,\"950\":1,\"1154\":1,\"1156\":6,\"1889\":1,\"2417\":3}}],[\"char\",{\"1\":{\"360\":1,\"392\":1,\"404\":2,\"405\":4,\"407\":1,\"408\":2,\"409\":4,\"421\":2,\"431\":1,\"564\":1,\"937\":2,\"941\":1,\"955\":1,\"965\":1,\"972\":1,\"1087\":1,\"1156\":1,\"2509\":2}}],[\"checkuname\",{\"1\":{\"2114\":2,\"2131\":2,\"2169\":2,\"2170\":2,\"2171\":2}}],[\"checkusername\",{\"1\":{\"1579\":3,\"1586\":3}}],[\"checkform\",{\"1\":{\"1579\":2,\"1586\":2}}],[\"checkrepwd\",{\"1\":{\"1579\":3,\"1586\":3}}],[\"checkpassword\",{\"1\":{\"1579\":3,\"1586\":3}}],[\"checkbox组件\",{\"1\":{\"1801\":1}}],[\"checkboxkey\",{\"1\":{\"1801\":1}}],[\"checkbox\",{\"0\":{\"1336\":1},\"1\":{\"1336\":4,\"1490\":3,\"1491\":3,\"1554\":1,\"1555\":1,\"2796\":3}}],[\"checkemail\",{\"1\":{\"1579\":3,\"1586\":3}}],[\"checked\",{\"1\":{\"1335\":2,\"1336\":2,\"1555\":4}}],[\"checked=\",{\"1\":{\"1335\":2,\"1336\":2,\"1555\":1}}],[\"checkelementindex\",{\"1\":{\"263\":1}}],[\"check\",{\"0\":{\"1014\":1},\"1\":{\"981\":1,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1}}],[\"checkout\",{\"1\":{\"729\":2,\"743\":1,\"748\":1}}],[\"chrome浏览器为50个\",{\"1\":{\"1885\":1}}],[\"chrome\",{\"1\":{\"61\":1,\"87\":1,\"177\":1,\"1559\":1}}],[\"caucho\",{\"1\":{\"1735\":1}}],[\"capture=\",{\"1\":{\"1661\":2}}],[\"capture修饰符是对事件捕获的监听\",{\"1\":{\"1661\":1}}],[\"capture修饰符\",{\"0\":{\"1661\":1}}],[\"caption\",{\"1\":{\"1609\":4}}],[\"capacity的值一定是\",{\"1\":{\"294\":1}}],[\"capacity\",{\"1\":{\"279\":2,\"280\":1,\"294\":10,\"328\":5,\"338\":5}}],[\"carousel\",{\"1\":{\"1609\":16}}],[\"carouselexamplecaptions\",{\"1\":{\"1609\":7}}],[\"cards\",{\"1\":{\"1558\":1}}],[\"cadetblue\",{\"1\":{\"1536\":1}}],[\"calculatorpureimpl\",{\"1\":{\"2651\":1,\"2652\":1,\"2653\":1}}],[\"calculator\",{\"1\":{\"523\":9,\"525\":9,\"2635\":2}}],[\"callback+\",{\"1\":{\"2170\":1,\"2171\":1}}],[\"callback\",{\"1\":{\"2150\":1,\"2158\":2,\"2161\":2,\"2163\":2,\"2165\":2,\"2170\":3,\"2171\":1}}],[\"callback=x\",{\"1\":{\"2163\":1}}],[\"callback=\",{\"1\":{\"2141\":1,\"2150\":1}}],[\"call\",{\"1\":{\"450\":1,\"1147\":4}}],[\"callable\",{\"1\":{\"2493\":1}}],[\"callablestatement\",{\"1\":{\"1255\":2,\"1257\":1,\"2509\":2}}],[\"callable<integer>\",{\"1\":{\"450\":1}}],[\"callabledemo\",{\"1\":{\"450\":5}}],[\"calendar无法使用\",{\"1\":{\"378\":1}}],[\"calendar类\",{\"1\":{\"378\":1}}],[\"calendar是一个抽象类\",{\"1\":{\"375\":1}}],[\"calendar\",{\"0\":{\"375\":1},\"1\":{\"375\":14,\"376\":11,\"1191\":1}}],[\"canwrite\",{\"1\":{\"386\":2,\"387\":1,\"389\":2,\"390\":1}}],[\"canread\",{\"1\":{\"386\":2,\"387\":1,\"389\":2,\"390\":1}}],[\"cannot\",{\"1\":{\"364\":1}}],[\"canvas\",{\"1\":{\"61\":1}}],[\"castor\",{\"1\":{\"2530\":1}}],[\"cascade方式\",{\"1\":{\"1003\":1}}],[\"cascade\",{\"1\":{\"1001\":4,\"2417\":4}}],[\"cascading\",{\"1\":{\"208\":1,\"1466\":1}}],[\"case\",{\"1\":{\"564\":2,\"1094\":3,\"1366\":12,\"2449\":1}}],[\"case=\",{\"1\":{\"146\":3}}],[\"cas\",{\"1\":{\"311\":1}}],[\"cachekey\",{\"1\":{\"2493\":2}}],[\"caches\",{\"1\":{\"2486\":1}}],[\"caches<\",{\"1\":{\"2484\":1}}],[\"cache接口的方法\",{\"0\":{\"2491\":1}}],[\"cache接口\",{\"0\":{\"2490\":1},\"1\":{\"2481\":1,\"2490\":1}}],[\"cacheenabled的默认值就是true\",{\"1\":{\"2478\":1}}],[\"cacheprepstmts=true\",{\"1\":{\"1251\":1,\"1252\":1}}],[\"cacheprepstmts\",{\"1\":{\"1251\":2}}],[\"cache中指定的值\",{\"1\":{\"364\":1}}],[\"cache\",{\"0\":{\"2139\":1},\"1\":{\"177\":1,\"363\":1,\"364\":5,\"2155\":1,\"2479\":1,\"2481\":1,\"2490\":1,\"2492\":1}}],[\"cat02\",{\"1\":{\"2564\":2}}],[\"cat01\",{\"1\":{\"2563\":2}}],[\"cat\",{\"1\":{\"2563\":6,\"2564\":6,\"2876\":1,\"2878\":1}}],[\"catalina\",{\"1\":{\"1764\":1,\"1766\":1,\"1779\":2,\"2092\":2}}],[\"category表去连接第一步查询出来的结果\",{\"1\":{\"1072\":1}}],[\"category\",{\"1\":{\"65\":1,\"1072\":2,\"1073\":1,\"1198\":1,\"2298\":1,\"2299\":4,\"2301\":3}}],[\"catch捕获或者throws向上抛\",{\"1\":{\"36\":1}}],[\"catch中没有正常的进行异常捕获\",{\"1\":{\"23\":1}}],[\"catch中\",{\"1\":{\"23\":1}}],[\"catch中处理异常\",{\"0\":{\"21\":1}}],[\"catch中代码不执行\",{\"1\":{\"20\":1}}],[\"catch进行捕获\",{\"1\":{\"20\":1}}],[\"catch后面的代码该执行还是执行没有影响\",{\"1\":{\"20\":1}}],[\"catch后面的代码\",{\"1\":{\"19\":1}}],[\"catch\",{\"0\":{\"18\":1,\"22\":1},\"1\":{\"19\":1,\"21\":1,\"24\":1,\"27\":3,\"30\":3,\"32\":2,\"327\":2,\"348\":3,\"349\":3,\"356\":1,\"364\":1,\"374\":1,\"438\":1,\"440\":1,\"441\":1,\"445\":1,\"457\":2,\"460\":1,\"480\":1,\"489\":2,\"490\":2,\"512\":14,\"513\":15,\"517\":4,\"518\":4,\"617\":1,\"891\":1,\"1217\":3,\"1219\":3,\"1220\":3,\"1221\":3,\"1222\":3,\"1227\":3,\"1231\":3,\"1234\":5,\"1235\":5,\"1242\":3,\"1252\":4,\"1253\":13,\"1264\":6,\"1266\":7,\"1274\":4,\"1275\":5,\"1279\":1,\"1280\":4,\"1288\":5,\"1825\":2,\"1976\":4,\"2087\":1,\"2176\":1,\"2282\":1,\"2374\":1,\"2623\":1,\"2702\":1,\"2737\":1,\"2799\":1}}],[\"c\",{\"0\":{\"2022\":1,\"2023\":1,\"2025\":1,\"2950\":1,\"2953\":1,\"2976\":1,\"2980\":1,\"2997\":1,\"3012\":1,\"3069\":2,\"3081\":1,\"3098\":1,\"3175\":1,\"3185\":1},\"1\":{\"48\":2,\"75\":1,\"88\":1,\"118\":1,\"219\":3,\"238\":2,\"240\":3,\"327\":6,\"348\":1,\"349\":1,\"357\":4,\"387\":3,\"390\":1,\"401\":1,\"408\":1,\"431\":3,\"572\":2,\"573\":1,\"585\":4,\"588\":4,\"591\":12,\"594\":6,\"632\":1,\"674\":2,\"763\":1,\"773\":1,\"816\":2,\"817\":2,\"923\":2,\"925\":1,\"1093\":1,\"1152\":1,\"1287\":2,\"1363\":4,\"1364\":4,\"1370\":5,\"1374\":1,\"1406\":4,\"1544\":2,\"1559\":1,\"1579\":3,\"1712\":1,\"1779\":1,\"1874\":1,\"1879\":1,\"1917\":1,\"1921\":1,\"1925\":1,\"1972\":1,\"1975\":1,\"1976\":1,\"2016\":1,\"2018\":6,\"2019\":5,\"2020\":1,\"2022\":10,\"2023\":8,\"2025\":16,\"2031\":11,\"2293\":1,\"2312\":2,\"2559\":7,\"2566\":1,\"2567\":1,\"2666\":4,\"2740\":1,\"2757\":1,\"2758\":4,\"2770\":1,\"2779\":4,\"2780\":4,\"2789\":4,\"2896\":1,\"2898\":4,\"2899\":5,\"2903\":4,\"2904\":5}}],[\"coder\",{\"0\":{\"2933\":1}}],[\"code>404<\",{\"1\":{\"1960\":1}}],[\"code>\",{\"1\":{\"1960\":2}}],[\"code>500<\",{\"1\":{\"1960\":1}}],[\"code\",{\"1\":{\"1635\":4,\"1683\":1,\"1889\":2,\"2196\":1}}],[\"codd发表的关系数据库理论为基础开发的\",{\"1\":{\"930\":1}}],[\"cornflowerblue\",{\"1\":{\"1535\":2}}],[\"coral\",{\"1\":{\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1535\":2}}],[\"core<\",{\"1\":{\"2311\":1,\"2500\":1,\"2875\":1,\"2891\":2}}],[\"core\",{\"0\":{\"2532\":1},\"1\":{\"773\":1,\"1687\":1,\"2013\":1,\"2016\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2487\":1,\"2532\":2,\"2538\":1,\"2629\":1,\"2666\":1}}],[\"cos\",{\"1\":{\"1411\":1}}],[\"cow类并发容器\",{\"1\":{\"313\":1}}],[\"cow容器\",{\"0\":{\"312\":1},\"1\":{\"37\":1}}],[\"copyof\",{\"1\":{\"316\":2}}],[\"copyonwritearrayset底层基于copyonwritearraylist\",{\"1\":{\"319\":1}}],[\"copyonwritearrayset<e>\",{\"1\":{\"319\":1}}],[\"copyonwritearrayset<>\",{\"1\":{\"318\":1}}],[\"copyonwritearrayset<integer>\",{\"1\":{\"318\":1}}],[\"copyonwritearrayset\",{\"0\":{\"317\":1},\"1\":{\"319\":1}}],[\"copyonwritearraylist<e>\",{\"1\":{\"316\":1,\"319\":2}}],[\"copyonwritearraylist<>\",{\"1\":{\"315\":1}}],[\"copyonwritearraylist<integer>\",{\"1\":{\"315\":1}}],[\"copyonwritearraylist\",{\"0\":{\"314\":1},\"1\":{\"316\":1}}],[\"copyonwrite容器只能保证数据的最终一致性\",{\"1\":{\"313\":1}}],[\"copy\",{\"1\":{\"300\":2,\"313\":1,\"757\":1,\"1301\":1}}],[\"cookie和\",{\"0\":{\"3134\":1}}],[\"cookievalue\",{\"0\":{\"2852\":1},\"1\":{\"2856\":3,\"2857\":1}}],[\"cookie不安全\",{\"1\":{\"1902\":1}}],[\"cookie不支持一级域名的跨域\",{\"1\":{\"1891\":1}}],[\"cookie不支持中文的解决方案\",{\"0\":{\"1889\":1}}],[\"cookie数据存放在客户的浏览器或系统的文件中\",{\"1\":{\"1902\":1}}],[\"cookie案例\",{\"0\":{\"1893\":1}}],[\"cookie跨越\",{\"0\":{\"1891\":1}}],[\"cookie持久化和状态cookie\",{\"0\":{\"1890\":1}}],[\"cookies\",{\"1\":{\"1888\":1,\"1892\":3,\"1893\":3}}],[\"cookie分为持久化cookie\",{\"1\":{\"1885\":1}}],[\"cookie是与域名绑定所以不支持跨一级域名访问\",{\"1\":{\"1885\":1}}],[\"cookie是一种保存少量信息至浏览器的一种技术\",{\"1\":{\"1884\":1}}],[\"cookie存储的数据中不支持中文\",{\"1\":{\"1885\":1}}],[\"cookie使用key与value结构存储数据\",{\"1\":{\"1885\":1}}],[\"cookie使用字符串存储数据\",{\"1\":{\"1885\":1}}],[\"cookie对象的获取\",{\"0\":{\"1888\":1}}],[\"cookie对象的创建\",{\"0\":{\"1887\":1}}],[\"cookie对象的api\",{\"0\":{\"1886\":1}}],[\"cookie对象的特点\",{\"0\":{\"1885\":1}}],[\"cookie对象保存在客户端浏览器内存上或系统磁盘中\",{\"1\":{\"1885\":1}}],[\"cookie对象与httpsession对象的作用是维护客户端浏览器与服务端的会话状态的两个对象\",{\"1\":{\"1882\":1}}],[\"cookie的使用\",{\"0\":{\"1884\":1}}],[\"cookie\",{\"1\":{\"177\":1,\"1883\":1,\"1887\":4,\"1888\":1,\"1889\":1,\"1892\":12,\"1893\":10,\"2853\":1,\"2855\":2}}],[\"court\",{\"1\":{\"2605\":4}}],[\"course\",{\"1\":{\"176\":1}}],[\"counting\",{\"1\":{\"880\":1}}],[\"count参数指定子数组的长度\",{\"1\":{\"404\":1}}],[\"count+=begin\",{\"1\":{\"376\":1}}],[\"count++\",{\"1\":{\"262\":1,\"328\":1,\"376\":1,\"513\":1}}],[\"count减1操作\",{\"1\":{\"328\":1}}],[\"count加1操作\",{\"1\":{\"328\":1}}],[\"count\",{\"0\":{\"863\":1},\"1\":{\"147\":1,\"262\":2,\"328\":2,\"330\":1,\"338\":1,\"376\":2,\"392\":1,\"404\":1,\"513\":1,\"861\":1,\"863\":4,\"885\":1,\"887\":1,\"1041\":1,\"1072\":3,\"1191\":1,\"1893\":9,\"2025\":2,\"2031\":2,\"2088\":9,\"2219\":3,\"2239\":1,\"2241\":3,\"2672\":1}}],[\"con\",{\"1\":{\"1455\":2}}],[\"conversion\",{\"1\":{\"2799\":1}}],[\"conversionpattern=\",{\"1\":{\"1285\":1,\"2308\":1,\"2374\":1}}],[\"conversionservicefactorybean\",{\"1\":{\"2799\":1}}],[\"conversionservice\",{\"1\":{\"2799\":2}}],[\"conversions\",{\"1\":{\"725\":1}}],[\"converters\",{\"1\":{\"2799\":1}}],[\"converter<string\",{\"1\":{\"2799\":1}}],[\"convert\",{\"1\":{\"1156\":1,\"2799\":1}}],[\"conf下logging\",{\"1\":{\"1810\":1}}],[\"conf目录主要是用来存放tomcat的一些配置文件\",{\"1\":{\"1744\":1}}],[\"confirm\",{\"1\":{\"760\":1,\"1452\":1,\"1455\":1}}],[\"config标签中配置\",{\"1\":{\"2648\":1}}],[\"config>\",{\"1\":{\"1899\":2,\"2648\":2,\"2710\":2}}],[\"configuration的导入\",{\"1\":{\"2285\":1}}],[\"configuration>\",{\"1\":{\"2186\":1,\"2278\":1,\"2312\":1,\"2374\":1,\"2487\":1,\"2757\":1,\"2896\":1}}],[\"configurations\",{\"1\":{\"1777\":1}}],[\"configuration到此结束\",{\"1\":{\"922\":1}}],[\"configuration\",{\"1\":{\"922\":2,\"2193\":1,\"2278\":1,\"2285\":1,\"2290\":1,\"2314\":1,\"2374\":1,\"2493\":1,\"2501\":1,\"2649\":1}}],[\"configure\",{\"1\":{\"922\":1}}],[\"configured\",{\"1\":{\"364\":1}}],[\"configuring\",{\"1\":{\"725\":2}}],[\"config\",{\"0\":{\"3130\":1},\"1\":{\"93\":2,\"114\":1,\"115\":1,\"726\":3,\"731\":2,\"1681\":3,\"1686\":1,\"1689\":1,\"1818\":1,\"2225\":2,\"2229\":2,\"2235\":6,\"2278\":2,\"2332\":1,\"2334\":2,\"2374\":3,\"2485\":1,\"2501\":1,\"2710\":1}}],[\"conf\",{\"1\":{\"675\":1,\"1744\":1,\"1779\":1}}],[\"conditon中的await\",{\"1\":{\"475\":1}}],[\"condition中的signalall\",{\"1\":{\"475\":1}}],[\"condition中的signal\",{\"1\":{\"475\":1}}],[\"condition是在java\",{\"1\":{\"475\":1}}],[\"condition等待池\",{\"0\":{\"475\":1}}],[\"condition\",{\"0\":{\"479\":1},\"1\":{\"328\":2,\"338\":2,\"475\":3,\"478\":5,\"490\":2}}],[\"concatspliterator\",{\"1\":{\"875\":1}}],[\"concat\",{\"0\":{\"875\":1,\"1392\":1,\"1393\":1},\"1\":{\"431\":1,\"861\":1,\"875\":4,\"876\":3,\"1086\":2,\"1147\":2,\"1392\":2,\"1405\":1,\"1406\":1,\"2407\":1,\"2459\":2}}],[\"concurrent\",{\"1\":{\"352\":1,\"356\":3}}],[\"concurrenthashmap在jdk1\",{\"1\":{\"311\":1}}],[\"concurrenthashmap<>\",{\"1\":{\"309\":1}}],[\"concurrenthashmap<string\",{\"1\":{\"309\":1}}],[\"concurrenthashmap\",{\"1\":{\"309\":2,\"311\":8}}],[\"concurrenthashmap使用了粒度更小的锁\",{\"1\":{\"308\":1}}],[\"concurrencylevel\",{\"1\":{\"311\":1}}],[\"connectivity\",{\"1\":{\"1205\":1}}],[\"connectionurl=\",{\"1\":{\"2501\":1}}],[\"connectionid\",{\"1\":{\"2298\":1,\"2299\":3,\"2301\":3}}],[\"connectiontimeout\",{\"1\":{\"1765\":1}}],[\"connectiontimeout=\",{\"1\":{\"1756\":1,\"1757\":1,\"1765\":1,\"1812\":1}}],[\"connection=\",{\"1\":{\"1288\":1}}],[\"connection对象是可以反复使用的\",{\"1\":{\"1271\":1}}],[\"connection对象都会被销毁\",{\"1\":{\"1271\":1}}],[\"connection对象在每次执行dml和dql的过程中都要创建一次\",{\"1\":{\"1271\":1}}],[\"connection中\",{\"1\":{\"1233\":1}}],[\"connection接口\",{\"0\":{\"1255\":1},\"1\":{\"1206\":1}}],[\"connection\",{\"1\":{\"177\":1,\"1209\":1,\"1210\":2,\"1215\":7,\"1217\":6,\"1219\":6,\"1220\":6,\"1221\":6,\"1222\":6,\"1227\":6,\"1231\":6,\"1234\":11,\"1235\":14,\"1242\":6,\"1252\":6,\"1253\":24,\"1255\":3,\"1256\":3,\"1264\":12,\"1266\":12,\"1274\":20,\"1275\":10,\"1280\":19,\"1288\":17,\"1976\":5,\"2299\":1,\"2301\":1}}],[\"connector依赖\",{\"1\":{\"2582\":1}}],[\"connector把httpservletresponse对象返回给客户browser\",{\"1\":{\"1769\":1}}],[\"connector把该请求交给它所在的service的engine来处理\",{\"1\":{\"1769\":1}}],[\"connector获得请求\",{\"1\":{\"1769\":1}}],[\"connector组件\",{\"0\":{\"1765\":1},\"1\":{\"1769\":1}}],[\"connector\",{\"1\":{\"683\":1,\"2186\":1,\"2267\":1,\"2374\":1,\"2500\":1,\"2582\":1,\"2665\":2,\"2756\":2,\"2890\":1}}],[\"connect\",{\"0\":{\"187\":1}}],[\"continue\",{\"1\":{\"1690\":1}}],[\"context和\",{\"0\":{\"3130\":1}}],[\"contextloaderlistener<\",{\"1\":{\"2911\":1}}],[\"context=new\",{\"1\":{\"2649\":1}}],[\"context=\",{\"1\":{\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"context的时候\",{\"1\":{\"2538\":1}}],[\"context>\",{\"1\":{\"2092\":1,\"2501\":1}}],[\"contextdestroyed\",{\"1\":{\"2084\":1}}],[\"contextinitialized\",{\"1\":{\"2084\":1}}],[\"contextpath+\",{\"1\":{\"1878\":1}}],[\"contextpath\",{\"1\":{\"1831\":2,\"1878\":1,\"2824\":7}}],[\"context中指定我们项目访问的路径名\",{\"1\":{\"1777\":1}}],[\"context把执行完之后的结果通过httpservletresponse对象返回给host\",{\"1\":{\"1769\":1}}],[\"context是host的子标签\",{\"1\":{\"1768\":1}}],[\"context组件\",{\"0\":{\"1768\":1},\"1\":{\"1769\":1}}],[\"context\",{\"0\":{\"1750\":1},\"1\":{\"1749\":1,\"1750\":1,\"1768\":1,\"1831\":2,\"2532\":2,\"2538\":1,\"2584\":4,\"2588\":20,\"2590\":4,\"2591\":4,\"2592\":6,\"2594\":4,\"2599\":4,\"2614\":1,\"2629\":1,\"2630\":4,\"2648\":4,\"2649\":1,\"2665\":1,\"2666\":4,\"2756\":1,\"2758\":4,\"2779\":4,\"2780\":4,\"2789\":4,\"2799\":1,\"2898\":5,\"2899\":5,\"2900\":1,\"2903\":6,\"2904\":5,\"2905\":1,\"2906\":1,\"2911\":2}}],[\"context<\",{\"1\":{\"700\":1,\"2538\":1,\"2614\":1,\"2629\":1,\"2665\":1,\"2756\":1,\"2889\":1}}],[\"contenttype\",{\"0\":{\"2146\":1},\"1\":{\"1959\":1,\"2155\":1}}],[\"contenttype=\",{\"1\":{\"1928\":1,\"1951\":1,\"1952\":1,\"1960\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2176\":1,\"2750\":1,\"2786\":1,\"2793\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"content\",{\"0\":{\"203\":1,\"204\":1,\"205\":1},\"1\":{\"88\":1,\"158\":1,\"675\":1,\"1195\":1,\"1293\":1,\"1527\":1,\"1606\":1,\"1617\":1,\"1695\":4,\"1701\":6,\"1730\":5,\"1805\":1,\"1807\":2,\"1808\":1,\"1814\":1,\"1889\":2,\"2155\":1}}],[\"content=\",{\"1\":{\"76\":2,\"1293\":5,\"1690\":2,\"1701\":1}}],[\"containsvalue\",{\"1\":{\"292\":2}}],[\"containskey\",{\"1\":{\"292\":2}}],[\"contains\",{\"1\":{\"219\":3,\"847\":1,\"848\":2,\"2063\":3}}],[\"container\",{\"0\":{\"2532\":1},\"1\":{\"65\":2,\"1594\":2,\"1595\":2,\"1596\":3,\"1601\":2,\"1602\":1,\"1606\":5,\"1931\":1,\"1933\":2}}],[\"controller+\",{\"1\":{\"2878\":1}}],[\"controller控制单元\",{\"1\":{\"2811\":1,\"2814\":1,\"2817\":1,\"2820\":1}}],[\"controller控制器\",{\"1\":{\"118\":1}}],[\"controller层testrestful\",{\"1\":{\"2830\":1}}],[\"controller层\",{\"1\":{\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2857\":1,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2876\":1}}],[\"controller层路径问题\",{\"0\":{\"2764\":1}}],[\"controller注解提交给spring管理\",{\"1\":{\"2761\":1}}],[\"controller注解让当前类被spring扫描到\",{\"1\":{\"2760\":1}}],[\"controller\",{\"1\":{\"2034\":1,\"2179\":1,\"2587\":1,\"2588\":1,\"2740\":1,\"2749\":1,\"2760\":1,\"2764\":1,\"2780\":1,\"2811\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2827\":4,\"2859\":1,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2876\":1,\"2898\":1,\"2900\":1,\"2916\":1,\"2926\":1,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"control\",{\"0\":{\"935\":1,\"936\":1},\"1\":{\"177\":1,\"721\":1,\"1609\":4,\"1889\":1,\"2172\":4}}],[\"consequat\",{\"1\":{\"1606\":1}}],[\"consectetur\",{\"1\":{\"1606\":1,\"1609\":3}}],[\"consistency\",{\"0\":{\"2686\":1},\"1\":{\"1102\":1,\"2684\":1}}],[\"consumer2\",{\"1\":{\"840\":6}}],[\"consumer1\",{\"1\":{\"840\":5}}],[\"consumerlambda\",{\"1\":{\"839\":1,\"840\":1}}],[\"consumer<string>\",{\"1\":{\"839\":1,\"840\":2}}],[\"consumer<\",{\"1\":{\"838\":1,\"862\":1}}],[\"consumer<t>\",{\"1\":{\"838\":2}}],[\"consumer<int\",{\"1\":{\"825\":1,\"826\":1}}],[\"consumer接口\",{\"0\":{\"838\":1}}],[\"consumer\",{\"1\":{\"825\":2,\"826\":2,\"839\":3}}],[\"consortium\",{\"1\":{\"162\":1}}],[\"console>\",{\"1\":{\"2312\":1,\"2757\":1,\"2896\":1}}],[\"consolehandler\",{\"1\":{\"1755\":1}}],[\"consoleappender\",{\"1\":{\"1285\":2,\"2308\":1,\"2374\":1,\"2487\":1}}],[\"console\",{\"1\":{\"73\":4,\"74\":1,\"75\":4,\"76\":4,\"77\":2,\"78\":2,\"79\":4,\"80\":4,\"87\":1,\"88\":1,\"103\":2,\"106\":2,\"109\":2,\"1383\":1,\"1384\":1,\"1385\":2,\"1386\":5,\"1388\":1,\"1389\":1,\"1391\":1,\"1392\":2,\"1393\":1,\"1394\":2,\"1395\":1,\"1396\":1,\"1397\":2,\"1398\":1,\"1399\":1,\"1400\":2,\"1401\":2,\"1406\":7,\"1409\":12,\"1412\":12,\"1416\":13,\"1417\":1,\"1419\":4,\"1420\":3,\"1421\":4,\"1423\":3,\"1424\":6,\"1425\":4,\"1433\":6,\"1436\":3,\"1439\":6,\"1442\":1,\"1455\":1,\"1456\":1,\"1459\":1,\"1462\":4,\"1464\":4,\"1488\":1,\"1489\":2,\"1490\":2,\"1491\":2,\"1493\":2,\"1494\":2,\"1555\":1,\"1567\":3,\"1568\":3,\"1570\":3,\"1572\":1,\"1573\":7,\"1574\":5,\"1585\":1,\"1640\":2,\"1656\":3,\"1658\":3,\"1659\":3,\"1661\":3,\"1721\":1,\"1730\":6,\"2120\":1,\"2124\":4,\"2128\":4,\"2132\":2,\"2166\":5,\"2312\":2,\"2757\":2,\"2877\":1,\"2896\":2}}],[\"constraint\",{\"1\":{\"988\":4,\"994\":4,\"1000\":1,\"1001\":3,\"1211\":2,\"2417\":2}}],[\"constraints\",{\"1\":{\"982\":1}}],[\"constructor对象\",{\"1\":{\"1423\":1,\"1424\":1}}],[\"constructor1\",{\"1\":{\"585\":3}}],[\"constructors\",{\"1\":{\"585\":2}}],[\"constructor<t>\",{\"1\":{\"584\":2}}],[\"constructor<\",{\"1\":{\"584\":2}}],[\"constructor\",{\"0\":{\"2558\":1},\"1\":{\"554\":1,\"585\":8,\"1825\":1,\"2001\":1,\"2556\":1,\"2558\":6,\"2559\":3}}],[\"constants\",{\"1\":{\"2334\":1}}],[\"constant\",{\"1\":{\"294\":1}}],[\"const\",{\"1\":{\"74\":1,\"88\":1,\"102\":4,\"103\":3,\"114\":3,\"115\":1}}],[\"const声明常量\",{\"0\":{\"74\":1}}],[\"colebourne\",{\"1\":{\"2508\":1}}],[\"col\",{\"1\":{\"1544\":5,\"1545\":5,\"1600\":5,\"1601\":2,\"1602\":6}}],[\"colindex\",{\"1\":{\"1223\":3,\"1259\":3}}],[\"color=\",{\"1\":{\"1306\":1,\"1567\":1,\"1579\":10,\"1586\":8}}],[\"color\",{\"1\":{\"1188\":1,\"1346\":2,\"1433\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1496\":2,\"1497\":2,\"1508\":2,\"1509\":1,\"1510\":1,\"1513\":3,\"1514\":2,\"1515\":5,\"1521\":16,\"1523\":4,\"1524\":4,\"1525\":5,\"1528\":1,\"1529\":2,\"1533\":4,\"1534\":4,\"1535\":6,\"1536\":1,\"1544\":3,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":2,\"1567\":4,\"1568\":3,\"1571\":7,\"1572\":4,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":2,\"1602\":6,\"1650\":3,\"1695\":4,\"1701\":1,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2785\":1}}],[\"cols=\",{\"1\":{\"1322\":2,\"1341\":1,\"1701\":1}}],[\"colspan=\",{\"1\":{\"1319\":1,\"1555\":1,\"1579\":1,\"1586\":1,\"1793\":1}}],[\"colspan\",{\"1\":{\"1319\":1}}],[\"cols\",{\"1\":{\"300\":1,\"1322\":1}}],[\"collabel\",{\"1\":{\"1223\":3,\"1259\":3}}],[\"collation\",{\"1\":{\"1154\":1,\"1156\":2}}],[\"collate=utf8\",{\"1\":{\"1239\":1}}],[\"collate=utf8mb4\",{\"1\":{\"937\":1,\"965\":1,\"2695\":1,\"2881\":1}}],[\"collate\",{\"1\":{\"946\":1,\"1156\":5,\"1239\":2,\"2417\":3}}],[\"collect2\",{\"1\":{\"878\":2,\"880\":1,\"883\":2}}],[\"collect1\",{\"1\":{\"878\":2,\"880\":1,\"881\":2,\"883\":2}}],[\"collectors\",{\"1\":{\"845\":2,\"856\":1,\"878\":4,\"880\":5,\"881\":4,\"882\":2,\"883\":4,\"889\":1}}],[\"collect\",{\"1\":{\"845\":4,\"856\":1,\"878\":4,\"880\":6,\"881\":7,\"882\":3,\"883\":5,\"889\":1}}],[\"collection=\",{\"1\":{\"2464\":1,\"2466\":1,\"2467\":1}}],[\"collection的属性\",{\"1\":{\"2437\":2}}],[\"collection>\",{\"1\":{\"2428\":1,\"2431\":1,\"2433\":1,\"2435\":1}}],[\"collection子属性\",{\"0\":{\"2426\":1}}],[\"collection中加入了默认方法\",{\"1\":{\"859\":1}}],[\"collections\",{\"1\":{\"300\":9,\"304\":3,\"306\":1,\"309\":1,\"889\":1,\"1831\":1,\"1917\":1,\"1921\":1,\"1925\":1,\"1972\":1,\"2128\":1,\"2166\":1,\"2293\":1}}],[\"collections不支持创建对象\",{\"1\":{\"300\":1}}],[\"collections工具类\",{\"0\":{\"300\":1,\"3008\":1},\"1\":{\"37\":1}}],[\"collection\",{\"1\":{\"219\":15,\"220\":1,\"2420\":1,\"2464\":1}}],[\"collection<string>\",{\"1\":{\"859\":1}}],[\"collection<integer>\",{\"1\":{\"292\":1}}],[\"collection<e>\",{\"1\":{\"233\":1}}],[\"collection<\",{\"1\":{\"219\":3}}],[\"collection接口下面所有的实现都可以通过该方法获取流\",{\"1\":{\"859\":1}}],[\"collection接口继承iterable接口\",{\"1\":{\"268\":1}}],[\"collection接口的常用方法\",{\"1\":{\"219\":1}}],[\"collection接口\",{\"0\":{\"218\":1,\"3001\":1},\"1\":{\"37\":1}}],[\"collisions\",{\"1\":{\"294\":1}}],[\"columnname\",{\"1\":{\"2509\":2}}],[\"column在数据库表中的类型\",{\"1\":{\"2437\":1}}],[\"column表示数据库中的字段名\",{\"1\":{\"2422\":1,\"2428\":1}}],[\"column=\",{\"1\":{\"2422\":3,\"2425\":11,\"2428\":11,\"2431\":13,\"2433\":1,\"2435\":5}}],[\"columns\",{\"1\":{\"1602\":6}}],[\"column\",{\"1\":{\"65\":1,\"958\":3,\"2437\":1}}],[\"com提供接近rest风格的web服条进行图书查找\",{\"1\":{\"2823\":1}}],[\"com为二级域名\",{\"1\":{\"1891\":1}}],[\"com>\",{\"1\":{\"1176\":1}}],[\"combiner\",{\"1\":{\"873\":1}}],[\"comm=\",{\"1\":{\"2674\":1}}],[\"comm=resultset\",{\"1\":{\"1976\":1}}],[\"comment\",{\"1\":{\"2182\":4}}],[\"commodo\",{\"1\":{\"1606\":1,\"1609\":2}}],[\"commonpool\",{\"1\":{\"887\":4}}],[\"commons日志\",{\"1\":{\"2665\":2}}],[\"commons日志包\",{\"1\":{\"2629\":1,\"2891\":1}}],[\"commons\",{\"1\":{\"651\":2,\"2665\":1}}],[\"common\",{\"1\":{\"104\":1,\"114\":3,\"316\":3,\"1211\":1}}],[\"commonjs使用\",{\"1\":{\"101\":1}}],[\"commonjs模块规范\",{\"0\":{\"101\":1}}],[\"comm\",{\"1\":{\"1211\":16,\"1976\":3,\"2025\":1,\"2031\":1,\"2362\":1,\"2374\":1,\"2425\":3,\"2428\":3,\"2431\":2,\"2435\":1,\"2444\":3,\"2447\":3,\"2450\":3,\"2453\":3,\"2456\":3,\"2462\":2,\"2667\":1}}],[\"commission\",{\"1\":{\"1082\":2}}],[\"committed\",{\"0\":{\"2721\":1},\"1\":{\"1112\":1,\"2693\":2,\"2719\":1}}],[\"commit命令时不能带文件名\",{\"1\":{\"752\":1}}],[\"commit\",{\"1\":{\"723\":1,\"729\":2,\"731\":1,\"738\":5,\"936\":1,\"1099\":1,\"1106\":1,\"1108\":1,\"1233\":1,\"1234\":1,\"1235\":1,\"1255\":1,\"2301\":1,\"2360\":1,\"2479\":1,\"2488\":1,\"2728\":3}}],[\"community\",{\"1\":{\"922\":1,\"2011\":1}}],[\"completion\",{\"1\":{\"1198\":1}}],[\"completed\",{\"1\":{\"1198\":1}}],[\"complete\",{\"0\":{\"2143\":1},\"1\":{\"922\":1,\"2155\":1}}],[\"composedclose\",{\"1\":{\"875\":1}}],[\"compose方法\",{\"0\":{\"844\":1}}],[\"compose\",{\"1\":{\"841\":1,\"844\":1}}],[\"component注解交给容器管理\",{\"1\":{\"2639\":1}}],[\"componentscan\",{\"1\":{\"2601\":2,\"2649\":1}}],[\"components\",{\"1\":{\"1686\":1,\"1691\":1,\"1708\":2,\"1711\":2,\"1712\":2,\"1713\":2,\"1715\":2}}],[\"component\",{\"1\":{\"581\":1,\"1703\":1,\"1718\":2,\"2587\":3,\"2588\":7,\"2590\":2,\"2591\":3,\"2592\":7,\"2594\":1,\"2599\":1,\"2630\":1,\"2635\":1,\"2640\":1,\"2641\":1,\"2642\":1,\"2643\":1,\"2644\":1,\"2648\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":2,\"2789\":1,\"2898\":2,\"2900\":2,\"2903\":2,\"2905\":2}}],[\"componentclass\",{\"1\":{\"581\":1}}],[\"compile导包\",{\"1\":{\"2267\":1}}],[\"compiler\",{\"1\":{\"711\":1,\"2267\":4,\"2374\":4,\"2629\":4,\"2665\":4}}],[\"compile就是插件maven\",{\"1\":{\"711\":1}}],[\"compile\",{\"0\":{\"689\":1}}],[\"compiled\",{\"1\":{\"98\":2,\"772\":1}}],[\"compare\",{\"1\":{\"275\":2,\"287\":1,\"288\":3}}],[\"comparetostudent\",{\"1\":{\"287\":5}}],[\"compareto\",{\"1\":{\"272\":2,\"274\":4,\"287\":1,\"288\":1,\"352\":1,\"356\":2,\"364\":3,\"431\":1}}],[\"comparable<integer>\",{\"1\":{\"364\":1}}],[\"comparable<student1>\",{\"1\":{\"287\":1}}],[\"comparable<student>\",{\"1\":{\"274\":1,\"352\":1}}],[\"comparator<\",{\"1\":{\"288\":1,\"868\":1,\"872\":2}}],[\"comparator<student2>\",{\"1\":{\"287\":1}}],[\"comparator<student>\",{\"1\":{\"275\":1}}],[\"comparator\",{\"1\":{\"275\":1,\"287\":1,\"288\":5,\"868\":1,\"872\":2}}],[\"compatible\",{\"1\":{\"76\":1,\"1690\":1}}],[\"compression\",{\"0\":{\"168\":1}}],[\"com下载的\",{\"1\":{\"93\":1}}],[\"com\",{\"1\":{\"30\":1,\"68\":1,\"93\":1,\"287\":1,\"292\":1,\"352\":1,\"356\":1,\"390\":1,\"405\":1,\"409\":1,\"412\":1,\"421\":1,\"425\":1,\"428\":1,\"440\":1,\"502\":1,\"503\":1,\"511\":1,\"568\":1,\"579\":1,\"580\":1,\"607\":1,\"675\":1,\"685\":1,\"772\":1,\"773\":1,\"808\":2,\"809\":1,\"810\":1,\"921\":1,\"972\":6,\"1176\":1,\"1189\":1,\"1215\":1,\"1216\":2,\"1217\":2,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":2,\"1275\":1,\"1293\":3,\"1309\":1,\"1310\":1,\"1312\":3,\"1331\":2,\"1344\":1,\"1439\":1,\"1460\":1,\"1462\":1,\"1541\":1,\"1549\":6,\"1561\":2,\"1578\":1,\"1579\":1,\"1586\":1,\"1609\":3,\"1611\":1,\"1660\":1,\"1856\":1,\"1860\":1,\"1864\":1,\"1891\":1,\"1960\":1,\"1972\":1,\"1976\":2,\"1980\":1,\"1981\":1,\"1982\":1,\"2016\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2028\":1,\"2031\":2,\"2183\":5,\"2206\":1,\"2208\":1,\"2211\":1,\"2213\":1,\"2220\":2,\"2250\":2,\"2278\":2,\"2279\":1,\"2282\":2,\"2285\":1,\"2293\":1,\"2298\":1,\"2301\":4,\"2326\":1,\"2329\":1,\"2374\":6,\"2435\":2,\"2479\":1,\"2487\":1,\"2501\":4,\"2509\":2,\"2542\":1,\"2546\":1,\"2548\":1,\"2549\":1,\"2553\":2,\"2554\":2,\"2555\":3,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":2,\"2564\":2,\"2566\":7,\"2567\":4,\"2571\":1,\"2574\":2,\"2579\":3,\"2584\":1,\"2588\":7,\"2590\":1,\"2591\":1,\"2592\":2,\"2594\":1,\"2599\":1,\"2601\":1,\"2630\":1,\"2634\":5,\"2635\":1,\"2640\":1,\"2641\":1,\"2642\":1,\"2643\":1,\"2644\":1,\"2648\":2,\"2649\":1,\"2651\":1,\"2652\":1,\"2653\":1,\"2666\":2,\"2710\":1,\"2749\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2799\":1,\"2898\":1,\"2900\":1,\"2903\":4,\"2905\":1,\"2906\":1,\"2907\":2,\"2918\":1}}],[\"p面向切面编程\",{\"0\":{\"3174\":1}}],[\"p的内置对象\",{\"0\":{\"3140\":1}}],[\"p指令标签\",{\"0\":{\"3139\":1}}],[\"p指向的node节点的key的equals\",{\"1\":{\"279\":1}}],[\"p注意事项\",{\"0\":{\"3138\":1}}],[\"p入门\",{\"0\":{\"3136\":1}}],[\"p协议\",{\"0\":{\"2989\":1}}],[\"pt\",{\"1\":{\"2710\":2}}],[\"p=\",{\"1\":{\"2559\":1,\"2566\":1,\"2567\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"p标签注入\",{\"1\":{\"2559\":1}}],[\"p标签\",{\"0\":{\"2559\":1}}],[\"p标签相当于property\",{\"1\":{\"2556\":1}}],[\"p6outage\",{\"1\":{\"2301\":2}}],[\"p6outagefactory\",{\"1\":{\"2298\":1,\"2301\":1}}],[\"p6log\",{\"1\":{\"2301\":1}}],[\"p6logfactory\",{\"1\":{\"2298\":1,\"2301\":1}}],[\"p6spyfactory\",{\"1\":{\"2301\":2}}],[\"p6spy有3中日志输出方式\",{\"0\":{\"2300\":1}}],[\"p6spylogger\",{\"1\":{\"2299\":2}}],[\"p6spydriver\",{\"1\":{\"2297\":1}}],[\"p6spy\",{\"1\":{\"2297\":3,\"2298\":5,\"2299\":1,\"2300\":3,\"2301\":11}}],[\"pw\",{\"1\":{\"2087\":3}}],[\"pwdtip\",{\"1\":{\"1579\":3,\"1586\":3}}],[\"pwda\",{\"1\":{\"1242\":2,\"1252\":2}}],[\"pwd=\",{\"1\":{\"511\":1,\"512\":1,\"513\":1}}],[\"pwd=123123\",{\"1\":{\"1330\":2}}],[\"pwd=123\",{\"1\":{\"135\":1}}],[\"pwd\",{\"1\":{\"136\":1,\"511\":9,\"512\":9,\"513\":9,\"1242\":1,\"1252\":2,\"1330\":1,\"1334\":1,\"1555\":2,\"1579\":6,\"1586\":6,\"1793\":1,\"1794\":1,\"2055\":1,\"2056\":3,\"2060\":1,\"2062\":1,\"2093\":1,\"2094\":1,\"2095\":3,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2794\":1}}],[\"px\",{\"1\":{\"1650\":1}}],[\"phantom\",{\"0\":{\"2692\":1}}],[\"pharetra\",{\"1\":{\"1609\":1}}],[\"php=php\",{\"1\":{\"2566\":1}}],[\"php中提供了一整套的mysql函数\",{\"1\":{\"920\":1}}],[\"php\",{\"1\":{\"279\":1,\"572\":1,\"2566\":9,\"2567\":2}}],[\"p<\",{\"1\":{\"1548\":1}}],[\"pname+\",{\"1\":{\"2049\":1,\"2052\":1}}],[\"pnames\",{\"1\":{\"1831\":3,\"2049\":3,\"2052\":3}}],[\"pname\",{\"1\":{\"1420\":5,\"1423\":4,\"1424\":5,\"1425\":5,\"2049\":2,\"2052\":2,\"2431\":3,\"2796\":2,\"2877\":1}}],[\"png\",{\"1\":{\"208\":2,\"412\":4,\"418\":2,\"1518\":1,\"1532\":1,\"1649\":3,\"1651\":3,\"2060\":2,\"2786\":1}}],[\"p密码\",{\"1\":{\"1152\":1}}],[\"p端口号\",{\"1\":{\"1152\":1}}],[\"pkgs\",{\"1\":{\"2301\":1}}],[\"pk\",{\"1\":{\"983\":1,\"988\":4,\"994\":2,\"1211\":1}}],[\"p2\",{\"1\":{\"880\":6,\"1424\":4,\"1425\":4,\"1579\":2,\"1586\":2}}],[\"p1\",{\"1\":{\"880\":6,\"1420\":4,\"1424\":4,\"1425\":4,\"1579\":3,\"1586\":3}}],[\"python\",{\"1\":{\"572\":1,\"810\":1}}],[\"python或ruby等动态编程语言\",{\"1\":{\"84\":1}}],[\"pmap\",{\"1\":{\"1801\":2}}],[\"pm\",{\"1\":{\"374\":4,\"2030\":1}}],[\"ppt\",{\"1\":{\"401\":1}}],[\"pp\",{\"1\":{\"300\":1}}],[\"p\",{\"0\":{\"2991\":1,\"2999\":1,\"3036\":1,\"3059\":1,\"3060\":1,\"3084\":1},\"1\":{\"279\":13,\"630\":1,\"636\":1,\"873\":2,\"881\":4,\"882\":2,\"925\":2,\"928\":1,\"1093\":1,\"1121\":1,\"1285\":1,\"1287\":1,\"1548\":3,\"1552\":14,\"1650\":1,\"1695\":1,\"2030\":1,\"2124\":3,\"2308\":1,\"2374\":1,\"2429\":3,\"2431\":3,\"2559\":4,\"2566\":13,\"2567\":7,\"2666\":4,\"2758\":4,\"2779\":4,\"2780\":4,\"2789\":4,\"2876\":2,\"2878\":2,\"2898\":4,\"2899\":5,\"2903\":4,\"2904\":5}}],[\"pet\",{\"1\":{\"2876\":2,\"2878\":2}}],[\"pettype\",{\"1\":{\"2800\":3,\"2801\":3}}],[\"petname\",{\"1\":{\"2800\":3,\"2801\":3}}],[\"petsmap\",{\"1\":{\"2801\":5}}],[\"pets>\",{\"1\":{\"2801\":1}}],[\"petslist\",{\"1\":{\"2800\":5}}],[\"pets\",{\"1\":{\"2800\":1,\"2801\":1,\"2876\":3,\"2878\":3}}],[\"peter\",{\"1\":{\"773\":2}}],[\"pemp的实体对象\",{\"1\":{\"2431\":1}}],[\"perpetualcache是mybatis的默认缓存\",{\"1\":{\"2492\":1}}],[\"perpetualcache\",{\"0\":{\"2492\":1}}],[\"percent类型\",{\"1\":{\"2029\":1}}],[\"persistence\",{\"1\":{\"2199\":2}}],[\"persistentmanager\",{\"1\":{\"2092\":1}}],[\"perspiciatis\",{\"1\":{\"1606\":2}}],[\"personproxy\",{\"1\":{\"2615\":2}}],[\"personstr\",{\"1\":{\"2124\":1}}],[\"personstr=\",{\"1\":{\"2124\":1}}],[\"persons\",{\"1\":{\"2124\":1}}],[\"personclass4\",{\"1\":{\"580\":2}}],[\"personclass3\",{\"1\":{\"579\":2}}],[\"personclass2\",{\"1\":{\"578\":2}}],[\"personclass1\",{\"1\":{\"577\":2,\"581\":1}}],[\"person>>>\",{\"1\":{\"2615\":1}}],[\"person>\",{\"1\":{\"247\":1,\"248\":1}}],[\"person\",{\"0\":{\"596\":1},\"1\":{\"247\":4,\"248\":4,\"538\":1,\"541\":2,\"542\":1,\"576\":4,\"577\":4,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"987\":1,\"1420\":2,\"1421\":5,\"1423\":3,\"1424\":7,\"1425\":3,\"2124\":6,\"2605\":15,\"2612\":4,\"2615\":8,\"2796\":5,\"2800\":4,\"2801\":4,\"2876\":1,\"2878\":1}}],[\"period\",{\"1\":{\"892\":1,\"899\":8}}],[\"peeklast\",{\"1\":{\"260\":2}}],[\"peekfirst\",{\"1\":{\"260\":2}}],[\"peek\",{\"1\":{\"260\":2,\"303\":1,\"327\":2,\"337\":2}}],[\"pstat\",{\"1\":{\"1976\":3}}],[\"pstat=null\",{\"1\":{\"1976\":1}}],[\"pst\",{\"1\":{\"374\":1}}],[\"ps\",{\"1\":{\"228\":1,\"1330\":3}}],[\"pointcut标签配置切入点表达式\",{\"1\":{\"2648\":1}}],[\"pointcut注解声明的切入点表达式\",{\"1\":{\"2635\":1}}],[\"pointcut\",{\"0\":{\"2622\":1},\"1\":{\"2623\":1,\"2625\":1,\"2635\":4,\"2648\":11,\"2710\":2}}],[\"point\",{\"0\":{\"2621\":1},\"1\":{\"2621\":1,\"2622\":2,\"2623\":1}}],[\"pojo类的包扫描\",{\"1\":{\"2903\":1,\"2907\":1}}],[\"pojo类\",{\"1\":{\"2796\":1}}],[\"pojo的属性一定要有set方法\",{\"1\":{\"2796\":1}}],[\"pojo接收参数\",{\"0\":{\"2796\":1}}],[\"pojos\",{\"1\":{\"2196\":1}}],[\"pojo\",{\"1\":{\"1263\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"2279\":1,\"2282\":1,\"2326\":1,\"2329\":1,\"2374\":1,\"2497\":2,\"2501\":1,\"2530\":1,\"2553\":2,\"2554\":2,\"2555\":3,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":2,\"2564\":2,\"2566\":7,\"2567\":4,\"2571\":1,\"2574\":1,\"2579\":3,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":2,\"2903\":1,\"2907\":1}}],[\"pow\",{\"1\":{\"1092\":1,\"1411\":1}}],[\"powerpoint\",{\"1\":{\"208\":2}}],[\"policies>\",{\"1\":{\"2312\":1}}],[\"policycoreutils\",{\"1\":{\"810\":1}}],[\"poll==null\",{\"1\":{\"349\":3}}],[\"polllast\",{\"1\":{\"260\":3,\"357\":1}}],[\"pollfirst\",{\"1\":{\"260\":3,\"357\":1}}],[\"poll\",{\"1\":{\"260\":3,\"327\":3,\"337\":3,\"349\":6,\"357\":1}}],[\"pom\",{\"0\":{\"683\":1},\"1\":{\"655\":1,\"676\":1,\"680\":2,\"683\":2,\"714\":6,\"715\":6,\"2267\":2,\"2505\":1,\"2748\":2,\"2885\":2}}],[\"portlet\",{\"1\":{\"2531\":3}}],[\"port=\",{\"1\":{\"1756\":1,\"1757\":1,\"1763\":1,\"1765\":1,\"1812\":1}}],[\"port=3306\",{\"1\":{\"923\":1}}],[\"port\",{\"0\":{\"494\":1},\"1\":{\"492\":1,\"1462\":1,\"1743\":1,\"1763\":1,\"1765\":1,\"1777\":2,\"2168\":1}}],[\"pooled\",{\"1\":{\"2278\":1,\"2332\":1,\"2334\":2,\"2374\":1}}],[\"pool=new\",{\"1\":{\"1288\":1}}],[\"pooling\",{\"1\":{\"1209\":1}}],[\"pool\",{\"1\":{\"324\":1,\"1274\":7,\"1280\":7,\"1288\":6,\"2187\":1,\"2584\":1,\"2666\":1,\"2903\":1,\"2906\":1}}],[\"popovers\",{\"1\":{\"1558\":1}}],[\"pop\",{\"0\":{\"1394\":1},\"1\":{\"303\":1,\"1394\":1,\"1452\":1}}],[\"positive\",{\"1\":{\"1408\":1}}],[\"position\",{\"1\":{\"294\":1,\"1531\":1,\"1532\":1,\"1533\":1,\"1534\":2,\"1535\":3,\"1536\":1}}],[\"postrestful\",{\"1\":{\"2830\":1}}],[\"post乱码\",{\"0\":{\"2804\":1}}],[\"post乱码处理\",{\"0\":{\"2054\":1}}],[\"postprocessafterinitialization\",{\"1\":{\"2574\":1}}],[\"postprocessbeforeinitialization\",{\"1\":{\"2574\":1}}],[\"postmapper\",{\"1\":{\"2320\":1,\"2321\":1,\"2322\":1}}],[\"postgre\",{\"1\":{\"2179\":1}}],[\"post直接发送\",{\"1\":{\"2162\":1}}],[\"post或get\",{\"1\":{\"2136\":1}}],[\"post方式\",{\"1\":{\"1330\":1}}],[\"postfix\",{\"1\":{\"810\":3}}],[\"postscript\",{\"1\":{\"208\":2}}],[\"post放在request\",{\"1\":{\"188\":1}}],[\"post请求乱码\",{\"0\":{\"1811\":1},\"1\":{\"2805\":1}}],[\"post请求默认情况下不会被浏览器所缓存\",{\"1\":{\"181\":1}}],[\"post请求传递数据时\",{\"1\":{\"181\":1}}],[\"post\",{\"0\":{\"181\":1,\"2164\":1},\"1\":{\"176\":1,\"1330\":1,\"2055\":1,\"2060\":1,\"2094\":1,\"2131\":1,\"2155\":1,\"2157\":1,\"2163\":2,\"2164\":1,\"2165\":2,\"2166\":1,\"2169\":1,\"2170\":1,\"2172\":1,\"2814\":3,\"2827\":1,\"2830\":6,\"2857\":2,\"2914\":1}}],[\"post等\",{\"1\":{\"157\":1}}],[\"pubilc\",{\"1\":{\"2361\":1,\"2364\":1,\"2367\":1}}],[\"publish\",{\"1\":{\"1198\":1}}],[\"public>index\",{\"0\":{\"1690\":1}}],[\"public<\",{\"1\":{\"675\":1}}],[\"public\",{\"1\":{\"16\":2,\"17\":2,\"19\":2,\"21\":2,\"24\":2,\"27\":2,\"30\":4,\"32\":3,\"36\":6,\"219\":2,\"220\":2,\"234\":4,\"238\":4,\"239\":2,\"240\":9,\"241\":4,\"242\":1,\"244\":12,\"245\":3,\"247\":2,\"248\":2,\"251\":2,\"260\":2,\"262\":13,\"263\":5,\"265\":2,\"266\":2,\"274\":12,\"275\":12,\"278\":6,\"279\":5,\"281\":6,\"283\":2,\"286\":2,\"287\":26,\"288\":4,\"292\":2,\"294\":4,\"300\":2,\"303\":2,\"305\":3,\"306\":3,\"309\":5,\"315\":2,\"316\":3,\"318\":2,\"319\":3,\"327\":4,\"328\":3,\"337\":2,\"338\":3,\"348\":1,\"349\":1,\"352\":9,\"356\":15,\"357\":2,\"363\":2,\"364\":5,\"367\":2,\"368\":3,\"371\":2,\"372\":2,\"373\":2,\"374\":2,\"375\":2,\"376\":2,\"379\":2,\"380\":2,\"382\":2,\"387\":2,\"390\":2,\"392\":2,\"395\":2,\"396\":2,\"405\":4,\"408\":2,\"409\":2,\"412\":3,\"415\":2,\"418\":2,\"421\":2,\"422\":4,\"425\":2,\"428\":11,\"431\":2,\"438\":3,\"440\":3,\"441\":4,\"442\":4,\"445\":3,\"446\":3,\"450\":3,\"457\":4,\"458\":4,\"459\":2,\"460\":3,\"461\":2,\"465\":2,\"470\":1,\"471\":4,\"480\":2,\"489\":19,\"490\":19,\"503\":2,\"506\":2,\"509\":4,\"510\":4,\"511\":11,\"512\":11,\"513\":14,\"515\":4,\"516\":4,\"517\":4,\"518\":4,\"523\":6,\"525\":8,\"538\":3,\"541\":4,\"542\":3,\"543\":2,\"545\":6,\"546\":6,\"560\":10,\"561\":7,\"562\":2,\"563\":9,\"564\":2,\"568\":14,\"576\":7,\"577\":2,\"578\":2,\"579\":2,\"580\":2,\"581\":2,\"585\":2,\"588\":4,\"591\":2,\"594\":2,\"816\":6,\"817\":8,\"820\":4,\"825\":4,\"826\":4,\"828\":2,\"829\":2,\"830\":2,\"831\":2,\"832\":2,\"835\":3,\"836\":1,\"837\":3,\"838\":1,\"839\":3,\"840\":3,\"841\":1,\"842\":3,\"843\":3,\"844\":3,\"845\":1,\"846\":1,\"847\":3,\"848\":3,\"850\":1,\"852\":1,\"853\":1,\"854\":3,\"856\":4,\"859\":4,\"860\":2,\"862\":2,\"863\":2,\"864\":2,\"865\":2,\"866\":2,\"867\":2,\"868\":2,\"869\":2,\"870\":2,\"871\":2,\"872\":2,\"873\":6,\"874\":2,\"875\":3,\"876\":2,\"878\":1,\"879\":1,\"880\":1,\"881\":2,\"882\":1,\"883\":1,\"885\":1,\"886\":1,\"887\":1,\"888\":6,\"889\":5,\"891\":1,\"893\":3,\"895\":1,\"896\":1,\"897\":1,\"898\":1,\"899\":2,\"900\":1,\"901\":1,\"904\":5,\"905\":7,\"919\":1,\"920\":1,\"1215\":2,\"1216\":1,\"1217\":2,\"1219\":3,\"1220\":3,\"1221\":3,\"1222\":3,\"1226\":10,\"1227\":3,\"1231\":3,\"1234\":3,\"1235\":3,\"1241\":12,\"1242\":3,\"1248\":1,\"1252\":3,\"1253\":6,\"1258\":1,\"1264\":16,\"1266\":3,\"1267\":4,\"1274\":3,\"1275\":3,\"1279\":3,\"1280\":3,\"1288\":3,\"1304\":1,\"1686\":1,\"1789\":2,\"1790\":1,\"1794\":2,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1825\":4,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":3,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1911\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":2,\"1976\":4,\"1997\":2,\"1998\":4,\"2001\":5,\"2003\":1,\"2004\":1,\"2005\":1,\"2047\":8,\"2048\":1,\"2049\":2,\"2052\":8,\"2056\":1,\"2057\":4,\"2061\":8,\"2062\":1,\"2063\":4,\"2075\":1,\"2076\":3,\"2077\":4,\"2079\":3,\"2080\":4,\"2081\":3,\"2082\":3,\"2084\":3,\"2085\":4,\"2087\":3,\"2088\":4,\"2093\":1,\"2095\":1,\"2096\":1,\"2097\":3,\"2115\":1,\"2121\":2,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":5,\"2190\":1,\"2191\":1,\"2192\":1,\"2203\":1,\"2204\":1,\"2205\":1,\"2206\":1,\"2208\":1,\"2209\":1,\"2210\":1,\"2211\":1,\"2216\":1,\"2217\":1,\"2219\":2,\"2220\":2,\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2245\":1,\"2246\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2250\":1,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2259\":1,\"2260\":2,\"2276\":1,\"2278\":1,\"2279\":2,\"2282\":4,\"2285\":2,\"2288\":1,\"2290\":3,\"2293\":2,\"2299\":2,\"2344\":1,\"2345\":2,\"2347\":1,\"2348\":1,\"2350\":1,\"2351\":1,\"2354\":1,\"2355\":1,\"2356\":1,\"2357\":1,\"2358\":1,\"2359\":1,\"2363\":1,\"2366\":1,\"2369\":1,\"2374\":7,\"2379\":1,\"2386\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2422\":1,\"2425\":3,\"2428\":3,\"2431\":3,\"2435\":3,\"2444\":2,\"2447\":2,\"2450\":3,\"2453\":1,\"2456\":1,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2475\":1,\"2479\":1,\"2488\":1,\"2493\":1,\"2501\":1,\"2503\":1,\"2509\":5,\"2539\":3,\"2540\":1,\"2543\":1,\"2546\":1,\"2550\":1,\"2552\":3,\"2553\":2,\"2554\":1,\"2555\":1,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2565\":2,\"2566\":1,\"2567\":1,\"2571\":7,\"2574\":4,\"2579\":3,\"2590\":2,\"2591\":2,\"2592\":2,\"2594\":7,\"2595\":2,\"2596\":1,\"2597\":1,\"2598\":1,\"2599\":1,\"2601\":1,\"2602\":1,\"2605\":13,\"2609\":12,\"2612\":9,\"2615\":3,\"2631\":6,\"2635\":9,\"2640\":2,\"2641\":2,\"2642\":2,\"2643\":2,\"2644\":2,\"2649\":2,\"2651\":2,\"2652\":2,\"2653\":2,\"2667\":17,\"2672\":3,\"2673\":2,\"2674\":4,\"2676\":10,\"2678\":2,\"2679\":2,\"2680\":2,\"2697\":8,\"2702\":6,\"2707\":2,\"2711\":2,\"2714\":1,\"2715\":1,\"2716\":1,\"2717\":1,\"2749\":1,\"2760\":2,\"2764\":2,\"2793\":2,\"2794\":2,\"2796\":3,\"2798\":2,\"2799\":2,\"2800\":4,\"2801\":4,\"2811\":2,\"2814\":2,\"2817\":2,\"2820\":2,\"2825\":2,\"2830\":5,\"2851\":1,\"2856\":1,\"2857\":2,\"2859\":2,\"2863\":2,\"2864\":2,\"2866\":2,\"2867\":2,\"2869\":2,\"2870\":2,\"2872\":2,\"2873\":2,\"2876\":2,\"2878\":2,\"2915\":1,\"2916\":2,\"2917\":3,\"2918\":2,\"2926\":2,\"2928\":2,\"2929\":2,\"2931\":2}}],[\"pub\",{\"1\":{\"763\":2}}],[\"pull\",{\"0\":{\"795\":1},\"1\":{\"723\":1,\"760\":3,\"762\":1}}],[\"putrestful\",{\"1\":{\"2830\":1}}],[\"putobject\",{\"1\":{\"2493\":3}}],[\"putlock\",{\"1\":{\"338\":2}}],[\"putindex\",{\"1\":{\"328\":5,\"330\":1,\"332\":1}}],[\"putfornullkey\",{\"1\":{\"294\":1}}],[\"puttreeval\",{\"1\":{\"279\":2}}],[\"putval\",{\"1\":{\"279\":2}}],[\"put\",{\"0\":{\"183\":1},\"1\":{\"279\":2,\"292\":7,\"294\":1,\"309\":3,\"324\":1,\"327\":1,\"337\":4,\"348\":3,\"349\":3,\"352\":4,\"356\":1,\"1972\":3,\"2205\":2,\"2210\":2,\"2242\":3,\"2357\":2,\"2395\":2,\"2549\":1,\"2827\":1,\"2830\":4,\"2931\":2}}],[\"push\",{\"0\":{\"169\":1,\"794\":1,\"1395\":1},\"1\":{\"303\":1,\"723\":1,\"763\":1,\"1395\":1,\"1458\":1,\"1459\":1}}],[\"p>生日\",{\"1\":{\"2796\":1,\"2798\":1}}],[\"p>span\",{\"1\":{\"1548\":1}}],[\"p>\",{\"1\":{\"128\":1,\"132\":1,\"133\":1,\"134\":1,\"136\":3,\"137\":4,\"140\":3,\"141\":2,\"142\":4,\"145\":3,\"146\":3,\"149\":1,\"1301\":4,\"1314\":12,\"1536\":7,\"1548\":5,\"1552\":13,\"1596\":2,\"1606\":4,\"1609\":4,\"1620\":4,\"1621\":4,\"1622\":6,\"1624\":1,\"1634\":2,\"1635\":3,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1650\":2,\"1653\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1695\":12,\"1701\":2,\"1730\":1,\"2786\":1,\"2793\":1,\"2794\":1,\"2796\":5,\"2798\":2,\"2800\":3,\"2801\":3}}],[\"paginationinnerinterceptor\",{\"1\":{\"2285\":1}}],[\"pagename\",{\"1\":{\"2825\":3}}],[\"pagehelper\",{\"1\":{\"2516\":1}}],[\"page<\",{\"1\":{\"2861\":2}}],[\"page<>\",{\"1\":{\"2286\":1}}],[\"page<user>\",{\"1\":{\"2286\":2}}],[\"pagemessage\",{\"1\":{\"2018\":1}}],[\"page域\",{\"1\":{\"1968\":1,\"1978\":1}}],[\"pagecontext对象\",{\"0\":{\"2921\":1}}],[\"pagecontextmsg\",{\"1\":{\"1981\":1}}],[\"pagecontextmessage\",{\"1\":{\"1972\":1,\"1980\":1,\"1981\":1}}],[\"pagecontext域中的数据\",{\"1\":{\"1980\":1}}],[\"pagecontext\",{\"1\":{\"1968\":1,\"1972\":4,\"1980\":2,\"1981\":4,\"1991\":4,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1}}],[\"page=\",{\"1\":{\"1962\":1}}],[\"page>\",{\"1\":{\"1960\":4}}],[\"pageencoding=\",{\"1\":{\"1960\":1}}],[\"page指令的\",{\"1\":{\"1960\":1}}],[\"page指令的使用\",{\"0\":{\"1960\":1}}],[\"page指令标签\",{\"0\":{\"1955\":1,\"1959\":1}}],[\"pagescope\",{\"1\":{\"1978\":1,\"1980\":2,\"1981\":1,\"2020\":2,\"2022\":1}}],[\"pages\",{\"1\":{\"1548\":1,\"1927\":2,\"2011\":1,\"2213\":1}}],[\"pageyoffset\",{\"1\":{\"1451\":1}}],[\"pagexoffset\",{\"1\":{\"1451\":1}}],[\"page\",{\"1\":{\"1420\":5,\"1423\":4,\"1424\":5,\"1425\":5,\"1870\":1,\"1908\":1,\"1928\":2,\"1951\":1,\"1952\":1,\"1958\":1,\"1960\":6,\"1971\":1,\"1972\":4,\"1976\":3,\"1980\":2,\"1981\":2,\"1982\":2,\"1987\":3,\"1988\":3,\"1989\":3,\"1990\":3,\"1991\":3,\"2018\":3,\"2019\":2,\"2020\":2,\"2022\":8,\"2023\":2,\"2025\":2,\"2029\":2,\"2031\":1,\"2055\":1,\"2060\":4,\"2088\":1,\"2094\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2176\":1,\"2214\":1,\"2286\":3,\"2750\":1,\"2786\":1,\"2793\":1,\"2796\":2,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2877\":2,\"2914\":3,\"2925\":1}}],[\"pasword\",{\"1\":{\"1911\":1}}],[\"pass\",{\"1\":{\"1080\":1}}],[\"password=null\",{\"1\":{\"2571\":1}}],[\"password=gaoqi\",{\"1\":{\"2559\":1}}],[\"password=zhaoliu\",{\"1\":{\"2559\":1}}],[\"password=zhangsan\",{\"1\":{\"2558\":1}}],[\"password=wangwu\",{\"1\":{\"2559\":1}}],[\"password=lisi\",{\"1\":{\"2558\":1}}],[\"password=admin\",{\"1\":{\"2557\":1}}],[\"password=bbb\",{\"1\":{\"2159\":1}}],[\"password=propertiesutil\",{\"1\":{\"1280\":1,\"1288\":1}}],[\"password=root\",{\"1\":{\"1278\":1,\"2187\":1,\"2332\":1,\"2374\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"password=\",{\"1\":{\"1241\":1,\"1759\":1,\"1976\":1,\"2061\":1,\"2501\":1,\"2559\":2,\"2560\":1}}],[\"password\",{\"0\":{\"1334\":1,\"2152\":1},\"1\":{\"923\":1,\"925\":1,\"1080\":1,\"1095\":1,\"1121\":1,\"1122\":2,\"1215\":2,\"1216\":2,\"1217\":2,\"1219\":2,\"1220\":2,\"1221\":2,\"1222\":2,\"1227\":2,\"1231\":2,\"1234\":2,\"1235\":2,\"1239\":1,\"1241\":9,\"1242\":6,\"1246\":2,\"1249\":2,\"1252\":6,\"1253\":5,\"1256\":1,\"1264\":3,\"1266\":3,\"1274\":2,\"1280\":3,\"1288\":3,\"1330\":1,\"1334\":1,\"1505\":1,\"1514\":2,\"1554\":1,\"1555\":2,\"1579\":2,\"1586\":2,\"1793\":1,\"1831\":2,\"1897\":1,\"1898\":3,\"1907\":2,\"1909\":3,\"1917\":1,\"1921\":1,\"1972\":1,\"1976\":1,\"2055\":1,\"2060\":1,\"2061\":9,\"2062\":3,\"2094\":1,\"2114\":1,\"2131\":1,\"2132\":2,\"2155\":1,\"2159\":3,\"2166\":6,\"2169\":1,\"2170\":1,\"2171\":1,\"2278\":1,\"2332\":3,\"2374\":3,\"2552\":4,\"2557\":1,\"2558\":1,\"2560\":1,\"2571\":4,\"2584\":2,\"2666\":2,\"2793\":5,\"2794\":4,\"2817\":3,\"2903\":2,\"2906\":2,\"2914\":2,\"2916\":2,\"2917\":3,\"2918\":1}}],[\"pane\",{\"1\":{\"1606\":4}}],[\"panes\",{\"1\":{\"1606\":1}}],[\"pandoc\",{\"1\":{\"1191\":1}}],[\"padding\",{\"1\":{\"1527\":1,\"1529\":5}}],[\"pad\",{\"1\":{\"1091\":2}}],[\"paly\",{\"1\":{\"568\":5}}],[\"pay\",{\"1\":{\"568\":7}}],[\"packaging>\",{\"1\":{\"714\":1,\"715\":1,\"2186\":1,\"2267\":1,\"2374\":1,\"2629\":1,\"2665\":1,\"2748\":1,\"2885\":1}}],[\"package=\",{\"1\":{\"2588\":3,\"2590\":1,\"2591\":1,\"2592\":2,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2900\":1,\"2903\":1,\"2905\":1}}],[\"package标签\",{\"1\":{\"2323\":1}}],[\"packageconfig\",{\"1\":{\"2293\":1}}],[\"packages\",{\"1\":{\"809\":2,\"810\":1}}],[\"package\",{\"0\":{\"2328\":1},\"1\":{\"90\":1,\"92\":1,\"94\":1,\"100\":1,\"287\":1,\"292\":1,\"352\":1,\"356\":1,\"390\":1,\"405\":1,\"409\":1,\"412\":1,\"421\":1,\"425\":1,\"428\":1,\"440\":1,\"511\":1,\"593\":1,\"594\":1,\"772\":1,\"1274\":1,\"1275\":1,\"1686\":2,\"2282\":1,\"2588\":1,\"2749\":1}}],[\"pacific\",{\"1\":{\"374\":1}}],[\"pattern=\",{\"1\":{\"2031\":2,\"2312\":2,\"2757\":1,\"2896\":1}}],[\"pattern中\",{\"1\":{\"1879\":1}}],[\"pattern中的路径\",{\"1\":{\"1873\":1,\"1877\":1}}],[\"pattern\",{\"0\":{\"1836\":1},\"1\":{\"2029\":1,\"2030\":1,\"2798\":2}}],[\"patternlayout\",{\"1\":{\"1285\":2,\"2308\":1,\"2374\":1}}],[\"pattern>中不能使用\",{\"1\":{\"1839\":1}}],[\"pattern>中配置的值必须与url完全精确匹配\",{\"1\":{\"1838\":1}}],[\"pattern>允许使用统配符\",{\"1\":{\"1839\":1}}],[\"pattern>\",{\"1\":{\"545\":2,\"1791\":2,\"1795\":2,\"1831\":4,\"1834\":4,\"1838\":2,\"1839\":2,\"1840\":2,\"1841\":2,\"1842\":2,\"1844\":8,\"1846\":4,\"1847\":4,\"1999\":10,\"2047\":4,\"2058\":2,\"2487\":1,\"2759\":2,\"2807\":2,\"2829\":2,\"2830\":2,\"2910\":2,\"2912\":2}}],[\"pattern的匹配规则与注解模式\",{\"0\":{\"1835\":1,\"3131\":1},\"1\":{\"210\":1}}],[\"pathvariable注解指定映射字段\",{\"1\":{\"2826\":1}}],[\"pathvariable注解\",{\"1\":{\"2825\":1}}],[\"pathvariable注解和restful风格\",{\"0\":{\"2822\":1},\"1\":{\"2846\":1}}],[\"pathvariable\",{\"0\":{\"2842\":1},\"1\":{\"2794\":1,\"2825\":1,\"2830\":4,\"2857\":1}}],[\"pathinfo\",{\"1\":{\"2293\":1}}],[\"path既浏览器访问项目的访问路径\",{\"1\":{\"1768\":1}}],[\"path=\",{\"1\":{\"1747\":1,\"1768\":1,\"2485\":1}}],[\"pathspec\",{\"1\":{\"736\":1}}],[\"path\",{\"1\":{\"114\":4,\"115\":2,\"674\":1,\"1198\":2,\"1279\":2,\"1718\":2,\"1768\":1,\"1829\":1,\"2835\":1,\"2857\":1}}],[\"parsing\",{\"1\":{\"2334\":2}}],[\"parsefloat\",{\"1\":{\"1408\":2,\"1409\":1,\"1412\":1}}],[\"parse2\",{\"1\":{\"380\":2}}],[\"parse1\",{\"1\":{\"380\":2}}],[\"parseexception\",{\"1\":{\"374\":1,\"891\":2,\"893\":1,\"2799\":1}}],[\"parse\",{\"1\":{\"374\":3,\"380\":5,\"891\":2,\"897\":3,\"1415\":1,\"2124\":1,\"2126\":2,\"2128\":1,\"2799\":1}}],[\"parsed\",{\"1\":{\"364\":1}}],[\"parseint\",{\"1\":{\"102\":8,\"364\":6,\"842\":1,\"843\":1,\"844\":1,\"867\":2,\"868\":2,\"870\":3,\"872\":2,\"873\":3,\"1280\":2,\"1288\":2,\"1408\":2,\"1409\":1,\"1412\":1,\"1927\":2,\"1928\":2,\"2176\":1}}],[\"parallel\",{\"1\":{\"886\":2,\"887\":3,\"888\":1,\"889\":5}}],[\"parallelstream\",{\"1\":{\"886\":1}}],[\"parallelstream其实就是一个并行执行的流\",{\"1\":{\"886\":1}}],[\"params=\",{\"1\":{\"2817\":1,\"2857\":1}}],[\"params\",{\"0\":{\"2816\":1},\"1\":{\"2816\":5,\"2817\":1,\"2835\":1}}],[\"param初始化可以省略\",{\"0\":{\"2763\":1}}],[\"param注解使用别名之后\",{\"1\":{\"2390\":1,\"2403\":1}}],[\"param别名\",{\"0\":{\"2390\":1,\"2403\":1}}],[\"param2\",{\"1\":{\"2389\":1,\"2402\":1,\"2918\":1}}],[\"param1\",{\"1\":{\"2389\":1,\"2402\":1,\"2918\":1}}],[\"paramvalues\",{\"1\":{\"1982\":2}}],[\"param>指定springmvc的配置文件路径使用默认配置\",{\"1\":{\"2763\":1}}],[\"param>标签中的值\",{\"1\":{\"1833\":1}}],[\"param>标签中的配置信息\",{\"1\":{\"1829\":1,\"1833\":1}}],[\"param>\",{\"1\":{\"1831\":4,\"1834\":8,\"2049\":8,\"2058\":2,\"2759\":2,\"2807\":2,\"2910\":2,\"2911\":2,\"2912\":2}}],[\"parameterhandler\",{\"0\":{\"2513\":1}}],[\"parametermap\",{\"1\":{\"2357\":4}}],[\"parametertype=\",{\"1\":{\"2354\":1,\"2356\":1,\"2358\":1,\"2362\":1,\"2365\":1,\"2368\":1,\"2385\":1,\"2394\":1,\"2398\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2431\":1,\"2435\":2,\"2444\":1,\"2447\":1,\"2450\":1,\"2453\":1,\"2456\":1,\"2459\":1}}],[\"parametertypes\",{\"1\":{\"584\":2,\"590\":2,\"591\":2}}],[\"parameters\",{\"1\":{\"591\":2}}],[\"parameter\",{\"1\":{\"590\":1,\"591\":1,\"905\":4,\"2493\":6}}],[\"param和\",{\"1\":{\"537\":1}}],[\"param的格式要求\",{\"1\":{\"537\":1}}],[\"param\",{\"0\":{\"2389\":1,\"2402\":1},\"1\":{\"136\":2,\"137\":3,\"142\":1,\"356\":1,\"405\":1,\"537\":2,\"538\":3,\"546\":2,\"568\":3,\"825\":1,\"826\":1,\"839\":1,\"840\":2,\"842\":1,\"854\":2,\"904\":1,\"1219\":3,\"1220\":1,\"1221\":3,\"1253\":7,\"1264\":2,\"1266\":5,\"1274\":1,\"1275\":5,\"1280\":1,\"1790\":2,\"1831\":4,\"1834\":8,\"1982\":1,\"2049\":8,\"2058\":2,\"2390\":2,\"2403\":2,\"2574\":4,\"2615\":4,\"2759\":2,\"2807\":2,\"2910\":2,\"2911\":2,\"2912\":2,\"2925\":1}}],[\"partitioningby\",{\"1\":{\"882\":1}}],[\"partitioningby会根据流中的值是否为true\",{\"1\":{\"882\":1}}],[\"parent<\",{\"1\":{\"2186\":1}}],[\"parentid=\",{\"1\":{\"2176\":2}}],[\"parentid=0\",{\"1\":{\"2176\":1}}],[\"parentid\",{\"1\":{\"2176\":7}}],[\"parentnode\",{\"1\":{\"1485\":1}}],[\"parents\",{\"1\":{\"1392\":2}}],[\"parent>\",{\"1\":{\"714\":1,\"715\":1,\"2186\":1}}],[\"parent\",{\"1\":{\"288\":1,\"1450\":1,\"1451\":1,\"2186\":1,\"2293\":1}}],[\"please\",{\"1\":{\"1690\":1,\"2055\":1,\"2060\":1}}],[\"placeholder>\",{\"1\":{\"2903\":1,\"2906\":1}}],[\"placeholder\",{\"1\":{\"2493\":1,\"2584\":1,\"2599\":1,\"2666\":1,\"2903\":1,\"2906\":1}}],[\"placeholder=\",{\"1\":{\"1333\":1,\"1701\":1}}],[\"placehoder\",{\"1\":{\"1350\":1}}],[\"player\",{\"1\":{\"1310\":1}}],[\"platformtransactionmanager\",{\"1\":{\"2699\":1}}],[\"platform\",{\"1\":{\"845\":2}}],[\"plain\",{\"1\":{\"88\":2,\"208\":2,\"2196\":1}}],[\"plus快速上手\",{\"0\":{\"3154\":1}}],[\"plus中针对实体中是username而表结构中是user\",{\"1\":{\"2230\":1}}],[\"plus中有一个接口\",{\"1\":{\"2214\":1}}],[\"plus操作表的默认前缀\",{\"1\":{\"2225\":1}}],[\"plus在确定操作的表时\",{\"1\":{\"2223\":1}}],[\"plus实现基本的crud时\",{\"1\":{\"2223\":1}}],[\"plus\",{\"0\":{\"2994\":1},\"1\":{\"2178\":1,\"2186\":1,\"2193\":1,\"2214\":1,\"2225\":1,\"2229\":1,\"2235\":3,\"2292\":1}}],[\"plusmonths\",{\"1\":{\"900\":1}}],[\"plusyears\",{\"1\":{\"895\":1}}],[\"plusdays\",{\"1\":{\"895\":1}}],[\"plushours\",{\"1\":{\"379\":1}}],[\"plugin\",{\"1\":{\"2516\":1}}],[\"plugin>\",{\"1\":{\"2186\":1,\"2500\":1}}],[\"plugin<\",{\"1\":{\"2186\":1,\"2500\":1}}],[\"plugin=caching\",{\"1\":{\"923\":1}}],[\"plugin的一个目标\",{\"1\":{\"711\":1}}],[\"plugin的一个功能\",{\"1\":{\"711\":1}}],[\"plugins>\",{\"1\":{\"2186\":1,\"2500\":1}}],[\"plugins\",{\"1\":{\"98\":1}}],[\"pingmu\",{\"1\":{\"1834\":1}}],[\"pinpai\",{\"1\":{\"1834\":1}}],[\"pink\",{\"1\":{\"115\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1529\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1568\":1,\"1650\":3}}],[\"pickers\",{\"1\":{\"1698\":2}}],[\"pic\",{\"1\":{\"1609\":1}}],[\"pill\",{\"1\":{\"1606\":4}}],[\"pills\",{\"1\":{\"1606\":2}}],[\"pid=\",{\"1\":{\"2429\":1,\"2431\":1}}],[\"pidleft\",{\"1\":{\"2429\":1}}],[\"pid\",{\"1\":{\"772\":1,\"1072\":3,\"2429\":1,\"2431\":10}}],[\"pi\",{\"1\":{\"74\":3,\"367\":1,\"368\":1,\"1411\":5}}],[\"pr\",{\"1\":{\"2429\":3,\"2431\":3}}],[\"prcd\",{\"1\":{\"983\":1}}],[\"prefix\",{\"1\":{\"2455\":1,\"2765\":1,\"2779\":1,\"2780\":1,\"2789\":1}}],[\"prefixoverrides\",{\"1\":{\"2455\":1}}],[\"prefixoverrides=\",{\"1\":{\"2455\":1}}],[\"prefixoftag\",{\"1\":{\"1964\":1}}],[\"prefix=t\",{\"1\":{\"2225\":1}}],[\"prefix=\",{\"1\":{\"1964\":1,\"2014\":1,\"2016\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2028\":1,\"2031\":2,\"2455\":1,\"2456\":1}}],[\"pre属性的作用是跳过该元素编译过程\",{\"1\":{\"1642\":1}}],[\"pre>\",{\"1\":{\"1304\":2,\"1643\":1}}],[\"prepared\",{\"1\":{\"2299\":2}}],[\"preparedstatment性能高\",{\"1\":{\"1248\":1,\"1258\":1}}],[\"preparedstatment简单不繁琐\",{\"1\":{\"1248\":1,\"1258\":1}}],[\"preparedstatment安全性高\",{\"1\":{\"1248\":1,\"1258\":1}}],[\"preparedstatementhandler类\",{\"1\":{\"2517\":1}}],[\"preparedstatement接口\",{\"0\":{\"1258\":1}}],[\"preparedstatement\",{\"1\":{\"1231\":13,\"1234\":8,\"1235\":13,\"1248\":1,\"1252\":8,\"1253\":32,\"1255\":4,\"1257\":1,\"1258\":1,\"1264\":16,\"1266\":14,\"1275\":14,\"1976\":1,\"2507\":1,\"2509\":2}}],[\"preparedstatement+批处理\",{\"1\":{\"1230\":1}}],[\"preparecall\",{\"1\":{\"1255\":1}}],[\"preparestatment对象在set方法上\",{\"1\":{\"1249\":1}}],[\"preparestatment\",{\"0\":{\"1247\":1}}],[\"preparestatement\",{\"1\":{\"1231\":1,\"1234\":1,\"1235\":1,\"1252\":1,\"1253\":4,\"1255\":2,\"1264\":2,\"1266\":2,\"1275\":2,\"1976\":1}}],[\"president\",{\"1\":{\"1211\":1}}],[\"present\",{\"1\":{\"279\":2}}],[\"presentation\",{\"1\":{\"208\":1}}],[\"preset\",{\"1\":{\"98\":1}}],[\"presets\",{\"1\":{\"98\":1}}],[\"predicate2\",{\"1\":{\"848\":5}}],[\"predicate1\",{\"1\":{\"848\":7}}],[\"predicate\",{\"1\":{\"847\":2,\"864\":1,\"870\":3}}],[\"predicatelambda\",{\"1\":{\"847\":1,\"848\":1}}],[\"predicate<string>\",{\"1\":{\"847\":1,\"848\":2}}],[\"predicate<\",{\"1\":{\"846\":2,\"864\":1,\"870\":3}}],[\"predicate<t>\",{\"1\":{\"846\":5}}],[\"predicate接口\",{\"0\":{\"846\":1}}],[\"pretty=oneline\",{\"1\":{\"739\":1}}],[\"prevent=\",{\"1\":{\"1660\":1,\"1672\":1}}],[\"prevent修饰符必须在鼠标修饰符的后面\",{\"1\":{\"1673\":1}}],[\"prevent修饰符可以屏蔽标签原有的执行效果\",{\"1\":{\"1660\":1}}],[\"prevent修饰符\",{\"0\":{\"1660\":1}}],[\"previoussibling\",{\"1\":{\"1485\":1}}],[\"previous\",{\"1\":{\"266\":1,\"1223\":1,\"1259\":1}}],[\"prev\",{\"1\":{\"263\":5,\"1548\":4,\"1609\":3}}],[\"pre=\",{\"1\":{\"262\":1}}],[\"pre\",{\"0\":{\"1642\":1},\"1\":{\"262\":6,\"711\":1}}],[\"price\",{\"1\":{\"1071\":4}}],[\"primary\",{\"0\":{\"984\":1},\"1\":{\"981\":1,\"987\":3,\"988\":5,\"993\":1,\"994\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1081\":1,\"1211\":3,\"1216\":1,\"1239\":1,\"1564\":1,\"2182\":1,\"2417\":2,\"2695\":1,\"2881\":1}}],[\"privileges\",{\"1\":{\"928\":1,\"1155\":1}}],[\"private\",{\"1\":{\"262\":3,\"263\":1,\"274\":3,\"275\":3,\"316\":2,\"319\":1,\"328\":4,\"338\":9,\"364\":2,\"428\":3,\"442\":1,\"446\":1,\"489\":5,\"490\":5,\"511\":3,\"512\":3,\"513\":3,\"560\":3,\"561\":3,\"576\":5,\"888\":3,\"1217\":4,\"1219\":4,\"1220\":4,\"1221\":4,\"1222\":4,\"1226\":3,\"1227\":4,\"1231\":4,\"1234\":4,\"1235\":4,\"1241\":4,\"1242\":4,\"1252\":4,\"1253\":4,\"1264\":7,\"1266\":4,\"1274\":8,\"1279\":1,\"1280\":8,\"1286\":1,\"1288\":9,\"1687\":1,\"1911\":2,\"1972\":3,\"1976\":11,\"2057\":1,\"2061\":2,\"2087\":1,\"2093\":2,\"2176\":2,\"2190\":4,\"2192\":1,\"2224\":4,\"2228\":8,\"2230\":4,\"2234\":5,\"2276\":3,\"2282\":1,\"2289\":1,\"2374\":9,\"2425\":12,\"2428\":12,\"2431\":7,\"2435\":12,\"2493\":1,\"2552\":3,\"2565\":7,\"2571\":3,\"2579\":1,\"2595\":1,\"2596\":1,\"2597\":1,\"2598\":4,\"2599\":4,\"2605\":2,\"2609\":2,\"2612\":1,\"2667\":10,\"2676\":2,\"2697\":5,\"2702\":4,\"2707\":1,\"2711\":1,\"2796\":5,\"2799\":1,\"2800\":3,\"2801\":3,\"2915\":3,\"2916\":1,\"2917\":1}}],[\"priorityblockingqueue<student>\",{\"1\":{\"352\":2}}],[\"priorityblockingqueue\",{\"0\":{\"350\":1},\"1\":{\"352\":7}}],[\"printlogaftercoreexception\",{\"1\":{\"2653\":1}}],[\"printlogaftercoresuccess\",{\"1\":{\"2652\":1}}],[\"printlogbeforecore\",{\"1\":{\"2651\":1}}],[\"printlogbeforecoreoperation\",{\"1\":{\"2635\":1}}],[\"println\",{\"1\":{\"16\":3,\"17\":6,\"19\":10,\"21\":8,\"24\":4,\"27\":7,\"30\":3,\"32\":3,\"219\":10,\"220\":5,\"234\":3,\"244\":1,\"245\":1,\"251\":14,\"260\":13,\"262\":2,\"266\":6,\"272\":4,\"274\":1,\"275\":1,\"278\":6,\"279\":1,\"281\":2,\"283\":4,\"286\":2,\"287\":3,\"288\":1,\"292\":16,\"300\":6,\"303\":7,\"305\":4,\"306\":4,\"309\":3,\"315\":3,\"318\":1,\"327\":15,\"337\":14,\"348\":3,\"349\":3,\"352\":1,\"356\":2,\"357\":7,\"362\":2,\"363\":4,\"364\":8,\"367\":8,\"368\":8,\"371\":10,\"372\":1,\"373\":1,\"374\":5,\"375\":9,\"376\":4,\"379\":21,\"380\":6,\"382\":4,\"386\":14,\"387\":20,\"389\":14,\"390\":14,\"392\":1,\"395\":9,\"396\":9,\"405\":1,\"422\":3,\"425\":3,\"428\":1,\"431\":15,\"438\":3,\"440\":2,\"441\":2,\"442\":1,\"445\":1,\"446\":1,\"450\":1,\"457\":2,\"458\":2,\"459\":1,\"460\":2,\"461\":1,\"465\":1,\"471\":1,\"480\":1,\"489\":2,\"490\":2,\"503\":7,\"506\":5,\"509\":1,\"510\":2,\"511\":5,\"512\":5,\"513\":5,\"515\":3,\"516\":4,\"517\":4,\"518\":7,\"523\":2,\"525\":4,\"541\":2,\"542\":2,\"543\":1,\"545\":1,\"546\":1,\"560\":2,\"561\":2,\"562\":5,\"563\":5,\"564\":2,\"568\":2,\"576\":4,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"585\":9,\"588\":12,\"591\":17,\"594\":5,\"817\":2,\"820\":1,\"825\":2,\"826\":2,\"828\":2,\"829\":2,\"830\":3,\"831\":3,\"832\":2,\"835\":1,\"837\":1,\"839\":1,\"840\":2,\"842\":1,\"843\":1,\"844\":1,\"847\":1,\"848\":3,\"850\":4,\"853\":6,\"854\":4,\"856\":2,\"860\":3,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":2,\"868\":2,\"869\":2,\"870\":3,\"871\":2,\"872\":2,\"873\":5,\"874\":2,\"875\":1,\"876\":1,\"878\":4,\"879\":2,\"880\":6,\"881\":3,\"882\":1,\"883\":3,\"885\":1,\"887\":1,\"888\":5,\"889\":5,\"891\":4,\"893\":26,\"895\":9,\"896\":3,\"897\":3,\"898\":3,\"899\":7,\"900\":4,\"901\":5,\"904\":2,\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1242\":5,\"1252\":5,\"1253\":4,\"1264\":2,\"1274\":8,\"1280\":8,\"1283\":2,\"1304\":1,\"1799\":10,\"1800\":2,\"1801\":4,\"1825\":4,\"1831\":9,\"1834\":4,\"1856\":6,\"1860\":7,\"1864\":4,\"1892\":1,\"1898\":6,\"1917\":5,\"1921\":5,\"1925\":3,\"1997\":2,\"1998\":2,\"2001\":5,\"2047\":4,\"2049\":2,\"2052\":6,\"2056\":2,\"2062\":2,\"2063\":1,\"2076\":2,\"2077\":3,\"2079\":2,\"2080\":3,\"2081\":1,\"2082\":2,\"2084\":2,\"2085\":3,\"2087\":1,\"2096\":1,\"2097\":2,\"2128\":1,\"2159\":2,\"2166\":2,\"2170\":1,\"2171\":1,\"2192\":1,\"2203\":1,\"2204\":1,\"2205\":1,\"2206\":1,\"2208\":1,\"2209\":1,\"2210\":1,\"2211\":1,\"2219\":1,\"2220\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2245\":1,\"2246\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2253\":1,\"2254\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2260\":2,\"2282\":2,\"2286\":6,\"2345\":2,\"2348\":1,\"2351\":1,\"2355\":1,\"2357\":1,\"2359\":1,\"2379\":1,\"2386\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":1,\"2444\":2,\"2447\":2,\"2450\":3,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2475\":2,\"2479\":2,\"2488\":2,\"2503\":1,\"2539\":1,\"2552\":2,\"2553\":2,\"2554\":2,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2566\":5,\"2567\":1,\"2571\":6,\"2574\":4,\"2579\":1,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":2,\"2598\":3,\"2599\":3,\"2605\":4,\"2609\":6,\"2612\":4,\"2615\":3,\"2631\":2,\"2640\":1,\"2641\":1,\"2642\":2,\"2643\":1,\"2644\":3,\"2651\":5,\"2652\":1,\"2653\":1,\"2672\":2,\"2673\":1,\"2760\":1,\"2764\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2811\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2851\":1,\"2856\":1,\"2857\":1,\"2859\":1,\"2876\":1,\"2878\":1}}],[\"printwriter\",{\"1\":{\"1790\":1,\"1856\":1,\"1860\":1,\"1927\":1,\"1928\":1,\"2087\":2}}],[\"print\",{\"1\":{\"251\":4,\"260\":3,\"292\":6,\"376\":3,\"395\":1,\"396\":1,\"405\":2,\"431\":1,\"511\":2,\"512\":2,\"513\":2,\"1452\":1,\"1927\":1,\"1928\":1,\"1976\":8,\"1997\":2,\"1998\":1,\"2001\":1,\"2029\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1}}],[\"printstacktrace\",{\"1\":{\"21\":1,\"30\":3,\"32\":2,\"480\":1,\"891\":1,\"1217\":3,\"1219\":3,\"1220\":3,\"1221\":3,\"1222\":3,\"1227\":3,\"1231\":3,\"1234\":4,\"1235\":4,\"1242\":3,\"1252\":4,\"1253\":13,\"1264\":6,\"1266\":7,\"1274\":4,\"1275\":5,\"1279\":1,\"1280\":4,\"1283\":2,\"1288\":3,\"1825\":2,\"1976\":4,\"2087\":1,\"2176\":1,\"2282\":1,\"2374\":1}}],[\"pro`\",{\"1\":{\"2417\":3}}],[\"province\",{\"1\":{\"2509\":2}}],[\"provience\",{\"1\":{\"2176\":2}}],[\"provided\",{\"0\":{\"691\":1}}],[\"proccessdata\",{\"1\":{\"2155\":1}}],[\"proceed\",{\"1\":{\"2638\":2,\"2644\":7}}],[\"proceedingjoinpoint对象是joinpoint的子接口\",{\"1\":{\"2638\":1}}],[\"proceedingjoinpoint对象\",{\"0\":{\"2638\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"2635\":1,\"2644\":3}}],[\"proces\",{\"1\":{\"2011\":1}}],[\"processdata\",{\"0\":{\"2153\":1}}],[\"process\",{\"1\":{\"452\":1}}],[\"procedure\",{\"0\":{\"1145\":1},\"1\":{\"1145\":1,\"1147\":3}}],[\"propagation\",{\"0\":{\"2724\":1,\"2727\":1,\"2728\":1,\"2729\":1,\"2730\":1,\"2731\":1,\"2732\":1,\"2733\":1},\"1\":{\"2725\":7,\"2735\":2,\"2736\":1,\"2737\":4}}],[\"propagation=\",{\"1\":{\"2710\":1}}],[\"propagation属性\",{\"1\":{\"2710\":1}}],[\"props\",{\"1\":{\"1711\":1,\"1712\":1,\"1713\":1,\"1715\":1}}],[\"properly\",{\"1\":{\"1690\":1}}],[\"properties配置文件\",{\"1\":{\"2777\":1}}],[\"properties外部资源文件\",{\"1\":{\"2599\":1}}],[\"properties属性配置文件\",{\"1\":{\"2580\":1,\"2583\":1}}],[\"properties属性可以在外部进行配置\",{\"1\":{\"2332\":1}}],[\"properties文件是key=value的形式\",{\"1\":{\"2332\":1}}],[\"properties文件\",{\"0\":{\"2308\":1}}],[\"properties文件复制到resources下\",{\"1\":{\"2306\":1}}],[\"properties文件重新指定的编码方式\",{\"1\":{\"1755\":1}}],[\"properties详细说明\",{\"0\":{\"2301\":1}}],[\"properties中配置数据源的相关信息\",{\"1\":{\"2187\":1}}],[\"properties中所有的utf\",{\"1\":{\"1810\":1}}],[\"properties=new\",{\"1\":{\"1279\":1}}],[\"propertiesutil=new\",{\"1\":{\"1280\":1,\"1288\":1}}],[\"propertiesutil\",{\"1\":{\"1279\":2,\"1280\":4,\"1288\":4}}],[\"properties\",{\"0\":{\"2298\":1},\"1\":{\"1256\":1,\"1279\":5,\"1280\":1,\"1285\":1,\"1288\":1,\"2297\":1,\"2332\":2,\"2333\":3,\"2334\":2,\"2374\":1,\"2584\":1,\"2599\":1,\"2601\":1,\"2666\":2,\"2777\":1,\"2903\":1,\"2906\":1}}],[\"properties>\",{\"1\":{\"699\":1,\"2186\":1,\"2267\":1,\"2332\":1,\"2334\":2,\"2374\":2,\"2629\":1,\"2665\":1}}],[\"propertysource\",{\"1\":{\"2601\":2}}],[\"property>\",{\"1\":{\"2557\":3,\"2560\":3,\"2562\":2,\"2563\":4,\"2564\":4,\"2566\":5,\"2567\":1,\"2571\":1,\"2574\":1,\"2579\":1,\"2584\":4,\"2765\":2,\"2779\":2,\"2780\":2,\"2789\":2,\"2799\":1,\"2901\":1,\"2903\":9,\"2906\":4,\"2907\":4,\"2908\":1}}],[\"property的类型\",{\"1\":{\"2437\":1}}],[\"property表示实体类中的字段名\",{\"1\":{\"2422\":1,\"2428\":1}}],[\"property=\",{\"1\":{\"2422\":3,\"2425\":12,\"2428\":12,\"2431\":15,\"2433\":1,\"2435\":4}}],[\"propertyparser\",{\"1\":{\"2334\":2}}],[\"property\",{\"0\":{\"2557\":1},\"1\":{\"364\":2,\"2425\":1,\"2437\":1,\"2556\":1,\"2559\":2,\"2584\":1,\"2599\":1,\"2666\":1,\"2903\":2,\"2906\":2}}],[\"pro\",{\"1\":{\"1555\":1}}],[\"prompt\",{\"1\":{\"1452\":1,\"1456\":1}}],[\"proxytargetclass\",{\"1\":{\"2649\":1}}],[\"proxy动态代理\",{\"0\":{\"2608\":1}}],[\"proxy连接器\",{\"1\":{\"1765\":1}}],[\"proxy\",{\"1\":{\"1191\":1,\"2607\":1,\"2608\":1,\"2609\":2,\"2610\":1}}],[\"proot\",{\"1\":{\"1155\":1}}],[\"projectrecord的集合\",{\"1\":{\"2431\":1}}],[\"projectrecordlist\",{\"1\":{\"2431\":2}}],[\"projectrecord表\",{\"1\":{\"2430\":1}}],[\"projectrecord\",{\"1\":{\"2429\":1,\"2431\":3}}],[\"projectlombok<\",{\"1\":{\"2186\":3,\"2267\":1,\"2374\":1,\"2629\":1,\"2665\":1,\"2756\":1,\"2891\":1}}],[\"project项目的根目录\",{\"1\":{\"1772\":1}}],[\"project\",{\"1\":{\"683\":1,\"772\":1,\"1683\":3,\"1687\":1,\"1775\":1,\"2269\":1,\"2417\":2,\"2629\":1,\"2665\":1}}],[\"project>\",{\"1\":{\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"2267\":1,\"2748\":1,\"2885\":1}}],[\"projectsmapper\",{\"1\":{\"2431\":2}}],[\"projects的属性\",{\"1\":{\"2431\":1}}],[\"projects表\",{\"1\":{\"2430\":1}}],[\"projects\",{\"1\":{\"676\":1,\"2429\":1,\"2431\":3}}],[\"project所有项目后\",{\"1\":{\"676\":1}}],[\"proto\",{\"1\":{\"1424\":1,\"1425\":2}}],[\"prototype作用域\",{\"1\":{\"2552\":1}}],[\"prototype去找\",{\"1\":{\"1425\":1}}],[\"prototype中没有的属性和方法会继续向object\",{\"1\":{\"1425\":1}}],[\"prototype的方式获得\",{\"1\":{\"1423\":1}}],[\"prototype\",{\"1\":{\"1417\":1,\"1423\":1,\"1424\":3,\"1425\":2,\"2554\":1}}],[\"protocol=\",{\"1\":{\"1756\":1,\"1757\":1,\"1765\":1,\"1812\":1}}],[\"protocol\",{\"1\":{\"154\":1,\"2168\":1}}],[\"protected\",{\"1\":{\"576\":1,\"1790\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1825\":1,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":1,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":1,\"1997\":2,\"2056\":1,\"2062\":1,\"2075\":1,\"2088\":1,\"2095\":1,\"2096\":1,\"2115\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2749\":1}}],[\"producecondition\",{\"1\":{\"490\":3}}],[\"producerthread\",{\"1\":{\"489\":6,\"490\":6}}],[\"productiontip\",{\"1\":{\"1689\":1}}],[\"product根据cno进行分组查询\",{\"1\":{\"1072\":1}}],[\"product\",{\"1\":{\"65\":1,\"489\":23,\"490\":23,\"1071\":4,\"1072\":3,\"1073\":1}}],[\"programdata文件夹可能是隐藏的\",{\"1\":{\"923\":1,\"928\":1}}],[\"programdata\",{\"1\":{\"923\":2,\"928\":1}}],[\"program\",{\"1\":{\"452\":1,\"570\":1,\"923\":2,\"925\":1,\"928\":1}}],[\"pc发出请求打开jsp页面\",{\"1\":{\"2788\":1}}],[\"pct\",{\"1\":{\"1082\":2}}],[\"pc\",{\"1\":{\"61\":2,\"845\":4}}],[\"pdfview等\",{\"1\":{\"2775\":1}}],[\"pdfthymeleaf类库\",{\"1\":{\"117\":1}}],[\"pdf\",{\"1\":{\"9\":1,\"208\":2}}],[\"前置通知\",{\"0\":{\"2640\":1},\"1\":{\"2623\":1,\"2648\":1,\"2651\":2}}],[\"前导\",{\"1\":{\"2029\":1}}],[\"前缀命名方式区分\",{\"1\":{\"2214\":1}}],[\"前缀\",{\"1\":{\"2014\":1,\"2765\":2}}],[\"前后端明确的工作职责\",{\"0\":{\"1945\":1}}],[\"前后端代码库分离\",{\"1\":{\"1941\":1}}],[\"前后端代码存放于同一个代码库中\",{\"1\":{\"1939\":1}}],[\"前后端共用一个代码库\",{\"1\":{\"1940\":1}}],[\"前后端工程师进行开发时\",{\"1\":{\"1939\":1}}],[\"前后端之间通过http请求进行交互\",{\"1\":{\"1938\":1}}],[\"前后端分离后\",{\"1\":{\"1948\":1}}],[\"前后端分离以后\",{\"1\":{\"1946\":1}}],[\"前后端分离的好处\",{\"0\":{\"1944\":1}}],[\"前后端分离常用框架\",{\"0\":{\"1943\":1}}],[\"前后端分离属于软件架构的一种\",{\"1\":{\"1937\":1}}],[\"前后端分离\",{\"0\":{\"1937\":1,\"3137\":1},\"1\":{\"211\":1}}],[\"前一个节点\",{\"1\":{\"1485\":1}}],[\"前身不同javascript是netscape公司的产品\",{\"1\":{\"1376\":1}}],[\"前台输出反馈信息\",{\"1\":{\"1237\":1}}],[\"前者称之为前置条件\",{\"1\":{\"841\":1}}],[\"前者是后者的规格\",{\"1\":{\"70\":1}}],[\"前提是你必须是这个项目的拥有者或合作者\",{\"1\":{\"762\":1}}],[\"前两代缺陷\",{\"1\":{\"378\":1}}],[\"前面已经使用mybatis完成了对emp表的crud操作\",{\"1\":{\"2371\":1}}],[\"前面要加上<t>\",{\"1\":{\"241\":1}}],[\"前面加上\",{\"1\":{\"127\":1}}],[\"前言\",{\"0\":{\"15\":1,\"23\":1,\"221\":1,\"232\":1,\"302\":1,\"2576\":1,\"2739\":1,\"3002\":1},\"1\":{\"37\":1}}],[\"前端使用ajax请求\",{\"0\":{\"2877\":1}}],[\"前端访问后发现\",{\"1\":{\"2859\":1}}],[\"前端\",{\"1\":{\"2829\":1}}],[\"前端页面400且控制台出现异常\",{\"1\":{\"2818\":1}}],[\"前端传送参数时\",{\"1\":{\"2800\":1,\"2801\":1}}],[\"前端发送的参数名需要和后端保持一致\",{\"1\":{\"2793\":1}}],[\"前端在打开渲染jsp时发现有外部资源\",{\"1\":{\"2788\":1}}],[\"前端控制器\",{\"0\":{\"2770\":1}}],[\"前端代码\",{\"0\":{\"2120\":1},\"1\":{\"2131\":1,\"2132\":1,\"2166\":1,\"2169\":1,\"2171\":1,\"2176\":1,\"2830\":1}}],[\"前端代码中有可以进行mock测试\",{\"1\":{\"1941\":1}}],[\"前端用户操作和后台服务器运算可以同时进行\",{\"1\":{\"2105\":1}}],[\"前端资源\",{\"0\":{\"2055\":1}}],[\"前端不能独立进行开发和测试\",{\"1\":{\"1940\":1}}],[\"前端获取到数据后\",{\"1\":{\"1938\":1}}],[\"前端项目在通过ajax请求服务器端项目restful接口实现数据交互\",{\"1\":{\"1937\":1}}],[\"前端路径问题\",{\"0\":{\"1867\":1}}],[\"前端架构拓展\",{\"0\":{\"2987\":1},\"1\":{\"11\":1}}],[\"前端技术\",{\"0\":{\"11\":1,\"2954\":1},\"1\":{\"4\":1}}],[\"s6与\",{\"0\":{\"2984\":1}}],[\"sgender=root\",{\"1\":{\"2599\":1}}],[\"sgender\",{\"1\":{\"2598\":2,\"2599\":2}}],[\"sgt\",{\"1\":{\"239\":2}}],[\"srae\",{\"1\":{\"2077\":12}}],[\"sre\",{\"1\":{\"2076\":4,\"2087\":3}}],[\"sr\",{\"1\":{\"1609\":2}}],[\"src目录\",{\"1\":{\"1776\":1}}],[\"src\",{\"1\":{\"98\":4,\"114\":1,\"1285\":1,\"1309\":1,\"1686\":1,\"2170\":1,\"2501\":3}}],[\"src=\",{\"1\":{\"65\":1,\"1309\":2,\"1310\":3,\"1312\":1,\"1321\":3,\"1322\":1,\"1339\":2,\"1380\":2,\"1518\":1,\"1532\":1,\"1545\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1563\":3,\"1564\":3,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":3,\"1602\":3,\"1606\":3,\"1609\":7,\"1614\":1,\"1616\":1,\"1617\":1,\"1649\":3,\"1651\":3,\"1695\":1,\"1698\":1,\"1701\":1,\"2060\":2,\"2131\":1,\"2132\":2,\"2159\":1,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2786\":2,\"2877\":1}}],[\"swagger\",{\"1\":{\"2293\":1}}],[\"swing\",{\"1\":{\"1588\":1}}],[\"switch后面的\",{\"1\":{\"564\":2}}],[\"switch=\",{\"1\":{\"146\":1}}],[\"switch\",{\"0\":{\"146\":1,\"1366\":1},\"1\":{\"146\":1,\"564\":1,\"1366\":1}}],[\"swf\",{\"1\":{\"1310\":1}}],[\"sm\",{\"1\":{\"1600\":1,\"1601\":2,\"1602\":6}}],[\"smith\",{\"1\":{\"1211\":1,\"2450\":1}}],[\"smallint\",{\"1\":{\"939\":1}}],[\"s>\",{\"1\":{\"1187\":1}}],[\"s>2\",{\"1\":{\"885\":1,\"887\":1}}],[\"s和\",{\"1\":{\"1093\":1}}],[\"sqtan\",{\"1\":{\"1897\":1,\"1898\":1,\"2192\":1,\"2276\":1,\"2282\":2,\"2374\":2,\"2377\":1,\"2615\":1}}],[\"square\",{\"1\":{\"1317\":2}}],[\"sqrt2\",{\"1\":{\"1411\":1}}],[\"sqrt1\",{\"1\":{\"1411\":1}}],[\"sqrt\",{\"1\":{\"1092\":1,\"1411\":1}}],[\"sql生成插件\",{\"1\":{\"2516\":1}}],[\"sql生成area表格\",{\"1\":{\"2174\":1}}],[\"sqlmapgenerator>\",{\"1\":{\"2501\":1}}],[\"sqlmapconfig\",{\"0\":{\"2278\":1},\"1\":{\"2275\":1,\"2282\":1,\"2374\":1}}],[\"sql映射文件的生成策略\",{\"1\":{\"2501\":1}}],[\"sql>\",{\"1\":{\"2461\":3,\"2462\":1}}],[\"sql标签可以多层嵌套\",{\"1\":{\"2461\":1}}],[\"sql标签可以对一些复用性比较高的代码段进行包裹\",{\"1\":{\"2460\":1}}],[\"sql标签与include标签\",{\"0\":{\"2460\":1}}],[\"sql难易度\",{\"1\":{\"2438\":1}}],[\"sqlexpression=\",{\"1\":{\"2301\":1}}],[\"sqlexpression\",{\"1\":{\"2301\":1}}],[\"sqlexception\",{\"1\":{\"1215\":2,\"1216\":2,\"1217\":2,\"1219\":2,\"1220\":2,\"1221\":2,\"1222\":2,\"1227\":2,\"1231\":2,\"1234\":4,\"1235\":4,\"1242\":2,\"1252\":3,\"1253\":9,\"1264\":4,\"1266\":5,\"1274\":4,\"1275\":3,\"1280\":3,\"1288\":4,\"1976\":3,\"2493\":2,\"2509\":4}}],[\"sqlsingleline\",{\"1\":{\"2301\":3}}],[\"sqlsession对象\",{\"1\":{\"2907\":1}}],[\"sqlsession对象本身的api中存在三个查询方法\",{\"1\":{\"2342\":1}}],[\"sqlsession关闭之前\",{\"1\":{\"2471\":1}}],[\"sqlsession实现dml全部操作\",{\"0\":{\"2360\":1}}],[\"sqlsession的参数传递\",{\"0\":{\"2352\":1}}],[\"sqlsessionfactorybeanname\",{\"1\":{\"2903\":1,\"2907\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"2903\":1,\"2907\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"2282\":5,\"2374\":4}}],[\"sqlsessionfactory\",{\"1\":{\"2282\":2,\"2374\":1}}],[\"sqlsession\",{\"0\":{\"2342\":1},\"1\":{\"2282\":6,\"2345\":2,\"2348\":1,\"2351\":1,\"2355\":1,\"2357\":1,\"2359\":1,\"2360\":1,\"2363\":1,\"2366\":1,\"2369\":1,\"2374\":4,\"2379\":1,\"2386\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":1,\"2444\":2,\"2447\":2,\"2450\":3,\"2453\":1,\"2456\":1,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2475\":2,\"2479\":3,\"2488\":3,\"2503\":1}}],[\"sqlserver\",{\"1\":{\"2179\":1}}],[\"sqlserver2005\",{\"1\":{\"2179\":1}}],[\"sql耗时\",{\"1\":{\"2298\":1,\"2299\":1}}],[\"sql语句数量\",{\"1\":{\"2438\":1}}],[\"sql语句和java代码的耦合度特别高\",{\"1\":{\"2195\":1}}],[\"sql语言分类\",{\"0\":{\"931\":1}}],[\"sqlite\",{\"1\":{\"2179\":1}}],[\"sql中的一个接口\",{\"1\":{\"1250\":1}}],[\"sql注入\",{\"0\":{\"1245\":1}}],[\"sql注入攻击指的是通过构建特殊的输入作为参数传入web应用程序\",{\"1\":{\"1237\":1}}],[\"sql注入和预编译\",{\"0\":{\"1236\":1},\"1\":{\"54\":1}}],[\"sql=\",{\"1\":{\"1217\":1,\"1219\":1,\"1234\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"2176\":1}}],[\"sql扩展api包\",{\"1\":{\"1209\":1}}],[\"sql核心api包\",{\"1\":{\"1209\":1}}],[\"sql包\",{\"1\":{\"1209\":1}}],[\"sql包和javax\",{\"1\":{\"1209\":1}}],[\"sql包中\",{\"1\":{\"1208\":1}}],[\"sql脚本路径名\",{\"1\":{\"1153\":1}}],[\"sql基本是一个命令实现一个处理\",{\"1\":{\"1145\":1}}],[\"sql是由ibm公司在1974~1979年之间根据e\",{\"1\":{\"930\":1}}],[\"sql是一种非过程化语言\",{\"1\":{\"930\":1}}],[\"sql的包中都有date类\",{\"1\":{\"891\":1}}],[\"sqldate\",{\"1\":{\"372\":1}}],[\"sql\",{\"0\":{\"370\":1,\"372\":1},\"1\":{\"370\":5,\"372\":6,\"373\":5,\"375\":1,\"376\":1,\"891\":1,\"910\":1,\"917\":2,\"918\":1,\"919\":6,\"930\":1,\"1152\":1,\"1153\":1,\"1215\":6,\"1216\":2,\"1217\":1,\"1219\":1,\"1220\":2,\"1221\":2,\"1222\":2,\"1227\":2,\"1231\":2,\"1233\":1,\"1234\":1,\"1235\":2,\"1242\":2,\"1252\":2,\"1253\":8,\"1255\":5,\"1257\":3,\"1264\":4,\"1266\":6,\"1267\":6,\"1274\":3,\"1275\":7,\"2176\":1,\"2179\":4,\"2196\":1,\"2248\":1,\"2274\":1,\"2294\":2,\"2298\":1,\"2299\":5,\"2301\":2,\"2319\":1,\"2334\":1,\"2672\":1,\"2673\":3,\"2674\":7,\"2677\":1,\"2678\":2,\"2679\":2,\"2680\":2,\"2697\":2}}],[\"sql优化\",{\"0\":{\"1148\":1},\"1\":{\"52\":1}}],[\"skipsetautocommitonclose\",{\"1\":{\"2317\":2}}],[\"skip\",{\"0\":{\"866\":1},\"1\":{\"861\":1,\"866\":2,\"876\":1,\"1155\":1}}],[\"s4\",{\"1\":{\"853\":2}}],[\"svn是集中式版本控制系统\",{\"1\":{\"723\":1}}],[\"svn\",{\"1\":{\"723\":1}}],[\"svg\",{\"1\":{\"61\":1}}],[\"sdk选项\",{\"1\":{\"1775\":1}}],[\"sdk\",{\"1\":{\"600\":1}}],[\"s3\",{\"1\":{\"431\":5,\"853\":2}}],[\"sbd\",{\"1\":{\"1927\":11,\"1928\":9}}],[\"sbd=new\",{\"1\":{\"1927\":1,\"1928\":1}}],[\"sb1\",{\"1\":{\"395\":6,\"396\":2}}],[\"sb1=new\",{\"1\":{\"395\":1,\"396\":1}}],[\"sb=new\",{\"1\":{\"395\":1,\"396\":1}}],[\"sb\",{\"1\":{\"392\":2,\"395\":6,\"396\":8}}],[\"sb2=new\",{\"1\":{\"396\":1}}],[\"sb2\",{\"1\":{\"392\":1,\"396\":2}}],[\"sb3=new\",{\"1\":{\"395\":1,\"396\":1}}],[\"sb3\",{\"1\":{\"392\":1,\"395\":3,\"396\":3}}],[\"ssm>\",{\"1\":{\"2526\":1}}],[\"ssm<\",{\"1\":{\"1552\":1}}],[\"ssourcecode\",{\"1\":{\"2055\":1,\"2060\":1,\"2088\":1,\"2094\":1,\"2114\":1,\"2128\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1}}],[\"ssl连接器\",{\"1\":{\"1765\":1}}],[\"ss0\",{\"1\":{\"1309\":1}}],[\"ss6\",{\"1\":{\"1309\":1}}],[\"sss\",{\"1\":{\"1287\":1,\"2487\":1}}],[\"ssh>\",{\"1\":{\"2526\":1}}],[\"ssh2过渡到了ssm\",{\"1\":{\"2197\":1}}],[\"sshpathgit\",{\"1\":{\"763\":1}}],[\"ssh文件夹\",{\"1\":{\"763\":1}}],[\"ssh目录删除即可\",{\"1\":{\"763\":1}}],[\"ssh模式比https模式的一个重要好处就是\",{\"1\":{\"762\":1}}],[\"ssh\",{\"0\":{\"762\":1},\"1\":{\"763\":3,\"810\":1}}],[\"ss\",{\"1\":{\"374\":1,\"380\":2,\"459\":1,\"810\":1,\"897\":1,\"942\":3,\"1285\":1,\"1287\":1,\"1312\":1,\"1319\":1,\"1397\":2,\"1417\":1,\"2031\":1,\"2087\":1,\"2128\":1,\"2298\":1,\"2308\":1,\"2312\":2,\"2374\":1,\"2487\":1,\"2757\":1,\"2896\":1}}],[\"signature\",{\"1\":{\"2651\":7}}],[\"signalall\",{\"1\":{\"475\":2,\"479\":1}}],[\"signal\",{\"1\":{\"328\":2,\"475\":3,\"479\":1,\"490\":2}}],[\"sit\",{\"1\":{\"1606\":3,\"1609\":1}}],[\"site\",{\"0\":{\"710\":1}}],[\"singleton\",{\"1\":{\"2554\":1}}],[\"singleton作用域\",{\"1\":{\"2552\":1}}],[\"singletonmap\",{\"1\":{\"2293\":1}}],[\"singlelineformat\",{\"1\":{\"2298\":1,\"2301\":2}}],[\"sin\",{\"1\":{\"1411\":1}}],[\"simplelayout\",{\"1\":{\"1285\":2,\"2308\":1,\"2374\":1}}],[\"simpledateformat=new\",{\"1\":{\"2087\":1}}],[\"simpledateformat\",{\"0\":{\"374\":1},\"1\":{\"374\":3,\"459\":4,\"891\":6,\"2087\":3,\"2799\":2}}],[\"size=\",{\"1\":{\"1306\":1,\"1567\":1,\"2312\":1,\"2481\":1}}],[\"size+1\",{\"1\":{\"294\":1}}],[\"size++\",{\"1\":{\"263\":1,\"279\":1,\"294\":1}}],[\"size的大小\",{\"1\":{\"294\":1}}],[\"size\",{\"1\":{\"147\":1,\"219\":3,\"251\":1,\"260\":1,\"263\":5,\"278\":2,\"279\":1,\"281\":1,\"283\":1,\"286\":1,\"292\":2,\"294\":2,\"305\":2,\"306\":2,\"356\":1,\"364\":1,\"889\":5,\"1188\":1,\"1198\":1,\"1274\":2,\"1280\":2,\"1288\":2,\"1496\":1,\"1497\":1,\"1567\":2,\"1695\":1,\"1991\":1,\"2481\":1}}],[\"slanguage\",{\"1\":{\"2857\":1}}],[\"slf4j\",{\"1\":{\"2756\":2}}],[\"slf4j日志门面的一个具体实现\",{\"1\":{\"2484\":1}}],[\"slf4j日志框架\",{\"1\":{\"13\":1}}],[\"slf4jlogger\",{\"1\":{\"2300\":1,\"2301\":1}}],[\"slide=\",{\"1\":{\"1609\":2}}],[\"slide\",{\"1\":{\"1609\":5}}],[\"slidetoggle\",{\"1\":{\"1589\":2}}],[\"slideup\",{\"1\":{\"1589\":2}}],[\"slidedown\",{\"1\":{\"1589\":2}}],[\"slice\",{\"0\":{\"1399\":1},\"1\":{\"1399\":1,\"1405\":1}}],[\"sleep\",{\"0\":{\"459\":1},\"1\":{\"327\":3,\"438\":3,\"440\":2,\"441\":2,\"445\":1,\"457\":2,\"459\":1,\"460\":2,\"538\":1,\"576\":2,\"898\":1,\"1424\":3,\"1425\":3,\"1825\":2}}],[\"sn为一个字符串\",{\"1\":{\"1086\":1}}],[\"sn\",{\"1\":{\"1086\":2}}],[\"sname=root\",{\"1\":{\"2599\":1}}],[\"sname\",{\"1\":{\"937\":1,\"955\":1,\"956\":1,\"972\":1,\"987\":1,\"2598\":2,\"2599\":3}}],[\"snapshot<\",{\"1\":{\"680\":1,\"683\":1,\"714\":3,\"715\":3,\"2186\":1,\"2267\":1,\"2374\":1,\"2748\":1,\"2885\":1}}],[\"snapshot\",{\"1\":{\"316\":4}}],[\"sno\",{\"1\":{\"576\":7,\"588\":6,\"937\":1,\"955\":1,\"956\":2,\"972\":1,\"973\":5}}],[\"snd\",{\"1\":{\"208\":1}}],[\"sysdate\",{\"1\":{\"972\":1,\"1093\":1}}],[\"system32>\",{\"1\":{\"1152\":1}}],[\"system32>echo\",{\"1\":{\"674\":1}}],[\"systemutc\",{\"1\":{\"901\":1}}],[\"system等\",{\"0\":{\"692\":1}}],[\"systemin\",{\"1\":{\"422\":1}}],[\"system\",{\"1\":{\"16\":4,\"17\":7,\"19\":11,\"21\":9,\"24\":6,\"26\":1,\"27\":8,\"30\":3,\"32\":4,\"219\":10,\"220\":5,\"234\":3,\"244\":1,\"245\":1,\"251\":18,\"260\":16,\"262\":2,\"266\":6,\"272\":4,\"274\":1,\"275\":1,\"278\":6,\"279\":1,\"281\":2,\"283\":4,\"286\":2,\"287\":3,\"288\":1,\"292\":22,\"300\":6,\"303\":7,\"305\":4,\"306\":4,\"309\":9,\"315\":3,\"318\":1,\"327\":15,\"337\":14,\"348\":3,\"349\":3,\"352\":1,\"356\":6,\"357\":7,\"362\":2,\"363\":4,\"364\":8,\"367\":8,\"368\":8,\"370\":1,\"371\":13,\"372\":1,\"373\":1,\"374\":5,\"375\":9,\"376\":8,\"379\":21,\"380\":6,\"382\":5,\"386\":14,\"387\":20,\"389\":14,\"390\":14,\"392\":1,\"395\":10,\"396\":10,\"405\":3,\"422\":6,\"425\":3,\"428\":1,\"431\":16,\"438\":3,\"440\":2,\"441\":2,\"442\":1,\"445\":1,\"446\":1,\"450\":1,\"457\":2,\"458\":2,\"459\":1,\"460\":2,\"461\":1,\"465\":1,\"471\":1,\"480\":1,\"489\":2,\"490\":2,\"503\":7,\"506\":5,\"509\":1,\"510\":2,\"511\":8,\"512\":8,\"513\":8,\"515\":3,\"516\":4,\"517\":4,\"518\":9,\"523\":2,\"525\":4,\"541\":2,\"542\":2,\"543\":1,\"545\":1,\"546\":1,\"560\":2,\"561\":2,\"562\":5,\"563\":5,\"564\":2,\"568\":2,\"576\":4,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"585\":9,\"588\":12,\"591\":17,\"594\":5,\"721\":1,\"817\":2,\"820\":1,\"825\":2,\"826\":2,\"828\":2,\"829\":4,\"830\":3,\"831\":3,\"832\":2,\"835\":1,\"837\":1,\"839\":1,\"840\":2,\"842\":1,\"843\":1,\"844\":1,\"847\":1,\"848\":3,\"850\":4,\"853\":6,\"854\":4,\"856\":2,\"860\":3,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":2,\"868\":2,\"869\":2,\"870\":3,\"871\":2,\"872\":2,\"873\":5,\"874\":2,\"875\":1,\"876\":1,\"878\":4,\"879\":2,\"880\":6,\"881\":3,\"882\":1,\"883\":3,\"885\":1,\"887\":1,\"888\":7,\"889\":5,\"891\":4,\"893\":26,\"895\":9,\"896\":3,\"897\":3,\"898\":3,\"899\":7,\"900\":4,\"901\":5,\"904\":2,\"910\":1,\"911\":1,\"914\":1,\"922\":1,\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1242\":6,\"1252\":6,\"1253\":4,\"1264\":2,\"1274\":8,\"1280\":8,\"1283\":1,\"1304\":1,\"1720\":1,\"1779\":2,\"1799\":10,\"1800\":2,\"1801\":4,\"1825\":4,\"1831\":9,\"1834\":4,\"1856\":4,\"1860\":4,\"1864\":4,\"1892\":1,\"1898\":6,\"1917\":5,\"1921\":5,\"1925\":3,\"1997\":2,\"1998\":2,\"2001\":5,\"2047\":4,\"2049\":2,\"2052\":6,\"2056\":2,\"2062\":2,\"2063\":1,\"2076\":2,\"2077\":3,\"2079\":2,\"2080\":3,\"2081\":1,\"2082\":2,\"2084\":2,\"2085\":3,\"2097\":2,\"2128\":1,\"2159\":2,\"2166\":2,\"2170\":1,\"2171\":1,\"2192\":1,\"2203\":1,\"2204\":1,\"2205\":1,\"2206\":1,\"2208\":1,\"2209\":1,\"2210\":1,\"2211\":1,\"2219\":1,\"2220\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2245\":1,\"2246\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2253\":1,\"2254\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2260\":2,\"2282\":2,\"2286\":6,\"2293\":1,\"2312\":1,\"2345\":2,\"2348\":1,\"2351\":1,\"2355\":1,\"2357\":1,\"2359\":1,\"2379\":1,\"2386\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":1,\"2444\":2,\"2447\":2,\"2450\":3,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2475\":2,\"2479\":2,\"2488\":2,\"2503\":1,\"2539\":1,\"2552\":2,\"2553\":2,\"2554\":2,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2566\":5,\"2567\":1,\"2571\":6,\"2574\":4,\"2579\":1,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":2,\"2598\":3,\"2599\":3,\"2605\":4,\"2609\":6,\"2612\":4,\"2615\":3,\"2631\":2,\"2640\":1,\"2641\":1,\"2642\":2,\"2643\":1,\"2644\":3,\"2651\":5,\"2652\":1,\"2653\":1,\"2672\":2,\"2673\":1,\"2757\":1,\"2760\":1,\"2764\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2811\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2851\":1,\"2856\":1,\"2857\":1,\"2859\":1,\"2876\":1,\"2878\":1,\"2896\":1}}],[\"synchronousqueue3\",{\"1\":{\"348\":2,\"349\":3}}],[\"synchronousqueue2\",{\"1\":{\"348\":2,\"349\":3}}],[\"synchronousqueue<>\",{\"1\":{\"348\":3,\"349\":3}}],[\"synchronousqueue<object>\",{\"1\":{\"348\":3,\"349\":3}}],[\"synchronousqueue1\",{\"1\":{\"348\":2,\"349\":3}}],[\"synchronousqueue是一个没有容量大小的队列\",{\"1\":{\"346\":1}}],[\"synchronousqueue\",{\"0\":{\"345\":1}}],[\"synchronized使用的是一个等待池\",{\"1\":{\"489\":1}}],[\"synchronized有代码块锁和方法锁\",{\"1\":{\"481\":1}}],[\"synchronized是隐式锁\",{\"1\":{\"481\":1}}],[\"synchronized是java中的关键字\",{\"1\":{\"473\":1}}],[\"synchronized关键字\",{\"1\":{\"475\":1}}],[\"synchronized\",{\"1\":{\"464\":1,\"465\":1,\"471\":1,\"489\":2,\"490\":1,\"889\":1}}],[\"synchronizedset\",{\"1\":{\"304\":1}}],[\"synchronizedmap\",{\"1\":{\"304\":1,\"309\":1}}],[\"synchronizedlist\",{\"1\":{\"304\":1,\"306\":1,\"889\":1}}],[\"s+\",{\"1\":{\"251\":1,\"1417\":1}}],[\"s2==\",{\"1\":{\"431\":1}}],[\"s2\",{\"1\":{\"240\":2,\"274\":2,\"275\":2,\"431\":3,\"1086\":3,\"1091\":2}}],[\"s15\",{\"1\":{\"431\":2}}],[\"s14\",{\"1\":{\"431\":2}}],[\"s10\",{\"1\":{\"431\":7}}],[\"s1\",{\"1\":{\"240\":2,\"274\":2,\"275\":2,\"431\":1,\"853\":2,\"1086\":2,\"1091\":4}}],[\"s\",{\"0\":{\"2936\":1,\"2974\":1,\"2980\":2,\"2991\":1,\"3000\":1,\"3063\":1,\"3072\":1,\"3083\":1,\"3098\":2,\"3136\":1,\"3138\":1,\"3139\":1,\"3140\":1,\"3143\":1,\"3164\":1,\"3182\":1},\"1\":{\"239\":3,\"240\":3,\"242\":2,\"245\":1,\"251\":1,\"292\":2,\"364\":5,\"374\":2,\"390\":2,\"509\":2,\"510\":4,\"515\":2,\"516\":4,\"517\":4,\"518\":6,\"562\":2,\"734\":1,\"810\":4,\"830\":2,\"853\":2,\"854\":2,\"856\":6,\"864\":2,\"870\":6,\"874\":1,\"876\":2,\"885\":1,\"887\":1,\"889\":2,\"1087\":2,\"1089\":4,\"1090\":3,\"1091\":6,\"1093\":1,\"1331\":1,\"1417\":1,\"1586\":1,\"2030\":2,\"2256\":4,\"2259\":2,\"2503\":3}}],[\"spectjweaver\",{\"1\":{\"2629\":1}}],[\"spy\",{\"0\":{\"2298\":1,\"2301\":1},\"1\":{\"2297\":1,\"2298\":3,\"2299\":1,\"2300\":3,\"2301\":9}}],[\"spwd\",{\"1\":{\"1794\":2}}],[\"space\",{\"1\":{\"1665\":1}}],[\"span1\",{\"1\":{\"1571\":14}}],[\"span包裹的区域就多大\",{\"1\":{\"1512\":1}}],[\"span\",{\"1\":{\"1512\":2,\"1548\":2,\"1695\":1}}],[\"span属于行内元素\",{\"1\":{\"1512\":1}}],[\"span><br\",{\"1\":{\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"span><\",{\"1\":{\"1548\":1}}],[\"span>设计\",{\"1\":{\"1548\":1}}],[\"span>h1\",{\"1\":{\"1513\":1}}],[\"span>\",{\"1\":{\"1482\":3,\"1499\":1,\"1500\":1,\"1512\":3,\"1513\":1,\"1548\":1,\"1570\":1,\"1571\":5,\"1579\":1,\"1586\":1,\"1609\":4,\"1695\":1}}],[\"splice\",{\"0\":{\"1400\":1},\"1\":{\"1400\":2}}],[\"spliterator\",{\"1\":{\"875\":2}}],[\"spliterator<t>\",{\"1\":{\"875\":3}}],[\"split\",{\"1\":{\"431\":3,\"875\":2,\"1405\":1,\"2509\":5}}],[\"spm=1001\",{\"1\":{\"845\":1}}],[\"sp\",{\"1\":{\"288\":1}}],[\"sping的事务管理\",{\"0\":{\"2681\":1},\"1\":{\"216\":1}}],[\"spreadsheet\",{\"1\":{\"208\":1}}],[\"spring帮我们提供了contextloaderlistener监听器\",{\"1\":{\"2911\":1}}],[\"spring整合mybatis的整体思路如下\",{\"1\":{\"2907\":1}}],[\"spring整合junit单元测试\",{\"1\":{\"2525\":1}}],[\"spring主要是面向service层进行管理\",{\"1\":{\"2905\":1}}],[\"spring<\",{\"1\":{\"2894\":1}}],[\"spring测试包\",{\"1\":{\"2891\":1}}],[\"springaop切面\",{\"1\":{\"2889\":1}}],[\"spring相关依赖\",{\"0\":{\"2889\":1}}],[\"spring3\",{\"1\":{\"2843\":1}}],[\"spring就知道了我们启用注解驱动\",{\"1\":{\"2780\":1}}],[\"spring就会将这个对象传入\",{\"1\":{\"2651\":1}}],[\"spring核心包\",{\"1\":{\"2756\":2,\"2889\":1}}],[\"spring核心依赖\",{\"1\":{\"2665\":2}}],[\"spring声明式事务的实现方式\",{\"1\":{\"2699\":1}}],[\"spring中有两种事务的管理方式\",{\"1\":{\"2699\":1}}],[\"spring中对事物的管理\",{\"0\":{\"2699\":1}}],[\"spring中的orm映射\",{\"1\":{\"2665\":1}}],[\"spring工程配置\",{\"0\":{\"2696\":1}}],[\"spring框架为我们提供了很多的操作模板类\",{\"1\":{\"2669\":1}}],[\"springorm\",{\"1\":{\"2665\":1}}],[\"spring事务控制\",{\"1\":{\"2890\":1}}],[\"spring事务管理\",{\"1\":{\"2665\":1,\"2756\":1}}],[\"spring事务\",{\"1\":{\"2665\":1}}],[\"springjdbc\",{\"1\":{\"2890\":1}}],[\"springjdbc包\",{\"1\":{\"2665\":2,\"2756\":1}}],[\"springjpa\",{\"1\":{\"13\":1}}],[\"spring切面\",{\"1\":{\"2665\":2,\"2756\":1}}],[\"spring切面包\",{\"1\":{\"2629\":1,\"2756\":1}}],[\"spring会将目标方法抛出的异常从这传入\",{\"1\":{\"2653\":1}}],[\"spring配置文件\",{\"0\":{\"2630\":1}}],[\"spring只是借用了aspectj中的注解\",{\"1\":{\"2627\":1}}],[\"springconfig\",{\"1\":{\"2601\":1,\"2602\":1,\"2649\":2}}],[\"springcloud\",{\"1\":{\"1552\":4}}],[\"spring容器可以读取\",{\"1\":{\"2580\":1}}],[\"spring原本需要引入四个依赖\",{\"1\":{\"2538\":1}}],[\"spring的事务管理\",{\"0\":{\"3176\":1}}],[\"spring的核心容器需要放置到application域中\",{\"1\":{\"2911\":1}}],[\"spring的其他模块还有\",{\"1\":{\"2533\":1}}],[\"spring的源码设计巧妙\",{\"1\":{\"2528\":1}}],[\"spring的概念介绍\",{\"0\":{\"2519\":1}}],[\"spring对javaee\",{\"1\":{\"2527\":1}}],[\"spring对该概念实现的比较好\",{\"1\":{\"2523\":1}}],[\"spring+hibernate\",{\"1\":{\"2526\":1}}],[\"spring+springmvc\",{\"1\":{\"2526\":1}}],[\"spring通过容器\",{\"1\":{\"2522\":1}}],[\"springframework\",{\"1\":{\"2186\":4,\"2542\":3,\"2546\":3,\"2553\":3,\"2554\":3,\"2555\":3,\"2559\":5,\"2566\":5,\"2567\":8,\"2584\":6,\"2588\":26,\"2590\":6,\"2591\":6,\"2592\":8,\"2594\":6,\"2599\":6,\"2614\":1,\"2630\":9,\"2648\":9,\"2666\":19,\"2701\":2,\"2706\":1,\"2710\":1,\"2718\":1,\"2758\":21,\"2759\":1,\"2765\":1,\"2779\":26,\"2780\":25,\"2789\":25,\"2799\":1,\"2807\":1,\"2829\":1,\"2830\":1,\"2898\":25,\"2899\":24,\"2901\":1,\"2903\":25,\"2904\":24,\"2908\":1,\"2910\":1,\"2911\":1,\"2912\":1}}],[\"springframework<\",{\"1\":{\"700\":3,\"2538\":1,\"2614\":1,\"2629\":2,\"2665\":5,\"2756\":8,\"2889\":2,\"2890\":3,\"2891\":1,\"2892\":2}}],[\"springdata<\",{\"1\":{\"1552\":4}}],[\"spring\",{\"0\":{\"2997\":1,\"2998\":1,\"2999\":1,\"3167\":1,\"3185\":1},\"1\":{\"560\":1,\"561\":4,\"563\":1,\"699\":1,\"700\":3,\"1263\":1,\"2185\":1,\"2187\":5,\"2197\":1,\"2290\":1,\"2318\":1,\"2520\":8,\"2531\":3,\"2532\":3,\"2533\":1,\"2538\":4,\"2539\":1,\"2542\":1,\"2543\":1,\"2546\":2,\"2550\":1,\"2552\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":2,\"2584\":2,\"2588\":8,\"2590\":2,\"2591\":2,\"2592\":2,\"2594\":2,\"2599\":2,\"2629\":6,\"2630\":4,\"2635\":1,\"2648\":4,\"2665\":5,\"2666\":6,\"2740\":3,\"2756\":5,\"2758\":7,\"2779\":7,\"2780\":8,\"2789\":8,\"2898\":8,\"2899\":8,\"2903\":10,\"2904\":8,\"2907\":2}}],[\"spring2\",{\"1\":{\"534\":1}}],[\"springboottest\",{\"1\":{\"2192\":1}}],[\"springboot官方推荐使用的视图模板技术\",{\"1\":{\"123\":1}}],[\"springboot\",{\"1\":{\"13\":1,\"1552\":4,\"2197\":1}}],[\"springmvc就可以给我们注入\",{\"1\":{\"2926\":1}}],[\"springmvc主要处理的就是controller层\",{\"1\":{\"2900\":1}}],[\"springmvc包\",{\"1\":{\"2892\":1}}],[\"springmvc底层通过反射给参数列表的属性赋值\",{\"1\":{\"2796\":1}}],[\"springmvc的组件\",{\"0\":{\"2769\":1}}],[\"springmvc的执行流程\",{\"0\":{\"2768\":1}}],[\"springmvc支持包\",{\"1\":{\"2756\":1}}],[\"springmvc支持rest风格的url写法\",{\"1\":{\"2741\":1}}],[\"springmvc采用了松耦合\",{\"1\":{\"2741\":1}}],[\"springmvc通过一套注解\",{\"1\":{\"2741\":1}}],[\"springmvc是spring为展现层提供的基于mvc设计理念的优秀web框架\",{\"1\":{\"2741\":1}}],[\"springmvc\",{\"0\":{\"217\":1,\"2892\":1},\"1\":{\"13\":1,\"2197\":1,\"2740\":1,\"2753\":1,\"2756\":1,\"2759\":1,\"2764\":1,\"2771\":1,\"2775\":1,\"2780\":1,\"2799\":1,\"2820\":1,\"2843\":1,\"2910\":1,\"2926\":3,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"spring基础\",{\"0\":{\"216\":1,\"2996\":1},\"1\":{\"13\":1}}],[\"suffixoverrides\",{\"1\":{\"2455\":1}}],[\"suffixoverrides=\",{\"1\":{\"2455\":1,\"2456\":1}}],[\"suffix\",{\"1\":{\"2455\":1,\"2765\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2901\":1}}],[\"suffix=\",{\"1\":{\"2455\":1}}],[\"suibian\",{\"1\":{\"1838\":1,\"1839\":1,\"1840\":3,\"1841\":3,\"1842\":3,\"1846\":1,\"1847\":1}}],[\"suitable\",{\"1\":{\"1216\":1}}],[\"susername\",{\"1\":{\"1794\":2}}],[\"success\",{\"0\":{\"2144\":1},\"1\":{\"1564\":1,\"1794\":1,\"2131\":1,\"2132\":2,\"2155\":1,\"2161\":2,\"2163\":1,\"2165\":2,\"2169\":1,\"2170\":1,\"2176\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2851\":1,\"2856\":1,\"2857\":1,\"2914\":1,\"2916\":1}}],[\"sudo\",{\"1\":{\"810\":9}}],[\"sup>\",{\"1\":{\"1187\":1}}],[\"supports\",{\"0\":{\"2728\":1},\"1\":{\"2725\":1,\"2736\":1}}],[\"support\",{\"1\":{\"2701\":1,\"2799\":1}}],[\"supported\",{\"0\":{\"2731\":1},\"1\":{\"1808\":1,\"2725\":1,\"2735\":1}}],[\"supplierlambda\",{\"1\":{\"837\":1}}],[\"supplier接口\",{\"0\":{\"836\":1}}],[\"supplier<integer>\",{\"1\":{\"837\":1}}],[\"supplier<t>\",{\"1\":{\"836\":1}}],[\"supplier<string>\",{\"1\":{\"831\":2}}],[\"supplier<long>\",{\"1\":{\"828\":2,\"829\":2}}],[\"supplier1\",{\"1\":{\"828\":2,\"829\":2,\"831\":2}}],[\"supplier\",{\"1\":{\"828\":2,\"829\":2,\"831\":2,\"837\":2,\"853\":4}}],[\"suppresswarnings\",{\"0\":{\"543\":1},\"1\":{\"328\":1,\"543\":2,\"875\":1}}],[\"superclass\",{\"1\":{\"594\":2}}],[\"super\",{\"0\":{\"248\":1},\"1\":{\"36\":2,\"248\":1,\"288\":1,\"441\":1,\"442\":1,\"458\":1,\"471\":1,\"593\":1,\"594\":1,\"838\":1,\"841\":2,\"846\":2,\"862\":1,\"864\":1,\"867\":1,\"868\":1,\"870\":3,\"872\":2,\"873\":1,\"1789\":1,\"2612\":2}}],[\"sun公司是规范制定者\",{\"1\":{\"1206\":1}}],[\"sun公司\",{\"0\":{\"1206\":1}}],[\"sun又被oracle收购\",{\"1\":{\"920\":1}}],[\"sunday\",{\"1\":{\"375\":2,\"893\":2,\"1093\":2}}],[\"sun\",{\"1\":{\"294\":2,\"364\":1,\"891\":1,\"1093\":1,\"1416\":2,\"2016\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2028\":1,\"2031\":2}}],[\"substr\",{\"1\":{\"1405\":1,\"1406\":1,\"1417\":2}}],[\"substring\",{\"1\":{\"395\":1,\"396\":1,\"431\":2,\"830\":1,\"1091\":1,\"1405\":1,\"1406\":1}}],[\"submit\",{\"0\":{\"1343\":1},\"1\":{\"1329\":1,\"1330\":1,\"1331\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1349\":1,\"1439\":1,\"1514\":1,\"1554\":1,\"1555\":2,\"1579\":1,\"1586\":1,\"1793\":1,\"1907\":1,\"2055\":1,\"2060\":1,\"2094\":1,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":4,\"2857\":1,\"2859\":1,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2914\":1}}],[\"subtasks\",{\"1\":{\"1198\":1}}],[\"subtract\",{\"1\":{\"102\":2,\"103\":1}}],[\"sub>\",{\"1\":{\"1187\":1}}],[\"subversion\",{\"1\":{\"723\":1}}],[\"sub\",{\"1\":{\"523\":5,\"525\":5,\"2635\":1}}],[\"subgenerictest2\",{\"1\":{\"240\":2}}],[\"subgenerictest2<integer>\",{\"1\":{\"240\":1}}],[\"subgenerictest2<>\",{\"1\":{\"239\":1}}],[\"subgenerictest2<string>\",{\"1\":{\"239\":1,\"240\":1}}],[\"subgenerictest2<e>\",{\"1\":{\"239\":1,\"240\":2}}],[\"subgenerictest\",{\"1\":{\"239\":3}}],[\"subjectname\",{\"1\":{\"142\":1}}],[\"subject\",{\"1\":{\"142\":1}}],[\"sum2\",{\"1\":{\"1367\":3}}],[\"summary=\",{\"1\":{\"1545\":1}}],[\"summingint\",{\"1\":{\"880\":1}}],[\"summer\",{\"1\":{\"560\":5,\"561\":2,\"563\":4}}],[\"sum+=i\",{\"1\":{\"825\":2,\"826\":2,\"835\":1}}],[\"sum\",{\"1\":{\"102\":2,\"103\":1,\"825\":4,\"826\":4,\"835\":6,\"837\":1,\"867\":2,\"873\":3,\"888\":2,\"1041\":1,\"1367\":3,\"1370\":2}}],[\"sage\",{\"1\":{\"2598\":2,\"2599\":2}}],[\"sandy\",{\"1\":{\"2183\":1}}],[\"sameoriginpolicy\",{\"1\":{\"2168\":1}}],[\"safe\",{\"1\":{\"1408\":2,\"1409\":3,\"1412\":3}}],[\"safari\",{\"1\":{\"177\":1,\"1559\":1}}],[\"safari等\",{\"1\":{\"61\":1}}],[\"sal=\",{\"1\":{\"2674\":1}}],[\"sal=resultset\",{\"1\":{\"1976\":1}}],[\"sal<=500\",{\"1\":{\"1976\":1}}],[\"salgrade\",{\"1\":{\"1211\":7}}],[\"sal\",{\"1\":{\"1211\":16,\"1976\":9,\"2025\":8,\"2031\":8,\"2356\":2,\"2357\":1,\"2358\":2,\"2362\":1,\"2374\":1,\"2388\":2,\"2389\":2,\"2390\":4,\"2394\":2,\"2395\":1,\"2398\":2,\"2401\":2,\"2402\":2,\"2403\":2,\"2425\":3,\"2428\":3,\"2431\":2,\"2435\":1,\"2444\":3,\"2447\":3,\"2450\":3,\"2453\":4,\"2456\":4,\"2462\":2,\"2667\":1}}],[\"salesman\",{\"1\":{\"1211\":4,\"2363\":1}}],[\"sales\",{\"1\":{\"1082\":1,\"1211\":1}}],[\"salary\",{\"1\":{\"1068\":2,\"1082\":2}}],[\"sayvue3\",{\"1\":{\"1715\":3}}],[\"sayvue3>\",{\"1\":{\"1715\":1}}],[\"sayvue2\",{\"1\":{\"1713\":3}}],[\"sayvue2>\",{\"1\":{\"1713\":1}}],[\"sayvue1\",{\"1\":{\"1712\":3}}],[\"sayvue1>\",{\"1\":{\"1712\":1}}],[\"sayvue\",{\"1\":{\"1711\":3}}],[\"sayvue>\",{\"1\":{\"1711\":1}}],[\"sayhello\",{\"1\":{\"820\":4,\"2539\":2,\"2540\":1,\"2543\":1,\"2546\":1,\"2594\":5,\"2595\":2,\"2596\":2,\"2597\":2,\"2598\":2,\"2599\":2,\"2602\":1}}],[\"say\",{\"1\":{\"816\":3,\"817\":3,\"1646\":2,\"2594\":2,\"2595\":1,\"2596\":1,\"2597\":1,\"2598\":1,\"2599\":1,\"2785\":2,\"2786\":2}}],[\"saturday\",{\"1\":{\"375\":2}}],[\"savebatch\",{\"1\":{\"2220\":1}}],[\"savepoints\",{\"1\":{\"1235\":4}}],[\"savepoint\",{\"1\":{\"1235\":5,\"2702\":4}}],[\"save\",{\"1\":{\"94\":1,\"98\":1,\"106\":1,\"107\":2,\"109\":1,\"110\":1,\"115\":1,\"789\":1,\"2726\":2,\"2728\":14,\"2729\":1,\"2731\":4,\"2732\":2}}],[\"sh结尾的\",{\"1\":{\"1744\":1}}],[\"sh\",{\"1\":{\"810\":1}}],[\"sha256\",{\"1\":{\"1216\":1}}],[\"sha2\",{\"1\":{\"923\":1}}],[\"shanghai\",{\"1\":{\"901\":1,\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"1976\":1,\"2187\":1,\"2278\":1,\"2293\":1,\"2332\":1,\"2374\":1,\"2501\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"shanghai等\",{\"1\":{\"901\":1}}],[\"sha\",{\"1\":{\"702\":2}}],[\"sha1算法\",{\"0\":{\"702\":1}}],[\"shfit\",{\"1\":{\"638\":1,\"1668\":1}}],[\"should\",{\"1\":{\"1683\":1}}],[\"shockwave\",{\"1\":{\"1310\":1}}],[\"shop\",{\"1\":{\"1079\":2}}],[\"showarea\",{\"1\":{\"2176\":4}}],[\"showreturninfo\",{\"1\":{\"2114\":1,\"2128\":1}}],[\"showemp\",{\"1\":{\"1976\":1}}],[\"show=\",{\"1\":{\"1624\":1,\"1695\":3}}],[\"show是通过控制元素的display属性\",{\"1\":{\"1624\":1}}],[\"show和v\",{\"0\":{\"1625\":1},\"1\":{\"1624\":1}}],[\"showinfo2\",{\"1\":{\"591\":4}}],[\"showinfo1\",{\"1\":{\"591\":2}}],[\"showinfo\",{\"1\":{\"576\":1,\"591\":2,\"1972\":1}}],[\"show\",{\"0\":{\"1623\":1},\"1\":{\"563\":8,\"816\":3,\"817\":3,\"926\":2,\"937\":1,\"947\":1,\"948\":1,\"963\":1,\"965\":1,\"982\":2,\"1106\":1,\"1118\":1,\"1131\":1,\"1156\":7,\"1588\":3,\"1625\":1}}],[\"showdatapage\",{\"1\":{\"2926\":3,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"showdata\",{\"1\":{\"65\":2,\"2120\":1}}],[\"shortcut\",{\"1\":{\"1293\":1,\"1331\":1}}],[\"short\",{\"1\":{\"360\":3,\"380\":3,\"564\":1,\"2030\":2}}],[\"shutdown=\",{\"1\":{\"1763\":1}}],[\"shutdown\",{\"1\":{\"305\":1,\"306\":1,\"1763\":2}}],[\"sheets\",{\"1\":{\"1466\":1}}],[\"sheet\",{\"1\":{\"208\":1}}],[\"shift+↓\",{\"1\":{\"614\":1}}],[\"shift\",{\"0\":{\"1397\":1},\"1\":{\"87\":1,\"608\":1,\"610\":1,\"616\":2,\"617\":1,\"618\":1,\"620\":1,\"621\":1,\"623\":1,\"626\":1,\"630\":1,\"631\":1,\"632\":1,\"635\":1,\"637\":1,\"638\":1,\"641\":2,\"644\":1,\"645\":1,\"646\":2,\"670\":2,\"671\":1,\"1397\":1,\"1458\":1,\"1459\":1,\"1668\":1}}],[\"soap\",{\"1\":{\"2823\":1}}],[\"soft\",{\"1\":{\"2481\":1}}],[\"software\",{\"1\":{\"2196\":1}}],[\"sorry\",{\"1\":{\"1690\":1}}],[\"sorted\",{\"0\":{\"868\":1},\"1\":{\"868\":4}}],[\"sort\",{\"0\":{\"1401\":1},\"1\":{\"300\":1,\"1401\":2}}],[\"sort提供的是升序排列\",{\"1\":{\"300\":1}}],[\"solr\",{\"1\":{\"1552\":1}}],[\"solid\",{\"1\":{\"65\":1,\"1482\":1,\"1496\":2,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1512\":2,\"1528\":1,\"1552\":1,\"1568\":1,\"1570\":1,\"1571\":7,\"1572\":1,\"1602\":6,\"1606\":4,\"1695\":3,\"1927\":2,\"1928\":2,\"1976\":2,\"2025\":2,\"2031\":2,\"2159\":1}}],[\"socket\",{\"1\":{\"509\":6,\"510\":7,\"511\":7,\"512\":9,\"513\":11}}],[\"sound\",{\"1\":{\"208\":4}}],[\"sourceencoding>\",{\"1\":{\"2629\":1,\"2665\":1}}],[\"sourceencoding>utf\",{\"1\":{\"2629\":1,\"2665\":1}}],[\"source>\",{\"1\":{\"2267\":1,\"2374\":1,\"2629\":1,\"2665\":1}}],[\"source>8<\",{\"1\":{\"2267\":1,\"2374\":1,\"2629\":1,\"2665\":1}}],[\"source=distribute\",{\"1\":{\"845\":1}}],[\"source\",{\"1\":{\"65\":2,\"553\":1,\"757\":1,\"1153\":1,\"2799\":2}}],[\"se\",{\"1\":{\"2079\":2,\"2080\":3,\"2082\":2,\"2088\":4,\"2097\":4}}],[\"severice\",{\"1\":{\"1687\":1}}],[\"several\",{\"1\":{\"65\":1}}],[\"sed\",{\"1\":{\"1606\":1}}],[\"search\",{\"1\":{\"1405\":1,\"1438\":1}}],[\"seasondesc=\",{\"1\":{\"560\":1,\"561\":1}}],[\"seasondesc\",{\"1\":{\"560\":6,\"561\":6}}],[\"seasonname=\",{\"1\":{\"560\":1,\"561\":1}}],[\"seasonname\",{\"1\":{\"560\":6,\"561\":6}}],[\"season\",{\"1\":{\"560\":13,\"561\":7,\"562\":7,\"563\":5}}],[\"seletone返回的是一条实体记录\",{\"1\":{\"2240\":1}}],[\"selectempnamebyid\",{\"1\":{\"2714\":1,\"2715\":1,\"2716\":1,\"2717\":1}}],[\"selected>\",{\"1\":{\"1439\":1}}],[\"selected\",{\"1\":{\"1340\":2,\"1555\":4}}],[\"selected=\",{\"1\":{\"1340\":2,\"1555\":1}}],[\"select=\",{\"1\":{\"2433\":1,\"2435\":2}}],[\"selectkey>\",{\"1\":{\"2410\":1}}],[\"selectkey标签\",{\"0\":{\"2410\":1}}],[\"selectmap\",{\"1\":{\"2342\":1,\"2351\":2,\"2371\":1}}],[\"selectmaps\",{\"1\":{\"2243\":1}}],[\"selectcount\",{\"1\":{\"2241\":1}}],[\"selectobjs\",{\"1\":{\"2244\":1}}],[\"selectone\",{\"1\":{\"2240\":1,\"2342\":1,\"2345\":2,\"2355\":1,\"2371\":1}}],[\"selector\",{\"1\":{\"1546\":1,\"2158\":1}}],[\"selectbyexample\",{\"1\":{\"2503\":1}}],[\"selectbymap\",{\"0\":{\"2205\":1},\"1\":{\"2205\":1}}],[\"selectbyid\",{\"0\":{\"2204\":1},\"1\":{\"2204\":1}}],[\"selectuser3\",{\"1\":{\"2205\":1}}],[\"selectuser2\",{\"1\":{\"2204\":1}}],[\"selectuser1\",{\"1\":{\"2192\":1,\"2203\":1}}],[\"selectlist\",{\"0\":{\"2203\":1},\"1\":{\"2192\":1,\"2203\":1,\"2242\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2282\":1,\"2342\":1,\"2348\":1,\"2357\":1,\"2359\":1}}],[\"selectid==\",{\"1\":{\"2176\":1}}],[\"selectid\",{\"1\":{\"2176\":3}}],[\"selection\",{\"1\":{\"1452\":1}}],[\"select>\",{\"1\":{\"1340\":1,\"1439\":1,\"1555\":1,\"2176\":3,\"2279\":1,\"2344\":1,\"2347\":1,\"2350\":1,\"2354\":1,\"2356\":1,\"2358\":1,\"2378\":1,\"2385\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2394\":1,\"2398\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2406\":1,\"2407\":1,\"2413\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":2,\"2444\":1,\"2447\":1,\"2450\":1,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2918\":1}}],[\"selectdepts\",{\"1\":{\"1267\":1}}],[\"select语句\",{\"1\":{\"1139\":1,\"1210\":1,\"1215\":1}}],[\"select\",{\"0\":{\"1340\":1,\"2249\":1},\"1\":{\"928\":1,\"937\":1,\"949\":1,\"956\":3,\"982\":1,\"1024\":1,\"1025\":2,\"1026\":1,\"1027\":2,\"1028\":1,\"1029\":1,\"1033\":1,\"1034\":2,\"1035\":1,\"1036\":1,\"1037\":2,\"1039\":1,\"1040\":1,\"1041\":1,\"1042\":1,\"1043\":1,\"1054\":3,\"1056\":1,\"1057\":1,\"1060\":1,\"1061\":1,\"1063\":1,\"1064\":1,\"1065\":1,\"1068\":1,\"1071\":4,\"1072\":4,\"1073\":2,\"1077\":1,\"1078\":1,\"1080\":1,\"1081\":1,\"1082\":2,\"1113\":1,\"1116\":1,\"1127\":1,\"1140\":1,\"1147\":8,\"1211\":4,\"1222\":1,\"1227\":1,\"1242\":1,\"1246\":2,\"1249\":1,\"1252\":1,\"1253\":1,\"1267\":1,\"1555\":3,\"1976\":1,\"2176\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":5,\"2247\":1,\"2248\":1,\"2249\":2,\"2253\":1,\"2254\":1,\"2256\":1,\"2257\":2,\"2258\":3,\"2279\":1,\"2344\":1,\"2347\":1,\"2350\":1,\"2354\":1,\"2356\":1,\"2358\":1,\"2378\":1,\"2385\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2394\":1,\"2398\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2406\":1,\"2407\":1,\"2410\":2,\"2413\":1,\"2422\":1,\"2423\":1,\"2425\":1,\"2426\":1,\"2428\":1,\"2429\":1,\"2431\":1,\"2435\":2,\"2437\":1,\"2444\":3,\"2447\":3,\"2450\":4,\"2459\":2,\"2462\":2,\"2466\":2,\"2467\":2,\"2503\":1,\"2672\":2,\"2673\":1,\"2918\":1}}],[\"sel\",{\"1\":{\"1439\":2}}],[\"self=\",{\"1\":{\"1659\":2}}],[\"self修饰符的作用是只有点击元素本身的时候才能触发事件\",{\"1\":{\"1659\":2}}],[\"self修饰符\",{\"0\":{\"1659\":1}}],[\"self\",{\"1\":{\"1312\":2,\"1450\":1,\"1451\":1,\"1463\":1,\"1870\":6}}],[\"sequence\",{\"1\":{\"2179\":1}}],[\"sequencediagram\",{\"1\":{\"1185\":1}}],[\"sequel\",{\"1\":{\"930\":1}}],[\"separator=\",{\"1\":{\"2464\":1,\"2466\":1,\"2467\":1}}],[\"separator\",{\"1\":{\"1086\":1,\"2334\":1,\"2464\":1}}],[\"separatorchar\",{\"1\":{\"405\":3,\"408\":1,\"409\":2,\"412\":4,\"415\":2,\"418\":2,\"421\":2,\"422\":2,\"425\":1,\"428\":2}}],[\"separatorchar在此自动替换了路径中的特殊符号\",{\"1\":{\"384\":1}}],[\"separatorchar+\",{\"1\":{\"384\":1,\"385\":1,\"387\":1,\"388\":1,\"390\":4}}],[\"section\",{\"1\":{\"1195\":1,\"1198\":1}}],[\"secondary\",{\"1\":{\"1564\":1}}],[\"second\",{\"1\":{\"1093\":5}}],[\"seconds\",{\"1\":{\"337\":2,\"349\":3,\"1414\":1,\"1458\":2,\"1459\":2,\"2301\":1}}],[\"security\",{\"1\":{\"922\":1}}],[\"secure\",{\"1\":{\"702\":1}}],[\"see\",{\"1\":{\"538\":1,\"772\":1}}],[\"sendredirect\",{\"1\":{\"1862\":1,\"1864\":3,\"1878\":3,\"1909\":2,\"1910\":1,\"1917\":1,\"1921\":1,\"2062\":1,\"2063\":1,\"2864\":1}}],[\"send\",{\"1\":{\"515\":1,\"516\":2,\"517\":2,\"518\":2,\"2112\":1,\"2114\":1,\"2120\":1,\"2128\":1}}],[\"sex\",{\"1\":{\"238\":2,\"239\":1,\"240\":2,\"564\":2,\"905\":1,\"937\":1,\"955\":1,\"973\":2,\"1555\":2,\"1629\":1,\"1630\":5,\"1892\":3,\"2817\":1}}],[\"segment\",{\"1\":{\"150\":3,\"311\":2}}],[\"session对象\",{\"0\":{\"2923\":1}}],[\"session对象回收\",{\"1\":{\"2081\":1}}],[\"sessionfactory\",{\"1\":{\"2903\":2,\"2907\":2}}],[\"session内有效\",{\"1\":{\"2552\":1}}],[\"session作用域\",{\"1\":{\"2552\":3}}],[\"session活化完毕\",{\"1\":{\"2082\":1}}],[\"sessiondidactivate\",{\"1\":{\"2082\":1,\"2097\":1}}],[\"sessiondestroyed\",{\"1\":{\"2079\":1,\"2088\":1}}],[\"session即将钝化\",{\"1\":{\"2082\":1}}],[\"sessionwillpassivate\",{\"1\":{\"2082\":1,\"2097\":1}}],[\"session到达最大不活动时间\",{\"1\":{\"2081\":1}}],[\"sessioncreated\",{\"1\":{\"2079\":1,\"2088\":1}}],[\"session中的某个对象的状态变化的监听器\",{\"1\":{\"2069\":1}}],[\"sessionmsg\",{\"1\":{\"1981\":1}}],[\"sessionmessage\",{\"1\":{\"1972\":1,\"2018\":1,\"2926\":1}}],[\"sessionscope\",{\"1\":{\"1978\":1,\"1980\":2,\"1981\":1,\"2020\":2,\"2925\":2,\"2926\":1,\"2929\":1}}],[\"sessionstorage\",{\"1\":{\"1451\":1}}],[\"session和cookie的综合案例\",{\"0\":{\"1904\":1}}],[\"session和cookie的总结\",{\"0\":{\"1901\":1}}],[\"session特点\",{\"0\":{\"1895\":1}}],[\"session的使用\",{\"0\":{\"1894\":1}}],[\"sessionvalue\",{\"1\":{\"134\":2}}],[\"sessionkey\",{\"1\":{\"134\":2}}],[\"session域共有四个监听器接口\",{\"1\":{\"2078\":1}}],[\"session域监听器\",{\"0\":{\"2072\":1,\"2078\":1}}],[\"session域中的数据\",{\"1\":{\"1972\":1,\"1980\":1}}],[\"session域\",{\"0\":{\"1918\":1},\"1\":{\"134\":1,\"1968\":1,\"1978\":1}}],[\"session\",{\"0\":{\"134\":1,\"3134\":1},\"1\":{\"134\":4,\"142\":2,\"1113\":2,\"1883\":1,\"1897\":5,\"1898\":9,\"1899\":2,\"1909\":2,\"1910\":2,\"1921\":10,\"1959\":1,\"1968\":1,\"1972\":4,\"1981\":2,\"2018\":2,\"2019\":1,\"2020\":1,\"2063\":2,\"2081\":4,\"2088\":6,\"2092\":3,\"2095\":4,\"2096\":3,\"2282\":3,\"2517\":1,\"2926\":4}}],[\"setview\",{\"1\":{\"2871\":1,\"2872\":1,\"2873\":1}}],[\"setviewname\",{\"1\":{\"2871\":1,\"2872\":1,\"2873\":1,\"2931\":1}}],[\"setvalue\",{\"1\":{\"337\":1,\"1893\":1}}],[\"set集合注入\",{\"1\":{\"2566\":1}}],[\"set标签\",{\"0\":{\"2451\":1}}],[\"setempname\",{\"1\":{\"2450\":1}}],[\"setempno\",{\"1\":{\"2366\":1,\"2444\":1,\"2447\":1,\"2450\":2,\"2453\":1,\"2456\":1}}],[\"setename\",{\"1\":{\"2366\":1,\"2453\":1,\"2456\":1}}],[\"setendtime\",{\"1\":{\"356\":1}}],[\"set方法注入\",{\"1\":{\"2557\":1}}],[\"set方法\",{\"1\":{\"2276\":1,\"2425\":1,\"2428\":1,\"2435\":1}}],[\"set>\",{\"1\":{\"2017\":1,\"2018\":4,\"2452\":1,\"2453\":1,\"2566\":1}}],[\"setcallback\",{\"1\":{\"2615\":1}}],[\"setcity\",{\"1\":{\"2509\":1}}],[\"setcontenttype\",{\"1\":{\"1805\":1,\"1806\":3,\"1808\":1,\"1813\":2,\"1856\":2,\"1860\":2,\"1893\":1,\"1927\":1,\"1997\":2,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1}}],[\"setcharacterencoding\",{\"1\":{\"1801\":2,\"1806\":1,\"1811\":1,\"1856\":2,\"1860\":2,\"1927\":1,\"1997\":2,\"2057\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1}}],[\"setcharat\",{\"1\":{\"395\":1,\"396\":1}}],[\"setchartat\",{\"1\":{\"397\":1}}],[\"setyear\",{\"1\":{\"1415\":1}}],[\"setutcseconds\",{\"1\":{\"1415\":2}}],[\"setutcmonth\",{\"1\":{\"1415\":1}}],[\"setutcminutes\",{\"1\":{\"1415\":1}}],[\"setutcmilliseconds\",{\"1\":{\"1415\":1}}],[\"setutchours\",{\"1\":{\"1415\":1}}],[\"setutcfullyear\",{\"1\":{\"1415\":1}}],[\"setutcdate\",{\"1\":{\"1415\":1}}],[\"setusername\",{\"1\":{\"356\":1,\"1241\":1,\"2061\":1,\"2571\":1}}],[\"setuserid\",{\"1\":{\"356\":1}}],[\"setmgr\",{\"1\":{\"2453\":1,\"2456\":1}}],[\"setmaxage\",{\"1\":{\"1890\":1,\"1892\":1}}],[\"setmonth\",{\"1\":{\"1415\":1}}],[\"setmoney\",{\"1\":{\"1241\":1}}],[\"setminutes\",{\"1\":{\"1415\":1}}],[\"setmilliseconds\",{\"1\":{\"1415\":1}}],[\"setheader\",{\"1\":{\"1807\":1,\"1808\":3,\"2172\":4}}],[\"setheight\",{\"1\":{\"274\":1,\"275\":1}}],[\"sethours\",{\"1\":{\"1415\":1}}],[\"setfullyear\",{\"1\":{\"1415\":2}}],[\"setscopebymodelandview\",{\"1\":{\"2931\":3}}],[\"setscopebymodel\",{\"1\":{\"2928\":3,\"2929\":3}}],[\"setscopebyservlet我们可以看到requestscope\",{\"1\":{\"2926\":1}}],[\"setscopebyservlet\",{\"1\":{\"2926\":2}}],[\"setsuperclass\",{\"1\":{\"2615\":1}}],[\"setsal\",{\"1\":{\"2359\":1,\"2399\":1,\"2404\":1,\"2453\":1,\"2456\":1}}],[\"setsavepoint\",{\"1\":{\"1235\":2}}],[\"setsql\",{\"0\":{\"2250\":1},\"1\":{\"2250\":2}}],[\"setstreet\",{\"1\":{\"2509\":1}}],[\"setstring\",{\"1\":{\"1231\":2,\"1235\":2,\"1252\":2,\"1253\":7,\"1264\":2}}],[\"setstatus\",{\"1\":{\"1804\":1,\"1808\":2}}],[\"setseconds\",{\"1\":{\"1415\":1}}],[\"setinterval\",{\"1\":{\"1452\":2,\"1458\":1}}],[\"setint\",{\"1\":{\"1231\":1,\"1234\":2,\"1235\":1,\"1253\":1,\"1264\":2}}],[\"setdateformat\",{\"1\":{\"2128\":1,\"2166\":1}}],[\"setdate\",{\"1\":{\"1415\":1}}],[\"setdaemon\",{\"0\":{\"460\":1},\"1\":{\"460\":2}}],[\"setdname\",{\"1\":{\"1226\":1,\"1264\":1}}],[\"setdeptno\",{\"1\":{\"1226\":1,\"1264\":1,\"2359\":1,\"2399\":1,\"2404\":1}}],[\"set=utf8\",{\"1\":{\"1154\":1}}],[\"setting\",{\"1\":{\"922\":1}}],[\"settings>\",{\"1\":{\"2315\":1,\"2374\":1,\"2434\":1}}],[\"settingslogimpl参数可以指定使用的日志实现\",{\"1\":{\"2314\":1}}],[\"settings\",{\"1\":{\"607\":1,\"675\":1,\"676\":2,\"772\":1,\"1191\":1,\"1928\":1,\"2269\":1}}],[\"settimeout\",{\"1\":{\"1452\":2,\"1459\":1}}],[\"settime\",{\"1\":{\"375\":1,\"376\":1,\"1415\":2}}],[\"setpassword\",{\"1\":{\"1241\":1,\"2061\":1}}],[\"setpwd\",{\"1\":{\"511\":1,\"512\":1,\"513\":1}}],[\"setprovince\",{\"1\":{\"2509\":1}}],[\"setproduct\",{\"1\":{\"489\":3,\"490\":3}}],[\"setpriority\",{\"1\":{\"457\":2}}],[\"setpre\",{\"1\":{\"262\":3}}],[\"setloc\",{\"1\":{\"1226\":1,\"1264\":1,\"2414\":1}}],[\"setlocked\",{\"1\":{\"489\":3,\"490\":3}}],[\"setlength等方法改变其内容\",{\"1\":{\"397\":1}}],[\"setbrand\",{\"1\":{\"489\":1,\"490\":1}}],[\"set改变calendar的内容\",{\"1\":{\"375\":1}}],[\"set<map\",{\"1\":{\"292\":1,\"859\":1,\"1801\":1}}],[\"set<string>\",{\"1\":{\"292\":1,\"859\":1,\"878\":1,\"2565\":1}}],[\"set里面有实现类\",{\"1\":{\"276\":1}}],[\"setnonnullparameter\",{\"1\":{\"2509\":1}}],[\"setname\",{\"1\":{\"274\":1,\"275\":1,\"287\":3,\"352\":1,\"428\":1,\"439\":2,\"440\":2,\"441\":1,\"456\":1,\"489\":1,\"490\":1,\"511\":1,\"512\":1,\"513\":1,\"2245\":1,\"2246\":1,\"2605\":1}}],[\"setnext\",{\"1\":{\"262\":4}}],[\"setaccessible\",{\"1\":{\"1266\":1,\"1275\":1}}],[\"setaid\",{\"1\":{\"1241\":1}}],[\"setautocommit\",{\"1\":{\"1234\":1,\"1235\":1,\"1255\":1,\"1274\":1,\"1280\":1,\"1288\":1}}],[\"setarray\",{\"1\":{\"316\":4}}],[\"setage\",{\"1\":{\"274\":1,\"275\":1,\"287\":3,\"352\":1,\"428\":1,\"2245\":1,\"2246\":1,\"2250\":2}}],[\"setattribute方法增加了数据都会触发该方法\",{\"1\":{\"2077\":1}}],[\"setattribute方法增加了数据都会触发该方法attributeremoved\",{\"1\":{\"2077\":1}}],[\"setattribute方法修改了数据都会触发该方法\",{\"1\":{\"2077\":2}}],[\"setattribute\",{\"0\":{\"133\":1,\"1494\":1},\"1\":{\"132\":1,\"133\":1,\"134\":1,\"147\":1,\"1494\":3,\"1497\":1,\"1505\":6,\"1567\":1,\"1829\":1,\"1831\":2,\"1897\":3,\"1898\":1,\"1909\":1,\"1917\":4,\"1921\":4,\"1925\":3,\"1972\":8,\"1976\":1,\"1980\":2,\"1981\":2,\"1991\":4,\"2017\":1,\"2018\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2062\":1,\"2075\":2,\"2081\":1,\"2088\":3,\"2095\":2,\"2926\":6}}],[\"setobject\",{\"1\":{\"1266\":2,\"1275\":2}}],[\"setobj\",{\"1\":{\"262\":3}}],[\"setoption\",{\"1\":{\"65\":1}}],[\"setxxx\",{\"1\":{\"142\":1}}],[\"set\",{\"0\":{\"2250\":1},\"1\":{\"93\":1,\"251\":3,\"279\":5,\"287\":1,\"292\":3,\"318\":6,\"375\":3,\"376\":1,\"587\":2,\"588\":2,\"928\":1,\"936\":1,\"946\":1,\"950\":1,\"973\":7,\"1001\":8,\"1003\":2,\"1106\":1,\"1113\":2,\"1122\":1,\"1154\":1,\"1155\":2,\"1156\":6,\"1221\":1,\"1234\":1,\"1253\":1,\"1266\":1,\"1275\":1,\"1416\":1,\"1681\":1,\"1683\":2,\"2018\":5,\"2239\":1,\"2245\":1,\"2246\":1,\"2250\":3,\"2255\":1,\"2259\":4,\"2287\":1,\"2365\":1,\"2414\":1,\"2417\":3,\"2453\":1,\"2454\":1,\"2456\":2,\"2674\":1,\"2679\":1,\"2680\":1,\"2697\":1}}],[\"set接口\",{\"0\":{\"276\":1,\"3006\":1},\"1\":{\"37\":1,\"276\":1}}],[\"servlect\",{\"0\":{\"3130\":1}}],[\"servlerequestattributelistener\",{\"0\":{\"2077\":1},\"1\":{\"2071\":1}}],[\"servlet和jsp\",{\"0\":{\"2893\":1}}],[\"servlet和jsp配合才能完成\",{\"1\":{\"1927\":1}}],[\"servletapi实现\",{\"0\":{\"2862\":1}}],[\"servlet<\",{\"1\":{\"2748\":1,\"2893\":1}}],[\"servlet封装\",{\"1\":{\"2740\":1}}],[\"servlet模块\",{\"1\":{\"2531\":1}}],[\"servlet过滤器将先执行dofilter方法\",{\"1\":{\"2004\":1}}],[\"servlet更适合做后台程序\",{\"1\":{\"1953\":1}}],[\"servlet更适合专门编写java代码\",{\"1\":{\"1953\":1}}],[\"servlet同样也可以向浏览器动态响应html\",{\"1\":{\"1928\":1}}],[\"servlet作为动态资源\",{\"1\":{\"1927\":1}}],[\"servlet作为controller层\",{\"1\":{\"1786\":1}}],[\"servlet6\",{\"1\":{\"1898\":2}}],[\"servlet5\",{\"1\":{\"1897\":2}}],[\"servlet4<\",{\"1\":{\"1834\":1}}],[\"servlet4\",{\"1\":{\"1834\":1,\"1844\":3,\"1864\":4,\"1885\":1,\"1893\":1}}],[\"servlet2<\",{\"1\":{\"1831\":1,\"1834\":1}}],[\"servlet2\",{\"1\":{\"1831\":2,\"1834\":1,\"1844\":5,\"1856\":5,\"1860\":5,\"1878\":2,\"1892\":1,\"1917\":1,\"1921\":1,\"1925\":1,\"2159\":3}}],[\"servletinfo\",{\"1\":{\"1831\":1}}],[\"servlet1在转发之后增加的响应内容\",{\"1\":{\"1860\":1}}],[\"servlet1在转发之前增加的响应内容\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"servlet1<\",{\"1\":{\"1831\":1,\"1834\":1}}],[\"servlet1\",{\"1\":{\"1831\":2,\"1834\":1,\"1844\":5,\"1856\":5,\"1860\":5,\"1864\":1,\"1874\":2,\"1917\":1,\"1921\":1,\"1925\":1,\"1927\":2,\"1972\":2,\"2132\":2,\"2155\":1,\"2166\":5}}],[\"servlet处理请求的过程\",{\"0\":{\"1826\":1}}],[\"servlet运行期间\",{\"1\":{\"1818\":1}}],[\"servlet运行于支持java的应用服务器中\",{\"1\":{\"1548\":2}}],[\"servlet接口\",{\"0\":{\"1817\":1}}],[\"servlet接收到用户名和密码之后\",{\"1\":{\"1792\":1}}],[\"servlet的相对路径是相对于url\",{\"1\":{\"1873\":1,\"1877\":1}}],[\"servlet的显示名称\",{\"1\":{\"1849\":1}}],[\"servlet的描述\",{\"1\":{\"1849\":1}}],[\"servlet的访问url\",{\"1\":{\"1849\":2}}],[\"servlet的名称\",{\"1\":{\"1849\":1}}],[\"servlet的init参数\",{\"1\":{\"1849\":1}}],[\"servlet的生命周期是由容器管理的\",{\"1\":{\"1822\":1}}],[\"servlet的生命周期\",{\"0\":{\"1821\":1}}],[\"servlet的继承结构\",{\"0\":{\"1816\":1}}],[\"servlet的简称\",{\"1\":{\"1548\":1}}],[\"servlet可以在mvc模式中\",{\"1\":{\"1786\":1}}],[\"servlet可以响应任何类型的请求\",{\"1\":{\"1548\":2}}],[\"servlet是jsp的技术基础\",{\"1\":{\"1927\":1}}],[\"servlet是前后端衔接的一种技术\",{\"1\":{\"1786\":1}}],[\"servlet是可以接受http请求并作出相应的一种技术\",{\"1\":{\"1786\":1}}],[\"servlet是server\",{\"1\":{\"1782\":1}}],[\"servlet在程序中地位\",{\"0\":{\"1786\":1}}],[\"servlet在应用程序中的位置\",{\"0\":{\"1784\":1}}],[\"servlet使用单进程多线程方式运行\",{\"1\":{\"1783\":1}}],[\"servlet技术特点\",{\"0\":{\"1783\":1}}],[\"servlet主要功能在于能在服务器中执行并生成数据\",{\"1\":{\"1782\":1}}],[\"servlet简介\",{\"0\":{\"1782\":1}}],[\"servlet理解为后者\",{\"1\":{\"1548\":1}}],[\"servlets这样的多客户多线程的应用中\",{\"1\":{\"1287\":1}}],[\"servlet容器会提供相关api\",{\"1\":{\"691\":1}}],[\"servlet3<\",{\"1\":{\"1834\":1}}],[\"servlet3\",{\"0\":{\"546\":1},\"1\":{\"1799\":1,\"1800\":1,\"1801\":1,\"1834\":1,\"1844\":2,\"1864\":3,\"1892\":1}}],[\"servlet>\",{\"1\":{\"545\":1,\"1791\":1,\"1795\":1,\"1831\":2,\"1834\":4,\"1999\":2,\"2759\":1,\"2910\":1}}],[\"servletreuqest\",{\"1\":{\"1820\":1}}],[\"servletresponse\",{\"1\":{\"545\":2,\"546\":3,\"1789\":1,\"1794\":1,\"1819\":1,\"1820\":1,\"1998\":4,\"2001\":4,\"2047\":6,\"2052\":6,\"2057\":3,\"2063\":3}}],[\"servletrequestattributeevent\",{\"1\":{\"2077\":3}}],[\"servletrequestattributelistener\",{\"1\":{\"2077\":1}}],[\"servletrequestevent\",{\"1\":{\"2076\":2,\"2087\":2}}],[\"servletrequestlistenerservlerequestattributelistener\",{\"1\":{\"2075\":1}}],[\"servletrequestlistener\",{\"0\":{\"2076\":1},\"1\":{\"2071\":1,\"2076\":1,\"2087\":1}}],[\"servletrequest对象监听器\",{\"1\":{\"2068\":1}}],[\"servletrequest\",{\"1\":{\"545\":2,\"546\":3,\"1789\":1,\"1794\":1,\"1998\":3,\"2001\":3,\"2047\":6,\"2052\":6,\"2057\":4,\"2063\":3,\"2076\":4,\"2077\":6}}],[\"servletexception\",{\"1\":{\"545\":2,\"546\":3,\"1789\":1,\"1790\":2,\"1794\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1825\":2,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":2,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":1,\"1997\":2,\"1998\":2,\"2001\":2,\"2047\":4,\"2049\":1,\"2052\":4,\"2056\":1,\"2057\":2,\"2062\":1,\"2063\":2,\"2075\":1,\"2088\":1,\"2095\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2749\":1,\"2863\":1,\"2864\":1}}],[\"servletconfig对象对应web\",{\"1\":{\"1832\":1}}],[\"servletconfig对象\",{\"0\":{\"1832\":1}}],[\"servletconfig接口\",{\"0\":{\"1818\":1}}],[\"servletconfig是容器向servlet传递参数的载体\",{\"1\":{\"1817\":1}}],[\"servletconfig\",{\"1\":{\"545\":3,\"546\":3,\"1818\":1,\"1834\":8,\"1971\":1}}],[\"servletcontext修改了数据\",{\"1\":{\"2085\":1}}],[\"servletcontext删除了数据\",{\"1\":{\"2085\":1}}],[\"servletcontext增加了数据\",{\"1\":{\"2085\":1}}],[\"servletcontextattributeevent\",{\"1\":{\"2085\":3}}],[\"servletcontextattributelistener\",{\"0\":{\"2085\":1},\"1\":{\"2073\":1,\"2085\":1}}],[\"servletcontext销毁了\",{\"1\":{\"2084\":1}}],[\"servletcontext创建并初始化了\",{\"1\":{\"2084\":1}}],[\"servletcontextevent\",{\"1\":{\"2084\":2}}],[\"servletcontextlistenerservletcontextattributelistener\",{\"1\":{\"2083\":1}}],[\"servletcontextlistener\",{\"0\":{\"2084\":1},\"1\":{\"2073\":1,\"2084\":1}}],[\"servletcontext2\",{\"1\":{\"1831\":2}}],[\"servletcontext1\",{\"1\":{\"1831\":11}}],[\"servletcontext官方叫servlet上下文\",{\"1\":{\"1828\":1}}],[\"servletcontext对象监听器\",{\"1\":{\"2068\":1}}],[\"servletcontext对象的生命周期非常长\",{\"1\":{\"1830\":1}}],[\"servletcontext对象\",{\"0\":{\"1828\":1},\"1\":{\"2926\":1}}],[\"servletcontext和servlectconfig\",{\"0\":{\"1827\":1},\"1\":{\"210\":1}}],[\"servletcontextvalue\",{\"1\":{\"132\":2}}],[\"servletcontextkey\",{\"1\":{\"132\":2}}],[\"servletcontext\",{\"0\":{\"132\":1,\"2924\":1},\"1\":{\"132\":3,\"1831\":7,\"1878\":3,\"1925\":2,\"1972\":1,\"2048\":1,\"2088\":2,\"2926\":1}}],[\"servletdemo01\",{\"1\":{\"135\":1}}],[\"servlet代码\",{\"0\":{\"2115\":1},\"1\":{\"132\":1,\"147\":1,\"1972\":1,\"1976\":1,\"2088\":1}}],[\"servlet\",{\"0\":{\"210\":1,\"2990\":1,\"3126\":1,\"3127\":2,\"3130\":1},\"1\":{\"12\":1,\"545\":7,\"546\":1,\"691\":1,\"1548\":1,\"1552\":1,\"1732\":1,\"1791\":5,\"1795\":5,\"1831\":8,\"1834\":12,\"1838\":2,\"1839\":2,\"1840\":2,\"1841\":2,\"1842\":2,\"1844\":8,\"1846\":2,\"1847\":4,\"1848\":1,\"1933\":1,\"1994\":1,\"1995\":1,\"1996\":1,\"1999\":12,\"2531\":3,\"2748\":4,\"2759\":5,\"2763\":2,\"2765\":1,\"2779\":5,\"2780\":1,\"2789\":1,\"2893\":4,\"2898\":1,\"2901\":1,\"2910\":5}}],[\"serve为例\",{\"1\":{\"1687\":1}}],[\"serve\",{\"1\":{\"1687\":4}}],[\"servername\",{\"1\":{\"2301\":1}}],[\"serverinfo\",{\"1\":{\"1831\":1}}],[\"server选项\",{\"1\":{\"1777\":1}}],[\"server的定义不能使用同一个端口\",{\"1\":{\"1763\":1}}],[\"server的功能比较全面\",{\"1\":{\"919\":1}}],[\"server组件\",{\"0\":{\"1763\":1}}],[\"serverrsapublickeyfile\",{\"1\":{\"1216\":1}}],[\"servertimezone=asia\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"1976\":1,\"2187\":1,\"2278\":1,\"2293\":1,\"2332\":1,\"2374\":1,\"2501\":1,\"2583\":1,\"2666\":1,\"2897\":1}}],[\"server=utf8\",{\"1\":{\"1154\":2}}],[\"server只能在windows系统下运行\",{\"1\":{\"919\":1}}],[\"server可以与windows操作系统紧密继承\",{\"1\":{\"919\":1}}],[\"server是由microsoft开发和推广的关系型数据库\",{\"1\":{\"919\":1}}],[\"serversocket\",{\"1\":{\"509\":5,\"510\":5,\"511\":5,\"512\":7,\"513\":9}}],[\"serversocket对象\",{\"1\":{\"509\":1}}],[\"server\",{\"0\":{\"169\":1,\"201\":1,\"1735\":1,\"1736\":1,\"1752\":1},\"1\":{\"88\":4,\"810\":1,\"910\":1,\"917\":1,\"919\":1,\"922\":4,\"923\":3,\"925\":1,\"1156\":1,\"1548\":2,\"1749\":1,\"1752\":1,\"1775\":1,\"1777\":1,\"1927\":1,\"2011\":1}}],[\"service=\",{\"1\":{\"2799\":1}}],[\"service层代码正常使用就好\",{\"1\":{\"2711\":1}}],[\"serviceimpl<usermapper\",{\"1\":{\"2217\":1}}],[\"serviceimpl\",{\"0\":{\"2217\":1},\"1\":{\"2214\":1}}],[\"service和destory方法\",{\"1\":{\"1933\":1}}],[\"service方法中或者请求转发有效\",{\"1\":{\"1916\":1}}],[\"service方法执行完毕后容器不会销毁这个servlet而是做缓存处理\",{\"1\":{\"1823\":1}}],[\"service方法被调用了\",{\"1\":{\"545\":1,\"546\":1}}],[\"service要包含一个引擎\",{\"1\":{\"1764\":1}}],[\"service主要用于关联一个引擎和与此引擎相关的连接器\",{\"1\":{\"1764\":1}}],[\"service组件\",{\"0\":{\"1764\":1}}],[\"service文件\",{\"1\":{\"1687\":1}}],[\"services\",{\"1\":{\"922\":1}}],[\"service\",{\"0\":{\"3156\":1},\"1\":{\"545\":1,\"546\":1,\"810\":1,\"922\":3,\"923\":1,\"1687\":3,\"1789\":2,\"1790\":1,\"1794\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1817\":1,\"1820\":1,\"1822\":1,\"1825\":2,\"1831\":2,\"1834\":2,\"1856\":4,\"1860\":4,\"1864\":4,\"1874\":1,\"1878\":1,\"1892\":2,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":1,\"1997\":2,\"2056\":1,\"2062\":1,\"2075\":1,\"2088\":1,\"2095\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2179\":2,\"2213\":1,\"2214\":2,\"2217\":1,\"2587\":1,\"2588\":3,\"2592\":1,\"2595\":1,\"2635\":1,\"2667\":1,\"2676\":1,\"2697\":1,\"2702\":2,\"2707\":1,\"2710\":1,\"2711\":1,\"2749\":1,\"2780\":1,\"2903\":1,\"2905\":1,\"2917\":1}}],[\"serializable\",{\"0\":{\"2723\":1},\"1\":{\"294\":1,\"364\":1,\"428\":2,\"511\":2,\"512\":1,\"513\":1,\"1112\":1,\"1226\":1,\"1241\":1,\"1264\":1,\"1911\":1,\"1972\":1,\"1976\":1,\"2061\":1,\"2093\":1,\"2097\":1,\"2276\":1,\"2425\":2,\"2428\":2,\"2431\":2,\"2435\":2,\"2667\":1,\"2693\":2,\"2697\":1,\"2796\":1,\"2800\":2,\"2801\":2,\"2915\":1}}],[\"serialized\",{\"1\":{\"208\":2}}],[\"serialversionuid\",{\"1\":{\"36\":2,\"428\":1,\"511\":1,\"512\":1,\"513\":1}}],[\"series\",{\"1\":{\"62\":1,\"65\":2}}],[\"sce\",{\"1\":{\"2084\":2}}],[\"scelerisque\",{\"1\":{\"1609\":2}}],[\"scrollby\",{\"1\":{\"1452\":1}}],[\"scrollto\",{\"1\":{\"1452\":2}}],[\"scroll\",{\"1\":{\"1452\":1}}],[\"screen代表屏幕\",{\"1\":{\"1464\":1}}],[\"screen对象和navigator对象\",{\"0\":{\"1464\":1}}],[\"screeny\",{\"1\":{\"1451\":1}}],[\"screenx\",{\"1\":{\"1451\":1}}],[\"screentop\",{\"1\":{\"1451\":1}}],[\"screenleft\",{\"1\":{\"1451\":1}}],[\"screen\",{\"1\":{\"1451\":3,\"1464\":2,\"1834\":1}}],[\"scriptcharset\",{\"0\":{\"2154\":1},\"1\":{\"2155\":1}}],[\"script角色\",{\"1\":{\"1759\":1}}],[\"scriptlet\",{\"1\":{\"1548\":1}}],[\"script标签一点用于引入外部js文件\",{\"1\":{\"1380\":1}}],[\"script\",{\"0\":{\"2979\":1,\"3093\":1},\"1\":{\"810\":1,\"1376\":1,\"1403\":1,\"1759\":4,\"2141\":1,\"2154\":1,\"2155\":1,\"2161\":1,\"2165\":1}}],[\"scripts\",{\"1\":{\"114\":1,\"1687\":1}}],[\"script>\",{\"1\":{\"65\":2,\"74\":1,\"78\":1,\"1361\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":3,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1544\":1,\"1545\":2,\"1548\":2,\"1549\":2,\"1552\":2,\"1555\":2,\"1563\":3,\"1564\":3,\"1567\":2,\"1568\":2,\"1570\":2,\"1571\":2,\"1572\":2,\"1573\":2,\"1574\":2,\"1579\":2,\"1585\":2,\"1586\":2,\"1588\":2,\"1589\":2,\"1590\":2,\"1591\":2,\"1596\":3,\"1602\":3,\"1606\":3,\"1609\":3,\"1613\":1,\"1614\":2,\"1616\":2,\"1617\":2,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1656\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1691\":1,\"1695\":2,\"1698\":2,\"1701\":2,\"1704\":2,\"1707\":1,\"1708\":1,\"1711\":2,\"1712\":2,\"1713\":2,\"1715\":2,\"1952\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2131\":2,\"2132\":4,\"2155\":1,\"2159\":2,\"2166\":2,\"2169\":2,\"2170\":3,\"2171\":2,\"2176\":2,\"2786\":1,\"2877\":2}}],[\"scookie\",{\"1\":{\"2857\":1}}],[\"scott\",{\"1\":{\"1211\":1}}],[\"scopecontroller\",{\"1\":{\"2926\":1,\"2928\":1,\"2929\":1,\"2931\":2}}],[\"scope\",{\"1\":{\"2018\":1,\"2022\":1,\"2029\":1,\"2030\":1,\"2552\":1}}],[\"scope=\",{\"1\":{\"1544\":5,\"1545\":5,\"2018\":4,\"2019\":4,\"2022\":6,\"2554\":2}}],[\"scope>\",{\"1\":{\"680\":1,\"683\":1,\"685\":1,\"688\":1,\"2186\":1,\"2267\":2,\"2374\":2,\"2538\":1,\"2629\":1,\"2665\":1,\"2748\":2,\"2756\":2,\"2891\":1}}],[\"scope标签决定了当前依赖的生效范围\",{\"1\":{\"680\":1,\"688\":1}}],[\"score1\",{\"1\":{\"588\":2}}],[\"score\",{\"1\":{\"576\":1,\"588\":4,\"940\":2,\"2022\":13,\"2023\":7}}],[\"schema\",{\"1\":{\"982\":1,\"2542\":3,\"2546\":3,\"2553\":3,\"2554\":3,\"2555\":3,\"2559\":5,\"2566\":5,\"2567\":8,\"2584\":6,\"2588\":24,\"2590\":6,\"2591\":6,\"2592\":6,\"2594\":6,\"2599\":6,\"2630\":9,\"2648\":9,\"2666\":18,\"2758\":21,\"2779\":21,\"2780\":24,\"2789\":24,\"2898\":24,\"2899\":24,\"2903\":24,\"2904\":24}}],[\"schemalocation=\",{\"1\":{\"545\":1,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2267\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2746\":1,\"2748\":1,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2885\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"schoolname\",{\"1\":{\"142\":1}}],[\"schoollist\",{\"1\":{\"142\":1}}],[\"scan>\",{\"1\":{\"2588\":2,\"2592\":2,\"2898\":1,\"2900\":1,\"2903\":1,\"2905\":1}}],[\"scan\",{\"1\":{\"2588\":3,\"2590\":1,\"2591\":1,\"2592\":2,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2900\":1,\"2903\":1,\"2905\":1}}],[\"scanner扫描器\",{\"0\":{\"422\":1},\"1\":{\"422\":1}}],[\"scanner\",{\"1\":{\"16\":2,\"17\":2,\"19\":2,\"21\":2,\"24\":2,\"27\":2,\"32\":2,\"376\":4,\"422\":9,\"511\":5,\"512\":5,\"513\":5,\"518\":10,\"1242\":6,\"1252\":6}}],[\"scae\",{\"1\":{\"2085\":3}}],[\"scale=1\",{\"1\":{\"76\":1,\"1690\":1}}],[\"sc\",{\"1\":{\"16\":3,\"17\":5,\"19\":3,\"21\":3,\"24\":3,\"27\":3,\"32\":3}}],[\"stereotype\",{\"1\":{\"2588\":2,\"2592\":2}}],[\"stephen\",{\"1\":{\"2508\":1}}],[\"step=\",{\"1\":{\"1347\":1,\"1348\":1,\"2025\":2}}],[\"step\",{\"1\":{\"1347\":1,\"2025\":1}}],[\"stdoutlogger\",{\"1\":{\"2298\":1,\"2300\":1,\"2301\":1}}],[\"stdoutimpl\",{\"1\":{\"2193\":1}}],[\"stdout\",{\"1\":{\"1285\":2,\"2193\":1,\"2308\":5,\"2374\":5,\"2487\":3}}],[\"stdout=org\",{\"1\":{\"1285\":1,\"2308\":1,\"2374\":1}}],[\"stu4\",{\"1\":{\"2166\":1}}],[\"stu4=new\",{\"1\":{\"2166\":1}}],[\"stu3\",{\"1\":{\"2166\":1}}],[\"stu3=new\",{\"1\":{\"2166\":1}}],[\"stu2\",{\"1\":{\"2166\":1}}],[\"stu2=new\",{\"1\":{\"2166\":1}}],[\"stu1\",{\"1\":{\"2166\":1}}],[\"stu1=new\",{\"1\":{\"2166\":1}}],[\"stumgr\",{\"1\":{\"1216\":1}}],[\"stu\",{\"1\":{\"1001\":5}}],[\"studenobj\",{\"1\":{\"1713\":1}}],[\"studentage\",{\"1\":{\"1713\":2}}],[\"student数据库表中插入数据\",{\"1\":{\"972\":1}}],[\"student4\",{\"1\":{\"956\":1}}],[\"student3\",{\"1\":{\"956\":1}}],[\"student一致\",{\"1\":{\"956\":1}}],[\"student`\",{\"1\":{\"937\":1,\"965\":1}}],[\"studentop2\",{\"1\":{\"854\":2}}],[\"studentop1\",{\"1\":{\"854\":2}}],[\"student>\",{\"1\":{\"594\":1}}],[\"studentclass\",{\"1\":{\"585\":6,\"588\":7,\"591\":8,\"594\":5}}],[\"student2\",{\"1\":{\"287\":8,\"854\":3,\"956\":1}}],[\"student1\",{\"1\":{\"287\":7,\"854\":3,\"880\":1,\"2566\":2,\"2567\":2}}],[\"studentstream\",{\"1\":{\"873\":3,\"876\":2}}],[\"students\",{\"1\":{\"247\":2,\"248\":2,\"278\":7,\"281\":7,\"287\":27}}],[\"studentname\",{\"1\":{\"142\":1,\"1713\":2}}],[\"student\",{\"1\":{\"142\":4,\"247\":1,\"248\":1,\"274\":8,\"275\":9,\"278\":7,\"281\":12,\"352\":8,\"428\":8,\"538\":2,\"541\":1,\"542\":1,\"576\":4,\"585\":1,\"588\":1,\"591\":5,\"594\":1,\"854\":14,\"869\":3,\"873\":4,\"876\":6,\"880\":26,\"881\":26,\"882\":8,\"883\":15,\"937\":4,\"955\":1,\"956\":4,\"965\":1,\"972\":7,\"973\":7,\"988\":5,\"994\":5,\"1001\":6,\"1630\":2,\"1713\":2,\"2166\":8,\"2565\":1,\"2566\":9,\"2567\":5,\"2609\":2}}],[\"studay\",{\"1\":{\"1545\":1}}],[\"study\",{\"1\":{\"542\":1}}],[\"stored\",{\"0\":{\"1145\":1},\"1\":{\"1145\":1}}],[\"storage\",{\"1\":{\"923\":1}}],[\"stop=\",{\"1\":{\"1658\":1}}],[\"stop修饰符的作用就是阻止事件的一个冒泡\",{\"1\":{\"1658\":2}}],[\"stop修饰符\",{\"0\":{\"1658\":1}}],[\"stoptimeout\",{\"1\":{\"1459\":2}}],[\"stopinterval\",{\"1\":{\"1458\":2}}],[\"stop\",{\"0\":{\"461\":1},\"1\":{\"461\":2,\"811\":1,\"928\":1,\"1155\":1,\"1452\":1}}],[\"stylesheet\",{\"1\":{\"1472\":1,\"1563\":1,\"1564\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"2786\":1}}],[\"style><\",{\"1\":{\"1927\":1}}],[\"style>\",{\"1\":{\"1433\":1,\"1471\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1528\":1,\"1529\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1638\":1,\"1650\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1704\":1,\"1707\":1,\"1708\":1,\"1711\":2,\"1712\":2,\"1713\":2,\"1715\":2,\"1928\":1,\"1952\":1,\"1976\":1,\"2025\":1,\"2031\":1}}],[\"style样式\",{\"0\":{\"1188\":1}}],[\"style\",{\"0\":{\"1496\":1},\"1\":{\"115\":4,\"208\":1,\"1317\":1,\"1466\":1,\"1496\":4,\"1497\":1,\"1568\":2,\"2785\":1,\"2786\":1}}],[\"style=\",{\"1\":{\"65\":3,\"1188\":1,\"1317\":1,\"1341\":2,\"1470\":1,\"1482\":1,\"1521\":16,\"1523\":4,\"1524\":4,\"1525\":5,\"1532\":1,\"1533\":4,\"1534\":4,\"1571\":4,\"1579\":3,\"1586\":3,\"1596\":2,\"1602\":6,\"1606\":4,\"1650\":1,\"1698\":1,\"1793\":1,\"2114\":1,\"2131\":1,\"2159\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"stale\",{\"1\":{\"1392\":4}}],[\"standalone\",{\"1\":{\"922\":1}}],[\"standarded\",{\"1\":{\"2011\":1}}],[\"standardization\",{\"1\":{\"930\":1}}],[\"standards\",{\"1\":{\"930\":1}}],[\"standardcharsets\",{\"1\":{\"515\":1,\"516\":1,\"517\":1,\"518\":1}}],[\"standard\",{\"1\":{\"374\":1}}],[\"staged\",{\"1\":{\"734\":1}}],[\"stage\",{\"1\":{\"728\":1}}],[\"starter<\",{\"1\":{\"2186\":1}}],[\"starter\",{\"1\":{\"2186\":3}}],[\"started\",{\"1\":{\"65\":1,\"1561\":1}}],[\"startinterval\",{\"1\":{\"1458\":2}}],[\"starting\",{\"1\":{\"922\":1}}],[\"start=\",{\"1\":{\"1317\":1,\"1318\":1}}],[\"startup>\",{\"1\":{\"2910\":1}}],[\"startup>1<\",{\"1\":{\"2910\":1}}],[\"startup配置启动顺序\",{\"1\":{\"1825\":1}}],[\"startup里确认要部署的项目是不是我们要运行的项目\",{\"1\":{\"1777\":1}}],[\"startup\",{\"1\":{\"922\":1}}],[\"startswith\",{\"1\":{\"856\":2,\"864\":1,\"876\":1,\"1405\":1}}],[\"start\",{\"1\":{\"309\":3,\"327\":2,\"348\":3,\"349\":3,\"438\":1,\"440\":1,\"441\":1,\"442\":3,\"445\":1,\"446\":3,\"449\":1,\"450\":1,\"456\":1,\"457\":2,\"458\":1,\"460\":1,\"489\":2,\"490\":2,\"513\":1,\"810\":1,\"811\":1,\"888\":3,\"891\":1,\"922\":2,\"936\":1,\"979\":2,\"1106\":1,\"1155\":1,\"1317\":1,\"1318\":1}}],[\"starttimeout\",{\"1\":{\"1459\":2}}],[\"starttime\",{\"1\":{\"309\":6,\"371\":2}}],[\"stacktraceclass=\",{\"1\":{\"2301\":1}}],[\"stacktrace=true\",{\"1\":{\"2301\":1}}],[\"stacktrace=false\",{\"1\":{\"2301\":1}}],[\"stack<>\",{\"1\":{\"303\":1}}],[\"stack<string>\",{\"1\":{\"303\":1}}],[\"stackstr\",{\"1\":{\"303\":9}}],[\"stack是vector的子类\",{\"1\":{\"303\":2}}],[\"stack\",{\"0\":{\"303\":1}}],[\"state\",{\"1\":{\"2823\":1}}],[\"statementhandler\",{\"0\":{\"2515\":1}}],[\"statementtype\",{\"1\":{\"2493\":1}}],[\"statement对象\",{\"1\":{\"1257\":1}}],[\"statement接口\",{\"0\":{\"1257\":1}}],[\"statement接口和preparedstatement接口\",{\"1\":{\"1206\":1}}],[\"statement不同的是并不会自动关闭resultset对象\",{\"1\":{\"1250\":1}}],[\"statement和preparedstatment的关系和区别\",{\"0\":{\"1248\":1}}],[\"statement语句对象实现批处理有如下问题\",{\"1\":{\"1230\":1}}],[\"statement\",{\"1\":{\"1210\":1,\"1215\":6,\"1217\":6,\"1219\":6,\"1220\":6,\"1221\":6,\"1222\":6,\"1223\":1,\"1227\":6,\"1242\":6,\"1248\":1,\"1255\":2,\"1257\":2,\"1258\":1,\"2301\":1,\"2493\":1,\"2517\":1}}],[\"statment\",{\"1\":{\"1215\":1}}],[\"status=\",{\"1\":{\"2312\":1,\"2757\":1,\"2896\":1}}],[\"status==200\",{\"1\":{\"2114\":1,\"2120\":1,\"2128\":1}}],[\"status角色\",{\"1\":{\"1759\":1}}],[\"statuson\",{\"1\":{\"734\":1}}],[\"status\",{\"1\":{\"147\":3,\"731\":1,\"734\":1,\"737\":1,\"1156\":1,\"1451\":1,\"1759\":3}}],[\"staticmethodname\",{\"1\":{\"827\":1}}],[\"static``\",{\"1\":{\"470\":1}}],[\"static\",{\"0\":{\"1532\":1},\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"30\":2,\"32\":2,\"36\":2,\"219\":1,\"220\":1,\"234\":2,\"238\":1,\"239\":2,\"240\":4,\"241\":3,\"242\":1,\"244\":2,\"245\":1,\"247\":1,\"248\":1,\"251\":1,\"260\":1,\"262\":1,\"263\":1,\"265\":1,\"266\":1,\"274\":1,\"275\":1,\"278\":2,\"279\":2,\"281\":1,\"283\":1,\"286\":1,\"287\":3,\"288\":1,\"292\":1,\"294\":3,\"300\":1,\"303\":1,\"305\":1,\"306\":1,\"309\":1,\"315\":1,\"318\":1,\"327\":1,\"338\":1,\"348\":1,\"349\":1,\"352\":1,\"356\":1,\"357\":1,\"363\":1,\"364\":7,\"367\":1,\"368\":3,\"371\":2,\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"379\":1,\"380\":1,\"382\":1,\"387\":1,\"390\":1,\"392\":1,\"395\":1,\"396\":1,\"405\":1,\"408\":1,\"409\":1,\"412\":1,\"415\":1,\"418\":1,\"421\":1,\"422\":2,\"425\":1,\"428\":2,\"431\":1,\"438\":1,\"440\":1,\"441\":1,\"442\":2,\"445\":1,\"446\":2,\"450\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"461\":1,\"471\":2,\"489\":1,\"490\":1,\"503\":1,\"506\":1,\"509\":2,\"510\":2,\"511\":3,\"512\":3,\"513\":3,\"515\":2,\"516\":2,\"517\":2,\"518\":2,\"543\":1,\"560\":5,\"561\":1,\"562\":1,\"563\":1,\"564\":1,\"568\":6,\"575\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"585\":1,\"588\":1,\"591\":1,\"594\":1,\"816\":1,\"817\":1,\"820\":3,\"825\":3,\"826\":3,\"828\":1,\"829\":1,\"830\":1,\"831\":1,\"832\":1,\"835\":2,\"837\":2,\"839\":2,\"840\":2,\"841\":1,\"842\":2,\"843\":2,\"844\":2,\"845\":1,\"846\":1,\"847\":2,\"848\":2,\"856\":2,\"859\":2,\"860\":1,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":1,\"868\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":3,\"874\":1,\"875\":2,\"876\":1,\"888\":1,\"904\":1,\"1215\":1,\"1217\":5,\"1219\":6,\"1220\":6,\"1221\":6,\"1222\":6,\"1227\":6,\"1231\":6,\"1234\":6,\"1235\":6,\"1242\":6,\"1252\":6,\"1253\":9,\"1256\":3,\"1264\":5,\"1266\":4,\"1274\":11,\"1280\":11,\"1286\":1,\"1288\":12,\"1304\":1,\"1532\":1,\"1609\":3,\"2060\":2,\"2063\":1,\"2282\":1,\"2293\":1,\"2374\":1,\"2605\":2,\"2609\":1,\"2612\":1,\"2615\":1,\"2790\":3,\"2877\":1,\"2898\":2,\"2902\":2}}],[\"struts\",{\"1\":{\"2531\":3,\"2740\":1}}],[\"structure\",{\"1\":{\"2269\":1}}],[\"structured\",{\"1\":{\"930\":1}}],[\"street\",{\"1\":{\"2509\":2}}],[\"stream并行处理的过程会分而治之\",{\"1\":{\"888\":1}}],[\"stream结果收集到集合中\",{\"1\":{\"878\":1,\"879\":1}}],[\"stream结果收集\",{\"0\":{\"877\":1}}],[\"streamsupport\",{\"1\":{\"875\":1}}],[\"streams\",{\"1\":{\"875\":2}}],[\"stream不调用终结方法\",{\"1\":{\"861\":1}}],[\"stream方法返回的是新的流\",{\"1\":{\"861\":1}}],[\"stream只能操作一次\",{\"1\":{\"861\":1}}],[\"stream注意事项\",{\"1\":{\"861\":1}}],[\"stream5\",{\"1\":{\"859\":1}}],[\"stream4\",{\"1\":{\"859\":1}}],[\"stream3\",{\"1\":{\"859\":1,\"860\":3}}],[\"stream2\",{\"1\":{\"859\":1,\"860\":2,\"875\":2}}],[\"stream1\",{\"1\":{\"859\":1,\"860\":2,\"873\":2,\"875\":2}}],[\"stream<\",{\"1\":{\"875\":2}}],[\"stream<student>\",{\"1\":{\"873\":1,\"876\":1}}],[\"stream<string>\",{\"1\":{\"845\":1,\"859\":5,\"860\":2,\"871\":2,\"873\":1,\"875\":3,\"876\":3}}],[\"stream<r>\",{\"1\":{\"867\":1}}],[\"stream<t>\",{\"1\":{\"864\":1,\"865\":1,\"866\":1,\"868\":2,\"869\":1,\"875\":2}}],[\"stream<integer>\",{\"1\":{\"872\":2,\"886\":2,\"887\":1}}],[\"stream<int\",{\"1\":{\"860\":1}}],[\"stream<map\",{\"1\":{\"859\":1}}],[\"stream<e>\",{\"1\":{\"859\":1}}],[\"stream流数据聚合计算\",{\"1\":{\"880\":1}}],[\"stream流中的distinct方法对于基本数据类型是可以直接去重的\",{\"1\":{\"869\":1}}],[\"stream流中的count方法\",{\"1\":{\"863\":1}}],[\"stream流中的常用方法\",{\"0\":{\"861\":1}}],[\"stream流模型的操作很丰富\",{\"1\":{\"861\":1}}],[\"stream流的获取方式\",{\"0\":{\"858\":1}}],[\"stream流不是一种数据结构\",{\"1\":{\"857\":1}}],[\"stream流和io流是没有任何关系的\",{\"1\":{\"857\":1}}],[\"stream流式编程思想类似于工厂车间的生产流水线\",{\"1\":{\"857\":1}}],[\"stream流式编程思想\",{\"0\":{\"857\":1}}],[\"stream更加优雅的解决方案\",{\"1\":{\"856\":1}}],[\"stream\",{\"0\":{\"3059\":1},\"1\":{\"167\":1,\"208\":1,\"251\":1,\"431\":1,\"585\":2,\"588\":2,\"591\":6,\"594\":3,\"835\":1,\"837\":1,\"845\":4,\"856\":2,\"857\":1,\"859\":8,\"860\":4,\"861\":5,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":2,\"868\":2,\"869\":2,\"870\":3,\"871\":2,\"872\":2,\"873\":5,\"874\":2,\"875\":6,\"876\":3,\"878\":3,\"879\":2,\"880\":6,\"881\":3,\"882\":1,\"883\":3,\"885\":1,\"886\":1,\"887\":1,\"2282\":1,\"2348\":1,\"2357\":1,\"2359\":1,\"2379\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2406\":1,\"2407\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2444\":2,\"2447\":2,\"2450\":3,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2503\":1}}],[\"streamapi\",{\"0\":{\"855\":1},\"1\":{\"51\":1}}],[\"strmessage\",{\"1\":{\"1893\":5}}],[\"strong>\",{\"1\":{\"1187\":1,\"1690\":1}}],[\"strcmp\",{\"1\":{\"1091\":1}}],[\"strap开发案例\",{\"0\":{\"3111\":1}}],[\"strap容器与栅格系统\",{\"0\":{\"3110\":1}}],[\"strap\",{\"0\":{\"2983\":1,\"3106\":1}}],[\"strategyconfig\",{\"1\":{\"2293\":1}}],[\"strat\",{\"1\":{\"444\":1}}],[\"strarray2\",{\"1\":{\"581\":2}}],[\"strarray1\",{\"1\":{\"581\":2}}],[\"strarr\",{\"1\":{\"242\":2}}],[\"str=sb3\",{\"1\":{\"395\":1,\"396\":1}}],[\"str+\",{\"1\":{\"76\":1}}],[\"str\",{\"1\":{\"76\":2,\"114\":2,\"395\":1,\"396\":1,\"405\":2,\"407\":3,\"408\":2,\"409\":2,\"415\":4,\"422\":4,\"431\":2,\"502\":1,\"515\":2,\"516\":4,\"517\":4,\"518\":4,\"568\":8,\"588\":2,\"591\":10,\"840\":7,\"1088\":1,\"1091\":4,\"1093\":4,\"1095\":2,\"1406\":1,\"1458\":2,\"1459\":2,\"2128\":3}}],[\"stringtodateconverter\",{\"1\":{\"2799\":2}}],[\"string直接转发到指定页面\",{\"1\":{\"2761\":1}}],[\"stringutils\",{\"1\":{\"2260\":4}}],[\"stringify\",{\"1\":{\"2126\":2}}],[\"stringintegerhashtable\",{\"1\":{\"309\":2}}],[\"stringintegerhashmap\",{\"1\":{\"309\":2}}],[\"stringintegermap\",{\"1\":{\"309\":2}}],[\"string对象\",{\"0\":{\"1404\":1},\"1\":{\"1403\":1}}],[\"string由0个\",{\"1\":{\"1355\":1}}],[\"stringgetstring\",{\"1\":{\"1259\":1}}],[\"string=password\",{\"1\":{\"1155\":2}}],[\"string>>\",{\"1\":{\"859\":2}}],[\"string>\",{\"1\":{\"830\":1,\"831\":1,\"845\":2,\"859\":1,\"2356\":1,\"2565\":1}}],[\"stringbulider的扩容是\",{\"1\":{\"392\":1}}],[\"stringbuffer类则代表一个字符序列可变的字符串\",{\"1\":{\"397\":1}}],[\"stringbuffer常用方法\",{\"0\":{\"396\":1}}],[\"stringbuffer\",{\"1\":{\"392\":1,\"396\":2,\"397\":1}}],[\"stringbuilder与stringbuffer的区别\",{\"0\":{\"397\":1}}],[\"stringbuilder与stringbuffer类\",{\"0\":{\"391\":1},\"1\":{\"38\":1,\"391\":1}}],[\"stringbuilder常用方法\",{\"0\":{\"395\":1}}],[\"stringbuilder底层中\",{\"1\":{\"392\":1}}],[\"stringbuilder\",{\"1\":{\"392\":8,\"395\":6,\"396\":6,\"397\":1,\"1927\":2,\"1928\":2}}],[\"stringbuilder的底层\",{\"0\":{\"392\":1}}],[\"string的格式必须是\",{\"1\":{\"373\":1}}],[\"string转int\",{\"1\":{\"364\":1}}],[\"stringhash32\",{\"1\":{\"294\":1}}],[\"stringstream2\",{\"1\":{\"871\":2}}],[\"stringstream1\",{\"1\":{\"871\":2}}],[\"stringstringhashmap\",{\"1\":{\"859\":4}}],[\"strings3\",{\"1\":{\"859\":2}}],[\"strings2\",{\"1\":{\"859\":2}}],[\"strings1\",{\"1\":{\"859\":2}}],[\"strings\",{\"1\":{\"142\":1,\"286\":7,\"859\":2,\"879\":2}}],[\"string类实现了comparable\",{\"1\":{\"431\":1}}],[\"string类是不可变类\",{\"1\":{\"397\":1}}],[\"string类型中有一个compareto方法\",{\"1\":{\"272\":1}}],[\"string类\",{\"0\":{\"429\":1,\"3022\":1},\"1\":{\"38\":1}}],[\"string\",{\"0\":{\"3019\":2},\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"30\":2,\"32\":1,\"36\":2,\"219\":1,\"220\":1,\"234\":2,\"238\":4,\"239\":2,\"240\":3,\"241\":1,\"242\":5,\"244\":2,\"245\":1,\"247\":1,\"248\":1,\"251\":1,\"260\":1,\"262\":2,\"265\":1,\"266\":1,\"272\":2,\"274\":6,\"275\":6,\"278\":5,\"279\":1,\"281\":4,\"283\":1,\"286\":1,\"287\":18,\"288\":5,\"292\":2,\"294\":2,\"300\":2,\"303\":1,\"305\":1,\"306\":1,\"309\":1,\"315\":1,\"318\":1,\"327\":1,\"352\":6,\"356\":10,\"357\":1,\"364\":8,\"367\":1,\"368\":1,\"371\":1,\"372\":2,\"373\":4,\"374\":4,\"375\":2,\"376\":2,\"379\":1,\"380\":7,\"382\":1,\"386\":5,\"387\":1,\"389\":7,\"390\":3,\"392\":1,\"395\":2,\"396\":2,\"404\":1,\"405\":3,\"407\":2,\"408\":2,\"409\":3,\"412\":1,\"415\":2,\"418\":1,\"421\":1,\"422\":3,\"425\":1,\"428\":6,\"431\":13,\"434\":5,\"438\":1,\"440\":1,\"441\":2,\"442\":2,\"445\":1,\"446\":1,\"450\":1,\"456\":1,\"457\":1,\"458\":2,\"459\":1,\"460\":1,\"461\":1,\"471\":1,\"489\":11,\"490\":11,\"502\":1,\"503\":1,\"506\":1,\"509\":3,\"510\":4,\"511\":13,\"512\":13,\"513\":13,\"515\":5,\"516\":8,\"517\":8,\"518\":8,\"543\":1,\"545\":1,\"546\":1,\"560\":8,\"561\":8,\"562\":1,\"563\":1,\"564\":2,\"568\":6,\"575\":2,\"576\":2,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":5,\"585\":1,\"587\":3,\"588\":2,\"590\":3,\"591\":1,\"594\":1,\"816\":1,\"817\":3,\"820\":2,\"825\":1,\"826\":1,\"827\":1,\"828\":1,\"829\":1,\"830\":4,\"831\":4,\"832\":5,\"835\":1,\"837\":1,\"839\":1,\"840\":2,\"842\":1,\"843\":1,\"844\":1,\"845\":1,\"847\":2,\"848\":2,\"850\":3,\"853\":4,\"854\":5,\"856\":4,\"859\":2,\"860\":2,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":1,\"868\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":3,\"874\":1,\"875\":1,\"876\":1,\"879\":2,\"883\":3,\"897\":2,\"904\":2,\"905\":2,\"1215\":5,\"1217\":6,\"1219\":9,\"1220\":7,\"1221\":9,\"1222\":8,\"1223\":5,\"1226\":9,\"1227\":8,\"1231\":6,\"1234\":6,\"1235\":6,\"1241\":9,\"1242\":12,\"1252\":12,\"1253\":18,\"1255\":3,\"1256\":5,\"1257\":2,\"1259\":4,\"1264\":16,\"1266\":7,\"1267\":3,\"1274\":4,\"1275\":3,\"1279\":3,\"1280\":4,\"1288\":4,\"1304\":1,\"1485\":2,\"1713\":1,\"1790\":1,\"1794\":3,\"1800\":1,\"1801\":4,\"1814\":1,\"1831\":8,\"1849\":5,\"1856\":2,\"1860\":2,\"1864\":2,\"1878\":1,\"1892\":3,\"1893\":1,\"1898\":6,\"1909\":2,\"1911\":2,\"1927\":2,\"1928\":2,\"1972\":2,\"1976\":7,\"2048\":3,\"2049\":2,\"2052\":2,\"2056\":2,\"2057\":1,\"2061\":9,\"2062\":2,\"2063\":1,\"2077\":3,\"2087\":3,\"2093\":2,\"2095\":2,\"2096\":1,\"2115\":2,\"2128\":1,\"2131\":2,\"2159\":2,\"2166\":3,\"2170\":3,\"2171\":3,\"2176\":2,\"2190\":2,\"2224\":2,\"2228\":4,\"2230\":2,\"2234\":2,\"2260\":4,\"2276\":2,\"2293\":1,\"2299\":5,\"2374\":2,\"2406\":2,\"2407\":2,\"2425\":5,\"2428\":4,\"2431\":1,\"2435\":4,\"2459\":1,\"2509\":6,\"2550\":1,\"2552\":4,\"2565\":3,\"2571\":5,\"2574\":2,\"2598\":2,\"2599\":2,\"2605\":6,\"2609\":8,\"2612\":6,\"2615\":2,\"2631\":6,\"2651\":2,\"2652\":1,\"2667\":2,\"2672\":1,\"2673\":2,\"2674\":4,\"2677\":1,\"2678\":1,\"2679\":1,\"2680\":1,\"2697\":2,\"2714\":1,\"2715\":1,\"2716\":1,\"2717\":1,\"2760\":1,\"2764\":1,\"2793\":3,\"2794\":3,\"2796\":6,\"2798\":1,\"2799\":1,\"2800\":3,\"2801\":3,\"2811\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2825\":2,\"2830\":8,\"2851\":2,\"2856\":2,\"2857\":5,\"2866\":1,\"2867\":1,\"2915\":3,\"2916\":3,\"2917\":4,\"2918\":2,\"2926\":1,\"2928\":1,\"2929\":1}}],[\"tful风格\",{\"0\":{\"3182\":1}}],[\"tbody>\",{\"1\":{\"2925\":1}}],[\"t2\",{\"1\":{\"2692\":1}}],[\"t1\",{\"1\":{\"2692\":2}}],[\"td\",{\"1\":{\"1319\":1,\"1927\":1,\"1928\":1,\"1976\":1,\"2025\":1,\"2031\":1}}],[\"td><\",{\"1\":{\"1319\":1}}],[\"td>\",{\"1\":{\"147\":2,\"1319\":9,\"1544\":20,\"1545\":20,\"1555\":17,\"1579\":9,\"1586\":9,\"1630\":5,\"1631\":1,\"1793\":5,\"1927\":1,\"1928\":1,\"1976\":9,\"2025\":14,\"2031\":14,\"2925\":15}}],[\"tvid=9194699400\",{\"1\":{\"1310\":1}}],[\"tls\",{\"1\":{\"1216\":1}}],[\"tx=\",{\"1\":{\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"txspring\",{\"1\":{\"2756\":1}}],[\"txadvice\",{\"1\":{\"2710\":2}}],[\"tx<\",{\"1\":{\"2665\":1,\"2756\":1,\"2890\":1}}],[\"tx\",{\"1\":{\"1113\":1,\"2665\":1,\"2710\":3,\"2758\":4,\"2779\":4,\"2780\":4,\"2789\":4,\"2898\":4,\"2899\":5,\"2903\":5,\"2904\":5,\"2908\":1}}],[\"txt\",{\"1\":{\"228\":1,\"384\":2,\"385\":1,\"386\":3,\"387\":13,\"389\":3,\"401\":1,\"405\":3,\"408\":1,\"409\":2,\"415\":2,\"421\":2,\"422\":2,\"425\":1,\"428\":2,\"2087\":1}}],[\"tt\",{\"1\":{\"1081\":1}}],[\"tn\",{\"1\":{\"1072\":3}}],[\"tp\",{\"1\":{\"1072\":3,\"1073\":2}}],[\"tmp\",{\"1\":{\"772\":1}}],[\"t>\",{\"1\":{\"593\":1,\"838\":1,\"841\":2,\"846\":2,\"862\":1,\"864\":1,\"868\":1,\"870\":3,\"872\":2,\"875\":2,\"905\":1}}],[\"tc\",{\"1\":{\"1072\":6,\"1073\":2}}],[\"tcl用于数据库的事务管理\",{\"1\":{\"936\":1}}],[\"tcl\",{\"0\":{\"936\":1}}],[\"tcl和dcl\",{\"0\":{\"1096\":1},\"1\":{\"52\":1}}],[\"tcp\",{\"0\":{\"496\":1,\"508\":1},\"1\":{\"511\":1}}],[\"turner\",{\"1\":{\"1211\":1}}],[\"turing\",{\"1\":{\"440\":1}}],[\"tues\",{\"1\":{\"1093\":1}}],[\"tuesday\",{\"1\":{\"374\":1,\"375\":2,\"1093\":1,\"2030\":1}}],[\"tue\",{\"1\":{\"374\":1}}],[\"t当前的绝对路径\",{\"1\":{\"390\":1}}],[\"t之类的转义符\",{\"1\":{\"384\":1}}],[\"t六\",{\"1\":{\"376\":1}}],[\"t五\",{\"1\":{\"376\":1}}],[\"t四\",{\"1\":{\"376\":1}}],[\"t三\",{\"1\":{\"376\":1}}],[\"t二\",{\"1\":{\"376\":1}}],[\"t一\",{\"1\":{\"376\":1}}],[\"tg\",{\"1\":{\"241\":5}}],[\"t\",{\"0\":{\"2978\":1,\"2989\":2,\"3069\":1,\"3088\":1,\"3089\":1,\"3091\":1,\"3143\":1},\"1\":{\"241\":2,\"244\":5,\"245\":5,\"251\":4,\"260\":3,\"288\":9,\"292\":6,\"376\":2,\"395\":1,\"396\":1,\"431\":1,\"584\":1,\"617\":1,\"630\":1,\"631\":1,\"632\":1,\"763\":1,\"836\":1,\"838\":6,\"841\":7,\"845\":2,\"846\":10,\"853\":2,\"867\":1,\"873\":3,\"937\":4,\"955\":1,\"956\":6,\"965\":1,\"972\":7,\"973\":7,\"1001\":13,\"1071\":4,\"1072\":5,\"1073\":2,\"1093\":1,\"1094\":1,\"1287\":1,\"1363\":3,\"1364\":1,\"1690\":1,\"2214\":1,\"2224\":1,\"2226\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2243\":1,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":1,\"2257\":1,\"2258\":3,\"2293\":2,\"2312\":2,\"2672\":1,\"2702\":1,\"2757\":1,\"2896\":1}}],[\"t的类型是在调用方法的时候确定的\",{\"1\":{\"241\":1}}],[\"tinytext\",{\"1\":{\"941\":1}}],[\"tinyblob\",{\"1\":{\"941\":1}}],[\"tinyint\",{\"1\":{\"939\":1}}],[\"ticketnum\",{\"1\":{\"465\":3,\"471\":3,\"480\":3}}],[\"ticket>0\",{\"1\":{\"442\":1,\"446\":1}}],[\"ticket\",{\"1\":{\"442\":2,\"446\":2}}],[\"timetoliveseconds=\",{\"1\":{\"2485\":1}}],[\"timetoidleseconds=\",{\"1\":{\"2485\":1}}],[\"time=\",{\"1\":{\"2245\":1,\"2246\":1,\"2250\":1}}],[\"timezone\",{\"1\":{\"2030\":1}}],[\"timearea\",{\"1\":{\"1458\":2,\"1459\":1}}],[\"timediff\",{\"1\":{\"1093\":1}}],[\"time2的时间间隔\",{\"1\":{\"1093\":1}}],[\"time2\",{\"1\":{\"893\":2,\"1093\":1}}],[\"time1\",{\"1\":{\"893\":2,\"1093\":1}}],[\"time包中\",{\"1\":{\"892\":1}}],[\"timestyle\",{\"1\":{\"2030\":1}}],[\"timestemp类型有一个很大的特点\",{\"1\":{\"942\":1}}],[\"timestemp类型还可以使用current\",{\"1\":{\"942\":1}}],[\"timestemp类型的取值范围更小\",{\"1\":{\"942\":1}}],[\"timestemp类型的数据指定方式与datetime基本相同\",{\"1\":{\"942\":1}}],[\"timestamp来获取系统当前时间\",{\"1\":{\"942\":1}}],[\"timestamp\",{\"1\":{\"942\":1,\"1093\":1,\"2289\":1}}],[\"times\",{\"1\":{\"888\":4}}],[\"time→等待的最大时间单位\",{\"1\":{\"479\":1}}],[\"time\",{\"1\":{\"374\":3,\"380\":3,\"479\":1,\"897\":2,\"899\":2,\"942\":1,\"1093\":4,\"1198\":1,\"1928\":1,\"1930\":2,\"2030\":1,\"2240\":2,\"2242\":2,\"2243\":2,\"2244\":2,\"2247\":2,\"2248\":2,\"2301\":1,\"2508\":2}}],[\"timeunit\",{\"1\":{\"324\":1,\"327\":2,\"337\":2,\"349\":3,\"356\":2,\"479\":1}}],[\"timeout属性设置事务的超时时间\",{\"1\":{\"2715\":1}}],[\"timeout属性\",{\"1\":{\"2710\":1}}],[\"timeout>\",{\"1\":{\"1899\":1}}],[\"timeout>1<\",{\"1\":{\"1899\":1}}],[\"timeoutid\",{\"1\":{\"1459\":2}}],[\"timeoutids\",{\"1\":{\"1459\":4}}],[\"timeout\",{\"0\":{\"2137\":1,\"2715\":1},\"1\":{\"324\":1,\"1452\":2,\"2155\":1,\"2715\":1}}],[\"tiff\",{\"1\":{\"208\":2}}],[\"title=\",{\"1\":{\"1309\":1,\"1549\":3}}],[\"title><style>\",{\"1\":{\"1927\":1}}],[\"title>\",{\"1\":{\"76\":1,\"1293\":1,\"1298\":1,\"1299\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1321\":1,\"1322\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1366\":1,\"1367\":1,\"1369\":3,\"1370\":3,\"1379\":1,\"1380\":1,\"1433\":1,\"1436\":1,\"1439\":1,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1482\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":1,\"1515\":2,\"1518\":1,\"1521\":4,\"1523\":1,\"1524\":1,\"1525\":1,\"1528\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1,\"1544\":1,\"1545\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"1613\":1,\"1614\":1,\"1690\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"1928\":1,\"1951\":1,\"1952\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2131\":1,\"2132\":2,\"2159\":2,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2750\":1,\"2786\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":1,\"2857\":1,\"2859\":1,\"2861\":2,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2877\":1,\"2914\":3,\"2925\":1}}],[\"title\",{\"1\":{\"62\":1,\"1198\":1,\"1309\":1,\"1549\":1,\"1643\":2,\"1690\":1,\"1695\":2}}],[\"ta\",{\"1\":{\"1458\":2}}],[\"tanh\",{\"1\":{\"1411\":1}}],[\"tan\",{\"1\":{\"1411\":1}}],[\"taglib指令的语法\",{\"0\":{\"1964\":1}}],[\"taglib指令引入一个自定义标签集合的定义\",{\"1\":{\"1963\":1}}],[\"taglib指令标签\",{\"0\":{\"1963\":1}}],[\"taglib\",{\"1\":{\"1958\":1,\"1964\":1,\"2014\":1,\"2016\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2028\":1,\"2031\":2}}],[\"tags\",{\"1\":{\"1198\":2}}],[\"tag\",{\"1\":{\"1195\":1,\"1548\":1,\"1808\":1,\"2011\":1}}],[\"tasks\",{\"1\":{\"1191\":1}}],[\"task\",{\"1\":{\"845\":2,\"1195\":3,\"1198\":6}}],[\"tar\",{\"1\":{\"772\":1}}],[\"targetmethodexception\",{\"1\":{\"2653\":2}}],[\"targetmethodreturn\",{\"1\":{\"2652\":2}}],[\"targetproject=\",{\"1\":{\"2501\":3}}],[\"targetpackage=\",{\"1\":{\"2501\":3}}],[\"targetruntime=\",{\"1\":{\"2501\":1}}],[\"targetruntime\",{\"1\":{\"2501\":1}}],[\"targetref\",{\"1\":{\"846\":3}}],[\"target>\",{\"1\":{\"2267\":1,\"2374\":1,\"2629\":1,\"2665\":1}}],[\"target>8<\",{\"1\":{\"2267\":1,\"2374\":1,\"2629\":1,\"2665\":1}}],[\"target=\",{\"1\":{\"1312\":3,\"1463\":1,\"1609\":4,\"1870\":6,\"2312\":1,\"2757\":1,\"2896\":1}}],[\"target=system\",{\"1\":{\"1285\":1,\"2308\":1,\"2374\":1}}],[\"target原注解新增了两种类型\",{\"1\":{\"905\":1}}],[\"target也包含一个名为value的成员变量\",{\"1\":{\"554\":1}}],[\"target\",{\"0\":{\"554\":1,\"2624\":1},\"1\":{\"552\":1,\"772\":1,\"905\":2,\"1312\":1}}],[\"takelock\",{\"1\":{\"338\":2}}],[\"takeindex\",{\"1\":{\"328\":5,\"330\":1,\"333\":1}}],[\"take\",{\"1\":{\"324\":1,\"327\":2,\"337\":2,\"348\":3,\"356\":2}}],[\"tablist\",{\"1\":{\"1606\":1}}],[\"tablelogic是用来完成\",{\"1\":{\"2231\":1}}],[\"tablelogic\",{\"0\":{\"2231\":1},\"1\":{\"2234\":1}}],[\"tablefield注解的作用是当实体类中的属性和表结构中的字段名称不一致的情况下来设置对应关系的\",{\"1\":{\"2230\":1}}],[\"tablefield\",{\"0\":{\"2230\":1},\"1\":{\"2230\":1,\"2234\":1}}],[\"tableid中还有一个比较重要的属性是type\",{\"1\":{\"2226\":1}}],[\"tableid中的value我们需要设置表结构中的主键字段\",{\"1\":{\"2226\":1}}],[\"tableid中的value值在实体类中的字段和表结构的字段一致的情况下我们不用添加\",{\"1\":{\"2226\":1}}],[\"tableid即可\",{\"1\":{\"2226\":1}}],[\"tableid注解来显示的指定哪个属性为主键对应的属性\",{\"1\":{\"2226\":1}}],[\"tableid\",{\"0\":{\"2226\":1},\"1\":{\"2228\":2,\"2230\":1,\"2234\":1}}],[\"tablename=\",{\"1\":{\"2501\":1}}],[\"tablename设置为\",{\"1\":{\"2501\":1}}],[\"tablename来解决这个问题\",{\"1\":{\"2224\":1}}],[\"tablename\",{\"0\":{\"2223\":1},\"1\":{\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2334\":2}}],[\"tables\",{\"1\":{\"926\":1,\"963\":1,\"1155\":2}}],[\"table的大小>=min\",{\"1\":{\"280\":1}}],[\"table\",{\"1\":{\"279\":1,\"280\":1,\"294\":12,\"937\":3,\"954\":1,\"955\":1,\"956\":3,\"958\":3,\"959\":1,\"960\":1,\"961\":1,\"962\":1,\"965\":2,\"966\":1,\"967\":1,\"976\":1,\"982\":3,\"987\":3,\"988\":5,\"989\":1,\"993\":1,\"994\":5,\"995\":1,\"999\":1,\"1000\":1,\"1001\":6,\"1006\":1,\"1007\":2,\"1008\":1,\"1011\":1,\"1012\":2,\"1013\":1,\"1016\":1,\"1017\":1,\"1020\":1,\"1021\":1,\"1076\":1,\"1077\":1,\"1078\":1,\"1079\":2,\"1080\":1,\"1081\":1,\"1136\":1,\"1156\":6,\"1171\":1,\"1198\":1,\"1211\":6,\"1239\":1,\"1319\":1,\"1927\":2,\"1928\":2,\"1976\":1,\"2025\":1,\"2031\":1,\"2182\":2,\"2225\":1,\"2244\":2,\"2417\":2,\"2695\":1,\"2881\":1}}],[\"table就是hashmap的一个数组\",{\"1\":{\"279\":1}}],[\"table><\",{\"1\":{\"1927\":1}}],[\"table>\",{\"1\":{\"147\":1,\"1319\":2,\"1544\":1,\"1545\":1,\"1555\":1,\"1579\":1,\"1586\":1,\"1630\":1,\"1631\":1,\"1793\":1,\"1928\":1,\"1976\":1,\"2025\":1,\"2031\":1,\"2925\":1}}],[\"tab\",{\"1\":{\"279\":11,\"1606\":6,\"1665\":1}}],[\"taobao\",{\"1\":{\"93\":2,\"1681\":2}}],[\"tkey\",{\"1\":{\"142\":1}}],[\"tr\",{\"1\":{\"1319\":1,\"1544\":1,\"1545\":3}}],[\"trg\",{\"1\":{\"983\":1}}],[\"trunc\",{\"1\":{\"1411\":1}}],[\"truncate操作则会重新从1开始自增\",{\"1\":{\"976\":1}}],[\"truncate操作则是保留了表的结构\",{\"1\":{\"976\":1}}],[\"truncate操作会导致隐式提交\",{\"1\":{\"976\":1}}],[\"truncate操作的效率更高\",{\"1\":{\"976\":1}}],[\"truncate为数据定义语言ddl\",{\"1\":{\"976\":1}}],[\"truncate\",{\"0\":{\"974\":1,\"976\":1},\"1\":{\"967\":1,\"976\":1,\"1092\":1}}],[\"true|false\",{\"1\":{\"1897\":1}}],[\"true会转变成1\",{\"1\":{\"1362\":1}}],[\"true=\",{\"1\":{\"882\":1}}],[\"true\",{\"1\":{\"65\":1,\"219\":3,\"241\":1,\"263\":1,\"278\":1,\"279\":1,\"281\":1,\"283\":1,\"292\":1,\"305\":1,\"306\":1,\"316\":2,\"348\":3,\"349\":3,\"356\":1,\"364\":2,\"408\":1,\"459\":1,\"460\":1,\"478\":1,\"489\":3,\"490\":3,\"511\":1,\"512\":1,\"513\":2,\"518\":2,\"581\":1,\"847\":1,\"848\":1,\"870\":2,\"882\":1,\"896\":1,\"1155\":1,\"1198\":2,\"1266\":1,\"1274\":1,\"1275\":1,\"1280\":1,\"1288\":1,\"1310\":1,\"1333\":2,\"1362\":1,\"1363\":2,\"1364\":2,\"1384\":1,\"1385\":2,\"1409\":2,\"1412\":2,\"1416\":1,\"1439\":1,\"1579\":4,\"1580\":1,\"1586\":4,\"1609\":2,\"1620\":2,\"1687\":1,\"1713\":2,\"1767\":2,\"1900\":1,\"1960\":1,\"1989\":4,\"2025\":2,\"2029\":2,\"2031\":2,\"2087\":1,\"2112\":1,\"2114\":1,\"2120\":1,\"2128\":1,\"2155\":3,\"2317\":2,\"2334\":1,\"2360\":1,\"2409\":2,\"2434\":2,\"2475\":1,\"2480\":1,\"2481\":2,\"2485\":1,\"2487\":1,\"2501\":4,\"2554\":1,\"2555\":1,\"2588\":1,\"2592\":1,\"2649\":1,\"2714\":1,\"2715\":1,\"2840\":1}}],[\"trimstrings\",{\"1\":{\"2501\":1}}],[\"trim>\",{\"1\":{\"2455\":1,\"2456\":1}}],[\"trim标签一般用于去除sql语句中多余的and关键字\",{\"1\":{\"2454\":1}}],[\"trim标签\",{\"0\":{\"2454\":1}}],[\"trim=\",{\"1\":{\"1677\":1}}],[\"trim修饰符的作用是过滤用户输入的收尾空格\",{\"1\":{\"1677\":1}}],[\"trim\",{\"0\":{\"1677\":1},\"1\":{\"431\":1,\"1090\":1,\"1091\":3,\"1405\":1,\"1674\":1,\"2299\":1}}],[\"treemap\",{\"0\":{\"299\":1},\"1\":{\"288\":1}}],[\"treenode<k\",{\"1\":{\"279\":1}}],[\"treenode\",{\"1\":{\"279\":1}}],[\"treeifybin\",{\"1\":{\"279\":1}}],[\"treeify\",{\"1\":{\"279\":3,\"280\":1}}],[\"treeset底层的二叉树的遍历是按照升序的结果出现的\",{\"1\":{\"288\":1}}],[\"treeset<student2>\",{\"1\":{\"287\":1}}],[\"treeset<student1>\",{\"1\":{\"287\":1}}],[\"treeset<students>\",{\"1\":{\"287\":1}}],[\"treeset<string>\",{\"1\":{\"286\":1}}],[\"treeset<>\",{\"1\":{\"286\":1,\"287\":3}}],[\"treeset\",{\"1\":{\"276\":1,\"287\":1,\"288\":12}}],[\"trailing\",{\"1\":{\"1091\":1}}],[\"trainstation03\",{\"1\":{\"446\":1}}],[\"trainstation01\",{\"1\":{\"446\":2}}],[\"trainstation02\",{\"1\":{\"446\":4}}],[\"trainstation\",{\"1\":{\"442\":8}}],[\"tracked\",{\"1\":{\"734\":1}}],[\"trace\",{\"0\":{\"185\":1}}],[\"transmoney\",{\"1\":{\"2697\":7,\"2702\":6,\"2707\":3,\"2711\":3}}],[\"translation\",{\"1\":{\"1930\":1}}],[\"transactional注解中\",{\"1\":{\"2713\":1}}],[\"transactional注解来管理事务时\",{\"1\":{\"2713\":1}}],[\"transactional注解管理事务\",{\"0\":{\"2705\":1}}],[\"transactional\",{\"1\":{\"2707\":2,\"2714\":1,\"2715\":1,\"2716\":1,\"2717\":1,\"2718\":1,\"2917\":1}}],[\"transactioncallback<t>\",{\"1\":{\"2702\":1}}],[\"transactioncallback<object>\",{\"1\":{\"2702\":3}}],[\"transactiontemplate对象中\",{\"1\":{\"2702\":1}}],[\"transactiontemplate\",{\"1\":{\"2701\":2,\"2702\":6}}],[\"transactionmanager\",{\"1\":{\"2701\":4,\"2706\":2,\"2710\":2,\"2903\":2,\"2908\":2}}],[\"transactionmanager>\",{\"1\":{\"2317\":1,\"2318\":1}}],[\"transactionpointcut\",{\"1\":{\"2635\":1}}],[\"transactionstatus\",{\"1\":{\"2702\":7}}],[\"transactions\",{\"1\":{\"2530\":2}}],[\"transaction\",{\"0\":{\"936\":1},\"1\":{\"936\":2,\"1106\":1,\"1113\":2,\"1209\":1,\"2683\":1,\"2701\":1,\"2706\":2,\"2710\":2,\"2718\":1,\"2903\":1,\"2908\":1}}],[\"transient\",{\"1\":{\"263\":3,\"294\":2,\"316\":1,\"338\":2}}],[\"transferconcurrenthashmap不能保证并发下数据读写顺序的准确性\",{\"1\":{\"311\":1}}],[\"transfer\",{\"1\":{\"154\":1,\"294\":2,\"2823\":1}}],[\"tr><\",{\"1\":{\"1319\":1}}],[\"tr><tr><td><\",{\"1\":{\"1319\":1}}],[\"tr>\",{\"1\":{\"147\":1,\"1319\":4,\"1544\":5,\"1545\":5,\"1555\":9,\"1579\":5,\"1586\":5,\"1630\":1,\"1631\":1,\"1793\":3,\"1927\":1,\"1928\":1,\"1976\":2,\"2025\":2,\"2031\":2,\"2925\":5}}],[\"trypresize\",{\"1\":{\"311\":1}}],[\"try中出现异常以后\",{\"1\":{\"27\":1}}],[\"try中如果出现异常\",{\"1\":{\"20\":1}}],[\"try中有异常\",{\"1\":{\"20\":1}}],[\"try中没有异常\",{\"1\":{\"20\":1}}],[\"try\",{\"0\":{\"18\":1,\"22\":1},\"1\":{\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"30\":2,\"32\":2,\"316\":2,\"327\":2,\"348\":3,\"349\":3,\"356\":1,\"364\":1,\"374\":1,\"438\":1,\"440\":1,\"441\":1,\"445\":1,\"457\":2,\"460\":1,\"480\":1,\"489\":2,\"490\":4,\"512\":13,\"513\":14,\"517\":4,\"518\":4,\"617\":1,\"891\":1,\"1217\":3,\"1219\":3,\"1220\":3,\"1221\":3,\"1222\":3,\"1227\":3,\"1231\":3,\"1234\":5,\"1235\":5,\"1242\":3,\"1252\":4,\"1253\":13,\"1264\":6,\"1266\":7,\"1274\":4,\"1275\":5,\"1279\":1,\"1280\":4,\"1288\":5,\"1825\":2,\"1976\":4,\"2087\":1,\"2176\":1,\"2282\":1,\"2374\":1,\"2493\":2,\"2702\":1,\"2799\":1}}],[\"typehandlers>\",{\"1\":{\"2509\":1}}],[\"typehandler\",{\"1\":{\"2437\":1,\"2509\":1}}],[\"typealiasespackage\",{\"1\":{\"2903\":1,\"2907\":1}}],[\"typealiases>\",{\"1\":{\"2326\":1,\"2329\":1,\"2374\":1}}],[\"typealias\",{\"0\":{\"2325\":1}}],[\"type是用来定义主键的生成策略的\",{\"1\":{\"2226\":1}}],[\"type是调用jquery\",{\"1\":{\"2147\":1,\"2155\":1}}],[\"type是http包中用来表示内容类型的标识\",{\"1\":{\"158\":1}}],[\"type设置响应类型\",{\"1\":{\"1805\":1}}],[\"typeuserdemo01\",{\"1\":{\"905\":1}}],[\"typedemo01\",{\"1\":{\"905\":1}}],[\"typeparam\",{\"1\":{\"905\":4}}],[\"typename\",{\"1\":{\"827\":1}}],[\"typeof\",{\"1\":{\"65\":1,\"1355\":1,\"1359\":1}}],[\"type\",{\"0\":{\"205\":1,\"2136\":1},\"1\":{\"65\":5,\"88\":1,\"158\":1,\"177\":1,\"208\":1,\"588\":2,\"905\":6,\"922\":1,\"1093\":2,\"1293\":1,\"1317\":2,\"1318\":1,\"1344\":1,\"1493\":2,\"1494\":2,\"1505\":3,\"1713\":3,\"1805\":2,\"1808\":2,\"2029\":1,\"2030\":1,\"2131\":1,\"2132\":2,\"2147\":1,\"2155\":3,\"2161\":3,\"2165\":3,\"2169\":1,\"2170\":1,\"2176\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2332\":1,\"2420\":1,\"2481\":1,\"2509\":3,\"2597\":1}}],[\"type=auto\",{\"1\":{\"2229\":1}}],[\"type=com\",{\"1\":{\"2187\":1}}],[\"type=hidden\",{\"1\":{\"1555\":1}}],[\"type=\",{\"1\":{\"65\":3,\"129\":1,\"1293\":1,\"1310\":1,\"1317\":3,\"1318\":1,\"1330\":4,\"1331\":3,\"1333\":4,\"1334\":1,\"1335\":2,\"1336\":4,\"1337\":1,\"1338\":1,\"1339\":3,\"1341\":2,\"1342\":2,\"1343\":1,\"1345\":2,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":4,\"1350\":2,\"1379\":2,\"1380\":5,\"1436\":1,\"1439\":3,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":3,\"1459\":3,\"1460\":2,\"1462\":1,\"1463\":3,\"1471\":1,\"1472\":1,\"1488\":1,\"1489\":1,\"1490\":4,\"1491\":4,\"1493\":2,\"1494\":2,\"1496\":1,\"1497\":1,\"1499\":2,\"1500\":2,\"1501\":2,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":7,\"1515\":2,\"1518\":1,\"1528\":1,\"1529\":1,\"1535\":2,\"1536\":1,\"1544\":2,\"1548\":3,\"1549\":3,\"1552\":3,\"1555\":13,\"1564\":9,\"1567\":5,\"1568\":5,\"1570\":5,\"1571\":9,\"1572\":5,\"1573\":1,\"1574\":1,\"1579\":6,\"1585\":1,\"1586\":6,\"1588\":4,\"1589\":4,\"1590\":5,\"1591\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":2,\"1651\":1,\"1653\":2,\"1656\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":2,\"1676\":2,\"1677\":2,\"1695\":2,\"1698\":8,\"1701\":2,\"1793\":3,\"1907\":3,\"2029\":1,\"2055\":3,\"2060\":3,\"2094\":3,\"2114\":3,\"2120\":1,\"2128\":1,\"2131\":3,\"2132\":2,\"2159\":1,\"2166\":1,\"2169\":3,\"2170\":3,\"2171\":3,\"2278\":2,\"2316\":1,\"2317\":1,\"2318\":1,\"2326\":1,\"2332\":1,\"2334\":2,\"2374\":2,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":1,\"2481\":1,\"2486\":1,\"2501\":1,\"2588\":2,\"2592\":2,\"2786\":2,\"2793\":3,\"2794\":3,\"2796\":9,\"2798\":2,\"2800\":5,\"2801\":5,\"2814\":1,\"2817\":3,\"2820\":1,\"2830\":6,\"2857\":2,\"2859\":1,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2877\":1,\"2914\":3}}],[\"tetsqbc\",{\"1\":{\"2503\":1}}],[\"temp目录用户存放tomcat在运行过程中产生的临时文件\",{\"1\":{\"1744\":1}}],[\"temp\",{\"1\":{\"1744\":1}}],[\"templateengine\",{\"1\":{\"2293\":1}}],[\"templates\",{\"0\":{\"2934\":1},\"1\":{\"1928\":1}}],[\"templates目录下创建对应的模板\",{\"1\":{\"1165\":1}}],[\"template\",{\"0\":{\"3175\":1},\"1\":{\"1718\":1,\"1928\":1,\"2676\":1,\"2678\":1,\"2679\":1,\"2680\":1}}],[\"template>\",{\"1\":{\"1691\":1,\"1704\":1,\"1707\":1,\"1708\":1,\"1711\":2,\"1712\":2,\"1713\":2,\"1715\":2}}],[\"tempor\",{\"1\":{\"1606\":1}}],[\"temporal\",{\"1\":{\"900\":2}}],[\"temporaladjuster可以更精确的操作日期\",{\"1\":{\"902\":1}}],[\"temporaladjusters\",{\"1\":{\"900\":2}}],[\"temporaladjuster\",{\"1\":{\"900\":4}}],[\"temporalaccessor\",{\"1\":{\"380\":3}}],[\"terminal\",{\"1\":{\"725\":1}}],[\"tedu\",{\"1\":{\"683\":1}}],[\"teacher\",{\"1\":{\"147\":5}}],[\"teacherlist\",{\"1\":{\"145\":3,\"147\":2}}],[\"teachername\",{\"1\":{\"142\":1,\"147\":1}}],[\"teachermap\",{\"1\":{\"142\":1}}],[\"text等等\",{\"1\":{\"2144\":1}}],[\"textstatus\",{\"1\":{\"2143\":1,\"2144\":1,\"2145\":1,\"2155\":4}}],[\"text类似的是v\",{\"1\":{\"1635\":1}}],[\"text它俩的渲染方式和v\",{\"1\":{\"1635\":1}}],[\"text是只能渲染data中的数据\",{\"1\":{\"1634\":1}}],[\"text是没有这种现象的\",{\"1\":{\"1634\":1}}],[\"text渲染结果类似\",{\"1\":{\"1634\":1}}],[\"text都是渲染文本的指令\",{\"1\":{\"1633\":1}}],[\"textarea>\",{\"1\":{\"1341\":1,\"1555\":1,\"1701\":1}}],[\"textarea\",{\"0\":{\"1341\":1},\"1\":{\"1555\":3}}],[\"text包下\",{\"1\":{\"891\":1}}],[\"text属性指定的\",{\"1\":{\"130\":1}}],[\"text=\",{\"1\":{\"128\":1,\"132\":1,\"133\":1,\"134\":1,\"136\":2,\"137\":3,\"140\":3,\"141\":2,\"142\":4,\"147\":2,\"1634\":1,\"1635\":1}}],[\"text\",{\"0\":{\"1333\":1,\"1633\":1,\"1634\":1},\"1\":{\"65\":2,\"88\":2,\"129\":1,\"154\":1,\"208\":5,\"374\":3,\"941\":1,\"1156\":1,\"1198\":1,\"1293\":1,\"1330\":2,\"1331\":1,\"1333\":4,\"1341\":1,\"1342\":1,\"1350\":2,\"1379\":1,\"1380\":2,\"1436\":1,\"1439\":1,\"1442\":1,\"1458\":1,\"1459\":1,\"1471\":1,\"1472\":1,\"1493\":1,\"1494\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1512\":1,\"1513\":1,\"1514\":4,\"1515\":2,\"1518\":1,\"1528\":1,\"1529\":1,\"1535\":2,\"1536\":1,\"1544\":2,\"1548\":3,\"1549\":3,\"1552\":3,\"1554\":1,\"1555\":7,\"1567\":1,\"1568\":1,\"1570\":5,\"1571\":2,\"1572\":2,\"1573\":3,\"1574\":3,\"1579\":3,\"1585\":1,\"1586\":3,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":2,\"1651\":1,\"1653\":2,\"1656\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":5,\"1676\":2,\"1677\":2,\"1695\":3,\"1698\":5,\"1701\":2,\"1759\":1,\"1793\":1,\"1806\":1,\"1808\":2,\"1813\":1,\"1856\":2,\"1860\":2,\"1893\":1,\"1907\":1,\"1927\":1,\"1928\":1,\"1951\":1,\"1952\":1,\"1960\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":1,\"1997\":2,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2031\":1,\"2055\":2,\"2060\":4,\"2088\":1,\"2094\":2,\"2096\":1,\"2114\":2,\"2115\":1,\"2120\":3,\"2121\":1,\"2124\":1,\"2128\":2,\"2131\":5,\"2141\":1,\"2155\":2,\"2159\":1,\"2161\":1,\"2165\":1,\"2166\":1,\"2169\":4,\"2170\":5,\"2171\":5,\"2176\":2,\"2750\":1,\"2786\":3,\"2793\":2,\"2794\":1,\"2796\":3,\"2798\":1,\"2800\":4,\"2801\":4,\"2817\":2,\"2820\":1,\"2830\":3,\"2857\":2,\"2859\":1,\"2861\":2,\"2877\":1,\"2914\":4,\"2925\":1}}],[\"testmodelandviewbyredirect\",{\"1\":{\"2873\":4}}],[\"testmodelandviewbyforward\",{\"1\":{\"2872\":4}}],[\"testviewbyredirect\",{\"1\":{\"2870\":4}}],[\"testviewbyforward\",{\"1\":{\"2869\":4}}],[\"testkeywordsbyredirect\",{\"1\":{\"2867\":4}}],[\"testkeywordsbyforward\",{\"1\":{\"2866\":4}}],[\"testredirectbyservletapi\",{\"1\":{\"2864\":4}}],[\"testreturnvoid\",{\"1\":{\"2859\":4}}],[\"testresponse\",{\"1\":{\"2859\":1,\"2863\":2,\"2864\":2,\"2866\":2,\"2867\":2,\"2869\":2,\"2870\":2,\"2872\":2,\"2873\":2,\"2876\":1,\"2878\":1}}],[\"testrestful\",{\"1\":{\"2825\":1,\"2830\":9}}],[\"testrequestheaders\",{\"1\":{\"2820\":3}}],[\"testrequestparams\",{\"1\":{\"2817\":3,\"2820\":1}}],[\"testrequestmapping\",{\"1\":{\"2814\":2,\"2817\":2,\"2820\":3,\"2857\":5}}],[\"testreceive\",{\"1\":{\"515\":1,\"516\":1,\"517\":1,\"518\":1}}],[\"testgetrequestparam\",{\"1\":{\"2793\":2,\"2794\":2,\"2796\":2,\"2798\":2,\"2800\":2,\"2801\":2}}],[\"testgeneric<>\",{\"1\":{\"241\":1}}],[\"testgeneric<string>\",{\"1\":{\"241\":1}}],[\"testgeneric<e>\",{\"1\":{\"241\":1}}],[\"testgeneric<a\",{\"1\":{\"240\":2}}],[\"testgeneric\",{\"1\":{\"240\":2}}],[\"test测试支持包\",{\"1\":{\"2756\":1}}],[\"testjunit\",{\"1\":{\"2756\":1}}],[\"testng\",{\"1\":{\"2533\":1}}],[\"test9\",{\"1\":{\"2260\":1}}],[\"test8\",{\"1\":{\"2259\":1}}],[\"test<\",{\"1\":{\"2186\":1,\"2756\":1,\"2891\":1}}],[\"testload\",{\"1\":{\"2159\":2}}],[\"testlog4j\",{\"1\":{\"1287\":2}}],[\"testdata\",{\"1\":{\"2128\":2}}],[\"testdataservlet\",{\"1\":{\"2120\":1,\"2121\":2}}],[\"testdelete\",{\"1\":{\"1220\":2,\"1253\":2,\"2239\":1,\"2369\":1}}],[\"testdelayqueue\",{\"1\":{\"356\":9}}],[\"testdemo\",{\"1\":{\"2605\":2}}],[\"testdemo13\",{\"1\":{\"489\":1,\"490\":1}}],[\"testdemo12\",{\"1\":{\"461\":1}}],[\"testdemo11\",{\"1\":{\"460\":1}}],[\"testdemo10\",{\"1\":{\"459\":1}}],[\"testdemo09\",{\"1\":{\"458\":1}}],[\"testdemo08\",{\"1\":{\"457\":1}}],[\"testdemo07\",{\"1\":{\"450\":1}}],[\"testdemo06\",{\"1\":{\"446\":1}}],[\"testdemo05\",{\"1\":{\"445\":1}}],[\"testdemo04\",{\"1\":{\"442\":1}}],[\"testdemo03\",{\"1\":{\"441\":1,\"1227\":1}}],[\"testdemo02\",{\"1\":{\"440\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1}}],[\"testdemo01\",{\"1\":{\"438\":1,\"1215\":1,\"1242\":1,\"1264\":1}}],[\"test=\",{\"1\":{\"2022\":7,\"2023\":4,\"2025\":7,\"2031\":7,\"2443\":1,\"2444\":8,\"2447\":8,\"2449\":2,\"2450\":8,\"2453\":7,\"2456\":7}}],[\"test匹配它所拥有的所有的context\",{\"1\":{\"1769\":1}}],[\"testbatch\",{\"1\":{\"1231\":3,\"1235\":2}}],[\"testbefore\",{\"1\":{\"525\":1,\"1571\":1}}],[\"testupdateset\",{\"1\":{\"2250\":1}}],[\"testupdate2\",{\"1\":{\"2246\":1}}],[\"testupdate1\",{\"1\":{\"2245\":1}}],[\"testupdate\",{\"1\":{\"1221\":2,\"1253\":2,\"2366\":1}}],[\"test10\",{\"1\":{\"2260\":1}}],[\"test1\",{\"1\":{\"847\":2,\"848\":2,\"901\":1,\"904\":1,\"2183\":1,\"2253\":1,\"2282\":2,\"2355\":1,\"2374\":1,\"2609\":1}}],[\"testforwardbyservletapi\",{\"1\":{\"2863\":4}}],[\"testforward\",{\"1\":{\"2859\":1}}],[\"testfindbydeptnoandsal\",{\"1\":{\"2391\":1}}],[\"testfindbyempno\",{\"1\":{\"2386\":1}}],[\"testfindall\",{\"1\":{\"2379\":1}}],[\"testfile02\",{\"1\":{\"390\":1}}],[\"testfile01\",{\"1\":{\"387\":1}}],[\"testfun\",{\"1\":{\"1442\":2}}],[\"testfunction2\",{\"1\":{\"843\":2,\"844\":2}}],[\"testfunction1\",{\"1\":{\"842\":2}}],[\"testcache2\",{\"1\":{\"2479\":1,\"2488\":1}}],[\"testcache1\",{\"1\":{\"2475\":1}}],[\"testcount\",{\"1\":{\"2219\":1}}],[\"testconsumer2\",{\"1\":{\"840\":2}}],[\"testconsumer1\",{\"1\":{\"839\":2}}],[\"testclient\",{\"1\":{\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1}}],[\"test目录下的java代码可以访问这个范围的依赖\",{\"1\":{\"689\":1,\"690\":1,\"691\":1}}],[\"test目录用于存放测试程序\",{\"1\":{\"679\":1}}],[\"teststatus\",{\"1\":{\"2155\":1}}],[\"teststr\",{\"1\":{\"1406\":2}}],[\"tests\",{\"1\":{\"1683\":2}}],[\"testsub\",{\"1\":{\"523\":1,\"525\":1}}],[\"testselectobjs\",{\"1\":{\"2244\":1}}],[\"testselectone\",{\"1\":{\"2240\":1}}],[\"testselectmaps\",{\"1\":{\"2243\":1}}],[\"testselectlistcolumn\",{\"1\":{\"2249\":1}}],[\"testselectlistlast\",{\"1\":{\"2248\":1}}],[\"testselectlistorderby\",{\"1\":{\"2247\":1}}],[\"testselectlist\",{\"1\":{\"2242\":1}}],[\"testselectcount\",{\"1\":{\"2241\":1}}],[\"testselectall\",{\"1\":{\"1222\":2,\"1253\":2}}],[\"testservlet4\",{\"1\":{\"1869\":1,\"1870\":3,\"1878\":1}}],[\"testservlet\",{\"1\":{\"1831\":2,\"1834\":4,\"2128\":3}}],[\"testserver\",{\"1\":{\"509\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1}}],[\"testseason\",{\"1\":{\"560\":1,\"561\":1,\"562\":1}}],[\"testsend\",{\"1\":{\"515\":1,\"516\":1,\"517\":1,\"518\":1}}],[\"testannotation\",{\"1\":{\"2857\":5}}],[\"testa\",{\"1\":{\"2169\":1}}],[\"testajaxbtn\",{\"1\":{\"2877\":2}}],[\"testajax\",{\"1\":{\"2132\":4,\"2155\":1,\"2166\":2,\"2876\":2,\"2877\":2,\"2878\":2}}],[\"testappendto\",{\"1\":{\"1571\":1}}],[\"testappend\",{\"1\":{\"1571\":1}}],[\"testafter\",{\"1\":{\"525\":1,\"1571\":1}}],[\"testadd\",{\"1\":{\"523\":1,\"525\":1}}],[\"testarrayblockingqueue\",{\"1\":{\"327\":1}}],[\"test注解\",{\"1\":{\"522\":1}}],[\"testtransaction02\",{\"1\":{\"1235\":1}}],[\"testtransaction\",{\"1\":{\"1234\":3}}],[\"testthread02\",{\"1\":{\"457\":5}}],[\"testthread01\",{\"1\":{\"457\":7}}],[\"testtake\",{\"1\":{\"348\":1}}],[\"testinsert\",{\"1\":{\"2363\":1}}],[\"testinsertafter\",{\"1\":{\"1571\":1}}],[\"testinsertbefore\",{\"1\":{\"1571\":1}}],[\"testinster\",{\"1\":{\"1219\":2,\"1253\":2}}],[\"testinterface\",{\"1\":{\"563\":2}}],[\"testinteger\",{\"1\":{\"278\":1,\"283\":1}}],[\"testio12\",{\"1\":{\"428\":3}}],[\"testio11\",{\"1\":{\"425\":1}}],[\"testio10\",{\"1\":{\"422\":1}}],[\"testio09\",{\"1\":{\"422\":1}}],[\"testio08\",{\"1\":{\"421\":1}}],[\"testio06\",{\"1\":{\"418\":1}}],[\"testio07\",{\"1\":{\"415\":1}}],[\"testio05\",{\"1\":{\"412\":1}}],[\"testio03\",{\"1\":{\"409\":1}}],[\"testio02\",{\"1\":{\"408\":1}}],[\"testio01\",{\"1\":{\"405\":1}}],[\"testpostrequest\",{\"1\":{\"2814\":4,\"2817\":1}}],[\"testpoll\",{\"1\":{\"349\":1}}],[\"testparambyrequest\",{\"1\":{\"2793\":1,\"2794\":1}}],[\"testpreparedsstatementcrud\",{\"1\":{\"1253\":1}}],[\"testpreparedsstatement\",{\"1\":{\"1252\":1}}],[\"testpriorityblockingqueue\",{\"1\":{\"352\":1}}],[\"test09\",{\"1\":{\"380\":1}}],[\"test06\",{\"1\":{\"375\":1,\"882\":1,\"2559\":1}}],[\"test08\",{\"1\":{\"287\":1,\"379\":1}}],[\"test07\",{\"1\":{\"287\":1,\"376\":1,\"883\":1,\"2560\":1}}],[\"test05\",{\"1\":{\"286\":1,\"287\":1,\"374\":1,\"854\":1,\"881\":1,\"889\":1,\"2559\":1,\"2602\":1}}],[\"test03\",{\"1\":{\"262\":1,\"278\":1,\"281\":1,\"357\":1,\"396\":1,\"853\":1,\"880\":1,\"887\":1,\"888\":2,\"889\":1,\"893\":1,\"900\":1,\"2554\":1,\"2558\":1,\"2564\":1,\"2566\":7,\"2567\":4,\"2592\":1}}],[\"test04\",{\"1\":{\"260\":1,\"364\":1,\"373\":1,\"881\":1,\"889\":1,\"2555\":1,\"2559\":1,\"2579\":1,\"2594\":1}}],[\"test02\",{\"1\":{\"220\":1,\"247\":1,\"248\":1,\"274\":1,\"275\":1,\"318\":1,\"368\":1,\"395\":1,\"405\":1,\"428\":2,\"506\":1,\"543\":1,\"564\":1,\"579\":1,\"580\":1,\"820\":1,\"852\":1,\"879\":1,\"886\":1,\"888\":1,\"889\":2,\"893\":1,\"896\":1,\"899\":1,\"905\":1,\"2543\":1,\"2546\":1,\"2553\":1,\"2558\":1,\"2562\":1,\"2563\":3,\"2564\":2,\"2567\":1,\"2574\":1,\"2591\":1,\"2678\":1,\"2679\":1,\"2680\":1}}],[\"test01s\",{\"1\":{\"904\":2}}],[\"test01\",{\"1\":{\"30\":1,\"219\":1,\"234\":2,\"251\":1,\"292\":1,\"300\":1,\"303\":1,\"305\":1,\"306\":1,\"309\":1,\"367\":1,\"382\":1,\"392\":1,\"405\":1,\"428\":2,\"431\":1,\"503\":1,\"523\":1,\"525\":1,\"568\":1,\"835\":1,\"850\":1,\"885\":1,\"888\":1,\"891\":1,\"893\":1,\"895\":1,\"897\":1,\"898\":1,\"899\":1,\"904\":4,\"905\":1,\"2435\":1,\"2540\":1,\"2553\":3,\"2554\":2,\"2555\":3,\"2557\":2,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2566\":1,\"2571\":1,\"2590\":1,\"2612\":1,\"2615\":1,\"2672\":1,\"2673\":1,\"2674\":1,\"2697\":1}}],[\"test7\",{\"1\":{\"32\":1,\"2258\":1}}],[\"test6\",{\"1\":{\"30\":1,\"2257\":1}}],[\"test5\",{\"1\":{\"30\":1,\"2183\":1,\"2256\":1}}],[\"test4\",{\"1\":{\"27\":1,\"2183\":1,\"2256\":1}}],[\"test3\",{\"1\":{\"21\":1,\"24\":1,\"848\":2,\"904\":1,\"2183\":1,\"2255\":1,\"2351\":1,\"2359\":1}}],[\"test2\",{\"1\":{\"19\":1,\"265\":1,\"266\":1,\"848\":4,\"904\":1,\"2183\":1,\"2254\":1,\"2345\":3,\"2348\":2,\"2351\":1,\"2355\":1,\"2357\":2,\"2359\":1,\"2649\":1}}],[\"test\",{\"0\":{\"690\":1,\"847\":1},\"1\":{\"16\":1,\"17\":1,\"30\":1,\"79\":1,\"115\":1,\"238\":1,\"244\":4,\"245\":3,\"315\":1,\"523\":2,\"525\":2,\"535\":1,\"563\":1,\"816\":1,\"817\":5,\"820\":2,\"846\":6,\"847\":1,\"848\":3,\"850\":1,\"852\":1,\"853\":1,\"854\":1,\"878\":2,\"879\":1,\"880\":1,\"881\":2,\"882\":1,\"883\":1,\"885\":1,\"886\":1,\"887\":1,\"888\":3,\"889\":5,\"891\":1,\"893\":3,\"895\":1,\"896\":1,\"897\":1,\"898\":1,\"899\":2,\"900\":1,\"901\":1,\"1116\":1,\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"1287\":1,\"1417\":2,\"1585\":1,\"1586\":3,\"1768\":1,\"1769\":3,\"2022\":1,\"2187\":1,\"2192\":1,\"2203\":1,\"2204\":1,\"2205\":1,\"2206\":1,\"2208\":1,\"2209\":1,\"2210\":1,\"2211\":1,\"2219\":1,\"2220\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2245\":1,\"2246\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2250\":1,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2259\":1,\"2260\":2,\"2274\":1,\"2278\":1,\"2282\":3,\"2286\":1,\"2293\":1,\"2312\":1,\"2332\":1,\"2345\":2,\"2348\":1,\"2351\":1,\"2355\":1,\"2357\":1,\"2359\":1,\"2363\":1,\"2366\":1,\"2369\":1,\"2374\":1,\"2379\":1,\"2386\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":1,\"2444\":2,\"2447\":2,\"2450\":3,\"2453\":1,\"2456\":1,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2475\":1,\"2479\":1,\"2488\":1,\"2501\":1,\"2503\":1,\"2533\":2,\"2540\":1,\"2543\":1,\"2546\":1,\"2553\":3,\"2554\":2,\"2555\":2,\"2557\":2,\"2558\":3,\"2559\":4,\"2560\":2,\"2562\":2,\"2563\":2,\"2564\":2,\"2566\":2,\"2567\":2,\"2571\":1,\"2574\":1,\"2579\":1,\"2583\":1,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2602\":1,\"2649\":1,\"2666\":1,\"2672\":1,\"2673\":1,\"2674\":4,\"2678\":1,\"2679\":1,\"2680\":1,\"2697\":1,\"2897\":1}}],[\"thin\",{\"1\":{\"2297\":1}}],[\"this就是这个锁\",{\"1\":{\"465\":1}}],[\"this\",{\"1\":{\"78\":2,\"262\":3,\"263\":3,\"274\":9,\"275\":6,\"278\":2,\"279\":1,\"281\":3,\"287\":13,\"288\":1,\"294\":5,\"316\":2,\"328\":4,\"338\":2,\"352\":5,\"356\":4,\"364\":2,\"392\":1,\"428\":2,\"440\":1,\"441\":1,\"442\":1,\"457\":2,\"458\":1,\"465\":1,\"489\":13,\"490\":13,\"511\":4,\"512\":4,\"513\":5,\"560\":2,\"561\":2,\"576\":3,\"1226\":6,\"1241\":8,\"1264\":6,\"1279\":1,\"1293\":1,\"1326\":1,\"1417\":8,\"1419\":1,\"1420\":5,\"1421\":3,\"1423\":5,\"1424\":8,\"1425\":8,\"1439\":1,\"1614\":2,\"1621\":2,\"1622\":2,\"1640\":4,\"1650\":2,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1695\":1,\"1701\":1,\"1707\":1,\"1711\":1,\"1712\":1,\"1715\":2,\"1730\":1,\"1831\":2,\"1834\":2,\"1870\":1,\"1878\":1,\"1908\":1,\"1925\":1,\"1928\":1,\"2060\":1,\"2061\":4,\"2142\":1,\"2143\":1,\"2144\":1,\"2145\":1,\"2176\":2,\"2552\":3,\"2571\":4,\"2605\":3,\"2609\":2,\"2612\":1}}],[\"thowable\",{\"1\":{\"2638\":1}}],[\"thornton合作基于html\",{\"1\":{\"1557\":1}}],[\"thoughts\",{\"1\":{\"1185\":1}}],[\"th>\",{\"1\":{\"1319\":4,\"1544\":5,\"1545\":5,\"1630\":5,\"1976\":9,\"2025\":14,\"2031\":14}}],[\"th><\",{\"1\":{\"1319\":1}}],[\"than\",{\"1\":{\"1552\":2}}],[\"thaibuddhistdate\",{\"1\":{\"892\":1}}],[\"that\",{\"1\":{\"294\":2}}],[\"thumbnails\",{\"1\":{\"1558\":1}}],[\"thu\",{\"1\":{\"891\":1}}],[\"thursday\",{\"1\":{\"375\":2,\"379\":1}}],[\"thead>\",{\"1\":{\"2925\":1}}],[\"theme主题设置\",{\"1\":{\"1191\":1}}],[\"theme\",{\"1\":{\"1191\":1}}],[\"there\",{\"1\":{\"1180\":2}}],[\"then函数是vue自动调用的函数\",{\"1\":{\"1721\":1}}],[\"then\",{\"1\":{\"1094\":4,\"1147\":2,\"1721\":2,\"1722\":1,\"1985\":1}}],[\"theirs\",{\"1\":{\"786\":1}}],[\"the\",{\"1\":{\"364\":1,\"570\":2,\"725\":1,\"922\":3,\"1683\":1,\"1777\":1}}],[\"three\",{\"1\":{\"1602\":6}}],[\"threeset\",{\"0\":{\"284\":1}}],[\"threadserver\",{\"1\":{\"513\":3}}],[\"threaddemo11\",{\"1\":{\"460\":6}}],[\"threaddemo09\",{\"1\":{\"458\":7}}],[\"thread类中一个静态方法\",{\"1\":{\"456\":1}}],[\"thread类\",{\"1\":{\"456\":1}}],[\"thread3\",{\"1\":{\"446\":2}}],[\"thread2\",{\"1\":{\"446\":2}}],[\"thread1\",{\"1\":{\"446\":2}}],[\"thread对象\",{\"1\":{\"444\":1}}],[\"threadobject02\",{\"1\":{\"441\":6}}],[\"threadobject01\",{\"1\":{\"440\":6}}],[\"threadobject\",{\"1\":{\"438\":5}}],[\"thread03\",{\"1\":{\"348\":1,\"349\":1,\"442\":2}}],[\"thread02\",{\"1\":{\"348\":1,\"349\":1,\"442\":2}}],[\"thread01\",{\"1\":{\"348\":1,\"349\":1,\"442\":2}}],[\"thread\",{\"1\":{\"287\":1,\"309\":3,\"327\":5,\"348\":3,\"349\":3,\"438\":4,\"439\":1,\"440\":5,\"441\":5,\"442\":1,\"445\":6,\"446\":7,\"450\":4,\"452\":1,\"457\":2,\"458\":1,\"459\":1,\"460\":2,\"461\":1,\"471\":1,\"489\":2,\"490\":2,\"513\":1,\"885\":6,\"887\":6,\"891\":1,\"898\":1,\"1216\":4,\"1825\":2,\"2487\":1}}],[\"threshold\",{\"1\":{\"279\":3,\"280\":2,\"294\":6}}],[\"throwing指定目标方法异常时的参数名\",{\"1\":{\"2648\":1}}],[\"throwing标签配置异常通知\",{\"1\":{\"2648\":1}}],[\"throwing=\",{\"1\":{\"2648\":1}}],[\"throwing\",{\"1\":{\"2642\":1,\"2648\":2,\"2653\":1}}],[\"throwable\",{\"1\":{\"2609\":1,\"2615\":1,\"2638\":1,\"2644\":1,\"2653\":1}}],[\"throw+异常对象\",{\"1\":{\"33\":1}}],[\"throws+异常的类型\",{\"1\":{\"33\":1}}],[\"throws\",{\"1\":{\"32\":2,\"33\":2,\"327\":1,\"337\":4,\"348\":2,\"349\":2,\"364\":2,\"386\":1,\"387\":1,\"405\":6,\"408\":1,\"409\":1,\"412\":3,\"415\":1,\"418\":1,\"421\":1,\"422\":2,\"425\":1,\"428\":3,\"438\":1,\"440\":1,\"441\":1,\"450\":2,\"458\":1,\"459\":1,\"460\":1,\"461\":1,\"503\":1,\"509\":2,\"510\":2,\"511\":2,\"515\":2,\"516\":2,\"545\":2,\"546\":4,\"568\":6,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"585\":1,\"588\":1,\"591\":2,\"891\":1,\"893\":1,\"898\":1,\"904\":1,\"1215\":1,\"1789\":1,\"1790\":3,\"1794\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1825\":2,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":2,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":1,\"1997\":2,\"1998\":2,\"2001\":2,\"2047\":4,\"2049\":1,\"2052\":4,\"2056\":1,\"2057\":2,\"2062\":1,\"2063\":2,\"2075\":1,\"2088\":1,\"2095\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2493\":2,\"2509\":4,\"2574\":2,\"2609\":1,\"2615\":1,\"2638\":2,\"2644\":1,\"2749\":1,\"2859\":1,\"2863\":1,\"2864\":1}}],[\"throw与throws\",{\"0\":{\"31\":1}}],[\"throw抛出异常的情况\",{\"1\":{\"23\":1}}],[\"throw\",{\"1\":{\"21\":1,\"24\":1,\"32\":3,\"33\":2,\"327\":2,\"328\":1,\"338\":1,\"348\":3,\"349\":3,\"356\":1,\"374\":1,\"438\":1,\"440\":1,\"441\":1,\"445\":1,\"457\":2,\"460\":1,\"489\":2,\"490\":2,\"512\":14,\"513\":15,\"517\":4,\"518\":4,\"538\":2,\"2493\":1,\"2799\":1}}],[\"th\",{\"1\":{\"127\":2,\"128\":1,\"129\":1,\"130\":1,\"132\":1,\"133\":1,\"134\":1,\"136\":2,\"137\":3,\"138\":1,\"140\":3,\"141\":2,\"142\":4,\"145\":5,\"146\":4,\"147\":8,\"149\":1,\"150\":6,\"1319\":1,\"1976\":1,\"2025\":1,\"2031\":1}}],[\"th名称空间\",{\"0\":{\"126\":1}}],[\"thymeleaf的内置对象\",{\"0\":{\"139\":1}}],[\"thymeleaf的基本语法\",{\"0\":{\"125\":1}}],[\"thymeleaf引擎根据th\",{\"1\":{\"130\":1}}],[\"thymeleaf是一款用于渲染xml\",{\"1\":{\"122\":1}}],[\"thymeleaf概念\",{\"0\":{\"121\":1}}],[\"thymeleaf\",{\"0\":{\"117\":1,\"2986\":1},\"1\":{\"11\":1}}],[\"took\",{\"1\":{\"2299\":1}}],[\"tools\",{\"1\":{\"772\":1}}],[\"toolbox\",{\"1\":{\"62\":1}}],[\"tooltip\",{\"1\":{\"62\":1,\"65\":1}}],[\"to=\",{\"1\":{\"1609\":4,\"1718\":2}}],[\"toggle=\",{\"1\":{\"1606\":4}}],[\"toggle\",{\"1\":{\"1588\":2}}],[\"toggleclass\",{\"1\":{\"1568\":1}}],[\"togmtstring\",{\"1\":{\"371\":1,\"374\":1,\"1415\":1}}],[\"top和bottom不会同时使用\",{\"1\":{\"1533\":1,\"1534\":1}}],[\"top\",{\"1\":{\"1450\":1,\"1451\":1,\"1529\":3,\"1533\":1,\"1534\":1,\"1535\":2,\"1536\":1}}],[\"totam\",{\"1\":{\"1606\":2}}],[\"total\",{\"1\":{\"1072\":2}}],[\"totimestring\",{\"1\":{\"1415\":1}}],[\"tojson\",{\"1\":{\"1415\":1,\"2128\":1,\"2166\":1,\"2176\":1}}],[\"toisostring\",{\"1\":{\"1415\":1}}],[\"toutcstring\",{\"1\":{\"1415\":3}}],[\"touppercase\",{\"1\":{\"431\":1,\"840\":1,\"854\":2,\"1405\":1}}],[\"tove\",{\"1\":{\"1392\":2}}],[\"tobias\",{\"1\":{\"1392\":2}}],[\"tohours\",{\"1\":{\"899\":1}}],[\"today\",{\"1\":{\"1415\":2,\"1416\":1,\"1458\":4,\"1459\":4}}],[\"todays\",{\"1\":{\"899\":1}}],[\"todatestring\",{\"1\":{\"1415\":1}}],[\"todo\",{\"1\":{\"310\":1,\"1195\":1}}],[\"toarray\",{\"1\":{\"879\":2}}],[\"tocollection\",{\"1\":{\"878\":2}}],[\"tochararray\",{\"1\":{\"408\":1}}],[\"toset\",{\"1\":{\"878\":1}}],[\"tostring的效果永远是\",{\"1\":{\"387\":1}}],[\"tostring\",{\"1\":{\"21\":1,\"262\":1,\"274\":1,\"275\":1,\"278\":1,\"281\":1,\"287\":3,\"352\":1,\"356\":1,\"364\":3,\"371\":1,\"373\":1,\"374\":1,\"386\":4,\"387\":4,\"389\":4,\"390\":2,\"392\":1,\"428\":1,\"431\":2,\"511\":2,\"512\":2,\"513\":1,\"560\":3,\"561\":3,\"562\":3,\"587\":1,\"588\":1,\"590\":1,\"591\":1,\"879\":2,\"1226\":1,\"1241\":1,\"1264\":1,\"1405\":1,\"1415\":1,\"1801\":1,\"1893\":1,\"1927\":1,\"1928\":1,\"2061\":1,\"2087\":1,\"2190\":1,\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2552\":1,\"2565\":2,\"2566\":1,\"2571\":1,\"2579\":2,\"2590\":1,\"2591\":1,\"2592\":1,\"2796\":1,\"2800\":2,\"2801\":2,\"2915\":1}}],[\"tolist\",{\"1\":{\"856\":1,\"878\":1,\"889\":1}}],[\"tolocaletimestring\",{\"1\":{\"1415\":1}}],[\"tolocaledatestring\",{\"1\":{\"1415\":1}}],[\"tolocaleuppercase\",{\"1\":{\"1405\":1}}],[\"tolocalelowercase\",{\"1\":{\"1405\":1}}],[\"tolocalestring\",{\"1\":{\"371\":1,\"374\":1,\"1415\":1}}],[\"tolowercase\",{\"1\":{\"431\":1,\"839\":1,\"840\":1,\"1405\":1}}],[\"tome\",{\"1\":{\"2877\":1}}],[\"tom01\",{\"1\":{\"2564\":1}}],[\"tomillis\",{\"1\":{\"899\":1}}],[\"tominutes\",{\"1\":{\"899\":1}}],[\"tomap\",{\"1\":{\"845\":2}}],[\"tom\",{\"1\":{\"288\":2,\"2183\":1,\"2240\":1,\"2260\":2,\"2563\":1,\"2876\":1,\"2878\":1}}],[\"tomcat9已经解决了该问题\",{\"1\":{\"1812\":1}}],[\"tomcat接收到请求的数据包后会将数据包中的字节转换为字符\",{\"1\":{\"1801\":1}}],[\"tomcat中为每个web项目创建一个独立的tomcat副本\",{\"1\":{\"1779\":1}}],[\"tomcat中的各个组件和端口的配置\",{\"1\":{\"1752\":1}}],[\"tomcat中的一个组件\",{\"1\":{\"1752\":1}}],[\"tomcat处理请求过程\",{\"0\":{\"1769\":1}}],[\"tomcat通过在请求url中的域名与name中的值匹配\",{\"1\":{\"1767\":1}}],[\"tomcat支持基于fqdn\",{\"1\":{\"1766\":1}}],[\"tomcat体系结构图\",{\"0\":{\"1761\":1}}],[\"tomcat就会关闭不再需要的socket线程\",{\"1\":{\"1757\":1}}],[\"tomcat版本不同\",{\"1\":{\"1757\":1}}],[\"tomcat默认监听端口为8080\",{\"1\":{\"1756\":1}}],[\"tomcat目录结构\",{\"0\":{\"1744\":1}}],[\"tomcat是绿色软解\",{\"1\":{\"1740\":1}}],[\"tomcat由apache开源组织使用java开发的一款web容器\",{\"1\":{\"1740\":1}}],[\"tomcat的web\",{\"1\":{\"1900\":1}}],[\"tomcat的组件\",{\"0\":{\"1760\":1}}],[\"tomcat的最大并发数是可以配置的\",{\"1\":{\"1757\":1}}],[\"tomcat的配置\",{\"0\":{\"1754\":1}}],[\"tomcat的配置文件\",{\"0\":{\"1749\":1}}],[\"tomcat的配置与组件\",{\"0\":{\"1748\":1,\"3124\":1},\"1\":{\"151\":1}}],[\"tomcat的安装\",{\"0\":{\"1738\":1}}],[\"tomcat的安装与结构\",{\"0\":{\"1737\":1,\"3122\":1},\"1\":{\"151\":1}}],[\"tomcat部署项目\",{\"0\":{\"1745\":1,\"3123\":1},\"1\":{\"151\":1}}],[\"tomcat\",{\"0\":{\"151\":1,\"1753\":1,\"2988\":1},\"1\":{\"12\":1,\"1736\":1,\"1739\":1,\"1749\":2,\"1750\":2,\"1752\":1,\"1758\":3,\"1759\":5,\"1779\":2}}],[\"toregisterpage\",{\"1\":{\"138\":2}}],[\"to\",{\"1\":{\"65\":1,\"316\":1,\"570\":1,\"729\":1,\"962\":1,\"1093\":2,\"1116\":3,\"1156\":1,\"1683\":1,\"1690\":1,\"1928\":1,\"2029\":1,\"2697\":3,\"2702\":4,\"2707\":2,\"2711\":2}}],[\"vur提供的对象\",{\"1\":{\"1721\":1}}],[\"vue是一个渐进式的javascript框架与其它大型框架不同的是\",{\"1\":{\"1943\":1}}],[\"vue允许我们在特定的生命周期环节中通过钩子函数来加入我们的代码\",{\"1\":{\"1730\":1}}],[\"vue对象的生命周期\",{\"0\":{\"1729\":1}}],[\"vue中封装了ajax并增强了它\",{\"1\":{\"1720\":1}}],[\"vue中的\",{\"0\":{\"3119\":1}}],[\"vue中的路由\",{\"1\":{\"1717\":1}}],[\"vue中的ajax\",{\"0\":{\"1719\":1},\"1\":{\"116\":1}}],[\"vuerouter\",{\"1\":{\"1718\":1}}],[\"vue路由是基于vue\",{\"1\":{\"1718\":1,\"1721\":1}}],[\"vue提供了一个props的入口\",{\"1\":{\"1710\":1}}],[\"vue提供了事件修饰符\",{\"1\":{\"1656\":1}}],[\"vue格式结尾的文件\",{\"1\":{\"1704\":1}}],[\"vue需要挂载的标签\",{\"1\":{\"1690\":1}}],[\"vue文件中的值怎么办\",{\"1\":{\"1709\":1}}],[\"vue文件中\",{\"1\":{\"1709\":1}}],[\"vue文件就是依托在app\",{\"1\":{\"1709\":1}}],[\"vue文件就是整个vue的根组件\",{\"1\":{\"1704\":1}}],[\"vue文件是整个项目的根组件\",{\"1\":{\"1691\":1}}],[\"vue文件\",{\"0\":{\"1707\":1},\"1\":{\"1689\":1}}],[\"vue文件初始化位置\",{\"1\":{\"1686\":1}}],[\"vue功能组件的存放位置\",{\"1\":{\"1686\":1}}],[\"vue安装在哪里\",{\"1\":{\"1682\":1}}],[\"vue2文件\",{\"1\":{\"1616\":1}}],[\"vue的组件中data是一个函数\",{\"1\":{\"1705\":1}}],[\"vue的组建就是将视图和逻辑进行了一个整合\",{\"1\":{\"1691\":1}}],[\"vue的入口文件\",{\"1\":{\"1686\":1}}],[\"vue的事件监听\",{\"1\":{\"1661\":1}}],[\"vue的核心之一就是双向数据绑定\",{\"1\":{\"1652\":1}}],[\"vue的使用\",{\"0\":{\"1615\":1}}],[\"vue的好处\",{\"0\":{\"1612\":1}}],[\"vuejs\",{\"1\":{\"1611\":2}}],[\"vuedemo\",{\"0\":{\"1692\":1},\"1\":{\"116\":1}}],[\"vue指令\",{\"0\":{\"1618\":1,\"3113\":1},\"1\":{\"116\":1}}],[\"vue\",{\"0\":{\"116\":1,\"1685\":1,\"1688\":1,\"1691\":1,\"2985\":1,\"3112\":1,\"3116\":1},\"1\":{\"11\":1,\"1611\":4,\"1614\":2,\"1616\":3,\"1617\":3,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1682\":7,\"1683\":3,\"1686\":1,\"1687\":5,\"1689\":5,\"1695\":2,\"1698\":2,\"1701\":2,\"1703\":1,\"1708\":1,\"1711\":1,\"1712\":1,\"1713\":1,\"1715\":1,\"1718\":2,\"1730\":1,\"1943\":4}}],[\"v8\",{\"1\":{\"1680\":1}}],[\"v8引擎执行javascript的速度非常快\",{\"1\":{\"83\":1}}],[\"vjuː\",{\"1\":{\"1611\":1}}],[\"v4\",{\"1\":{\"1561\":1,\"2748\":1,\"2885\":1}}],[\"v1\",{\"1\":{\"1442\":2}}],[\"vs\",{\"0\":{\"762\":1}}],[\"vss\",{\"1\":{\"723\":1}}],[\"voluptatem\",{\"1\":{\"1606\":2}}],[\"volatile\",{\"1\":{\"316\":1}}],[\"voidclass\",{\"1\":{\"581\":1}}],[\"void\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"30\":2,\"32\":2,\"219\":1,\"220\":1,\"234\":2,\"238\":3,\"239\":2,\"240\":4,\"241\":3,\"242\":1,\"244\":9,\"245\":2,\"247\":1,\"248\":1,\"251\":1,\"260\":1,\"262\":5,\"263\":1,\"265\":1,\"266\":1,\"274\":4,\"275\":4,\"278\":2,\"279\":1,\"281\":1,\"283\":1,\"286\":1,\"287\":9,\"288\":1,\"292\":1,\"294\":4,\"300\":1,\"303\":1,\"305\":2,\"306\":2,\"309\":4,\"315\":1,\"316\":1,\"318\":1,\"324\":1,\"327\":3,\"328\":1,\"337\":2,\"338\":1,\"348\":1,\"349\":1,\"352\":3,\"356\":6,\"357\":1,\"364\":1,\"367\":1,\"368\":1,\"371\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"379\":1,\"380\":1,\"382\":1,\"387\":1,\"390\":1,\"392\":1,\"395\":1,\"396\":1,\"405\":3,\"407\":3,\"408\":1,\"409\":1,\"412\":2,\"415\":1,\"418\":1,\"421\":1,\"422\":2,\"425\":1,\"428\":4,\"431\":1,\"438\":2,\"440\":2,\"441\":2,\"442\":2,\"445\":2,\"446\":2,\"450\":1,\"457\":3,\"458\":2,\"459\":1,\"460\":2,\"461\":1,\"465\":1,\"471\":2,\"478\":2,\"479\":3,\"480\":1,\"489\":8,\"490\":8,\"503\":1,\"506\":1,\"509\":2,\"510\":2,\"511\":4,\"512\":4,\"513\":5,\"515\":2,\"516\":2,\"517\":2,\"518\":2,\"523\":2,\"525\":4,\"538\":1,\"541\":2,\"542\":2,\"543\":1,\"545\":3,\"546\":3,\"560\":1,\"561\":1,\"562\":1,\"563\":7,\"564\":1,\"568\":9,\"576\":3,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":3,\"585\":1,\"587\":1,\"588\":1,\"591\":1,\"594\":1,\"816\":7,\"817\":7,\"820\":3,\"825\":3,\"826\":3,\"828\":1,\"829\":1,\"830\":1,\"831\":1,\"832\":1,\"835\":2,\"837\":2,\"838\":1,\"839\":2,\"840\":2,\"842\":2,\"843\":2,\"844\":2,\"845\":1,\"847\":2,\"848\":2,\"850\":1,\"852\":1,\"853\":1,\"854\":1,\"856\":2,\"859\":2,\"860\":1,\"861\":1,\"862\":2,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":1,\"868\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":3,\"874\":1,\"875\":1,\"876\":1,\"878\":1,\"879\":1,\"880\":1,\"881\":2,\"882\":1,\"883\":1,\"885\":1,\"886\":1,\"887\":1,\"888\":5,\"889\":5,\"891\":1,\"893\":3,\"895\":1,\"896\":1,\"897\":1,\"898\":1,\"899\":2,\"900\":1,\"901\":1,\"904\":2,\"905\":1,\"1215\":1,\"1217\":1,\"1219\":2,\"1220\":2,\"1221\":2,\"1222\":2,\"1223\":1,\"1226\":3,\"1227\":1,\"1231\":2,\"1234\":2,\"1235\":2,\"1241\":4,\"1242\":1,\"1252\":1,\"1253\":5,\"1255\":4,\"1259\":1,\"1264\":4,\"1274\":1,\"1280\":1,\"1288\":1,\"1304\":1,\"1789\":1,\"1790\":1,\"1794\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1825\":3,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":2,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":1,\"1997\":2,\"1998\":3,\"2001\":3,\"2003\":1,\"2004\":1,\"2005\":1,\"2047\":6,\"2049\":1,\"2052\":6,\"2056\":1,\"2057\":3,\"2061\":2,\"2062\":1,\"2063\":3,\"2075\":1,\"2076\":2,\"2077\":3,\"2079\":2,\"2080\":3,\"2081\":2,\"2082\":2,\"2084\":2,\"2085\":3,\"2087\":2,\"2088\":3,\"2095\":1,\"2096\":1,\"2097\":2,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2192\":1,\"2203\":1,\"2204\":1,\"2205\":1,\"2206\":1,\"2208\":1,\"2209\":1,\"2210\":1,\"2211\":1,\"2219\":1,\"2220\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2245\":1,\"2246\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2250\":1,\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2259\":1,\"2260\":2,\"2282\":3,\"2286\":1,\"2293\":1,\"2345\":2,\"2348\":1,\"2351\":1,\"2355\":1,\"2357\":1,\"2359\":1,\"2363\":1,\"2366\":1,\"2369\":1,\"2374\":2,\"2379\":1,\"2386\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":1,\"2444\":2,\"2447\":2,\"2450\":3,\"2453\":1,\"2456\":1,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2475\":1,\"2479\":1,\"2488\":1,\"2503\":1,\"2509\":1,\"2539\":2,\"2540\":1,\"2543\":1,\"2546\":1,\"2553\":2,\"2554\":1,\"2555\":1,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2566\":1,\"2567\":1,\"2571\":4,\"2574\":1,\"2579\":1,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":5,\"2595\":1,\"2596\":1,\"2597\":1,\"2598\":1,\"2599\":1,\"2602\":1,\"2605\":6,\"2609\":7,\"2612\":3,\"2615\":1,\"2635\":5,\"2640\":1,\"2641\":1,\"2642\":1,\"2643\":1,\"2649\":1,\"2651\":1,\"2652\":1,\"2653\":1,\"2672\":1,\"2673\":1,\"2674\":1,\"2678\":1,\"2679\":1,\"2680\":1,\"2697\":1,\"2749\":1,\"2859\":1,\"2863\":1,\"2864\":1}}],[\"v集合\",{\"1\":{\"291\":1}}],[\"v>\",{\"1\":{\"279\":4,\"294\":8,\"311\":1,\"841\":2}}],[\"v=new\",{\"1\":{\"257\":1}}],[\"vitae\",{\"1\":{\"1609\":1}}],[\"visible\",{\"1\":{\"1555\":3}}],[\"visited\",{\"1\":{\"1515\":1}}],[\"virtual\",{\"1\":{\"772\":1}}],[\"video\",{\"1\":{\"208\":4,\"1310\":2}}],[\"view代表视图\",{\"1\":{\"2871\":1}}],[\"viewresolver视图解析器返回解析后的view对象\",{\"1\":{\"2768\":1}}],[\"view>\",{\"1\":{\"1718\":1}}],[\"view><\",{\"1\":{\"1718\":1}}],[\"views\",{\"1\":{\"1686\":1}}],[\"view\",{\"0\":{\"1137\":1,\"2774\":1,\"2775\":1},\"1\":{\"983\":1,\"1139\":1,\"1141\":1,\"1611\":1,\"2034\":1,\"2740\":1,\"2765\":3,\"2774\":5,\"2775\":1,\"2779\":2,\"2780\":2,\"2789\":2,\"2869\":1,\"2870\":1,\"2898\":1,\"2901\":1}}],[\"view视图\",{\"1\":{\"118\":1}}],[\"viewport\",{\"1\":{\"76\":1,\"1595\":1,\"1596\":1,\"1599\":1,\"1690\":1}}],[\"vm类的私有系统属性中\",{\"1\":{\"364\":1}}],[\"vm\",{\"1\":{\"208\":1,\"294\":1,\"364\":1,\"676\":1}}],[\"vmware网络设置\",{\"0\":{\"47\":1},\"1\":{\"7\":1}}],[\"vnd\",{\"1\":{\"208\":3}}],[\"vel\",{\"1\":{\"1609\":2}}],[\"velocity\",{\"1\":{\"122\":1}}],[\"veniam\",{\"1\":{\"1606\":1}}],[\"very\",{\"1\":{\"750\":4,\"1482\":1}}],[\"version>8<\",{\"1\":{\"2186\":1}}],[\"version>4\",{\"1\":{\"699\":1}}],[\"version>\",{\"1\":{\"680\":2,\"683\":5,\"685\":1,\"688\":1,\"699\":1,\"700\":3,\"714\":5,\"715\":4,\"2186\":5,\"2267\":5,\"2292\":1,\"2296\":1,\"2307\":1,\"2311\":1,\"2374\":6,\"2484\":2,\"2500\":5,\"2538\":2,\"2582\":2,\"2614\":1,\"2629\":7,\"2665\":11,\"2748\":3,\"2756\":14,\"2875\":1,\"2885\":1,\"2889\":3,\"2890\":5,\"2891\":6,\"2892\":2,\"2893\":2,\"2894\":2}}],[\"version=\",{\"1\":{\"545\":2,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1791\":2,\"1795\":2,\"1831\":2,\"1834\":2,\"1999\":2,\"2047\":2,\"2058\":2,\"2075\":2,\"2092\":1,\"2267\":1,\"2278\":1,\"2279\":1,\"2312\":1,\"2374\":2,\"2485\":1,\"2487\":1,\"2501\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2746\":2,\"2757\":1,\"2758\":1,\"2759\":2,\"2779\":1,\"2780\":1,\"2789\":1,\"2896\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1,\"2918\":1}}],[\"version\",{\"0\":{\"2289\":1},\"1\":{\"92\":1,\"97\":1,\"538\":1,\"685\":1,\"700\":3,\"721\":1,\"1095\":1,\"1687\":1,\"1775\":1,\"2240\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2247\":1,\"2248\":1,\"2287\":5,\"2289\":2}}],[\"vector<>\",{\"1\":{\"859\":1}}],[\"vector<string>\",{\"1\":{\"859\":1}}],[\"vector里面两个重要的属性\",{\"1\":{\"303\":2}}],[\"vector底层扩容长度为原数组的2倍\",{\"1\":{\"258\":1}}],[\"vector\",{\"1\":{\"257\":2,\"889\":5}}],[\"vector方法以及逐渐退出历史舞台了\",{\"1\":{\"256\":1}}],[\"vector实现类\",{\"0\":{\"256\":1},\"1\":{\"249\":1}}],[\"v\",{\"0\":{\"1619\":1,\"1622\":1,\"1623\":1,\"1625\":1,\"1626\":1,\"1633\":1,\"1634\":1,\"1635\":1,\"1636\":1,\"1639\":1,\"1642\":1,\"1645\":1,\"1648\":1,\"1652\":1,\"2971\":1,\"2997\":1,\"3144\":1,\"3185\":1},\"1\":{\"85\":1,\"90\":2,\"112\":1,\"118\":1,\"279\":6,\"288\":1,\"292\":2,\"294\":5,\"627\":1,\"674\":1,\"748\":1,\"841\":4,\"873\":1,\"1310\":1,\"1559\":1,\"1619\":1,\"1620\":4,\"1621\":5,\"1622\":9,\"1624\":3,\"1626\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":2,\"1632\":1,\"1633\":1,\"1634\":3,\"1635\":4,\"1636\":1,\"1637\":1,\"1638\":4,\"1639\":1,\"1640\":1,\"1642\":1,\"1643\":1,\"1645\":2,\"1648\":1,\"1649\":1,\"1651\":1,\"1652\":1,\"1653\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1680\":1,\"1682\":1,\"1695\":4,\"1698\":6,\"1701\":1,\"2740\":1}}],[\"valid\",{\"1\":{\"2301\":1}}],[\"validator\",{\"1\":{\"1713\":1}}],[\"val会替换\",{\"1\":{\"290\":1}}],[\"val\",{\"1\":{\"290\":1,\"1570\":4,\"1579\":5,\"1586\":5,\"2131\":3,\"2169\":3,\"2170\":3,\"2171\":3,\"2176\":2}}],[\"val对的方式来存储数据key不能重复\",{\"1\":{\"290\":1}}],[\"value注解为注入的bean的属性赋初始值\",{\"1\":{\"2598\":1}}],[\"value的使用\",{\"0\":{\"2598\":1}}],[\"value指的是参数值\",{\"1\":{\"2556\":1}}],[\"value格式\",{\"1\":{\"2140\":1,\"2155\":1}}],[\"valueunbound\",{\"1\":{\"2081\":1}}],[\"valuebound\",{\"1\":{\"2081\":1}}],[\"value是object类型\",{\"1\":{\"1895\":1}}],[\"value>classpath\",{\"1\":{\"2759\":1,\"2910\":1,\"2911\":1}}],[\"value>utf\",{\"1\":{\"2049\":1,\"2058\":1,\"2807\":1,\"2912\":1}}],[\"value>boy<\",{\"1\":{\"2049\":1}}],[\"value>xiaoming<\",{\"1\":{\"2049\":1}}],[\"value>京东方<\",{\"1\":{\"1834\":1}}],[\"value>联想<\",{\"1\":{\"1834\":1}}],[\"value>三星<\",{\"1\":{\"1834\":1}}],[\"value>asus<\",{\"1\":{\"1834\":1}}],[\"value>10<\",{\"1\":{\"2049\":1}}],[\"value>100\",{\"1\":{\"1713\":1}}],[\"value>123456<\",{\"1\":{\"1831\":1}}],[\"value>\",{\"1\":{\"1831\":2,\"1834\":4,\"2049\":4,\"2058\":1,\"2560\":1,\"2566\":9,\"2759\":1,\"2807\":1,\"2910\":1,\"2911\":1,\"2912\":1}}],[\"value>mashibing<\",{\"1\":{\"1831\":1}}],[\"value属性操作标签内部文本和内容\",{\"1\":{\"1570\":1}}],[\"value只是文本框中的值\",{\"1\":{\"1333\":1}}],[\"value可以写正则语法\",{\"1\":{\"1036\":1}}],[\"value2\",{\"1\":{\"1033\":1,\"1034\":2,\"1094\":1}}],[\"value1\",{\"1\":{\"1033\":1,\"1034\":2,\"1035\":1,\"1036\":1,\"1094\":1}}],[\"valueinteger\",{\"1\":{\"364\":1}}],[\"valueof\",{\"1\":{\"363\":4,\"364\":1,\"372\":1,\"373\":1,\"375\":1,\"376\":1,\"431\":1,\"562\":2,\"1405\":1,\"1415\":1,\"1893\":1,\"1927\":2,\"1928\":2}}],[\"value封装为一个对象\",{\"1\":{\"294\":1}}],[\"value+1\",{\"1\":{\"364\":1}}],[\"value+\",{\"1\":{\"292\":1}}],[\"values\",{\"1\":{\"291\":1,\"292\":6,\"562\":4,\"859\":3,\"970\":1,\"971\":1,\"972\":7,\"1082\":1,\"1211\":23,\"1215\":1,\"1217\":1,\"1219\":1,\"1231\":1,\"1235\":1,\"1239\":1,\"1253\":1,\"1264\":1,\"1267\":1,\"2183\":1,\"2301\":1,\"2362\":1,\"2409\":1,\"2410\":1,\"2417\":14,\"2454\":1,\"2674\":1,\"2678\":1,\"2695\":2,\"2881\":2}}],[\"value\",{\"0\":{\"1501\":1,\"2810\":1},\"1\":{\"177\":1,\"199\":1,\"279\":10,\"288\":3,\"292\":3,\"294\":12,\"336\":1,\"338\":1,\"363\":1,\"364\":11,\"392\":2,\"404\":1,\"587\":1,\"904\":4,\"1094\":1,\"1198\":1,\"1333\":1,\"1347\":1,\"1408\":2,\"1409\":3,\"1412\":3,\"1439\":1,\"1442\":1,\"1451\":2,\"1458\":1,\"1493\":2,\"1494\":2,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":3,\"1570\":1,\"1713\":1,\"1849\":1,\"1887\":1,\"1889\":1,\"1892\":4,\"1898\":1,\"1957\":1,\"2018\":1,\"2029\":1,\"2030\":1,\"2052\":2,\"2077\":3,\"2114\":1,\"2176\":2,\"2228\":1,\"2230\":2,\"2234\":3,\"2334\":2,\"2509\":1,\"2587\":1,\"2591\":1,\"2592\":1,\"2593\":1,\"2598\":3,\"2599\":3,\"2635\":5,\"2641\":1,\"2642\":1,\"2644\":1,\"2651\":1,\"2652\":1,\"2653\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":4,\"2835\":2,\"2840\":1,\"2845\":1,\"2850\":1,\"2855\":1,\"2857\":6}}],[\"value<\",{\"1\":{\"133\":1}}],[\"value=0\",{\"1\":{\"2235\":1}}],[\"value=1\",{\"1\":{\"2235\":1}}],[\"value=present\",{\"1\":{\"279\":2}}],[\"value=\",{\"1\":{\"65\":1,\"129\":2,\"1331\":1,\"1333\":2,\"1335\":2,\"1336\":4,\"1338\":1,\"1339\":1,\"1340\":6,\"1347\":1,\"1379\":1,\"1380\":3,\"1439\":7,\"1442\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":2,\"1459\":2,\"1460\":2,\"1462\":1,\"1463\":3,\"1488\":1,\"1489\":1,\"1490\":4,\"1491\":4,\"1493\":2,\"1494\":2,\"1496\":1,\"1497\":1,\"1499\":2,\"1500\":2,\"1501\":2,\"1505\":1,\"1514\":5,\"1555\":8,\"1567\":4,\"1568\":4,\"1570\":4,\"1571\":8,\"1572\":3,\"1579\":1,\"1586\":1,\"1588\":3,\"1589\":3,\"1590\":4,\"1793\":1,\"2018\":4,\"2020\":4,\"2031\":2,\"2055\":1,\"2060\":1,\"2094\":1,\"2128\":1,\"2131\":1,\"2132\":2,\"2159\":1,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2278\":4,\"2315\":1,\"2317\":1,\"2318\":1,\"2332\":6,\"2334\":4,\"2374\":7,\"2434\":2,\"2458\":1,\"2459\":1,\"2501\":4,\"2557\":3,\"2558\":6,\"2560\":1,\"2562\":1,\"2563\":2,\"2564\":2,\"2566\":3,\"2571\":1,\"2574\":1,\"2584\":4,\"2666\":4,\"2765\":2,\"2779\":2,\"2780\":2,\"2789\":2,\"2793\":3,\"2794\":3,\"2796\":5,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":6,\"2851\":1,\"2856\":1,\"2857\":1,\"2859\":1,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2877\":1,\"2901\":1,\"2903\":7,\"2906\":4,\"2907\":3,\"2914\":1}}],[\"varl\",{\"1\":{\"2638\":1}}],[\"var1\",{\"1\":{\"2379\":1,\"2380\":1}}],[\"var属性的作用域\",{\"1\":{\"2029\":1}}],[\"varstatus=\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"varstatus\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"var=\",{\"1\":{\"2018\":4,\"2019\":4,\"2022\":6,\"2025\":3,\"2031\":1}}],[\"variables\",{\"1\":{\"1106\":1,\"1156\":1}}],[\"varbinary表示定长和不定长的字节个数\",{\"1\":{\"972\":1}}],[\"varbinary\",{\"1\":{\"941\":1}}],[\"varchar类型的长度可变\",{\"1\":{\"941\":1}}],[\"varchar\",{\"1\":{\"937\":6,\"941\":1,\"955\":3,\"965\":3,\"972\":1,\"987\":3,\"993\":2,\"999\":2,\"1006\":2,\"1011\":2,\"1016\":2,\"1020\":2,\"1147\":2,\"1156\":1,\"1211\":6,\"1239\":2,\"2182\":2,\"2417\":1,\"2695\":1,\"2881\":2}}],[\"vary\",{\"0\":{\"202\":1}}],[\"var在编译的过程中\",{\"1\":{\"73\":1}}],[\"var可以多次声明一个变量\",{\"1\":{\"73\":1}}],[\"var声明的变量时全局成员变量\",{\"1\":{\"73\":1}}],[\"var的区别\",{\"1\":{\"73\":1}}],[\"var\",{\"1\":{\"65\":3,\"73\":5,\"75\":4,\"1354\":1,\"1355\":2,\"1356\":1,\"1357\":1,\"1358\":1,\"1359\":2,\"1362\":1,\"1363\":4,\"1364\":4,\"1366\":1,\"1367\":5,\"1369\":4,\"1370\":3,\"1374\":1,\"1383\":1,\"1384\":1,\"1385\":2,\"1386\":1,\"1388\":2,\"1389\":3,\"1391\":2,\"1392\":7,\"1393\":2,\"1394\":2,\"1395\":1,\"1396\":1,\"1397\":2,\"1398\":1,\"1399\":2,\"1400\":1,\"1401\":2,\"1406\":13,\"1409\":2,\"1412\":2,\"1414\":4,\"1415\":2,\"1416\":6,\"1417\":3,\"1419\":1,\"1420\":1,\"1421\":2,\"1424\":2,\"1425\":2,\"1442\":2,\"1455\":1,\"1456\":1,\"1458\":8,\"1459\":7,\"1488\":1,\"1489\":2,\"1490\":2,\"1491\":2,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":2,\"1500\":2,\"1501\":1,\"1505\":5,\"1544\":2,\"1555\":13,\"1571\":6,\"1572\":1,\"1573\":2,\"1574\":3,\"1579\":9,\"1585\":5,\"1586\":8,\"1613\":4,\"1616\":1,\"1617\":1,\"1718\":2,\"2018\":1,\"2022\":1,\"2025\":2,\"2029\":1,\"2030\":1,\"2031\":1,\"2114\":6,\"2120\":2,\"2124\":6,\"2125\":2,\"2126\":2,\"2128\":5,\"2322\":3}}],[\"e简介\",{\"0\":{\"3121\":1}}],[\"e技术\",{\"0\":{\"2955\":1}}],[\"e阶段\",{\"0\":{\"2936\":1}}],[\"ehcachecache\",{\"1\":{\"2486\":1}}],[\"ehcache便会采用\",{\"1\":{\"2485\":1}}],[\"ehcache>\",{\"1\":{\"2485\":1}}],[\"ehcache<\",{\"1\":{\"2484\":1}}],[\"ehcache整合包\",{\"1\":{\"2484\":1}}],[\"ehcache\",{\"0\":{\"2482\":1},\"1\":{\"2482\":2,\"2485\":2,\"2486\":1}}],[\"effectivesqlsingleline\",{\"1\":{\"2301\":1}}],[\"effectivesql\",{\"1\":{\"2301\":1}}],[\"e6\",{\"1\":{\"2213\":1}}],[\"e+\",{\"1\":{\"1831\":1}}],[\"ejb\",{\"1\":{\"1732\":1,\"2520\":1}}],[\"edition\",{\"1\":{\"1732\":1}}],[\"e2e\",{\"1\":{\"1683\":1}}],[\"eternal=\",{\"1\":{\"2485\":1}}],[\"et\",{\"1\":{\"1606\":1}}],[\"etags\",{\"1\":{\"1198\":1}}],[\"epsilon\",{\"1\":{\"1408\":1}}],[\"eiusmod\",{\"1\":{\"1606\":1}}],[\"eich\",{\"1\":{\"1372\":1}}],[\"eid\",{\"1\":{\"1081\":2}}],[\"e5\",{\"1\":{\"1330\":2,\"2213\":1}}],[\"e8\",{\"1\":{\"1330\":2}}],[\"eg\",{\"1\":{\"1113\":1,\"1184\":1}}],[\"em\",{\"1\":{\"1579\":3,\"1586\":2}}],[\"emil\",{\"1\":{\"1392\":2}}],[\"embed>\",{\"1\":{\"1310\":3}}],[\"emsp\",{\"1\":{\"1301\":1}}],[\"em>\",{\"1\":{\"1187\":1,\"1548\":1}}],[\"empid\",{\"1\":{\"2714\":2,\"2715\":2,\"2716\":2,\"2717\":2}}],[\"empcount\",{\"1\":{\"2672\":2}}],[\"empcolumn\",{\"1\":{\"2462\":2}}],[\"empbeanpropertyrowmapper\",{\"1\":{\"2672\":2,\"2673\":2}}],[\"emp表中的员工和上级\",{\"1\":{\"2440\":1}}],[\"emp类的属性名\",{\"1\":{\"2425\":1}}],[\"emp1==emp2\",{\"1\":{\"2479\":1,\"2488\":1}}],[\"emp1list\",{\"1\":{\"2428\":2}}],[\"emp1\",{\"1\":{\"2401\":1,\"2402\":1,\"2403\":3,\"2404\":3,\"2428\":2,\"2479\":1,\"2488\":1,\"2579\":1}}],[\"emplist\",{\"1\":{\"2379\":2,\"2406\":2,\"2407\":2,\"2425\":2,\"2435\":2,\"2444\":4,\"2447\":4,\"2450\":6,\"2459\":2,\"2462\":2,\"2466\":2,\"2467\":2}}],[\"employees\",{\"1\":{\"1081\":1,\"1082\":2}}],[\"employee\",{\"1\":{\"1068\":5,\"1081\":1,\"1082\":1,\"1211\":1}}],[\"emp映射器\",{\"1\":{\"2374\":1}}],[\"empmap\",{\"1\":{\"2356\":1,\"2425\":2}}],[\"empmapper2\",{\"1\":{\"2444\":4,\"2447\":4,\"2450\":6,\"2453\":2,\"2456\":2,\"2462\":2,\"2466\":2,\"2467\":2}}],[\"empmapper接口\",{\"0\":{\"2384\":1,\"2393\":1,\"2397\":1},\"1\":{\"2388\":1,\"2389\":1,\"2390\":1,\"2401\":1,\"2402\":1,\"2403\":1}}],[\"empmapper\",{\"0\":{\"2385\":1,\"2394\":1,\"2398\":1},\"1\":{\"2345\":1,\"2348\":1,\"2374\":4,\"2379\":2,\"2386\":2,\"2388\":1,\"2389\":1,\"2390\":1,\"2391\":2,\"2395\":2,\"2399\":2,\"2401\":1,\"2402\":1,\"2403\":1,\"2404\":2,\"2406\":4,\"2407\":4,\"2425\":4,\"2435\":4,\"2444\":2,\"2447\":2,\"2450\":2,\"2453\":2,\"2456\":2,\"2459\":3,\"2462\":2,\"2466\":2,\"2467\":2,\"2479\":5,\"2488\":4}}],[\"empserviceimpl\",{\"1\":{\"2667\":2}}],[\"empservice\",{\"1\":{\"2667\":3,\"2672\":5,\"2673\":4,\"2674\":6}}],[\"empservlet\",{\"1\":{\"1976\":2}}],[\"empstatus\",{\"1\":{\"2025\":6,\"2031\":6}}],[\"emps\",{\"1\":{\"1976\":4,\"2025\":4,\"2031\":4}}],[\"empdao=new\",{\"1\":{\"1976\":1}}],[\"empdaoimpl\",{\"1\":{\"1976\":2,\"2631\":2,\"2667\":1,\"2672\":1,\"2673\":1,\"2674\":1}}],[\"empdao\",{\"1\":{\"1263\":1,\"1976\":3,\"2631\":4,\"2667\":11,\"2714\":1,\"2715\":1,\"2716\":1,\"2717\":1}}],[\"empno=\",{\"1\":{\"2365\":1,\"2368\":1,\"2385\":1}}],[\"empno=resultset\",{\"1\":{\"1976\":1}}],[\"empno\",{\"1\":{\"1211\":16,\"1976\":3,\"2025\":1,\"2031\":1,\"2344\":1,\"2351\":1,\"2354\":3,\"2362\":1,\"2365\":1,\"2368\":1,\"2374\":1,\"2384\":1,\"2385\":1,\"2423\":1,\"2425\":6,\"2428\":3,\"2429\":2,\"2431\":7,\"2435\":1,\"2444\":4,\"2447\":4,\"2450\":5,\"2453\":3,\"2456\":3,\"2462\":1,\"2464\":1,\"2466\":5,\"2467\":5,\"2631\":2,\"2667\":11,\"2672\":3,\"2674\":4}}],[\"emp2\",{\"1\":{\"1082\":1,\"2401\":1,\"2402\":1,\"2403\":3,\"2404\":3,\"2479\":1,\"2488\":1,\"2579\":2}}],[\"emp\",{\"1\":{\"1068\":2,\"1147\":5,\"1211\":18,\"1263\":3,\"1976\":10,\"2025\":20,\"2031\":20,\"2344\":3,\"2345\":6,\"2347\":2,\"2350\":1,\"2354\":3,\"2355\":3,\"2356\":2,\"2358\":4,\"2359\":6,\"2361\":2,\"2362\":2,\"2363\":4,\"2364\":2,\"2365\":2,\"2366\":6,\"2367\":2,\"2368\":1,\"2374\":1,\"2377\":1,\"2378\":2,\"2384\":1,\"2385\":2,\"2386\":1,\"2388\":2,\"2389\":2,\"2390\":2,\"2394\":2,\"2397\":2,\"2398\":3,\"2399\":6,\"2401\":4,\"2402\":4,\"2403\":4,\"2404\":4,\"2406\":2,\"2407\":2,\"2417\":1,\"2423\":1,\"2425\":3,\"2426\":1,\"2428\":1,\"2429\":1,\"2431\":5,\"2435\":6,\"2444\":16,\"2447\":16,\"2450\":23,\"2453\":13,\"2456\":13,\"2459\":3,\"2462\":3,\"2466\":3,\"2467\":3,\"2480\":1,\"2579\":7,\"2667\":24,\"2672\":5,\"2673\":2,\"2674\":30}}],[\"empty\",{\"1\":{\"303\":1,\"852\":1,\"853\":1,\"1386\":2,\"1570\":1,\"1571\":3,\"1985\":1,\"1991\":5}}],[\"emailtip\",{\"1\":{\"1579\":3,\"1586\":3}}],[\"email唯一\",{\"1\":{\"937\":1}}],[\"email等信息\",{\"1\":{\"937\":2}}],[\"email\",{\"1\":{\"726\":1,\"731\":1,\"773\":1,\"937\":1,\"955\":1,\"1081\":1,\"1345\":3,\"1555\":2,\"1579\":2,\"1586\":2,\"2182\":1,\"2183\":1,\"2190\":1,\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2239\":2,\"2240\":1,\"2242\":1,\"2243\":3,\"2244\":1,\"2247\":1,\"2248\":1,\"2250\":2,\"2253\":3,\"2254\":1,\"2256\":4,\"2258\":1,\"2259\":1,\"2260\":8}}],[\"emulator\",{\"1\":{\"725\":1}}],[\"eager\",{\"1\":{\"2433\":2,\"2434\":1}}],[\"ea\",{\"1\":{\"1606\":1}}],[\"easyui<\",{\"1\":{\"1552\":1}}],[\"ear\",{\"1\":{\"772\":1}}],[\"eat\",{\"1\":{\"538\":1,\"541\":2,\"542\":1,\"576\":2,\"1419\":2,\"1420\":2,\"1421\":2,\"1423\":1,\"1424\":3,\"1425\":3,\"2609\":5,\"2612\":4,\"2615\":4}}],[\"each每拿出一个元素\",{\"1\":{\"1574\":1}}],[\"each的语法\",{\"1\":{\"147\":1}}],[\"each久写在这个标签上\",{\"1\":{\"147\":1}}],[\"each写在什么标签上\",{\"1\":{\"147\":1}}],[\"each=\",{\"1\":{\"147\":3}}],[\"each\",{\"1\":{\"65\":1,\"147\":1,\"294\":1,\"1574\":2,\"2132\":2,\"2166\":3,\"2176\":1}}],[\"e类ip地址\",{\"1\":{\"493\":1}}],[\"err\",{\"1\":{\"772\":1,\"1285\":1,\"2308\":1,\"2312\":1,\"2374\":1,\"2896\":1}}],[\"errorcontext\",{\"1\":{\"2493\":1}}],[\"errorthrown\",{\"1\":{\"2145\":1,\"2155\":1}}],[\"error404\",{\"1\":{\"1960\":1}}],[\"error500\",{\"1\":{\"1960\":2}}],[\"errorpage优先级更高\",{\"1\":{\"1960\":1}}],[\"errorpage=\",{\"1\":{\"1960\":1}}],[\"errorpage\",{\"1\":{\"1959\":1,\"1960\":1}}],[\"error页面\",{\"1\":{\"1958\":1}}],[\"error\",{\"0\":{\"2145\":1},\"1\":{\"772\":1,\"1286\":1,\"1287\":1,\"1606\":2,\"1960\":4,\"2155\":1,\"2301\":1,\"2487\":1}}],[\"error错误\",{\"1\":{\"29\":1}}],[\"erlang\",{\"1\":{\"572\":1}}],[\"era\",{\"1\":{\"374\":1}}],[\"eqequals\",{\"1\":{\"1985\":1}}],[\"eq\",{\"0\":{\"2240\":1},\"1\":{\"316\":2,\"1551\":1,\"1552\":2,\"1988\":1,\"1991\":1,\"2240\":1,\"2246\":1,\"2259\":1,\"2260\":6}}],[\"equals相比一样\",{\"1\":{\"294\":1}}],[\"equals\",{\"1\":{\"219\":3,\"265\":1,\"266\":1,\"279\":2,\"281\":2,\"292\":2,\"294\":1,\"364\":4,\"386\":2,\"387\":1,\"389\":2,\"422\":1,\"431\":1,\"511\":2,\"512\":2,\"513\":2,\"518\":2,\"568\":4,\"846\":1,\"869\":1,\"873\":1,\"1552\":1,\"1794\":2,\"1892\":1,\"1893\":1,\"1909\":2,\"1985\":3,\"2115\":1,\"2131\":1,\"2170\":1,\"2171\":1,\"2299\":1,\"2509\":1,\"2609\":1,\"2615\":1}}],[\"equiv=\",{\"1\":{\"76\":1,\"1293\":2,\"1690\":1}}],[\"e再指向下一个节点继续遍历\",{\"1\":{\"294\":1}}],[\"eval\",{\"1\":{\"1406\":1}}],[\"eviction\",{\"1\":{\"2481\":1}}],[\"eviction=\",{\"1\":{\"2481\":1}}],[\"evict\",{\"1\":{\"279\":2}}],[\"event\",{\"1\":{\"1374\":1,\"2081\":2}}],[\"even\",{\"1\":{\"147\":1,\"1545\":1,\"1551\":1,\"1552\":4}}],[\"e==null\",{\"1\":{\"294\":1}}],[\"e=\",{\"1\":{\"279\":1}}],[\"e是一个泛型\",{\"1\":{\"263\":1}}],[\"ee规范的具体实现\",{\"1\":{\"1735\":1}}],[\"ee企业版\",{\"1\":{\"809\":1}}],[\"ee\",{\"1\":{\"265\":1,\"266\":1,\"300\":1,\"809\":1,\"1545\":1,\"1775\":2}}],[\"eeeee\",{\"1\":{\"260\":4}}],[\"eecharts中各种内容\",{\"1\":{\"62\":1}}],[\"e>\",{\"1\":{\"219\":3}}],[\"elapsed\",{\"1\":{\"2299\":3}}],[\"eladd\",{\"1\":{\"1613\":2}}],[\"el如果获取的是null值\",{\"1\":{\"1980\":1}}],[\"el表达式运算符的使用\",{\"0\":{\"1986\":1}}],[\"el表达式对运算符的支持\",{\"0\":{\"1984\":1}}],[\"el表达式底层是通过反射实现的\",{\"1\":{\"1983\":1}}],[\"el表达式是一种后台技术\",{\"1\":{\"1983\":1}}],[\"el表达式定义在jsp页面上\",{\"1\":{\"1983\":1}}],[\"el表达式获取请求中的参数\",{\"1\":{\"1982\":1}}],[\"el表达式会自动依次到四个域中去找数据\",{\"1\":{\"1981\":1}}],[\"el表达式在取出数据的时候是可以省略域标志的\",{\"1\":{\"1981\":1}}],[\"el表达式在使用时是不需要import其他类的\",{\"1\":{\"1980\":1}}],[\"el表达式在获取对象属性值得时候\",{\"1\":{\"1980\":1}}],[\"el表达式取出域中的数据\",{\"0\":{\"1979\":1}}],[\"el表达式中定义了一些可以帮助我们快捷从域对象中取出数据的写法\",{\"1\":{\"1978\":1}}],[\"el表达式的使用\",{\"0\":{\"1977\":1},\"1\":{\"211\":1}}],[\"elreduce\",{\"1\":{\"1613\":2}}],[\"elnubmer\",{\"1\":{\"1613\":4}}],[\"elit\",{\"1\":{\"1606\":1,\"1609\":2}}],[\"elem3\",{\"1\":{\"1548\":2}}],[\"elem2\",{\"1\":{\"1548\":2}}],[\"elem1\",{\"1\":{\"1548\":2}}],[\"element2\",{\"1\":{\"1499\":2,\"1500\":2,\"1501\":2}}],[\"element1\",{\"1\":{\"1488\":3,\"1499\":2,\"1500\":2}}],[\"elementtype\",{\"1\":{\"905\":2}}],[\"elementdequeued\",{\"1\":{\"328\":1}}],[\"elementdata\",{\"1\":{\"303\":2}}],[\"elements\",{\"1\":{\"316\":3,\"1489\":4,\"1490\":4,\"1491\":4}}],[\"elementcount\",{\"1\":{\"303\":2}}],[\"element\",{\"1\":{\"251\":4,\"260\":2,\"263\":2,\"1496\":4,\"1497\":2}}],[\"ellojh\",{\"1\":{\"1406\":1}}],[\"elloj\",{\"1\":{\"1406\":1}}],[\"el7\",{\"1\":{\"809\":1,\"810\":1}}],[\"el\",{\"1\":{\"809\":1,\"1614\":1,\"1616\":1,\"1617\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1718\":1,\"1730\":1}}],[\"else=\",{\"1\":{\"1622\":1}}],[\"else的使用前提是必须先有v\",{\"1\":{\"1622\":1}}],[\"else>当前数值大于15<\",{\"1\":{\"1622\":1}}],[\"else\",{\"0\":{\"1622\":2},\"1\":{\"17\":3,\"32\":1,\"262\":1,\"263\":2,\"279\":3,\"288\":2,\"305\":1,\"306\":1,\"387\":1,\"489\":1,\"490\":1,\"511\":2,\"512\":2,\"513\":2,\"850\":1,\"854\":2,\"1094\":4,\"1147\":2,\"1274\":4,\"1280\":4,\"1288\":4,\"1366\":4,\"1544\":2,\"1617\":1,\"1622\":4,\"1794\":1,\"1893\":1,\"1909\":1,\"1910\":1,\"1976\":6,\"2063\":1,\"2088\":1,\"2096\":1,\"2115\":1,\"2131\":1,\"2170\":1,\"2171\":1,\"2493\":1,\"2609\":1,\"2615\":1,\"2916\":1}}],[\"enhancer\",{\"1\":{\"2615\":7}}],[\"environments>\",{\"1\":{\"2278\":1,\"2374\":1}}],[\"environment>\",{\"1\":{\"2278\":1,\"2374\":1}}],[\"engine\",{\"1\":{\"2297\":1,\"2298\":5,\"2299\":1,\"2300\":3,\"2301\":10,\"2417\":2}}],[\"engine把httpservletresponse对象返回connector\",{\"1\":{\"1769\":1}}],[\"engine匹配到名为localhost的host虚拟主机来处理\",{\"1\":{\"1769\":1}}],[\"engine获得请求localhost\",{\"1\":{\"1769\":1}}],[\"engine需要defaulthost属性来为其定义一个接收所有发往非明确定义虚拟主机的请求的host组件\",{\"1\":{\"1766\":1}}],[\"engine是servlet处理器的一个实例\",{\"1\":{\"1766\":1}}],[\"engine组件的名称\",{\"1\":{\"1766\":1}}],[\"engine组件\",{\"0\":{\"1766\":1},\"1\":{\"1769\":1}}],[\"engine=innodb\",{\"1\":{\"923\":1,\"937\":1,\"965\":1,\"1239\":1,\"2695\":1,\"2881\":1}}],[\"enim\",{\"1\":{\"1606\":1}}],[\"enableaspectjautoproxy\",{\"1\":{\"2649\":1}}],[\"enablesubpackages\",{\"1\":{\"2501\":3}}],[\"enableswagger\",{\"1\":{\"2293\":1}}],[\"enable\",{\"1\":{\"1690\":1,\"2334\":1}}],[\"enabled\",{\"1\":{\"1555\":3,\"1690\":1}}],[\"ename=\",{\"1\":{\"2365\":1}}],[\"ename=resultset\",{\"1\":{\"1976\":1}}],[\"ename\",{\"1\":{\"1068\":2,\"1147\":3,\"1211\":16,\"1976\":3,\"2025\":2,\"2031\":2,\"2362\":1,\"2365\":1,\"2374\":1,\"2406\":3,\"2407\":3,\"2425\":3,\"2428\":3,\"2431\":2,\"2435\":1,\"2444\":4,\"2447\":4,\"2450\":4,\"2453\":5,\"2456\":5,\"2459\":2,\"2462\":2,\"2631\":2,\"2667\":1,\"2674\":1}}],[\"enumeration\",{\"1\":{\"2048\":1}}],[\"enumeration<string>\",{\"1\":{\"1800\":1,\"1801\":1,\"1831\":1,\"2049\":1,\"2052\":1}}],[\"enum关键字对应的枚举类的上层父类是\",{\"1\":{\"561\":1}}],[\"enum\",{\"1\":{\"561\":4,\"562\":1,\"563\":1}}],[\"enqueue\",{\"1\":{\"328\":1,\"334\":1,\"338\":1}}],[\"ensures\",{\"1\":{\"294\":1}}],[\"encoder>\",{\"1\":{\"2487\":1}}],[\"encodename\",{\"1\":{\"1892\":2}}],[\"encode\",{\"1\":{\"203\":1,\"1889\":1,\"1892\":1}}],[\"encodingfilter<\",{\"1\":{\"2058\":1}}],[\"encodingfilter\",{\"1\":{\"2057\":1}}],[\"encoding=\",{\"1\":{\"545\":1,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2092\":1,\"2267\":1,\"2278\":1,\"2279\":1,\"2312\":1,\"2374\":2,\"2485\":1,\"2487\":1,\"2501\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2746\":1,\"2757\":1,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2896\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1,\"2918\":1}}],[\"encoding\",{\"0\":{\"203\":1},\"1\":{\"177\":1,\"1755\":1}}],[\"entity\",{\"1\":{\"1263\":1,\"1960\":1,\"2289\":3,\"2509\":1}}],[\"enterdate\",{\"1\":{\"937\":1,\"955\":1,\"972\":1}}],[\"enter\",{\"1\":{\"610\":1,\"620\":1,\"623\":1,\"638\":1,\"646\":2,\"1665\":1}}],[\"enter以调用显示上下文操作\",{\"1\":{\"607\":1}}],[\"enter显示可能的选项\",{\"1\":{\"604\":1}}],[\"enter可以打开警告预览进行修复\",{\"1\":{\"604\":1}}],[\"enterprise\",{\"1\":{\"61\":1,\"1732\":1,\"1775\":1}}],[\"entries\",{\"1\":{\"292\":3,\"859\":2,\"1801\":2}}],[\"entry>\",{\"1\":{\"2566\":3}}],[\"entry<object\",{\"1\":{\"2351\":1}}],[\"entry<>\",{\"1\":{\"294\":1}}],[\"entry<k\",{\"1\":{\"294\":5}}],[\"entry<string\",{\"1\":{\"291\":1,\"292\":4,\"859\":2,\"1801\":2}}],[\"entryset\",{\"1\":{\"291\":1,\"292\":2,\"859\":1,\"1801\":1,\"2351\":1}}],[\"entry\",{\"1\":{\"114\":1,\"292\":3,\"294\":5,\"1216\":1,\"1801\":3}}],[\"end=\",{\"1\":{\"2025\":2}}],[\"ending\",{\"1\":{\"725\":1}}],[\"endtime\",{\"1\":{\"309\":6,\"356\":10,\"371\":2}}],[\"end\",{\"1\":{\"88\":1,\"260\":4,\"888\":4,\"1094\":2,\"1147\":4,\"1185\":1,\"2025\":1}}],[\"en\",{\"1\":{\"85\":1,\"772\":1,\"1690\":1,\"1793\":1,\"1870\":1,\"1907\":1,\"1908\":1,\"1927\":1,\"2132\":2,\"2159\":2,\"2166\":1,\"2278\":1,\"2279\":1,\"2374\":2,\"2501\":1,\"2918\":1}}],[\"eslintconfig\",{\"1\":{\"1687\":1}}],[\"eslint\",{\"1\":{\"94\":2,\"1683\":1}}],[\"es标准中不包含\",{\"1\":{\"72\":1}}],[\"es2017\",{\"1\":{\"71\":2}}],[\"es2016\",{\"1\":{\"71\":2}}],[\"es2015\",{\"1\":{\"71\":3,\"98\":1}}],[\"es6使用\",{\"1\":{\"105\":1,\"108\":1}}],[\"es6模块规范另一种写法\",{\"0\":{\"108\":1}}],[\"es6模块规范\",{\"0\":{\"105\":1}}],[\"es6与es5的关系\",{\"0\":{\"71\":1}}],[\"es6与javascript的关系\",{\"0\":{\"70\":1}}],[\"es6与node\",{\"0\":{\"67\":1},\"1\":{\"11\":1}}],[\"es6简介\",{\"0\":{\"69\":1}}],[\"es6\",{\"0\":{\"68\":1},\"1\":{\"68\":2,\"71\":5,\"96\":1}}],[\"eclipse特定文件\",{\"0\":{\"767\":1}}],[\"ecma\",{\"1\":{\"70\":3,\"1372\":5}}],[\"ecmascript可以理解为js的基础语法部分\",{\"1\":{\"1372\":1}}],[\"ecmascript描述了语法\",{\"1\":{\"1372\":1}}],[\"ecmascript\",{\"1\":{\"68\":1,\"70\":3,\"71\":3,\"1372\":2}}],[\"echcarts的组件\",{\"0\":{\"62\":1}}],[\"echarts\",{\"1\":{\"61\":8,\"62\":1,\"65\":3}}],[\"echarts动态图表\",{\"0\":{\"59\":1,\"2982\":1},\"1\":{\"11\":1}}],[\"e\",{\"0\":{\"2955\":1,\"2968\":1,\"2984\":1,\"3053\":1,\"3121\":1,\"3141\":1,\"3182\":1},\"1\":{\"30\":6,\"32\":4,\"48\":1,\"219\":6,\"238\":3,\"241\":2,\"251\":6,\"260\":22,\"263\":9,\"279\":14,\"294\":22,\"316\":9,\"319\":3,\"324\":8,\"327\":5,\"328\":4,\"333\":2,\"338\":4,\"348\":6,\"349\":6,\"356\":2,\"357\":3,\"374\":3,\"386\":1,\"387\":3,\"389\":1,\"408\":1,\"431\":1,\"438\":2,\"440\":2,\"441\":2,\"445\":2,\"457\":4,\"460\":2,\"489\":4,\"490\":4,\"512\":28,\"513\":30,\"517\":8,\"518\":8,\"645\":2,\"891\":2,\"1093\":1,\"1217\":6,\"1219\":6,\"1220\":6,\"1221\":6,\"1222\":6,\"1227\":6,\"1231\":6,\"1234\":1,\"1235\":5,\"1242\":6,\"1252\":8,\"1253\":26,\"1264\":12,\"1266\":14,\"1274\":8,\"1275\":10,\"1279\":2,\"1280\":8,\"1283\":2,\"1288\":10,\"1406\":2,\"1411\":4,\"1574\":5,\"1825\":4,\"1831\":2,\"1975\":1,\"1976\":9,\"2022\":1,\"2023\":1,\"2029\":1,\"2030\":1,\"2087\":2,\"2132\":4,\"2166\":6,\"2176\":3,\"2243\":1,\"2282\":2,\"2374\":2,\"2423\":2,\"2425\":2,\"2426\":1,\"2428\":1,\"2429\":2,\"2431\":2,\"2702\":1,\"2799\":2}}],[\"ex接收异常对象\",{\"1\":{\"2642\":1}}],[\"exact=\",{\"1\":{\"1670\":1}}],[\"exact修饰符的作用是辅助其他修饰符进行精确匹配的\",{\"1\":{\"1669\":1}}],[\"exact修饰符\",{\"0\":{\"1669\":1}}],[\"exact\",{\"1\":{\"1668\":1}}],[\"examine\",{\"1\":{\"570\":1}}],[\"example对象执行查询\",{\"1\":{\"2503\":1}}],[\"example对象创建criteria对象\",{\"1\":{\"2503\":1}}],[\"example\",{\"1\":{\"98\":2,\"2334\":2,\"2503\":4}}],[\"exploded\",{\"1\":{\"1777\":1,\"1869\":1,\"1870\":3,\"1878\":1,\"2169\":2,\"2170\":2,\"2171\":2}}],[\"explorer\",{\"1\":{\"1191\":2}}],[\"exp\",{\"1\":{\"1411\":1}}],[\"expressionspring\",{\"1\":{\"2629\":1}}],[\"expression=\",{\"1\":{\"2588\":2,\"2592\":2,\"2648\":1,\"2710\":1}}],[\"expression\",{\"1\":{\"1582\":1,\"2532\":2,\"2538\":1}}],[\"expr\",{\"1\":{\"1093\":2,\"1094\":1}}],[\"export\",{\"1\":{\"105\":1,\"106\":2,\"108\":1,\"109\":1,\"1691\":1,\"1704\":2,\"1707\":1,\"1708\":1,\"1711\":2,\"1712\":2,\"1713\":2,\"1715\":2}}],[\"exports\",{\"1\":{\"101\":1,\"102\":1,\"114\":3,\"115\":1}}],[\"external\",{\"1\":{\"810\":1}}],[\"extensions\",{\"1\":{\"206\":1,\"1805\":1}}],[\"extends\",{\"0\":{\"247\":1},\"1\":{\"36\":2,\"219\":3,\"239\":2,\"240\":2,\"247\":2,\"248\":1,\"294\":1,\"357\":1,\"372\":1,\"374\":2,\"375\":1,\"438\":1,\"440\":1,\"441\":1,\"442\":1,\"457\":2,\"458\":1,\"460\":1,\"471\":1,\"489\":2,\"490\":2,\"513\":1,\"541\":1,\"542\":1,\"576\":1,\"841\":2,\"867\":1,\"875\":2,\"905\":1,\"1248\":1,\"1258\":1,\"1267\":1,\"1789\":1,\"1790\":1,\"1794\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1825\":1,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":2,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1959\":1,\"1972\":1,\"1976\":1,\"1997\":2,\"2056\":1,\"2062\":1,\"2075\":1,\"2088\":1,\"2095\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":2,\"2191\":1,\"2216\":1,\"2217\":1,\"2509\":1,\"2612\":1,\"2749\":1}}],[\"extra\",{\"1\":{\"725\":1}}],[\"excalidraw\",{\"1\":{\"1191\":1}}],[\"excludebinary=false\",{\"1\":{\"2301\":1}}],[\"exclude=\",{\"1\":{\"2301\":1}}],[\"exclude\",{\"1\":{\"2301\":1,\"2588\":2,\"2592\":1}}],[\"excludecategories=info\",{\"1\":{\"2298\":1,\"2301\":1}}],[\"excludes>\",{\"1\":{\"2186\":1}}],[\"excludesfile\",{\"1\":{\"773\":1}}],[\"exclude>\",{\"1\":{\"2186\":1}}],[\"exclusions>\",{\"1\":{\"697\":1}}],[\"exclusion>\",{\"1\":{\"697\":1}}],[\"excel\",{\"1\":{\"208\":2}}],[\"exceptions\",{\"1\":{\"1216\":1}}],[\"exceptionsupplier\",{\"1\":{\"853\":2}}],[\"exceptiontypes\",{\"1\":{\"591\":2}}],[\"exception可以并列多个\",{\"1\":{\"537\":1}}],[\"exception的格式要求\",{\"1\":{\"537\":1}}],[\"exception这三个标记都是只用于方法的\",{\"1\":{\"537\":1}}],[\"exception异常\",{\"1\":{\"29\":1}}],[\"exception\",{\"1\":{\"16\":1,\"19\":1,\"21\":1,\"27\":1,\"32\":6,\"36\":1,\"287\":1,\"450\":1,\"480\":1,\"517\":2,\"518\":2,\"537\":1,\"538\":2,\"1216\":4,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":4,\"1264\":2,\"1266\":2,\"1275\":2,\"1971\":1,\"1976\":1,\"2642\":1,\"2702\":1,\"2716\":1,\"2859\":1}}],[\"exercitation\",{\"1\":{\"1606\":1}}],[\"exe命令的时候出现错误\",{\"1\":{\"925\":1}}],[\"exe需要带参数执行\",{\"1\":{\"925\":1}}],[\"exe\",{\"1\":{\"570\":1,\"925\":2}}],[\"executing\",{\"1\":{\"2493\":1}}],[\"execution\",{\"1\":{\"2493\":1,\"2633\":6,\"2634\":5,\"2635\":4,\"2640\":1,\"2641\":1,\"2642\":1,\"2643\":1,\"2644\":1,\"2648\":1,\"2651\":1,\"2652\":1,\"2653\":1,\"2710\":1}}],[\"executionthreshold=\",{\"1\":{\"2301\":1}}],[\"executiontime\",{\"1\":{\"2298\":1,\"2299\":1,\"2301\":3}}],[\"executionexception\",{\"1\":{\"450\":1}}],[\"executorexception\",{\"1\":{\"2493\":1}}],[\"executor\",{\"0\":{\"2512\":1},\"1\":{\"2493\":3,\"2517\":1}}],[\"executors\",{\"1\":{\"305\":1,\"306\":1}}],[\"executorservice\",{\"1\":{\"305\":5,\"306\":5}}],[\"executebatch\",{\"1\":{\"1231\":2,\"1235\":2}}],[\"executequery\",{\"1\":{\"1222\":1,\"1227\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1257\":1,\"1266\":1,\"1275\":1,\"1976\":1}}],[\"executeupdate\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1234\":2,\"1253\":3,\"1257\":1,\"1264\":2,\"1266\":1,\"1275\":1}}],[\"execute\",{\"1\":{\"305\":1,\"306\":1,\"2293\":1,\"2702\":9}}],[\"exists型\",{\"0\":{\"1073\":1},\"1\":{\"1069\":1}}],[\"exists\",{\"0\":{\"2244\":1},\"1\":{\"386\":2,\"387\":4,\"389\":2,\"390\":1,\"1073\":1,\"2182\":1}}],[\"existing\",{\"1\":{\"279\":1}}],[\"exit\",{\"1\":{\"24\":1,\"26\":1,\"422\":1,\"1155\":1}}],[\"ex\",{\"1\":{\"19\":1,\"21\":6,\"24\":2,\"27\":3,\"480\":2,\"1234\":8,\"1235\":4,\"1411\":1,\"1606\":1,\"2642\":3,\"2648\":1}}],[\"o流\",{\"0\":{\"3020\":1}}],[\"oxm\",{\"1\":{\"2530\":2}}],[\"omnis\",{\"1\":{\"1606\":2}}],[\"otto和jacob\",{\"1\":{\"1557\":1}}],[\"otable\",{\"1\":{\"1545\":1}}],[\"otherwise>\",{\"1\":{\"2023\":1}}],[\"otherwise>e<\",{\"1\":{\"2023\":1}}],[\"other\",{\"1\":{\"846\":6,\"853\":4}}],[\"ownerdocument\",{\"1\":{\"1485\":1}}],[\"oct\",{\"1\":{\"1416\":1}}],[\"october\",{\"1\":{\"1416\":1}}],[\"octet\",{\"1\":{\"208\":1}}],[\"ol>\",{\"1\":{\"1317\":1,\"1318\":2,\"1609\":1,\"1952\":2}}],[\"oldversion\",{\"1\":{\"2287\":1,\"2289\":1}}],[\"oldvalue\",{\"1\":{\"279\":3,\"288\":3,\"294\":2}}],[\"oldnode\",{\"1\":{\"1486\":1}}],[\"oldlist\",{\"1\":{\"306\":2}}],[\"oldalthashing\",{\"1\":{\"294\":2}}],[\"oldcapacity\",{\"1\":{\"294\":2}}],[\"oldtable\",{\"1\":{\"294\":2}}],[\"ourfriends<\",{\"1\":{\"718\":1}}],[\"outagedetectioninterval=integer\",{\"1\":{\"2301\":1}}],[\"outagedetectioninterval=2\",{\"1\":{\"2298\":1}}],[\"outagedetection=true|false\",{\"1\":{\"2301\":1}}],[\"outagedetection=true\",{\"1\":{\"2298\":1}}],[\"outage\",{\"1\":{\"2298\":1,\"2301\":1}}],[\"out标签获取域中的值\",{\"1\":{\"2020\":1}}],[\"out>\",{\"1\":{\"2017\":1}}],[\"outlinks\",{\"1\":{\"1198\":1}}],[\"outerlayer\",{\"1\":{\"1656\":3,\"1658\":3,\"1659\":3,\"1661\":3}}],[\"outerwidth\",{\"1\":{\"1451\":1}}],[\"outerheight\",{\"1\":{\"1451\":1}}],[\"outer\",{\"1\":{\"1060\":1,\"1061\":1,\"1063\":1,\"1064\":1,\"1529\":2,\"1535\":4}}],[\"outputfile\",{\"1\":{\"2293\":1}}],[\"outputdir\",{\"1\":{\"2293\":1}}],[\"outputstream\",{\"1\":{\"509\":4,\"510\":8,\"511\":8,\"512\":12,\"513\":12}}],[\"outputstreamwriter\",{\"0\":{\"421\":1},\"1\":{\"421\":6}}],[\"output的缩写\",{\"1\":{\"400\":1}}],[\"output\",{\"1\":{\"114\":1,\"115\":3,\"1720\":1}}],[\"out\",{\"1\":{\"16\":3,\"17\":6,\"19\":10,\"21\":8,\"24\":4,\"27\":7,\"30\":3,\"32\":3,\"98\":4,\"219\":10,\"220\":5,\"234\":3,\"244\":1,\"245\":1,\"251\":18,\"260\":16,\"262\":2,\"266\":6,\"272\":4,\"274\":1,\"275\":1,\"278\":6,\"279\":1,\"281\":2,\"283\":4,\"286\":2,\"287\":3,\"288\":1,\"292\":22,\"300\":6,\"302\":1,\"303\":7,\"305\":4,\"306\":4,\"309\":3,\"315\":3,\"318\":1,\"321\":1,\"327\":15,\"337\":14,\"348\":3,\"349\":3,\"352\":1,\"356\":2,\"357\":7,\"362\":2,\"363\":4,\"364\":8,\"367\":8,\"368\":8,\"371\":10,\"372\":1,\"373\":1,\"374\":5,\"375\":9,\"376\":7,\"379\":21,\"380\":6,\"382\":4,\"386\":14,\"387\":20,\"389\":14,\"390\":14,\"392\":1,\"395\":10,\"396\":10,\"405\":3,\"422\":3,\"425\":3,\"428\":1,\"431\":16,\"438\":3,\"440\":2,\"441\":2,\"442\":1,\"445\":1,\"446\":1,\"450\":1,\"457\":2,\"458\":2,\"459\":1,\"460\":2,\"461\":1,\"465\":1,\"471\":1,\"480\":1,\"489\":2,\"490\":2,\"503\":7,\"506\":5,\"509\":1,\"510\":2,\"511\":7,\"512\":7,\"513\":7,\"515\":3,\"516\":4,\"517\":4,\"518\":7,\"523\":2,\"525\":4,\"541\":2,\"542\":2,\"543\":1,\"545\":1,\"546\":1,\"560\":2,\"561\":2,\"562\":5,\"563\":5,\"564\":2,\"568\":2,\"576\":4,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"585\":9,\"588\":12,\"591\":17,\"594\":5,\"817\":2,\"820\":1,\"825\":2,\"826\":2,\"828\":2,\"829\":2,\"830\":3,\"831\":3,\"832\":2,\"835\":1,\"837\":1,\"839\":1,\"840\":2,\"842\":1,\"843\":1,\"844\":1,\"847\":1,\"848\":3,\"850\":4,\"853\":6,\"854\":4,\"856\":2,\"860\":3,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":2,\"868\":2,\"869\":2,\"870\":3,\"871\":2,\"872\":2,\"873\":5,\"874\":2,\"875\":1,\"876\":1,\"878\":4,\"879\":2,\"880\":6,\"881\":3,\"882\":1,\"883\":3,\"885\":1,\"887\":1,\"888\":5,\"889\":5,\"891\":4,\"893\":26,\"895\":9,\"896\":3,\"897\":3,\"898\":3,\"899\":7,\"900\":4,\"901\":5,\"904\":2,\"1147\":1,\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1242\":5,\"1252\":5,\"1253\":4,\"1264\":2,\"1274\":8,\"1280\":8,\"1283\":2,\"1304\":1,\"1799\":10,\"1800\":2,\"1801\":4,\"1825\":4,\"1831\":9,\"1834\":4,\"1856\":4,\"1860\":4,\"1864\":4,\"1892\":1,\"1898\":6,\"1917\":5,\"1921\":5,\"1925\":3,\"1928\":1,\"1962\":1,\"1970\":1,\"1976\":8,\"1997\":2,\"1998\":2,\"2001\":5,\"2020\":4,\"2047\":4,\"2049\":2,\"2052\":6,\"2056\":2,\"2062\":2,\"2063\":1,\"2076\":2,\"2077\":3,\"2079\":2,\"2080\":3,\"2081\":1,\"2082\":2,\"2084\":2,\"2085\":3,\"2097\":2,\"2128\":1,\"2159\":2,\"2166\":2,\"2170\":1,\"2171\":1,\"2192\":1,\"2203\":1,\"2204\":1,\"2205\":1,\"2206\":1,\"2208\":1,\"2209\":1,\"2210\":1,\"2211\":1,\"2219\":1,\"2220\":1,\"2239\":1,\"2240\":1,\"2241\":1,\"2242\":1,\"2243\":1,\"2244\":1,\"2245\":1,\"2246\":1,\"2247\":1,\"2248\":1,\"2249\":1,\"2253\":1,\"2254\":1,\"2256\":2,\"2257\":1,\"2258\":1,\"2260\":2,\"2282\":2,\"2286\":6,\"2345\":2,\"2348\":1,\"2351\":1,\"2355\":1,\"2357\":1,\"2359\":1,\"2379\":1,\"2386\":1,\"2391\":1,\"2395\":1,\"2399\":1,\"2404\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2422\":1,\"2425\":1,\"2428\":1,\"2431\":1,\"2435\":1,\"2444\":2,\"2447\":2,\"2450\":3,\"2459\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2475\":2,\"2479\":2,\"2488\":2,\"2503\":1,\"2539\":1,\"2552\":2,\"2553\":2,\"2554\":2,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2566\":5,\"2567\":1,\"2571\":6,\"2574\":4,\"2579\":1,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":2,\"2598\":3,\"2599\":3,\"2605\":4,\"2609\":6,\"2612\":4,\"2615\":3,\"2631\":2,\"2640\":1,\"2641\":1,\"2642\":2,\"2643\":1,\"2644\":3,\"2651\":5,\"2652\":1,\"2653\":1,\"2672\":2,\"2673\":1,\"2757\":1,\"2760\":1,\"2764\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2811\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2851\":1,\"2856\":1,\"2857\":1,\"2859\":1,\"2876\":1,\"2878\":1}}],[\"opcity\",{\"1\":{\"1591\":1}}],[\"op5\",{\"1\":{\"852\":1}}],[\"op4\",{\"1\":{\"852\":1}}],[\"op3\",{\"1\":{\"852\":1}}],[\"op2\",{\"1\":{\"852\":1,\"853\":6}}],[\"op1\",{\"1\":{\"852\":1,\"853\":4}}],[\"open=\",{\"1\":{\"2464\":1,\"2466\":1,\"2467\":1}}],[\"opensession\",{\"1\":{\"2282\":1,\"2360\":2,\"2374\":1}}],[\"opens\",{\"1\":{\"2178\":2,\"2214\":1}}],[\"openssh\",{\"1\":{\"810\":1}}],[\"open与\",{\"0\":{\"1460\":1}}],[\"open\",{\"1\":{\"1452\":1,\"1460\":1,\"1559\":1,\"2112\":1,\"2114\":2,\"2120\":1,\"2128\":1,\"2464\":1}}],[\"opener\",{\"1\":{\"1451\":1}}],[\"operator\",{\"1\":{\"835\":4}}],[\"operations\",{\"1\":{\"1211\":1}}],[\"operation\",{\"1\":{\"316\":1}}],[\"opt\",{\"1\":{\"810\":1}}],[\"opt目录下\",{\"1\":{\"809\":1}}],[\"optimisticlockerinterceptor\",{\"1\":{\"2290\":3}}],[\"optimisticlockerinnerinterceptor\",{\"1\":{\"2288\":1,\"2290\":1}}],[\"optimize\",{\"1\":{\"316\":1}}],[\"option>\",{\"1\":{\"1340\":6,\"1439\":5,\"1555\":3,\"2176\":6}}],[\"optional>\",{\"1\":{\"2186\":1}}],[\"optional对象的常用方法\",{\"1\":{\"853\":1}}],[\"optional对象的创建\",{\"1\":{\"852\":1}}],[\"optional<t>\",{\"1\":{\"871\":2,\"872\":2,\"873\":1}}],[\"optional<student>\",{\"1\":{\"854\":3}}],[\"optional<string>\",{\"1\":{\"852\":3,\"853\":2,\"871\":2}}],[\"optional<object>\",{\"1\":{\"852\":2}}],[\"optional\",{\"1\":{\"852\":5,\"853\":2,\"854\":2,\"2301\":1}}],[\"optional类的高级应用\",{\"0\":{\"854\":1}}],[\"optional类的常用方法\",{\"0\":{\"853\":1}}],[\"optional类的使用\",{\"0\":{\"852\":1}}],[\"optional类是一个没有子类的工具类\",{\"1\":{\"851\":1}}],[\"optional类\",{\"0\":{\"849\":1,\"851\":1,\"3058\":1},\"1\":{\"51\":1}}],[\"options\",{\"0\":{\"186\":1},\"1\":{\"676\":1,\"1690\":1,\"2172\":1}}],[\"option\",{\"1\":{\"65\":5}}],[\"ooooooo\",{\"1\":{\"392\":1}}],[\"oo\",{\"1\":{\"300\":1}}],[\"onjsonpload=\",{\"1\":{\"2150\":1}}],[\"onjsonpload\",{\"1\":{\"2150\":1}}],[\"onreadystatechange=showdata\",{\"1\":{\"2120\":1}}],[\"onreadystatechange=showreturninfo\",{\"1\":{\"2114\":1,\"2128\":1}}],[\"onreadystatechange=showrnturninfo\",{\"1\":{\"2112\":1}}],[\"onreset=\",{\"1\":{\"1439\":1}}],[\"onreset\",{\"1\":{\"1438\":1}}],[\"on的作用是给元素添加事件监听\",{\"1\":{\"1645\":1}}],[\"onlinenumberlistener\",{\"1\":{\"2088\":1}}],[\"onload要等整个页面加载完后再执行\",{\"1\":{\"1546\":1}}],[\"onload一个页面只能写一个\",{\"1\":{\"1546\":1}}],[\"onload更强大window\",{\"1\":{\"1546\":1}}],[\"onload=function\",{\"1\":{\"1546\":1}}],[\"onload=\",{\"1\":{\"1442\":1,\"1464\":1}}],[\"onload\",{\"1\":{\"1441\":1,\"1544\":1}}],[\"only属性\",{\"1\":{\"2710\":1}}],[\"only\",{\"1\":{\"294\":1,\"918\":1,\"922\":2,\"1552\":3,\"1609\":2}}],[\"onlyifabsent\",{\"1\":{\"279\":2}}],[\"onsubmit绑定的方法时要有return关键字\",{\"1\":{\"1580\":1}}],[\"onsubmit=\",{\"1\":{\"1439\":1,\"1579\":1,\"1580\":1,\"1586\":1}}],[\"onsubmit\",{\"1\":{\"1438\":1}}],[\"onselect\",{\"1\":{\"1438\":1}}],[\"onsearch\",{\"1\":{\"1438\":1}}],[\"oninput=\",{\"1\":{\"1439\":1}}],[\"oninput\",{\"1\":{\"1438\":1}}],[\"onfocus=\",{\"1\":{\"1439\":1,\"1572\":1}}],[\"onfocusout\",{\"1\":{\"1438\":1}}],[\"onfocusin\",{\"1\":{\"1438\":1}}],[\"onfocus\",{\"1\":{\"1438\":1}}],[\"onblur=\",{\"1\":{\"1439\":1,\"1579\":4,\"1586\":4,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"onblur\",{\"1\":{\"1438\":1}}],[\"onkeyup=\",{\"1\":{\"1436\":1}}],[\"onkeyup\",{\"1\":{\"1435\":1}}],[\"onkeypress=\",{\"1\":{\"1436\":1}}],[\"onkeypress\",{\"1\":{\"1435\":1}}],[\"onkeydown=\",{\"1\":{\"1436\":1}}],[\"onkeydown\",{\"1\":{\"1435\":1}}],[\"onmouseup=\",{\"1\":{\"1433\":1}}],[\"onmouseup\",{\"1\":{\"1432\":1}}],[\"onmouseout\",{\"1\":{\"1432\":1}}],[\"onmouseover=function\",{\"1\":{\"1572\":1}}],[\"onmouseover\",{\"1\":{\"1432\":1,\"1572\":1}}],[\"onmousemove=\",{\"1\":{\"1433\":1}}],[\"onmousemove\",{\"1\":{\"1432\":1}}],[\"onmouseleave=\",{\"1\":{\"1433\":1}}],[\"onmouseleave\",{\"1\":{\"1432\":1}}],[\"onmouseenter=\",{\"1\":{\"1433\":1}}],[\"onmouseenter\",{\"1\":{\"1432\":1}}],[\"onmousedown=\",{\"1\":{\"1433\":1}}],[\"onmousedown\",{\"1\":{\"1432\":1}}],[\"ondblclick=\",{\"1\":{\"1433\":1}}],[\"ondblclick\",{\"1\":{\"1432\":1}}],[\"once=\",{\"1\":{\"1662\":1}}],[\"once修饰符的作用就是使事件只触发一次\",{\"1\":{\"1662\":1}}],[\"once修饰符\",{\"0\":{\"1662\":1}}],[\"once>\",{\"1\":{\"1640\":1}}],[\"once的作用是只会渲染对应元素一次\",{\"1\":{\"1639\":1}}],[\"once\",{\"0\":{\"1639\":1},\"1\":{\"2179\":1}}],[\"onchange=\",{\"1\":{\"1439\":2,\"2176\":2}}],[\"onchange\",{\"1\":{\"1438\":1}}],[\"oncontextmenu\",{\"1\":{\"1432\":1}}],[\"onclick\",{\"1\":{\"1432\":1,\"1505\":1,\"1572\":1,\"1613\":2}}],[\"onclick=\",{\"1\":{\"65\":1,\"1379\":1,\"1380\":3,\"1454\":1,\"1455\":1,\"1456\":1,\"1458\":2,\"1459\":2,\"1460\":2,\"1462\":1,\"1463\":3,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":1,\"1501\":1,\"1505\":1,\"1567\":4,\"1568\":4,\"1570\":3,\"1571\":8,\"1572\":3,\"1588\":3,\"1589\":3,\"1590\":4,\"1645\":1,\"1656\":3,\"2120\":1,\"2128\":1,\"2132\":2,\"2159\":1,\"2166\":1,\"2786\":1}}],[\"onclose\",{\"1\":{\"875\":1}}],[\"one\",{\"1\":{\"1198\":1,\"1572\":4,\"1602\":6}}],[\"on\",{\"0\":{\"1645\":1},\"1\":{\"313\":1,\"810\":1,\"1000\":2,\"1001\":6,\"1057\":1,\"1060\":1,\"1061\":1,\"1063\":1,\"1064\":1,\"1072\":2,\"1106\":1,\"1116\":3,\"1117\":1,\"1133\":1,\"1134\":1,\"1135\":1,\"1572\":2,\"1645\":2,\"1825\":1,\"2417\":4,\"2423\":1,\"2425\":1,\"2426\":1,\"2428\":1,\"2429\":2,\"2431\":2,\"2910\":2}}],[\"o2\",{\"1\":{\"275\":2,\"287\":2,\"288\":3,\"868\":2,\"872\":4}}],[\"o1\",{\"1\":{\"275\":2,\"287\":2,\"288\":3,\"585\":2,\"868\":2,\"872\":4}}],[\"o+\",{\"1\":{\"260\":1}}],[\"odd|even\",{\"1\":{\"1552\":1}}],[\"odd\",{\"1\":{\"147\":1,\"1545\":1,\"1551\":1,\"1552\":4}}],[\"ognl\",{\"1\":{\"142\":1,\"2334\":1}}],[\"ognl语法\",{\"0\":{\"142\":1}}],[\"o\",{\"0\":{\"2963\":1,\"3012\":1,\"3085\":1,\"3097\":1,\"3099\":1,\"3107\":1,\"3174\":1},\"1\":{\"98\":2,\"219\":6,\"220\":2,\"251\":4,\"260\":5,\"262\":5,\"274\":4,\"281\":5,\"287\":2,\"292\":1,\"324\":1,\"352\":2,\"356\":2,\"568\":2,\"585\":2,\"588\":3,\"889\":2,\"1417\":5,\"2256\":2,\"2615\":4}}],[\"ok\",{\"1\":{\"88\":1,\"760\":1,\"1370\":2}}],[\"o服务端javascript环境\",{\"1\":{\"83\":1}}],[\"obj被代理的对象\",{\"1\":{\"2609\":1}}],[\"objcet\",{\"1\":{\"428\":2}}],[\"objct\",{\"1\":{\"428\":1}}],[\"obj=\",{\"1\":{\"262\":1}}],[\"objarr\",{\"1\":{\"242\":2}}],[\"obj\",{\"1\":{\"234\":4,\"242\":2,\"262\":6,\"587\":1,\"590\":1,\"1266\":3,\"1275\":3,\"1419\":9,\"1629\":2,\"2125\":1,\"2126\":1,\"2549\":2,\"2550\":2,\"2609\":1}}],[\"objectobjectentry\",{\"1\":{\"2351\":2}}],[\"objectobjectmap\",{\"1\":{\"2351\":2}}],[\"objectoutputstream\",{\"0\":{\"425\":1},\"1\":{\"428\":5,\"511\":5,\"512\":7,\"513\":7}}],[\"objectvalue\",{\"1\":{\"1829\":1}}],[\"object>>\",{\"1\":{\"2243\":1,\"2257\":1}}],[\"object>\",{\"1\":{\"905\":1,\"2205\":1,\"2210\":1,\"2242\":1,\"2351\":2,\"2357\":1,\"2393\":1,\"2395\":1,\"2931\":1}}],[\"object中的wait\",{\"1\":{\"475\":1}}],[\"objectinputstream\",{\"0\":{\"424\":1},\"1\":{\"428\":4,\"511\":5,\"512\":7,\"513\":7}}],[\"object+\",{\"1\":{\"251\":1}}],[\"object是person的子类\",{\"1\":{\"248\":1}}],[\"object是person的父类\",{\"1\":{\"247\":1}}],[\"objects\",{\"1\":{\"247\":2,\"248\":2,\"281\":2,\"838\":1,\"841\":2,\"846\":3,\"875\":2,\"879\":2,\"2244\":2,\"2615\":4,\"2651\":2}}],[\"object\",{\"0\":{\"1419\":1},\"1\":{\"65\":1,\"142\":1,\"208\":2,\"219\":6,\"220\":1,\"234\":2,\"240\":1,\"242\":4,\"244\":1,\"245\":2,\"251\":5,\"260\":5,\"262\":6,\"279\":1,\"281\":1,\"288\":2,\"292\":5,\"294\":2,\"303\":2,\"316\":10,\"324\":1,\"328\":4,\"330\":1,\"349\":3,\"360\":8,\"364\":1,\"561\":1,\"568\":1,\"572\":1,\"584\":1,\"585\":2,\"587\":2,\"588\":1,\"590\":3,\"591\":2,\"683\":1,\"846\":3,\"879\":1,\"889\":2,\"1262\":1,\"1266\":4,\"1275\":4,\"1352\":2,\"1419\":1,\"1425\":2,\"1713\":1,\"2063\":1,\"2077\":4,\"2088\":1,\"2096\":2,\"2196\":1,\"2198\":1,\"2493\":3,\"2550\":2,\"2574\":6,\"2609\":6,\"2615\":7,\"2626\":1,\"2635\":1,\"2638\":3,\"2641\":1,\"2644\":2,\"2651\":2,\"2652\":1,\"2672\":1,\"2673\":1,\"2674\":3,\"2678\":1,\"2679\":1,\"2680\":1,\"2702\":6}}],[\"obsidian中使用dataview并不会影响到关系图谱\",{\"1\":{\"1203\":1}}],[\"obsidian中的\",{\"1\":{\"1158\":1}}],[\"obsidian支持的yaml字段\",{\"1\":{\"1198\":1}}],[\"obsidian资料库\",{\"1\":{\"1196\":1}}],[\"obsidian资料库的查询\",{\"1\":{\"1196\":1}}],[\"obsidian的文件属性\",{\"1\":{\"1198\":1}}],[\"obsidian的搜索与查询|obsidian的搜索与查询\",{\"1\":{\"53\":1}}],[\"obsidian的搜索与查询\",{\"0\":{\"1192\":1,\"3079\":1},\"1\":{\"53\":1}}],[\"obsidian的插件|obsidian的插件\",{\"1\":{\"53\":1}}],[\"obsidian的插件\",{\"0\":{\"1190\":1,\"3078\":1},\"1\":{\"53\":1}}],[\"obsidian技巧与设置|obsidian技巧与设置\",{\"1\":{\"53\":1}}],[\"obsidian技巧与设置\",{\"0\":{\"1163\":1,\"3076\":1},\"1\":{\"53\":1}}],[\"obsidian双向链接|obsidian双向链接\",{\"1\":{\"53\":1}}],[\"obsidian双向链接\",{\"0\":{\"1160\":1,\"3075\":1},\"1\":{\"53\":1}}],[\"obsidian\",{\"0\":{\"53\":1,\"2975\":1,\"3074\":1},\"1\":{\"7\":1,\"1191\":2}}],[\"oftype\",{\"1\":{\"2437\":1}}],[\"oftype=\",{\"1\":{\"2428\":1,\"2431\":1}}],[\"ofref<>\",{\"1\":{\"875\":1}}],[\"ofnullable\",{\"1\":{\"852\":2,\"854\":2}}],[\"of方法是不支持null\",{\"1\":{\"852\":1,\"853\":1}}],[\"off\",{\"1\":{\"407\":1,\"1106\":1}}],[\"offset参数是子数组第一个字符的索引\",{\"1\":{\"404\":1}}],[\"offset\",{\"1\":{\"404\":1}}],[\"offerlast\",{\"1\":{\"260\":6,\"357\":1}}],[\"offerfirst\",{\"1\":{\"260\":6,\"357\":1}}],[\"offer\",{\"1\":{\"260\":7,\"324\":1,\"327\":1,\"337\":4,\"357\":3}}],[\"ofpattern指定想要的日期格式\",{\"1\":{\"897\":1}}],[\"ofpattern\",{\"1\":{\"380\":2,\"897\":1}}],[\"oflocalizeddatetime\",{\"1\":{\"380\":2}}],[\"of2\",{\"1\":{\"379\":2}}],[\"of1\",{\"1\":{\"379\":2}}],[\"of\",{\"1\":{\"65\":1,\"294\":1,\"375\":1,\"376\":1,\"379\":5,\"570\":1,\"852\":2,\"853\":1,\"860\":3,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":2,\"868\":2,\"869\":2,\"870\":3,\"871\":2,\"872\":2,\"873\":5,\"874\":2,\"875\":2,\"878\":4,\"879\":2,\"880\":6,\"881\":3,\"882\":1,\"883\":3,\"885\":1,\"886\":1,\"887\":1,\"893\":3,\"896\":1,\"899\":2,\"901\":1,\"1185\":1,\"1545\":1,\"1602\":6}}],[\"orcl\",{\"1\":{\"2297\":1}}],[\"or的操作\",{\"1\":{\"2256\":1}}],[\"or中的表达式最后翻译成sql时会被加上圆括号\",{\"1\":{\"2246\":1,\"2247\":1}}],[\"orm<\",{\"1\":{\"2665\":1,\"2756\":1,\"2890\":1}}],[\"orm框架会根据映射完成对数据库的操作\",{\"1\":{\"2198\":1}}],[\"orm框架就是专门来做这个问题的\",{\"1\":{\"2198\":1}}],[\"orm\",{\"1\":{\"2198\":1,\"2530\":2,\"2665\":1,\"2756\":2,\"2890\":1}}],[\"ordinary\",{\"1\":{\"2196\":1}}],[\"order注解可以控制切面的优先级\",{\"1\":{\"2646\":1}}],[\"order=\",{\"1\":{\"2410\":2}}],[\"orderbyasc\",{\"0\":{\"2247\":1},\"1\":{\"2254\":1}}],[\"orderbydesc\",{\"0\":{\"2247\":1},\"1\":{\"2247\":1,\"2254\":1}}],[\"orderby\",{\"0\":{\"2247\":1}}],[\"order\",{\"0\":{\"2646\":1},\"1\":{\"1039\":1,\"1040\":1,\"2179\":1,\"2247\":1,\"2254\":1,\"2410\":1,\"2646\":2}}],[\"origin\",{\"1\":{\"2172\":1}}],[\"originssh\",{\"1\":{\"763\":2}}],[\"orangered\",{\"1\":{\"1571\":4}}],[\"orange\",{\"1\":{\"1393\":2,\"1394\":2,\"1395\":2,\"1396\":2,\"1397\":2,\"1398\":2,\"1399\":2,\"1401\":2}}],[\"oracle默认read\",{\"1\":{\"2719\":1}}],[\"oracle<\",{\"1\":{\"1552\":1}}],[\"oracle数据库具有很好的开放性\",{\"1\":{\"919\":1}}],[\"oracle数据库已经成为世界上最流行的数据库\",{\"1\":{\"919\":1}}],[\"oracle数据库是由美国的甲骨文\",{\"1\":{\"919\":1}}],[\"oracle\",{\"0\":{\"2977\":1},\"1\":{\"10\":1,\"910\":1,\"917\":1,\"919\":2,\"1112\":1,\"1735\":1,\"2179\":1,\"2297\":1}}],[\"orelsethrow\",{\"1\":{\"853\":3}}],[\"orelseget\",{\"1\":{\"853\":3}}],[\"orelse\",{\"1\":{\"853\":4,\"854\":1}}],[\"or\",{\"0\":{\"848\":1,\"2245\":1},\"1\":{\"208\":2,\"295\":1,\"846\":1,\"848\":1,\"1031\":1,\"1147\":2,\"1195\":1,\"1246\":1,\"1249\":2,\"1889\":1,\"1985\":2,\"1989\":1,\"2245\":2,\"2246\":2,\"2256\":4,\"2503\":3}}],[\"organization\",{\"1\":{\"930\":1}}],[\"org\",{\"1\":{\"61\":1,\"65\":1,\"85\":1,\"93\":2,\"545\":4,\"680\":4,\"683\":4,\"714\":8,\"715\":8,\"1611\":1,\"1681\":3,\"1739\":1,\"1791\":4,\"1795\":4,\"1831\":4,\"1834\":4,\"1999\":4,\"2047\":4,\"2058\":4,\"2075\":4,\"2092\":2,\"2267\":4,\"2278\":2,\"2279\":2,\"2282\":7,\"2301\":2,\"2320\":3,\"2321\":3,\"2323\":1,\"2334\":4,\"2374\":4,\"2485\":1,\"2486\":1,\"2490\":1,\"2492\":1,\"2493\":2,\"2501\":2,\"2509\":2,\"2517\":2,\"2542\":4,\"2546\":4,\"2553\":4,\"2554\":4,\"2555\":4,\"2559\":6,\"2566\":6,\"2567\":9,\"2584\":7,\"2588\":30,\"2590\":7,\"2591\":7,\"2592\":9,\"2594\":7,\"2599\":7,\"2630\":10,\"2648\":10,\"2651\":1,\"2666\":20,\"2701\":2,\"2706\":1,\"2710\":1,\"2718\":1,\"2746\":4,\"2748\":4,\"2758\":22,\"2759\":4,\"2765\":1,\"2779\":27,\"2780\":26,\"2789\":26,\"2799\":1,\"2885\":4,\"2898\":26,\"2899\":25,\"2901\":1,\"2903\":28,\"2904\":25,\"2907\":2,\"2908\":1,\"2918\":2}}],[\"overflowtodisk=\",{\"1\":{\"2485\":1}}],[\"overflow\",{\"0\":{\"1523\":1},\"1\":{\"1523\":1}}],[\"overrideclass\",{\"1\":{\"581\":1}}],[\"override的作用\",{\"1\":{\"541\":1,\"542\":1}}],[\"override\",{\"0\":{\"541\":1},\"1\":{\"34\":1,\"262\":1,\"274\":2,\"275\":2,\"278\":1,\"281\":3,\"287\":5,\"288\":1,\"305\":1,\"306\":1,\"309\":3,\"327\":2,\"352\":2,\"356\":3,\"428\":1,\"438\":1,\"440\":1,\"441\":1,\"442\":1,\"445\":1,\"446\":1,\"450\":1,\"457\":2,\"458\":1,\"460\":1,\"465\":1,\"471\":1,\"480\":1,\"489\":2,\"490\":2,\"511\":1,\"512\":1,\"513\":2,\"541\":1,\"542\":1,\"545\":5,\"546\":5,\"560\":1,\"561\":1,\"563\":5,\"568\":2,\"581\":1,\"816\":4,\"817\":5,\"820\":1,\"1226\":1,\"1241\":1,\"1264\":3,\"1267\":3,\"1789\":1,\"1790\":1,\"1794\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1825\":3,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":2,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":2,\"1997\":2,\"1998\":3,\"2001\":3,\"2047\":6,\"2049\":1,\"2052\":6,\"2056\":1,\"2057\":3,\"2061\":1,\"2062\":1,\"2063\":3,\"2075\":1,\"2076\":2,\"2077\":3,\"2079\":2,\"2080\":3,\"2081\":2,\"2082\":2,\"2084\":2,\"2085\":3,\"2087\":2,\"2088\":3,\"2095\":1,\"2096\":1,\"2097\":2,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":3,\"2299\":1,\"2509\":4,\"2574\":2,\"2594\":2,\"2595\":1,\"2596\":1,\"2597\":1,\"2598\":1,\"2599\":1,\"2609\":5,\"2612\":1,\"2615\":1,\"2631\":2,\"2667\":12,\"2672\":2,\"2673\":1,\"2674\":3,\"2676\":6,\"2678\":1,\"2679\":1,\"2680\":1,\"2697\":2,\"2702\":4,\"2707\":1,\"2711\":1,\"2749\":1}}],[\"overload\",{\"1\":{\"34\":1}}],[\"m编程\",{\"0\":{\"3097\":1,\"3099\":1,\"3107\":1}}],[\"mware网络设置\",{\"0\":{\"2971\":1}}],[\"mv\",{\"1\":{\"2531\":1}}],[\"mvc框架\",{\"1\":{\"2871\":1}}],[\"mvc=\",{\"1\":{\"2780\":1,\"2789\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"mvc属于springframework的后续产品\",{\"1\":{\"2740\":1}}],[\"mvc的概念\",{\"0\":{\"2740\":1}}],[\"mvc的优势\",{\"0\":{\"2035\":1}}],[\"mvc分层及责任划分\",{\"0\":{\"2041\":1}}],[\"mvc使开发和维护用户接口的技术含量降低\",{\"1\":{\"2037\":1}}],[\"mvc是一种项目架构型模式\",{\"1\":{\"2034\":1}}],[\"mvc是在表述层开发中运用的一种设计理念\",{\"1\":{\"120\":1}}],[\"mvc模式允许使用各种不同样式的视图来访问同一个服务器端的代码\",{\"1\":{\"2037\":1}}],[\"mvc模式的这三个部分的职责非常明确\",{\"1\":{\"2034\":1}}],[\"mvc模式的引入\",{\"0\":{\"2032\":1},\"1\":{\"211\":1}}],[\"mvc模式介绍\",{\"0\":{\"2033\":1}}],[\"mvc等web框架进行集成作为web应用的模板引擎\",{\"1\":{\"122\":1}}],[\"mvc和三层架构的关系\",{\"0\":{\"120\":1}}],[\"mvc\",{\"0\":{\"118\":1},\"1\":{\"2531\":1,\"2740\":2,\"2770\":1,\"2779\":4,\"2780\":4,\"2789\":10,\"2790\":1,\"2898\":6,\"2899\":5,\"2901\":1,\"2902\":1,\"2903\":4,\"2904\":5}}],[\"mchange<\",{\"1\":{\"2500\":1}}],[\"mca\",{\"1\":{\"386\":1,\"387\":3,\"389\":1}}],[\"mb\",{\"1\":{\"2312\":1}}],[\"m+\",{\"1\":{\"1417\":2}}],[\"md\",{\"1\":{\"1600\":1,\"1609\":4,\"1686\":1}}],[\"mday\",{\"1\":{\"1198\":1}}],[\"md5\",{\"1\":{\"1095\":1}}],[\"mgr=\",{\"1\":{\"2674\":1}}],[\"mgr=resultset\",{\"1\":{\"1976\":1}}],[\"mgr\",{\"1\":{\"1068\":2,\"1211\":17,\"1976\":3,\"2025\":1,\"2031\":1,\"2362\":1,\"2374\":1,\"2425\":3,\"2428\":3,\"2431\":2,\"2435\":1,\"2444\":3,\"2447\":3,\"2450\":3,\"2453\":4,\"2456\":4,\"2462\":2,\"2667\":1}}],[\"m0\",{\"1\":{\"845\":1}}],[\"mtime\",{\"1\":{\"1198\":1}}],[\"mtj\",{\"1\":{\"772\":1}}],[\"mtwm\",{\"1\":{\"568\":6}}],[\"m参数指定日志内容\",{\"1\":{\"738\":1}}],[\"m2\",{\"1\":{\"674\":2,\"675\":2}}],[\"mp\",{\"1\":{\"2178\":1,\"2293\":1}}],[\"mp4\",{\"1\":{\"401\":1,\"1310\":1}}],[\"mp3\",{\"1\":{\"401\":1,\"1310\":1}}],[\"mpeg\",{\"1\":{\"208\":2}}],[\"mmm\",{\"1\":{\"2301\":2}}],[\"mm\",{\"1\":{\"374\":2,\"380\":4,\"459\":1,\"891\":1,\"897\":2,\"942\":6,\"1198\":1,\"1285\":2,\"1287\":2,\"1417\":2,\"2031\":1,\"2087\":2,\"2128\":2,\"2166\":1,\"2298\":2,\"2308\":2,\"2312\":4,\"2374\":2,\"2487\":1,\"2757\":2,\"2798\":2,\"2799\":1,\"2896\":2}}],[\"much<\",{\"1\":{\"1482\":1}}],[\"music\",{\"1\":{\"1310\":1}}],[\"must\",{\"1\":{\"364\":1}}],[\"multi\",{\"1\":{\"845\":2}}],[\"multipurpose\",{\"1\":{\"206\":1}}],[\"multiple\",{\"1\":{\"1340\":2,\"1350\":1}}],[\"multiple=\",{\"1\":{\"1340\":2}}],[\"multiples\",{\"1\":{\"294\":1}}],[\"multiplexing\",{\"0\":{\"167\":1}}],[\"multiply\",{\"1\":{\"102\":2}}],[\"mix\",{\"1\":{\"1609\":3}}],[\"microsystems公司倡导\",{\"1\":{\"1548\":1}}],[\"microsoft\",{\"1\":{\"208\":2,\"1372\":2}}],[\"middle\",{\"1\":{\"1310\":1,\"1656\":3,\"1658\":3,\"1659\":3,\"1661\":3}}],[\"midi\",{\"1\":{\"208\":2}}],[\"mitm\",{\"1\":{\"1216\":1}}],[\"miller\",{\"1\":{\"1211\":1}}],[\"milliseconds\",{\"1\":{\"327\":2,\"1414\":2}}],[\"mirror>\",{\"1\":{\"675\":1}}],[\"mirrorof>\",{\"1\":{\"675\":1}}],[\"misc\",{\"1\":{\"294\":2,\"364\":2}}],[\"minfractionaldigits属性和maxfractionaldigits属性允许您指定小数点后的位数\",{\"1\":{\"2029\":1}}],[\"minfractiondigits\",{\"1\":{\"2029\":1}}],[\"minintegerdigits\",{\"1\":{\"2029\":1}}],[\"minim\",{\"1\":{\"1606\":1}}],[\"minimal\",{\"1\":{\"1191\":2}}],[\"minorversion\",{\"1\":{\"1831\":1}}],[\"minsparethreads=\",{\"1\":{\"1757\":1}}],[\"minsparethreads\",{\"1\":{\"1757\":1}}],[\"min=\",{\"1\":{\"1347\":1,\"1348\":1,\"1555\":1,\"1698\":6}}],[\"mindmap\",{\"1\":{\"1191\":1}}],[\"minutes\",{\"1\":{\"1414\":1,\"1458\":2,\"1459\":2}}],[\"minute\",{\"1\":{\"1093\":5}}],[\"minus\",{\"1\":{\"1645\":1}}],[\"minusyears\",{\"1\":{\"895\":1}}],[\"minusweeks\",{\"1\":{\"895\":1}}],[\"minusdays\",{\"1\":{\"379\":1}}],[\"minguodate\",{\"1\":{\"892\":1}}],[\"mingming=12323\",{\"1\":{\"292\":2}}],[\"mingming\",{\"1\":{\"292\":1}}],[\"minby\",{\"1\":{\"880\":1}}],[\"min\",{\"1\":{\"279\":1,\"294\":2,\"316\":1,\"364\":4,\"367\":1,\"872\":2,\"1041\":1,\"1347\":1,\"1408\":2,\"1409\":2,\"1411\":1,\"1412\":2,\"1543\":1,\"1545\":1,\"1546\":1,\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1563\":6,\"1564\":6,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":6,\"1602\":6,\"1606\":6,\"1609\":6,\"1721\":1,\"2131\":1,\"2132\":2,\"2159\":1,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2877\":1}}],[\"mime的全称是multipurpose\",{\"1\":{\"1805\":1}}],[\"mime类型\",{\"0\":{\"208\":1}}],[\"mime作用\",{\"0\":{\"207\":1}}],[\"mime\",{\"1\":{\"206\":1}}],[\"msi\",{\"1\":{\"922\":1}}],[\"msword\",{\"1\":{\"208\":1}}],[\"ms\",{\"1\":{\"208\":2,\"2298\":1,\"2299\":2,\"2493\":9}}],[\"msg2+\",{\"1\":{\"840\":1}}],[\"msg2\",{\"1\":{\"840\":1,\"843\":2,\"844\":2,\"848\":2}}],[\"msg1+\",{\"1\":{\"840\":1}}],[\"msg1\",{\"1\":{\"840\":1,\"843\":2,\"844\":2,\"848\":2}}],[\"msg+\",{\"1\":{\"839\":1}}],[\"msg\",{\"1\":{\"36\":4,\"839\":1,\"842\":2,\"847\":4,\"848\":4,\"867\":2,\"873\":8,\"1972\":12,\"1980\":9,\"1981\":6,\"2018\":5,\"2019\":4,\"2020\":12,\"2312\":2,\"2487\":1,\"2757\":1,\"2896\":1}}],[\"mounted\",{\"1\":{\"1730\":2}}],[\"mountains\",{\"1\":{\"1609\":1}}],[\"mouse03\",{\"1\":{\"2564\":2}}],[\"mouse02\",{\"1\":{\"2563\":1}}],[\"mouse01\",{\"1\":{\"2562\":2}}],[\"mouse1=mouse\",{\"1\":{\"2563\":1,\"2564\":1}}],[\"mouse1\",{\"1\":{\"2563\":1,\"2564\":3}}],[\"mouse\",{\"1\":{\"2562\":6,\"2563\":1,\"2564\":1}}],[\"mouseenter=\",{\"1\":{\"1695\":1}}],[\"mouseleave\",{\"1\":{\"1572\":2}}],[\"mouseover\",{\"1\":{\"1572\":4}}],[\"mollis\",{\"1\":{\"1609\":1}}],[\"more\",{\"1\":{\"1541\":1}}],[\"moveto\",{\"1\":{\"1452\":1}}],[\"moveby\",{\"1\":{\"1452\":1}}],[\"mobile\",{\"1\":{\"772\":1}}],[\"money=\",{\"1\":{\"1241\":1,\"1864\":1}}],[\"money\",{\"1\":{\"1234\":3,\"1239\":1,\"1241\":9,\"1242\":3,\"1252\":3,\"1856\":6,\"1860\":6,\"1864\":6,\"2431\":3,\"2695\":2,\"2697\":9,\"2702\":6,\"2707\":3,\"2711\":3}}],[\"mon\",{\"1\":{\"1093\":1,\"1416\":2}}],[\"mongodb\",{\"1\":{\"918\":1}}],[\"monday\",{\"1\":{\"375\":2,\"1093\":1}}],[\"monthname\",{\"1\":{\"1093\":1}}],[\"month\",{\"1\":{\"374\":1,\"375\":2,\"1093\":3,\"1349\":2,\"1414\":1}}],[\"mozilla\",{\"1\":{\"177\":1}}],[\"mod\",{\"1\":{\"1092\":1}}],[\"modify\",{\"1\":{\"959\":1,\"1007\":2,\"1012\":2}}],[\"modified头信息\",{\"1\":{\"2149\":1}}],[\"modified\",{\"1\":{\"734\":1}}],[\"modifiers\",{\"1\":{\"588\":2,\"2651\":3}}],[\"modifier\",{\"1\":{\"587\":1,\"588\":1,\"590\":1,\"591\":1}}],[\"modcount++\",{\"1\":{\"263\":1,\"294\":1}}],[\"model中的字符串类型的键值对信息会转换为请求参数\",{\"1\":{\"2929\":1}}],[\"model对象使用addattribute存储数据\",{\"1\":{\"2928\":1}}],[\"modelandview\",{\"1\":{\"2872\":7,\"2873\":7,\"2931\":7}}],[\"modelandview中的model代表模型\",{\"1\":{\"2871\":1}}],[\"model从实时监听的状态变为change状态\",{\"1\":{\"1675\":1}}],[\"model属性的\",{\"1\":{\"1674\":1}}],[\"model属性是使用在表单元素中的\",{\"1\":{\"1652\":1}}],[\"model=\",{\"1\":{\"1653\":1,\"1698\":6,\"1701\":1}}],[\"model的简写\",{\"1\":{\"1446\":1,\"1447\":1}}],[\"model\",{\"0\":{\"1652\":1},\"1\":{\"683\":1,\"1527\":2,\"1675\":1,\"1676\":1,\"1677\":1,\"2034\":1,\"2179\":2,\"2740\":1,\"2928\":4,\"2929\":4,\"2931\":3}}],[\"modelversion>\",{\"1\":{\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"2267\":1,\"2748\":1,\"2885\":1}}],[\"model模型\",{\"1\":{\"118\":1}}],[\"mode=development\",{\"1\":{\"114\":2}}],[\"modulelist=com\",{\"1\":{\"2301\":1}}],[\"modulename\",{\"1\":{\"2293\":1}}],[\"module>\",{\"1\":{\"718\":4}}],[\"module标签组合\",{\"1\":{\"718\":1}}],[\"module\",{\"1\":{\"100\":1,\"102\":1,\"114\":1,\"115\":4,\"2298\":1}}],[\"modules>\",{\"1\":{\"718\":1}}],[\"modules文件夹中\",{\"1\":{\"1687\":1}}],[\"modules文件夹\",{\"1\":{\"94\":1}}],[\"modules\",{\"1\":{\"90\":1,\"94\":2,\"1686\":1}}],[\"messageformattingstrategy\",{\"1\":{\"2299\":1}}],[\"message=\",{\"1\":{\"1794\":2,\"2096\":2}}],[\"message\",{\"1\":{\"1456\":2,\"1730\":5,\"1790\":2,\"1794\":2,\"2096\":2,\"2925\":4,\"2926\":3,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"meatainfo\",{\"1\":{\"1196\":1}}],[\"meaning\",{\"1\":{\"208\":1}}],[\"memorystoreevictionpolicy=\",{\"1\":{\"2485\":1}}],[\"memos\",{\"1\":{\"1191\":1}}],[\"memcache缓存框架\",{\"1\":{\"2482\":1}}],[\"members\",{\"1\":{\"1545\":1}}],[\"memberlevel\",{\"1\":{\"146\":1}}],[\"mediaquerylist对象\",{\"1\":{\"1452\":1}}],[\"media\",{\"1\":{\"1452\":1}}],[\"mediumblob\",{\"1\":{\"941\":1}}],[\"mediumint\",{\"1\":{\"939\":1}}],[\"medium=distribute\",{\"1\":{\"845\":1}}],[\"medium\",{\"1\":{\"380\":2,\"2030\":2}}],[\"meduymtext\",{\"1\":{\"941\":1}}],[\"menu3\",{\"1\":{\"1606\":2}}],[\"menu2\",{\"1\":{\"1606\":2}}],[\"menu1\",{\"1\":{\"1606\":2}}],[\"menu\",{\"1\":{\"922\":1}}],[\"mermaid语言\",{\"1\":{\"1185\":1}}],[\"mermaid在线编辑器\",{\"1\":{\"1185\":1}}],[\"mermaid文档\",{\"1\":{\"1185\":1}}],[\"merging\",{\"1\":{\"789\":1}}],[\"merge\",{\"1\":{\"748\":1,\"760\":2}}],[\"mercurial\",{\"1\":{\"723\":1}}],[\"mevn\",{\"1\":{\"656\":1}}],[\"meɪv\",{\"1\":{\"656\":1}}],[\"meta\",{\"1\":{\"1668\":1}}],[\"metadata\",{\"1\":{\"1198\":1}}],[\"method字段指定\",{\"1\":{\"2829\":1}}],[\"method控制请求方式\",{\"0\":{\"2813\":1}}],[\"method子标签控制指定方法上的事务\",{\"1\":{\"2710\":1}}],[\"method方法名\",{\"1\":{\"2648\":5}}],[\"methodaround\",{\"1\":{\"2644\":1,\"2648\":1}}],[\"methodafter\",{\"1\":{\"2643\":1,\"2648\":1}}],[\"methodafterthrowing\",{\"1\":{\"2642\":1,\"2648\":1}}],[\"methodafterreturning\",{\"1\":{\"2641\":1,\"2648\":1}}],[\"methodbefore\",{\"1\":{\"2640\":1,\"2648\":1}}],[\"methodproxy\",{\"1\":{\"2615\":5}}],[\"methodinterceptor\",{\"1\":{\"2615\":2}}],[\"method参数配置指定调用的方法\",{\"1\":{\"2570\":2,\"2573\":2}}],[\"method属性\",{\"1\":{\"1330\":1,\"2813\":1}}],[\"methodname\",{\"1\":{\"827\":2}}],[\"methods\",{\"1\":{\"591\":2,\"1614\":1,\"1616\":1,\"1617\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1640\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1695\":1,\"1701\":1,\"1707\":1,\"1711\":1,\"1712\":1,\"1715\":2,\"1730\":1,\"2172\":1}}],[\"method\",{\"1\":{\"568\":1,\"590\":12,\"591\":6,\"922\":1,\"1330\":1,\"1808\":1,\"2609\":5,\"2615\":4,\"2710\":1,\"2779\":4,\"2830\":6,\"2835\":1,\"2857\":1}}],[\"method表示可以在方法上使用\",{\"1\":{\"554\":1}}],[\"method=get|post\",{\"1\":{\"1330\":1}}],[\"method=toregisterpage\",{\"1\":{\"138\":1}}],[\"method=\",{\"1\":{\"138\":2,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1439\":1,\"1555\":1,\"1579\":1,\"1586\":1,\"1793\":1,\"1907\":1,\"2055\":1,\"2060\":1,\"2094\":1,\"2571\":2,\"2574\":2,\"2648\":5,\"2814\":2,\"2817\":1,\"2820\":1,\"2830\":4,\"2857\":1,\"2914\":1}}],[\"meturing路径后\",{\"1\":{\"2764\":1}}],[\"meturing<\",{\"1\":{\"2186\":1,\"2267\":1,\"2374\":1,\"2748\":1,\"2885\":1}}],[\"meturing\",{\"1\":{\"30\":1,\"287\":1,\"292\":1,\"352\":1,\"356\":1,\"390\":1,\"405\":1,\"409\":1,\"412\":1,\"421\":1,\"425\":1,\"428\":1,\"511\":1,\"538\":1,\"568\":1,\"579\":1,\"580\":1,\"683\":1,\"685\":1,\"714\":2,\"715\":2,\"1274\":1,\"1275\":1,\"1285\":1,\"1549\":1,\"1791\":1,\"1795\":1,\"1831\":2,\"1834\":4,\"1960\":1,\"1972\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1982\":1,\"1999\":3,\"2047\":2,\"2049\":1,\"2058\":1,\"2075\":1,\"2087\":1,\"2115\":1,\"2131\":1,\"2168\":5,\"2170\":1,\"2171\":1,\"2275\":1,\"2278\":1,\"2279\":1,\"2282\":2,\"2285\":1,\"2293\":2,\"2308\":1,\"2326\":1,\"2329\":1,\"2374\":8,\"2435\":3,\"2479\":1,\"2501\":3,\"2542\":1,\"2546\":1,\"2548\":1,\"2549\":1,\"2553\":2,\"2554\":2,\"2555\":3,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":1,\"2563\":2,\"2564\":2,\"2566\":7,\"2567\":4,\"2571\":1,\"2574\":4,\"2579\":3,\"2588\":7,\"2590\":1,\"2591\":1,\"2592\":2,\"2594\":1,\"2599\":1,\"2601\":1,\"2630\":1,\"2634\":5,\"2640\":1,\"2641\":1,\"2642\":1,\"2643\":1,\"2644\":1,\"2648\":2,\"2649\":1,\"2651\":1,\"2652\":1,\"2653\":1,\"2666\":1,\"2710\":1,\"2749\":1,\"2758\":1,\"2764\":2,\"2779\":1,\"2780\":1,\"2789\":1,\"2799\":1,\"2811\":1,\"2898\":1,\"2900\":1,\"2903\":3,\"2905\":1,\"2907\":2,\"2918\":1}}],[\"mkdirs\",{\"1\":{\"389\":2,\"390\":1}}],[\"mkdir\",{\"1\":{\"98\":2,\"389\":2,\"390\":1}}],[\"m\",{\"0\":{\"2978\":1,\"2997\":1,\"3064\":1,\"3088\":1,\"3089\":1,\"3091\":1,\"3144\":1,\"3168\":1,\"3185\":1},\"1\":{\"73\":3,\"103\":4,\"118\":1,\"238\":1,\"240\":1,\"374\":2,\"628\":1,\"731\":1,\"738\":1,\"941\":4,\"1093\":2,\"1285\":1,\"1287\":3,\"2030\":4,\"2308\":1,\"2374\":1,\"2740\":1}}],[\"majorversion+\",{\"1\":{\"1831\":1}}],[\"majorversion\",{\"1\":{\"1831\":1}}],[\"macromedia\",{\"1\":{\"1735\":1}}],[\"machine\",{\"1\":{\"772\":1}}],[\"magna\",{\"1\":{\"1606\":1,\"1609\":2}}],[\"mashibing\",{\"1\":{\"1549\":2,\"1768\":1}}],[\"master\",{\"0\":{\"802\":1},\"1\":{\"734\":1,\"744\":1,\"763\":1}}],[\"mandatory意思是强制要求上下文中有事务\",{\"1\":{\"2732\":1}}],[\"mandatory\",{\"0\":{\"2729\":1},\"1\":{\"2725\":1,\"2737\":1}}],[\"man\",{\"1\":{\"2609\":3}}],[\"mango\",{\"1\":{\"1393\":2,\"1394\":1,\"1395\":2,\"1401\":2}}],[\"manipulation\",{\"0\":{\"933\":1}}],[\"managed\",{\"0\":{\"2318\":1},\"1\":{\"2318\":2}}],[\"management\",{\"1\":{\"910\":1}}],[\"manager属性指向datasourcetransactionmanager事务管理器\",{\"1\":{\"2710\":1}}],[\"manager=\",{\"1\":{\"2706\":1,\"2710\":1,\"2903\":1,\"2908\":1}}],[\"manager>\",{\"1\":{\"2092\":1}}],[\"manager中的角色分类\",{\"1\":{\"1759\":1}}],[\"manager中没有默认用户\",{\"1\":{\"1759\":1}}],[\"manager的用户配置需要配置两个部分\",{\"1\":{\"1759\":1}}],[\"manager需要以用户角色进行登录并授权才能使用相应的功能\",{\"1\":{\"1758\":1}}],[\"manager是处于禁用状态的\",{\"1\":{\"1758\":1}}],[\"manager是tomcat自带的\",{\"1\":{\"1758\":1}}],[\"manager上级领导编号\",{\"1\":{\"1211\":1}}],[\"manager\",{\"0\":{\"1758\":1},\"1\":{\"90\":1,\"1068\":7,\"1211\":3,\"1758\":1,\"1759\":16,\"2706\":1}}],[\"matchmedia\",{\"1\":{\"1452\":1}}],[\"match对象\",{\"0\":{\"1410\":1}}],[\"match是一个终结方法\",{\"1\":{\"870\":1}}],[\"match\",{\"0\":{\"870\":1},\"1\":{\"736\":1,\"1405\":1}}],[\"math对象\",{\"1\":{\"1403\":1}}],[\"math\",{\"1\":{\"294\":2,\"316\":1,\"364\":2,\"367\":1,\"368\":1,\"1417\":1}}],[\"math类\",{\"0\":{\"365\":1,\"3015\":1},\"1\":{\"38\":1}}],[\"makefriend<\",{\"1\":{\"718\":1}}],[\"makefriend依赖hellofriend\",{\"1\":{\"652\":1}}],[\"make→ant→maven→gradle→其他\",{\"1\":{\"656\":1}}],[\"maybatis底层为我们做了以下事情\",{\"1\":{\"2380\":1}}],[\"may\",{\"1\":{\"364\":1}}],[\"maxelementsondisk=\",{\"1\":{\"2485\":1}}],[\"maxelementsinmemory=\",{\"1\":{\"2485\":1}}],[\"maxfractiondigits\",{\"1\":{\"2029\":1}}],[\"maxintegerdigits属性和minintegerdigits属性允许您指定整数的长度\",{\"1\":{\"2029\":1}}],[\"maxintegerdigits\",{\"1\":{\"2029\":1}}],[\"maximum\",{\"1\":{\"294\":3,\"364\":1}}],[\"maxsparethreads=\",{\"1\":{\"1757\":1}}],[\"maxsparethreads\",{\"1\":{\"1757\":1}}],[\"maxsize=integer\",{\"1\":{\"1280\":1,\"1288\":1}}],[\"maxsize=10\",{\"1\":{\"1274\":1,\"1278\":1}}],[\"maxsize\",{\"1\":{\"865\":1,\"1280\":2,\"1288\":2}}],[\"maxthreads=\",{\"1\":{\"1757\":1}}],[\"maxthreads\",{\"1\":{\"1757\":1,\"1765\":1}}],[\"max=\",{\"1\":{\"1347\":1,\"1348\":1,\"1555\":1,\"1698\":6,\"2312\":1}}],[\"maxby\",{\"1\":{\"880\":1}}],[\"max和min\",{\"0\":{\"872\":1}}],[\"maxday\",{\"1\":{\"376\":2}}],[\"max\",{\"1\":{\"294\":1,\"336\":1,\"338\":1,\"364\":6,\"367\":1,\"837\":2,\"872\":2,\"880\":1,\"1041\":1,\"1071\":1,\"1347\":1,\"1408\":2,\"1409\":4,\"1411\":1,\"1412\":4,\"2172\":1,\"2408\":1}}],[\"mail\",{\"1\":{\"206\":1,\"1805\":1}}],[\"mainservlet\",{\"0\":{\"1910\":1},\"1\":{\"1909\":1,\"1910\":2}}],[\"main目录下xml文件编译问题\",{\"0\":{\"2505\":1}}],[\"main目录下的java代码不能访问这个范围的依赖\",{\"1\":{\"690\":1}}],[\"main目录下的java代码可以访问这个范围的依赖\",{\"1\":{\"689\":1,\"691\":1}}],[\"main目录用于存放主程序\",{\"1\":{\"679\":1}}],[\"main和test\",{\"1\":{\"680\":1,\"688\":1}}],[\"main======\",{\"1\":{\"458\":1}}],[\"main\",{\"0\":{\"1689\":1,\"1908\":1},\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"30\":2,\"32\":1,\"114\":1,\"219\":1,\"220\":1,\"234\":2,\"238\":1,\"239\":2,\"240\":3,\"241\":1,\"242\":1,\"244\":2,\"245\":1,\"247\":1,\"248\":1,\"251\":1,\"260\":1,\"262\":1,\"265\":1,\"266\":1,\"274\":1,\"275\":1,\"278\":2,\"279\":1,\"281\":1,\"283\":1,\"286\":1,\"287\":4,\"288\":1,\"292\":1,\"300\":1,\"303\":1,\"305\":1,\"306\":1,\"309\":1,\"315\":1,\"318\":1,\"327\":1,\"352\":1,\"356\":1,\"357\":1,\"364\":1,\"367\":1,\"368\":1,\"371\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"379\":1,\"380\":1,\"382\":1,\"387\":1,\"390\":1,\"392\":1,\"395\":1,\"396\":1,\"405\":1,\"408\":1,\"409\":1,\"412\":1,\"415\":1,\"418\":1,\"421\":1,\"422\":2,\"425\":1,\"428\":1,\"431\":1,\"438\":3,\"440\":1,\"441\":1,\"442\":1,\"445\":1,\"446\":1,\"450\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"461\":2,\"489\":1,\"490\":1,\"503\":1,\"506\":1,\"509\":2,\"510\":2,\"511\":2,\"512\":2,\"513\":2,\"515\":2,\"516\":2,\"517\":2,\"518\":2,\"543\":1,\"560\":1,\"561\":1,\"562\":1,\"563\":1,\"564\":1,\"568\":3,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"585\":1,\"588\":1,\"591\":1,\"594\":1,\"816\":1,\"817\":1,\"820\":1,\"825\":1,\"826\":1,\"828\":1,\"829\":1,\"830\":1,\"831\":1,\"832\":1,\"835\":1,\"837\":1,\"839\":1,\"840\":1,\"842\":1,\"843\":1,\"844\":1,\"845\":1,\"847\":1,\"848\":1,\"856\":2,\"859\":2,\"860\":1,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":1,\"868\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":3,\"874\":1,\"875\":1,\"876\":1,\"885\":10,\"887\":6,\"904\":1,\"1215\":1,\"1216\":4,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1287\":1,\"1304\":1,\"1321\":1,\"1686\":1,\"1908\":1,\"1909\":1,\"1910\":1,\"2293\":1,\"2501\":3,\"2505\":2,\"2605\":2,\"2609\":1,\"2612\":1,\"2615\":1}}],[\"mariadb\",{\"1\":{\"2179\":1}}],[\"marigot\",{\"1\":{\"901\":2}}],[\"mark\",{\"0\":{\"3077\":1}}],[\"mark70\",{\"1\":{\"1928\":1}}],[\"markup\",{\"1\":{\"1325\":1}}],[\"markdown语法\",{\"0\":{\"1166\":1},\"1\":{\"1161\":4,\"1162\":1}}],[\"markdown语法|markdown语法\",{\"1\":{\"53\":1}}],[\"markdown\",{\"1\":{\"53\":1}}],[\"martin\",{\"1\":{\"1211\":1}}],[\"margin\",{\"1\":{\"65\":2,\"1527\":1,\"1528\":1,\"1529\":3,\"1535\":2,\"1793\":1,\"1927\":1,\"1928\":1,\"1976\":1,\"2025\":1,\"2031\":1}}],[\"map>\",{\"1\":{\"2566\":1}}],[\"maps\",{\"1\":{\"2243\":2,\"2257\":2}}],[\"maptolong\",{\"0\":{\"874\":1}}],[\"maptodouble\",{\"0\":{\"874\":1}}],[\"maptoint\",{\"0\":{\"874\":1},\"1\":{\"874\":1}}],[\"map<object\",{\"1\":{\"2351\":1}}],[\"map<emp>\",{\"1\":{\"2350\":1}}],[\"map<boolean\",{\"1\":{\"882\":1}}],[\"map<string\",{\"1\":{\"309\":1,\"845\":2,\"881\":4,\"1801\":1,\"1972\":2,\"2242\":1,\"2356\":1,\"2393\":1,\"2565\":1,\"2931\":1}}],[\"map<k\",{\"1\":{\"294\":1}}],[\"map的遍历方式\",{\"1\":{\"292\":1}}],[\"map重写了equse方法\",{\"1\":{\"292\":1}}],[\"map1\",{\"1\":{\"292\":4}}],[\"mapper与\",{\"0\":{\"3156\":1}}],[\"mapper对象全部交给spring去创建\",{\"1\":{\"2907\":1}}],[\"mapper接口的生成策略\",{\"1\":{\"2501\":1}}],[\"mapper接口继承basemapper时\",{\"1\":{\"2223\":1}}],[\"mapper2\",{\"1\":{\"2475\":2,\"2479\":2,\"2488\":2}}],[\"mapper1==mapper2\",{\"1\":{\"2475\":1,\"2479\":1,\"2488\":1}}],[\"mapper1\",{\"1\":{\"2475\":2,\"2479\":2,\"2488\":2}}],[\"mapper中通过parametertype属性来控制参数的类型及数量\",{\"1\":{\"2352\":1}}],[\"mapper层\",{\"0\":{\"2344\":1,\"2347\":1,\"2350\":1,\"2354\":1,\"2362\":1,\"2365\":1,\"2368\":1}}],[\"mapper映射文件的文件路径导入\",{\"1\":{\"2320\":1}}],[\"mappers\",{\"1\":{\"2322\":3}}],[\"mapperscannerconfigurer\",{\"1\":{\"2903\":2,\"2907\":2}}],[\"mapperscan需要指向mapper层的包\",{\"1\":{\"2285\":1}}],[\"mapperscan\",{\"1\":{\"2285\":1,\"2290\":1}}],[\"mappers>\",{\"1\":{\"2278\":1,\"2320\":1,\"2321\":1,\"2322\":1,\"2323\":1,\"2374\":1}}],[\"mapper>\",{\"1\":{\"2279\":1,\"2374\":1,\"2918\":1}}],[\"mapper的层级结构一致\",{\"1\":{\"2275\":1}}],[\"mapper\",{\"1\":{\"867\":1,\"1263\":1,\"2179\":3,\"2191\":1,\"2214\":1,\"2278\":1,\"2279\":2,\"2285\":1,\"2374\":7,\"2379\":2,\"2386\":2,\"2391\":2,\"2395\":2,\"2399\":2,\"2404\":2,\"2406\":2,\"2407\":2,\"2425\":1,\"2428\":3,\"2431\":3,\"2435\":5,\"2444\":4,\"2447\":4,\"2450\":6,\"2453\":2,\"2456\":2,\"2459\":2,\"2462\":2,\"2466\":2,\"2467\":2,\"2479\":1,\"2487\":1,\"2497\":2,\"2501\":2,\"2503\":2,\"2516\":1,\"2903\":2,\"2907\":2,\"2918\":3}}],[\"mappedjdbctypes\",{\"1\":{\"2509\":1}}],[\"mappedtypes\",{\"1\":{\"2509\":1}}],[\"mappedstatement\",{\"1\":{\"2493\":2}}],[\"mapped\",{\"1\":{\"65\":1}}],[\"mapping表示请求的url\",{\"1\":{\"2789\":1}}],[\"mapping=\",{\"1\":{\"2789\":6,\"2790\":1,\"2898\":1,\"2902\":1}}],[\"mapping标签的顺序决定\",{\"1\":{\"2047\":1}}],[\"mapping>\",{\"1\":{\"545\":2,\"1791\":2,\"1795\":2,\"1831\":4,\"1834\":4,\"1838\":2,\"1839\":2,\"1840\":2,\"1841\":2,\"1842\":2,\"1844\":8,\"1846\":2,\"1847\":4,\"1999\":6,\"2047\":4,\"2058\":2,\"2759\":2,\"2807\":2,\"2829\":2,\"2830\":2,\"2910\":2,\"2912\":2}}],[\"mapping\",{\"1\":{\"279\":1,\"2198\":1}}],[\"map\",{\"0\":{\"867\":1},\"1\":{\"279\":2,\"291\":1,\"292\":27,\"854\":2,\"861\":1,\"867\":3,\"868\":2,\"870\":3,\"872\":2,\"873\":6,\"876\":1,\"880\":1,\"883\":3,\"1485\":1,\"1801\":1,\"1972\":6,\"2242\":5,\"2350\":1,\"2351\":1,\"2356\":1,\"2393\":1,\"2394\":1,\"2395\":4}}],[\"map集合接收参数\",{\"0\":{\"2801\":1}}],[\"map集合注入\",{\"1\":{\"2566\":1}}],[\"map集合\",{\"1\":{\"142\":2}}],[\"map接口的常用实现类\",{\"1\":{\"289\":1}}],[\"map接口\",{\"0\":{\"289\":1,\"3007\":1},\"1\":{\"37\":1}}],[\"maven工程的target目录\",{\"0\":{\"769\":1}}],[\"maven工具会根据jar包的坐标\",{\"1\":{\"693\":1}}],[\"mavendemo01\",{\"1\":{\"714\":1,\"715\":1}}],[\"maven采用sha1算法校验机制\",{\"1\":{\"701\":1}}],[\"maven中的坐标它就是体现当前maven工程的唯一性\",{\"1\":{\"685\":1}}],[\"maven项目默认对于java文件下只处理\",{\"1\":{\"2505\":1}}],[\"maven项目之间可以通过坐标相互进行依赖\",{\"1\":{\"687\":1}}],[\"maven项目有自己的一套规范\",{\"1\":{\"684\":1}}],[\"maven项目对象模型\",{\"1\":{\"655\":1}}],[\"maven<\",{\"1\":{\"683\":1,\"714\":2,\"715\":2}}],[\"maven默认的本地仓库\",{\"1\":{\"675\":1}}],[\"maven是使用java开发的\",{\"1\":{\"674\":1}}],[\"maven是一款自动化构建工具\",{\"1\":{\"656\":1}}],[\"maven是什么\",{\"0\":{\"655\":1}}],[\"maven这个单词的本意是\",{\"1\":{\"656\":1}}],[\"maven就可以替我们自动的将当前jar包所依赖的其他所有jar包全部导入进来\",{\"1\":{\"651\":1}}],[\"maven就会自动从中央仓库进行下载\",{\"1\":{\"650\":1}}],[\"maven的生命周期与插件目标相互绑定\",{\"1\":{\"711\":1}}],[\"maven的插件\",{\"1\":{\"706\":1}}],[\"maven的安全性保障机制\",{\"0\":{\"701\":1}}],[\"maven的命令\",{\"0\":{\"681\":1}}],[\"maven的核心仅仅定义了抽象的生命周期\",{\"1\":{\"711\":1}}],[\"maven的核心配置文件位置\",{\"1\":{\"675\":1}}],[\"maven的核心概念\",{\"0\":{\"682\":1,\"3048\":1},\"1\":{\"45\":1}}],[\"maven的本地仓库配置\",{\"0\":{\"675\":1}}],[\"maven的使用\",{\"0\":{\"672\":1,\"673\":1,\"3047\":1},\"1\":{\"45\":1}}],[\"maven\",{\"0\":{\"45\":1,\"2969\":1,\"3045\":1},\"1\":{\"7\":1,\"655\":6,\"674\":4,\"675\":2,\"676\":4,\"680\":4,\"683\":4,\"714\":8,\"715\":8,\"1552\":1,\"2179\":1,\"2186\":1,\"2267\":6,\"2374\":2,\"2500\":1,\"2629\":2,\"2665\":2,\"2744\":1,\"2748\":4,\"2885\":4}}],[\"mybeanprocesser\",{\"1\":{\"2574\":3}}],[\"mybatis动态\",{\"0\":{\"3164\":1}}],[\"mybatis动态sql\",{\"0\":{\"2441\":1},\"1\":{\"215\":1}}],[\"mybatis项目环境\",{\"0\":{\"3158\":1}}],[\"mybatis与spring的整合包\",{\"1\":{\"2894\":1}}],[\"mybatis底层的jdbc封装\",{\"0\":{\"2517\":1}}],[\"mybatis底层已经帮我们实现了别名\",{\"1\":{\"2335\":1}}],[\"mybatis插件机制\",{\"0\":{\"2516\":1}}],[\"mybatis四大对象\",{\"0\":{\"2511\":1}}],[\"mybatis在日期时间处理的问题上\",{\"1\":{\"2508\":1}}],[\"mybatis在简化操作方法提出了动态sql功能\",{\"1\":{\"2441\":1}}],[\"mybatis内置类型处理器\",{\"0\":{\"2507\":1}}],[\"mybatis其他配置\",{\"0\":{\"2504\":1}}],[\"mybatis3\",{\"1\":{\"2501\":2,\"2508\":1}}],[\"mybatis3simple\",{\"1\":{\"2501\":1}}],[\"mybatis一级缓存和自带的二级缓存都是通过perpetualcache来操作缓存数据的\",{\"1\":{\"2492\":1}}],[\"mybatis的一个主要的特点就是需要程序员自己编写sql\",{\"1\":{\"2497\":1}}],[\"mybatis的二级缓存的缓存介质有多种多样\",{\"1\":{\"2480\":1}}],[\"mybatis的缓存将相同查询条件的sql语句执行一遍后所得到的结果存在内存或者某种缓存介质当中\",{\"1\":{\"2470\":1}}],[\"mybatis开启一级缓存\",{\"1\":{\"2472\":1}}],[\"mybatis分为一级缓存和二级缓存\",{\"1\":{\"2470\":1}}],[\"mybatis允许使用缓存\",{\"1\":{\"2470\":1}}],[\"mybatis也可以在注解中配置sql\",{\"1\":{\"2441\":1}}],[\"mybatis中动态sql是编写在mapper\",{\"1\":{\"2441\":1}}],[\"mybatis层次\",{\"1\":{\"2440\":3}}],[\"mybatis提供了支持\",{\"1\":{\"2408\":1}}],[\"mybatis可以根据自己的情况进行判断\",{\"1\":{\"2352\":1}}],[\"mybatis本身并不做事务的处理\",{\"1\":{\"2318\":1}}],[\"mybatisconfiguration\",{\"1\":{\"2285\":1}}],[\"mybatis<\",{\"1\":{\"2267\":1,\"2374\":1,\"2500\":1,\"2894\":2}}],[\"mybatis对于所有的查询都会再条件中拼接\",{\"1\":{\"2234\":1}}],[\"mybatis是一个半自动orm框架\",{\"1\":{\"2196\":1}}],[\"mybatis\",{\"0\":{\"2894\":1},\"1\":{\"1263\":1,\"2178\":3,\"2179\":1,\"2193\":1,\"2196\":4,\"2197\":1,\"2214\":1,\"2223\":1,\"2225\":1,\"2229\":1,\"2235\":3,\"2267\":1,\"2278\":3,\"2279\":3,\"2314\":1,\"2316\":1,\"2319\":3,\"2320\":3,\"2321\":3,\"2323\":1,\"2333\":1,\"2334\":3,\"2374\":7,\"2484\":2,\"2486\":1,\"2500\":2,\"2501\":4,\"2507\":1,\"2509\":2,\"2740\":1,\"2894\":1,\"2903\":2,\"2907\":2,\"2918\":3}}],[\"mybatis逆向工程与其他配置\",{\"0\":{\"2495\":1,\"3166\":1},\"1\":{\"215\":1}}],[\"mybatis缓存\",{\"0\":{\"2468\":1,\"3165\":1},\"1\":{\"215\":1,\"1226\":1}}],[\"mybatis多表查询\",{\"0\":{\"2416\":1,\"3163\":1},\"1\":{\"215\":1}}],[\"mybatis代理模式的开发\",{\"0\":{\"2370\":1,\"3162\":1},\"1\":{\"215\":1,\"2412\":1,\"2457\":1,\"2918\":1}}],[\"mybatis普通模式的开发\",{\"0\":{\"2336\":1},\"1\":{\"215\":1}}],[\"mybatis配置\",{\"0\":{\"2302\":1,\"3160\":1},\"1\":{\"215\":1,\"2487\":1}}],[\"mybatis初识\",{\"0\":{\"2194\":1,\"3155\":1},\"1\":{\"215\":1}}],[\"mybatisplusinterceptor\",{\"1\":{\"2285\":4,\"2288\":4,\"2290\":7}}],[\"mybatisplusconfig\",{\"1\":{\"2285\":1,\"2290\":1}}],[\"mybatisplusdemo\",{\"1\":{\"2285\":1}}],[\"mybatisplusdemoapplicationtests\",{\"1\":{\"2192\":1}}],[\"mybatisplus中的mapper接口继承自basemapper\",{\"1\":{\"2191\":1}}],[\"mybatisplus的依赖mysql数据库数据库连接池\",{\"1\":{\"2186\":1}}],[\"mybatisplus快速上手\",{\"0\":{\"2177\":1},\"1\":{\"214\":1}}],[\"mybatisplus\",{\"0\":{\"214\":1},\"1\":{\"13\":1,\"2293\":1}}],[\"mybatis基础\",{\"0\":{\"215\":1,\"2995\":1},\"1\":{\"13\":1}}],[\"myhost\",{\"1\":{\"2301\":1}}],[\"myurl\",{\"1\":{\"2163\":1}}],[\"myapplicationlistener\",{\"1\":{\"2084\":1,\"2085\":1}}],[\"myannotation\",{\"1\":{\"904\":15}}],[\"myannotations\",{\"1\":{\"904\":2}}],[\"myrequestlistener\",{\"1\":{\"2076\":1,\"2077\":1}}],[\"myrequestlistener<\",{\"1\":{\"2075\":1}}],[\"myfastautogenerator\",{\"1\":{\"2293\":1}}],[\"myfilter0\",{\"1\":{\"2052\":2}}],[\"myfilter2<\",{\"1\":{\"2047\":1}}],[\"myfilter2\",{\"1\":{\"2047\":3}}],[\"myfilter1<\",{\"1\":{\"2047\":1,\"2049\":1}}],[\"myfilter1\",{\"1\":{\"2047\":3,\"2049\":1,\"2052\":2}}],[\"myfilter<\",{\"1\":{\"1999\":1}}],[\"myfilter\",{\"1\":{\"1998\":1,\"2001\":5,\"2052\":2}}],[\"myform\",{\"1\":{\"1330\":1}}],[\"myproject\",{\"1\":{\"1747\":2}}],[\"mypro02\",{\"1\":{\"1147\":3}}],[\"mypro01\",{\"1\":{\"1147\":4}}],[\"mydiv\",{\"1\":{\"1529\":2,\"1536\":2}}],[\"mydb\",{\"1\":{\"1251\":1,\"1976\":1}}],[\"myid\",{\"1\":{\"1508\":1,\"1509\":1,\"1510\":2}}],[\"mysessionactivationlistener\",{\"1\":{\"2082\":1,\"2095\":1,\"2097\":1}}],[\"mysessionbindinglistener\",{\"1\":{\"2081\":5}}],[\"mysessionlistener\",{\"1\":{\"2079\":1,\"2080\":1}}],[\"myservlet3\",{\"1\":{\"2075\":2}}],[\"myservlet1<\",{\"1\":{\"1999\":1}}],[\"myservlet1响应的数据\",{\"1\":{\"1997\":1}}],[\"myservlet1\",{\"1\":{\"1997\":2,\"1999\":2,\"2047\":2,\"2052\":2,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1}}],[\"myservlet4\",{\"1\":{\"1825\":6}}],[\"myservlet2<\",{\"1\":{\"1999\":1}}],[\"myservlet2响应的数据\",{\"1\":{\"1997\":1}}],[\"myservlet2\",{\"1\":{\"1808\":1,\"1997\":2,\"1999\":1}}],[\"myservlet<\",{\"1\":{\"1791\":1}}],[\"myservlet\",{\"1\":{\"1789\":1,\"1790\":1,\"1791\":1,\"2749\":2,\"2753\":1}}],[\"mystyle\",{\"1\":{\"1472\":1}}],[\"mysql连接驱动\",{\"1\":{\"2665\":2,\"2756\":1,\"2890\":1}}],[\"mysql=mysql\",{\"1\":{\"2566\":1}}],[\"mysql驱动\",{\"1\":{\"2500\":1}}],[\"mysql支持主键自增\",{\"1\":{\"2408\":1}}],[\"mysql支持选择在该类型关键字后面的括号内指定整数值的显示宽度\",{\"1\":{\"939\":1}}],[\"mysqlconnector\",{\"1\":{\"2267\":1,\"2374\":1}}],[\"mysql服务器也是需要每次都去校验sql语句的语法格式\",{\"1\":{\"1250\":1}}],[\"mysqlintegrityconstraintviolationexception\",{\"1\":{\"1216\":1}}],[\"mysql5\",{\"1\":{\"1155\":4,\"2683\":2}}],[\"mysql57\",{\"1\":{\"1155\":2}}],[\"mysqldatasource\",{\"1\":{\"2301\":1}}],[\"mysqld\",{\"1\":{\"1154\":1,\"1155\":3}}],[\"mysqldump\",{\"1\":{\"1152\":1}}],[\"mysql>\",{\"1\":{\"1153\":1}}],[\"mysql中定义的一个函数\",{\"1\":{\"1147\":1}}],[\"mysql中主要支持以下几种种完整性约束\",{\"1\":{\"981\":1}}],[\"mysql不仅要保存数据\",{\"1\":{\"1128\":1}}],[\"mysqladmin\",{\"1\":{\"1121\":1}}],[\"mysql默认repeatable\",{\"1\":{\"2719\":1}}],[\"mysql默认是自动提交事务的\",{\"1\":{\"1104\":1}}],[\"mysql默认在对应的列上建立主键索引\",{\"1\":{\"986\":1}}],[\"mysql进行事务管理\",{\"0\":{\"1103\":1}}],[\"mysql会给唯一约束的列上默认创建一个唯一索引\",{\"1\":{\"992\":1}}],[\"mysql会自动将该字段赋值为系统当前的日期与时间\",{\"1\":{\"942\":1}}],[\"mysql的执行流程如下图\",{\"1\":{\"1250\":1}}],[\"mysql的数据存储路径下\",{\"1\":{\"1154\":1}}],[\"mysql的常用函数\",{\"0\":{\"1084\":1}}],[\"mysql的主键名总是primary\",{\"1\":{\"986\":1}}],[\"mysql的核心程序完全采用多线程编程\",{\"1\":{\"920\":1}}],[\"mysql提供了一种机制来检查数据库中的数据是否满足规定的条件\",{\"1\":{\"981\":1}}],[\"mysql或者在windows服务窗口下停止服务\",{\"1\":{\"928\":1}}],[\"mysql卸载\",{\"0\":{\"928\":1}}],[\"mysql下可以有多个数据库\",{\"1\":{\"926\":1}}],[\"mysql访问\",{\"0\":{\"924\":1}}],[\"mysql文件下的内容才是真正的mysql中数据\",{\"1\":{\"923\":1,\"928\":1}}],[\"mysql文件下放的是软件的内容\",{\"1\":{\"923\":1}}],[\"mysql80\",{\"1\":{\"923\":1}}],[\"mysql管理员账户名称是root\",{\"1\":{\"922\":1}}],[\"mysql安装\",{\"0\":{\"921\":1}}],[\"mysql官方是不负责任的\",{\"1\":{\"920\":1}}],[\"mysql官方的支持服务只是针对企业版\",{\"1\":{\"920\":1}}],[\"mysql分为社区版和企业版\",{\"1\":{\"920\":1}}],[\"mysql可以支持windows系统\",{\"1\":{\"920\":1}}],[\"mysql可以在不同的操作系统下运行\",{\"1\":{\"920\":1}}],[\"mysql采用了general\",{\"1\":{\"920\":1}}],[\"mysql最强大的优势之一在于它是一个开放源代码的数据库管理系统\",{\"1\":{\"920\":1}}],[\"mysql之所以受到业界人士的青睐\",{\"1\":{\"920\":1}}],[\"mysql是mysql的命令行工具\",{\"1\":{\"925\":1}}],[\"mysql是一款开源的\",{\"1\":{\"920\":1}}],[\"mysql是一种开放源代码的轻量级关系型数据库\",{\"1\":{\"919\":1}}],[\"mysql是目前it行业最流行的开放源代码的数据库管理系统\",{\"1\":{\"920\":1}}],[\"mysql数据库最初是由瑞典mysql\",{\"1\":{\"920\":1}}],[\"mysql数据库使用最常用的结构化查询语言\",{\"1\":{\"919\":1}}],[\"mysql介绍\",{\"0\":{\"920\":1}}],[\"mysql等\",{\"1\":{\"917\":1}}],[\"mysql入门\",{\"0\":{\"929\":1},\"1\":{\"52\":1}}],[\"mysql\",{\"0\":{\"52\":1},\"1\":{\"10\":1,\"910\":1,\"919\":1,\"921\":1,\"922\":4,\"923\":7,\"925\":6,\"926\":2,\"928\":4,\"930\":1,\"1112\":1,\"1154\":1,\"1155\":3,\"1215\":2,\"1216\":4,\"1217\":3,\"1219\":2,\"1220\":2,\"1221\":2,\"1222\":2,\"1227\":2,\"1231\":2,\"1234\":2,\"1235\":2,\"1242\":2,\"1251\":1,\"1252\":2,\"1253\":2,\"1264\":2,\"1266\":2,\"1274\":2,\"1278\":2,\"1976\":2,\"2179\":1,\"2187\":2,\"2278\":2,\"2285\":1,\"2293\":1,\"2297\":1,\"2298\":1,\"2301\":1,\"2332\":2,\"2374\":2,\"2501\":2,\"2566\":9,\"2567\":2,\"2583\":2,\"2665\":1,\"2666\":2,\"2897\":2}}],[\"myjs\",{\"1\":{\"1380\":1}}],[\"myclass\",{\"1\":{\"1548\":12,\"1549\":9,\"1552\":15,\"1555\":1}}],[\"mycls\",{\"1\":{\"1508\":2,\"1509\":3,\"1510\":2,\"1515\":2}}],[\"myconnectionpool\",{\"1\":{\"1274\":1,\"1275\":4,\"1280\":1,\"1288\":2}}],[\"mychart\",{\"1\":{\"65\":2}}],[\"my\",{\"0\":{\"2974\":1,\"2994\":1,\"3063\":1,\"3154\":1,\"3161\":1},\"1\":{\"923\":1,\"1321\":1,\"1326\":1,\"1687\":1}}],[\"mymethod\",{\"1\":{\"591\":5}}],[\"mylinkedlist\",{\"1\":{\"262\":10}}],[\"myexception\",{\"1\":{\"36\":6}}],[\"a集成\",{\"0\":{\"3053\":1}}],[\"a的账户发生了扣款\",{\"1\":{\"2698\":1}}],[\"aop添加事务\",{\"1\":{\"2710\":1}}],[\"aop联盟\",{\"1\":{\"2665\":1,\"2756\":1}}],[\"aop联盟包\",{\"1\":{\"2629\":1,\"2665\":1,\"2889\":1}}],[\"aopalliance\",{\"1\":{\"2665\":1}}],[\"aop对获取bean的影响\",{\"0\":{\"2654\":1}}],[\"aop的底层就是动态代理\",{\"1\":{\"2699\":1}}],[\"aop的通知获取细节\",{\"0\":{\"2650\":1}}],[\"aop的完全注解开发\",{\"0\":{\"2649\":1}}],[\"aop的完全xml开发\",{\"0\":{\"2648\":1}}],[\"aop的配置\",{\"1\":{\"2648\":1}}],[\"aop=\",{\"1\":{\"2630\":1,\"2648\":1,\"2666\":1,\"2758\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"aop实现的原理就是动态代理\",{\"1\":{\"2619\":1}}],[\"aop切面编程的相关术语\",{\"0\":{\"2620\":1}}],[\"aop切面编程一般可以帮助我们在不修改现有代码的情况下\",{\"1\":{\"2619\":1}}],[\"aop切面编程是程序设计的一种概念\",{\"1\":{\"2523\":1}}],[\"aop切面编程\",{\"0\":{\"2523\":1}}],[\"aop\",{\"1\":{\"2520\":1,\"2533\":3,\"2629\":1,\"2630\":5,\"2635\":1,\"2648\":13,\"2651\":1,\"2652\":1,\"2653\":1,\"2666\":4,\"2710\":3,\"2758\":4,\"2779\":4,\"2780\":4,\"2789\":4,\"2898\":4,\"2899\":5,\"2903\":4,\"2904\":5}}],[\"aop面向切面编程\",{\"0\":{\"2617\":1},\"1\":{\"216\":1}}],[\"a3\",{\"1\":{\"2213\":1}}],[\"a5\",{\"1\":{\"2213\":1}}],[\"ajp\",{\"1\":{\"1765\":1}}],[\"ajax实现\",{\"0\":{\"3151\":1}}],[\"ajaxdemo3\",{\"1\":{\"2169\":2,\"2170\":2,\"2171\":2}}],[\"ajax一些属性的值\",{\"1\":{\"2155\":1}}],[\"ajax的写法\",{\"1\":{\"2155\":1}}],[\"ajax的特点\",{\"0\":{\"2110\":1}}],[\"ajax异步提交的可选属性和方法较多\",{\"1\":{\"2155\":1}}],[\"ajaxstart或ajaxstop可用于控制各种ajax事件\",{\"1\":{\"2148\":1}}],[\"ajaxsetup\",{\"1\":{\"2137\":1}}],[\"ajax时提供的datatype参数\",{\"1\":{\"2147\":1,\"2155\":1}}],[\"ajax事件函数如下\",{\"1\":{\"2145\":1}}],[\"ajax数据格式处理\",{\"0\":{\"2118\":1}}],[\"ajax关键技术\",{\"0\":{\"2109\":1}}],[\"ajax<\",{\"1\":{\"1552\":1}}],[\"ajax\",{\"0\":{\"213\":1,\"2107\":1,\"2130\":1,\"2133\":1,\"2993\":1,\"3119\":1,\"3149\":1},\"1\":{\"12\":1,\"1720\":2,\"2108\":2,\"2131\":2,\"2132\":2,\"2155\":1,\"2157\":1,\"2160\":2,\"2161\":2,\"2163\":2,\"2164\":2,\"2165\":2,\"2169\":2,\"2170\":2,\"2176\":1,\"2877\":1}}],[\"axios\",{\"1\":{\"1720\":1,\"1721\":2}}],[\"axios的概念\",{\"0\":{\"1720\":1}}],[\"a8\",{\"1\":{\"1330\":2}}],[\"aggressivelazyloading\",{\"1\":{\"2434\":1}}],[\"against\",{\"1\":{\"1185\":1}}],[\"age>50\",{\"1\":{\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1}}],[\"age>100\",{\"1\":{\"538\":1}}],[\"age<0\",{\"1\":{\"538\":1}}],[\"age=29\",{\"1\":{\"881\":3,\"882\":1}}],[\"age=22\",{\"1\":{\"880\":1,\"881\":3,\"882\":1}}],[\"age=19\",{\"1\":{\"881\":3,\"882\":1}}],[\"age=11\",{\"1\":{\"880\":1,\"881\":3,\"882\":1}}],[\"age=0\",{\"1\":{\"876\":5}}],[\"age=\",{\"1\":{\"274\":1,\"275\":1,\"278\":1,\"281\":1,\"287\":3,\"352\":1,\"428\":1,\"1713\":1,\"2245\":1,\"2246\":1,\"2250\":1}}],[\"agentid\",{\"1\":{\"905\":1}}],[\"agent\",{\"1\":{\"177\":1}}],[\"age\",{\"1\":{\"75\":4,\"77\":4,\"78\":2,\"79\":4,\"238\":1,\"240\":1,\"274\":9,\"275\":9,\"278\":5,\"281\":8,\"287\":31,\"352\":11,\"428\":9,\"538\":2,\"543\":1,\"576\":1,\"937\":1,\"955\":1,\"956\":1,\"973\":2,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1016\":1,\"1020\":1,\"1419\":2,\"1421\":3,\"1555\":2,\"1629\":1,\"1630\":5,\"1713\":4,\"1892\":3,\"2124\":8,\"2128\":1,\"2172\":1,\"2182\":1,\"2183\":1,\"2190\":1,\"2205\":1,\"2210\":1,\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2239\":2,\"2240\":1,\"2241\":2,\"2242\":3,\"2243\":1,\"2244\":4,\"2245\":2,\"2246\":2,\"2247\":1,\"2248\":1,\"2249\":2,\"2253\":3,\"2254\":3,\"2255\":2,\"2256\":4,\"2257\":2,\"2258\":1,\"2259\":2,\"2260\":10}}],[\"a∪b\",{\"0\":{\"1066\":1,\"1067\":1}}],[\"a∩b\",{\"0\":{\"1061\":1,\"1064\":1,\"1067\":1}}],[\"a表里面的主键\",{\"1\":{\"1056\":1}}],[\"affected\",{\"1\":{\"976\":2}}],[\"after标签配置后置通知\",{\"1\":{\"2648\":1}}],[\"afterthrowing注解的throwing属性获取目标方法抛出的异常对象\",{\"1\":{\"2653\":1}}],[\"afterthrowing\",{\"0\":{\"2642\":1},\"1\":{\"2642\":2,\"2653\":2}}],[\"afterreturning\",{\"0\":{\"2641\":1},\"1\":{\"2641\":2,\"2652\":1}}],[\"after注解会使方法在执行测试单元后执行\",{\"1\":{\"2282\":1,\"2374\":1}}],[\"after注解以后\",{\"1\":{\"524\":1}}],[\"after修饰的那个方法中加入\",{\"1\":{\"524\":1}}],[\"after\",{\"0\":{\"524\":1,\"2643\":1},\"1\":{\"524\":1,\"525\":1,\"535\":1,\"838\":3,\"841\":3,\"888\":1,\"958\":1,\"1571\":2,\"1683\":1,\"2282\":2,\"2374\":1,\"2410\":2,\"2623\":1,\"2643\":2,\"2644\":1,\"2648\":5}}],[\"after分别指向前一个和后一个元素\",{\"1\":{\"282\":1}}],[\"afternodeinsertion\",{\"1\":{\"279\":1}}],[\"afternodeaccess\",{\"1\":{\"279\":1}}],[\"avg\",{\"1\":{\"1041\":1}}],[\"availability\",{\"1\":{\"922\":1}}],[\"averagingdouble\",{\"1\":{\"880\":1}}],[\"avi\",{\"1\":{\"228\":1}}],[\"a2\",{\"1\":{\"816\":1,\"817\":2,\"1870\":5,\"1874\":3,\"1878\":3}}],[\"a或按两次shift来更改ide和项自设置\",{\"1\":{\"608\":1}}],[\"a类ip地址\",{\"1\":{\"493\":1}}],[\"awaituntil\",{\"1\":{\"479\":1}}],[\"await\",{\"1\":{\"475\":1,\"479\":2,\"490\":2}}],[\"a+\",{\"1\":{\"434\":1}}],[\"amazon\",{\"1\":{\"2823\":1}}],[\"amp\",{\"1\":{\"2278\":4,\"2501\":3,\"2560\":2}}],[\"amet\",{\"1\":{\"1606\":1,\"1609\":1}}],[\"american\",{\"1\":{\"930\":1}}],[\"america\",{\"1\":{\"901\":2}}],[\"am或pm\",{\"1\":{\"1093\":1}}],[\"am\",{\"1\":{\"374\":3,\"738\":1,\"750\":4}}],[\"aqua\",{\"1\":{\"1548\":1,\"1549\":1,\"1552\":1,\"1555\":1,\"1567\":1}}],[\"aq\",{\"1\":{\"337\":29}}],[\"advisor>\",{\"1\":{\"2710\":1}}],[\"advisor\",{\"1\":{\"2710\":1}}],[\"advisor子标签上的advice\",{\"1\":{\"2710\":1}}],[\"advice>\",{\"1\":{\"2710\":1}}],[\"advice标签创建的通知\",{\"1\":{\"2710\":1}}],[\"advice标签创建一个事物的通知\",{\"1\":{\"2710\":1}}],[\"adviced\",{\"1\":{\"2626\":1}}],[\"advice\",{\"0\":{\"2623\":1},\"1\":{\"2622\":1,\"2623\":1,\"2624\":1,\"2625\":1,\"2710\":2}}],[\"adipiscing\",{\"1\":{\"1609\":1}}],[\"adipisicing\",{\"1\":{\"1606\":1}}],[\"adsfadsfadsf\",{\"1\":{\"1406\":1}}],[\"adsf\",{\"1\":{\"1406\":1}}],[\"adams\",{\"1\":{\"1211\":1}}],[\"admin\",{\"1\":{\"1076\":1,\"1077\":1,\"1078\":2,\"1079\":2,\"1080\":1,\"1239\":2,\"1246\":3,\"1249\":2,\"1759\":4,\"1794\":2,\"1897\":1,\"1909\":3,\"2557\":2,\"2793\":2,\"2794\":2}}],[\"administrator\",{\"1\":{\"675\":1,\"912\":1,\"1779\":2}}],[\"administrator>mvn\",{\"1\":{\"674\":1}}],[\"ad\",{\"1\":{\"374\":1,\"1606\":1,\"2030\":1}}],[\"adjusting\",{\"1\":{\"922\":1}}],[\"adj\",{\"1\":{\"315\":1}}],[\"addattribute\",{\"1\":{\"2928\":2,\"2929\":2}}],[\"addall\",{\"1\":{\"219\":4,\"300\":4,\"1831\":1,\"1917\":1,\"1921\":1,\"1925\":1,\"1972\":1,\"2128\":1,\"2166\":1}}],[\"addpointcut\",{\"1\":{\"2648\":6}}],[\"addemp\",{\"1\":{\"2361\":1,\"2631\":2,\"2667\":5,\"2674\":2}}],[\"addentry\",{\"1\":{\"294\":2}}],[\"addtableprefix\",{\"1\":{\"2293\":1}}],[\"addtoapplication\",{\"1\":{\"1925\":1}}],[\"addtosession\",{\"1\":{\"1921\":1}}],[\"addtorequest\",{\"1\":{\"1917\":1}}],[\"addcookie\",{\"1\":{\"1887\":1,\"1892\":3,\"1893\":1}}],[\"addclass\",{\"1\":{\"1548\":11,\"1549\":8,\"1552\":14,\"1568\":1}}],[\"adduser\",{\"1\":{\"1841\":1,\"1842\":1,\"2206\":1,\"2631\":2,\"2649\":1}}],[\"addheader\",{\"1\":{\"1814\":1}}],[\"addinclude\",{\"1\":{\"2293\":1}}],[\"addinnerinterceptor\",{\"1\":{\"2285\":1,\"2288\":1,\"2290\":1}}],[\"additional\",{\"1\":{\"1775\":1}}],[\"addifabsent\",{\"1\":{\"315\":1,\"316\":1,\"319\":1}}],[\"add自定义事件是子组件通过$emit传出来的自定义事件\",{\"1\":{\"1715\":1}}],[\"addnumber=\",{\"1\":{\"1715\":1}}],[\"addnumber\",{\"1\":{\"1715\":3}}],[\"adddept\",{\"1\":{\"1264\":3,\"1267\":1}}],[\"addbatch\",{\"1\":{\"1231\":1,\"1235\":1}}],[\"addressoriginalvalue\",{\"1\":{\"2509\":4}}],[\"addresstypehandler\",{\"1\":{\"2509\":2}}],[\"address\",{\"1\":{\"1219\":2,\"1221\":2,\"1253\":6,\"2509\":14}}],[\"add只是添加暂存区\",{\"1\":{\"738\":1}}],[\"addxxx\",{\"1\":{\"316\":1}}],[\"addlast\",{\"1\":{\"260\":3,\"1274\":1,\"1280\":1,\"1288\":1}}],[\"addfirst\",{\"1\":{\"260\":3}}],[\"add方法无论元素是否存在\",{\"1\":{\"315\":1}}],[\"add方法\",{\"1\":{\"257\":1,\"316\":1,\"2634\":1}}],[\"add\",{\"1\":{\"114\":2,\"219\":8,\"220\":2,\"234\":13,\"245\":2,\"251\":11,\"260\":9,\"262\":4,\"263\":1,\"265\":6,\"266\":6,\"278\":10,\"279\":4,\"281\":4,\"283\":6,\"286\":4,\"287\":12,\"288\":5,\"300\":3,\"303\":3,\"305\":1,\"306\":1,\"315\":5,\"316\":1,\"318\":4,\"319\":1,\"324\":1,\"327\":6,\"337\":6,\"523\":5,\"525\":5,\"729\":1,\"731\":1,\"736\":2,\"738\":1,\"763\":2,\"845\":3,\"856\":1,\"876\":12,\"889\":4,\"958\":3,\"988\":5,\"994\":5,\"1000\":1,\"1001\":3,\"1093\":2,\"1211\":2,\"1227\":1,\"1235\":1,\"1266\":1,\"1274\":1,\"1275\":1,\"1280\":1,\"1288\":1,\"1613\":2,\"1614\":3,\"1621\":2,\"1622\":2,\"1640\":2,\"1645\":2,\"1650\":2,\"1662\":2,\"1664\":5,\"1667\":2,\"1670\":2,\"1672\":2,\"1707\":2,\"1711\":2,\"1712\":2,\"1715\":3,\"1976\":1,\"2485\":1,\"2631\":2,\"2634\":3,\"2635\":2,\"2640\":1,\"2641\":1,\"2642\":1,\"2643\":1,\"2644\":1,\"2648\":1,\"2649\":1,\"2678\":4,\"2679\":4,\"2680\":4}}],[\"abatis\",{\"1\":{\"2196\":1}}],[\"ab\",{\"1\":{\"1035\":1}}],[\"ab公司开发\",{\"1\":{\"920\":1}}],[\"about\",{\"1\":{\"808\":2,\"1185\":1}}],[\"ability\",{\"1\":{\"570\":1}}],[\"abf\",{\"1\":{\"431\":2}}],[\"absolute\",{\"0\":{\"1535\":1},\"1\":{\"1535\":2}}],[\"absjnsj\",{\"1\":{\"830\":3}}],[\"abstract\",{\"1\":{\"1266\":1,\"1275\":1}}],[\"abstractstringbuilder\",{\"1\":{\"392\":1}}],[\"abstractmap<k\",{\"1\":{\"294\":1}}],[\"abs\",{\"1\":{\"367\":1,\"1092\":1,\"1411\":1}}],[\"abc<\",{\"1\":{\"1844\":1}}],[\"abcdefg\",{\"1\":{\"1972\":1,\"1980\":1,\"1981\":1}}],[\"abcdefhijk\",{\"1\":{\"431\":1}}],[\"abcdef\",{\"1\":{\"431\":1}}],[\"abc\",{\"1\":{\"238\":2,\"239\":1,\"240\":1,\"241\":2,\"245\":1,\"251\":2,\"392\":1,\"431\":8,\"1312\":1,\"1374\":1,\"1839\":1,\"1844\":4}}],[\"aa\",{\"1\":{\"265\":1,\"266\":1,\"300\":1,\"820\":6,\"878\":14,\"879\":8,\"1171\":1,\"1231\":2,\"1235\":2,\"1695\":1}}],[\"aaaa\",{\"1\":{\"1171\":1}}],[\"aaaaa\",{\"1\":{\"79\":1,\"260\":3}}],[\"aaaaaaaa\",{\"1\":{\"392\":1}}],[\"aaaaaa\",{\"1\":{\"76\":1}}],[\"aaa\",{\"1\":{\"48\":2,\"337\":3,\"831\":1,\"1147\":2,\"1171\":1,\"1264\":2,\"1330\":3,\"1808\":1,\"1856\":1,\"1860\":1,\"2060\":2,\"2170\":2,\"2824\":7}}],[\"a1\",{\"1\":{\"226\":1,\"816\":1,\"817\":2,\"1330\":2,\"1870\":1,\"1874\":3,\"1878\":3}}],[\"aid=\",{\"1\":{\"1241\":1}}],[\"aid\",{\"1\":{\"1234\":3,\"1241\":9,\"1242\":3,\"1252\":3}}],[\"ait\",{\"1\":{\"600\":1}}],[\"ai+1是ai的直接后续\",{\"1\":{\"226\":1}}],[\"ai+1\",{\"1\":{\"226\":1}}],[\"ai\",{\"1\":{\"226\":2,\"937\":1,\"965\":1,\"2417\":3,\"2695\":1,\"2881\":1}}],[\"aiff\",{\"1\":{\"208\":2}}],[\"ai方向\",{\"1\":{\"1\":1}}],[\"augue\",{\"1\":{\"1609\":1}}],[\"authentication\",{\"1\":{\"923\":1,\"1155\":2}}],[\"author=php\",{\"1\":{\"2566\":1,\"2567\":1}}],[\"author=mysql\",{\"1\":{\"2566\":1,\"2567\":1}}],[\"author=java\",{\"1\":{\"2566\":1,\"2567\":1}}],[\"author=\",{\"1\":{\"2566\":6,\"2567\":3}}],[\"authormapper\",{\"1\":{\"2320\":1,\"2321\":1,\"2322\":1}}],[\"author\",{\"1\":{\"538\":1,\"1293\":1,\"1683\":1,\"1897\":1,\"1898\":1,\"2192\":1,\"2276\":1,\"2282\":2,\"2293\":1,\"2330\":2,\"2374\":3,\"2377\":1,\"2565\":1,\"2574\":2,\"2615\":1}}],[\"autumn1\",{\"1\":{\"562\":2}}],[\"autumn\",{\"1\":{\"560\":1,\"561\":2,\"562\":5,\"563\":4}}],[\"autoproxy\",{\"1\":{\"2630\":2,\"2648\":2}}],[\"autowire=\",{\"1\":{\"2579\":1}}],[\"autowire\",{\"1\":{\"2578\":1,\"2579\":1}}],[\"autowired的使用\",{\"0\":{\"2595\":1}}],[\"autowired使用\",{\"1\":{\"2593\":1}}],[\"autowired\",{\"1\":{\"2192\":1,\"2219\":1,\"2220\":1,\"2593\":1,\"2595\":2,\"2596\":1,\"2598\":1,\"2599\":1,\"2667\":2,\"2676\":2,\"2697\":2,\"2702\":4,\"2707\":1,\"2711\":1,\"2916\":1,\"2917\":1,\"2926\":1,\"2928\":1,\"2929\":1,\"2931\":1}}],[\"autoflush=false\",{\"1\":{\"2301\":1}}],[\"autoflush\",{\"1\":{\"1959\":1}}],[\"autofocus=\",{\"1\":{\"1350\":1}}],[\"autofocus\",{\"1\":{\"1350\":2}}],[\"autodeploy=\",{\"1\":{\"1767\":1}}],[\"autogeneratedkeys\",{\"1\":{\"1255\":1}}],[\"autoreconnect=true\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1}}],[\"autocommit\",{\"1\":{\"1106\":1,\"1255\":1}}],[\"automatically\",{\"1\":{\"676\":2}}],[\"autoboxcachemax=<size>选项控制\",{\"1\":{\"364\":1}}],[\"auto\",{\"0\":{\"1009\":1},\"1\":{\"65\":1,\"981\":1,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1012\":1,\"1016\":1,\"1020\":1,\"1081\":1,\"1239\":1,\"1690\":1,\"1793\":1,\"1927\":1,\"1928\":1,\"1976\":1,\"2025\":1,\"2031\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2417\":1,\"2695\":1,\"2728\":1,\"2881\":1}}],[\"au\",{\"1\":{\"208\":1}}],[\"audio\",{\"1\":{\"208\":4}}],[\"acos\",{\"1\":{\"1411\":1}}],[\"activity\",{\"1\":{\"2493\":1}}],[\"activerecord\",{\"1\":{\"2179\":2}}],[\"active\",{\"1\":{\"1515\":1,\"1606\":2,\"1609\":2}}],[\"action=\",{\"1\":{\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":1,\"1337\":1,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1342\":1,\"1343\":1,\"1345\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1439\":1,\"1555\":1,\"1579\":1,\"1586\":1,\"1793\":1,\"1907\":1,\"2055\":1,\"2060\":1,\"2094\":1,\"2114\":1,\"2131\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2814\":1,\"2817\":1,\"2820\":1,\"2830\":4,\"2857\":1,\"2859\":1,\"2863\":1,\"2864\":1,\"2866\":1,\"2867\":1,\"2869\":1,\"2870\":1,\"2872\":1,\"2873\":1,\"2914\":1}}],[\"action属性\",{\"1\":{\"1330\":1}}],[\"action＝\",{\"1\":{\"1330\":1}}],[\"action方式\",{\"1\":{\"1003\":1}}],[\"action\",{\"1\":{\"862\":1,\"1001\":1,\"1003\":1,\"1330\":1,\"1777\":1,\"2702\":1}}],[\"actions\",{\"1\":{\"607\":1}}],[\"actionscript\",{\"1\":{\"70\":1}}],[\"act\",{\"1\":{\"1317\":1}}],[\"acid\",{\"0\":{\"1102\":1}}],[\"aclass2\",{\"1\":{\"581\":1}}],[\"aclass1==aclass2\",{\"1\":{\"581\":1}}],[\"aclass1\",{\"1\":{\"581\":1}}],[\"aclass\",{\"1\":{\"568\":3}}],[\"accusantium\",{\"1\":{\"1606\":2}}],[\"accumulator\",{\"1\":{\"873\":3}}],[\"access\",{\"0\":{\"2530\":1},\"1\":{\"1216\":1,\"1262\":1,\"2172\":4}}],[\"acceptcount=\",{\"1\":{\"1757\":1}}],[\"acceptcount\",{\"1\":{\"1757\":1}}],[\"accept方法\",{\"0\":{\"839\":1}}],[\"accept==null\",{\"1\":{\"513\":1}}],[\"accept\",{\"1\":{\"177\":4,\"509\":5,\"510\":5,\"511\":5,\"512\":7,\"513\":12,\"786\":2,\"825\":1,\"826\":1,\"838\":3,\"839\":1,\"840\":6,\"1800\":1,\"1801\":1,\"2851\":1,\"2857\":1}}],[\"accountcontroller\",{\"1\":{\"2859\":1}}],[\"accountdaoimpl\",{\"1\":{\"2697\":2}}],[\"accountdao\",{\"1\":{\"2697\":5,\"2702\":4,\"2707\":2,\"2711\":2}}],[\"account=new\",{\"1\":{\"1242\":1,\"1252\":1}}],[\"account=\",{\"1\":{\"1242\":1,\"1252\":1}}],[\"account\",{\"1\":{\"1234\":1,\"1239\":1,\"1241\":4,\"1242\":8,\"1246\":2,\"1249\":2,\"1252\":8,\"1263\":2}}],[\"accounting\",{\"1\":{\"1211\":1}}],[\"accountserviceimpl\",{\"1\":{\"2697\":2,\"2702\":4,\"2707\":1,\"2711\":1}}],[\"accountservice\",{\"1\":{\"2697\":7,\"2702\":2,\"2707\":1,\"2710\":1,\"2711\":1}}],[\"accounts\",{\"1\":{\"922\":1}}],[\"accdef\",{\"1\":{\"431\":1}}],[\"acrobat\",{\"1\":{\"208\":1}}],[\"alert\",{\"1\":{\"1354\":1,\"1355\":3,\"1356\":1,\"1357\":1,\"1358\":1,\"1359\":2,\"1361\":4,\"1362\":3,\"1363\":6,\"1364\":7,\"1366\":10,\"1367\":3,\"1369\":3,\"1370\":5,\"1379\":1,\"1380\":3,\"1439\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1572\":1,\"1588\":1,\"1591\":1,\"1646\":1,\"1660\":1,\"2124\":2,\"2159\":1,\"2785\":1}}],[\"always\",{\"1\":{\"1310\":1}}],[\"albumid=9194699400\",{\"1\":{\"1310\":1}}],[\"alluser\",{\"1\":{\"2926\":4,\"2928\":2,\"2929\":2,\"2931\":2}}],[\"alleq\",{\"0\":{\"2242\":1},\"1\":{\"2242\":1}}],[\"allen\",{\"1\":{\"1211\":1}}],[\"allargsconstructor\",{\"1\":{\"2190\":1,\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":1,\"2276\":1,\"2374\":1,\"2425\":2,\"2428\":2,\"2431\":2,\"2435\":2,\"2565\":2,\"2579\":1,\"2667\":1,\"2697\":1,\"2796\":1,\"2800\":2,\"2801\":2,\"2915\":1}}],[\"allow\",{\"1\":{\"2172\":3}}],[\"allowscriptaccess=\",{\"1\":{\"1310\":1}}],[\"allowfullscreen=\",{\"1\":{\"1310\":1}}],[\"allowed\",{\"1\":{\"1216\":1}}],[\"allowpublickeyretrieval=true可能会导致恶意的代理通过中间人攻击\",{\"1\":{\"1216\":1}}],[\"allowpublickeyretrieval=true\",{\"1\":{\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":1,\"1274\":1,\"1278\":1,\"2666\":1}}],[\"all替代union\",{\"1\":{\"1148\":1}}],[\"all\",{\"1\":{\"1116\":1}}],[\"allmatch\",{\"1\":{\"870\":2}}],[\"allperject\",{\"1\":{\"386\":1,\"387\":3,\"389\":1}}],[\"algorithm\",{\"1\":{\"702\":1}}],[\"alt=\",{\"1\":{\"1309\":1,\"1609\":4}}],[\"alter\",{\"1\":{\"934\":1,\"950\":1,\"958\":3,\"959\":1,\"960\":1,\"961\":1,\"988\":5,\"989\":1,\"994\":5,\"995\":1,\"1000\":1,\"1001\":6,\"1007\":2,\"1008\":1,\"1012\":2,\"1013\":1,\"1017\":1,\"1021\":1,\"1116\":1,\"1136\":1,\"1156\":5,\"1211\":2}}],[\"alternative\",{\"1\":{\"294\":1}}],[\"alt+\",{\"1\":{\"620\":1,\"671\":1}}],[\"alt+shift+j\",{\"1\":{\"618\":1}}],[\"alt+shit+↓\",{\"1\":{\"615\":1}}],[\"alt+shit+↑向上一动\",{\"1\":{\"615\":1}}],[\"alt+j多次可以选中多次当前匹配的符号\",{\"1\":{\"618\":1}}],[\"alt+j\",{\"1\":{\"618\":1}}],[\"alt\",{\"1\":{\"617\":1,\"618\":1,\"624\":1,\"627\":1,\"628\":1,\"630\":2,\"631\":2,\"632\":2,\"635\":2,\"638\":1,\"642\":1,\"643\":1,\"644\":1,\"671\":1,\"1309\":1,\"1668\":2}}],[\"alias\",{\"1\":{\"2330\":1}}],[\"alias=\",{\"1\":{\"2326\":1}}],[\"aliases\",{\"1\":{\"1198\":2}}],[\"alibaba\",{\"1\":{\"2187\":1,\"2584\":1,\"2666\":1,\"2903\":1,\"2906\":1}}],[\"alibaba<\",{\"1\":{\"683\":1,\"2186\":1,\"2582\":1,\"2665\":1,\"2756\":1,\"2890\":1}}],[\"aliquip\",{\"1\":{\"1606\":1}}],[\"aliqua\",{\"1\":{\"1606\":1}}],[\"align=\",{\"1\":{\"1300\":2,\"1310\":1,\"1319\":3,\"1793\":1}}],[\"align\",{\"1\":{\"1300\":1,\"1695\":1}}],[\"alice\",{\"1\":{\"1185\":1}}],[\"aliyun\",{\"1\":{\"675\":1}}],[\"aliyun<\",{\"1\":{\"675\":2}}],[\"alipay字节码信息\",{\"1\":{\"568\":1}}],[\"alipay\",{\"1\":{\"568\":5}}],[\"alili\",{\"1\":{\"274\":1,\"275\":1}}],[\"alive\",{\"1\":{\"164\":1,\"177\":1}}],[\"alive表示支持长链接\",{\"1\":{\"159\":1}}],[\"al\",{\"1\":{\"234\":18,\"235\":2,\"319\":3,\"543\":1}}],[\"already\",{\"1\":{\"73\":1}}],[\"async\",{\"0\":{\"2138\":1},\"1\":{\"2155\":1}}],[\"asynchronous\",{\"1\":{\"2108\":1}}],[\"asyncsupported\",{\"1\":{\"1849\":1}}],[\"association>\",{\"1\":{\"2425\":1,\"2431\":1}}],[\"association子属性\",{\"0\":{\"2423\":1}}],[\"association\",{\"1\":{\"2420\":1,\"2425\":1,\"2437\":1}}],[\"asstet\",{\"1\":{\"1686\":1}}],[\"assertequals\",{\"1\":{\"522\":1,\"523\":2,\"525\":2}}],[\"assert\",{\"1\":{\"328\":4,\"364\":1,\"523\":2,\"525\":2}}],[\"assets\",{\"1\":{\"9\":1,\"930\":1}}],[\"asin\",{\"1\":{\"1411\":1}}],[\"asia\",{\"1\":{\"901\":2}}],[\"asdf\",{\"1\":{\"1364\":2,\"1385\":2}}],[\"asdfa\",{\"1\":{\"395\":1,\"396\":1}}],[\"aspect标签配置切面类\",{\"1\":{\"2648\":1}}],[\"aspect>\",{\"1\":{\"2648\":1}}],[\"aspect注解标识\",{\"1\":{\"2639\":1}}],[\"aspect\",{\"0\":{\"2625\":1},\"1\":{\"2625\":2,\"2626\":1,\"2635\":1,\"2640\":1,\"2641\":1,\"2642\":1,\"2643\":1,\"2644\":1,\"2648\":1}}],[\"aspectj<\",{\"1\":{\"2629\":1}}],[\"aspectj本身并不是spring框架中的组成部分\",{\"1\":{\"2627\":1}}],[\"aspectj\",{\"0\":{\"2627\":1},\"1\":{\"2533\":1,\"2630\":1,\"2648\":1,\"2651\":1}}],[\"aspectsaopalliance\",{\"1\":{\"2756\":1}}],[\"aspects<\",{\"1\":{\"2629\":1,\"2665\":1,\"2756\":1,\"2889\":1}}],[\"aspects\",{\"1\":{\"2533\":2,\"2629\":2,\"2665\":1}}],[\"asp\",{\"1\":{\"1344\":1}}],[\"asc\",{\"1\":{\"1039\":1,\"2254\":1}}],[\"asc|desc\",{\"1\":{\"1039\":1,\"1040\":2}}],[\"as\",{\"1\":{\"922\":1,\"956\":3,\"1027\":1,\"1028\":1,\"1077\":1,\"1080\":3,\"1081\":2,\"1139\":1,\"2253\":2,\"2254\":2,\"2256\":2,\"2258\":2}}],[\"aslist\",{\"1\":{\"147\":1,\"219\":1,\"856\":2,\"2209\":1,\"2220\":1,\"2467\":1,\"2651\":2}}],[\"angularjs相比vue更加大量一些\",{\"1\":{\"1943\":1}}],[\"animate\",{\"1\":{\"1591\":2}}],[\"animal\",{\"1\":{\"372\":2}}],[\"analyst\",{\"1\":{\"1211\":2}}],[\"anbcjbjbdj\",{\"1\":{\"1035\":1}}],[\"ansi\",{\"1\":{\"930\":1}}],[\"annotated\",{\"1\":{\"1198\":1}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"2602\":2,\"2649\":1}}],[\"annotationsbytype\",{\"1\":{\"904\":2}}],[\"annotations\",{\"1\":{\"591\":2,\"594\":2}}],[\"annotation\",{\"1\":{\"532\":1,\"534\":1,\"590\":1,\"591\":1,\"593\":1,\"594\":1,\"2588\":2,\"2592\":2,\"2706\":2,\"2718\":1,\"2779\":4,\"2780\":5,\"2789\":1,\"2799\":1,\"2898\":2,\"2901\":2,\"2903\":2,\"2908\":2}}],[\"annotest01\",{\"1\":{\"904\":3}}],[\"anddeptnogreaterthan\",{\"1\":{\"2503\":1}}],[\"anddnamelike\",{\"1\":{\"2503\":1}}],[\"andy\",{\"1\":{\"2245\":1,\"2246\":1}}],[\"andpanels\",{\"1\":{\"1558\":1}}],[\"andthen方法\",{\"0\":{\"840\":1,\"843\":1}}],[\"andthen\",{\"1\":{\"838\":1,\"840\":3,\"841\":1,\"843\":2,\"844\":1}}],[\"and\",{\"0\":{\"848\":1,\"1033\":1,\"2245\":1},\"1\":{\"763\":1,\"789\":1,\"846\":1,\"848\":1,\"922\":2,\"1031\":1,\"1033\":1,\"1242\":1,\"1246\":2,\"1249\":2,\"1252\":1,\"1720\":1,\"1775\":1,\"1777\":1,\"1985\":1,\"1989\":1,\"2022\":3,\"2108\":1,\"2239\":3,\"2240\":1,\"2241\":2,\"2242\":3,\"2243\":2,\"2244\":1,\"2245\":3,\"2246\":2,\"2250\":1,\"2253\":3,\"2255\":1,\"2256\":4,\"2257\":1,\"2258\":1,\"2259\":1,\"2301\":1,\"2356\":1,\"2358\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2394\":1,\"2398\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2444\":12,\"2447\":11,\"2450\":11,\"2453\":3,\"2456\":3,\"2508\":1,\"2918\":1}}],[\"anywhere\",{\"1\":{\"2179\":1}}],[\"anymatch\",{\"1\":{\"870\":2}}],[\"any\",{\"1\":{\"736\":1,\"871\":2}}],[\"another\",{\"1\":{\"316\":1}}],[\"anotemptylist\",{\"1\":{\"141\":1}}],[\"an\",{\"1\":{\"226\":1,\"364\":1,\"372\":2}}],[\"anemptylist\",{\"1\":{\"141\":1}}],[\"a>200\",{\"1\":{\"1617\":1}}],[\"a>\",{\"1\":{\"130\":1,\"138\":1,\"1189\":1,\"1312\":7,\"1314\":8,\"1315\":1,\"1463\":1,\"1479\":1,\"1515\":1,\"1549\":10,\"1606\":4,\"1609\":2,\"1660\":1,\"1870\":6}}],[\"atob\",{\"1\":{\"1452\":1}}],[\"atomicity\",{\"0\":{\"2685\":1},\"1\":{\"1102\":1,\"2684\":1}}],[\"atomicinteger\",{\"1\":{\"338\":2}}],[\"atan2\",{\"1\":{\"1411\":1}}],[\"atan\",{\"1\":{\"1411\":1}}],[\"attachment\",{\"1\":{\"1807\":2,\"1814\":1}}],[\"attr\",{\"1\":{\"1567\":7}}],[\"attributereplaced\",{\"1\":{\"2077\":1,\"2080\":1,\"2085\":1}}],[\"attributeremoved\",{\"1\":{\"2077\":1,\"2080\":1,\"2085\":1}}],[\"attributeadded\",{\"1\":{\"2077\":2,\"2080\":1,\"2085\":1}}],[\"attribute=\",{\"1\":{\"1957\":1}}],[\"attribute=value\",{\"1\":{\"1549\":2}}],[\"attribute$=value\",{\"1\":{\"1549\":2}}],[\"attribute^=value\",{\"1\":{\"1549\":2}}],[\"attribute2\",{\"1\":{\"1549\":2}}],[\"attribute1\",{\"1\":{\"1549\":2}}],[\"attribute\",{\"1\":{\"1549\":6,\"1889\":1,\"2088\":3}}],[\"attributes>\",{\"1\":{\"2710\":2}}],[\"attributes\",{\"1\":{\"1485\":1}}],[\"att\",{\"1\":{\"1344\":1}}],[\"atguigusecondpointcut\",{\"1\":{\"2635\":1}}],[\"atguiguglobalpointcut\",{\"1\":{\"2635\":1}}],[\"atguigupointcut\",{\"1\":{\"2635\":1}}],[\"atguigu\",{\"1\":{\"773\":1,\"2485\":1,\"2487\":1,\"2509\":2,\"2635\":1}}],[\"at\",{\"1\":{\"88\":1,\"294\":2,\"922\":1,\"1777\":1}}],[\"a=\",{\"1\":{\"1712\":1}}],[\"a=b\",{\"1\":{\"1293\":1,\"1374\":1}}],[\"a=300\",{\"1\":{\"1617\":1}}],[\"a=3\",{\"1\":{\"176\":1}}],[\"a=>\",{\"1\":{\"80\":1}}],[\"a=100\",{\"1\":{\"1617\":1}}],[\"a=123\",{\"1\":{\"1374\":1}}],[\"a=1\",{\"1\":{\"75\":1}}],[\"a\",{\"0\":{\"1060\":1,\"1061\":1,\"2944\":1,\"2948\":1,\"2968\":1,\"2999\":1,\"3036\":1,\"3059\":1,\"3060\":1,\"3084\":1,\"3085\":1,\"3174\":1},\"1\":{\"65\":1,\"73\":2,\"75\":1,\"80\":7,\"102\":8,\"114\":2,\"226\":2,\"238\":7,\"239\":2,\"240\":10,\"241\":2,\"244\":12,\"245\":6,\"272\":8,\"288\":1,\"294\":1,\"303\":5,\"305\":1,\"306\":1,\"309\":3,\"316\":2,\"327\":5,\"348\":1,\"349\":1,\"357\":4,\"374\":1,\"387\":3,\"390\":6,\"408\":1,\"431\":4,\"434\":3,\"522\":1,\"523\":4,\"525\":4,\"671\":1,\"816\":5,\"817\":5,\"836\":2,\"873\":3,\"875\":5,\"922\":1,\"1035\":2,\"1043\":2,\"1054\":6,\"1056\":1,\"1057\":1,\"1091\":1,\"1093\":1,\"1147\":1,\"1180\":2,\"1234\":1,\"1246\":1,\"1249\":2,\"1293\":1,\"1317\":3,\"1318\":3,\"1361\":2,\"1363\":4,\"1364\":4,\"1370\":7,\"1374\":1,\"1401\":2,\"1406\":2,\"1409\":1,\"1412\":1,\"1463\":1,\"1488\":3,\"1489\":4,\"1496\":1,\"1497\":2,\"1499\":1,\"1500\":1,\"1515\":4,\"1544\":2,\"1548\":2,\"1549\":8,\"1567\":2,\"1568\":3,\"1570\":1,\"1582\":1,\"1584\":2,\"1585\":2,\"1586\":1,\"1609\":1,\"1616\":2,\"1617\":2,\"1637\":2,\"1638\":3,\"1712\":1,\"1844\":4,\"1870\":2,\"1874\":3,\"1878\":3,\"1897\":1,\"1917\":1,\"1921\":1,\"1925\":1,\"1951\":1,\"1972\":2,\"1975\":1,\"1976\":1,\"1980\":1,\"1981\":1,\"1987\":1,\"1991\":2,\"2022\":1,\"2023\":1,\"2030\":2,\"2125\":2,\"2126\":4,\"2159\":2,\"2406\":1,\"2407\":1,\"2459\":1,\"2493\":1,\"2698\":1,\"2728\":2,\"2731\":1}}],[\"apr\",{\"1\":{\"2562\":1,\"2563\":1,\"2564\":1}}],[\"april\",{\"1\":{\"2030\":1}}],[\"aperiam\",{\"1\":{\"1606\":2}}],[\"apos\",{\"1\":{\"1355\":2,\"1571\":2,\"2029\":1,\"2030\":3}}],[\"apackage\",{\"1\":{\"594\":3}}],[\"apache\",{\"1\":{\"61\":6,\"65\":1,\"655\":1,\"674\":3,\"675\":1,\"680\":3,\"683\":3,\"714\":6,\"715\":6,\"1285\":4,\"1736\":2,\"1739\":1,\"2092\":2,\"2193\":1,\"2267\":3,\"2282\":4,\"2308\":4,\"2311\":1,\"2334\":2,\"2374\":4,\"2481\":1,\"2490\":1,\"2492\":1,\"2493\":2,\"2509\":2,\"2516\":1,\"2517\":2,\"2629\":1,\"2665\":2,\"2748\":3,\"2756\":1,\"2885\":3,\"2891\":2}}],[\"api<\",{\"1\":{\"2748\":2,\"2756\":1,\"2891\":1,\"2893\":2}}],[\"api对象的简单封装\",{\"1\":{\"2669\":1}}],[\"api允许用户自定义标签\",{\"1\":{\"1963\":1}}],[\"api和servlet\",{\"1\":{\"1776\":1}}],[\"api被划分为两部分\",{\"1\":{\"1209\":1}}],[\"api写一个程序\",{\"1\":{\"1205\":1}}],[\"api能让我们快速完成许多复杂的操作\",{\"1\":{\"857\":1}}],[\"api来解决这个问题了\",{\"1\":{\"856\":1}}],[\"api在服务器上运行时\",{\"1\":{\"691\":1}}],[\"api\",{\"0\":{\"404\":1,\"407\":1,\"456\":1,\"477\":1,\"502\":1,\"505\":1,\"575\":1,\"584\":1,\"587\":1,\"590\":1,\"593\":1},\"1\":{\"324\":1,\"364\":1,\"386\":1,\"389\":1,\"404\":1,\"407\":1,\"478\":1,\"479\":1,\"502\":1,\"505\":1,\"575\":1,\"584\":1,\"587\":1,\"590\":1,\"593\":1,\"853\":1,\"1205\":1,\"1447\":1,\"1448\":2,\"1547\":1,\"1776\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1804\":1,\"1805\":1,\"1806\":1,\"1807\":1,\"1817\":1,\"1829\":1,\"1833\":1,\"1898\":1,\"2508\":1,\"2530\":1,\"2756\":1}}],[\"appbase\",{\"1\":{\"1767\":1}}],[\"appbase=\",{\"1\":{\"1767\":1}}],[\"app是vue的根节点\",{\"1\":{\"1689\":1}}],[\"app根组件最后通过编译后将内容渲染到\",{\"1\":{\"1686\":1}}],[\"appname\",{\"1\":{\"1464\":1}}],[\"app>\",{\"1\":{\"545\":1,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2746\":1,\"2759\":1}}],[\"append=true\",{\"1\":{\"2301\":1}}],[\"appendto\",{\"1\":{\"1571\":2}}],[\"appendchild\",{\"0\":{\"1504\":1},\"1\":{\"1486\":1,\"1505\":4}}],[\"appender>\",{\"1\":{\"2487\":1}}],[\"appenders>\",{\"1\":{\"2312\":1,\"2757\":1,\"2896\":1}}],[\"appender=com\",{\"1\":{\"2298\":1,\"2300\":3,\"2301\":3}}],[\"appender\",{\"1\":{\"1285\":8,\"2298\":3,\"2299\":1,\"2300\":3,\"2301\":7,\"2308\":7,\"2374\":7}}],[\"append\",{\"1\":{\"392\":4,\"395\":1,\"396\":1,\"407\":1,\"1571\":2,\"1927\":10,\"1928\":8,\"2176\":1}}],[\"approximately\",{\"1\":{\"294\":1}}],[\"applictaioncontext\",{\"1\":{\"2553\":1,\"2554\":1,\"2555\":1,\"2557\":1,\"2558\":1,\"2559\":1,\"2560\":1,\"2562\":1,\"2563\":1,\"2564\":1,\"2566\":1,\"2567\":1}}],[\"applicaiton\",{\"1\":{\"1775\":1,\"1776\":1}}],[\"applicationcontex\",{\"1\":{\"2666\":1,\"2672\":1,\"2673\":1,\"2674\":1,\"2678\":1,\"2679\":1,\"2680\":1,\"2697\":1}}],[\"applicationcontext会自动检测在配置文件中实现了beanpostprocessor接口的所有bean\",{\"1\":{\"2572\":1}}],[\"applicationcontext4\",{\"1\":{\"2566\":1,\"2567\":1}}],[\"applicationcontext3\",{\"1\":{\"2562\":1,\"2563\":1,\"2564\":1}}],[\"applicationcontext2\",{\"1\":{\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2579\":1,\"2594\":1}}],[\"applicationcontext1\",{\"1\":{\"2553\":2,\"2554\":1,\"2555\":1,\"2571\":1,\"2574\":1,\"2590\":1,\"2591\":1,\"2592\":1}}],[\"applicationcontext\",{\"1\":{\"2532\":1,\"2543\":3,\"2546\":3,\"2550\":3,\"2553\":6,\"2554\":6,\"2555\":5,\"2557\":3,\"2558\":6,\"2559\":9,\"2560\":3,\"2562\":3,\"2563\":3,\"2564\":3,\"2566\":3,\"2567\":3,\"2571\":1,\"2574\":1,\"2579\":1,\"2590\":4,\"2591\":4,\"2592\":4,\"2594\":4,\"2602\":3,\"2649\":1,\"2672\":3,\"2673\":3,\"2674\":3,\"2678\":3,\"2679\":3,\"2680\":3,\"2697\":3,\"2911\":1}}],[\"application的\",{\"1\":{\"2482\":1}}],[\"applicationmsg\",{\"1\":{\"1981\":1}}],[\"applicationmessage\",{\"1\":{\"1972\":1,\"2018\":1,\"2926\":1}}],[\"applicationscope\",{\"1\":{\"1978\":1,\"1980\":2,\"1981\":1,\"2020\":2,\"2088\":1,\"2925\":3,\"2926\":2,\"2929\":1}}],[\"application域共有两个监听器接口\",{\"1\":{\"2083\":1}}],[\"application域监听器\",{\"0\":{\"2083\":1},\"1\":{\"2911\":1}}],[\"application域中的数据\",{\"1\":{\"1972\":1,\"1980\":1}}],[\"application域\",{\"0\":{\"1922\":1},\"1\":{\"1968\":1,\"1978\":1,\"2926\":1}}],[\"application\",{\"0\":{\"1735\":1,\"2073\":1,\"2924\":1},\"1\":{\"132\":1,\"142\":1,\"208\":12,\"911\":1,\"1310\":1,\"1775\":1,\"1925\":8,\"1968\":1,\"1972\":4,\"1981\":2,\"2018\":2,\"2019\":1,\"2020\":1,\"2088\":7,\"2146\":1,\"2153\":1,\"2155\":3,\"2926\":3}}],[\"apple\",{\"1\":{\"1393\":2,\"1394\":2,\"1395\":2,\"1396\":2,\"1397\":2,\"1398\":2,\"1399\":2,\"1401\":2}}],[\"applet的简称\",{\"1\":{\"1782\":1}}],[\"applet\",{\"1\":{\"1256\":1,\"1548\":1}}],[\"applewebkit\",{\"1\":{\"177\":1}}],[\"applying\",{\"1\":{\"922\":1}}],[\"apply方法\",{\"0\":{\"842\":1}}],[\"apply\",{\"1\":{\"830\":3,\"831\":1,\"832\":2,\"841\":5,\"842\":3,\"843\":3,\"844\":3,\"922\":1}}],[\"appdata\",{\"1\":{\"94\":1}}],[\"app\",{\"0\":{\"1691\":1},\"1\":{\"65\":1,\"88\":2,\"545\":2,\"1614\":2,\"1616\":2,\"1617\":2,\"1620\":2,\"1621\":2,\"1622\":2,\"1624\":2,\"1627\":2,\"1628\":2,\"1629\":2,\"1630\":2,\"1631\":2,\"1634\":2,\"1635\":2,\"1637\":2,\"1638\":2,\"1640\":2,\"1643\":2,\"1646\":2,\"1649\":2,\"1650\":2,\"1651\":2,\"1653\":2,\"1658\":2,\"1659\":2,\"1660\":2,\"1661\":2,\"1662\":2,\"1664\":2,\"1667\":2,\"1670\":2,\"1672\":2,\"1675\":2,\"1676\":2,\"1677\":2,\"1686\":1,\"1689\":4,\"1690\":2,\"1691\":2,\"1695\":3,\"1698\":2,\"1701\":2,\"1708\":1,\"1730\":2,\"1791\":2,\"1795\":2,\"1831\":2,\"1834\":2,\"1999\":2,\"2047\":2,\"2058\":2,\"2075\":2,\"2746\":2,\"2759\":2}}],[\"archetype\",{\"1\":{\"2744\":1}}],[\"archive\",{\"1\":{\"208\":3}}],[\"around的切面方法中\",{\"1\":{\"2638\":1}}],[\"around\",{\"0\":{\"2644\":1},\"1\":{\"2623\":1,\"2635\":1,\"2644\":1,\"2648\":1}}],[\"area\",{\"1\":{\"2176\":2}}],[\"areadao代码\",{\"1\":{\"2176\":1}}],[\"areadaoimpl\",{\"1\":{\"2176\":2}}],[\"areadao\",{\"1\":{\"2176\":4}}],[\"areaname+\",{\"1\":{\"2176\":1}}],[\"areaid+\",{\"1\":{\"2176\":1}}],[\"areas=areaservice\",{\"1\":{\"2176\":1}}],[\"areaservice代码\",{\"1\":{\"2176\":1}}],[\"areaserviceimpl\",{\"1\":{\"2176\":2}}],[\"areaservice=new\",{\"1\":{\"2176\":1}}],[\"areaservice\",{\"1\":{\"2176\":2}}],[\"areas\",{\"1\":{\"2176\":5}}],[\"areacontroller代码\",{\"1\":{\"2176\":1}}],[\"areacontroller\",{\"1\":{\"2176\":3}}],[\"are\",{\"1\":{\"1185\":1,\"2301\":1}}],[\"artifacts\",{\"1\":{\"1779\":1}}],[\"artifactid\",{\"1\":{\"685\":1}}],[\"artifactid>\",{\"1\":{\"680\":2,\"683\":5,\"685\":1,\"688\":1,\"697\":1,\"700\":3,\"714\":5,\"715\":4,\"2186\":11,\"2267\":5,\"2292\":2,\"2296\":1,\"2307\":1,\"2311\":1,\"2374\":6,\"2484\":2,\"2500\":5,\"2538\":2,\"2582\":2,\"2614\":1,\"2629\":7,\"2665\":11,\"2748\":3,\"2756\":14,\"2875\":1,\"2885\":1,\"2889\":3,\"2890\":5,\"2891\":6,\"2892\":2,\"2893\":2,\"2894\":2}}],[\"article\",{\"1\":{\"845\":1}}],[\"arguments\",{\"1\":{\"2615\":1}}],[\"argumenttypes\",{\"1\":{\"2615\":1}}],[\"arg>\",{\"1\":{\"2558\":6}}],[\"arg相当于通过参数位置获取参数结果\",{\"1\":{\"2389\":1,\"2402\":1}}],[\"arg相当于通过数组获取参数结果\",{\"1\":{\"2388\":1,\"2401\":1}}],[\"arg1\",{\"1\":{\"2388\":1,\"2401\":1}}],[\"arg0\",{\"1\":{\"2388\":1,\"2401\":1}}],[\"arg\",{\"0\":{\"2388\":1,\"2401\":1,\"2558\":1},\"1\":{\"587\":1,\"590\":1,\"2556\":2,\"2558\":6,\"2559\":3,\"2678\":2,\"2679\":2,\"2680\":2}}],[\"args表示参数\",{\"1\":{\"2609\":1}}],[\"args\",{\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"30\":2,\"32\":1,\"219\":1,\"220\":1,\"234\":2,\"238\":1,\"239\":2,\"240\":3,\"241\":1,\"242\":1,\"244\":2,\"245\":1,\"247\":1,\"248\":1,\"251\":1,\"260\":1,\"262\":1,\"265\":1,\"266\":1,\"274\":1,\"275\":1,\"278\":2,\"279\":1,\"281\":1,\"283\":1,\"286\":1,\"287\":3,\"288\":1,\"292\":1,\"300\":1,\"303\":1,\"305\":1,\"306\":1,\"309\":1,\"315\":1,\"318\":1,\"327\":1,\"352\":1,\"356\":1,\"357\":1,\"364\":1,\"367\":1,\"368\":1,\"371\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"379\":1,\"380\":1,\"382\":1,\"387\":1,\"390\":1,\"392\":1,\"395\":1,\"396\":1,\"405\":2,\"408\":1,\"409\":1,\"412\":1,\"415\":1,\"418\":1,\"421\":1,\"422\":2,\"425\":1,\"428\":1,\"431\":1,\"438\":1,\"440\":1,\"441\":1,\"442\":1,\"445\":1,\"446\":1,\"450\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"461\":1,\"489\":1,\"490\":1,\"503\":1,\"506\":1,\"509\":2,\"510\":2,\"511\":2,\"512\":2,\"513\":2,\"515\":2,\"516\":2,\"517\":2,\"518\":2,\"543\":1,\"560\":1,\"561\":1,\"562\":1,\"563\":1,\"564\":1,\"568\":6,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"585\":1,\"588\":1,\"590\":1,\"591\":1,\"594\":1,\"816\":1,\"817\":1,\"820\":1,\"825\":1,\"826\":1,\"828\":1,\"829\":1,\"830\":1,\"831\":1,\"832\":1,\"835\":1,\"837\":1,\"839\":1,\"840\":1,\"842\":1,\"843\":1,\"844\":1,\"845\":1,\"847\":1,\"848\":1,\"856\":2,\"859\":2,\"860\":1,\"862\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":1,\"868\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":3,\"874\":1,\"875\":1,\"876\":1,\"904\":2,\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1227\":1,\"1231\":1,\"1234\":1,\"1235\":1,\"1242\":1,\"1252\":1,\"1253\":1,\"1264\":1,\"1266\":8,\"1275\":8,\"1304\":1,\"2293\":1,\"2605\":2,\"2609\":5,\"2612\":1,\"2615\":1,\"2651\":4,\"2672\":1,\"2673\":1,\"2674\":5,\"2678\":3,\"2679\":3,\"2680\":3}}],[\"aria\",{\"1\":{\"1609\":2}}],[\"aridroid中注解占据了更重要的角色\",{\"1\":{\"534\":1}}],[\"arithmeticexception\",{\"1\":{\"16\":1,\"24\":1,\"27\":1}}],[\"arr4\",{\"1\":{\"1385\":2}}],[\"arr3\",{\"1\":{\"1385\":2}}],[\"arr1\",{\"1\":{\"878\":1}}],[\"arr1=stream\",{\"1\":{\"878\":1}}],[\"arry\",{\"1\":{\"835\":1}}],[\"arrys\",{\"1\":{\"835\":2}}],[\"array>\",{\"1\":{\"2566\":1,\"2799\":1}}],[\"arrayblockingqueue<e>\",{\"1\":{\"328\":1}}],[\"arrayblockingqueue是一个底层基于数组的有边界的队列\",{\"1\":{\"326\":1}}],[\"arrayblockingqueue\",{\"0\":{\"325\":1},\"1\":{\"327\":2,\"328\":2}}],[\"array数组的指向从老数组变为新数组\",{\"1\":{\"316\":2}}],[\"arraylist1\",{\"1\":{\"856\":2}}],[\"arraylist是数组\",{\"1\":{\"261\":1}}],[\"arraylist底层扩容长度为原数组的1\",{\"1\":{\"258\":1}}],[\"arraylist初始为空的数据组\",{\"1\":{\"254\":1}}],[\"arraylist初始长度为10\",{\"1\":{\"253\":1}}],[\"arraylist实现类\",{\"0\":{\"250\":1},\"1\":{\"249\":1}}],[\"arraylist<pets>\",{\"1\":{\"2800\":1}}],[\"arraylist<student>\",{\"1\":{\"2166\":1}}],[\"arraylist<string>\",{\"1\":{\"244\":1,\"245\":1,\"265\":1,\"266\":1,\"300\":2,\"305\":1,\"306\":1,\"845\":2,\"856\":1,\"859\":1,\"876\":2,\"878\":1}}],[\"arraylist<user>\",{\"1\":{\"2128\":1}}],[\"arraylist<object>\",{\"1\":{\"244\":1,\"245\":1}}],[\"arraylist<>\",{\"1\":{\"235\":1,\"242\":2,\"244\":3,\"247\":3,\"248\":3,\"265\":1,\"266\":1,\"300\":2,\"305\":1,\"306\":1,\"859\":1,\"886\":1,\"889\":4,\"1227\":1,\"1831\":1,\"1917\":1,\"1921\":1,\"1925\":1,\"1972\":1,\"1976\":1,\"2128\":1,\"2166\":1,\"2678\":1,\"2679\":1,\"2680\":1}}],[\"arraylist<integer>\",{\"1\":{\"234\":2,\"235\":3,\"244\":1,\"245\":1,\"886\":1,\"889\":3}}],[\"arraylist<e>\",{\"1\":{\"233\":1}}],[\"arraylist==collection\",{\"1\":{\"219\":1}}],[\"arraylist\",{\"1\":{\"219\":4,\"220\":7,\"234\":2,\"251\":5,\"543\":2,\"845\":5,\"856\":4,\"878\":1,\"889\":12,\"1266\":5,\"1275\":6,\"1987\":1,\"1988\":1,\"1989\":1,\"1990\":1,\"1991\":2,\"2335\":2}}],[\"arrays\",{\"1\":{\"147\":1,\"219\":1,\"316\":2,\"431\":1,\"585\":2,\"588\":2,\"591\":6,\"594\":3,\"835\":1,\"837\":1,\"856\":2,\"860\":1,\"879\":2,\"2209\":1,\"2220\":1,\"2467\":1,\"2566\":1,\"2651\":2}}],[\"array\",{\"1\":{\"92\":1,\"316\":4,\"364\":1,\"1383\":2,\"1384\":2,\"1385\":1,\"1458\":1,\"1459\":1,\"2464\":1,\"2466\":1}}],[\"arr2\",{\"1\":{\"30\":2,\"878\":2,\"1384\":4}}],[\"arr\",{\"1\":{\"30\":3,\"825\":7,\"826\":9,\"835\":3,\"837\":2,\"874\":3,\"1383\":3,\"1386\":8,\"1388\":3,\"1389\":3,\"1391\":2,\"1544\":5,\"1555\":14,\"1627\":2,\"1628\":2,\"1632\":1,\"1991\":4,\"2466\":2}}],[\"i整理\",{\"0\":{\"3084\":1}}],[\"i方向\",{\"0\":{\"2944\":1}}],[\"iuserservice\",{\"1\":{\"2219\":2,\"2220\":2}}],[\"ibaseservice\",{\"1\":{\"2214\":1}}],[\"ibatis一词来源于\",{\"1\":{\"2196\":1}}],[\"ibatis\",{\"1\":{\"2193\":1,\"2282\":4,\"2334\":2,\"2481\":1,\"2490\":1,\"2492\":1,\"2493\":2,\"2509\":2,\"2516\":1,\"2517\":2,\"2530\":1}}],[\"ibm\",{\"1\":{\"1735\":1}}],[\"i<=9\",{\"1\":{\"2025\":1}}],[\"i<index\",{\"1\":{\"262\":1}}],[\"iqiyi\",{\"1\":{\"1310\":1}}],[\"ico\",{\"1\":{\"1293\":1,\"1331\":1}}],[\"icon\",{\"1\":{\"1293\":2,\"1331\":2,\"1609\":2}}],[\"i>标题<\",{\"1\":{\"1508\":1,\"1509\":1,\"1510\":1}}],[\"i><u><\",{\"1\":{\"1302\":1}}],[\"i>\",{\"1\":{\"1187\":1,\"1302\":2}}],[\"ivh\",{\"1\":{\"810\":1}}],[\"ia5\",{\"1\":{\"503\":4}}],[\"ia4\",{\"1\":{\"503\":2}}],[\"ia3\",{\"1\":{\"503\":2}}],[\"ia2\",{\"1\":{\"503\":2}}],[\"ia\",{\"1\":{\"503\":3,\"506\":3}}],[\"i=new\",{\"1\":{\"1359\":1}}],[\"i=\",{\"1\":{\"1357\":1,\"1359\":1}}],[\"i==6\",{\"1\":{\"458\":1,\"461\":1}}],[\"i=0\",{\"1\":{\"262\":1}}],[\"i+=2\",{\"1\":{\"2025\":1}}],[\"i+1\",{\"1\":{\"1266\":2,\"1275\":2}}],[\"i+\",{\"1\":{\"376\":1}}],[\"i++\",{\"1\":{\"251\":1,\"260\":1,\"262\":1,\"263\":1,\"305\":1,\"306\":1,\"309\":3,\"316\":1,\"371\":1,\"376\":2,\"395\":1,\"396\":1,\"405\":1,\"438\":3,\"440\":2,\"441\":2,\"442\":1,\"445\":1,\"446\":1,\"457\":2,\"458\":2,\"460\":2,\"461\":1,\"465\":1,\"471\":1,\"480\":1,\"489\":2,\"490\":2,\"888\":1,\"891\":1,\"1231\":1,\"1235\":1,\"1266\":2,\"1274\":1,\"1275\":2,\"1280\":1,\"1288\":1,\"1367\":1,\"1388\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1544\":1,\"1555\":1,\"1574\":1,\"1579\":1,\"1927\":1,\"1928\":1,\"1952\":1,\"2124\":1,\"2128\":1}}],[\"i8\",{\"1\":{\"364\":2}}],[\"i7\",{\"1\":{\"364\":2}}],[\"i6\",{\"1\":{\"364\":3}}],[\"i5\",{\"1\":{\"364\":3}}],[\"i4\",{\"1\":{\"364\":3}}],[\"i3\",{\"1\":{\"364\":3}}],[\"ignore\",{\"0\":{\"772\":1},\"1\":{\"364\":1,\"773\":1}}],[\"i10\",{\"1\":{\"364\":2}}],[\"i1\",{\"1\":{\"364\":3,\"1264\":1,\"1442\":2,\"1489\":1,\"1499\":2,\"1500\":2,\"1501\":2,\"1570\":4,\"1572\":2}}],[\"i2\",{\"1\":{\"362\":2,\"363\":4,\"364\":2}}],[\"illegalargumentexception\",{\"1\":{\"328\":1,\"338\":1,\"1889\":1}}],[\"illegalaccessexception\",{\"1\":{\"30\":1,\"568\":2,\"585\":1,\"588\":1,\"591\":1}}],[\"itself\",{\"1\":{\"570\":1}}],[\"itrs\",{\"1\":{\"328\":2}}],[\"it\",{\"1\":{\"265\":3,\"266\":10,\"364\":1,\"1309\":1,\"1690\":1}}],[\"item=\",{\"1\":{\"2464\":1,\"2466\":1,\"2467\":1}}],[\"item指的是被遍历的json\",{\"1\":{\"1630\":1,\"1631\":1}}],[\"item指的是被遍历的数组\",{\"1\":{\"1628\":1}}],[\"item表示对象的内容\",{\"1\":{\"1629\":1}}],[\"item的命名不是规定的\",{\"1\":{\"1628\":1}}],[\"items=\",{\"1\":{\"2025\":1,\"2031\":1}}],[\"items\",{\"1\":{\"328\":13,\"330\":1,\"332\":2,\"333\":2,\"2025\":1,\"2031\":1}}],[\"item\",{\"1\":{\"263\":3,\"338\":4,\"1606\":4,\"1609\":4,\"1627\":2,\"1628\":2,\"1629\":2,\"1630\":5,\"1632\":1,\"1695\":2,\"2464\":1}}],[\"item三个属性\",{\"1\":{\"261\":1}}],[\"iterator2\",{\"1\":{\"292\":3}}],[\"iterator<map\",{\"1\":{\"292\":1}}],[\"iterator<integer>\",{\"1\":{\"292\":1}}],[\"iterator<string>\",{\"1\":{\"260\":2,\"265\":1,\"292\":1}}],[\"iterator1\",{\"1\":{\"260\":3,\"292\":3}}],[\"iterator\",{\"0\":{\"264\":1,\"265\":1,\"267\":1},\"1\":{\"219\":1,\"220\":6,\"251\":5,\"260\":5,\"265\":1,\"292\":6}}],[\"i\",{\"0\":{\"2963\":1,\"2968\":1,\"3020\":1,\"3036\":1,\"3053\":1,\"3059\":1,\"3060\":1,\"3156\":1},\"1\":{\"234\":2,\"240\":2,\"251\":3,\"260\":3,\"263\":5,\"279\":4,\"294\":6,\"305\":2,\"306\":2,\"309\":6,\"316\":6,\"362\":2,\"363\":10,\"364\":11,\"371\":3,\"376\":4,\"382\":2,\"395\":3,\"396\":3,\"405\":3,\"422\":2,\"438\":7,\"440\":4,\"441\":4,\"442\":2,\"445\":2,\"446\":2,\"457\":4,\"458\":5,\"460\":4,\"461\":2,\"465\":2,\"471\":2,\"480\":2,\"489\":5,\"490\":5,\"637\":1,\"750\":4,\"825\":2,\"826\":2,\"835\":1,\"874\":1,\"888\":3,\"891\":2,\"1093\":2,\"1215\":1,\"1220\":1,\"1221\":1,\"1231\":4,\"1235\":5,\"1253\":2,\"1264\":1,\"1266\":6,\"1274\":2,\"1275\":6,\"1280\":2,\"1288\":2,\"1317\":2,\"1318\":2,\"1354\":2,\"1357\":1,\"1358\":2,\"1359\":2,\"1362\":2,\"1366\":11,\"1367\":3,\"1370\":2,\"1388\":3,\"1389\":4,\"1406\":2,\"1409\":3,\"1412\":3,\"1489\":3,\"1490\":3,\"1491\":3,\"1508\":1,\"1544\":7,\"1555\":3,\"1574\":10,\"1579\":3,\"1580\":1,\"1631\":5,\"1927\":3,\"1928\":3,\"1952\":2,\"2025\":8,\"2124\":3,\"2128\":3,\"2132\":2,\"2166\":3,\"2176\":1,\"2246\":2,\"2509\":3,\"2631\":2}}],[\"img01\",{\"1\":{\"2786\":1}}],[\"img>\",{\"1\":{\"2170\":1}}],[\"img\",{\"1\":{\"1309\":1,\"1312\":1,\"1317\":1,\"1319\":1,\"1339\":2,\"1518\":2,\"1532\":1,\"1609\":3,\"1649\":3,\"1651\":3,\"2060\":2,\"2786\":1,\"2789\":4}}],[\"iml\",{\"1\":{\"772\":1}}],[\"impl<\",{\"1\":{\"2756\":1}}],[\"impllombokspring\",{\"1\":{\"2756\":1}}],[\"impl\",{\"1\":{\"2492\":1,\"2542\":1,\"2546\":1,\"2548\":1,\"2549\":1,\"2651\":1,\"2652\":1,\"2653\":1}}],[\"impl=org\",{\"1\":{\"2193\":1}}],[\"implements\",{\"1\":{\"274\":1,\"275\":1,\"287\":2,\"294\":1,\"352\":1,\"356\":1,\"428\":1,\"445\":1,\"446\":1,\"450\":1,\"465\":1,\"480\":1,\"511\":1,\"512\":1,\"513\":1,\"545\":1,\"546\":1,\"563\":1,\"568\":2,\"816\":2,\"817\":2,\"820\":1,\"1226\":1,\"1241\":1,\"1264\":2,\"1267\":1,\"1911\":1,\"1972\":1,\"1976\":2,\"1998\":1,\"2001\":1,\"2047\":2,\"2049\":1,\"2052\":2,\"2057\":1,\"2061\":1,\"2063\":1,\"2076\":1,\"2077\":1,\"2079\":1,\"2080\":1,\"2081\":1,\"2082\":1,\"2084\":1,\"2085\":1,\"2087\":1,\"2088\":1,\"2093\":1,\"2097\":1,\"2176\":2,\"2217\":1,\"2276\":1,\"2299\":1,\"2425\":2,\"2428\":2,\"2431\":2,\"2435\":2,\"2539\":1,\"2574\":1,\"2594\":2,\"2595\":1,\"2605\":2,\"2609\":2,\"2631\":2,\"2667\":3,\"2676\":2,\"2697\":3,\"2702\":2,\"2707\":1,\"2711\":1,\"2796\":1,\"2799\":1,\"2800\":2,\"2801\":2,\"2915\":1,\"2917\":1}}],[\"import=\",{\"1\":{\"1928\":1,\"1960\":1,\"1972\":3,\"1976\":2,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":2,\"1988\":2,\"1989\":2,\"1990\":2,\"1991\":2,\"2022\":1,\"2023\":1}}],[\"importer\",{\"1\":{\"676\":1}}],[\"import\",{\"0\":{\"692\":1},\"1\":{\"105\":1,\"107\":1,\"108\":1,\"110\":1,\"287\":2,\"292\":1,\"352\":1,\"356\":3,\"368\":1,\"390\":1,\"405\":1,\"409\":1,\"412\":1,\"421\":1,\"425\":1,\"428\":1,\"511\":1,\"676\":1,\"1215\":5,\"1274\":4,\"1275\":4,\"1689\":2,\"1708\":1,\"1711\":1,\"1712\":1,\"1713\":1,\"1715\":1,\"1959\":1,\"2282\":11}}],[\"images\",{\"1\":{\"1609\":4}}],[\"image\",{\"1\":{\"208\":10,\"1293\":1,\"1331\":1,\"1339\":1,\"1806\":2,\"2740\":1}}],[\"ip不一致\",{\"1\":{\"2168\":1}}],[\"ip不一致http\",{\"1\":{\"2168\":1}}],[\"ipsum\",{\"1\":{\"1606\":1,\"1609\":1}}],[\"ip\",{\"0\":{\"493\":1},\"1\":{\"177\":1,\"492\":1,\"1462\":1,\"1743\":1}}],[\"ip通信协议来传递数据\",{\"1\":{\"154\":1}}],[\"ie\",{\"1\":{\"1559\":1}}],[\"ie=edge\",{\"1\":{\"76\":1,\"1690\":1}}],[\"ie8\",{\"1\":{\"61\":1,\"1558\":1}}],[\"isflushcacherequired\",{\"1\":{\"2493\":1}}],[\"isfinite\",{\"1\":{\"1408\":1,\"1409\":1,\"1412\":1}}],[\"isfile\",{\"1\":{\"386\":2,\"387\":1,\"389\":2,\"390\":1}}],[\"isdel=1\",{\"1\":{\"2255\":1}}],[\"isdel=0\",{\"1\":{\"2253\":1,\"2254\":1,\"2255\":1,\"2256\":1,\"2257\":1,\"2258\":1}}],[\"isdel\",{\"1\":{\"2234\":2,\"2253\":1,\"2254\":1,\"2256\":1,\"2258\":1,\"2259\":1}}],[\"isdirectory\",{\"1\":{\"386\":2,\"387\":1,\"389\":2,\"390\":1}}],[\"issue\",{\"1\":{\"2493\":2}}],[\"isscriptingenabled\",{\"1\":{\"1959\":1}}],[\"issafeinteger\",{\"1\":{\"1408\":1,\"1409\":2,\"1412\":2}}],[\"isthreadsafe\",{\"1\":{\"1959\":2}}],[\"iste\",{\"1\":{\"1606\":2}}],[\"isterminated\",{\"1\":{\"305\":1,\"306\":1}}],[\"isnotnull\",{\"0\":{\"2239\":1},\"1\":{\"2239\":1,\"2253\":1}}],[\"isnan\",{\"1\":{\"1408\":2,\"1409\":1,\"1412\":1}}],[\"isnull\",{\"0\":{\"2239\":1},\"1\":{\"846\":1,\"2239\":1,\"2256\":2}}],[\"isinteger\",{\"1\":{\"1408\":1}}],[\"isclosed\",{\"1\":{\"1274\":1,\"1280\":1,\"1288\":1}}],[\"isbefore\",{\"1\":{\"896\":1}}],[\"isbooted\",{\"1\":{\"294\":1}}],[\"ispurchase=0\",{\"1\":{\"1310\":1}}],[\"isparallel\",{\"1\":{\"875\":2}}],[\"ispresent\",{\"1\":{\"853\":4,\"854\":1}}],[\"iservice<user>\",{\"1\":{\"2216\":1}}],[\"iservice\",{\"0\":{\"2216\":1}}],[\"iservice和其实现类\",{\"1\":{\"2214\":1}}],[\"iservice接口实现的crud\",{\"0\":{\"2218\":1}}],[\"iservice接口\",{\"0\":{\"2212\":1}}],[\"iserrorpage=\",{\"1\":{\"1960\":1}}],[\"iserrorpage\",{\"1\":{\"1959\":1}}],[\"iselignored\",{\"1\":{\"1959\":1}}],[\"isequal\",{\"1\":{\"846\":1,\"896\":1}}],[\"isempty\",{\"1\":{\"141\":2,\"145\":3,\"219\":3,\"292\":2,\"431\":1,\"2260\":4}}],[\"isafter\",{\"1\":{\"896\":1}}],[\"isa\",{\"1\":{\"505\":4,\"506\":5}}],[\"islocked\",{\"1\":{\"489\":3,\"490\":3}}],[\"ishidden\",{\"1\":{\"386\":2,\"387\":1,\"389\":2,\"390\":1}}],[\"is0\",{\"1\":{\"380\":1}}],[\"isolation=\",{\"1\":{\"2710\":1}}],[\"isolation属性\",{\"1\":{\"2710\":1}}],[\"isolation\",{\"0\":{\"2687\":1,\"2718\":1},\"1\":{\"1113\":3,\"2684\":1,\"2718\":2}}],[\"isolocaldatetime就可以帮我们完成localdatetime和string之间的相互转换\",{\"1\":{\"380\":1}}],[\"isolocaldatetime\",{\"1\":{\"380\":3,\"897\":2}}],[\"iso\",{\"1\":{\"380\":3,\"897\":1,\"930\":1,\"1415\":1,\"1814\":1}}],[\"is\",{\"1\":{\"73\":1,\"364\":1,\"1037\":2,\"1147\":2,\"1180\":2,\"1216\":1,\"1293\":1,\"1326\":1,\"1409\":1,\"1412\":1,\"1808\":1,\"1870\":1,\"1908\":1,\"2060\":1,\"2239\":2,\"2253\":1,\"2256\":1,\"2301\":1,\"2786\":1,\"2861\":2}}],[\"id为\",{\"1\":{\"2574\":2}}],[\"id标识当前字段为主键\",{\"1\":{\"2422\":1,\"2428\":1}}],[\"idtype\",{\"1\":{\"2228\":2,\"2230\":1,\"2234\":1}}],[\"idl\",{\"1\":{\"1732\":1}}],[\"id名字\",{\"1\":{\"1510\":1,\"2345\":1,\"2351\":1}}],[\"id选择器\",{\"0\":{\"1510\":1},\"1\":{\"1510\":1,\"1548\":3}}],[\"id选择器>class选择器>元素选择器\",{\"1\":{\"1507\":1}}],[\"id值获取\",{\"1\":{\"1488\":1}}],[\"id<10\",{\"1\":{\"1080\":1}}],[\"id关联\",{\"1\":{\"1068\":1}}],[\"idx`\",{\"1\":{\"2695\":1}}],[\"idx\",{\"1\":{\"983\":1}}],[\"id的格式为\",{\"1\":{\"901\":1}}],[\"id>\",{\"1\":{\"675\":1,\"2422\":1,\"2425\":2,\"2428\":2,\"2431\":4,\"2435\":1}}],[\"id\",{\"1\":{\"147\":1,\"176\":1,\"763\":2,\"987\":5,\"988\":3,\"994\":3,\"1068\":3,\"1080\":1,\"1081\":1,\"1082\":4,\"1219\":3,\"1220\":2,\"1221\":3,\"1253\":11,\"1548\":4,\"1567\":1,\"2179\":1,\"2182\":2,\"2183\":1,\"2190\":1,\"2228\":1,\"2229\":1,\"2230\":1,\"2234\":1,\"2240\":1,\"2242\":3,\"2243\":1,\"2244\":13,\"2247\":3,\"2248\":1,\"2249\":2,\"2253\":1,\"2254\":1,\"2256\":1,\"2258\":7,\"2289\":1,\"2301\":1,\"2420\":2,\"2548\":1,\"2552\":1,\"2695\":3,\"2697\":5,\"2843\":2}}],[\"identified\",{\"1\":{\"1115\":3}}],[\"identifier\",{\"1\":{\"73\":1}}],[\"identity后结果填充到哪个属性中\",{\"1\":{\"2410\":1}}],[\"identity获取最新生成主键\",{\"1\":{\"2408\":1}}],[\"identity方法\",{\"0\":{\"845\":1}}],[\"identity\",{\"1\":{\"841\":1,\"845\":3,\"873\":2,\"2410\":2}}],[\"idea在启动tomcat之前会先在操作系统中设置一些临时环境变量\",{\"1\":{\"1779\":1}}],[\"idea在您使用\",{\"1\":{\"603\":1}}],[\"idea通过执行tomcat的catalina\",{\"1\":{\"1779\":1}}],[\"idea会在c\",{\"1\":{\"1779\":1}}],[\"idea会扫描jdk和项目本身\",{\"1\":{\"600\":1}}],[\"idea默认是\",{\"1\":{\"1777\":1}}],[\"idea特定文件\",{\"0\":{\"768\":1}}],[\"idea是可以找到的\",{\"1\":{\"676\":1}}],[\"idea中输入\",{\"1\":{\"620\":1}}],[\"idea有数百个上下文相关操作\",{\"1\":{\"607\":1}}],[\"idea将高亮显示可以改进的代码行\",{\"1\":{\"604\":1}}],[\"idea的javadoc工具的使用\",{\"0\":{\"539\":1}}],[\"ideaproject\",{\"1\":{\"386\":1,\"387\":3,\"389\":1}}],[\"idea集成git\",{\"0\":{\"774\":1,\"775\":1},\"1\":{\"46\":1}}],[\"idea\",{\"0\":{\"44\":1},\"1\":{\"7\":1,\"388\":1,\"390\":1,\"607\":1,\"676\":2,\"772\":1,\"1928\":1}}],[\"id=\",{\"1\":{\"65\":1,\"150\":3,\"1341\":1,\"1342\":1,\"1442\":1,\"1458\":1,\"1459\":1,\"1482\":1,\"1488\":3,\"1489\":6,\"1493\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":2,\"1500\":2,\"1501\":1,\"1505\":1,\"1508\":1,\"1509\":1,\"1510\":1,\"1529\":2,\"1535\":6,\"1536\":1,\"1545\":1,\"1548\":2,\"1549\":3,\"1555\":5,\"1567\":1,\"1568\":2,\"1570\":2,\"1571\":1,\"1572\":2,\"1573\":1,\"1579\":9,\"1586\":9,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1606\":4,\"1609\":1,\"1613\":2,\"1614\":3,\"1616\":1,\"1617\":1,\"1620\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1690\":2,\"1691\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1708\":1,\"1718\":1,\"1730\":2,\"2114\":2,\"2131\":2,\"2159\":2,\"2169\":2,\"2170\":2,\"2171\":2,\"2176\":3,\"2278\":1,\"2279\":1,\"2344\":1,\"2347\":1,\"2350\":1,\"2354\":1,\"2356\":1,\"2358\":1,\"2362\":1,\"2365\":1,\"2368\":1,\"2374\":1,\"2378\":1,\"2385\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2394\":1,\"2398\":1,\"2401\":1,\"2402\":1,\"2403\":1,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2422\":2,\"2425\":2,\"2428\":2,\"2431\":2,\"2435\":3,\"2444\":1,\"2447\":1,\"2450\":1,\"2453\":1,\"2456\":1,\"2459\":1,\"2461\":3,\"2462\":2,\"2466\":1,\"2467\":1,\"2480\":1,\"2501\":1,\"2542\":1,\"2546\":1,\"2548\":1,\"2553\":2,\"2554\":2,\"2555\":3,\"2557\":1,\"2558\":2,\"2559\":3,\"2560\":1,\"2562\":2,\"2563\":2,\"2564\":2,\"2566\":7,\"2567\":5,\"2571\":1,\"2574\":2,\"2579\":3,\"2584\":1,\"2588\":1,\"2648\":2,\"2666\":2,\"2701\":2,\"2706\":1,\"2710\":3,\"2799\":1,\"2877\":1,\"2903\":4,\"2906\":1,\"2907\":2,\"2908\":1,\"2918\":1}}],[\"if标签\",{\"0\":{\"2442\":1}}],[\"ifmodified\",{\"0\":{\"2149\":1}}],[\"if>\",{\"1\":{\"2022\":7,\"2443\":1,\"2444\":8,\"2447\":8,\"2453\":7,\"2456\":7}}],[\"if可以将test的结果放入指定的域中\",{\"1\":{\"2022\":1}}],[\"if的使用场景区分\",{\"0\":{\"1625\":1}}],[\"if的显示情况类似\",{\"1\":{\"1624\":1}}],[\"if的显示根本原理一个是通过对值的隐式转换\",{\"1\":{\"1621\":1}}],[\"if并且中间不允许有任何的元素间隔\",{\"1\":{\"1622\":1}}],[\"iframe\",{\"1\":{\"1321\":1}}],[\"iframe>\",{\"1\":{\"1321\":3,\"2170\":1}}],[\"ifnull\",{\"1\":{\"1072\":1,\"1094\":1}}],[\"if=\",{\"1\":{\"145\":2,\"1620\":4,\"1621\":4,\"1622\":4}}],[\"if和unles\",{\"0\":{\"145\":1}}],[\"if\",{\"0\":{\"1366\":1,\"1619\":1,\"1622\":1,\"2022\":1},\"1\":{\"17\":3,\"32\":1,\"65\":1,\"145\":1,\"262\":1,\"263\":2,\"265\":1,\"266\":1,\"279\":12,\"281\":2,\"288\":4,\"294\":7,\"305\":2,\"306\":2,\"316\":3,\"328\":4,\"338\":1,\"349\":3,\"356\":1,\"363\":1,\"364\":3,\"376\":2,\"387\":3,\"442\":1,\"446\":1,\"458\":1,\"461\":1,\"465\":1,\"471\":1,\"480\":1,\"489\":3,\"490\":3,\"511\":2,\"512\":13,\"513\":14,\"517\":2,\"518\":4,\"538\":2,\"568\":4,\"850\":1,\"853\":2,\"854\":3,\"856\":1,\"1094\":2,\"1147\":4,\"1217\":2,\"1219\":2,\"1220\":2,\"1221\":2,\"1222\":2,\"1227\":2,\"1231\":3,\"1234\":4,\"1235\":6,\"1242\":2,\"1252\":3,\"1253\":9,\"1264\":4,\"1266\":5,\"1274\":5,\"1275\":3,\"1280\":5,\"1288\":5,\"1366\":4,\"1417\":2,\"1544\":2,\"1579\":6,\"1586\":4,\"1617\":1,\"1619\":1,\"1622\":2,\"1625\":1,\"1794\":1,\"1892\":2,\"1893\":4,\"1909\":1,\"1910\":1,\"1976\":9,\"2022\":7,\"2063\":2,\"2088\":1,\"2096\":1,\"2114\":2,\"2115\":1,\"2120\":1,\"2128\":1,\"2131\":2,\"2169\":1,\"2170\":2,\"2171\":2,\"2176\":1,\"2182\":1,\"2260\":3,\"2493\":6,\"2509\":1,\"2609\":1,\"2615\":1,\"2644\":1,\"2916\":1}}],[\"injection\",{\"1\":{\"2551\":1}}],[\"injected\",{\"1\":{\"1690\":1}}],[\"invalidate\",{\"1\":{\"1897\":1,\"1899\":1,\"2081\":1,\"2088\":1}}],[\"invocationhandler\",{\"1\":{\"2608\":1,\"2609\":5}}],[\"invocationtargetexception\",{\"1\":{\"568\":2,\"585\":1,\"591\":1}}],[\"invokesuper\",{\"1\":{\"2615\":2}}],[\"invoked\",{\"1\":{\"1825\":4,\"1856\":2,\"1860\":2,\"1864\":2,\"2001\":3,\"2640\":1,\"2641\":1,\"2642\":1,\"2643\":1,\"2644\":2}}],[\"invoke\",{\"1\":{\"568\":1,\"590\":1,\"591\":4,\"2609\":3}}],[\"indicators\",{\"1\":{\"1609\":1}}],[\"index=\",{\"1\":{\"2558\":3}}],[\"index=3\",{\"1\":{\"845\":1}}],[\"index指的是参数的索引\",{\"1\":{\"2556\":1}}],[\"index指的是每一项被遍历的值的下标索引值\",{\"1\":{\"1628\":1,\"1630\":1,\"1631\":1}}],[\"index表示的是当前obj的下标索引值\",{\"1\":{\"1629\":1}}],[\"index和key属性\",{\"0\":{\"1628\":1}}],[\"index2\",{\"1\":{\"1579\":2,\"1952\":1}}],[\"index1\",{\"1\":{\"1579\":2}}],[\"index值越大\",{\"1\":{\"1534\":1}}],[\"index属性要设置在定位的元素上\",{\"1\":{\"1534\":1}}],[\"index文件\",{\"1\":{\"736\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"538\":2}}],[\"indexof\",{\"0\":{\"1391\":1},\"1\":{\"260\":2,\"316\":1,\"1391\":1,\"1405\":1,\"1579\":2,\"1580\":1}}],[\"indexfor\",{\"1\":{\"294\":4}}],[\"index\",{\"0\":{\"1124\":1,\"1534\":1},\"1\":{\"61\":1,\"130\":1,\"147\":1,\"251\":8,\"262\":1,\"263\":7,\"728\":2,\"982\":1,\"989\":1,\"995\":1,\"1001\":1,\"1008\":1,\"1013\":1,\"1017\":1,\"1021\":1,\"1088\":1,\"1091\":1,\"1131\":1,\"1133\":1,\"1134\":1,\"1135\":1,\"1136\":1,\"1322\":1,\"1391\":2,\"1515\":1,\"1534\":2,\"1609\":1,\"1628\":3,\"1629\":3,\"1630\":2,\"1632\":1,\"1695\":5,\"1769\":4,\"1856\":1,\"1860\":1,\"2025\":2,\"2031\":2,\"2088\":1,\"2168\":5,\"2169\":1,\"2417\":1,\"2753\":1,\"2786\":1,\"2914\":1}}],[\"inline\",{\"1\":{\"1579\":3,\"1586\":3}}],[\"inlinks\",{\"1\":{\"1198\":1}}],[\"in3\",{\"1\":{\"1505\":6}}],[\"in2\",{\"1\":{\"1505\":5}}],[\"in1\",{\"1\":{\"1442\":2,\"1493\":2,\"1494\":2,\"1505\":5}}],[\"innerhtml\",{\"0\":{\"1499\":1},\"1\":{\"1499\":1,\"1570\":1,\"1613\":3}}],[\"innerheight\",{\"1\":{\"1451\":1}}],[\"innertext和innerhtml和\",{\"1\":{\"1570\":1}}],[\"innertext=returninfo\",{\"1\":{\"2114\":1}}],[\"innertext=\",{\"1\":{\"1500\":1,\"2114\":2}}],[\"innertext\",{\"0\":{\"1500\":1},\"1\":{\"1488\":1,\"1570\":1,\"1573\":3,\"1574\":2,\"1730\":4}}],[\"innerwidth\",{\"1\":{\"1451\":1}}],[\"inner\",{\"1\":{\"1057\":1,\"1148\":1,\"1609\":1}}],[\"innodb集群\",{\"1\":{\"922\":1}}],[\"innodb\",{\"1\":{\"922\":1,\"2417\":2}}],[\"incididunt\",{\"1\":{\"1606\":1}}],[\"increment\",{\"0\":{\"1009\":1},\"1\":{\"939\":1,\"981\":1,\"993\":1,\"999\":1,\"1006\":1,\"1011\":1,\"1012\":1,\"1016\":1,\"1020\":1,\"1081\":1,\"1239\":1,\"2417\":1,\"2695\":1,\"2881\":1}}],[\"include>代码段2<\",{\"1\":{\"2461\":1}}],[\"include>\",{\"1\":{\"2461\":1,\"2462\":1,\"2505\":1}}],[\"include选项\",{\"1\":{\"1962\":1}}],[\"include指令标签\",{\"0\":{\"1961\":1}}],[\"include模式\",{\"1\":{\"1860\":1}}],[\"include模式下\",{\"1\":{\"1856\":1,\"1860\":1}}],[\"include与forward转发相比\",{\"1\":{\"1859\":1}}],[\"include转发\",{\"0\":{\"1857\":1}}],[\"includes>\",{\"1\":{\"2505\":1}}],[\"includes\",{\"1\":{\"1405\":1}}],[\"include=\",{\"1\":{\"150\":1,\"2301\":1}}],[\"include\",{\"1\":{\"150\":1,\"1860\":1,\"1958\":1,\"1961\":1,\"1962\":6,\"2301\":1,\"2588\":2,\"2592\":1}}],[\"ini文件\",{\"1\":{\"1154\":1,\"1155\":2}}],[\"ini\",{\"1\":{\"923\":1}}],[\"inituser\",{\"1\":{\"2571\":2,\"2574\":1}}],[\"init=\",{\"1\":{\"2555\":3}}],[\"init方法也只会执行一次\",{\"1\":{\"2003\":1}}],[\"initparams\",{\"1\":{\"1849\":1,\"2052\":1}}],[\"initconnection\",{\"1\":{\"1274\":3,\"1280\":3,\"1288\":3}}],[\"initsize=integer\",{\"1\":{\"1280\":1,\"1288\":1}}],[\"initsize=5\",{\"1\":{\"1274\":1,\"1278\":1}}],[\"initsize\",{\"1\":{\"1274\":1,\"1280\":3,\"1288\":2}}],[\"initargs\",{\"1\":{\"584\":1}}],[\"initializr快速创建项目\",{\"1\":{\"2185\":1}}],[\"initializing\",{\"1\":{\"922\":1}}],[\"initialcapacity\",{\"1\":{\"294\":2}}],[\"initial\",{\"1\":{\"76\":1,\"294\":2,\"1690\":1}}],[\"init\",{\"0\":{\"2763\":1},\"1\":{\"65\":1,\"92\":2,\"98\":1,\"114\":1,\"545\":1,\"546\":1,\"731\":1,\"732\":1,\"744\":1,\"1683\":1,\"1817\":1,\"1822\":1,\"1825\":2,\"1834\":4,\"1998\":1,\"2001\":2,\"2003\":1,\"2047\":2,\"2049\":5,\"2052\":2,\"2057\":1,\"2058\":1,\"2063\":1,\"2282\":1,\"2374\":1,\"2552\":1,\"2555\":1,\"2571\":1,\"2574\":1,\"2759\":1,\"2807\":1,\"2910\":1,\"2912\":1}}],[\"inherited之后\",{\"1\":{\"556\":1}}],[\"inherited修饰的annotation\",{\"1\":{\"556\":1}}],[\"inherited\",{\"0\":{\"556\":1},\"1\":{\"552\":1}}],[\"inetsocketaddress\",{\"0\":{\"504\":1},\"1\":{\"505\":2,\"506\":2}}],[\"inetaddress对象\",{\"1\":{\"502\":2}}],[\"inetaddress\",{\"0\":{\"501\":1},\"1\":{\"502\":1,\"503\":12,\"506\":1,\"515\":1,\"516\":2,\"517\":2,\"518\":2}}],[\"input标签使用很广泛\",{\"1\":{\"1333\":1}}],[\"inputstream\",{\"1\":{\"422\":4,\"509\":4,\"510\":8,\"511\":8,\"512\":12,\"513\":12,\"1279\":3,\"2282\":2,\"2374\":1}}],[\"inputstreamreader\",{\"0\":{\"420\":1},\"1\":{\"421\":7,\"422\":4}}],[\"input\",{\"1\":{\"400\":1,\"1344\":1,\"1490\":1,\"1505\":3,\"1514\":2,\"1554\":1,\"1555\":15,\"1720\":1}}],[\"inputmismatchexception\",{\"1\":{\"16\":1,\"27\":1}}],[\"insql\",{\"0\":{\"2244\":1},\"1\":{\"2244\":4,\"2258\":1}}],[\"inside\",{\"1\":{\"1656\":3,\"1658\":3,\"1659\":3,\"1661\":3}}],[\"ins>\",{\"1\":{\"1187\":1}}],[\"insterdept2\",{\"1\":{\"2410\":1}}],[\"insterdept\",{\"1\":{\"2409\":4,\"2410\":3}}],[\"instrumentation\",{\"1\":{\"2533\":2}}],[\"instr\",{\"1\":{\"1088\":1}}],[\"institute\",{\"1\":{\"930\":1}}],[\"instant类\",{\"0\":{\"898\":1}}],[\"instant\",{\"1\":{\"892\":1,\"898\":4}}],[\"instantiationexception\",{\"1\":{\"30\":1,\"568\":2,\"585\":1,\"588\":1,\"591\":1}}],[\"instancename\",{\"1\":{\"827\":1}}],[\"instance\",{\"1\":{\"375\":1,\"545\":1,\"680\":1,\"683\":1,\"714\":2,\"715\":2,\"1791\":1,\"1795\":1,\"1831\":1,\"1834\":1,\"1999\":1,\"2047\":1,\"2058\":1,\"2075\":1,\"2267\":1,\"2485\":1,\"2493\":1,\"2542\":1,\"2546\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2559\":1,\"2566\":1,\"2567\":1,\"2584\":1,\"2588\":4,\"2590\":1,\"2591\":1,\"2592\":1,\"2594\":1,\"2599\":1,\"2630\":1,\"2648\":1,\"2666\":1,\"2746\":1,\"2748\":1,\"2758\":1,\"2759\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2885\":1,\"2898\":1,\"2899\":1,\"2903\":1,\"2904\":1}}],[\"instanceof\",{\"1\":{\"279\":1,\"294\":1,\"2644\":1,\"2702\":2}}],[\"installer\",{\"1\":{\"921\":1,\"922\":1}}],[\"installation\",{\"1\":{\"808\":1,\"922\":1}}],[\"install命令的使用\",{\"0\":{\"94\":1}}],[\"install\",{\"1\":{\"93\":1,\"94\":7,\"97\":1,\"98\":1,\"112\":1,\"115\":1,\"810\":5,\"1682\":2,\"1683\":2}}],[\"insecure\",{\"1\":{\"177\":1}}],[\"insert>\",{\"1\":{\"2362\":1,\"2409\":1,\"2410\":1}}],[\"insertemp\",{\"1\":{\"2362\":1,\"2363\":1}}],[\"insertrows\",{\"1\":{\"2206\":2}}],[\"insertafter\",{\"1\":{\"1571\":2}}],[\"insertbefore\",{\"1\":{\"1486\":1,\"1571\":2}}],[\"insert=\",{\"1\":{\"150\":1}}],[\"insert\",{\"0\":{\"2206\":1},\"1\":{\"150\":1,\"395\":1,\"396\":1,\"397\":1,\"933\":1,\"970\":1,\"971\":1,\"972\":7,\"1078\":1,\"1082\":3,\"1088\":1,\"1116\":2,\"1211\":23,\"1215\":1,\"1217\":1,\"1219\":1,\"1231\":1,\"1233\":1,\"1235\":1,\"1239\":1,\"1253\":1,\"1264\":1,\"1267\":1,\"2183\":1,\"2206\":1,\"2336\":1,\"2362\":1,\"2363\":1,\"2366\":1,\"2409\":1,\"2410\":1,\"2417\":14,\"2481\":1,\"2674\":1,\"2678\":1,\"2695\":2,\"2881\":2}}],[\"inf下创建context\",{\"1\":{\"2092\":1}}],[\"inf下的view文件\",{\"1\":{\"124\":1}}],[\"inf中的资源\",{\"1\":{\"1865\":1}}],[\"inf里\",{\"1\":{\"1861\":1}}],[\"inf\",{\"1\":{\"1856\":1,\"1860\":1,\"1864\":1,\"1904\":1,\"1910\":1,\"2763\":1}}],[\"inf目录中的web\",{\"1\":{\"1826\":1}}],[\"inf目录下的lib目录下\",{\"1\":{\"649\":1}}],[\"infinity\",{\"1\":{\"1361\":2,\"1408\":2,\"1409\":1,\"1412\":1,\"1987\":1}}],[\"inf的lib目录下\",{\"1\":{\"689\":1,\"690\":1,\"691\":1}}],[\"info=\",{\"1\":{\"2115\":3,\"2131\":3,\"2170\":3,\"2171\":3}}],[\"information\",{\"1\":{\"982\":1}}],[\"info\",{\"1\":{\"114\":2,\"1256\":1,\"1286\":1,\"1287\":1,\"1288\":6,\"1436\":3,\"1464\":4,\"1555\":1,\"1564\":1,\"1574\":5,\"1959\":1,\"2115\":1,\"2120\":1,\"2128\":2,\"2131\":3,\"2169\":2,\"2170\":2,\"2171\":2,\"2301\":2,\"2487\":1,\"2896\":2}}],[\"intro\",{\"1\":{\"1555\":1}}],[\"int底层都是4个字节\",{\"1\":{\"972\":1}}],[\"intstream\",{\"1\":{\"860\":2,\"874\":3,\"889\":5}}],[\"into\",{\"1\":{\"364\":1,\"970\":1,\"971\":1,\"972\":7,\"1078\":1,\"1082\":2,\"1147\":1,\"1211\":23,\"1215\":1,\"1217\":1,\"1219\":1,\"1231\":1,\"1235\":1,\"1239\":1,\"1253\":1,\"1264\":1,\"1267\":1,\"2183\":1,\"2362\":1,\"2409\":1,\"2410\":1,\"2417\":14,\"2674\":1,\"2678\":1,\"2695\":2,\"2881\":2}}],[\"intvalue\",{\"1\":{\"363\":4,\"364\":3,\"874\":1}}],[\"int类型属性表示数组中有效长度\",{\"1\":{\"257\":1}}],[\"integration\",{\"0\":{\"2530\":1}}],[\"integer类型\",{\"1\":{\"889\":1}}],[\"integer3\",{\"1\":{\"873\":2}}],[\"integermin\",{\"1\":{\"872\":2}}],[\"integermax\",{\"1\":{\"872\":2}}],[\"integercount==0\",{\"1\":{\"1893\":1}}],[\"integercount++\",{\"1\":{\"1893\":1}}],[\"integercount\",{\"1\":{\"1893\":3}}],[\"integerclass\",{\"1\":{\"581\":1}}],[\"integercachehighpropvalue\",{\"1\":{\"364\":3}}],[\"integercache\",{\"1\":{\"363\":4,\"364\":12}}],[\"integer对象通过自动装箱来完成\",{\"1\":{\"364\":1}}],[\"integer对象是通过new关键字创建的对象\",{\"1\":{\"364\":1}}],[\"integer对object中的equals方法进行了重写\",{\"1\":{\"364\":1}}],[\"integer转string\",{\"1\":{\"364\":1}}],[\"integer转int\",{\"1\":{\"364\":1}}],[\"integer2\",{\"1\":{\"364\":2,\"873\":2}}],[\"integer1\",{\"1\":{\"364\":5,\"867\":2,\"873\":2}}],[\"integer没有空构造器可使用有参构造传入int或string\",{\"1\":{\"364\":1}}],[\"integer>>\",{\"1\":{\"292\":2}}],[\"integer>>的k\",{\"1\":{\"291\":1}}],[\"integer>\",{\"1\":{\"292\":4,\"309\":4,\"830\":2,\"842\":1,\"843\":2,\"844\":2}}],[\"integerstream\",{\"1\":{\"886\":1}}],[\"integerstream2\",{\"1\":{\"872\":2}}],[\"integerstream1\",{\"1\":{\"872\":2}}],[\"integers\",{\"1\":{\"219\":2,\"889\":2,\"2467\":2}}],[\"integer\",{\"1\":{\"27\":1,\"219\":1,\"234\":1,\"292\":1,\"294\":1,\"338\":1,\"360\":2,\"362\":4,\"363\":11,\"364\":33,\"450\":1,\"830\":1,\"835\":1,\"837\":2,\"842\":2,\"843\":2,\"844\":2,\"867\":8,\"868\":2,\"870\":3,\"872\":4,\"873\":12,\"874\":2,\"880\":4,\"905\":1,\"939\":1,\"1226\":4,\"1264\":4,\"1408\":2,\"1409\":3,\"1412\":3,\"1893\":2,\"1927\":2,\"1928\":2,\"1972\":1,\"1976\":6,\"2176\":3,\"2190\":1,\"2224\":1,\"2228\":2,\"2230\":1,\"2234\":2,\"2241\":1,\"2260\":2,\"2276\":1,\"2289\":2,\"2374\":3,\"2425\":4,\"2428\":5,\"2431\":6,\"2435\":10,\"2552\":2,\"2571\":2,\"2598\":1,\"2599\":1,\"2631\":4,\"2644\":2,\"2667\":3,\"2672\":1,\"2697\":2,\"2702\":4,\"2714\":1,\"2715\":1,\"2716\":1,\"2717\":1}}],[\"intention\",{\"1\":{\"607\":2}}],[\"intellijidea2019\",{\"1\":{\"1779\":2}}],[\"intellij\",{\"1\":{\"600\":1,\"607\":1,\"676\":2,\"1928\":1}}],[\"intercept\",{\"1\":{\"2615\":1}}],[\"interceptor接口来完成\",{\"1\":{\"2516\":1}}],[\"interceptor\",{\"1\":{\"2285\":3,\"2288\":3,\"2615\":2}}],[\"interdum\",{\"1\":{\"1609\":1}}],[\"intervalid\",{\"1\":{\"1458\":2}}],[\"intervalids\",{\"1\":{\"1458\":4}}],[\"interval\",{\"1\":{\"1093\":2}}],[\"internalresourceview\",{\"1\":{\"2869\":1,\"2872\":1}}],[\"internalresourceviewresolver\",{\"1\":{\"2765\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2898\":1,\"2901\":1}}],[\"international\",{\"1\":{\"930\":1}}],[\"interned\",{\"1\":{\"364\":1}}],[\"internet\",{\"1\":{\"206\":1,\"1805\":1,\"2196\":1}}],[\"interfaces1\",{\"1\":{\"594\":2}}],[\"interfaces\",{\"1\":{\"594\":2,\"2301\":2,\"2608\":1,\"2609\":3}}],[\"interface\",{\"1\":{\"548\":1,\"563\":1,\"568\":1,\"814\":2,\"816\":1,\"817\":2,\"820\":2,\"835\":1,\"836\":1,\"838\":1,\"841\":1,\"846\":1,\"904\":2,\"905\":2,\"1248\":1,\"1258\":1,\"1263\":2,\"1264\":1,\"2191\":1,\"2216\":1,\"2374\":1,\"2539\":1,\"2594\":2,\"2605\":1,\"2609\":1,\"2631\":2,\"2667\":2,\"2676\":2,\"2697\":2,\"2917\":1,\"2918\":1}}],[\"interruptedexception\",{\"1\":{\"327\":3,\"337\":4,\"348\":5,\"349\":5,\"356\":1,\"438\":2,\"440\":2,\"441\":2,\"445\":1,\"450\":1,\"457\":2,\"458\":1,\"459\":1,\"460\":2,\"461\":1,\"489\":2,\"490\":2,\"898\":1,\"1825\":2}}],[\"int\",{\"1\":{\"16\":2,\"17\":2,\"19\":2,\"21\":2,\"24\":2,\"27\":2,\"30\":2,\"32\":2,\"219\":1,\"238\":1,\"240\":1,\"251\":9,\"260\":1,\"262\":4,\"263\":6,\"272\":3,\"274\":5,\"275\":5,\"278\":2,\"279\":3,\"281\":3,\"287\":14,\"288\":1,\"294\":22,\"303\":2,\"305\":1,\"306\":1,\"309\":6,\"316\":4,\"328\":5,\"330\":1,\"338\":2,\"352\":5,\"356\":2,\"360\":1,\"362\":2,\"363\":6,\"364\":13,\"368\":1,\"371\":1,\"376\":6,\"382\":2,\"395\":1,\"396\":1,\"404\":4,\"405\":4,\"407\":2,\"409\":3,\"412\":2,\"418\":1,\"421\":1,\"422\":2,\"428\":5,\"438\":3,\"440\":2,\"441\":2,\"442\":2,\"445\":1,\"446\":2,\"450\":2,\"457\":2,\"458\":2,\"460\":2,\"461\":1,\"465\":2,\"471\":2,\"478\":2,\"480\":2,\"489\":2,\"490\":2,\"513\":1,\"523\":8,\"525\":8,\"538\":5,\"543\":2,\"564\":1,\"576\":4,\"581\":1,\"585\":3,\"587\":2,\"588\":1,\"590\":2,\"591\":3,\"825\":6,\"826\":6,\"835\":7,\"837\":1,\"860\":1,\"891\":1,\"937\":4,\"939\":2,\"955\":2,\"965\":2,\"972\":1,\"987\":4,\"993\":2,\"999\":2,\"1006\":2,\"1011\":2,\"1016\":2,\"1020\":2,\"1081\":1,\"1147\":1,\"1211\":5,\"1215\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1222\":1,\"1223\":5,\"1227\":1,\"1231\":1,\"1234\":3,\"1235\":2,\"1239\":2,\"1241\":8,\"1242\":2,\"1252\":2,\"1253\":5,\"1255\":1,\"1257\":1,\"1259\":5,\"1264\":8,\"1266\":4,\"1267\":2,\"1274\":3,\"1275\":4,\"1280\":3,\"1288\":3,\"1376\":1,\"1790\":1,\"1831\":2,\"1849\":1,\"1927\":4,\"1928\":4,\"1951\":2,\"1952\":1,\"1991\":1,\"2022\":1,\"2023\":1,\"2025\":1,\"2088\":4,\"2176\":1,\"2182\":1,\"2206\":1,\"2208\":1,\"2209\":1,\"2210\":1,\"2211\":1,\"2239\":1,\"2245\":1,\"2246\":1,\"2250\":1,\"2289\":1,\"2299\":1,\"2335\":2,\"2354\":2,\"2361\":1,\"2364\":1,\"2367\":1,\"2368\":1,\"2384\":1,\"2385\":1,\"2388\":1,\"2389\":1,\"2390\":1,\"2409\":1,\"2410\":3,\"2413\":2,\"2414\":1,\"2415\":3,\"2417\":4,\"2453\":1,\"2456\":1,\"2466\":3,\"2509\":3,\"2631\":6,\"2635\":6,\"2649\":1,\"2651\":4,\"2652\":3,\"2653\":3,\"2667\":28,\"2672\":3,\"2673\":1,\"2674\":4,\"2676\":15,\"2678\":1,\"2679\":1,\"2680\":1,\"2695\":1,\"2697\":15,\"2702\":10,\"2707\":5,\"2711\":5,\"2881\":1}}],[\"in\",{\"0\":{\"1034\":1,\"2244\":1},\"1\":{\"16\":1,\"17\":1,\"19\":1,\"21\":1,\"24\":1,\"27\":1,\"32\":1,\"208\":1,\"287\":1,\"302\":1,\"321\":1,\"376\":1,\"422\":5,\"511\":1,\"512\":1,\"513\":1,\"518\":2,\"1034\":2,\"1071\":1,\"1147\":2,\"1198\":1,\"1216\":4,\"1242\":1,\"1252\":1,\"1314\":3,\"1389\":2,\"1417\":1,\"1545\":1,\"1574\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":2,\"1632\":1,\"1695\":1,\"1889\":1,\"2244\":7,\"2258\":1,\"2466\":2,\"2467\":2}}],[\"ioc中有多个同类型的bean\",{\"1\":{\"2655\":1}}],[\"ioc中只有一个同类型的bean\",{\"1\":{\"2655\":1}}],[\"ioc中存在两个bean工厂接口\",{\"1\":{\"2550\":1}}],[\"ioc容器并没有直接引用目标对象\",{\"1\":{\"2658\":1}}],[\"ioc容器中引用的是代理对象\",{\"1\":{\"2658\":1}}],[\"ioc容器中\",{\"1\":{\"2572\":1}}],[\"ioc容器中只会存在一个共享的bean实例\",{\"1\":{\"2552\":1}}],[\"ioc容器基本功能接口\",{\"1\":{\"2550\":1}}],[\"ioc底层原理浅析\",{\"0\":{\"2547\":1}}],[\"ioc\",{\"0\":{\"2545\":1},\"1\":{\"2520\":1,\"2531\":1,\"2532\":1}}],[\"ioexception\",{\"1\":{\"386\":1,\"387\":1,\"405\":6,\"408\":1,\"409\":1,\"412\":3,\"415\":1,\"418\":1,\"421\":1,\"422\":2,\"425\":1,\"428\":3,\"509\":2,\"510\":2,\"511\":2,\"512\":13,\"513\":14,\"515\":2,\"516\":2,\"517\":2,\"518\":2,\"545\":1,\"546\":2,\"1279\":1,\"1789\":1,\"1790\":2,\"1794\":1,\"1799\":1,\"1800\":1,\"1801\":1,\"1808\":1,\"1825\":1,\"1831\":2,\"1834\":2,\"1856\":2,\"1860\":2,\"1864\":2,\"1874\":1,\"1878\":1,\"1892\":2,\"1893\":1,\"1897\":1,\"1898\":1,\"1909\":1,\"1910\":1,\"1917\":2,\"1921\":2,\"1925\":2,\"1927\":1,\"1972\":1,\"1976\":1,\"1997\":2,\"1998\":1,\"2001\":1,\"2047\":2,\"2052\":2,\"2056\":1,\"2057\":1,\"2062\":1,\"2063\":1,\"2075\":1,\"2088\":1,\"2095\":1,\"2096\":1,\"2115\":1,\"2121\":1,\"2128\":1,\"2131\":1,\"2159\":1,\"2166\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2282\":2,\"2374\":1,\"2749\":1,\"2863\":1,\"2864\":1}}],[\"io流本身是一种重量级操作\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"io流操作容易阻塞线程\",{\"1\":{\"1283\":1}}],[\"io流的体系结构\",{\"0\":{\"401\":1}}],[\"io流\",{\"0\":{\"398\":1},\"1\":{\"39\":1,\"400\":1,\"1283\":1}}],[\"io\",{\"0\":{\"39\":1},\"1\":{\"6\":1,\"390\":1,\"405\":2,\"409\":2,\"412\":2,\"421\":2,\"425\":2,\"428\":2,\"511\":1,\"651\":2,\"1327\":1,\"1928\":1,\"2282\":3,\"2520\":1}}],[\"枚举类提供的数值\",{\"1\":{\"2718\":1}}],[\"枚举类实现接口\",{\"0\":{\"563\":1}}],[\"枚举的使用\",{\"0\":{\"559\":1}}],[\"枚举\",{\"0\":{\"42\":1,\"557\":1,\"2966\":1,\"3034\":1},\"1\":{\"6\":1,\"42\":1,\"564\":1}}],[\"j日志框架\",{\"0\":{\"3000\":1}}],[\"jibx\",{\"1\":{\"2530\":1}}],[\"jim\",{\"1\":{\"1392\":2}}],[\"jerry2\",{\"1\":{\"2563\":1}}],[\"jerry\",{\"1\":{\"2562\":1}}],[\"jee\",{\"1\":{\"2318\":1}}],[\"jetty\",{\"1\":{\"1736\":2}}],[\"jetbrains\",{\"1\":{\"607\":1}}],[\"jmxprefix=\",{\"1\":{\"2301\":1}}],[\"jmxproxy\",{\"1\":{\"1759\":1}}],[\"jmx=true\",{\"1\":{\"2301\":1}}],[\"jmx\",{\"1\":{\"1759\":2,\"1777\":1}}],[\"jmx角色\",{\"1\":{\"1759\":1}}],[\"jms\",{\"1\":{\"1732\":1,\"2530\":2}}],[\"jrun\",{\"1\":{\"1735\":1}}],[\"jbossdb\",{\"1\":{\"2301\":1}}],[\"jboss\",{\"1\":{\"1735\":1,\"2301\":1}}],[\"jbdc\",{\"1\":{\"1216\":1}}],[\"jta\",{\"1\":{\"1732\":1}}],[\"jt01\",{\"1\":{\"1683\":1,\"1684\":1}}],[\"jnp\",{\"1\":{\"2301\":2}}],[\"jndicontextcustom=java\",{\"1\":{\"2301\":1}}],[\"jndicontextproviderurl=localhost\",{\"1\":{\"2301\":1}}],[\"jndicontextfactory=org\",{\"1\":{\"2301\":1}}],[\"jndi数据源配置\",{\"1\":{\"2301\":1}}],[\"jndi\",{\"1\":{\"1732\":1,\"1736\":1,\"2301\":4}}],[\"jnsj\",{\"1\":{\"830\":1}}],[\"j=\",{\"1\":{\"1355\":1}}],[\"joda\",{\"1\":{\"2508\":1}}],[\"jone\",{\"1\":{\"2183\":1}}],[\"jones\",{\"1\":{\"1211\":1}}],[\"jolly\",{\"1\":{\"1185\":1}}],[\"john\",{\"1\":{\"1185\":5}}],[\"job=resultset\",{\"1\":{\"1976\":1}}],[\"job\",{\"1\":{\"1082\":1,\"1211\":16,\"1976\":3,\"2025\":1,\"2031\":1,\"2362\":1,\"2374\":1,\"2425\":3,\"2428\":3,\"2431\":2,\"2435\":1,\"2444\":4,\"2447\":4,\"2450\":4,\"2453\":4,\"2456\":4,\"2462\":2,\"2631\":2,\"2667\":1,\"2674\":1}}],[\"joinpoint接口通过getsignature\",{\"1\":{\"2651\":1}}],[\"joinpoint接口\",{\"0\":{\"2651\":1},\"1\":{\"2651\":1}}],[\"joinpoint接收切点对象\",{\"1\":{\"2641\":1}}],[\"joinpoint对象封装springaop中切面方法的信息\",{\"1\":{\"2637\":1}}],[\"joinpoint对象\",{\"0\":{\"2637\":1}}],[\"joinpoint对象和proceedingjoinpoint对象\",{\"0\":{\"2636\":1}}],[\"joinpoint\",{\"1\":{\"2635\":3,\"2640\":2,\"2641\":3,\"2643\":2,\"2651\":7,\"2652\":3,\"2653\":2}}],[\"joint\",{\"0\":{\"2621\":1},\"1\":{\"2621\":1,\"2622\":2,\"2623\":1}}],[\"join左边表尽量小\",{\"1\":{\"1148\":1}}],[\"join关键字\",{\"1\":{\"1056\":1,\"1057\":1}}],[\"joining\",{\"1\":{\"883\":3}}],[\"joining会根据指定的方式将流中的所有元素连接成一个字符串\",{\"1\":{\"883\":1}}],[\"join\",{\"0\":{\"458\":1},\"1\":{\"458\":2,\"1057\":1,\"1060\":1,\"1061\":1,\"1063\":1,\"1064\":1,\"1072\":2,\"1148\":4,\"1393\":1,\"2423\":1,\"2425\":1,\"2426\":1,\"2428\":1,\"2429\":2,\"2431\":2}}],[\"j2me\",{\"1\":{\"772\":1}}],[\"jvm会根据类的名称找到\",{\"1\":{\"570\":1}}],[\"jvm会保留注释\",{\"1\":{\"553\":1}}],[\"jvm\",{\"1\":{\"570\":1}}],[\"jvm不会保留注解\",{\"1\":{\"553\":1}}],[\"jvm将花费较少的时间来调度线程\",{\"1\":{\"481\":1}}],[\"jcp\",{\"1\":{\"545\":3,\"1791\":3,\"1795\":3,\"1831\":3,\"1834\":3,\"1999\":3,\"2047\":3,\"2058\":3,\"2075\":3,\"2746\":3,\"2759\":3}}],[\"jupiter<\",{\"1\":{\"2756\":1,\"2891\":1}}],[\"jupiter\",{\"1\":{\"2756\":2,\"2891\":1}}],[\"jun\",{\"1\":{\"1416\":2}}],[\"junit5\",{\"1\":{\"2891\":1}}],[\"junit5单元测试\",{\"1\":{\"2756\":1}}],[\"junit的依赖坐标\",{\"1\":{\"680\":1,\"688\":1,\"714\":1}}],[\"junit属于白盒测试\",{\"1\":{\"530\":1}}],[\"junit单元测试\",{\"0\":{\"519\":1,\"3031\":1},\"1\":{\"42\":1}}],[\"junit\",{\"0\":{\"42\":1,\"535\":1},\"1\":{\"6\":1,\"520\":1,\"2267\":1,\"2282\":3,\"2374\":1,\"2533\":1,\"2629\":1,\"2665\":1,\"2756\":1,\"2891\":1}}],[\"july\",{\"1\":{\"374\":1,\"379\":1}}],[\"jul\",{\"1\":{\"371\":3,\"374\":1}}],[\"jls7\",{\"1\":{\"364\":1}}],[\"jls\",{\"1\":{\"364\":1}}],[\"j++\",{\"1\":{\"309\":3,\"364\":1,\"1367\":1,\"1927\":1,\"1928\":1}}],[\"j\",{\"0\":{\"2951\":1,\"2953\":1,\"2966\":1,\"2972\":1,\"2973\":2,\"2976\":1,\"2981\":1,\"2991\":1,\"2999\":1,\"3080\":1,\"3081\":1,\"3084\":1,\"3104\":1,\"3105\":1,\"3107\":1,\"3136\":1,\"3138\":1,\"3139\":1,\"3140\":1,\"3143\":1,\"3151\":1,\"3175\":1},\"1\":{\"309\":9,\"364\":1,\"618\":1,\"930\":1,\"1093\":1,\"1251\":1,\"1355\":2,\"1367\":3,\"1370\":2,\"1406\":1,\"1409\":3,\"1412\":3,\"1631\":4,\"1927\":3,\"1928\":3,\"2025\":3,\"2253\":1,\"2257\":1}}],[\"jpa\",{\"1\":{\"534\":1,\"1732\":1,\"2530\":1}}],[\"jpg\",{\"1\":{\"228\":1,\"401\":1,\"1309\":2,\"1312\":1,\"1317\":1,\"1319\":1,\"1339\":2,\"1609\":4}}],[\"jpeg\",{\"1\":{\"208\":2,\"1806\":1}}],[\"jaxb\",{\"1\":{\"2530\":1}}],[\"james\",{\"1\":{\"1211\":1}}],[\"japanesedate\",{\"1\":{\"892\":1}}],[\"jani\",{\"1\":{\"1392\":2}}],[\"january\",{\"1\":{\"1093\":2}}],[\"jan\",{\"1\":{\"891\":1,\"1093\":1,\"1416\":1}}],[\"jakarta\",{\"1\":{\"655\":1}}],[\"jackson\",{\"1\":{\"2875\":1,\"2891\":2}}],[\"jack\",{\"1\":{\"288\":1,\"2183\":1,\"2242\":1}}],[\"jarry3\",{\"1\":{\"2564\":1}}],[\"jar呢\",{\"1\":{\"652\":1}}],[\"jar呢还是log4j\",{\"1\":{\"652\":1}}],[\"jar会被自动导入\",{\"1\":{\"651\":1}}],[\"jar后\",{\"1\":{\"651\":1}}],[\"jar依赖于commons\",{\"1\":{\"651\":1}}],[\"jar包目录\",{\"1\":{\"1772\":1}}],[\"jar包\",{\"0\":{\"1214\":1}}],[\"jar包冲突\",{\"0\":{\"694\":1}}],[\"jar包的位置与maven的坐标一一对应\",{\"1\":{\"685\":1}}],[\"jar包或war包安装到本地仓库中\",{\"1\":{\"667\":1}}],[\"jar包之间的冲突\",{\"0\":{\"652\":1}}],[\"jar包之间的依赖关系\",{\"0\":{\"651\":1}}],[\"jar包往往不是孤立存在的\",{\"1\":{\"651\":1}}],[\"jar\",{\"1\":{\"208\":1,\"651\":1,\"652\":3,\"714\":1,\"715\":1,\"772\":1,\"1285\":1,\"2014\":1,\"2128\":1}}],[\"java为重定向\",{\"1\":{\"2929\":1}}],[\"java为我们准备了异常捕捉的相关方法\",{\"1\":{\"19\":1}}],[\"java实体类\",{\"1\":{\"2667\":1,\"2697\":1}}],[\"java=java\",{\"1\":{\"2566\":1}}],[\"javabean\",{\"1\":{\"2520\":1}}],[\"javabean的生成策略\",{\"1\":{\"2501\":1}}],[\"javaclientgenerator>\",{\"1\":{\"2501\":1}}],[\"javamodelgenerator>\",{\"1\":{\"2501\":1}}],[\"javamail\",{\"1\":{\"1736\":1,\"2527\":1}}],[\"javamail和jaf\",{\"1\":{\"1732\":1}}],[\"javatype=\",{\"1\":{\"2425\":1,\"2431\":1,\"2433\":1,\"2435\":2,\"2509\":1}}],[\"javatype\",{\"1\":{\"2425\":1,\"2437\":1}}],[\"java接口实现类\",{\"1\":{\"2697\":2}}],[\"java接口\",{\"1\":{\"2409\":1,\"2410\":1,\"2413\":1,\"2414\":1,\"2415\":1,\"2422\":1,\"2435\":2,\"2444\":1,\"2447\":1,\"2450\":1,\"2453\":1,\"2456\":1,\"2462\":1,\"2466\":1,\"2467\":1,\"2697\":2}}],[\"java伪代码\",{\"1\":{\"2354\":1,\"2356\":1,\"2358\":1,\"2361\":1,\"2364\":1,\"2367\":1}}],[\"java对象\",{\"1\":{\"2196\":1}}],[\"java开发人员\",{\"1\":{\"2038\":1}}],[\"java文件\",{\"1\":{\"1929\":1,\"1930\":1,\"1931\":1,\"2505\":1}}],[\"java字节码目录\",{\"1\":{\"1772\":1}}],[\"java企业版\",{\"1\":{\"1732\":1}}],[\"java是面向对象的\",{\"1\":{\"1376\":1}}],[\"java是面向对象的编程语言\",{\"1\":{\"1225\":1}}],[\"java是sun公司推出的新一代面向对象的程序设计语言\",{\"1\":{\"1376\":1}}],[\"java等\",{\"1\":{\"1374\":2}}],[\"java中一共给我们提供了八个监听器接口\",{\"1\":{\"2070\":1}}],[\"java中的emplist为null\",{\"1\":{\"2435\":1}}],[\"java中的监听器用于监听web应用中某些对象\",{\"1\":{\"2066\":1}}],[\"java中的方法签名包含访问\",{\"1\":{\"1368\":1}}],[\"java中所有的数据处理都是基于面向对象的编码风格实现的\",{\"1\":{\"1225\":1}}],[\"java核心技术\",{\"1\":{\"1339\":2}}],[\"javax\",{\"1\":{\"1209\":1}}],[\"java数据库连接\",{\"1\":{\"1205\":1}}],[\"java01\",{\"1\":{\"973\":3}}],[\"java8中加入了对时区的支持\",{\"1\":{\"901\":1}}],[\"java面向对象中\",{\"1\":{\"830\":1}}],[\"java<\",{\"1\":{\"683\":1,\"1314\":3,\"2186\":1,\"2267\":1,\"2374\":1,\"2500\":1,\"2505\":1,\"2582\":1,\"2665\":1,\"2756\":1,\"2890\":1}}],[\"java目录用于存放源代码文件\",{\"1\":{\"679\":1}}],[\"java工程对应jar包\",{\"1\":{\"666\":1}}],[\"java扩展名的源文件需要编译成\",{\"1\":{\"658\":1}}],[\"java的前身是oak语言\",{\"1\":{\"1376\":1}}],[\"java的区别\",{\"0\":{\"1376\":1}}],[\"java的动态性让编程的时候更加灵活\",{\"1\":{\"573\":1}}],[\"java的持久化api\",{\"1\":{\"534\":1}}],[\"java不是动态语言\",{\"1\":{\"573\":1}}],[\"java虚拟机\",{\"1\":{\"570\":1}}],[\"java反射机制是在运行状态中\",{\"1\":{\"570\":1}}],[\"java程序时\",{\"1\":{\"553\":1}}],[\"javadoc是\",{\"1\":{\"555\":1}}],[\"javadoc\",{\"1\":{\"536\":1}}],[\"java上的多线程\",{\"0\":{\"453\":1}}],[\"java语言是面向对象的语言\",{\"1\":{\"359\":1}}],[\"java\",{\"0\":{\"370\":2,\"371\":1,\"372\":1,\"1909\":1,\"1910\":1,\"1911\":1,\"2936\":1,\"2955\":1,\"2979\":1,\"3093\":1,\"3121\":1,\"3125\":1},\"1\":{\"208\":5,\"279\":5,\"287\":3,\"292\":1,\"352\":1,\"356\":3,\"364\":5,\"366\":1,\"368\":1,\"370\":5,\"371\":1,\"372\":9,\"373\":7,\"375\":1,\"376\":1,\"378\":1,\"390\":1,\"401\":1,\"405\":1,\"409\":1,\"412\":1,\"421\":1,\"425\":1,\"428\":1,\"430\":1,\"511\":1,\"561\":2,\"562\":1,\"570\":1,\"584\":5,\"587\":9,\"590\":12,\"593\":4,\"674\":2,\"772\":2,\"859\":1,\"891\":3,\"897\":1,\"1205\":1,\"1209\":1,\"1215\":4,\"1216\":3,\"1274\":4,\"1275\":4,\"1287\":1,\"1403\":1,\"1649\":1,\"1651\":1,\"1732\":2,\"1755\":1,\"1775\":1,\"1889\":1,\"1927\":1,\"1928\":2,\"1951\":1,\"1952\":1,\"1960\":1,\"1972\":3,\"1976\":2,\"1980\":1,\"1981\":1,\"1982\":1,\"1987\":3,\"1988\":3,\"1989\":3,\"1990\":3,\"1991\":3,\"2011\":2,\"2016\":1,\"2018\":2,\"2019\":2,\"2020\":2,\"2022\":3,\"2023\":3,\"2025\":4,\"2028\":1,\"2031\":3,\"2055\":1,\"2060\":3,\"2088\":1,\"2094\":1,\"2114\":1,\"2120\":1,\"2124\":1,\"2128\":1,\"2176\":1,\"2186\":1,\"2196\":2,\"2276\":1,\"2282\":3,\"2319\":1,\"2324\":1,\"2332\":1,\"2335\":1,\"2345\":1,\"2348\":1,\"2351\":1,\"2355\":1,\"2357\":1,\"2359\":1,\"2374\":2,\"2406\":1,\"2407\":1,\"2409\":1,\"2410\":1,\"2435\":2,\"2497\":2,\"2501\":2,\"2507\":1,\"2520\":1,\"2530\":1,\"2553\":1,\"2554\":1,\"2555\":1,\"2557\":1,\"2558\":1,\"2559\":1,\"2560\":1,\"2562\":2,\"2563\":2,\"2564\":2,\"2566\":10,\"2567\":3,\"2571\":1,\"2625\":1,\"2631\":4,\"2649\":1,\"2665\":1,\"2667\":3,\"2672\":1,\"2673\":1,\"2674\":1,\"2676\":4,\"2678\":1,\"2679\":1,\"2680\":1,\"2702\":2,\"2750\":1,\"2786\":1,\"2793\":1,\"2796\":1,\"2817\":1,\"2820\":1,\"2830\":2,\"2857\":2,\"2859\":1,\"2861\":2,\"2877\":1,\"2914\":3,\"2918\":1,\"2925\":1,\"2926\":1,\"2928\":1,\"2931\":1}}],[\"javaweb项目的开发与部署\",{\"0\":{\"1770\":1},\"1\":{\"151\":1}}],[\"javaee中自带其他错误提示页处理功能\",{\"1\":{\"1960\":1}}],[\"javaee应用服务器\",{\"0\":{\"1735\":1}}],[\"javaee的版本变化\",{\"0\":{\"1734\":1}}],[\"javaee的技术分布\",{\"0\":{\"1733\":1}}],[\"javaee平台规范了在开发企业级web应用中的技术标准\",{\"1\":{\"1732\":1}}],[\"javaee开发中需要使用到的jar包种类繁多\",{\"1\":{\"650\":1}}],[\"javaee\",{\"0\":{\"1735\":1},\"1\":{\"545\":3,\"1732\":1,\"1791\":3,\"1795\":3,\"1831\":3,\"1834\":3,\"1999\":3,\"2047\":3,\"2058\":3,\"2075\":3,\"2482\":1,\"2746\":3,\"2759\":3}}],[\"javaee简介\",{\"0\":{\"1731\":1},\"1\":{\"151\":1}}],[\"javaee技术\",{\"0\":{\"12\":1},\"1\":{\"4\":1}}],[\"java201021\",{\"1\":{\"76\":1}}],[\"javaspring\",{\"1\":{\"2756\":1}}],[\"javascriptobject\",{\"1\":{\"2123\":1}}],[\"javascript和\",{\"1\":{\"2108\":1}}],[\"javascript开发的简洁\",{\"1\":{\"1557\":1}}],[\"javascript中\",{\"1\":{\"1450\":1}}],[\"javascript中是弱类型变量\",{\"1\":{\"1376\":1}}],[\"javascript程序就可以正确执行\",{\"1\":{\"1374\":1}}],[\"javascript依赖于浏览器本身\",{\"1\":{\"1374\":1}}],[\"javascript不能访问本地的硬盘\",{\"1\":{\"1374\":1}}],[\"javascript不是一种模块化编程语言\",{\"1\":{\"100\":1}}],[\"javascript的组成包含ecmascript\",{\"1\":{\"1372\":1}}],[\"javascript的引擎\",{\"1\":{\"87\":1}}],[\"javascript是一种由netscape\",{\"1\":{\"1372\":1}}],[\"javascript模块化编程\",{\"1\":{\"100\":1}}],[\"javascript\",{\"0\":{\"56\":1,\"1373\":1,\"1376\":1,\"1377\":1,\"1378\":1},\"1\":{\"11\":1,\"61\":1,\"65\":2,\"68\":2,\"70\":3,\"71\":3,\"83\":1,\"84\":1,\"115\":3,\"572\":1,\"1372\":3,\"1379\":1,\"1380\":2,\"1450\":1,\"1544\":1,\"1548\":2,\"1549\":2,\"1552\":2,\"1555\":2,\"1558\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1627\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1634\":1,\"1635\":1,\"1637\":1,\"1638\":1,\"1640\":1,\"1643\":1,\"1646\":1,\"1649\":1,\"1650\":1,\"1651\":1,\"1653\":1,\"1656\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1661\":1,\"1662\":1,\"1664\":1,\"1667\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1676\":1,\"1677\":1,\"1690\":1,\"1695\":1,\"1698\":1,\"1701\":1,\"1720\":1,\"1937\":1,\"2108\":1,\"2170\":1,\"2171\":1,\"2786\":1}}],[\"javaserver\",{\"1\":{\"1927\":1}}],[\"javase<\",{\"1\":{\"1552\":1}}],[\"javase\",{\"1\":{\"386\":1,\"387\":3,\"389\":1}}],[\"javase进阶\",{\"0\":{\"6\":1},\"1\":{\"3\":1}}],[\"javase基础\",{\"0\":{\"5\":1},\"1\":{\"3\":1}}],[\"javase阶段\",{\"0\":{\"3\":1},\"1\":{\"1\":1}}],[\"java基础语法\",{\"0\":{\"2959\":1}}],[\"java基础语法下\",{\"1\":{\"5\":1}}],[\"java基础语法上\",{\"1\":{\"5\":1}}],[\"java基础知识\",{\"0\":{\"2958\":1},\"1\":{\"5\":1}}],[\"java概念\",{\"0\":{\"2957\":1},\"1\":{\"5\":1}}],[\"jsessionid\",{\"1\":{\"2856\":1,\"2857\":1}}],[\"js脚本\",{\"1\":{\"2782\":1}}],[\"jsr310\",{\"1\":{\"2508\":3}}],[\"js表单验证只能校验格式是否正确\",{\"1\":{\"2111\":1}}],[\"js注释\",{\"1\":{\"1952\":1}}],[\"js更新一些\",{\"1\":{\"1943\":1}}],[\"js和angularjs\",{\"1\":{\"1943\":1}}],[\"js和react\",{\"1\":{\"1943\":1}}],[\"js实现的\",{\"1\":{\"1937\":1}}],[\"js一定要注意引入顺序\",{\"1\":{\"1718\":1,\"1721\":1}}],[\"js收到的不是null\",{\"1\":{\"1580\":1}}],[\"js<\",{\"1\":{\"1552\":1}}],[\"js可以根据不同行为\",{\"1\":{\"1428\":1}}],[\"js除了一些常用方法和类以外\",{\"1\":{\"1418\":1}}],[\"js基于对象的脚本语言\",{\"1\":{\"1403\":1}}],[\"js运行于客户端\",{\"1\":{\"1376\":1}}],[\"js运行在浏览器中的内核中的js引擎内部\",{\"1\":{\"87\":1}}],[\"js代码和html代码混合在一个文件中\",{\"1\":{\"1379\":1}}],[\"js代码\",{\"1\":{\"1369\":3}}],[\"js取余数运算对于浮点数仍然有效\",{\"1\":{\"1361\":1}}],[\"js中非常特殊的一个函数\",{\"1\":{\"1406\":1}}],[\"js中数组元素和长度使用时的特征\",{\"1\":{\"1386\":1}}],[\"js中也可以定义一些函数\",{\"1\":{\"1368\":1}}],[\"js中如果出现除零\",{\"1\":{\"1361\":1}}],[\"js中\",{\"1\":{\"1361\":1}}],[\"js中运算符号大部分和java中的运算符一样\",{\"1\":{\"1360\":1}}],[\"js中字符串一般不区分\",{\"1\":{\"1352\":1}}],[\"js中的数组是可以通过修改length属性来改变数组长度的\",{\"1\":{\"1386\":1}}],[\"js中的标识符命名规则和java中的保持一致即可\",{\"1\":{\"1352\":1}}],[\"js中的得代码可以不用以\",{\"1\":{\"1352\":1}}],[\"js中的变量可以反复声明\",{\"1\":{\"1352\":1}}],[\"js中执行\",{\"1\":{\"105\":1,\"108\":1}}],[\"jstlview\",{\"1\":{\"2775\":1}}],[\"jstl格式化标签\",{\"0\":{\"2026\":1}}],[\"jstl的使用\",{\"0\":{\"2015\":1}}],[\"jstl的使用前提\",{\"0\":{\"2014\":1}}],[\"jstl在后台由java代码编写\",{\"1\":{\"2014\":1}}],[\"jstl标签库的组成部分\",{\"0\":{\"2013\":1}}],[\"jstl核心标签库\",{\"0\":{\"2008\":1}}],[\"jstl\",{\"0\":{\"2007\":1},\"1\":{\"211\":1,\"2011\":1,\"2016\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2028\":1,\"2031\":2}}],[\"js文件只有逻辑\",{\"1\":{\"1691\":1}}],[\"js文件是整个编译过程的核心文件\",{\"1\":{\"1687\":1}}],[\"js文件\",{\"1\":{\"173\":1}}],[\"js内置模块\",{\"1\":{\"114\":1,\"115\":1}}],[\"js模块化\",{\"1\":{\"104\":1}}],[\"js全局安装的npm包和工具的位置\",{\"1\":{\"94\":1}}],[\"jsoncallback\",{\"1\":{\"2171\":1}}],[\"jsoncallback=\",{\"1\":{\"2171\":1}}],[\"json是一种较为理想的数据传输格式\",{\"1\":{\"2162\":1}}],[\"jsonobj\",{\"1\":{\"2144\":1}}],[\"jsonp实现跨域请求\",{\"0\":{\"2170\":1}}],[\"jsonp格式\",{\"1\":{\"2141\":1,\"2155\":1}}],[\"jsonp\",{\"0\":{\"2150\":1},\"1\":{\"2141\":1,\"2150\":1,\"2154\":1,\"2155\":2,\"2170\":5}}],[\"jsonp跨域处理\",{\"0\":{\"2167\":1,\"3152\":1},\"1\":{\"213\":1}}],[\"json格式字符串\",{\"1\":{\"2126\":1}}],[\"json格式创建对象\",{\"1\":{\"2124\":1}}],[\"json和js对象互转\",{\"0\":{\"2126\":1}}],[\"json的介绍和应用\",{\"0\":{\"2123\":1}}],[\"json中的配置下载依赖\",{\"1\":{\"94\":1}}],[\"json\",{\"0\":{\"1421\":1,\"2125\":1},\"1\":{\"92\":1,\"94\":1,\"1415\":1,\"1421\":1,\"1686\":2,\"1808\":1,\"2123\":1,\"2124\":2,\"2125\":4,\"2126\":4,\"2132\":2,\"2141\":1,\"2155\":3,\"2161\":1,\"2163\":1,\"2165\":1,\"2166\":4,\"2176\":3}}],[\"json文件中\",{\"1\":{\"1687\":1}}],[\"json文件\",{\"1\":{\"92\":1,\"94\":1,\"114\":1}}],[\"js已经集成了npm工具\",{\"1\":{\"90\":1}}],[\"js目录\",{\"1\":{\"90\":1}}],[\"js默认安装的npm包和工具的位置\",{\"1\":{\"90\":1}}],[\"js的架势\",{\"1\":{\"1943\":1}}],[\"js的一些前端框架\",{\"1\":{\"1937\":1}}],[\"js的扩展\",{\"1\":{\"1718\":1,\"1721\":1}}],[\"js的数组可以通过索引改变数组的长度\",{\"1\":{\"1386\":1}}],[\"js的包管理工具\",{\"1\":{\"90\":1}}],[\"js的作用\",{\"0\":{\"84\":1}}],[\"js包管理工具\",{\"1\":{\"90\":1}}],[\"js是jquery文件的压缩版\",{\"1\":{\"1546\":1}}],[\"js是一种运行于浏览器端上的小脚本语句\",{\"1\":{\"1372\":1}}],[\"js是一个非常好的选择\",{\"1\":{\"84\":1}}],[\"js是一个事件驱动i\",{\"1\":{\"83\":1}}],[\"js是弱类型的脚本语言\",{\"1\":{\"1352\":1}}],[\"js是脱离浏览器环境运行的javascript程序\",{\"1\":{\"87\":1}}],[\"js引擎\",{\"1\":{\"87\":1}}],[\"js解析器\",{\"1\":{\"87\":1}}],[\"js小程序\",{\"1\":{\"86\":1}}],[\"js快速入门\",{\"0\":{\"86\":1}}],[\"js也是一个非常好的选择\",{\"1\":{\"84\":1}}],[\"jscript\",{\"1\":{\"70\":1,\"1372\":1}}],[\"js\",{\"0\":{\"83\":1,\"85\":1,\"1689\":1,\"2125\":1},\"1\":{\"65\":2,\"83\":1,\"84\":2,\"87\":3,\"88\":2,\"98\":4,\"102\":1,\"103\":2,\"104\":1,\"106\":1,\"107\":2,\"109\":1,\"110\":2,\"111\":1,\"114\":11,\"115\":2,\"1355\":1,\"1370\":2,\"1377\":1,\"1380\":2,\"1389\":1,\"1406\":1,\"1543\":1,\"1545\":2,\"1548\":2,\"1549\":2,\"1552\":2,\"1555\":2,\"1563\":8,\"1564\":8,\"1567\":2,\"1568\":2,\"1570\":2,\"1571\":2,\"1572\":2,\"1573\":2,\"1574\":2,\"1579\":2,\"1580\":1,\"1585\":2,\"1586\":2,\"1588\":2,\"1589\":2,\"1590\":2,\"1591\":2,\"1596\":8,\"1602\":8,\"1606\":8,\"1609\":8,\"1614\":2,\"1616\":4,\"1617\":2,\"1686\":2,\"1687\":1,\"1695\":2,\"1698\":2,\"1701\":2,\"1703\":1,\"1718\":2,\"1721\":2,\"1785\":1,\"1943\":1,\"2123\":1,\"2125\":3,\"2131\":2,\"2132\":4,\"2159\":2,\"2166\":2,\"2169\":2,\"2170\":2,\"2171\":2,\"2176\":2,\"2740\":1,\"2785\":1,\"2786\":2,\"2789\":4,\"2824\":2,\"2877\":2}}],[\"jsp我们可以看到applicationscope\",{\"1\":{\"2926\":1}}],[\"jsp我们可以看到sessionscope\",{\"1\":{\"2926\":1}}],[\"jsp文件除外\",{\"1\":{\"2788\":1}}],[\"jsp文件转换成java代码之后\",{\"1\":{\"1932\":1}}],[\"jsp文件转换成一个\",{\"1\":{\"1929\":1}}],[\"jsp除外\",{\"1\":{\"2759\":1}}],[\"jsp端口不一致http\",{\"1\":{\"2168\":1}}],[\"jsp上\",{\"1\":{\"2063\":1}}],[\"jsp欢迎页\",{\"1\":{\"2059\":1}}],[\"jsp代码\",{\"1\":{\"1972\":1,\"1976\":1,\"2814\":1,\"2817\":1,\"2820\":1}}],[\"jsp给我们准备好了九个可以直接使用而不用我们自己去new的对象\",{\"1\":{\"1966\":1}}],[\"jsp标签中的\",{\"1\":{\"1962\":1}}],[\"jsp可以通过include指令来包含其他文件\",{\"1\":{\"1961\":1}}],[\"jsp<\",{\"1\":{\"1960\":2,\"2748\":1,\"2750\":1,\"2786\":1,\"2893\":1}}],[\"jsp指令可以用来设置整个jsp页面相关的属性\",{\"1\":{\"1956\":1}}],[\"jsp指令标签\",{\"0\":{\"1954\":1},\"1\":{\"211\":1}}],[\"jsp作为视图层view使用\",{\"1\":{\"1953\":1}}],[\"jsp作为一种前后端混合技术就不在适用了\",{\"1\":{\"1950\":1}}],[\"jsp更擅长展示数据\",{\"1\":{\"1953\":1}}],[\"jsp页面中通过标签进行使用\",{\"1\":{\"2014\":1}}],[\"jsp页面功能和servlet后台功能是完全能够互换的\",{\"1\":{\"1953\":1}}],[\"jsp页面和图片等静态资源作为\",{\"1\":{\"660\":1}}],[\"jsp和servlet本质上是相同的\",{\"1\":{\"1953\":1}}],[\"jsp允许在html编码中嵌入java代码\",{\"1\":{\"1952\":1}}],[\"jsp中的三种指令标签\",{\"0\":{\"1958\":1}}],[\"jsp中的注释问题\",{\"0\":{\"1952\":1}}],[\"jsp中的变量问题\",{\"0\":{\"1951\":1}}],[\"jsp中的html代码相当于是我们向浏览器响应的html内容的模板\",{\"1\":{\"1929\":1}}],[\"jsp技术在某些独特的领域和在一些特定的需求下\",{\"1\":{\"1950\":1}}],[\"jsp技术是一种基础性技术\",{\"1\":{\"1950\":1}}],[\"jsp技术有点类似asp技术\",{\"1\":{\"1548\":1}}],[\"jsp得性能问题\",{\"0\":{\"1950\":1}}],[\"jsp转译之后\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"jsp慢的原因不仅仅是第一次请求需要进行转译和编译\",{\"1\":{\"1936\":1,\"1950\":1}}],[\"jsp引擎调用java虚拟机来解释执行class文件\",{\"1\":{\"1935\":1}}],[\"jsp引擎调用java编译器对这个servlet进行编译\",{\"1\":{\"1935\":1}}],[\"jsp加载引擎的匹配路径规则如下\",{\"1\":{\"1934\":1}}],[\"jsp加载引擎\",{\"0\":{\"1934\":1}}],[\"jsp加载引擎会帮助我们将一个\",{\"1\":{\"1929\":1}}],[\"jspdestory\",{\"1\":{\"1933\":2}}],[\"jspservlet\",{\"1\":{\"1934\":1}}],[\"jspservlet执行业务\",{\"1\":{\"1769\":1}}],[\"jspservice方法中\",{\"1\":{\"1933\":1,\"1951\":1}}],[\"jspservice\",{\"1\":{\"1933\":4}}],[\"jspinit\",{\"1\":{\"1933\":3}}],[\"jsp本质上就是一个servlet\",{\"1\":{\"1932\":1}}],[\"jsp网页转译成servlet\",{\"1\":{\"1930\":1}}],[\"jsp执行过程\",{\"0\":{\"1930\":1}}],[\"jsp的九大内置对象\",{\"0\":{\"1967\":1}}],[\"jsp的使用建议\",{\"0\":{\"1953\":1}}],[\"jsp的性能问题\",{\"0\":{\"1936\":1}}],[\"jsp的执行过程大致可以分为两个时期\",{\"1\":{\"1930\":1}}],[\"jsp的本质其实就是一个servlet\",{\"1\":{\"1929\":1}}],[\"jsp的内置对象\",{\"0\":{\"1965\":1},\"1\":{\"211\":1}}],[\"jsp看似是html代码\",{\"1\":{\"1929\":1}}],[\"jsp运行原理\",{\"0\":{\"1929\":1}}],[\"jsp做动态显示demo\",{\"0\":{\"1928\":1}}],[\"jsp具备了java技术的简单易用\",{\"1\":{\"1927\":1}}],[\"jsp与servlet一样\",{\"1\":{\"1927\":1}}],[\"jsp部署于网络服务器上\",{\"1\":{\"1927\":1}}],[\"jsp请求\",{\"1\":{\"1769\":1}}],[\"jsp接收后都是string类型\",{\"1\":{\"1580\":1}}],[\"jsp全名为java\",{\"1\":{\"1548\":1}}],[\"jsp注意事项\",{\"0\":{\"1949\":1},\"1\":{\"211\":1}}],[\"jsp入门\",{\"0\":{\"1926\":1},\"1\":{\"211\":1}}],[\"jsp\",{\"0\":{\"211\":1,\"1927\":1,\"2055\":1,\"2786\":1},\"1\":{\"12\":1,\"1548\":1,\"1552\":1,\"1732\":1,\"1736\":1,\"1769\":3,\"1772\":1,\"1776\":1,\"1785\":1,\"1841\":2,\"1842\":1,\"1856\":1,\"1860\":1,\"1927\":2,\"1931\":1,\"1933\":2,\"1960\":2,\"1961\":1,\"1962\":4,\"1963\":1,\"1972\":1,\"1976\":1,\"1996\":1,\"2016\":1,\"2018\":1,\"2019\":1,\"2020\":1,\"2022\":1,\"2023\":1,\"2025\":2,\"2028\":1,\"2031\":2,\"2060\":3,\"2062\":1,\"2063\":2,\"2088\":1,\"2168\":4,\"2740\":1,\"2748\":2,\"2749\":1,\"2750\":1,\"2753\":2,\"2760\":3,\"2764\":3,\"2765\":2,\"2775\":1,\"2779\":1,\"2780\":1,\"2789\":1,\"2793\":1,\"2794\":1,\"2796\":1,\"2798\":1,\"2800\":1,\"2801\":1,\"2820\":1,\"2824\":1,\"2857\":1,\"2861\":2,\"2863\":2,\"2864\":2,\"2866\":3,\"2867\":2,\"2869\":2,\"2870\":2,\"2872\":3,\"2873\":3,\"2893\":2,\"2901\":1,\"2914\":3,\"2925\":1,\"2929\":1}}],[\"jquery会自动替换\",{\"1\":{\"2171\":1}}],[\"jquery也会根据这函数名自动在前端处理回调函数\",{\"1\":{\"2170\":1}}],[\"jquery也给我们提供了一些专用的方法\",{\"1\":{\"2155\":1}}],[\"jquery实现ajax的其他写法\",{\"0\":{\"2156\":1}}],[\"jquery根据http响应mime信息返回xml或者text\",{\"1\":{\"2155\":1}}],[\"jquery将自动替换后一个\",{\"1\":{\"2141\":1}}],[\"jquery将自动根据http包mime信息返回responsexml或responsetext\",{\"1\":{\"2141\":1}}],[\"jquery将自动为不同值对应同一个名称\",{\"1\":{\"2140\":1}}],[\"jquery不仅仅对dom操作进行了封装\",{\"1\":{\"2129\":1}}],[\"jquery形式实现ajax默认前后端传递数据的格式就是json\",{\"1\":{\"2124\":1}}],[\"jquery转换为dom对象\",{\"1\":{\"1573\":1}}],[\"jquery对象转换成dom对象的方式是jquery对象\",{\"1\":{\"1573\":1}}],[\"jquery对象如何调用dom对象的属性和方法\",{\"1\":{\"1573\":1}}],[\"jquery对象\",{\"1\":{\"1573\":2}}],[\"jquery方式获取页面元素\",{\"1\":{\"1573\":1}}],[\"jquery方法触发\",{\"1\":{\"1572\":1}}],[\"jquery中\",{\"1\":{\"1572\":1}}],[\"jquery中的dom编程\",{\"0\":{\"1565\":1},\"1\":{\"58\":1}}],[\"jquery就专门的封装了操作class属性值的方法\",{\"1\":{\"1568\":1}}],[\"jquery给我们封装了一个快捷遍历元素的方法\",{\"1\":{\"1574\":1}}],[\"jquery给我们封装了text\",{\"1\":{\"1570\":1}}],[\"jquery给我们封装了css\",{\"1\":{\"1568\":1}}],[\"jquery给我们封装了attr\",{\"1\":{\"1567\":1}}],[\"jquery文件\",{\"1\":{\"1563\":1,\"1564\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1}}],[\"jquery提供了丰富的选择器功能\",{\"1\":{\"1547\":1}}],[\"jquery具有强大的选择器功能\",{\"1\":{\"1546\":1}}],[\"jquery本身就是一个js文件\",{\"1\":{\"1546\":1}}],[\"jquery的尝试\",{\"0\":{\"1543\":1}}],[\"jquery的版本\",{\"0\":{\"1542\":1}}],[\"jquery的优点\",{\"0\":{\"1540\":1}}],[\"jquery能做的javascript也能做\",{\"1\":{\"1541\":1}}],[\"jquery与ajax实现\",{\"0\":{\"2129\":1},\"1\":{\"213\":1}}],[\"jquery选择器\",{\"0\":{\"1547\":1},\"1\":{\"58\":1}}],[\"jquery\",{\"0\":{\"58\":1,\"2130\":1,\"2133\":1},\"1\":{\"11\":1,\"94\":2,\"1541\":1,\"1543\":1,\"1545\":1,\"1546\":1,\"1548\":1,\"1549\":1,\"1552\":2,\"1555\":1,\"1563\":1,\"1564\":1,\"1567\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1579\":1,\"1580\":1,\"1585\":1,\"1586\":1,\"1588\":1,\"1589\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1602\":1,\"1606\":1,\"1609\":1,\"2131\":1,\"2132\":2,\"2157\":1,\"2159\":1,\"2166\":1,\"2169\":1,\"2170\":1,\"2171\":1,\"2176\":1,\"2877\":1}}],[\"jdo\",{\"1\":{\"2530\":1}}],[\"jdbd历史版本及特征\",{\"0\":{\"1207\":1}}],[\"jdbcspring\",{\"1\":{\"2756\":1}}],[\"jdbcconnection>\",{\"1\":{\"2501\":1}}],[\"jdbctype之间的相互转换\",{\"1\":{\"2437\":1}}],[\"jdbctype\",{\"1\":{\"2437\":1,\"2509\":3}}],[\"jdbctype=\",{\"1\":{\"2433\":1,\"2435\":2,\"2509\":1}}],[\"jdbctemplate的批处理\",{\"0\":{\"2675\":1}}],[\"jdbctemplate的使用\",{\"0\":{\"2668\":1}}],[\"jdbctemplate是spring框架中提供的一个对象\",{\"1\":{\"2669\":1}}],[\"jdbctemplate\",{\"0\":{\"2661\":1},\"1\":{\"216\":1,\"1263\":1,\"2666\":2,\"2667\":2,\"2672\":2,\"2673\":1,\"2674\":3,\"2676\":1,\"2697\":3}}],[\"jdbc|managed\",{\"1\":{\"2316\":1}}],[\"jdbc主程序\",{\"0\":{\"1242\":1}}],[\"jdbc控制事物主要就是在学习如何让多个数据库操作成为一个整体\",{\"1\":{\"1233\":1}}],[\"jdbc4\",{\"1\":{\"1216\":1}}],[\"jdbc访问数据库编码步骤\",{\"0\":{\"1210\":1}}],[\"jdbc2\",{\"1\":{\"1209\":1,\"1216\":2,\"2301\":1}}],[\"jdbc1\",{\"1\":{\"1209\":1}}],[\"jdbc操作相关的接口和类位于java\",{\"1\":{\"1208\":1}}],[\"jdbc<\",{\"1\":{\"700\":1,\"2665\":1,\"2756\":1,\"2890\":1}}],[\"jdbc的api整理\",{\"0\":{\"1254\":1},\"1\":{\"54\":1}}],[\"jdbc初识\",{\"0\":{\"1204\":1},\"1\":{\"54\":1}}],[\"jdbc\",{\"0\":{\"54\":1,\"1208\":1,\"1209\":1,\"2317\":1},\"1\":{\"10\":1,\"1205\":1,\"1208\":1,\"1209\":1,\"1215\":2,\"1216\":1,\"1217\":3,\"1219\":2,\"1220\":2,\"1221\":2,\"1222\":2,\"1227\":2,\"1231\":2,\"1234\":2,\"1235\":2,\"1242\":2,\"1251\":1,\"1252\":2,\"1253\":2,\"1255\":1,\"1256\":2,\"1264\":2,\"1266\":2,\"1274\":2,\"1278\":1,\"1280\":1,\"1288\":1,\"1732\":1,\"1976\":2,\"2187\":1,\"2196\":1,\"2278\":3,\"2293\":1,\"2297\":1,\"2298\":1,\"2301\":1,\"2317\":3,\"2332\":7,\"2374\":11,\"2437\":1,\"2501\":2,\"2527\":1,\"2530\":3,\"2583\":5,\"2584\":5,\"2665\":1,\"2666\":12,\"2701\":1,\"2706\":1,\"2710\":1,\"2897\":5,\"2903\":6,\"2906\":5,\"2908\":1}}],[\"jdk动态代理\",{\"1\":{\"2607\":1}}],[\"jdk版本不同\",{\"1\":{\"1757\":1}}],[\"jdk新的日期和时间api的优势\",{\"0\":{\"902\":1}}],[\"jdk新特性\",{\"0\":{\"8\":1},\"1\":{\"3\":1}}],[\"jdk8\",{\"1\":{\"905\":1}}],[\"jdk8引入了重复注解的概念\",{\"1\":{\"904\":1}}],[\"jdk8中增加了一套全新的日期时间api\",{\"1\":{\"892\":1}}],[\"jdk8新特性\",{\"0\":{\"51\":1},\"1\":{\"8\":1}}],[\"jdk内置注解\",{\"0\":{\"540\":1}}],[\"jdk5\",{\"1\":{\"308\":1,\"532\":1,\"552\":1}}],[\"jdk\",{\"0\":{\"253\":1,\"254\":1},\"1\":{\"2610\":1}}],[\"jdk1\",{\"0\":{\"255\":1,\"294\":1,\"295\":1,\"377\":1,\"560\":1,\"561\":1,\"814\":1},\"1\":{\"233\":1,\"235\":1,\"255\":1,\"260\":1,\"263\":1,\"277\":2,\"290\":1,\"295\":1,\"297\":1,\"298\":1,\"311\":9,\"364\":1,\"378\":1,\"397\":3,\"473\":1,\"674\":1,\"819\":1,\"1776\":1,\"2508\":2}}],[\"jdk17新特性\",{\"1\":{\"8\":1}}],[\"jdk9\",{\"1\":{\"8\":1}}],[\"故障分析\",{\"0\":{\"2943\":1},\"1\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
